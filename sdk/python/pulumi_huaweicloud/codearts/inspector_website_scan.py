# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['InspectorWebsiteScanArgs', 'InspectorWebsiteScan']

@pulumi.input_type
class InspectorWebsiteScanArgs:
    def __init__(__self__, *,
                 task_name: pulumi.Input[_builtins.str],
                 url: pulumi.Input[_builtins.str],
                 cve_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 malicious_code: Optional[pulumi.Input[_builtins.bool]] = None,
                 malicious_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 picture_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_scan: Optional[pulumi.Input[_builtins.bool]] = None,
                 scan_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 task_period: Optional[pulumi.Input[_builtins.str]] = None,
                 task_type: Optional[pulumi.Input[_builtins.str]] = None,
                 text_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 timer: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_time: Optional[pulumi.Input[_builtins.str]] = None,
                 weak_pwd_scan: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a InspectorWebsiteScan resource.
        :param pulumi.Input[_builtins.str] task_name: Specifies the task name. Changing this parameter will create a new resource.
               The valid length is limited from `1` to `24`. Only Chinese characters, letters, digits, hyphens (-) and underscores (_)
               are allowed, and cannot start with a hyphen (-).
        :param pulumi.Input[_builtins.str] url: Specifies the destination URL to scan. Changing this parameter will create a new
               resource. The maximum length is `256`. The format should be `http(s)://example.com` or
               `http(s)://{public IPv4 address}:{PORT}`. The value can only be the website address of CodeArts inspector website,
               and the website address must be authorized before it can be used.
        :param pulumi.Input[_builtins.bool] cve_check: Specifies whether to perform CVE vulnerability scanning. Changing this parameter
               will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] malicious_code: Specifies whether to perform malicious code scanning.
               Changing this parameter will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] malicious_link: Specifies whether to perform link health detection.
               Changing this parameter will create a new resource. Defaults to **false**.
               
               > Fields `picture_check`, `malicious_code` and `malicious_link` are only supported by the Enterprise editions of the
               vulnerability management service.
        :param pulumi.Input[_builtins.bool] picture_check: Specifies whether to conduct website content compliance image detection.
               Changing this parameter will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] port_scan: Specifies whether to perform port scanning. Changing this parameter will
               create a new resource. Defaults to **false**. Basic, Professional, Advanced and Enterprise editions of vulnerability
               management services support configuring this parameter.
        :param pulumi.Input[_builtins.str] scan_mode: Specifies the task scan mode. Changing this parameter will create a new
               resource. Valid values are:
               + **fast**: Quick scan.
               + **normal**: Normal scan.
               + **deep**: Deep scan.
               
               Defaults to **normal**.
        :param pulumi.Input[_builtins.str] task_period: Specifies the scheduled trigger period of the monitor task. Changing this
               parameter will create a new resource. This field is required when `task_type` is set to **monitor**. Valid values are:
               + **everyday**: Trigger monitor task every day.
               + **threedays**: Trigger monitor task every three days.
               + **everyweek**: Trigger monitor task every week.
               + **everymonth**: Trigger monitor task every month.
        :param pulumi.Input[_builtins.str] task_type: Specifies the scan task type. Changing this parameter will create a new
               resource. Valid values are:
               + **normal**: Normal task type.
               + **monitor**: Monitor task type. The prerequisite for using **monitor** task type is to upgrade the vulnerability
               management service to the Professional editions or above.
               
               Defaults to **normal**.
        :param pulumi.Input[_builtins.bool] text_check: Specifies whether to conduct website content compliance text detection.
               Changing this parameter will create a new resource. Defaults to **false**.
               
               > Fields `weak_pwd_scan`, `cve_check` and `text_check` are only supported by the Professional, Advanced and Enterprise
               editions of the vulnerability management service.
        :param pulumi.Input[_builtins.str] timer: Specifies the scheduled trigger time of the normal task. Changing this parameter
               will create a new resource. This field is valid only when `task_type` is set to **normal**. The field format is
               **yyyy-mm-dd hh:mm:ss**. The trigger time needs to be after the current time. The normal task will start immediately
               when this field is not configured.
        :param pulumi.Input[_builtins.str] trigger_time: Specifies the scheduled trigger time of the monitor task. Changing this
               parameter will create a new resource. This field is required when `task_type` is set to **monitor**. The field format
               is **yyyy-mm-dd hh:mm:ss**.
        :param pulumi.Input[_builtins.bool] weak_pwd_scan: Specifies whether to scan for weak passwords. Changing this parameter will
               create a new resource. Defaults to **false**.
        """
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "url", url)
        if cve_check is not None:
            pulumi.set(__self__, "cve_check", cve_check)
        if malicious_code is not None:
            pulumi.set(__self__, "malicious_code", malicious_code)
        if malicious_link is not None:
            pulumi.set(__self__, "malicious_link", malicious_link)
        if picture_check is not None:
            pulumi.set(__self__, "picture_check", picture_check)
        if port_scan is not None:
            pulumi.set(__self__, "port_scan", port_scan)
        if scan_mode is not None:
            pulumi.set(__self__, "scan_mode", scan_mode)
        if task_period is not None:
            pulumi.set(__self__, "task_period", task_period)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if text_check is not None:
            pulumi.set(__self__, "text_check", text_check)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if trigger_time is not None:
            pulumi.set(__self__, "trigger_time", trigger_time)
        if weak_pwd_scan is not None:
            pulumi.set(__self__, "weak_pwd_scan", weak_pwd_scan)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the task name. Changing this parameter will create a new resource.
        The valid length is limited from `1` to `24`. Only Chinese characters, letters, digits, hyphens (-) and underscores (_)
        are allowed, and cannot start with a hyphen (-).
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the destination URL to scan. Changing this parameter will create a new
        resource. The maximum length is `256`. The format should be `http(s)://example.com` or
        `http(s)://{public IPv4 address}:{PORT}`. The value can only be the website address of CodeArts inspector website,
        and the website address must be authorized before it can be used.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter(name="cveCheck")
    def cve_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform CVE vulnerability scanning. Changing this parameter
        will create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "cve_check")

    @cve_check.setter
    def cve_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cve_check", value)

    @_builtins.property
    @pulumi.getter(name="maliciousCode")
    def malicious_code(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform malicious code scanning.
        Changing this parameter will create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "malicious_code")

    @malicious_code.setter
    def malicious_code(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "malicious_code", value)

    @_builtins.property
    @pulumi.getter(name="maliciousLink")
    def malicious_link(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform link health detection.
        Changing this parameter will create a new resource. Defaults to **false**.

        > Fields `picture_check`, `malicious_code` and `malicious_link` are only supported by the Enterprise editions of the
        vulnerability management service.
        """
        return pulumi.get(self, "malicious_link")

    @malicious_link.setter
    def malicious_link(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "malicious_link", value)

    @_builtins.property
    @pulumi.getter(name="pictureCheck")
    def picture_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to conduct website content compliance image detection.
        Changing this parameter will create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "picture_check")

    @picture_check.setter
    def picture_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "picture_check", value)

    @_builtins.property
    @pulumi.getter(name="portScan")
    def port_scan(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform port scanning. Changing this parameter will
        create a new resource. Defaults to **false**. Basic, Professional, Advanced and Enterprise editions of vulnerability
        management services support configuring this parameter.
        """
        return pulumi.get(self, "port_scan")

    @port_scan.setter
    def port_scan(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "port_scan", value)

    @_builtins.property
    @pulumi.getter(name="scanMode")
    def scan_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task scan mode. Changing this parameter will create a new
        resource. Valid values are:
        + **fast**: Quick scan.
        + **normal**: Normal scan.
        + **deep**: Deep scan.

        Defaults to **normal**.
        """
        return pulumi.get(self, "scan_mode")

    @scan_mode.setter
    def scan_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scan_mode", value)

    @_builtins.property
    @pulumi.getter(name="taskPeriod")
    def task_period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scheduled trigger period of the monitor task. Changing this
        parameter will create a new resource. This field is required when `task_type` is set to **monitor**. Valid values are:
        + **everyday**: Trigger monitor task every day.
        + **threedays**: Trigger monitor task every three days.
        + **everyweek**: Trigger monitor task every week.
        + **everymonth**: Trigger monitor task every month.
        """
        return pulumi.get(self, "task_period")

    @task_period.setter
    def task_period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_period", value)

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scan task type. Changing this parameter will create a new
        resource. Valid values are:
        + **normal**: Normal task type.
        + **monitor**: Monitor task type. The prerequisite for using **monitor** task type is to upgrade the vulnerability
        management service to the Professional editions or above.

        Defaults to **normal**.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_type", value)

    @_builtins.property
    @pulumi.getter(name="textCheck")
    def text_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to conduct website content compliance text detection.
        Changing this parameter will create a new resource. Defaults to **false**.

        > Fields `weak_pwd_scan`, `cve_check` and `text_check` are only supported by the Professional, Advanced and Enterprise
        editions of the vulnerability management service.
        """
        return pulumi.get(self, "text_check")

    @text_check.setter
    def text_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "text_check", value)

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scheduled trigger time of the normal task. Changing this parameter
        will create a new resource. This field is valid only when `task_type` is set to **normal**. The field format is
        **yyyy-mm-dd hh:mm:ss**. The trigger time needs to be after the current time. The normal task will start immediately
        when this field is not configured.
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timer", value)

    @_builtins.property
    @pulumi.getter(name="triggerTime")
    def trigger_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scheduled trigger time of the monitor task. Changing this
        parameter will create a new resource. This field is required when `task_type` is set to **monitor**. The field format
        is **yyyy-mm-dd hh:mm:ss**.
        """
        return pulumi.get(self, "trigger_time")

    @trigger_time.setter
    def trigger_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_time", value)

    @_builtins.property
    @pulumi.getter(name="weakPwdScan")
    def weak_pwd_scan(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to scan for weak passwords. Changing this parameter will
        create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "weak_pwd_scan")

    @weak_pwd_scan.setter
    def weak_pwd_scan(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "weak_pwd_scan", value)


@pulumi.input_type
class _InspectorWebsiteScanState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 cve_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 high: Optional[pulumi.Input[_builtins.int]] = None,
                 hint: Optional[pulumi.Input[_builtins.int]] = None,
                 low: Optional[pulumi.Input[_builtins.int]] = None,
                 malicious_code: Optional[pulumi.Input[_builtins.bool]] = None,
                 malicious_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 middle: Optional[pulumi.Input[_builtins.int]] = None,
                 pack_num: Optional[pulumi.Input[_builtins.int]] = None,
                 picture_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_scan: Optional[pulumi.Input[_builtins.bool]] = None,
                 progress: Optional[pulumi.Input[_builtins.int]] = None,
                 reason: Optional[pulumi.Input[_builtins.str]] = None,
                 safe_level: Optional[pulumi.Input[_builtins.str]] = None,
                 scan_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule_status: Optional[pulumi.Input[_builtins.str]] = None,
                 score: Optional[pulumi.Input[_builtins.int]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_period: Optional[pulumi.Input[_builtins.str]] = None,
                 task_status: Optional[pulumi.Input[_builtins.str]] = None,
                 task_type: Optional[pulumi.Input[_builtins.str]] = None,
                 text_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 timer: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_time: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 weak_pwd_scan: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering InspectorWebsiteScan resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the task.
        :param pulumi.Input[_builtins.bool] cve_check: Specifies whether to perform CVE vulnerability scanning. Changing this parameter
               will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.int] high: The number of high-risk vulnerabilities.
        :param pulumi.Input[_builtins.int] hint: The number of hint-risk vulnerabilities.
        :param pulumi.Input[_builtins.int] low: The number of low-severity vulnerabilities.
        :param pulumi.Input[_builtins.bool] malicious_code: Specifies whether to perform malicious code scanning.
               Changing this parameter will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] malicious_link: Specifies whether to perform link health detection.
               Changing this parameter will create a new resource. Defaults to **false**.
               
               > Fields `picture_check`, `malicious_code` and `malicious_link` are only supported by the Enterprise editions of the
               vulnerability management service.
        :param pulumi.Input[_builtins.int] middle: The number of medium-risk vulnerabilities.
        :param pulumi.Input[_builtins.int] pack_num: The total number of packages.
        :param pulumi.Input[_builtins.bool] picture_check: Specifies whether to conduct website content compliance image detection.
               Changing this parameter will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] port_scan: Specifies whether to perform port scanning. Changing this parameter will
               create a new resource. Defaults to **false**. Basic, Professional, Advanced and Enterprise editions of vulnerability
               management services support configuring this parameter.
        :param pulumi.Input[_builtins.int] progress: The task progress.
        :param pulumi.Input[_builtins.str] reason: The description of task status.
        :param pulumi.Input[_builtins.str] safe_level: The security level. Valid values are **safety**, **average** and **highrisk**.
        :param pulumi.Input[_builtins.str] scan_mode: Specifies the task scan mode. Changing this parameter will create a new
               resource. Valid values are:
               + **fast**: Quick scan.
               + **normal**: Normal scan.
               + **deep**: Deep scan.
               
               Defaults to **normal**.
        :param pulumi.Input[_builtins.str] schedule_status: The monitor task status. Valid values are **running**, **waiting** and **finished**. This field is
               valid only when `task_type` is **monitor**.
        :param pulumi.Input[_builtins.int] score: The safety score.
        :param pulumi.Input[_builtins.str] task_name: Specifies the task name. Changing this parameter will create a new resource.
               The valid length is limited from `1` to `24`. Only Chinese characters, letters, digits, hyphens (-) and underscores (_)
               are allowed, and cannot start with a hyphen (-).
        :param pulumi.Input[_builtins.str] task_period: Specifies the scheduled trigger period of the monitor task. Changing this
               parameter will create a new resource. This field is required when `task_type` is set to **monitor**. Valid values are:
               + **everyday**: Trigger monitor task every day.
               + **threedays**: Trigger monitor task every three days.
               + **everyweek**: Trigger monitor task every week.
               + **everymonth**: Trigger monitor task every month.
        :param pulumi.Input[_builtins.str] task_status: The task status. Valid values are **running**, **success**, **waiting**, **ready** and **failure**.
        :param pulumi.Input[_builtins.str] task_type: Specifies the scan task type. Changing this parameter will create a new
               resource. Valid values are:
               + **normal**: Normal task type.
               + **monitor**: Monitor task type. The prerequisite for using **monitor** task type is to upgrade the vulnerability
               management service to the Professional editions or above.
               
               Defaults to **normal**.
        :param pulumi.Input[_builtins.bool] text_check: Specifies whether to conduct website content compliance text detection.
               Changing this parameter will create a new resource. Defaults to **false**.
               
               > Fields `weak_pwd_scan`, `cve_check` and `text_check` are only supported by the Professional, Advanced and Enterprise
               editions of the vulnerability management service.
        :param pulumi.Input[_builtins.str] timer: Specifies the scheduled trigger time of the normal task. Changing this parameter
               will create a new resource. This field is valid only when `task_type` is set to **normal**. The field format is
               **yyyy-mm-dd hh:mm:ss**. The trigger time needs to be after the current time. The normal task will start immediately
               when this field is not configured.
        :param pulumi.Input[_builtins.str] trigger_time: Specifies the scheduled trigger time of the monitor task. Changing this
               parameter will create a new resource. This field is required when `task_type` is set to **monitor**. The field format
               is **yyyy-mm-dd hh:mm:ss**.
        :param pulumi.Input[_builtins.str] url: Specifies the destination URL to scan. Changing this parameter will create a new
               resource. The maximum length is `256`. The format should be `http(s)://example.com` or
               `http(s)://{public IPv4 address}:{PORT}`. The value can only be the website address of CodeArts inspector website,
               and the website address must be authorized before it can be used.
        :param pulumi.Input[_builtins.bool] weak_pwd_scan: Specifies whether to scan for weak passwords. Changing this parameter will
               create a new resource. Defaults to **false**.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if cve_check is not None:
            pulumi.set(__self__, "cve_check", cve_check)
        if high is not None:
            pulumi.set(__self__, "high", high)
        if hint is not None:
            pulumi.set(__self__, "hint", hint)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if malicious_code is not None:
            pulumi.set(__self__, "malicious_code", malicious_code)
        if malicious_link is not None:
            pulumi.set(__self__, "malicious_link", malicious_link)
        if middle is not None:
            pulumi.set(__self__, "middle", middle)
        if pack_num is not None:
            pulumi.set(__self__, "pack_num", pack_num)
        if picture_check is not None:
            pulumi.set(__self__, "picture_check", picture_check)
        if port_scan is not None:
            pulumi.set(__self__, "port_scan", port_scan)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if safe_level is not None:
            pulumi.set(__self__, "safe_level", safe_level)
        if scan_mode is not None:
            pulumi.set(__self__, "scan_mode", scan_mode)
        if schedule_status is not None:
            pulumi.set(__self__, "schedule_status", schedule_status)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if task_period is not None:
            pulumi.set(__self__, "task_period", task_period)
        if task_status is not None:
            pulumi.set(__self__, "task_status", task_status)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if text_check is not None:
            pulumi.set(__self__, "text_check", text_check)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if trigger_time is not None:
            pulumi.set(__self__, "trigger_time", trigger_time)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if weak_pwd_scan is not None:
            pulumi.set(__self__, "weak_pwd_scan", weak_pwd_scan)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the task.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="cveCheck")
    def cve_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform CVE vulnerability scanning. Changing this parameter
        will create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "cve_check")

    @cve_check.setter
    def cve_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cve_check", value)

    @_builtins.property
    @pulumi.getter
    def high(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of high-risk vulnerabilities.
        """
        return pulumi.get(self, "high")

    @high.setter
    def high(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "high", value)

    @_builtins.property
    @pulumi.getter
    def hint(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of hint-risk vulnerabilities.
        """
        return pulumi.get(self, "hint")

    @hint.setter
    def hint(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hint", value)

    @_builtins.property
    @pulumi.getter
    def low(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of low-severity vulnerabilities.
        """
        return pulumi.get(self, "low")

    @low.setter
    def low(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "low", value)

    @_builtins.property
    @pulumi.getter(name="maliciousCode")
    def malicious_code(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform malicious code scanning.
        Changing this parameter will create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "malicious_code")

    @malicious_code.setter
    def malicious_code(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "malicious_code", value)

    @_builtins.property
    @pulumi.getter(name="maliciousLink")
    def malicious_link(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform link health detection.
        Changing this parameter will create a new resource. Defaults to **false**.

        > Fields `picture_check`, `malicious_code` and `malicious_link` are only supported by the Enterprise editions of the
        vulnerability management service.
        """
        return pulumi.get(self, "malicious_link")

    @malicious_link.setter
    def malicious_link(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "malicious_link", value)

    @_builtins.property
    @pulumi.getter
    def middle(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of medium-risk vulnerabilities.
        """
        return pulumi.get(self, "middle")

    @middle.setter
    def middle(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "middle", value)

    @_builtins.property
    @pulumi.getter(name="packNum")
    def pack_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The total number of packages.
        """
        return pulumi.get(self, "pack_num")

    @pack_num.setter
    def pack_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "pack_num", value)

    @_builtins.property
    @pulumi.getter(name="pictureCheck")
    def picture_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to conduct website content compliance image detection.
        Changing this parameter will create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "picture_check")

    @picture_check.setter
    def picture_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "picture_check", value)

    @_builtins.property
    @pulumi.getter(name="portScan")
    def port_scan(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform port scanning. Changing this parameter will
        create a new resource. Defaults to **false**. Basic, Professional, Advanced and Enterprise editions of vulnerability
        management services support configuring this parameter.
        """
        return pulumi.get(self, "port_scan")

    @port_scan.setter
    def port_scan(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "port_scan", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The task progress.
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of task status.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reason", value)

    @_builtins.property
    @pulumi.getter(name="safeLevel")
    def safe_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The security level. Valid values are **safety**, **average** and **highrisk**.
        """
        return pulumi.get(self, "safe_level")

    @safe_level.setter
    def safe_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "safe_level", value)

    @_builtins.property
    @pulumi.getter(name="scanMode")
    def scan_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task scan mode. Changing this parameter will create a new
        resource. Valid values are:
        + **fast**: Quick scan.
        + **normal**: Normal scan.
        + **deep**: Deep scan.

        Defaults to **normal**.
        """
        return pulumi.get(self, "scan_mode")

    @scan_mode.setter
    def scan_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scan_mode", value)

    @_builtins.property
    @pulumi.getter(name="scheduleStatus")
    def schedule_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The monitor task status. Valid values are **running**, **waiting** and **finished**. This field is
        valid only when `task_type` is **monitor**.
        """
        return pulumi.get(self, "schedule_status")

    @schedule_status.setter
    def schedule_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schedule_status", value)

    @_builtins.property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The safety score.
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "score", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task name. Changing this parameter will create a new resource.
        The valid length is limited from `1` to `24`. Only Chinese characters, letters, digits, hyphens (-) and underscores (_)
        are allowed, and cannot start with a hyphen (-).
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="taskPeriod")
    def task_period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scheduled trigger period of the monitor task. Changing this
        parameter will create a new resource. This field is required when `task_type` is set to **monitor**. Valid values are:
        + **everyday**: Trigger monitor task every day.
        + **threedays**: Trigger monitor task every three days.
        + **everyweek**: Trigger monitor task every week.
        + **everymonth**: Trigger monitor task every month.
        """
        return pulumi.get(self, "task_period")

    @task_period.setter
    def task_period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_period", value)

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The task status. Valid values are **running**, **success**, **waiting**, **ready** and **failure**.
        """
        return pulumi.get(self, "task_status")

    @task_status.setter
    def task_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_status", value)

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scan task type. Changing this parameter will create a new
        resource. Valid values are:
        + **normal**: Normal task type.
        + **monitor**: Monitor task type. The prerequisite for using **monitor** task type is to upgrade the vulnerability
        management service to the Professional editions or above.

        Defaults to **normal**.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_type", value)

    @_builtins.property
    @pulumi.getter(name="textCheck")
    def text_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to conduct website content compliance text detection.
        Changing this parameter will create a new resource. Defaults to **false**.

        > Fields `weak_pwd_scan`, `cve_check` and `text_check` are only supported by the Professional, Advanced and Enterprise
        editions of the vulnerability management service.
        """
        return pulumi.get(self, "text_check")

    @text_check.setter
    def text_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "text_check", value)

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scheduled trigger time of the normal task. Changing this parameter
        will create a new resource. This field is valid only when `task_type` is set to **normal**. The field format is
        **yyyy-mm-dd hh:mm:ss**. The trigger time needs to be after the current time. The normal task will start immediately
        when this field is not configured.
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timer", value)

    @_builtins.property
    @pulumi.getter(name="triggerTime")
    def trigger_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the scheduled trigger time of the monitor task. Changing this
        parameter will create a new resource. This field is required when `task_type` is set to **monitor**. The field format
        is **yyyy-mm-dd hh:mm:ss**.
        """
        return pulumi.get(self, "trigger_time")

    @trigger_time.setter
    def trigger_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_time", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination URL to scan. Changing this parameter will create a new
        resource. The maximum length is `256`. The format should be `http(s)://example.com` or
        `http(s)://{public IPv4 address}:{PORT}`. The value can only be the website address of CodeArts inspector website,
        and the website address must be authorized before it can be used.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter(name="weakPwdScan")
    def weak_pwd_scan(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to scan for weak passwords. Changing this parameter will
        create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "weak_pwd_scan")

    @weak_pwd_scan.setter
    def weak_pwd_scan(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "weak_pwd_scan", value)


@pulumi.type_token("huaweicloud:codearts/inspectorWebsiteScan:InspectorWebsiteScan")
class InspectorWebsiteScan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cve_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 malicious_code: Optional[pulumi.Input[_builtins.bool]] = None,
                 malicious_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 picture_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_scan: Optional[pulumi.Input[_builtins.bool]] = None,
                 scan_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_period: Optional[pulumi.Input[_builtins.str]] = None,
                 task_type: Optional[pulumi.Input[_builtins.str]] = None,
                 text_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 timer: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_time: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 weak_pwd_scan: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Manages a CodeArts inspector website scan resource within HuaweiCloud.

        ## Example Usage

        ### With normal task type

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        url = config.require_object("url")
        timer = config.require_object("timer")
        test = huaweicloud.codearts.InspectorWebsiteScan("test",
            task_name="normal-name",
            task_type="normal",
            url=url,
            timer=timer,
            scan_mode="deep",
            port_scan=True)
        ```

        ### With monitor task type

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        url = config.require_object("url")
        trigger_time = config.require_object("triggerTime")
        test = huaweicloud.codearts.InspectorWebsiteScan("test",
            task_name="monitor-name",
            task_type="monitor",
            url=url,
            trigger_time=trigger_time,
            task_period="everyweek",
            scan_mode="normal",
            port_scan=True)
        ```

        ## Import

        The CodeArts inspector website scan can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/inspectorWebsiteScan:InspectorWebsiteScan test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] cve_check: Specifies whether to perform CVE vulnerability scanning. Changing this parameter
               will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] malicious_code: Specifies whether to perform malicious code scanning.
               Changing this parameter will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] malicious_link: Specifies whether to perform link health detection.
               Changing this parameter will create a new resource. Defaults to **false**.
               
               > Fields `picture_check`, `malicious_code` and `malicious_link` are only supported by the Enterprise editions of the
               vulnerability management service.
        :param pulumi.Input[_builtins.bool] picture_check: Specifies whether to conduct website content compliance image detection.
               Changing this parameter will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] port_scan: Specifies whether to perform port scanning. Changing this parameter will
               create a new resource. Defaults to **false**. Basic, Professional, Advanced and Enterprise editions of vulnerability
               management services support configuring this parameter.
        :param pulumi.Input[_builtins.str] scan_mode: Specifies the task scan mode. Changing this parameter will create a new
               resource. Valid values are:
               + **fast**: Quick scan.
               + **normal**: Normal scan.
               + **deep**: Deep scan.
               
               Defaults to **normal**.
        :param pulumi.Input[_builtins.str] task_name: Specifies the task name. Changing this parameter will create a new resource.
               The valid length is limited from `1` to `24`. Only Chinese characters, letters, digits, hyphens (-) and underscores (_)
               are allowed, and cannot start with a hyphen (-).
        :param pulumi.Input[_builtins.str] task_period: Specifies the scheduled trigger period of the monitor task. Changing this
               parameter will create a new resource. This field is required when `task_type` is set to **monitor**. Valid values are:
               + **everyday**: Trigger monitor task every day.
               + **threedays**: Trigger monitor task every three days.
               + **everyweek**: Trigger monitor task every week.
               + **everymonth**: Trigger monitor task every month.
        :param pulumi.Input[_builtins.str] task_type: Specifies the scan task type. Changing this parameter will create a new
               resource. Valid values are:
               + **normal**: Normal task type.
               + **monitor**: Monitor task type. The prerequisite for using **monitor** task type is to upgrade the vulnerability
               management service to the Professional editions or above.
               
               Defaults to **normal**.
        :param pulumi.Input[_builtins.bool] text_check: Specifies whether to conduct website content compliance text detection.
               Changing this parameter will create a new resource. Defaults to **false**.
               
               > Fields `weak_pwd_scan`, `cve_check` and `text_check` are only supported by the Professional, Advanced and Enterprise
               editions of the vulnerability management service.
        :param pulumi.Input[_builtins.str] timer: Specifies the scheduled trigger time of the normal task. Changing this parameter
               will create a new resource. This field is valid only when `task_type` is set to **normal**. The field format is
               **yyyy-mm-dd hh:mm:ss**. The trigger time needs to be after the current time. The normal task will start immediately
               when this field is not configured.
        :param pulumi.Input[_builtins.str] trigger_time: Specifies the scheduled trigger time of the monitor task. Changing this
               parameter will create a new resource. This field is required when `task_type` is set to **monitor**. The field format
               is **yyyy-mm-dd hh:mm:ss**.
        :param pulumi.Input[_builtins.str] url: Specifies the destination URL to scan. Changing this parameter will create a new
               resource. The maximum length is `256`. The format should be `http(s)://example.com` or
               `http(s)://{public IPv4 address}:{PORT}`. The value can only be the website address of CodeArts inspector website,
               and the website address must be authorized before it can be used.
        :param pulumi.Input[_builtins.bool] weak_pwd_scan: Specifies whether to scan for weak passwords. Changing this parameter will
               create a new resource. Defaults to **false**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InspectorWebsiteScanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CodeArts inspector website scan resource within HuaweiCloud.

        ## Example Usage

        ### With normal task type

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        url = config.require_object("url")
        timer = config.require_object("timer")
        test = huaweicloud.codearts.InspectorWebsiteScan("test",
            task_name="normal-name",
            task_type="normal",
            url=url,
            timer=timer,
            scan_mode="deep",
            port_scan=True)
        ```

        ### With monitor task type

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        url = config.require_object("url")
        trigger_time = config.require_object("triggerTime")
        test = huaweicloud.codearts.InspectorWebsiteScan("test",
            task_name="monitor-name",
            task_type="monitor",
            url=url,
            trigger_time=trigger_time,
            task_period="everyweek",
            scan_mode="normal",
            port_scan=True)
        ```

        ## Import

        The CodeArts inspector website scan can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:codearts/inspectorWebsiteScan:InspectorWebsiteScan test <id>
        ```

        :param str resource_name: The name of the resource.
        :param InspectorWebsiteScanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InspectorWebsiteScanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cve_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 malicious_code: Optional[pulumi.Input[_builtins.bool]] = None,
                 malicious_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 picture_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_scan: Optional[pulumi.Input[_builtins.bool]] = None,
                 scan_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_period: Optional[pulumi.Input[_builtins.str]] = None,
                 task_type: Optional[pulumi.Input[_builtins.str]] = None,
                 text_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 timer: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_time: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 weak_pwd_scan: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InspectorWebsiteScanArgs.__new__(InspectorWebsiteScanArgs)

            __props__.__dict__["cve_check"] = cve_check
            __props__.__dict__["malicious_code"] = malicious_code
            __props__.__dict__["malicious_link"] = malicious_link
            __props__.__dict__["picture_check"] = picture_check
            __props__.__dict__["port_scan"] = port_scan
            __props__.__dict__["scan_mode"] = scan_mode
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            __props__.__dict__["task_period"] = task_period
            __props__.__dict__["task_type"] = task_type
            __props__.__dict__["text_check"] = text_check
            __props__.__dict__["timer"] = timer
            __props__.__dict__["trigger_time"] = trigger_time
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["weak_pwd_scan"] = weak_pwd_scan
            __props__.__dict__["created_at"] = None
            __props__.__dict__["high"] = None
            __props__.__dict__["hint"] = None
            __props__.__dict__["low"] = None
            __props__.__dict__["middle"] = None
            __props__.__dict__["pack_num"] = None
            __props__.__dict__["progress"] = None
            __props__.__dict__["reason"] = None
            __props__.__dict__["safe_level"] = None
            __props__.__dict__["schedule_status"] = None
            __props__.__dict__["score"] = None
            __props__.__dict__["task_status"] = None
        super(InspectorWebsiteScan, __self__).__init__(
            'huaweicloud:codearts/inspectorWebsiteScan:InspectorWebsiteScan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            cve_check: Optional[pulumi.Input[_builtins.bool]] = None,
            high: Optional[pulumi.Input[_builtins.int]] = None,
            hint: Optional[pulumi.Input[_builtins.int]] = None,
            low: Optional[pulumi.Input[_builtins.int]] = None,
            malicious_code: Optional[pulumi.Input[_builtins.bool]] = None,
            malicious_link: Optional[pulumi.Input[_builtins.bool]] = None,
            middle: Optional[pulumi.Input[_builtins.int]] = None,
            pack_num: Optional[pulumi.Input[_builtins.int]] = None,
            picture_check: Optional[pulumi.Input[_builtins.bool]] = None,
            port_scan: Optional[pulumi.Input[_builtins.bool]] = None,
            progress: Optional[pulumi.Input[_builtins.int]] = None,
            reason: Optional[pulumi.Input[_builtins.str]] = None,
            safe_level: Optional[pulumi.Input[_builtins.str]] = None,
            scan_mode: Optional[pulumi.Input[_builtins.str]] = None,
            schedule_status: Optional[pulumi.Input[_builtins.str]] = None,
            score: Optional[pulumi.Input[_builtins.int]] = None,
            task_name: Optional[pulumi.Input[_builtins.str]] = None,
            task_period: Optional[pulumi.Input[_builtins.str]] = None,
            task_status: Optional[pulumi.Input[_builtins.str]] = None,
            task_type: Optional[pulumi.Input[_builtins.str]] = None,
            text_check: Optional[pulumi.Input[_builtins.bool]] = None,
            timer: Optional[pulumi.Input[_builtins.str]] = None,
            trigger_time: Optional[pulumi.Input[_builtins.str]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None,
            weak_pwd_scan: Optional[pulumi.Input[_builtins.bool]] = None) -> 'InspectorWebsiteScan':
        """
        Get an existing InspectorWebsiteScan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the task.
        :param pulumi.Input[_builtins.bool] cve_check: Specifies whether to perform CVE vulnerability scanning. Changing this parameter
               will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.int] high: The number of high-risk vulnerabilities.
        :param pulumi.Input[_builtins.int] hint: The number of hint-risk vulnerabilities.
        :param pulumi.Input[_builtins.int] low: The number of low-severity vulnerabilities.
        :param pulumi.Input[_builtins.bool] malicious_code: Specifies whether to perform malicious code scanning.
               Changing this parameter will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] malicious_link: Specifies whether to perform link health detection.
               Changing this parameter will create a new resource. Defaults to **false**.
               
               > Fields `picture_check`, `malicious_code` and `malicious_link` are only supported by the Enterprise editions of the
               vulnerability management service.
        :param pulumi.Input[_builtins.int] middle: The number of medium-risk vulnerabilities.
        :param pulumi.Input[_builtins.int] pack_num: The total number of packages.
        :param pulumi.Input[_builtins.bool] picture_check: Specifies whether to conduct website content compliance image detection.
               Changing this parameter will create a new resource. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] port_scan: Specifies whether to perform port scanning. Changing this parameter will
               create a new resource. Defaults to **false**. Basic, Professional, Advanced and Enterprise editions of vulnerability
               management services support configuring this parameter.
        :param pulumi.Input[_builtins.int] progress: The task progress.
        :param pulumi.Input[_builtins.str] reason: The description of task status.
        :param pulumi.Input[_builtins.str] safe_level: The security level. Valid values are **safety**, **average** and **highrisk**.
        :param pulumi.Input[_builtins.str] scan_mode: Specifies the task scan mode. Changing this parameter will create a new
               resource. Valid values are:
               + **fast**: Quick scan.
               + **normal**: Normal scan.
               + **deep**: Deep scan.
               
               Defaults to **normal**.
        :param pulumi.Input[_builtins.str] schedule_status: The monitor task status. Valid values are **running**, **waiting** and **finished**. This field is
               valid only when `task_type` is **monitor**.
        :param pulumi.Input[_builtins.int] score: The safety score.
        :param pulumi.Input[_builtins.str] task_name: Specifies the task name. Changing this parameter will create a new resource.
               The valid length is limited from `1` to `24`. Only Chinese characters, letters, digits, hyphens (-) and underscores (_)
               are allowed, and cannot start with a hyphen (-).
        :param pulumi.Input[_builtins.str] task_period: Specifies the scheduled trigger period of the monitor task. Changing this
               parameter will create a new resource. This field is required when `task_type` is set to **monitor**. Valid values are:
               + **everyday**: Trigger monitor task every day.
               + **threedays**: Trigger monitor task every three days.
               + **everyweek**: Trigger monitor task every week.
               + **everymonth**: Trigger monitor task every month.
        :param pulumi.Input[_builtins.str] task_status: The task status. Valid values are **running**, **success**, **waiting**, **ready** and **failure**.
        :param pulumi.Input[_builtins.str] task_type: Specifies the scan task type. Changing this parameter will create a new
               resource. Valid values are:
               + **normal**: Normal task type.
               + **monitor**: Monitor task type. The prerequisite for using **monitor** task type is to upgrade the vulnerability
               management service to the Professional editions or above.
               
               Defaults to **normal**.
        :param pulumi.Input[_builtins.bool] text_check: Specifies whether to conduct website content compliance text detection.
               Changing this parameter will create a new resource. Defaults to **false**.
               
               > Fields `weak_pwd_scan`, `cve_check` and `text_check` are only supported by the Professional, Advanced and Enterprise
               editions of the vulnerability management service.
        :param pulumi.Input[_builtins.str] timer: Specifies the scheduled trigger time of the normal task. Changing this parameter
               will create a new resource. This field is valid only when `task_type` is set to **normal**. The field format is
               **yyyy-mm-dd hh:mm:ss**. The trigger time needs to be after the current time. The normal task will start immediately
               when this field is not configured.
        :param pulumi.Input[_builtins.str] trigger_time: Specifies the scheduled trigger time of the monitor task. Changing this
               parameter will create a new resource. This field is required when `task_type` is set to **monitor**. The field format
               is **yyyy-mm-dd hh:mm:ss**.
        :param pulumi.Input[_builtins.str] url: Specifies the destination URL to scan. Changing this parameter will create a new
               resource. The maximum length is `256`. The format should be `http(s)://example.com` or
               `http(s)://{public IPv4 address}:{PORT}`. The value can only be the website address of CodeArts inspector website,
               and the website address must be authorized before it can be used.
        :param pulumi.Input[_builtins.bool] weak_pwd_scan: Specifies whether to scan for weak passwords. Changing this parameter will
               create a new resource. Defaults to **false**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InspectorWebsiteScanState.__new__(_InspectorWebsiteScanState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["cve_check"] = cve_check
        __props__.__dict__["high"] = high
        __props__.__dict__["hint"] = hint
        __props__.__dict__["low"] = low
        __props__.__dict__["malicious_code"] = malicious_code
        __props__.__dict__["malicious_link"] = malicious_link
        __props__.__dict__["middle"] = middle
        __props__.__dict__["pack_num"] = pack_num
        __props__.__dict__["picture_check"] = picture_check
        __props__.__dict__["port_scan"] = port_scan
        __props__.__dict__["progress"] = progress
        __props__.__dict__["reason"] = reason
        __props__.__dict__["safe_level"] = safe_level
        __props__.__dict__["scan_mode"] = scan_mode
        __props__.__dict__["schedule_status"] = schedule_status
        __props__.__dict__["score"] = score
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["task_period"] = task_period
        __props__.__dict__["task_status"] = task_status
        __props__.__dict__["task_type"] = task_type
        __props__.__dict__["text_check"] = text_check
        __props__.__dict__["timer"] = timer
        __props__.__dict__["trigger_time"] = trigger_time
        __props__.__dict__["url"] = url
        __props__.__dict__["weak_pwd_scan"] = weak_pwd_scan
        return InspectorWebsiteScan(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the task.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="cveCheck")
    def cve_check(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to perform CVE vulnerability scanning. Changing this parameter
        will create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "cve_check")

    @_builtins.property
    @pulumi.getter
    def high(self) -> pulumi.Output[_builtins.int]:
        """
        The number of high-risk vulnerabilities.
        """
        return pulumi.get(self, "high")

    @_builtins.property
    @pulumi.getter
    def hint(self) -> pulumi.Output[_builtins.int]:
        """
        The number of hint-risk vulnerabilities.
        """
        return pulumi.get(self, "hint")

    @_builtins.property
    @pulumi.getter
    def low(self) -> pulumi.Output[_builtins.int]:
        """
        The number of low-severity vulnerabilities.
        """
        return pulumi.get(self, "low")

    @_builtins.property
    @pulumi.getter(name="maliciousCode")
    def malicious_code(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to perform malicious code scanning.
        Changing this parameter will create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "malicious_code")

    @_builtins.property
    @pulumi.getter(name="maliciousLink")
    def malicious_link(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to perform link health detection.
        Changing this parameter will create a new resource. Defaults to **false**.

        > Fields `picture_check`, `malicious_code` and `malicious_link` are only supported by the Enterprise editions of the
        vulnerability management service.
        """
        return pulumi.get(self, "malicious_link")

    @_builtins.property
    @pulumi.getter
    def middle(self) -> pulumi.Output[_builtins.int]:
        """
        The number of medium-risk vulnerabilities.
        """
        return pulumi.get(self, "middle")

    @_builtins.property
    @pulumi.getter(name="packNum")
    def pack_num(self) -> pulumi.Output[_builtins.int]:
        """
        The total number of packages.
        """
        return pulumi.get(self, "pack_num")

    @_builtins.property
    @pulumi.getter(name="pictureCheck")
    def picture_check(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to conduct website content compliance image detection.
        Changing this parameter will create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "picture_check")

    @_builtins.property
    @pulumi.getter(name="portScan")
    def port_scan(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to perform port scanning. Changing this parameter will
        create a new resource. Defaults to **false**. Basic, Professional, Advanced and Enterprise editions of vulnerability
        management services support configuring this parameter.
        """
        return pulumi.get(self, "port_scan")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> pulumi.Output[_builtins.int]:
        """
        The task progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> pulumi.Output[_builtins.str]:
        """
        The description of task status.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter(name="safeLevel")
    def safe_level(self) -> pulumi.Output[_builtins.str]:
        """
        The security level. Valid values are **safety**, **average** and **highrisk**.
        """
        return pulumi.get(self, "safe_level")

    @_builtins.property
    @pulumi.getter(name="scanMode")
    def scan_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the task scan mode. Changing this parameter will create a new
        resource. Valid values are:
        + **fast**: Quick scan.
        + **normal**: Normal scan.
        + **deep**: Deep scan.

        Defaults to **normal**.
        """
        return pulumi.get(self, "scan_mode")

    @_builtins.property
    @pulumi.getter(name="scheduleStatus")
    def schedule_status(self) -> pulumi.Output[_builtins.str]:
        """
        The monitor task status. Valid values are **running**, **waiting** and **finished**. This field is
        valid only when `task_type` is **monitor**.
        """
        return pulumi.get(self, "schedule_status")

    @_builtins.property
    @pulumi.getter
    def score(self) -> pulumi.Output[_builtins.int]:
        """
        The safety score.
        """
        return pulumi.get(self, "score")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the task name. Changing this parameter will create a new resource.
        The valid length is limited from `1` to `24`. Only Chinese characters, letters, digits, hyphens (-) and underscores (_)
        are allowed, and cannot start with a hyphen (-).
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskPeriod")
    def task_period(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the scheduled trigger period of the monitor task. Changing this
        parameter will create a new resource. This field is required when `task_type` is set to **monitor**. Valid values are:
        + **everyday**: Trigger monitor task every day.
        + **threedays**: Trigger monitor task every three days.
        + **everyweek**: Trigger monitor task every week.
        + **everymonth**: Trigger monitor task every month.
        """
        return pulumi.get(self, "task_period")

    @_builtins.property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> pulumi.Output[_builtins.str]:
        """
        The task status. Valid values are **running**, **success**, **waiting**, **ready** and **failure**.
        """
        return pulumi.get(self, "task_status")

    @_builtins.property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the scan task type. Changing this parameter will create a new
        resource. Valid values are:
        + **normal**: Normal task type.
        + **monitor**: Monitor task type. The prerequisite for using **monitor** task type is to upgrade the vulnerability
        management service to the Professional editions or above.

        Defaults to **normal**.
        """
        return pulumi.get(self, "task_type")

    @_builtins.property
    @pulumi.getter(name="textCheck")
    def text_check(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to conduct website content compliance text detection.
        Changing this parameter will create a new resource. Defaults to **false**.

        > Fields `weak_pwd_scan`, `cve_check` and `text_check` are only supported by the Professional, Advanced and Enterprise
        editions of the vulnerability management service.
        """
        return pulumi.get(self, "text_check")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the scheduled trigger time of the normal task. Changing this parameter
        will create a new resource. This field is valid only when `task_type` is set to **normal**. The field format is
        **yyyy-mm-dd hh:mm:ss**. The trigger time needs to be after the current time. The normal task will start immediately
        when this field is not configured.
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="triggerTime")
    def trigger_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the scheduled trigger time of the monitor task. Changing this
        parameter will create a new resource. This field is required when `task_type` is set to **monitor**. The field format
        is **yyyy-mm-dd hh:mm:ss**.
        """
        return pulumi.get(self, "trigger_time")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the destination URL to scan. Changing this parameter will create a new
        resource. The maximum length is `256`. The format should be `http(s)://example.com` or
        `http(s)://{public IPv4 address}:{PORT}`. The value can only be the website address of CodeArts inspector website,
        and the website address must be authorized before it can be used.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter(name="weakPwdScan")
    def weak_pwd_scan(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to scan for weak passwords. Changing this parameter will
        create a new resource. Defaults to **false**.
        """
        return pulumi.get(self, "weak_pwd_scan")

