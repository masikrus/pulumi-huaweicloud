# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetScheduledTasksResult',
    'AwaitableGetScheduledTasksResult',
    'get_scheduled_tasks',
    'get_scheduled_tasks_output',
]

@pulumi.output_type
class GetScheduledTasksResult:
    """
    A collection of values returned by getScheduledTasks.
    """
    def __init__(__self__, end_time=None, id=None, instance_id=None, job_name=None, job_status=None, region=None, schedules=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if job_name and not isinstance(job_name, str):
            raise TypeError("Expected argument 'job_name' to be a str")
        pulumi.set(__self__, "job_name", job_name)
        if job_status and not isinstance(job_status, str):
            raise TypeError("Expected argument 'job_status' to be a str")
        pulumi.set(__self__, "job_status", job_status)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if schedules and not isinstance(schedules, list):
            raise TypeError("Expected argument 'schedules' to be a list")
        pulumi.set(__self__, "schedules", schedules)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Indicates the end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[_builtins.str]:
        """
        Indicates the task name.
        """
        return pulumi.get(self, "job_name")

    @_builtins.property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> Optional[_builtins.str]:
        """
        Indicates the task execution status.
        """
        return pulumi.get(self, "job_status")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetScheduledTasksScheduleResult']:
        """
        Indicates the tasks list.
        """
        return pulumi.get(self, "schedules")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        Indicates the start time.
        """
        return pulumi.get(self, "start_time")


class AwaitableGetScheduledTasksResult(GetScheduledTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScheduledTasksResult(
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            job_name=self.job_name,
            job_status=self.job_status,
            region=self.region,
            schedules=self.schedules,
            start_time=self.start_time)


def get_scheduled_tasks(end_time: Optional[_builtins.str] = None,
                        instance_id: Optional[_builtins.str] = None,
                        job_name: Optional[_builtins.str] = None,
                        job_status: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        start_time: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScheduledTasksResult:
    """
    Use this data source to get the list of DDS scheduled tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    job_status = config.require_object("jobStatus")
    job_name = config.require_object("jobName")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Dds.get_scheduled_tasks(instance_id=instance_id,
        job_status=job_status,
        job_name=job_name,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str end_time: Specifies the end time.
           The format of the end time is **yyyy-mm-ddThh:mm:ssZ**.
           Defaults to current time.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str job_name: Specifies the task name.
           Value can be as follows:
           + **RESIZE_FLAVOR**: Change vCPUs and memory of an instance.
    :param _builtins.str job_status: Specifies the task execution status.
           Value can be as follows:
           + **Pending**: The task is not executed.
           + **Running**: The task is being executed.
           + **Completed**: The task is successfully executed.
           + **Failed**: The task fails to be executed.
           + **Canceled**: The task is canceled.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time.
           The format of the start time is **yyyy-mm-ddThh:mm:ssZ**.
           Defaults to seven days before the current time.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['jobName'] = job_name
    __args__['jobStatus'] = job_status
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dds/getScheduledTasks:getScheduledTasks', __args__, opts=opts, typ=GetScheduledTasksResult).value

    return AwaitableGetScheduledTasksResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        job_name=pulumi.get(__ret__, 'job_name'),
        job_status=pulumi.get(__ret__, 'job_status'),
        region=pulumi.get(__ret__, 'region'),
        schedules=pulumi.get(__ret__, 'schedules'),
        start_time=pulumi.get(__ret__, 'start_time'))
def get_scheduled_tasks_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               job_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               job_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetScheduledTasksResult]:
    """
    Use this data source to get the list of DDS scheduled tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    job_status = config.require_object("jobStatus")
    job_name = config.require_object("jobName")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Dds.get_scheduled_tasks(instance_id=instance_id,
        job_status=job_status,
        job_name=job_name,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str end_time: Specifies the end time.
           The format of the end time is **yyyy-mm-ddThh:mm:ssZ**.
           Defaults to current time.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str job_name: Specifies the task name.
           Value can be as follows:
           + **RESIZE_FLAVOR**: Change vCPUs and memory of an instance.
    :param _builtins.str job_status: Specifies the task execution status.
           Value can be as follows:
           + **Pending**: The task is not executed.
           + **Running**: The task is being executed.
           + **Completed**: The task is successfully executed.
           + **Failed**: The task fails to be executed.
           + **Canceled**: The task is canceled.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time.
           The format of the start time is **yyyy-mm-ddThh:mm:ssZ**.
           Defaults to seven days before the current time.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['jobName'] = job_name
    __args__['jobStatus'] = job_status
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dds/getScheduledTasks:getScheduledTasks', __args__, opts=opts, typ=GetScheduledTasksResult)
    return __ret__.apply(lambda __response__: GetScheduledTasksResult(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        job_name=pulumi.get(__response__, 'job_name'),
        job_status=pulumi.get(__response__, 'job_status'),
        region=pulumi.get(__response__, 'region'),
        schedules=pulumi.get(__response__, 'schedules'),
        start_time=pulumi.get(__response__, 'start_time')))
