# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAuditLogsResult',
    'AwaitableGetAuditLogsResult',
    'get_audit_logs',
    'get_audit_logs_output',
]

@pulumi.output_type
class GetAuditLogsResult:
    """
    A collection of values returned by getAuditLogs.
    """
    def __init__(__self__, audit_logs=None, end_time=None, id=None, instance_id=None, node_id=None, region=None, start_time=None):
        if audit_logs and not isinstance(audit_logs, list):
            raise TypeError("Expected argument 'audit_logs' to be a list")
        pulumi.set(__self__, "audit_logs", audit_logs)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if node_id and not isinstance(node_id, str):
            raise TypeError("Expected argument 'node_id' to be a str")
        pulumi.set(__self__, "node_id", node_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="auditLogs")
    def audit_logs(self) -> Sequence['outputs.GetAuditLogsAuditLogResult']:
        """
        Indicates the audit log details.
        """
        return pulumi.get(self, "audit_logs")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates the end time of the audit log. The format is **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the start time of the audit log. The format is **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "start_time")


class AwaitableGetAuditLogsResult(GetAuditLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuditLogsResult(
            audit_logs=self.audit_logs,
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            node_id=self.node_id,
            region=self.region,
            start_time=self.start_time)


def get_audit_logs(end_time: Optional[_builtins.str] = None,
                   instance_id: Optional[_builtins.str] = None,
                   node_id: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   start_time: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuditLogsResult:
    """
    Use this data source to get the list of DDS instance audit logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Dds.get_audit_logs(instance_id=instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str end_time: Specifies the end time. The format of the end time is **yyyy-mm-ddThh:mm:ssZ**.
           The end time must be later than the start time.
           The time span cannot be longer than 30 days.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str node_id: Specifies the ID of the node whose audit logs are to be queried.
           The audit logs of cluster instances are distributed on mongos nodes.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time. The format of the start time is **yyyy-MM-ddThh:mm:ssZ**.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['nodeId'] = node_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dds/getAuditLogs:getAuditLogs', __args__, opts=opts, typ=GetAuditLogsResult).value

    return AwaitableGetAuditLogsResult(
        audit_logs=pulumi.get(__ret__, 'audit_logs'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        node_id=pulumi.get(__ret__, 'node_id'),
        region=pulumi.get(__ret__, 'region'),
        start_time=pulumi.get(__ret__, 'start_time'))
def get_audit_logs_output(end_time: Optional[pulumi.Input[_builtins.str]] = None,
                          instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                          node_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          start_time: Optional[pulumi.Input[_builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAuditLogsResult]:
    """
    Use this data source to get the list of DDS instance audit logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Dds.get_audit_logs(instance_id=instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str end_time: Specifies the end time. The format of the end time is **yyyy-mm-ddThh:mm:ssZ**.
           The end time must be later than the start time.
           The time span cannot be longer than 30 days.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str node_id: Specifies the ID of the node whose audit logs are to be queried.
           The audit logs of cluster instances are distributed on mongos nodes.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time. The format of the start time is **yyyy-MM-ddThh:mm:ssZ**.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['nodeId'] = node_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dds/getAuditLogs:getAuditLogs', __args__, opts=opts, typ=GetAuditLogsResult)
    return __ret__.apply(lambda __response__: GetAuditLogsResult(
        audit_logs=pulumi.get(__response__, 'audit_logs'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        node_id=pulumi.get(__response__, 'node_id'),
        region=pulumi.get(__response__, 'region'),
        start_time=pulumi.get(__response__, 'start_time')))
