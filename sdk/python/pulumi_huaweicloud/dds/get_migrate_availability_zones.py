# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetMigrateAvailabilityZonesResult',
    'AwaitableGetMigrateAvailabilityZonesResult',
    'get_migrate_availability_zones',
    'get_migrate_availability_zones_output',
]

@pulumi.output_type
class GetMigrateAvailabilityZonesResult:
    """
    A collection of values returned by getMigrateAvailabilityZones.
    """
    def __init__(__self__, id=None, instance_id=None, names=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def names(self) -> Sequence[_builtins.str]:
        """
        The names of availability zone where DDS instance can migrate.
        """
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetMigrateAvailabilityZonesResult(GetMigrateAvailabilityZonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMigrateAvailabilityZonesResult(
            id=self.id,
            instance_id=self.instance_id,
            names=self.names,
            region=self.region)


def get_migrate_availability_zones(instance_id: Optional[_builtins.str] = None,
                                   region: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMigrateAvailabilityZonesResult:
    """
    Use this data source to query availability zones where DDS instance can migrate.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Dds.get_migrate_availability_zones(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the DDS instance ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dds/getMigrateAvailabilityZones:getMigrateAvailabilityZones', __args__, opts=opts, typ=GetMigrateAvailabilityZonesResult).value

    return AwaitableGetMigrateAvailabilityZonesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        names=pulumi.get(__ret__, 'names'),
        region=pulumi.get(__ret__, 'region'))
def get_migrate_availability_zones_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMigrateAvailabilityZonesResult]:
    """
    Use this data source to query availability zones where DDS instance can migrate.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Dds.get_migrate_availability_zones(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the DDS instance ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dds/getMigrateAvailabilityZones:getMigrateAvailabilityZones', __args__, opts=opts, typ=GetMigrateAvailabilityZonesResult)
    return __ret__.apply(lambda __response__: GetMigrateAvailabilityZonesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        names=pulumi.get(__response__, 'names'),
        region=pulumi.get(__response__, 'region')))
