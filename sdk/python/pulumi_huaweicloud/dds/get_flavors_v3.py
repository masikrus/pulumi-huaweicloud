# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetFlavorsV3Result',
    'AwaitableGetFlavorsV3Result',
    'get_flavors_v3',
    'get_flavors_v3_output',
]

@pulumi.output_type
class GetFlavorsV3Result:
    """
    A collection of values returned by getFlavorsV3.
    """
    def __init__(__self__, engine_name=None, engine_version=None, flavors=None, id=None, memory=None, region=None, type=None, vcpus=None):
        if engine_name and not isinstance(engine_name, str):
            raise TypeError("Expected argument 'engine_name' to be a str")
        pulumi.set(__self__, "engine_name", engine_name)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if memory and not isinstance(memory, str):
            raise TypeError("Expected argument 'memory' to be a str")
        pulumi.set(__self__, "memory", memory)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vcpus and not isinstance(vcpus, str):
            raise TypeError("Expected argument 'vcpus' to be a str")
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> _builtins.str:
        return pulumi.get(self, "engine_name")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetFlavorsV3FlavorResult']:
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vcpus")


class AwaitableGetFlavorsV3Result(GetFlavorsV3Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFlavorsV3Result(
            engine_name=self.engine_name,
            engine_version=self.engine_version,
            flavors=self.flavors,
            id=self.id,
            memory=self.memory,
            region=self.region,
            type=self.type,
            vcpus=self.vcpus)


def get_flavors_v3(engine_name: Optional[_builtins.str] = None,
                   engine_version: Optional[_builtins.str] = None,
                   memory: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   type: Optional[_builtins.str] = None,
                   vcpus: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFlavorsV3Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['engineName'] = engine_name
    __args__['engineVersion'] = engine_version
    __args__['memory'] = memory
    __args__['region'] = region
    __args__['type'] = type
    __args__['vcpus'] = vcpus
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dds/getFlavorsV3:getFlavorsV3', __args__, opts=opts, typ=GetFlavorsV3Result).value

    return AwaitableGetFlavorsV3Result(
        engine_name=pulumi.get(__ret__, 'engine_name'),
        engine_version=pulumi.get(__ret__, 'engine_version'),
        flavors=pulumi.get(__ret__, 'flavors'),
        id=pulumi.get(__ret__, 'id'),
        memory=pulumi.get(__ret__, 'memory'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'),
        vcpus=pulumi.get(__ret__, 'vcpus'))
def get_flavors_v3_output(engine_name: Optional[pulumi.Input[_builtins.str]] = None,
                          engine_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          memory: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          vcpus: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFlavorsV3Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['engineName'] = engine_name
    __args__['engineVersion'] = engine_version
    __args__['memory'] = memory
    __args__['region'] = region
    __args__['type'] = type
    __args__['vcpus'] = vcpus
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dds/getFlavorsV3:getFlavorsV3', __args__, opts=opts, typ=GetFlavorsV3Result)
    return __ret__.apply(lambda __response__: GetFlavorsV3Result(
        engine_name=pulumi.get(__response__, 'engine_name'),
        engine_version=pulumi.get(__response__, 'engine_version'),
        flavors=pulumi.get(__response__, 'flavors'),
        id=pulumi.get(__response__, 'id'),
        memory=pulumi.get(__response__, 'memory'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type'),
        vcpus=pulumi.get(__response__, 'vcpus')))
