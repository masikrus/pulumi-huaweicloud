# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetDatabaseVersionsResult',
    'AwaitableGetDatabaseVersionsResult',
    'get_database_versions',
    'get_database_versions_output',
]

@pulumi.output_type
class GetDatabaseVersionsResult:
    """
    A collection of values returned by getDatabaseVersions.
    """
    def __init__(__self__, datastore_name=None, id=None, region=None, versions=None):
        if datastore_name and not isinstance(datastore_name, str):
            raise TypeError("Expected argument 'datastore_name' to be a str")
        pulumi.set(__self__, "datastore_name", datastore_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> _builtins.str:
        return pulumi.get(self, "datastore_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Sequence[_builtins.str]:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "versions")


class AwaitableGetDatabaseVersionsResult(GetDatabaseVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseVersionsResult(
            datastore_name=self.datastore_name,
            id=self.id,
            region=self.region,
            versions=self.versions)


def get_database_versions(datastore_name: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseVersionsResult:
    """
    Use this data source to get the versions of DDS instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test1 = huaweicloud.Dds.get_database_versions(datastore_name="DDS-Community")
    ```


    :param _builtins.str datastore_name: Specifies the database name.
           The valid values are **DDS-Community** and **DDS-Enhanced**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['datastoreName'] = datastore_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dds/getDatabaseVersions:getDatabaseVersions', __args__, opts=opts, typ=GetDatabaseVersionsResult).value

    return AwaitableGetDatabaseVersionsResult(
        datastore_name=pulumi.get(__ret__, 'datastore_name'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        versions=pulumi.get(__ret__, 'versions'))
def get_database_versions_output(datastore_name: Optional[pulumi.Input[_builtins.str]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabaseVersionsResult]:
    """
    Use this data source to get the versions of DDS instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test1 = huaweicloud.Dds.get_database_versions(datastore_name="DDS-Community")
    ```


    :param _builtins.str datastore_name: Specifies the database name.
           The valid values are **DDS-Community** and **DDS-Enhanced**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['datastoreName'] = datastore_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dds/getDatabaseVersions:getDatabaseVersions', __args__, opts=opts, typ=GetDatabaseVersionsResult)
    return __ret__.apply(lambda __response__: GetDatabaseVersionsResult(
        datastore_name=pulumi.get(__response__, 'datastore_name'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        versions=pulumi.get(__response__, 'versions')))
