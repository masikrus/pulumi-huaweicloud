# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSlowLogsResult',
    'AwaitableGetSlowLogsResult',
    'get_slow_logs',
    'get_slow_logs_output',
]

@pulumi.output_type
class GetSlowLogsResult:
    """
    A collection of values returned by getSlowLogs.
    """
    def __init__(__self__, collection_keywords=None, database_keywords=None, end_time=None, id=None, instance_id=None, keywords=None, max_cost_time=None, min_cost_time=None, node_id=None, operate_type=None, region=None, slow_logs=None, start_time=None):
        if collection_keywords and not isinstance(collection_keywords, list):
            raise TypeError("Expected argument 'collection_keywords' to be a list")
        pulumi.set(__self__, "collection_keywords", collection_keywords)
        if database_keywords and not isinstance(database_keywords, list):
            raise TypeError("Expected argument 'database_keywords' to be a list")
        pulumi.set(__self__, "database_keywords", database_keywords)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if keywords and not isinstance(keywords, list):
            raise TypeError("Expected argument 'keywords' to be a list")
        pulumi.set(__self__, "keywords", keywords)
        if max_cost_time and not isinstance(max_cost_time, int):
            raise TypeError("Expected argument 'max_cost_time' to be a int")
        pulumi.set(__self__, "max_cost_time", max_cost_time)
        if min_cost_time and not isinstance(min_cost_time, int):
            raise TypeError("Expected argument 'min_cost_time' to be a int")
        pulumi.set(__self__, "min_cost_time", min_cost_time)
        if node_id and not isinstance(node_id, str):
            raise TypeError("Expected argument 'node_id' to be a str")
        pulumi.set(__self__, "node_id", node_id)
        if operate_type and not isinstance(operate_type, str):
            raise TypeError("Expected argument 'operate_type' to be a str")
        pulumi.set(__self__, "operate_type", operate_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if slow_logs and not isinstance(slow_logs, list):
            raise TypeError("Expected argument 'slow_logs' to be a list")
        pulumi.set(__self__, "slow_logs", slow_logs)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="collectionKeywords")
    def collection_keywords(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "collection_keywords")

    @_builtins.property
    @pulumi.getter(name="databaseKeywords")
    def database_keywords(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "database_keywords")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def keywords(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "keywords")

    @_builtins.property
    @pulumi.getter(name="maxCostTime")
    def max_cost_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_cost_time")

    @_builtins.property
    @pulumi.getter(name="minCostTime")
    def min_cost_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_cost_time")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> Optional[_builtins.str]:
        """
        Indicates the statement type.
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="slowLogs")
    def slow_logs(self) -> Sequence['outputs.GetSlowLogsSlowLogResult']:
        """
        Indicates the list of the slow logs.
        The slow_logs structure is documented below.
        """
        return pulumi.get(self, "slow_logs")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        return pulumi.get(self, "start_time")


class AwaitableGetSlowLogsResult(GetSlowLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSlowLogsResult(
            collection_keywords=self.collection_keywords,
            database_keywords=self.database_keywords,
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            keywords=self.keywords,
            max_cost_time=self.max_cost_time,
            min_cost_time=self.min_cost_time,
            node_id=self.node_id,
            operate_type=self.operate_type,
            region=self.region,
            slow_logs=self.slow_logs,
            start_time=self.start_time)


def get_slow_logs(collection_keywords: Optional[Sequence[_builtins.str]] = None,
                  database_keywords: Optional[Sequence[_builtins.str]] = None,
                  end_time: Optional[_builtins.str] = None,
                  instance_id: Optional[_builtins.str] = None,
                  keywords: Optional[Sequence[_builtins.str]] = None,
                  max_cost_time: Optional[_builtins.int] = None,
                  min_cost_time: Optional[_builtins.int] = None,
                  node_id: Optional[_builtins.str] = None,
                  operate_type: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  start_time: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSlowLogsResult:
    """
    Use this data source to get the list of DDS instance slow logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Dds.get_slow_logs(instance_id=instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param Sequence[_builtins.str] collection_keywords: Specifies the fuzzy search for logs based on multiple database table name
           keywords, indicating that at least one keyword is matched.
    :param Sequence[_builtins.str] database_keywords: Specifies the fuzzy search for logs based on multiple database keywords,
           indicating that at least one keyword is matched.
    :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str instance_id: Specifies the ID of the instance.
    :param Sequence[_builtins.str] keywords: Specifies the full-text log search based on multiple keywords, indicating that all
           keywords are matched.
    :param _builtins.int max_cost_time: Specifies the logs can be searched based on the maximum execution duration.
           Unit is ms.
    :param _builtins.int min_cost_time: Specifies the logs can be searched based on the minimum execution duration.
           Unit is ms.
    :param _builtins.str node_id: Specifies the node ID.
    :param _builtins.str operate_type: Specifies the statement type. Valid values are **insert**, **query**, **update**,
           **remove**, **getmore**, **command** and **killcursors**.
    :param _builtins.str region: Specifies the region in which to query the resource.
    :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    """
    __args__ = dict()
    __args__['collectionKeywords'] = collection_keywords
    __args__['databaseKeywords'] = database_keywords
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['keywords'] = keywords
    __args__['maxCostTime'] = max_cost_time
    __args__['minCostTime'] = min_cost_time
    __args__['nodeId'] = node_id
    __args__['operateType'] = operate_type
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dds/getSlowLogs:getSlowLogs', __args__, opts=opts, typ=GetSlowLogsResult).value

    return AwaitableGetSlowLogsResult(
        collection_keywords=pulumi.get(__ret__, 'collection_keywords'),
        database_keywords=pulumi.get(__ret__, 'database_keywords'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        keywords=pulumi.get(__ret__, 'keywords'),
        max_cost_time=pulumi.get(__ret__, 'max_cost_time'),
        min_cost_time=pulumi.get(__ret__, 'min_cost_time'),
        node_id=pulumi.get(__ret__, 'node_id'),
        operate_type=pulumi.get(__ret__, 'operate_type'),
        region=pulumi.get(__ret__, 'region'),
        slow_logs=pulumi.get(__ret__, 'slow_logs'),
        start_time=pulumi.get(__ret__, 'start_time'))
def get_slow_logs_output(collection_keywords: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         database_keywords: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         end_time: Optional[pulumi.Input[_builtins.str]] = None,
                         instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                         keywords: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         max_cost_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         min_cost_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         node_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         operate_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         start_time: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSlowLogsResult]:
    """
    Use this data source to get the list of DDS instance slow logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Dds.get_slow_logs(instance_id=instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param Sequence[_builtins.str] collection_keywords: Specifies the fuzzy search for logs based on multiple database table name
           keywords, indicating that at least one keyword is matched.
    :param Sequence[_builtins.str] database_keywords: Specifies the fuzzy search for logs based on multiple database keywords,
           indicating that at least one keyword is matched.
    :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str instance_id: Specifies the ID of the instance.
    :param Sequence[_builtins.str] keywords: Specifies the full-text log search based on multiple keywords, indicating that all
           keywords are matched.
    :param _builtins.int max_cost_time: Specifies the logs can be searched based on the maximum execution duration.
           Unit is ms.
    :param _builtins.int min_cost_time: Specifies the logs can be searched based on the minimum execution duration.
           Unit is ms.
    :param _builtins.str node_id: Specifies the node ID.
    :param _builtins.str operate_type: Specifies the statement type. Valid values are **insert**, **query**, **update**,
           **remove**, **getmore**, **command** and **killcursors**.
    :param _builtins.str region: Specifies the region in which to query the resource.
    :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    """
    __args__ = dict()
    __args__['collectionKeywords'] = collection_keywords
    __args__['databaseKeywords'] = database_keywords
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['keywords'] = keywords
    __args__['maxCostTime'] = max_cost_time
    __args__['minCostTime'] = min_cost_time
    __args__['nodeId'] = node_id
    __args__['operateType'] = operate_type
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dds/getSlowLogs:getSlowLogs', __args__, opts=opts, typ=GetSlowLogsResult)
    return __ret__.apply(lambda __response__: GetSlowLogsResult(
        collection_keywords=pulumi.get(__response__, 'collection_keywords'),
        database_keywords=pulumi.get(__response__, 'database_keywords'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        keywords=pulumi.get(__response__, 'keywords'),
        max_cost_time=pulumi.get(__response__, 'max_cost_time'),
        min_cost_time=pulumi.get(__response__, 'min_cost_time'),
        node_id=pulumi.get(__response__, 'node_id'),
        operate_type=pulumi.get(__response__, 'operate_type'),
        region=pulumi.get(__response__, 'region'),
        slow_logs=pulumi.get(__response__, 'slow_logs'),
        start_time=pulumi.get(__response__, 'start_time')))
