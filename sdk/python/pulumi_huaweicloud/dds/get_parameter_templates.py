# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetParameterTemplatesResult',
    'AwaitableGetParameterTemplatesResult',
    'get_parameter_templates',
    'get_parameter_templates_output',
]

@pulumi.output_type
class GetParameterTemplatesResult:
    """
    A collection of values returned by getParameterTemplates.
    """
    def __init__(__self__, configurations=None, datastore_version=None, id=None, name=None, node_type=None, region=None):
        if configurations and not isinstance(configurations, list):
            raise TypeError("Expected argument 'configurations' to be a list")
        pulumi.set(__self__, "configurations", configurations)
        if datastore_version and not isinstance(datastore_version, str):
            raise TypeError("Expected argument 'datastore_version' to be a str")
        pulumi.set(__self__, "datastore_version", datastore_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_type and not isinstance(node_type, str):
            raise TypeError("Expected argument 'node_type' to be a str")
        pulumi.set(__self__, "node_type", node_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetParameterTemplatesConfigurationResult']:
        """
        DDS parameter templates list.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter(name="datastoreVersion")
    def datastore_version(self) -> Optional[_builtins.str]:
        """
        Database (DB Engine) version.
        """
        return pulumi.get(self, "datastore_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The parameter template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[_builtins.str]:
        """
        The the node type of parameter template.
        Valid value:
        + **mongos**: the mongos node type.
        + **shard**: the shard node type.
        + **config**: the config node type.
        + **replica**: the replica node type.
        + **single**: the single node type.
        """
        return pulumi.get(self, "node_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetParameterTemplatesResult(GetParameterTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetParameterTemplatesResult(
            configurations=self.configurations,
            datastore_version=self.datastore_version,
            id=self.id,
            name=self.name,
            node_type=self.node_type,
            region=self.region)


def get_parameter_templates(datastore_version: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            node_type: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetParameterTemplatesResult:
    """
    Use this data source to get the list of DDS parameter templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test1 = huaweicloud.Dds.get_parameter_templates()
    ```


    :param _builtins.str datastore_version: Specifies the database (DB Engine) version.
           The value can be `4.4`, `4.2`, `4.0`, `3.4` or `3.2`.
    :param _builtins.str name: Specifies the parameter template name.
    :param _builtins.str node_type: The the node type of parameter template.
           Valid value:
           + **mongos**: the mongos node type.
           + **shard**: the shard node type.
           + **config**: the config node type.
           + **replica**: the replica node type.
           + **single**: the single node type.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['datastoreVersion'] = datastore_version
    __args__['name'] = name
    __args__['nodeType'] = node_type
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dds/getParameterTemplates:getParameterTemplates', __args__, opts=opts, typ=GetParameterTemplatesResult).value

    return AwaitableGetParameterTemplatesResult(
        configurations=pulumi.get(__ret__, 'configurations'),
        datastore_version=pulumi.get(__ret__, 'datastore_version'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        node_type=pulumi.get(__ret__, 'node_type'),
        region=pulumi.get(__ret__, 'region'))
def get_parameter_templates_output(datastore_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   node_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetParameterTemplatesResult]:
    """
    Use this data source to get the list of DDS parameter templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test1 = huaweicloud.Dds.get_parameter_templates()
    ```


    :param _builtins.str datastore_version: Specifies the database (DB Engine) version.
           The value can be `4.4`, `4.2`, `4.0`, `3.4` or `3.2`.
    :param _builtins.str name: Specifies the parameter template name.
    :param _builtins.str node_type: The the node type of parameter template.
           Valid value:
           + **mongos**: the mongos node type.
           + **shard**: the shard node type.
           + **config**: the config node type.
           + **replica**: the replica node type.
           + **single**: the single node type.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['datastoreVersion'] = datastore_version
    __args__['name'] = name
    __args__['nodeType'] = node_type
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dds/getParameterTemplates:getParameterTemplates', __args__, opts=opts, typ=GetParameterTemplatesResult)
    return __ret__.apply(lambda __response__: GetParameterTemplatesResult(
        configurations=pulumi.get(__response__, 'configurations'),
        datastore_version=pulumi.get(__response__, 'datastore_version'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        node_type=pulumi.get(__response__, 'node_type'),
        region=pulumi.get(__response__, 'region')))
