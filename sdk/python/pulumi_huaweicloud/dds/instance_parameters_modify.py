# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceParametersModifyArgs', 'InstanceParametersModify']

@pulumi.input_type
class InstanceParametersModifyArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['InstanceParametersModifyParameterArgs']]],
                 entity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a InstanceParametersModify resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceParametersModifyParameterArgs']]] parameters: Specify an array of one or more parameters to be set to the DDS instance or entity.
               You can check on console to see which parameters supported.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.str] entity_id: Specifies the ID of a DDS instance entity.
               + If the DB instance type is cluster and the shard or config parameter template is to be changed, the value is the
               group ID. If the parameter template of the mongos node is to be changed, the value is the node ID.
               + If the DB instance to be changed is a replica set instance, the value should be empty.
               
               Changing this creates a new resource.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "parameters", parameters)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a DDS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['InstanceParametersModifyParameterArgs']]]:
        """
        Specify an array of one or more parameters to be set to the DDS instance or entity.
        You can check on console to see which parameters supported.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['InstanceParametersModifyParameterArgs']]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a DDS instance entity.
        + If the DB instance type is cluster and the shard or config parameter template is to be changed, the value is the
        group ID. If the parameter template of the mongos node is to be changed, the value is the node ID.
        + If the DB instance to be changed is a replica set instance, the value should be empty.

        Changing this creates a new resource.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _InstanceParametersModifyState:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParametersModifyParameterArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering InstanceParametersModify resources.
        :param pulumi.Input[_builtins.str] entity_id: Specifies the ID of a DDS instance entity.
               + If the DB instance type is cluster and the shard or config parameter template is to be changed, the value is the
               group ID. If the parameter template of the mongos node is to be changed, the value is the node ID.
               + If the DB instance to be changed is a replica set instance, the value should be empty.
               
               Changing this creates a new resource.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceParametersModifyParameterArgs']]] parameters: Specify an array of one or more parameters to be set to the DDS instance or entity.
               You can check on console to see which parameters supported.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a DDS instance entity.
        + If the DB instance type is cluster and the shard or config parameter template is to be changed, the value is the
        group ID. If the parameter template of the mongos node is to be changed, the value is the node ID.
        + If the DB instance to be changed is a replica set instance, the value should be empty.

        Changing this creates a new resource.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a DDS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParametersModifyParameterArgs']]]]:
        """
        Specify an array of one or more parameters to be set to the DDS instance or entity.
        You can check on console to see which parameters supported.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParametersModifyParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dds/instanceParametersModify:InstanceParametersModify")
class InstanceParametersModify(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceParametersModifyParameterArgs', 'InstanceParametersModifyParameterArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DDS instance parameters modify resource within HuaweiCloud.

        > **NOTE:** Deleting instance parameters modify is not supported. If you destroy a resource of instance parameters
          modify, it is only removed from the state, but still remains in the cloud. And the instance doesn't return to the
          state before modifying.

        ## Example Usage

        ### Modify Replica Set instance parameters

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        parameter_name = config.require_object("parameterName")
        parameter_value = config.require_object("parameterValue")
        test = huaweicloud.dds.InstanceParametersModify("test",
            instance_id=instance_id,
            parameters=[{
                "name": parameter_name,
                "value": parameter_value,
            }])
        ```

        ### Modify Cluster Community instance's entity parameters

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        entity_id = config.require_object("entityId")
        parameter_name = config.require_object("parameterName")
        parameter_value = config.require_object("parameterValue")
        test = huaweicloud.dds.InstanceParametersModify("test",
            instance_id=instance_id,
            entity_id=entity_id,
            parameters=[{
                "name": parameter_name,
                "value": parameter_value,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] entity_id: Specifies the ID of a DDS instance entity.
               + If the DB instance type is cluster and the shard or config parameter template is to be changed, the value is the
               group ID. If the parameter template of the mongos node is to be changed, the value is the node ID.
               + If the DB instance to be changed is a replica set instance, the value should be empty.
               
               Changing this creates a new resource.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InstanceParametersModifyParameterArgs', 'InstanceParametersModifyParameterArgsDict']]]] parameters: Specify an array of one or more parameters to be set to the DDS instance or entity.
               You can check on console to see which parameters supported.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceParametersModifyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DDS instance parameters modify resource within HuaweiCloud.

        > **NOTE:** Deleting instance parameters modify is not supported. If you destroy a resource of instance parameters
          modify, it is only removed from the state, but still remains in the cloud. And the instance doesn't return to the
          state before modifying.

        ## Example Usage

        ### Modify Replica Set instance parameters

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        parameter_name = config.require_object("parameterName")
        parameter_value = config.require_object("parameterValue")
        test = huaweicloud.dds.InstanceParametersModify("test",
            instance_id=instance_id,
            parameters=[{
                "name": parameter_name,
                "value": parameter_value,
            }])
        ```

        ### Modify Cluster Community instance's entity parameters

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        entity_id = config.require_object("entityId")
        parameter_name = config.require_object("parameterName")
        parameter_value = config.require_object("parameterValue")
        test = huaweicloud.dds.InstanceParametersModify("test",
            instance_id=instance_id,
            entity_id=entity_id,
            parameters=[{
                "name": parameter_name,
                "value": parameter_value,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param InstanceParametersModifyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceParametersModifyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceParametersModifyParameterArgs', 'InstanceParametersModifyParameterArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceParametersModifyArgs.__new__(InstanceParametersModifyArgs)

            __props__.__dict__["entity_id"] = entity_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if parameters is None and not opts.urn:
                raise TypeError("Missing required property 'parameters'")
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["region"] = region
        super(InstanceParametersModify, __self__).__init__(
            'huaweicloud:Dds/instanceParametersModify:InstanceParametersModify',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            entity_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceParametersModifyParameterArgs', 'InstanceParametersModifyParameterArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'InstanceParametersModify':
        """
        Get an existing InstanceParametersModify resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] entity_id: Specifies the ID of a DDS instance entity.
               + If the DB instance type is cluster and the shard or config parameter template is to be changed, the value is the
               group ID. If the parameter template of the mongos node is to be changed, the value is the node ID.
               + If the DB instance to be changed is a replica set instance, the value should be empty.
               
               Changing this creates a new resource.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InstanceParametersModifyParameterArgs', 'InstanceParametersModifyParameterArgsDict']]]] parameters: Specify an array of one or more parameters to be set to the DDS instance or entity.
               You can check on console to see which parameters supported.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceParametersModifyState.__new__(_InstanceParametersModifyState)

        __props__.__dict__["entity_id"] = entity_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["region"] = region
        return InstanceParametersModify(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of a DDS instance entity.
        + If the DB instance type is cluster and the shard or config parameter template is to be changed, the value is the
        group ID. If the parameter template of the mongos node is to be changed, the value is the node ID.
        + If the DB instance to be changed is a replica set instance, the value should be empty.

        Changing this creates a new resource.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "entity_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a DDS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Sequence['outputs.InstanceParametersModifyParameter']]:
        """
        Specify an array of one or more parameters to be set to the DDS instance or entity.
        You can check on console to see which parameters supported.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

