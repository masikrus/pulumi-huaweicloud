# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BackupDatastoreArgs',
    'BackupDatastoreArgsDict',
    'CollectionRestoreRestoreCollectionArgs',
    'CollectionRestoreRestoreCollectionArgsDict',
    'CollectionRestoreRestoreCollectionCollectionArgs',
    'CollectionRestoreRestoreCollectionCollectionArgsDict',
    'DatabaseRoleInheritedPrivilegeArgs',
    'DatabaseRoleInheritedPrivilegeArgsDict',
    'DatabaseRoleInheritedPrivilegeResourceArgs',
    'DatabaseRoleInheritedPrivilegeResourceArgsDict',
    'DatabaseRolePrivilegeArgs',
    'DatabaseRolePrivilegeArgsDict',
    'DatabaseRolePrivilegeResourceArgs',
    'DatabaseRolePrivilegeResourceArgsDict',
    'DatabaseRoleRoleArgs',
    'DatabaseRoleRoleArgsDict',
    'DatabaseUserInheritedPrivilegeArgs',
    'DatabaseUserInheritedPrivilegeArgsDict',
    'DatabaseUserInheritedPrivilegeResourceArgs',
    'DatabaseUserInheritedPrivilegeResourceArgsDict',
    'DatabaseUserPrivilegeArgs',
    'DatabaseUserPrivilegeArgsDict',
    'DatabaseUserPrivilegeResourceArgs',
    'DatabaseUserPrivilegeResourceArgsDict',
    'DatabaseUserRoleArgs',
    'DatabaseUserRoleArgsDict',
    'InstanceBackupStrategyArgs',
    'InstanceBackupStrategyArgsDict',
    'InstanceConfigurationArgs',
    'InstanceConfigurationArgsDict',
    'InstanceDatastoreArgs',
    'InstanceDatastoreArgsDict',
    'InstanceFlavorArgs',
    'InstanceFlavorArgsDict',
    'InstanceGroupArgs',
    'InstanceGroupArgsDict',
    'InstanceGroupNodeArgs',
    'InstanceGroupNodeArgsDict',
    'InstanceNodeArgs',
    'InstanceNodeArgsDict',
    'InstanceNodeNumUpdateVolumeArgs',
    'InstanceNodeNumUpdateVolumeArgsDict',
    'InstanceParametersModifyParameterArgs',
    'InstanceParametersModifyParameterArgsDict',
    'InstanceV3BackupStrategyArgs',
    'InstanceV3BackupStrategyArgsDict',
    'InstanceV3ConfigurationArgs',
    'InstanceV3ConfigurationArgsDict',
    'InstanceV3DatastoreArgs',
    'InstanceV3DatastoreArgsDict',
    'InstanceV3FlavorArgs',
    'InstanceV3FlavorArgsDict',
    'InstanceV3GroupArgs',
    'InstanceV3GroupArgsDict',
    'InstanceV3GroupNodeArgs',
    'InstanceV3GroupNodeArgsDict',
    'InstanceV3NodeArgs',
    'InstanceV3NodeArgsDict',
    'ParameterTemplateCompareDifferenceArgs',
    'ParameterTemplateCompareDifferenceArgsDict',
    'ParameterTemplateCopyParameterArgs',
    'ParameterTemplateCopyParameterArgsDict',
    'ParameterTemplateParameterArgs',
    'ParameterTemplateParameterArgsDict',
]

MYPY = False

if not MYPY:
    class BackupDatastoreArgsDict(TypedDict):
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the DB engine.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the database version. The value can be **4.2**, **4.0**, or **3.4**.
        """
elif False:
    BackupDatastoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupDatastoreArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Indicates the DB engine.
        :param pulumi.Input[_builtins.str] version: Indicates the database version. The value can be **4.2**, **4.0**, or **3.4**.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the DB engine.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the database version. The value can be **4.2**, **4.0**, or **3.4**.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class CollectionRestoreRestoreCollectionArgsDict(TypedDict):
        database: pulumi.Input[_builtins.str]
        """
        Specifies the database name.
        Changing this creates a new resource.
        """
        collections: NotRequired[pulumi.Input[Sequence[pulumi.Input['CollectionRestoreRestoreCollectionCollectionArgsDict']]]]
        """
        Specifies the collection informations.
        Changing this creates a new resource.
        The collections structure is documented below.
        """
        restore_database_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the database restoration time point.
        It is mandatory for database level restoration. The value is a UNIX timestamp, in milliseconds. The time zone is UTC.
        Changing this creates a new resource.

        <a name="block--restore_collections--collections"></a>
        The `collections` block supports:
        """
elif False:
    CollectionRestoreRestoreCollectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CollectionRestoreRestoreCollectionArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[_builtins.str],
                 collections: Optional[pulumi.Input[Sequence[pulumi.Input['CollectionRestoreRestoreCollectionCollectionArgs']]]] = None,
                 restore_database_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] database: Specifies the database name.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['CollectionRestoreRestoreCollectionCollectionArgs']]] collections: Specifies the collection informations.
               Changing this creates a new resource.
               The collections structure is documented below.
        :param pulumi.Input[_builtins.str] restore_database_time: Specifies the database restoration time point.
               It is mandatory for database level restoration. The value is a UNIX timestamp, in milliseconds. The time zone is UTC.
               Changing this creates a new resource.
               
               <a name="block--restore_collections--collections"></a>
               The `collections` block supports:
        """
        pulumi.set(__self__, "database", database)
        if collections is not None:
            pulumi.set(__self__, "collections", collections)
        if restore_database_time is not None:
            pulumi.set(__self__, "restore_database_time", restore_database_time)

    @_builtins.property
    @pulumi.getter
    def database(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the database name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "database", value)

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CollectionRestoreRestoreCollectionCollectionArgs']]]]:
        """
        Specifies the collection informations.
        Changing this creates a new resource.
        The collections structure is documented below.
        """
        return pulumi.get(self, "collections")

    @collections.setter
    def collections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CollectionRestoreRestoreCollectionCollectionArgs']]]]):
        pulumi.set(self, "collections", value)

    @_builtins.property
    @pulumi.getter(name="restoreDatabaseTime")
    def restore_database_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database restoration time point.
        It is mandatory for database level restoration. The value is a UNIX timestamp, in milliseconds. The time zone is UTC.
        Changing this creates a new resource.

        <a name="block--restore_collections--collections"></a>
        The `collections` block supports:
        """
        return pulumi.get(self, "restore_database_time")

    @restore_database_time.setter
    def restore_database_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restore_database_time", value)


if not MYPY:
    class CollectionRestoreRestoreCollectionCollectionArgsDict(TypedDict):
        old_name: pulumi.Input[_builtins.str]
        """
        Specifies the collection name before the restoration.
        Changing this creates a new resource.
        """
        restore_collection_time: pulumi.Input[_builtins.str]
        """
        Specifies the collection restoration time point.
        The value is a UNIX timestamp, in milliseconds. The time zone is UTC.
        Changing this creates a new resource.
        """
        new_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the collection name after the restoration.
        Changing this creates a new resource.
        """
elif False:
    CollectionRestoreRestoreCollectionCollectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CollectionRestoreRestoreCollectionCollectionArgs:
    def __init__(__self__, *,
                 old_name: pulumi.Input[_builtins.str],
                 restore_collection_time: pulumi.Input[_builtins.str],
                 new_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] old_name: Specifies the collection name before the restoration.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] restore_collection_time: Specifies the collection restoration time point.
               The value is a UNIX timestamp, in milliseconds. The time zone is UTC.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] new_name: Specifies the collection name after the restoration.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "old_name", old_name)
        pulumi.set(__self__, "restore_collection_time", restore_collection_time)
        if new_name is not None:
            pulumi.set(__self__, "new_name", new_name)

    @_builtins.property
    @pulumi.getter(name="oldName")
    def old_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the collection name before the restoration.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "old_name")

    @old_name.setter
    def old_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "old_name", value)

    @_builtins.property
    @pulumi.getter(name="restoreCollectionTime")
    def restore_collection_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the collection restoration time point.
        The value is a UNIX timestamp, in milliseconds. The time zone is UTC.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "restore_collection_time")

    @restore_collection_time.setter
    def restore_collection_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "restore_collection_time", value)

    @_builtins.property
    @pulumi.getter(name="newName")
    def new_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the collection name after the restoration.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "new_name")

    @new_name.setter
    def new_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "new_name", value)


if not MYPY:
    class DatabaseRoleInheritedPrivilegeArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The operation permission list.
        """
        resources: NotRequired[pulumi.Input[Sequence[pulumi.Input['DatabaseRoleInheritedPrivilegeResourceArgsDict']]]]
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
elif False:
    DatabaseRoleInheritedPrivilegeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseRoleInheritedPrivilegeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRoleInheritedPrivilegeResourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] actions: The operation permission list.
        :param pulumi.Input[Sequence[pulumi.Input['DatabaseRoleInheritedPrivilegeResourceArgs']]] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRoleInheritedPrivilegeResourceArgs']]]]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRoleInheritedPrivilegeResourceArgs']]]]):
        pulumi.set(self, "resources", value)


if not MYPY:
    class DatabaseRoleInheritedPrivilegeResourceArgsDict(TypedDict):
        collection: NotRequired[pulumi.Input[_builtins.str]]
        """
        The database collection type.
        """
        db_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
elif False:
    DatabaseRoleInheritedPrivilegeResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseRoleInheritedPrivilegeResourceArgs:
    def __init__(__self__, *,
                 collection: Optional[pulumi.Input[_builtins.str]] = None,
                 db_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] collection: The database collection type.
        :param pulumi.Input[_builtins.str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "collection", value)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_name", value)


if not MYPY:
    class DatabaseRolePrivilegeArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The operation permission list.
        """
        resources: NotRequired[pulumi.Input[Sequence[pulumi.Input['DatabaseRolePrivilegeResourceArgsDict']]]]
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
elif False:
    DatabaseRolePrivilegeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseRolePrivilegeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRolePrivilegeResourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] actions: The operation permission list.
        :param pulumi.Input[Sequence[pulumi.Input['DatabaseRolePrivilegeResourceArgs']]] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRolePrivilegeResourceArgs']]]]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRolePrivilegeResourceArgs']]]]):
        pulumi.set(self, "resources", value)


if not MYPY:
    class DatabaseRolePrivilegeResourceArgsDict(TypedDict):
        collection: NotRequired[pulumi.Input[_builtins.str]]
        """
        The database collection type.
        """
        db_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
elif False:
    DatabaseRolePrivilegeResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseRolePrivilegeResourceArgs:
    def __init__(__self__, *,
                 collection: Optional[pulumi.Input[_builtins.str]] = None,
                 db_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] collection: The database collection type.
        :param pulumi.Input[_builtins.str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "collection", value)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_name", value)


if not MYPY:
    class DatabaseRoleRoleArgsDict(TypedDict):
        db_name: pulumi.Input[_builtins.str]
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of role owned by the current role.
        The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
        allowed. Changing this parameter will create a new role.
        """
elif False:
    DatabaseRoleRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseRoleRoleArgs:
    def __init__(__self__, *,
                 db_name: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        :param pulumi.Input[_builtins.str] name: Specifies the name of role owned by the current role.
               The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
               allowed. Changing this parameter will create a new role.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "db_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of role owned by the current role.
        The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
        allowed. Changing this parameter will create a new role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DatabaseUserInheritedPrivilegeArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The operation permission list.
        """
        resources: NotRequired[pulumi.Input[Sequence[pulumi.Input['DatabaseUserInheritedPrivilegeResourceArgsDict']]]]
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
elif False:
    DatabaseUserInheritedPrivilegeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseUserInheritedPrivilegeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserInheritedPrivilegeResourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] actions: The operation permission list.
        :param pulumi.Input[Sequence[pulumi.Input['DatabaseUserInheritedPrivilegeResourceArgs']]] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserInheritedPrivilegeResourceArgs']]]]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserInheritedPrivilegeResourceArgs']]]]):
        pulumi.set(self, "resources", value)


if not MYPY:
    class DatabaseUserInheritedPrivilegeResourceArgsDict(TypedDict):
        collection: NotRequired[pulumi.Input[_builtins.str]]
        """
        The database collection type.
        """
        db_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
elif False:
    DatabaseUserInheritedPrivilegeResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseUserInheritedPrivilegeResourceArgs:
    def __init__(__self__, *,
                 collection: Optional[pulumi.Input[_builtins.str]] = None,
                 db_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] collection: The database collection type.
        :param pulumi.Input[_builtins.str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "collection", value)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_name", value)


if not MYPY:
    class DatabaseUserPrivilegeArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The operation permission list.
        """
        resources: NotRequired[pulumi.Input[Sequence[pulumi.Input['DatabaseUserPrivilegeResourceArgsDict']]]]
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
elif False:
    DatabaseUserPrivilegeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseUserPrivilegeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserPrivilegeResourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] actions: The operation permission list.
        :param pulumi.Input[Sequence[pulumi.Input['DatabaseUserPrivilegeResourceArgs']]] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserPrivilegeResourceArgs']]]]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserPrivilegeResourceArgs']]]]):
        pulumi.set(self, "resources", value)


if not MYPY:
    class DatabaseUserPrivilegeResourceArgsDict(TypedDict):
        collection: NotRequired[pulumi.Input[_builtins.str]]
        """
        The database collection type.
        """
        db_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
elif False:
    DatabaseUserPrivilegeResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseUserPrivilegeResourceArgs:
    def __init__(__self__, *,
                 collection: Optional[pulumi.Input[_builtins.str]] = None,
                 db_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] collection: The database collection type.
        :param pulumi.Input[_builtins.str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "collection", value)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_name", value)


if not MYPY:
    class DatabaseUserRoleArgsDict(TypedDict):
        db_name: pulumi.Input[_builtins.str]
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of role owned by the current user.
        The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
        allowed. Changing this parameter will create a new user.
        """
elif False:
    DatabaseUserRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseUserRoleArgs:
    def __init__(__self__, *,
                 db_name: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        :param pulumi.Input[_builtins.str] name: Specifies the name of role owned by the current user.
               The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
               allowed. Changing this parameter will create a new user.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "db_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of role owned by the current user.
        The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
        allowed. Changing this parameter will create a new user.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class InstanceBackupStrategyArgsDict(TypedDict):
        keep_days: pulumi.Input[_builtins.int]
        """
        Specifies the number of days to retain the generated backup files. The value range is
        from 0 to 732. If this parameter is set to 0, the automated backup policy is disabled.
        """
        start_time: pulumi.Input[_builtins.str]
        """
        Specifies the backup time window. Automated backups will be triggered during
        the backup time window. The value cannot be empty. It must be a valid value in the "hh:mm-HH:MM" format.
        The current time is in the UTC format.
        + The HH value must be 1 greater than the hh value.
        + The values from mm and MM must be the same and must be set to **00**.
        """
        period: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the backup cycle. Data will be automatically backed up on the
        selected days every week.
        + If you set the `keep_days` to 0, this parameter is no need to set.
        + If you set the `keep_days` within 6 days, set the parameter value to **1,2,3,4,5,6,7**, data is automatically
        backed up on each day every week.
        + If you set the `keep_days` between 7 and 732 days, set the parameter value to at least one day of every week.
        For example: **1**, **3,5**.
        """
elif False:
    InstanceBackupStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceBackupStrategyArgs:
    def __init__(__self__, *,
                 keep_days: pulumi.Input[_builtins.int],
                 start_time: pulumi.Input[_builtins.str],
                 period: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] keep_days: Specifies the number of days to retain the generated backup files. The value range is
               from 0 to 732. If this parameter is set to 0, the automated backup policy is disabled.
        :param pulumi.Input[_builtins.str] start_time: Specifies the backup time window. Automated backups will be triggered during
               the backup time window. The value cannot be empty. It must be a valid value in the "hh:mm-HH:MM" format.
               The current time is in the UTC format.
               + The HH value must be 1 greater than the hh value.
               + The values from mm and MM must be the same and must be set to **00**.
        :param pulumi.Input[_builtins.str] period: Specifies the backup cycle. Data will be automatically backed up on the
               selected days every week.
               + If you set the `keep_days` to 0, this parameter is no need to set.
               + If you set the `keep_days` within 6 days, set the parameter value to **1,2,3,4,5,6,7**, data is automatically
               backed up on each day every week.
               + If you set the `keep_days` between 7 and 732 days, set the parameter value to at least one day of every week.
               For example: **1**, **3,5**.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of days to retain the generated backup files. The value range is
        from 0 to 732. If this parameter is set to 0, the automated backup policy is disabled.
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "keep_days", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backup time window. Automated backups will be triggered during
        the backup time window. The value cannot be empty. It must be a valid value in the "hh:mm-HH:MM" format.
        The current time is in the UTC format.
        + The HH value must be 1 greater than the hh value.
        + The values from mm and MM must be the same and must be set to **00**.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup cycle. Data will be automatically backed up on the
        selected days every week.
        + If you set the `keep_days` to 0, this parameter is no need to set.
        + If you set the `keep_days` within 6 days, set the parameter value to **1,2,3,4,5,6,7**, data is automatically
        backed up on each day every week.
        + If you set the `keep_days` between 7 and 732 days, set the parameter value to at least one day of every week.
        For example: **1**, **3,5**.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)


if not MYPY:
    class InstanceConfigurationArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the template.

        > Atfer updating the `configuration.id`, please check whether the instance needs to be restarted.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the node type. Valid value:
        + For a Community Edition cluster instance, the value can be **mongos**, **shard** or **config**.
        + For a Community Edition replica set instance, the value is **replica**.
        Changing this creates a new instance.
        """
elif False:
    InstanceConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceConfigurationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the ID of the template.
               
               > Atfer updating the `configuration.id`, please check whether the instance needs to be restarted.
        :param pulumi.Input[_builtins.str] type: Specifies the node type. Valid value:
               + For a Community Edition cluster instance, the value can be **mongos**, **shard** or **config**.
               + For a Community Edition replica set instance, the value is **replica**.
               Changing this creates a new instance.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the template.

        > Atfer updating the `configuration.id`, please check whether the instance needs to be restarted.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the node type. Valid value:
        + For a Community Edition cluster instance, the value can be **mongos**, **shard** or **config**.
        + For a Community Edition replica set instance, the value is **replica**.
        Changing this creates a new instance.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InstanceDatastoreArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the DB engine. **DDS-Community** is supported.
        """
        version: pulumi.Input[_builtins.str]
        """
        Specifies the DB instance version. For the Community Edition, the valid
        values are `4.0`, `4.2`, `4.4` or `5.0`.
        """
        storage_engine: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the storage engine of the DB instance.
        If `version` is set to `4.0`, the value is **wiredTiger**.
        If `version` is set to `4.2`, `4.4` or `5.0`, the value is **rocksDB**.
        """
elif False:
    InstanceDatastoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceDatastoreArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 storage_engine: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the DB engine. **DDS-Community** is supported.
        :param pulumi.Input[_builtins.str] version: Specifies the DB instance version. For the Community Edition, the valid
               values are `4.0`, `4.2`, `4.4` or `5.0`.
        :param pulumi.Input[_builtins.str] storage_engine: Specifies the storage engine of the DB instance.
               If `version` is set to `4.0`, the value is **wiredTiger**.
               If `version` is set to `4.2`, `4.4` or `5.0`, the value is **rocksDB**.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if storage_engine is not None:
            pulumi.set(__self__, "storage_engine", storage_engine)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DB engine. **DDS-Community** is supported.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the DB instance version. For the Community Edition, the valid
        values are `4.0`, `4.2`, `4.4` or `5.0`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the storage engine of the DB instance.
        If `version` is set to `4.0`, the value is **wiredTiger**.
        If `version` is set to `4.2`, `4.4` or `5.0`, the value is **rocksDB**.
        """
        return pulumi.get(self, "storage_engine")

    @storage_engine.setter
    def storage_engine(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_engine", value)


if not MYPY:
    class InstanceFlavorArgsDict(TypedDict):
        num: pulumi.Input[_builtins.int]
        """
        Specifies the node quantity. Valid value:
        + If the value of type is **mongos**, num indicates the number of mongos nodes in the cluster instance. Value ranges
        from `2` to `16`.
        + If the value of type is **shard**, num indicates the number of shard groups in the cluster instance. Value ranges
        from `2` to `16`.
        + If the value of type is **config**, num indicates the number of config groups in the cluster instance. Value can
        only be `1`.
        + If the value of type is **replica**, num indicates the number of replica nodes in the replica set instance. Value
        can be `3`, `5`, or `7`.

        This parameter can be updated when the value of `type` is **mongos**, **shard** or **replica**.
        """
        spec_code: pulumi.Input[_builtins.str]
        """
        Specifies the resource specification code. In a cluster instance, multiple
        specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
        enhanced (c3), or enhanced II (c6). For example:
        + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
        + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the node type. Valid value:
        + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For a replica set instance, the value is **replica**.
        """
        size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the disk size. The value must be a multiple of `10`. The unit is GB. This parameter
        is mandatory for nodes except mongos and invalid for mongos.For a cluster instance, the storage space of a shard node
        can be `10` to `2,000` GB, and the config storage space is `20` GB. For a replica set instance, the value ranges
        from `10` to `3000` GB. This parameter can be updated when the value of `type` is shard or replica.
        """
        storage: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the disk type. Valid value:
        + **ULTRAHIGH**: SSD storage.
        + **EXTREMEHIGH**: Extreme SSD storage.

        This parameter is valid for the shard and config nodes of a cluster instance and for replica set instances.
        """
elif False:
    InstanceFlavorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceFlavorArgs:
    def __init__(__self__, *,
                 num: pulumi.Input[_builtins.int],
                 spec_code: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 storage: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] num: Specifies the node quantity. Valid value:
               + If the value of type is **mongos**, num indicates the number of mongos nodes in the cluster instance. Value ranges
               from `2` to `16`.
               + If the value of type is **shard**, num indicates the number of shard groups in the cluster instance. Value ranges
               from `2` to `16`.
               + If the value of type is **config**, num indicates the number of config groups in the cluster instance. Value can
               only be `1`.
               + If the value of type is **replica**, num indicates the number of replica nodes in the replica set instance. Value
               can be `3`, `5`, or `7`.
               
               This parameter can be updated when the value of `type` is **mongos**, **shard** or **replica**.
        :param pulumi.Input[_builtins.str] spec_code: Specifies the resource specification code. In a cluster instance, multiple
               specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
               enhanced (c3), or enhanced II (c6). For example:
               + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
               + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications.
        :param pulumi.Input[_builtins.str] type: Specifies the node type. Valid value:
               + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For a replica set instance, the value is **replica**.
        :param pulumi.Input[_builtins.int] size: Specifies the disk size. The value must be a multiple of `10`. The unit is GB. This parameter
               is mandatory for nodes except mongos and invalid for mongos.For a cluster instance, the storage space of a shard node
               can be `10` to `2,000` GB, and the config storage space is `20` GB. For a replica set instance, the value ranges
               from `10` to `3000` GB. This parameter can be updated when the value of `type` is shard or replica.
        :param pulumi.Input[_builtins.str] storage: Specifies the disk type. Valid value:
               + **ULTRAHIGH**: SSD storage.
               + **EXTREMEHIGH**: Extreme SSD storage.
               
               This parameter is valid for the shard and config nodes of a cluster instance and for replica set instances.
        """
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter
    def num(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the node quantity. Valid value:
        + If the value of type is **mongos**, num indicates the number of mongos nodes in the cluster instance. Value ranges
        from `2` to `16`.
        + If the value of type is **shard**, num indicates the number of shard groups in the cluster instance. Value ranges
        from `2` to `16`.
        + If the value of type is **config**, num indicates the number of config groups in the cluster instance. Value can
        only be `1`.
        + If the value of type is **replica**, num indicates the number of replica nodes in the replica set instance. Value
        can be `3`, `5`, or `7`.

        This parameter can be updated when the value of `type` is **mongos**, **shard** or **replica**.
        """
        return pulumi.get(self, "num")

    @num.setter
    def num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "num", value)

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource specification code. In a cluster instance, multiple
        specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
        enhanced (c3), or enhanced II (c6). For example:
        + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
        + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications.
        """
        return pulumi.get(self, "spec_code")

    @spec_code.setter
    def spec_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "spec_code", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the node type. Valid value:
        + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For a replica set instance, the value is **replica**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the disk size. The value must be a multiple of `10`. The unit is GB. This parameter
        is mandatory for nodes except mongos and invalid for mongos.For a cluster instance, the storage space of a shard node
        can be `10` to `2,000` GB, and the config storage space is `20` GB. For a replica set instance, the value ranges
        from `10` to `3000` GB. This parameter can be updated when the value of `type` is shard or replica.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the disk type. Valid value:
        + **ULTRAHIGH**: SSD storage.
        + **EXTREMEHIGH**: Extreme SSD storage.

        This parameter is valid for the shard and config nodes of a cluster instance and for replica set instances.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage", value)


if not MYPY:
    class InstanceGroupArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        nodes: NotRequired[pulumi.Input[Sequence[pulumi.Input['InstanceGroupNodeArgsDict']]]]
        """
        Indicates the nodes info.
        The nodes structure is documented below.
        """
        size: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the disk size.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node status.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node type.
        """
        used: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the disk usage.
        """
elif False:
    InstanceGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupNodeArgs']]]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 used: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Indicates the node ID.
        :param pulumi.Input[_builtins.str] name: Specifies the DB instance name. The DB instance name of the same type is unique in the
               same tenant.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupNodeArgs']]] nodes: Indicates the nodes info.
               The nodes structure is documented below.
        :param pulumi.Input[_builtins.str] size: Indicates the disk size.
        :param pulumi.Input[_builtins.str] status: Indicates the node status.
        :param pulumi.Input[_builtins.str] type: Indicates the node type.
        :param pulumi.Input[_builtins.str] used: Indicates the disk usage.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupNodeArgs']]]]:
        """
        Indicates the nodes info.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the disk size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def used(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the disk usage.
        """
        return pulumi.get(self, "used")

    @used.setter
    def used(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "used", value)


if not MYPY:
    class InstanceGroupNodeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        private_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
        instances, and single node instances.
        """
        public_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
        cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        """
        role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node role.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node status.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node type.
        """
elif False:
    InstanceGroupNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceGroupNodeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Indicates the node ID.
        :param pulumi.Input[_builtins.str] name: Specifies the DB instance name. The DB instance name of the same type is unique in the
               same tenant.
        :param pulumi.Input[_builtins.str] private_ip: Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
               instances, and single node instances.
        :param pulumi.Input[_builtins.str] public_ip: Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
               cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        :param pulumi.Input[_builtins.str] role: Indicates the node role.
        :param pulumi.Input[_builtins.str] status: Indicates the node status.
        :param pulumi.Input[_builtins.str] type: Indicates the node type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
        instances, and single node instances.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
        cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InstanceNodeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        private_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
        instances, and single node instances.
        """
        public_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
        cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        """
        role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node role.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node status.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node type.
        """
elif False:
    InstanceNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceNodeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Indicates the node ID.
        :param pulumi.Input[_builtins.str] name: Specifies the DB instance name. The DB instance name of the same type is unique in the
               same tenant.
        :param pulumi.Input[_builtins.str] private_ip: Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
               instances, and single node instances.
        :param pulumi.Input[_builtins.str] public_ip: Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
               cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        :param pulumi.Input[_builtins.str] role: Indicates the node role.
        :param pulumi.Input[_builtins.str] status: Indicates the node status.
        :param pulumi.Input[_builtins.str] type: Indicates the node type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
        instances, and single node instances.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
        cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InstanceNodeNumUpdateVolumeArgsDict(TypedDict):
        size: pulumi.Input[_builtins.str]
        """
        Specifies the disk capacity of all new shards. Value range:
        + 10 GB to 5,000 GB when the shard node has fewer than 8 vCPUs.
        + 10 GB to 10,000 GB when the shard node has 8 or more vCPUs.
        """
elif False:
    InstanceNodeNumUpdateVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceNodeNumUpdateVolumeArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] size: Specifies the disk capacity of all new shards. Value range:
               + 10 GB to 5,000 GB when the shard node has fewer than 8 vCPUs.
               + 10 GB to 10,000 GB when the shard node has 8 or more vCPUs.
        """
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the disk capacity of all new shards. Value range:
        + 10 GB to 5,000 GB when the shard node has fewer than 8 vCPUs.
        + 10 GB to 10,000 GB when the shard node has 8 or more vCPUs.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "size", value)


if not MYPY:
    class InstanceParametersModifyParameterArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the parameter name. Some of them needs a restart of instance to take effect.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the parameter value.
        """
elif False:
    InstanceParametersModifyParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceParametersModifyParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name. Some of them needs a restart of instance to take effect.
        :param pulumi.Input[_builtins.str] value: Specifies the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter name. Some of them needs a restart of instance to take effect.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InstanceV3BackupStrategyArgsDict(TypedDict):
        keep_days: pulumi.Input[_builtins.int]
        start_time: pulumi.Input[_builtins.str]
        period: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    InstanceV3BackupStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceV3BackupStrategyArgs:
    def __init__(__self__, *,
                 keep_days: pulumi.Input[_builtins.int],
                 start_time: pulumi.Input[_builtins.str],
                 period: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "keep_days", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)


if not MYPY:
    class InstanceV3ConfigurationArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        type: pulumi.Input[_builtins.str]
elif False:
    InstanceV3ConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceV3ConfigurationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InstanceV3DatastoreArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        version: pulumi.Input[_builtins.str]
        storage_engine: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    InstanceV3DatastoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceV3DatastoreArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 storage_engine: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if storage_engine is not None:
            pulumi.set(__self__, "storage_engine", storage_engine)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_engine")

    @storage_engine.setter
    def storage_engine(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_engine", value)


if not MYPY:
    class InstanceV3FlavorArgsDict(TypedDict):
        num: pulumi.Input[_builtins.int]
        spec_code: pulumi.Input[_builtins.str]
        type: pulumi.Input[_builtins.str]
        size: NotRequired[pulumi.Input[_builtins.int]]
        storage: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    InstanceV3FlavorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceV3FlavorArgs:
    def __init__(__self__, *,
                 num: pulumi.Input[_builtins.int],
                 spec_code: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 storage: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter
    def num(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "num")

    @num.setter
    def num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "num", value)

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "spec_code")

    @spec_code.setter
    def spec_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "spec_code", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage", value)


if not MYPY:
    class InstanceV3GroupArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        nodes: NotRequired[pulumi.Input[Sequence[pulumi.Input['InstanceV3GroupNodeArgsDict']]]]
        size: NotRequired[pulumi.Input[_builtins.str]]
        status: NotRequired[pulumi.Input[_builtins.str]]
        type: NotRequired[pulumi.Input[_builtins.str]]
        used: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    InstanceV3GroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceV3GroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceV3GroupNodeArgs']]]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 used: Optional[pulumi.Input[_builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceV3GroupNodeArgs']]]]:
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceV3GroupNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def used(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "used")

    @used.setter
    def used(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "used", value)


if not MYPY:
    class InstanceV3GroupNodeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node name.
        """
        private_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the private IP address of a node.
        """
        public_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the EIP that has been bound on a node.
        """
        role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node role.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node status.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node type.
        """
elif False:
    InstanceV3GroupNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceV3GroupNodeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Indicates the node ID.
        :param pulumi.Input[_builtins.str] name: Indicates the node name.
        :param pulumi.Input[_builtins.str] private_ip: Indicates the private IP address of a node.
        :param pulumi.Input[_builtins.str] public_ip: Indicates the EIP that has been bound on a node.
        :param pulumi.Input[_builtins.str] role: Indicates the node role.
        :param pulumi.Input[_builtins.str] status: Indicates the node status.
        :param pulumi.Input[_builtins.str] type: Indicates the node type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the EIP that has been bound on a node.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InstanceV3NodeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node name.
        """
        private_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the private IP address of a node.
        """
        public_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the EIP that has been bound on a node.
        """
        role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node role.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node status.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node type.
        """
elif False:
    InstanceV3NodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceV3NodeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Indicates the node ID.
        :param pulumi.Input[_builtins.str] name: Indicates the node name.
        :param pulumi.Input[_builtins.str] private_ip: Indicates the private IP address of a node.
        :param pulumi.Input[_builtins.str] public_ip: Indicates the EIP that has been bound on a node.
        :param pulumi.Input[_builtins.str] role: Indicates the node role.
        :param pulumi.Input[_builtins.str] status: Indicates the node status.
        :param pulumi.Input[_builtins.str] type: Indicates the node type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the EIP that has been bound on a node.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ParameterTemplateCompareDifferenceArgsDict(TypedDict):
        parameter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter name.
        """
        source_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter value in the source parameter template.
        """
        target_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter value in the destination parameter template.
        """
elif False:
    ParameterTemplateCompareDifferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ParameterTemplateCompareDifferenceArgs:
    def __init__(__self__, *,
                 parameter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_value: Optional[pulumi.Input[_builtins.str]] = None,
                 target_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] parameter_name: Indicates the parameter name.
        :param pulumi.Input[_builtins.str] source_value: Indicates the parameter value in the source parameter template.
        :param pulumi.Input[_builtins.str] target_value: Indicates the parameter value in the destination parameter template.
        """
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if source_value is not None:
            pulumi.set(__self__, "source_value", source_value)
        if target_value is not None:
            pulumi.set(__self__, "target_value", target_value)

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameter_name", value)

    @_builtins.property
    @pulumi.getter(name="sourceValue")
    def source_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter value in the source parameter template.
        """
        return pulumi.get(self, "source_value")

    @source_value.setter
    def source_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_value", value)

    @_builtins.property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter value in the destination parameter template.
        """
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_value", value)


if not MYPY:
    class ParameterTemplateCopyParameterArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of replicated parameter template.
        The value is left blank by default. The description must consist of a maximum of **256** characters and cannot contain
        the carriage return character or the following special characters: >!<"&'=
        Changing this creates a new resource.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of replicated parameter template.
        The parameter template name can contain **1** to **64** characters. It can contain only letters, digits, hyphens (-),
        underscores (_), and periods (.).
        Changing this creates a new resource.
        """
        readonly: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the parameter is read-only.
        + If the value is **true**, the parameter is read-only.
        + If the value is **false**, the parameter is not read-only.
        """
        restart_required: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the instance needs to be restarted.
        + If the value is **true**, restart is required.
        + If the value is **false**, restart is not required.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter value.
        """
        value_range: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the value range.
        """
elif False:
    ParameterTemplateCopyParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ParameterTemplateCopyParameterArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 readonly: Optional[pulumi.Input[_builtins.bool]] = None,
                 restart_required: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 value_range: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] description: Specifies the description of replicated parameter template.
               The value is left blank by default. The description must consist of a maximum of **256** characters and cannot contain
               the carriage return character or the following special characters: >!<"&'=
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of replicated parameter template.
               The parameter template name can contain **1** to **64** characters. It can contain only letters, digits, hyphens (-),
               underscores (_), and periods (.).
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] readonly: Indicates whether the parameter is read-only.
               + If the value is **true**, the parameter is read-only.
               + If the value is **false**, the parameter is not read-only.
        :param pulumi.Input[_builtins.bool] restart_required: Indicates whether the instance needs to be restarted.
               + If the value is **true**, restart is required.
               + If the value is **false**, restart is not required.
        :param pulumi.Input[_builtins.str] type: Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        :param pulumi.Input[_builtins.str] value: Indicates the parameter value.
        :param pulumi.Input[_builtins.str] value_range: Indicates the value range.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if restart_required is not None:
            pulumi.set(__self__, "restart_required", restart_required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of replicated parameter template.
        The value is left blank by default. The description must consist of a maximum of **256** characters and cannot contain
        the carriage return character or the following special characters: >!<"&'=
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of replicated parameter template.
        The parameter template name can contain **1** to **64** characters. It can contain only letters, digits, hyphens (-),
        underscores (_), and periods (.).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the parameter is read-only.
        + If the value is **true**, the parameter is read-only.
        + If the value is **false**, the parameter is not read-only.
        """
        return pulumi.get(self, "readonly")

    @readonly.setter
    def readonly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "readonly", value)

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the instance needs to be restarted.
        + If the value is **true**, restart is required.
        + If the value is **false**, restart is not required.
        """
        return pulumi.get(self, "restart_required")

    @restart_required.setter
    def restart_required(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "restart_required", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the value range.
        """
        return pulumi.get(self, "value_range")

    @value_range.setter
    def value_range(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value_range", value)


if not MYPY:
    class ParameterTemplateParameterArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter template description.
        The description must consist of a maximum of 256 characters and cannot contain the carriage
        return character or the following special characters: >!<"&'=.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the parameter template name.
        The value must be 1 to 64 characters, which can contain only letters, digits, hyphens (-),
        underscores (_), and periods (.).
        """
        readonly: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the parameter is read-only.
        + If the value is **true**, the parameter is read-only.
        + If the value is **false**, the parameter is not read-only.
        """
        restart_required: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the instance needs to be restarted.
        + If the value is **true**, restart is required.
        + If the value is **false**, restart is not required.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter value.
        """
        value_range: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the value range.
        """
elif False:
    ParameterTemplateParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ParameterTemplateParameterArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 readonly: Optional[pulumi.Input[_builtins.bool]] = None,
                 restart_required: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 value_range: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] description: Specifies the parameter template description.
               The description must consist of a maximum of 256 characters and cannot contain the carriage
               return character or the following special characters: >!<"&'=.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter template name.
               The value must be 1 to 64 characters, which can contain only letters, digits, hyphens (-),
               underscores (_), and periods (.).
        :param pulumi.Input[_builtins.bool] readonly: Indicates whether the parameter is read-only.
               + If the value is **true**, the parameter is read-only.
               + If the value is **false**, the parameter is not read-only.
        :param pulumi.Input[_builtins.bool] restart_required: Indicates whether the instance needs to be restarted.
               + If the value is **true**, restart is required.
               + If the value is **false**, restart is not required.
        :param pulumi.Input[_builtins.str] type: Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        :param pulumi.Input[_builtins.str] value: Indicates the parameter value.
        :param pulumi.Input[_builtins.str] value_range: Indicates the value range.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if restart_required is not None:
            pulumi.set(__self__, "restart_required", restart_required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter template description.
        The description must consist of a maximum of 256 characters and cannot contain the carriage
        return character or the following special characters: >!<"&'=.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter template name.
        The value must be 1 to 64 characters, which can contain only letters, digits, hyphens (-),
        underscores (_), and periods (.).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the parameter is read-only.
        + If the value is **true**, the parameter is read-only.
        + If the value is **false**, the parameter is not read-only.
        """
        return pulumi.get(self, "readonly")

    @readonly.setter
    def readonly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "readonly", value)

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the instance needs to be restarted.
        + If the value is **true**, restart is required.
        + If the value is **false**, restart is not required.
        """
        return pulumi.get(self, "restart_required")

    @restart_required.setter
    def restart_required(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "restart_required", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the value range.
        """
        return pulumi.get(self, "value_range")

    @value_range.setter
    def value_range(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value_range", value)


