# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBackupsResult',
    'AwaitableGetBackupsResult',
    'get_backups',
    'get_backups_output',
]

@pulumi.output_type
class GetBackupsResult:
    """
    A collection of values returned by getBackups.
    """
    def __init__(__self__, backup_id=None, backup_name=None, backup_type=None, backups=None, begin_time=None, description=None, end_time=None, id=None, instance_id=None, instance_name=None, mode=None, region=None, status=None):
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if backup_name and not isinstance(backup_name, str):
            raise TypeError("Expected argument 'backup_name' to be a str")
        pulumi.set(__self__, "backup_name", backup_name)
        if backup_type and not isinstance(backup_type, str):
            raise TypeError("Expected argument 'backup_type' to be a str")
        pulumi.set(__self__, "backup_type", backup_type)
        if backups and not isinstance(backups, list):
            raise TypeError("Expected argument 'backups' to be a list")
        pulumi.set(__self__, "backups", backups)
        if begin_time and not isinstance(begin_time, str):
            raise TypeError("Expected argument 'begin_time' to be a str")
        pulumi.set(__self__, "begin_time", begin_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_name")

    @_builtins.property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_type")

    @_builtins.property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetBackupsBackupResult']:
        """
        Indicates the backup list.
        The backups structure is documented below.
        """
        return pulumi.get(self, "backups")

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[_builtins.str]:
        """
        Indicates the backup start time.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Indicates the backup description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Indicates the backup end time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the DB instance from which the backup was created.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the DB instance for which the backup is created.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the backup status.
        """
        return pulumi.get(self, "status")


class AwaitableGetBackupsResult(GetBackupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupsResult(
            backup_id=self.backup_id,
            backup_name=self.backup_name,
            backup_type=self.backup_type,
            backups=self.backups,
            begin_time=self.begin_time,
            description=self.description,
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            instance_name=self.instance_name,
            mode=self.mode,
            region=self.region,
            status=self.status)


def get_backups(backup_id: Optional[_builtins.str] = None,
                backup_name: Optional[_builtins.str] = None,
                backup_type: Optional[_builtins.str] = None,
                begin_time: Optional[_builtins.str] = None,
                description: Optional[_builtins.str] = None,
                end_time: Optional[_builtins.str] = None,
                instance_id: Optional[_builtins.str] = None,
                instance_name: Optional[_builtins.str] = None,
                mode: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                status: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupsResult:
    """
    Use this data source to get the list of DDS instance backups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all = huaweicloud.Dds.get_backups()
    ```


    :param _builtins.str backup_id: Specifies the backup ID.
           If the backup ID belongs to an automated incremental backup, the `instance_id` is required.
    :param _builtins.str backup_name: Specifies the backup name.
    :param _builtins.str backup_type: Specifies the backup type. Valid values are:
           + **Auto**: Indicates automated full backup.
           + **Manual**: Indicates manual full backup.
           + **Incremental**: Indicates automated incremental backup.
    :param _builtins.str begin_time: Specifies the start time of the query. The format is **yyyy-mm-dd hh:mm:ss**.
           The value is in UTC format. It's required with `end_time`.
    :param _builtins.str description: Specifies the backup description.
    :param _builtins.str end_time: Specifies the end time of the query. The format is **yyyy-mm-dd hh:mm:ss**.
           The value is in UTC format. It's required with `begin_time`.
    :param _builtins.str instance_id: Specifies the ID of the DB instance from which the backup was created.
    :param _builtins.str instance_name: Specifies the name of the DB instance for which the backup is created.
    :param _builtins.str mode: Specifies the DB instance mode. Valid values are **Sharding** and **ReplicaSet**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the backup status. Valid values are:
           + **BUILDING**: Backup in progress.
           + **COMPLETED**: Backup completed.
           + **FAILED**: Backup failed.
           + **DISABLED**: Backup being deleted.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['backupName'] = backup_name
    __args__['backupType'] = backup_type
    __args__['beginTime'] = begin_time
    __args__['description'] = description
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['instanceName'] = instance_name
    __args__['mode'] = mode
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dds/getBackups:getBackups', __args__, opts=opts, typ=GetBackupsResult).value

    return AwaitableGetBackupsResult(
        backup_id=pulumi.get(__ret__, 'backup_id'),
        backup_name=pulumi.get(__ret__, 'backup_name'),
        backup_type=pulumi.get(__ret__, 'backup_type'),
        backups=pulumi.get(__ret__, 'backups'),
        begin_time=pulumi.get(__ret__, 'begin_time'),
        description=pulumi.get(__ret__, 'description'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        mode=pulumi.get(__ret__, 'mode'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_backups_output(backup_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       backup_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       backup_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       begin_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       instance_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupsResult]:
    """
    Use this data source to get the list of DDS instance backups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all = huaweicloud.Dds.get_backups()
    ```


    :param _builtins.str backup_id: Specifies the backup ID.
           If the backup ID belongs to an automated incremental backup, the `instance_id` is required.
    :param _builtins.str backup_name: Specifies the backup name.
    :param _builtins.str backup_type: Specifies the backup type. Valid values are:
           + **Auto**: Indicates automated full backup.
           + **Manual**: Indicates manual full backup.
           + **Incremental**: Indicates automated incremental backup.
    :param _builtins.str begin_time: Specifies the start time of the query. The format is **yyyy-mm-dd hh:mm:ss**.
           The value is in UTC format. It's required with `end_time`.
    :param _builtins.str description: Specifies the backup description.
    :param _builtins.str end_time: Specifies the end time of the query. The format is **yyyy-mm-dd hh:mm:ss**.
           The value is in UTC format. It's required with `begin_time`.
    :param _builtins.str instance_id: Specifies the ID of the DB instance from which the backup was created.
    :param _builtins.str instance_name: Specifies the name of the DB instance for which the backup is created.
    :param _builtins.str mode: Specifies the DB instance mode. Valid values are **Sharding** and **ReplicaSet**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the backup status. Valid values are:
           + **BUILDING**: Backup in progress.
           + **COMPLETED**: Backup completed.
           + **FAILED**: Backup failed.
           + **DISABLED**: Backup being deleted.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['backupName'] = backup_name
    __args__['backupType'] = backup_type
    __args__['beginTime'] = begin_time
    __args__['description'] = description
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['instanceName'] = instance_name
    __args__['mode'] = mode
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dds/getBackups:getBackups', __args__, opts=opts, typ=GetBackupsResult)
    return __ret__.apply(lambda __response__: GetBackupsResult(
        backup_id=pulumi.get(__response__, 'backup_id'),
        backup_name=pulumi.get(__response__, 'backup_name'),
        backup_type=pulumi.get(__response__, 'backup_type'),
        backups=pulumi.get(__response__, 'backups'),
        begin_time=pulumi.get(__response__, 'begin_time'),
        description=pulumi.get(__response__, 'description'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instance_name=pulumi.get(__response__, 'instance_name'),
        mode=pulumi.get(__response__, 'mode'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
