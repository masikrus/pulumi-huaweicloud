# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetStorageTypesResult',
    'AwaitableGetStorageTypesResult',
    'get_storage_types',
    'get_storage_types_output',
]

@pulumi.output_type
class GetStorageTypesResult:
    """
    A collection of values returned by getStorageTypes.
    """
    def __init__(__self__, engine_name=None, id=None, region=None, storage_types=None):
        if engine_name and not isinstance(engine_name, str):
            raise TypeError("Expected argument 'engine_name' to be a str")
        pulumi.set(__self__, "engine_name", engine_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if storage_types and not isinstance(storage_types, list):
            raise TypeError("Expected argument 'storage_types' to be a list")
        pulumi.set(__self__, "storage_types", storage_types)

    @_builtins.property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "engine_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageTypes")
    def storage_types(self) -> Sequence['outputs.GetStorageTypesStorageTypeResult']:
        """
        Indicates the database disk information list.
        The storage_types structure is documented below.
        """
        return pulumi.get(self, "storage_types")


class AwaitableGetStorageTypesResult(GetStorageTypesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStorageTypesResult(
            engine_name=self.engine_name,
            id=self.id,
            region=self.region,
            storage_types=self.storage_types)


def get_storage_types(engine_name: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStorageTypesResult:
    """
    Use this data source to get the list of DDS storage types.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dds.get_storage_types(engine_name="DDS-Community")
    ```


    :param _builtins.str engine_name: Specifies the database type. The valid value is **DDS-Community**.
           For details, see [documentation](https://support.huaweicloud.com/api-dds/dds_database_version.html).
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['engineName'] = engine_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dds/getStorageTypes:getStorageTypes', __args__, opts=opts, typ=GetStorageTypesResult).value

    return AwaitableGetStorageTypesResult(
        engine_name=pulumi.get(__ret__, 'engine_name'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        storage_types=pulumi.get(__ret__, 'storage_types'))
def get_storage_types_output(engine_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStorageTypesResult]:
    """
    Use this data source to get the list of DDS storage types.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dds.get_storage_types(engine_name="DDS-Community")
    ```


    :param _builtins.str engine_name: Specifies the database type. The valid value is **DDS-Community**.
           For details, see [documentation](https://support.huaweicloud.com/api-dds/dds_database_version.html).
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['engineName'] = engine_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dds/getStorageTypes:getStorageTypes', __args__, opts=opts, typ=GetStorageTypesResult)
    return __ret__.apply(lambda __response__: GetStorageTypesResult(
        engine_name=pulumi.get(__response__, 'engine_name'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        storage_types=pulumi.get(__response__, 'storage_types')))
