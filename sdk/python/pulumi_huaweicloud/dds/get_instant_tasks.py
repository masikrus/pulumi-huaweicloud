# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstantTasksResult',
    'AwaitableGetInstantTasksResult',
    'get_instant_tasks',
    'get_instant_tasks_output',
]

@pulumi.output_type
class GetInstantTasksResult:
    """
    A collection of values returned by getInstantTasks.
    """
    def __init__(__self__, end_time=None, id=None, jobs=None, name=None, region=None, start_time=None, status=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if jobs and not isinstance(jobs, list):
            raise TypeError("Expected argument 'jobs' to be a list")
        pulumi.set(__self__, "jobs", jobs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence['outputs.GetInstantTasksJobResult']:
        """
        Indicates the tasks list.
        """
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the task name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the task status.
        """
        return pulumi.get(self, "status")


class AwaitableGetInstantTasksResult(GetInstantTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstantTasksResult(
            end_time=self.end_time,
            id=self.id,
            jobs=self.jobs,
            name=self.name,
            region=self.region,
            start_time=self.start_time,
            status=self.status)


def get_instant_tasks(end_time: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      start_time: Optional[_builtins.str] = None,
                      status: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstantTasksResult:
    """
    Use this data source to get the list of DDS instant tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Dds.get_instant_tasks(start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str end_time: Specifies the end time. The format of the end time is **yyyy-mm-ddThh:mm:ssZ**
           and the end time must be later than the start time. The time span cannot be longer than 30 days.
    :param _builtins.str name: Specifies the task name. The value can be:
           + **CreateMongoDB**: Create a cluster instance.
           + **CreateMongoDBReplica**: Create a replica set instance.
           + **CreateMongoDBReplicaSingle**: Create a single node instance.
           + **EnlargeMongoDBVolume**: Scale up the storage capacity of a DB instance.
           + **ResizeMongoDBInstance**: Change the class of a DB instance of Community Edition.
           + **ResizeDfvMongoDBInstance**: Change the class of a DB instance of Enhanced Edition.
           + **EnlargeMongoDBGroup**: Add a node.
           + **ReplicaSetEnlargeNode**: Add a standby node to a replica set instance.
           + **AddReadonlyNode**: Add a read replica.
           + **RestartInstance**: Restart a cluster instance.
           + **RestartGroup**: Restart a cluster node group.
           + **RestartNode**: Restart a cluster node.
           + **RestartReplicaSetInstance**: Restart a replica set instance.
           + **RestartReplicaSingleInstance**: Restart a single node instance.
           + **SwitchPrimary**: Perform a primary/standby switchover.
           + **ModifyIp**: Change the private IP address.
           + **ModifySecurityGroup**: Modify a security group.
           + **ModifyPort**: Change the database port.
           + **BindPublicIP**: Bind an EIP.
           + **UnbindPublicIP**: Unbind an EIP.
           + **SwitchInstanceSSL**: Switch the SSL.
           + **AzMigrate**: Migrate a DB instance from one AZ to another.
           + **CreateIp**: Enable the shard/config IP address.
           + **ModifyOpLogSize**: Change the oplog size.
           + **RestoreMongoDB**: Restore a cluster instance to a new DB instance.
           + **RestoreMongoDB_Replica**: Restore a replica set instance to a new DB instance.
           + **RestoreMongoDB_Replica_Single**: Restore a single node instance to a new DB instance.
           + **RestoreMongoDB_Replica_PITR**: Restore a replica set instance to a specified point in time.
           + **MongodbSnapshotBackup**: Create a physical backup.
           + **MongodbSnapshotEBackup**: Create a snapshot backup.
           + **MongodbRestoreData2CurrentInstance**: Restore a backup to the original DB instance.
           + **MongodbRestoreData2NewInstance**: Restore a backup to a new DB instance.
           + **MongodbPitr2CurrentInstance**: Restore a backup to a specified time point of the original DB instance.
           + **MongodbPitr2NewInstance**: Restore a backup to a specified time point of a new DB instance.
           + **MongodbRecycleBackup**: Restore a backup from the recycle bin.
           + **MongodbRestoreTable**: Restore databases and tables to a specified point in time.
           + **UpgradeDatabaseVersion**: Upgrade the database patch.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time. The format of the start time is **yyyy-mm-ddThh:mm:ssZ**.
    :param _builtins.str status: Specifies the task status.
           + **Running**: Indicates that the task is being executed.
           + **Completed**: Indicates that the task is completed.
           + **Failed**: Indicates that the task fails.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['name'] = name
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dds/getInstantTasks:getInstantTasks', __args__, opts=opts, typ=GetInstantTasksResult).value

    return AwaitableGetInstantTasksResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        jobs=pulumi.get(__ret__, 'jobs'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'))
def get_instant_tasks_output(end_time: Optional[pulumi.Input[_builtins.str]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             start_time: Optional[pulumi.Input[_builtins.str]] = None,
                             status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstantTasksResult]:
    """
    Use this data source to get the list of DDS instant tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Dds.get_instant_tasks(start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str end_time: Specifies the end time. The format of the end time is **yyyy-mm-ddThh:mm:ssZ**
           and the end time must be later than the start time. The time span cannot be longer than 30 days.
    :param _builtins.str name: Specifies the task name. The value can be:
           + **CreateMongoDB**: Create a cluster instance.
           + **CreateMongoDBReplica**: Create a replica set instance.
           + **CreateMongoDBReplicaSingle**: Create a single node instance.
           + **EnlargeMongoDBVolume**: Scale up the storage capacity of a DB instance.
           + **ResizeMongoDBInstance**: Change the class of a DB instance of Community Edition.
           + **ResizeDfvMongoDBInstance**: Change the class of a DB instance of Enhanced Edition.
           + **EnlargeMongoDBGroup**: Add a node.
           + **ReplicaSetEnlargeNode**: Add a standby node to a replica set instance.
           + **AddReadonlyNode**: Add a read replica.
           + **RestartInstance**: Restart a cluster instance.
           + **RestartGroup**: Restart a cluster node group.
           + **RestartNode**: Restart a cluster node.
           + **RestartReplicaSetInstance**: Restart a replica set instance.
           + **RestartReplicaSingleInstance**: Restart a single node instance.
           + **SwitchPrimary**: Perform a primary/standby switchover.
           + **ModifyIp**: Change the private IP address.
           + **ModifySecurityGroup**: Modify a security group.
           + **ModifyPort**: Change the database port.
           + **BindPublicIP**: Bind an EIP.
           + **UnbindPublicIP**: Unbind an EIP.
           + **SwitchInstanceSSL**: Switch the SSL.
           + **AzMigrate**: Migrate a DB instance from one AZ to another.
           + **CreateIp**: Enable the shard/config IP address.
           + **ModifyOpLogSize**: Change the oplog size.
           + **RestoreMongoDB**: Restore a cluster instance to a new DB instance.
           + **RestoreMongoDB_Replica**: Restore a replica set instance to a new DB instance.
           + **RestoreMongoDB_Replica_Single**: Restore a single node instance to a new DB instance.
           + **RestoreMongoDB_Replica_PITR**: Restore a replica set instance to a specified point in time.
           + **MongodbSnapshotBackup**: Create a physical backup.
           + **MongodbSnapshotEBackup**: Create a snapshot backup.
           + **MongodbRestoreData2CurrentInstance**: Restore a backup to the original DB instance.
           + **MongodbRestoreData2NewInstance**: Restore a backup to a new DB instance.
           + **MongodbPitr2CurrentInstance**: Restore a backup to a specified time point of the original DB instance.
           + **MongodbPitr2NewInstance**: Restore a backup to a specified time point of a new DB instance.
           + **MongodbRecycleBackup**: Restore a backup from the recycle bin.
           + **MongodbRestoreTable**: Restore databases and tables to a specified point in time.
           + **UpgradeDatabaseVersion**: Upgrade the database patch.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time. The format of the start time is **yyyy-mm-ddThh:mm:ssZ**.
    :param _builtins.str status: Specifies the task status.
           + **Running**: Indicates that the task is being executed.
           + **Completed**: Indicates that the task is completed.
           + **Failed**: Indicates that the task fails.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['name'] = name
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dds/getInstantTasks:getInstantTasks', __args__, opts=opts, typ=GetInstantTasksResult)
    return __ret__.apply(lambda __response__: GetInstantTasksResult(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        jobs=pulumi.get(__response__, 'jobs'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status')))
