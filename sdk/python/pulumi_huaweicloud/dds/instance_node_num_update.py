# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceNodeNumUpdateArgs', 'InstanceNodeNumUpdate']

@pulumi.input_type
class InstanceNodeNumUpdateArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 num: pulumi.Input[_builtins.str],
                 spec_code: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 volume: Optional[pulumi.Input['InstanceNodeNumUpdateVolumeArgs']] = None):
        """
        The set of arguments for constructing a InstanceNodeNumUpdate resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
        :param pulumi.Input[_builtins.str] num: Specifies the number of mongos or shard nodes to be added. A cluster instance
               supports up to 32 mongos nodes and 32 shard nodes.
        :param pulumi.Input[_builtins.str] spec_code: Specifies the resource specification code.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the object to be scaled. Value options:
               + **mongos**: mongos nodes are to be added.
               + **shard**: shard nodes are to be added.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input['InstanceNodeNumUpdateVolumeArgs'] volume: Specifies the disk capacity of all new shards.
               + This parameter is not transferred when the mongos nodes are to be added.
               + This parameter is mandatory when the shard nodes are to be added.
               
               The volume structure is documented below.
               
               <a name="volume_struct"></a>
               The `volume` block supports:
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a DDS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def num(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the number of mongos or shard nodes to be added. A cluster instance
        supports up to 32 mongos nodes and 32 shard nodes.
        """
        return pulumi.get(self, "num")

    @num.setter
    def num(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "num", value)

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource specification code.
        """
        return pulumi.get(self, "spec_code")

    @spec_code.setter
    def spec_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "spec_code", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the object to be scaled. Value options:
        + **mongos**: mongos nodes are to be added.
        + **shard**: shard nodes are to be added.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['InstanceNodeNumUpdateVolumeArgs']]:
        """
        Specifies the disk capacity of all new shards.
        + This parameter is not transferred when the mongos nodes are to be added.
        + This parameter is mandatory when the shard nodes are to be added.

        The volume structure is documented below.

        <a name="volume_struct"></a>
        The `volume` block supports:
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['InstanceNodeNumUpdateVolumeArgs']]):
        pulumi.set(self, "volume", value)


@pulumi.input_type
class _InstanceNodeNumUpdateState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 num: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 volume: Optional[pulumi.Input['InstanceNodeNumUpdateVolumeArgs']] = None):
        """
        Input properties used for looking up and filtering InstanceNodeNumUpdate resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
        :param pulumi.Input[_builtins.str] num: Specifies the number of mongos or shard nodes to be added. A cluster instance
               supports up to 32 mongos nodes and 32 shard nodes.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] spec_code: Specifies the resource specification code.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the object to be scaled. Value options:
               + **mongos**: mongos nodes are to be added.
               + **shard**: shard nodes are to be added.
        :param pulumi.Input['InstanceNodeNumUpdateVolumeArgs'] volume: Specifies the disk capacity of all new shards.
               + This parameter is not transferred when the mongos nodes are to be added.
               + This parameter is mandatory when the shard nodes are to be added.
               
               The volume structure is documented below.
               
               <a name="volume_struct"></a>
               The `volume` block supports:
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if num is not None:
            pulumi.set(__self__, "num", num)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if spec_code is not None:
            pulumi.set(__self__, "spec_code", spec_code)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a DDS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def num(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the number of mongos or shard nodes to be added. A cluster instance
        supports up to 32 mongos nodes and 32 shard nodes.
        """
        return pulumi.get(self, "num")

    @num.setter
    def num(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "num", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource specification code.
        """
        return pulumi.get(self, "spec_code")

    @spec_code.setter
    def spec_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spec_code", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the object to be scaled. Value options:
        + **mongos**: mongos nodes are to be added.
        + **shard**: shard nodes are to be added.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['InstanceNodeNumUpdateVolumeArgs']]:
        """
        Specifies the disk capacity of all new shards.
        + This parameter is not transferred when the mongos nodes are to be added.
        + This parameter is mandatory when the shard nodes are to be added.

        The volume structure is documented below.

        <a name="volume_struct"></a>
        The `volume` block supports:
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['InstanceNodeNumUpdateVolumeArgs']]):
        pulumi.set(self, "volume", value)


@pulumi.type_token("huaweicloud:Dds/instanceNodeNumUpdate:InstanceNodeNumUpdate")
class InstanceNodeNumUpdate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 num: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 volume: Optional[pulumi.Input[Union['InstanceNodeNumUpdateVolumeArgs', 'InstanceNodeNumUpdateVolumeArgsDict']]] = None,
                 __props__=None):
        """
        Manages a DDS instance node num update resource within HuaweiCloud.

        ## Example Usage

        ### Update instance's mongos node num

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dds.InstanceNodeNumUpdate("test",
            instance_id=instance_id,
            type="mongos",
            spec_code="dds.mongodb.s6.medium.4.mongos",
            num="2")
        ```

        ### Update instance's shard node num

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dds.InstanceNodeNumUpdate("test",
            instance_id=instance_id,
            type="shard",
            spec_code="dds.mongodb.s6.medium.4.shard",
            num="2",
            volume={
                "size": "20",
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
        :param pulumi.Input[_builtins.str] num: Specifies the number of mongos or shard nodes to be added. A cluster instance
               supports up to 32 mongos nodes and 32 shard nodes.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] spec_code: Specifies the resource specification code.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the object to be scaled. Value options:
               + **mongos**: mongos nodes are to be added.
               + **shard**: shard nodes are to be added.
        :param pulumi.Input[Union['InstanceNodeNumUpdateVolumeArgs', 'InstanceNodeNumUpdateVolumeArgsDict']] volume: Specifies the disk capacity of all new shards.
               + This parameter is not transferred when the mongos nodes are to be added.
               + This parameter is mandatory when the shard nodes are to be added.
               
               The volume structure is documented below.
               
               <a name="volume_struct"></a>
               The `volume` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceNodeNumUpdateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DDS instance node num update resource within HuaweiCloud.

        ## Example Usage

        ### Update instance's mongos node num

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dds.InstanceNodeNumUpdate("test",
            instance_id=instance_id,
            type="mongos",
            spec_code="dds.mongodb.s6.medium.4.mongos",
            num="2")
        ```

        ### Update instance's shard node num

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dds.InstanceNodeNumUpdate("test",
            instance_id=instance_id,
            type="shard",
            spec_code="dds.mongodb.s6.medium.4.shard",
            num="2",
            volume={
                "size": "20",
            })
        ```

        :param str resource_name: The name of the resource.
        :param InstanceNodeNumUpdateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceNodeNumUpdateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 num: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 volume: Optional[pulumi.Input[Union['InstanceNodeNumUpdateVolumeArgs', 'InstanceNodeNumUpdateVolumeArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceNodeNumUpdateArgs.__new__(InstanceNodeNumUpdateArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if num is None and not opts.urn:
                raise TypeError("Missing required property 'num'")
            __props__.__dict__["num"] = num
            __props__.__dict__["region"] = region
            if spec_code is None and not opts.urn:
                raise TypeError("Missing required property 'spec_code'")
            __props__.__dict__["spec_code"] = spec_code
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["volume"] = volume
        super(InstanceNodeNumUpdate, __self__).__init__(
            'huaweicloud:Dds/instanceNodeNumUpdate:InstanceNodeNumUpdate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            num: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            spec_code: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            volume: Optional[pulumi.Input[Union['InstanceNodeNumUpdateVolumeArgs', 'InstanceNodeNumUpdateVolumeArgsDict']]] = None) -> 'InstanceNodeNumUpdate':
        """
        Get an existing InstanceNodeNumUpdate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
        :param pulumi.Input[_builtins.str] num: Specifies the number of mongos or shard nodes to be added. A cluster instance
               supports up to 32 mongos nodes and 32 shard nodes.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] spec_code: Specifies the resource specification code.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the object to be scaled. Value options:
               + **mongos**: mongos nodes are to be added.
               + **shard**: shard nodes are to be added.
        :param pulumi.Input[Union['InstanceNodeNumUpdateVolumeArgs', 'InstanceNodeNumUpdateVolumeArgsDict']] volume: Specifies the disk capacity of all new shards.
               + This parameter is not transferred when the mongos nodes are to be added.
               + This parameter is mandatory when the shard nodes are to be added.
               
               The volume structure is documented below.
               
               <a name="volume_struct"></a>
               The `volume` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceNodeNumUpdateState.__new__(_InstanceNodeNumUpdateState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["num"] = num
        __props__.__dict__["region"] = region
        __props__.__dict__["spec_code"] = spec_code
        __props__.__dict__["type"] = type
        __props__.__dict__["volume"] = volume
        return InstanceNodeNumUpdate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a DDS instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def num(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the number of mongos or shard nodes to be added. A cluster instance
        supports up to 32 mongos nodes and 32 shard nodes.
        """
        return pulumi.get(self, "num")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the object to be scaled. Value options:
        + **mongos**: mongos nodes are to be added.
        + **shard**: shard nodes are to be added.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> pulumi.Output[Optional['outputs.InstanceNodeNumUpdateVolume']]:
        """
        Specifies the disk capacity of all new shards.
        + This parameter is not transferred when the mongos nodes are to be added.
        + This parameter is mandatory when the shard nodes are to be added.

        The volume structure is documented below.

        <a name="volume_struct"></a>
        The `volume` block supports:
        """
        return pulumi.get(self, "volume")

