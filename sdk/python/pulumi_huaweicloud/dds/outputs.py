# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'BackupDatastore',
    'CollectionRestoreRestoreCollection',
    'CollectionRestoreRestoreCollectionCollection',
    'DatabaseRoleInheritedPrivilege',
    'DatabaseRoleInheritedPrivilegeResource',
    'DatabaseRolePrivilege',
    'DatabaseRolePrivilegeResource',
    'DatabaseRoleRole',
    'DatabaseUserInheritedPrivilege',
    'DatabaseUserInheritedPrivilegeResource',
    'DatabaseUserPrivilege',
    'DatabaseUserPrivilegeResource',
    'DatabaseUserRole',
    'InstanceBackupStrategy',
    'InstanceConfiguration',
    'InstanceDatastore',
    'InstanceFlavor',
    'InstanceGroup',
    'InstanceGroupNode',
    'InstanceNode',
    'InstanceNodeNumUpdateVolume',
    'InstanceParametersModifyParameter',
    'InstanceV3BackupStrategy',
    'InstanceV3Configuration',
    'InstanceV3Datastore',
    'InstanceV3Flavor',
    'InstanceV3Group',
    'InstanceV3GroupNode',
    'InstanceV3Node',
    'ParameterTemplateCompareDifference',
    'ParameterTemplateCopyParameter',
    'ParameterTemplateParameter',
    'GetAuditLogsAuditLogResult',
    'GetBackupDownloadLinksFileResult',
    'GetBackupsBackupResult',
    'GetBackupsBackupDatastoreResult',
    'GetDatabaseRolesRoleResult',
    'GetDatabaseRolesRoleInheritedPrivilegeResult',
    'GetDatabaseRolesRoleInheritedPrivilegeResourceResult',
    'GetDatabaseRolesRolePrivilegeResult',
    'GetDatabaseRolesRolePrivilegeResourceResult',
    'GetDatabaseRolesRoleRoleResult',
    'GetDatabaseUsersUserResult',
    'GetDatabaseUsersUserInheritedPrivilegeResult',
    'GetDatabaseUsersUserInheritedPrivilegeResourceResult',
    'GetDatabaseUsersUserPrivilegeResult',
    'GetDatabaseUsersUserPrivilegeResourceResult',
    'GetDatabaseUsersUserRoleResult',
    'GetDatabasesDatabaseResult',
    'GetErrorLogLinksLinkResult',
    'GetErrorLogsErrorLogResult',
    'GetFlavorsFlavorResult',
    'GetFlavorsV3FlavorResult',
    'GetInstanceParameterModificationRecordsHistoryResult',
    'GetInstancesInstanceResult',
    'GetInstancesInstanceBackupStrategyResult',
    'GetInstancesInstanceDatastoreResult',
    'GetInstancesInstanceGroupResult',
    'GetInstancesInstanceGroupNodeResult',
    'GetInstancesInstanceNodeResult',
    'GetInstantTasksJobResult',
    'GetParameterTemplatesConfigurationResult',
    'GetPtApplicableInstancesInstanceResult',
    'GetPtApplicableInstancesInstanceEntityResult',
    'GetPtApplicationRecordsHistoryResult',
    'GetPtModificationRecordsHistoryResult',
    'GetQuotasQuotaResult',
    'GetRecycleInstancesInstanceResult',
    'GetRecycleInstancesInstanceDatastoreResult',
    'GetRestoreTimeRangesRestoreTimeResult',
    'GetScheduledTasksScheduleResult',
    'GetSlowLogLinksLinkResult',
    'GetSlowLogsSlowLogResult',
    'GetSslCertDownloadLinksCertResult',
    'GetStorageTypesStorageTypeResult',
]

@pulumi.output_type
class BackupDatastore(dict):
    def __init__(__self__, *,
                 type: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Indicates the DB engine.
        :param _builtins.str version: Indicates the database version. The value can be **4.2**, **4.0**, or **3.4**.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the DB engine.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Indicates the database version. The value can be **4.2**, **4.0**, or **3.4**.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class CollectionRestoreRestoreCollection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restoreDatabaseTime":
            suggest = "restore_database_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectionRestoreRestoreCollection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectionRestoreRestoreCollection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectionRestoreRestoreCollection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: _builtins.str,
                 collections: Optional[Sequence['outputs.CollectionRestoreRestoreCollectionCollection']] = None,
                 restore_database_time: Optional[_builtins.str] = None):
        """
        :param _builtins.str database: Specifies the database name.
               Changing this creates a new resource.
        :param Sequence['CollectionRestoreRestoreCollectionCollectionArgs'] collections: Specifies the collection informations.
               Changing this creates a new resource.
               The collections structure is documented below.
        :param _builtins.str restore_database_time: Specifies the database restoration time point.
               It is mandatory for database level restoration. The value is a UNIX timestamp, in milliseconds. The time zone is UTC.
               Changing this creates a new resource.
               
               <a name="block--restore_collections--collections"></a>
               The `collections` block supports:
        """
        pulumi.set(__self__, "database", database)
        if collections is not None:
            pulumi.set(__self__, "collections", collections)
        if restore_database_time is not None:
            pulumi.set(__self__, "restore_database_time", restore_database_time)

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Specifies the database name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Optional[Sequence['outputs.CollectionRestoreRestoreCollectionCollection']]:
        """
        Specifies the collection informations.
        Changing this creates a new resource.
        The collections structure is documented below.
        """
        return pulumi.get(self, "collections")

    @_builtins.property
    @pulumi.getter(name="restoreDatabaseTime")
    def restore_database_time(self) -> Optional[_builtins.str]:
        """
        Specifies the database restoration time point.
        It is mandatory for database level restoration. The value is a UNIX timestamp, in milliseconds. The time zone is UTC.
        Changing this creates a new resource.

        <a name="block--restore_collections--collections"></a>
        The `collections` block supports:
        """
        return pulumi.get(self, "restore_database_time")


@pulumi.output_type
class CollectionRestoreRestoreCollectionCollection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "oldName":
            suggest = "old_name"
        elif key == "restoreCollectionTime":
            suggest = "restore_collection_time"
        elif key == "newName":
            suggest = "new_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectionRestoreRestoreCollectionCollection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectionRestoreRestoreCollectionCollection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectionRestoreRestoreCollectionCollection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 old_name: _builtins.str,
                 restore_collection_time: _builtins.str,
                 new_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str old_name: Specifies the collection name before the restoration.
               Changing this creates a new resource.
        :param _builtins.str restore_collection_time: Specifies the collection restoration time point.
               The value is a UNIX timestamp, in milliseconds. The time zone is UTC.
               Changing this creates a new resource.
        :param _builtins.str new_name: Specifies the collection name after the restoration.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "old_name", old_name)
        pulumi.set(__self__, "restore_collection_time", restore_collection_time)
        if new_name is not None:
            pulumi.set(__self__, "new_name", new_name)

    @_builtins.property
    @pulumi.getter(name="oldName")
    def old_name(self) -> _builtins.str:
        """
        Specifies the collection name before the restoration.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "old_name")

    @_builtins.property
    @pulumi.getter(name="restoreCollectionTime")
    def restore_collection_time(self) -> _builtins.str:
        """
        Specifies the collection restoration time point.
        The value is a UNIX timestamp, in milliseconds. The time zone is UTC.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "restore_collection_time")

    @_builtins.property
    @pulumi.getter(name="newName")
    def new_name(self) -> Optional[_builtins.str]:
        """
        Specifies the collection name after the restoration.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "new_name")


@pulumi.output_type
class DatabaseRoleInheritedPrivilege(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[_builtins.str]] = None,
                 resources: Optional[Sequence['outputs.DatabaseRoleInheritedPrivilegeResource']] = None):
        """
        :param Sequence[_builtins.str] actions: The operation permission list.
        :param Sequence['DatabaseRoleInheritedPrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[_builtins.str]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.DatabaseRoleInheritedPrivilegeResource']]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class DatabaseRoleInheritedPrivilegeResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseRoleInheritedPrivilegeResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseRoleInheritedPrivilegeResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseRoleInheritedPrivilegeResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection: Optional[_builtins.str] = None,
                 db_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str collection: The database collection type.
        :param _builtins.str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> Optional[_builtins.str]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[_builtins.str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class DatabaseRolePrivilege(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[_builtins.str]] = None,
                 resources: Optional[Sequence['outputs.DatabaseRolePrivilegeResource']] = None):
        """
        :param Sequence[_builtins.str] actions: The operation permission list.
        :param Sequence['DatabaseRolePrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[_builtins.str]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.DatabaseRolePrivilegeResource']]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class DatabaseRolePrivilegeResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseRolePrivilegeResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseRolePrivilegeResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseRolePrivilegeResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection: Optional[_builtins.str] = None,
                 db_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str collection: The database collection type.
        :param _builtins.str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> Optional[_builtins.str]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[_builtins.str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class DatabaseRoleRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseRoleRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseRoleRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseRoleRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_name: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        :param _builtins.str name: Specifies the name of role owned by the current role.
               The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
               allowed. Changing this parameter will create a new role.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of role owned by the current role.
        The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
        allowed. Changing this parameter will create a new role.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DatabaseUserInheritedPrivilege(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[_builtins.str]] = None,
                 resources: Optional[Sequence['outputs.DatabaseUserInheritedPrivilegeResource']] = None):
        """
        :param Sequence[_builtins.str] actions: The operation permission list.
        :param Sequence['DatabaseUserInheritedPrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[_builtins.str]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.DatabaseUserInheritedPrivilegeResource']]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class DatabaseUserInheritedPrivilegeResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseUserInheritedPrivilegeResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseUserInheritedPrivilegeResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseUserInheritedPrivilegeResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection: Optional[_builtins.str] = None,
                 db_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str collection: The database collection type.
        :param _builtins.str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> Optional[_builtins.str]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[_builtins.str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class DatabaseUserPrivilege(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[_builtins.str]] = None,
                 resources: Optional[Sequence['outputs.DatabaseUserPrivilegeResource']] = None):
        """
        :param Sequence[_builtins.str] actions: The operation permission list.
        :param Sequence['DatabaseUserPrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[_builtins.str]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.DatabaseUserPrivilegeResource']]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class DatabaseUserPrivilegeResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseUserPrivilegeResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseUserPrivilegeResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseUserPrivilegeResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection: Optional[_builtins.str] = None,
                 db_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str collection: The database collection type.
        :param _builtins.str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> Optional[_builtins.str]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[_builtins.str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class DatabaseUserRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseUserRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseUserRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseUserRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_name: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        :param _builtins.str name: Specifies the name of role owned by the current user.
               The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
               allowed. Changing this parameter will create a new user.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of role owned by the current user.
        The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
        allowed. Changing this parameter will create a new user.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepDays":
            suggest = "keep_days"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str,
                 period: Optional[_builtins.str] = None):
        """
        :param _builtins.int keep_days: Specifies the number of days to retain the generated backup files. The value range is
               from 0 to 732. If this parameter is set to 0, the automated backup policy is disabled.
        :param _builtins.str start_time: Specifies the backup time window. Automated backups will be triggered during
               the backup time window. The value cannot be empty. It must be a valid value in the "hh:mm-HH:MM" format.
               The current time is in the UTC format.
               + The HH value must be 1 greater than the hh value.
               + The values from mm and MM must be the same and must be set to **00**.
        :param _builtins.str period: Specifies the backup cycle. Data will be automatically backed up on the
               selected days every week.
               + If you set the `keep_days` to 0, this parameter is no need to set.
               + If you set the `keep_days` within 6 days, set the parameter value to **1,2,3,4,5,6,7**, data is automatically
               backed up on each day every week.
               + If you set the `keep_days` between 7 and 732 days, set the parameter value to at least one day of every week.
               For example: **1**, **3,5**.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Specifies the number of days to retain the generated backup files. The value range is
        from 0 to 732. If this parameter is set to 0, the automated backup policy is disabled.
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the backup time window. Automated backups will be triggered during
        the backup time window. The value cannot be empty. It must be a valid value in the "hh:mm-HH:MM" format.
        The current time is in the UTC format.
        + The HH value must be 1 greater than the hh value.
        + The values from mm and MM must be the same and must be set to **00**.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[_builtins.str]:
        """
        Specifies the backup cycle. Data will be automatically backed up on the
        selected days every week.
        + If you set the `keep_days` to 0, this parameter is no need to set.
        + If you set the `keep_days` within 6 days, set the parameter value to **1,2,3,4,5,6,7**, data is automatically
        backed up on each day every week.
        + If you set the `keep_days` between 7 and 732 days, set the parameter value to at least one day of every week.
        For example: **1**, **3,5**.
        """
        return pulumi.get(self, "period")


@pulumi.output_type
class InstanceConfiguration(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Specifies the ID of the template.
               
               > Atfer updating the `configuration.id`, please check whether the instance needs to be restarted.
        :param _builtins.str type: Specifies the node type. Valid value:
               + For a Community Edition cluster instance, the value can be **mongos**, **shard** or **config**.
               + For a Community Edition replica set instance, the value is **replica**.
               Changing this creates a new instance.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the template.

        > Atfer updating the `configuration.id`, please check whether the instance needs to be restarted.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the node type. Valid value:
        + For a Community Edition cluster instance, the value can be **mongos**, **shard** or **config**.
        + For a Community Edition replica set instance, the value is **replica**.
        Changing this creates a new instance.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceDatastore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageEngine":
            suggest = "storage_engine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceDatastore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceDatastore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceDatastore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str,
                 storage_engine: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Specifies the DB engine. **DDS-Community** is supported.
        :param _builtins.str version: Specifies the DB instance version. For the Community Edition, the valid
               values are `4.0`, `4.2`, `4.4` or `5.0`.
        :param _builtins.str storage_engine: Specifies the storage engine of the DB instance.
               If `version` is set to `4.0`, the value is **wiredTiger**.
               If `version` is set to `4.2`, `4.4` or `5.0`, the value is **rocksDB**.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if storage_engine is not None:
            pulumi.set(__self__, "storage_engine", storage_engine)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the DB engine. **DDS-Community** is supported.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the DB instance version. For the Community Edition, the valid
        values are `4.0`, `4.2`, `4.4` or `5.0`.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> Optional[_builtins.str]:
        """
        Specifies the storage engine of the DB instance.
        If `version` is set to `4.0`, the value is **wiredTiger**.
        If `version` is set to `4.2`, `4.4` or `5.0`, the value is **rocksDB**.
        """
        return pulumi.get(self, "storage_engine")


@pulumi.output_type
class InstanceFlavor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "specCode":
            suggest = "spec_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceFlavor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceFlavor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceFlavor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num: _builtins.int,
                 spec_code: _builtins.str,
                 type: _builtins.str,
                 size: Optional[_builtins.int] = None,
                 storage: Optional[_builtins.str] = None):
        """
        :param _builtins.int num: Specifies the node quantity. Valid value:
               + If the value of type is **mongos**, num indicates the number of mongos nodes in the cluster instance. Value ranges
               from `2` to `16`.
               + If the value of type is **shard**, num indicates the number of shard groups in the cluster instance. Value ranges
               from `2` to `16`.
               + If the value of type is **config**, num indicates the number of config groups in the cluster instance. Value can
               only be `1`.
               + If the value of type is **replica**, num indicates the number of replica nodes in the replica set instance. Value
               can be `3`, `5`, or `7`.
               
               This parameter can be updated when the value of `type` is **mongos**, **shard** or **replica**.
        :param _builtins.str spec_code: Specifies the resource specification code. In a cluster instance, multiple
               specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
               enhanced (c3), or enhanced II (c6). For example:
               + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
               + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications.
        :param _builtins.str type: Specifies the node type. Valid value:
               + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For a replica set instance, the value is **replica**.
        :param _builtins.int size: Specifies the disk size. The value must be a multiple of `10`. The unit is GB. This parameter
               is mandatory for nodes except mongos and invalid for mongos.For a cluster instance, the storage space of a shard node
               can be `10` to `2,000` GB, and the config storage space is `20` GB. For a replica set instance, the value ranges
               from `10` to `3000` GB. This parameter can be updated when the value of `type` is shard or replica.
        :param _builtins.str storage: Specifies the disk type. Valid value:
               + **ULTRAHIGH**: SSD storage.
               + **EXTREMEHIGH**: Extreme SSD storage.
               
               This parameter is valid for the shard and config nodes of a cluster instance and for replica set instances.
        """
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter
    def num(self) -> _builtins.int:
        """
        Specifies the node quantity. Valid value:
        + If the value of type is **mongos**, num indicates the number of mongos nodes in the cluster instance. Value ranges
        from `2` to `16`.
        + If the value of type is **shard**, num indicates the number of shard groups in the cluster instance. Value ranges
        from `2` to `16`.
        + If the value of type is **config**, num indicates the number of config groups in the cluster instance. Value can
        only be `1`.
        + If the value of type is **replica**, num indicates the number of replica nodes in the replica set instance. Value
        can be `3`, `5`, or `7`.

        This parameter can be updated when the value of `type` is **mongos**, **shard** or **replica**.
        """
        return pulumi.get(self, "num")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        Specifies the resource specification code. In a cluster instance, multiple
        specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
        enhanced (c3), or enhanced II (c6). For example:
        + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
        + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the node type. Valid value:
        + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For a replica set instance, the value is **replica**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        Specifies the disk size. The value must be a multiple of `10`. The unit is GB. This parameter
        is mandatory for nodes except mongos and invalid for mongos.For a cluster instance, the storage space of a shard node
        can be `10` to `2,000` GB, and the config storage space is `20` GB. For a replica set instance, the value ranges
        from `10` to `3000` GB. This parameter can be updated when the value of `type` is shard or replica.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional[_builtins.str]:
        """
        Specifies the disk type. Valid value:
        + **ULTRAHIGH**: SSD storage.
        + **EXTREMEHIGH**: Extreme SSD storage.

        This parameter is valid for the shard and config nodes of a cluster instance and for replica set instances.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class InstanceGroup(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 nodes: Optional[Sequence['outputs.InstanceGroupNode']] = None,
                 size: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None,
                 used: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the DB instance name. The DB instance name of the same type is unique in the
               same tenant.
        :param Sequence['InstanceGroupNodeArgs'] nodes: Indicates the nodes info.
               The nodes structure is documented below.
        :param _builtins.str size: Indicates the disk size.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type.
        :param _builtins.str used: Indicates the disk usage.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.InstanceGroupNode']]:
        """
        Indicates the nodes info.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.str]:
        """
        Indicates the disk size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> Optional[_builtins.str]:
        """
        Indicates the disk usage.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class InstanceGroupNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceGroupNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceGroupNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceGroupNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the DB instance name. The DB instance name of the same type is unique in the
               same tenant.
        :param _builtins.str private_ip: Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
               instances, and single node instances.
        :param _builtins.str public_ip: Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
               cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        :param _builtins.str role: Indicates the node role.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
        instances, and single node instances.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
        cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the DB instance name. The DB instance name of the same type is unique in the
               same tenant.
        :param _builtins.str private_ip: Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
               instances, and single node instances.
        :param _builtins.str public_ip: Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
               cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        :param _builtins.str role: Indicates the node role.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
        instances, and single node instances.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
        cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceNodeNumUpdateVolume(dict):
    def __init__(__self__, *,
                 size: _builtins.str):
        """
        :param _builtins.str size: Specifies the disk capacity of all new shards. Value range:
               + 10 GB to 5,000 GB when the shard node has fewer than 8 vCPUs.
               + 10 GB to 10,000 GB when the shard node has 8 or more vCPUs.
        """
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.str:
        """
        Specifies the disk capacity of all new shards. Value range:
        + 10 GB to 5,000 GB when the shard node has fewer than 8 vCPUs.
        + 10 GB to 10,000 GB when the shard node has 8 or more vCPUs.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class InstanceParametersModifyParameter(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the parameter name. Some of them needs a restart of instance to take effect.
        :param _builtins.str value: Specifies the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter name. Some of them needs a restart of instance to take effect.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstanceV3BackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepDays":
            suggest = "keep_days"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3BackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3BackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3BackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str,
                 period: Optional[_builtins.str] = None):
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "period")


@pulumi.output_type
class InstanceV3Configuration(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceV3Datastore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageEngine":
            suggest = "storage_engine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3Datastore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3Datastore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3Datastore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str,
                 storage_engine: Optional[_builtins.str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if storage_engine is not None:
            pulumi.set(__self__, "storage_engine", storage_engine)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_engine")


@pulumi.output_type
class InstanceV3Flavor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "specCode":
            suggest = "spec_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3Flavor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3Flavor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3Flavor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num: _builtins.int,
                 spec_code: _builtins.str,
                 type: _builtins.str,
                 size: Optional[_builtins.int] = None,
                 storage: Optional[_builtins.str] = None):
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter
    def num(self) -> _builtins.int:
        return pulumi.get(self, "num")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage")


@pulumi.output_type
class InstanceV3Group(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 nodes: Optional[Sequence['outputs.InstanceV3GroupNode']] = None,
                 size: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None,
                 used: Optional[_builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.InstanceV3GroupNode']]:
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "used")


@pulumi.output_type
class InstanceV3GroupNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3GroupNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3GroupNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3GroupNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Indicates the node name.
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str public_ip: Indicates the EIP that has been bound on a node.
        :param _builtins.str role: Indicates the node role.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the EIP that has been bound on a node.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceV3Node(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3Node. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3Node.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3Node.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Indicates the node name.
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str public_ip: Indicates the EIP that has been bound on a node.
        :param _builtins.str role: Indicates the node role.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the EIP that has been bound on a node.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ParameterTemplateCompareDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterName":
            suggest = "parameter_name"
        elif key == "sourceValue":
            suggest = "source_value"
        elif key == "targetValue":
            suggest = "target_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParameterTemplateCompareDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParameterTemplateCompareDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParameterTemplateCompareDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_name: Optional[_builtins.str] = None,
                 source_value: Optional[_builtins.str] = None,
                 target_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str parameter_name: Indicates the parameter name.
        :param _builtins.str source_value: Indicates the parameter value in the source parameter template.
        :param _builtins.str target_value: Indicates the parameter value in the destination parameter template.
        """
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if source_value is not None:
            pulumi.set(__self__, "source_value", source_value)
        if target_value is not None:
            pulumi.set(__self__, "target_value", target_value)

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="sourceValue")
    def source_value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value in the source parameter template.
        """
        return pulumi.get(self, "source_value")

    @_builtins.property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value in the destination parameter template.
        """
        return pulumi.get(self, "target_value")


@pulumi.output_type
class ParameterTemplateCopyParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restartRequired":
            suggest = "restart_required"
        elif key == "valueRange":
            suggest = "value_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParameterTemplateCopyParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParameterTemplateCopyParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParameterTemplateCopyParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 readonly: Optional[_builtins.bool] = None,
                 restart_required: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None,
                 value_range: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the description of replicated parameter template.
               The value is left blank by default. The description must consist of a maximum of **256** characters and cannot contain
               the carriage return character or the following special characters: >!<"&'=
               Changing this creates a new resource.
        :param _builtins.str name: Specifies the name of replicated parameter template.
               The parameter template name can contain **1** to **64** characters. It can contain only letters, digits, hyphens (-),
               underscores (_), and periods (.).
               Changing this creates a new resource.
        :param _builtins.bool readonly: Indicates whether the parameter is read-only.
               + If the value is **true**, the parameter is read-only.
               + If the value is **false**, the parameter is not read-only.
        :param _builtins.bool restart_required: Indicates whether the instance needs to be restarted.
               + If the value is **true**, restart is required.
               + If the value is **false**, restart is not required.
        :param _builtins.str type: Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        :param _builtins.str value: Indicates the parameter value.
        :param _builtins.str value_range: Indicates the value range.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if restart_required is not None:
            pulumi.set(__self__, "restart_required", restart_required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of replicated parameter template.
        The value is left blank by default. The description must consist of a maximum of **256** characters and cannot contain
        the carriage return character or the following special characters: >!<"&'=
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of replicated parameter template.
        The parameter template name can contain **1** to **64** characters. It can contain only letters, digits, hyphens (-),
        underscores (_), and periods (.).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the parameter is read-only.
        + If the value is **true**, the parameter is read-only.
        + If the value is **false**, the parameter is not read-only.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the instance needs to be restarted.
        + If the value is **true**, restart is required.
        + If the value is **false**, restart is not required.
        """
        return pulumi.get(self, "restart_required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[_builtins.str]:
        """
        Indicates the value range.
        """
        return pulumi.get(self, "value_range")


@pulumi.output_type
class ParameterTemplateParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restartRequired":
            suggest = "restart_required"
        elif key == "valueRange":
            suggest = "value_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParameterTemplateParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParameterTemplateParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParameterTemplateParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 readonly: Optional[_builtins.bool] = None,
                 restart_required: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None,
                 value_range: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the parameter template description.
               The description must consist of a maximum of 256 characters and cannot contain the carriage
               return character or the following special characters: >!<"&'=.
        :param _builtins.str name: Specifies the parameter template name.
               The value must be 1 to 64 characters, which can contain only letters, digits, hyphens (-),
               underscores (_), and periods (.).
        :param _builtins.bool readonly: Indicates whether the parameter is read-only.
               + If the value is **true**, the parameter is read-only.
               + If the value is **false**, the parameter is not read-only.
        :param _builtins.bool restart_required: Indicates whether the instance needs to be restarted.
               + If the value is **true**, restart is required.
               + If the value is **false**, restart is not required.
        :param _builtins.str type: Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        :param _builtins.str value: Indicates the parameter value.
        :param _builtins.str value_range: Indicates the value range.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if restart_required is not None:
            pulumi.set(__self__, "restart_required", restart_required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter template description.
        The description must consist of a maximum of 256 characters and cannot contain the carriage
        return character or the following special characters: >!<"&'=.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter template name.
        The value must be 1 to 64 characters, which can contain only letters, digits, hyphens (-),
        underscores (_), and periods (.).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the parameter is read-only.
        + If the value is **true**, the parameter is read-only.
        + If the value is **false**, the parameter is not read-only.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the instance needs to be restarted.
        + If the value is **true**, restart is required.
        + If the value is **false**, restart is not required.
        """
        return pulumi.get(self, "restart_required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[_builtins.str]:
        """
        Indicates the value range.
        """
        return pulumi.get(self, "value_range")


@pulumi.output_type
class GetAuditLogsAuditLogResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 node_id: _builtins.str,
                 size: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.str end_time: Specifies the end time. The format of the end time is **yyyy-mm-ddThh:mm:ssZ**.
               The end time must be later than the start time.
               The time span cannot be longer than 30 days.
        :param _builtins.str id: Indicates the audit log ID.
        :param _builtins.str name: Indicates the audit log file name.
        :param _builtins.str node_id: Specifies the ID of the node whose audit logs are to be queried.
               The audit logs of cluster instances are distributed on mongos nodes.
        :param _builtins.int size: Indicates the size of the audit log in byte.
        :param _builtins.str start_time: Specifies the start time. The format of the start time is **yyyy-MM-ddThh:mm:ssZ**.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the end time. The format of the end time is **yyyy-mm-ddThh:mm:ssZ**.
        The end time must be later than the start time.
        The time span cannot be longer than 30 days.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the audit log ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the audit log file name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Specifies the ID of the node whose audit logs are to be queried.
        The audit logs of cluster instances are distributed on mongos nodes.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the size of the audit log in byte.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the start time. The format of the start time is **yyyy-MM-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetBackupDownloadLinksFileResult(dict):
    def __init__(__self__, *,
                 download_link: _builtins.str,
                 link_expired_time: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str download_link: Indicates the link for downloading the backup file.
        :param _builtins.str link_expired_time: Indicates the link expiration time. The format is **yyyy-mm-ddThh:mm:ssZ**.
        :param _builtins.str name: Indicates the file name.
        :param _builtins.int size: Indicates the file size in KB.
        """
        pulumi.set(__self__, "download_link", download_link)
        pulumi.set(__self__, "link_expired_time", link_expired_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> _builtins.str:
        """
        Indicates the link for downloading the backup file.
        """
        return pulumi.get(self, "download_link")

    @_builtins.property
    @pulumi.getter(name="linkExpiredTime")
    def link_expired_time(self) -> _builtins.str:
        """
        Indicates the link expiration time. The format is **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "link_expired_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the file name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the file size in KB.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetBackupsBackupResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 datastores: Sequence['outputs.GetBackupsBackupDatastoreResult'],
                 description: _builtins.str,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str begin_time: Specifies the start time of the query. The format is **yyyy-mm-dd hh:mm:ss**.
               The value is in UTC format. It's required with `end_time`.
        :param Sequence['GetBackupsBackupDatastoreArgs'] datastores: Indicates the database version.
               The datastore structure is documented below.
        :param _builtins.str description: Specifies the backup description.
        :param _builtins.str end_time: Specifies the end time of the query. The format is **yyyy-mm-dd hh:mm:ss**.
               The value is in UTC format. It's required with `begin_time`.
        :param _builtins.str id: Indicates the backup ID.
        :param _builtins.str instance_id: Specifies the ID of the DB instance from which the backup was created.
        :param _builtins.str instance_name: Specifies the name of the DB instance for which the backup is created.
        :param _builtins.str name: Indicates the backup name.
        :param _builtins.int size: Indicates the backup size in KB.
        :param _builtins.str status: Specifies the backup status. Valid values are:
               + **BUILDING**: Backup in progress.
               + **COMPLETED**: Backup completed.
               + **FAILED**: Backup failed.
               + **DISABLED**: Backup being deleted.
        :param _builtins.str type: Indicates the DB engine.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        Specifies the start time of the query. The format is **yyyy-mm-dd hh:mm:ss**.
        The value is in UTC format. It's required with `end_time`.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetBackupsBackupDatastoreResult']:
        """
        Indicates the database version.
        The datastore structure is documented below.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the backup description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the end time of the query. The format is **yyyy-mm-dd hh:mm:ss**.
        The value is in UTC format. It's required with `begin_time`.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ID of the DB instance from which the backup was created.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Specifies the name of the DB instance for which the backup is created.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the backup name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the backup size in KB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the backup status. Valid values are:
        + **BUILDING**: Backup in progress.
        + **COMPLETED**: Backup completed.
        + **FAILED**: Backup failed.
        + **DISABLED**: Backup being deleted.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the DB engine.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBackupsBackupDatastoreResult(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str type: Indicates the DB engine.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the DB engine.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDatabaseRolesRoleResult(dict):
    def __init__(__self__, *,
                 db_name: _builtins.str,
                 inherited_privileges: Sequence['outputs.GetDatabaseRolesRoleInheritedPrivilegeResult'],
                 name: _builtins.str,
                 privileges: Sequence['outputs.GetDatabaseRolesRolePrivilegeResult'],
                 roles: Sequence['outputs.GetDatabaseRolesRoleRoleResult']):
        """
        :param _builtins.str db_name: Specifies the database name to which the role belongs.
        :param Sequence['GetDatabaseRolesRoleInheritedPrivilegeArgs'] inherited_privileges: The list of database privileges owned by the current role, includes all privileges
               inherited by owned roles.
               The inherited_privileges structure is documented below.
        :param _builtins.str name: Specifies the role name.
        :param Sequence['GetDatabaseRolesRolePrivilegeArgs'] privileges: The list of database privileges owned by the current role.
               The privileges structure is documented below.
        :param Sequence['GetDatabaseRolesRoleRoleArgs'] roles: Indicates the list of roles owned by the current role.
               The roles structure is documented below.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "inherited_privileges", inherited_privileges)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Specifies the database name to which the role belongs.
        """
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter(name="inheritedPrivileges")
    def inherited_privileges(self) -> Sequence['outputs.GetDatabaseRolesRoleInheritedPrivilegeResult']:
        """
        The list of database privileges owned by the current role, includes all privileges
        inherited by owned roles.
        The inherited_privileges structure is documented below.
        """
        return pulumi.get(self, "inherited_privileges")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the role name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def privileges(self) -> Sequence['outputs.GetDatabaseRolesRolePrivilegeResult']:
        """
        The list of database privileges owned by the current role.
        The privileges structure is documented below.
        """
        return pulumi.get(self, "privileges")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetDatabaseRolesRoleRoleResult']:
        """
        Indicates the list of roles owned by the current role.
        The roles structure is documented below.
        """
        return pulumi.get(self, "roles")


@pulumi.output_type
class GetDatabaseRolesRoleInheritedPrivilegeResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[_builtins.str],
                 resources: Sequence['outputs.GetDatabaseRolesRoleInheritedPrivilegeResourceResult']):
        """
        :param Sequence[_builtins.str] actions: The operation permission list.
        :param Sequence['GetDatabaseRolesRoleInheritedPrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence[_builtins.str]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetDatabaseRolesRoleInheritedPrivilegeResourceResult']:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetDatabaseRolesRoleInheritedPrivilegeResourceResult(dict):
    def __init__(__self__, *,
                 collection: _builtins.str,
                 db_name: _builtins.str):
        """
        :param _builtins.str collection: The database collection type.
        :param _builtins.str db_name: Specifies the database name to which the role belongs.
        """
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> _builtins.str:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Specifies the database name to which the role belongs.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class GetDatabaseRolesRolePrivilegeResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[_builtins.str],
                 resources: Sequence['outputs.GetDatabaseRolesRolePrivilegeResourceResult']):
        """
        :param Sequence[_builtins.str] actions: The operation permission list.
        :param Sequence['GetDatabaseRolesRolePrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence[_builtins.str]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetDatabaseRolesRolePrivilegeResourceResult']:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetDatabaseRolesRolePrivilegeResourceResult(dict):
    def __init__(__self__, *,
                 collection: _builtins.str,
                 db_name: _builtins.str):
        """
        :param _builtins.str collection: The database collection type.
        :param _builtins.str db_name: Specifies the database name to which the role belongs.
        """
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> _builtins.str:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Specifies the database name to which the role belongs.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class GetDatabaseRolesRoleRoleResult(dict):
    def __init__(__self__, *,
                 db_name: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str db_name: Specifies the database name to which the role belongs.
        :param _builtins.str name: Specifies the role name.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Specifies the database name to which the role belongs.
        """
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the role name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDatabaseUsersUserResult(dict):
    def __init__(__self__, *,
                 db_name: _builtins.str,
                 inherited_privileges: Sequence['outputs.GetDatabaseUsersUserInheritedPrivilegeResult'],
                 name: _builtins.str,
                 privileges: Sequence['outputs.GetDatabaseUsersUserPrivilegeResult'],
                 roles: Sequence['outputs.GetDatabaseUsersUserRoleResult']):
        """
        :param _builtins.str db_name: Specifies the database name to which the user belongs.
        :param Sequence['GetDatabaseUsersUserInheritedPrivilegeArgs'] inherited_privileges: The list of database privileges owned by the current user, includes all privileges
               inherited by owned roles.
               The inherited_privileges structure is documented below.
        :param _builtins.str name: Specifies the username.
        :param Sequence['GetDatabaseUsersUserPrivilegeArgs'] privileges: The list of database privileges owned by the current user.
               The privileges structure is documented below.
        :param Sequence['GetDatabaseUsersUserRoleArgs'] roles: Indicates the list of roles owned by the current user.
               The roles structure is documented below.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "inherited_privileges", inherited_privileges)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Specifies the database name to which the user belongs.
        """
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter(name="inheritedPrivileges")
    def inherited_privileges(self) -> Sequence['outputs.GetDatabaseUsersUserInheritedPrivilegeResult']:
        """
        The list of database privileges owned by the current user, includes all privileges
        inherited by owned roles.
        The inherited_privileges structure is documented below.
        """
        return pulumi.get(self, "inherited_privileges")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the username.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def privileges(self) -> Sequence['outputs.GetDatabaseUsersUserPrivilegeResult']:
        """
        The list of database privileges owned by the current user.
        The privileges structure is documented below.
        """
        return pulumi.get(self, "privileges")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetDatabaseUsersUserRoleResult']:
        """
        Indicates the list of roles owned by the current user.
        The roles structure is documented below.
        """
        return pulumi.get(self, "roles")


@pulumi.output_type
class GetDatabaseUsersUserInheritedPrivilegeResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[_builtins.str],
                 resources: Sequence['outputs.GetDatabaseUsersUserInheritedPrivilegeResourceResult']):
        """
        :param Sequence[_builtins.str] actions: The operation permission list.
        :param Sequence['GetDatabaseUsersUserInheritedPrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence[_builtins.str]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetDatabaseUsersUserInheritedPrivilegeResourceResult']:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetDatabaseUsersUserInheritedPrivilegeResourceResult(dict):
    def __init__(__self__, *,
                 collection: _builtins.str,
                 db_name: _builtins.str):
        """
        :param _builtins.str collection: The database collection type.
        :param _builtins.str db_name: Specifies the database name to which the user belongs.
        """
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> _builtins.str:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Specifies the database name to which the user belongs.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class GetDatabaseUsersUserPrivilegeResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[_builtins.str],
                 resources: Sequence['outputs.GetDatabaseUsersUserPrivilegeResourceResult']):
        """
        :param Sequence[_builtins.str] actions: The operation permission list.
        :param Sequence['GetDatabaseUsersUserPrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence[_builtins.str]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetDatabaseUsersUserPrivilegeResourceResult']:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetDatabaseUsersUserPrivilegeResourceResult(dict):
    def __init__(__self__, *,
                 collection: _builtins.str,
                 db_name: _builtins.str):
        """
        :param _builtins.str collection: The database collection type.
        :param _builtins.str db_name: Specifies the database name to which the user belongs.
        """
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "db_name", db_name)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> _builtins.str:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Specifies the database name to which the user belongs.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class GetDatabaseUsersUserRoleResult(dict):
    def __init__(__self__, *,
                 db_name: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str db_name: Specifies the database name to which the user belongs.
        :param _builtins.str name: Specifies the username.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Specifies the database name to which the user belongs.
        """
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the username.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 collection_num: _builtins.int,
                 data_size: _builtins.str,
                 name: _builtins.str,
                 storage_size: _builtins.str):
        """
        :param _builtins.int collection_num: Indicates the collection num.
        :param _builtins.str data_size: Indicates the data size, unit is GB.
        :param _builtins.str name: Indicates the database name.
        :param _builtins.str storage_size: Indicates the storage size, unit is GB.
        """
        pulumi.set(__self__, "collection_num", collection_num)
        pulumi.set(__self__, "data_size", data_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "storage_size", storage_size)

    @_builtins.property
    @pulumi.getter(name="collectionNum")
    def collection_num(self) -> _builtins.int:
        """
        Indicates the collection num.
        """
        return pulumi.get(self, "collection_num")

    @_builtins.property
    @pulumi.getter(name="dataSize")
    def data_size(self) -> _builtins.str:
        """
        Indicates the data size, unit is GB.
        """
        return pulumi.get(self, "data_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the database name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> _builtins.str:
        """
        Indicates the storage size, unit is GB.
        """
        return pulumi.get(self, "storage_size")


@pulumi.output_type
class GetErrorLogLinksLinkResult(dict):
    def __init__(__self__, *,
                 file_link: _builtins.str,
                 file_name: _builtins.str,
                 file_size: _builtins.str,
                 node_name: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str file_link: Indicates the file link.
        :param _builtins.str file_name: Indicates the file name.
        :param _builtins.str file_size: Indicates the error file size.
        :param _builtins.str node_name: Indicates the node name.
        :param _builtins.str status: Indicates the link status.
        :param _builtins.str updated_at: Indicates the update time.
        """
        pulumi.set(__self__, "file_link", file_link)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_size", file_size)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="fileLink")
    def file_link(self) -> _builtins.str:
        """
        Indicates the file link.
        """
        return pulumi.get(self, "file_link")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        Indicates the file name.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> _builtins.str:
        """
        Indicates the error file size.
        """
        return pulumi.get(self, "file_size")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the link status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetErrorLogsErrorLogResult(dict):
    def __init__(__self__, *,
                 log_time: _builtins.str,
                 node_id: _builtins.str,
                 node_name: _builtins.str,
                 raw_message: _builtins.str,
                 severity: _builtins.str):
        """
        :param _builtins.str log_time: Indicates the time of the error log in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str node_id: Specifies the node ID.
               Nodes that can be queried:
               + Shard nodes in a cluster instance.
               + All nodes in a replica set or single node instance.
               
               If it is left blank, all nodes in the instance can be queried.
        :param _builtins.str node_name: Indicates the node name.
        :param _builtins.str raw_message: Indicates the error description.
        :param _builtins.str severity: Specifies the log level. Valid values are **Warning** and **Error**.
               If it is left blank, logs of all levels can be queried.
        """
        pulumi.set(__self__, "log_time", log_time)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "raw_message", raw_message)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="logTime")
    def log_time(self) -> _builtins.str:
        """
        Indicates the time of the error log in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "log_time")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Specifies the node ID.
        Nodes that can be queried:
        + Shard nodes in a cluster instance.
        + All nodes in a replica set or single node instance.

        If it is left blank, all nodes in the instance can be queried.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter(name="rawMessage")
    def raw_message(self) -> _builtins.str:
        """
        Indicates the error description.
        """
        return pulumi.get(self, "raw_message")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Specifies the log level. Valid values are **Warning** and **Error**.
        If it is left blank, logs of all levels can be queried.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 engine_name: _builtins.str,
                 engine_versions: Sequence[_builtins.str],
                 memory: _builtins.str,
                 spec_code: _builtins.str,
                 type: _builtins.str,
                 vcpus: _builtins.str):
        """
        :param Mapping[str, _builtins.str] az_status: Indicates the mapping between availability zone and status of the flavor. **key** indicates the AZ ID,
               and **value** indicates the specification status in the AZ. Its value can be any of the following:
               + **normal**: The specification is on sale.
               + **unsupported**: This specification is not supported.
               + **sellout**: The specification is sold out.
        :param _builtins.str engine_name: Specifies the engine name. Value options: **DDS-Community** and **DDS-Enhanced**.
        :param Sequence[_builtins.str] engine_versions: Indicates the database versions.
        :param _builtins.str memory: Specifies the memory size in GB.
        :param _builtins.str spec_code: Indicates the resource specification code.
        :param _builtins.str type: Specifies the type of the flavor. Value options: **mongos**, **shard**, **config**,
               **replica**, **single** and **readonly**.
        :param _builtins.str vcpus: Specifies the number of vCPUs.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "engine_versions", engine_versions)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the mapping between availability zone and status of the flavor. **key** indicates the AZ ID,
        and **value** indicates the specification status in the AZ. Its value can be any of the following:
        + **normal**: The specification is on sale.
        + **unsupported**: This specification is not supported.
        + **sellout**: The specification is sold out.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> _builtins.str:
        """
        Specifies the engine name. Value options: **DDS-Community** and **DDS-Enhanced**.
        """
        return pulumi.get(self, "engine_name")

    @_builtins.property
    @pulumi.getter(name="engineVersions")
    def engine_versions(self) -> Sequence[_builtins.str]:
        """
        Indicates the database versions.
        """
        return pulumi.get(self, "engine_versions")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Specifies the memory size in GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        Indicates the resource specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the flavor. Value options: **mongos**, **shard**, **config**,
        **replica**, **single** and **readonly**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Specifies the number of vCPUs.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetFlavorsV3FlavorResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 engine_name: _builtins.str,
                 engine_versions: Sequence[_builtins.str],
                 memory: _builtins.str,
                 spec_code: _builtins.str,
                 type: _builtins.str,
                 vcpus: _builtins.str):
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "engine_versions", engine_versions)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> _builtins.str:
        return pulumi.get(self, "engine_name")

    @_builtins.property
    @pulumi.getter(name="engineVersions")
    def engine_versions(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "engine_versions")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstanceParameterModificationRecordsHistoryResult(dict):
    def __init__(__self__, *,
                 applied: _builtins.bool,
                 applied_at: _builtins.str,
                 new_value: _builtins.str,
                 old_value: _builtins.str,
                 parameter_name: _builtins.str,
                 update_result: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.bool applied: Indicates whether the parameter is applied.
        :param _builtins.str applied_at: Indicates the apply time, in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str new_value: Indicates the new value.
        :param _builtins.str old_value: Indicates the old value.
        :param _builtins.str parameter_name: Indicates the parameter name.
        :param _builtins.str update_result: Indicates the update result.
        :param _builtins.str updated_at: Indicates the update time, in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        pulumi.set(__self__, "applied", applied)
        pulumi.set(__self__, "applied_at", applied_at)
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "update_result", update_result)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def applied(self) -> _builtins.bool:
        """
        Indicates whether the parameter is applied.
        """
        return pulumi.get(self, "applied")

    @_builtins.property
    @pulumi.getter(name="appliedAt")
    def applied_at(self) -> _builtins.str:
        """
        Indicates the apply time, in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "applied_at")

    @_builtins.property
    @pulumi.getter(name="newValue")
    def new_value(self) -> _builtins.str:
        """
        Indicates the new value.
        """
        return pulumi.get(self, "new_value")

    @_builtins.property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> _builtins.str:
        """
        Indicates the old value.
        """
        return pulumi.get(self, "old_value")

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> _builtins.str:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="updateResult")
    def update_result(self) -> _builtins.str:
        """
        Indicates the update result.
        """
        return pulumi.get(self, "update_result")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time, in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 backup_strategies: Sequence['outputs.GetInstancesInstanceBackupStrategyResult'],
                 datastores: Sequence['outputs.GetInstancesInstanceDatastoreResult'],
                 db_username: _builtins.str,
                 disk_encryption_id: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 groups: Sequence['outputs.GetInstancesInstanceGroupResult'],
                 id: _builtins.str,
                 mode: _builtins.str,
                 name: _builtins.str,
                 nodes: Sequence['outputs.GetInstancesInstanceNodeResult'],
                 port: _builtins.int,
                 security_group_id: _builtins.str,
                 ssl: _builtins.bool,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 vpc_id: _builtins.str):
        """
        :param Sequence['GetInstancesInstanceBackupStrategyArgs'] backup_strategies: Indicates the database information.
               The BackupStrategy structure is documented below.
        :param Sequence['GetInstancesInstanceDatastoreArgs'] datastores: Indicates database information.
               The Datastore structure is documented below.
        :param _builtins.str db_username: Indicates the DB Administrator name.
        :param _builtins.str disk_encryption_id: Indicates the disk encryption ID of the instance.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project id of the dds instance.
        :param Sequence['GetInstancesInstanceGroupArgs'] groups: Indicates the instance groups information.
               The group structure is documented below.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str mode: Specifies the mode of the database instance.
        :param _builtins.str name: Specifies the DB instance name.
        :param Sequence['GetInstancesInstanceNodeArgs'] nodes: Indicates the nodes info.
               The node structure is documented below.
        :param _builtins.int port: Indicates the database port number. The port range is 2100 to 9500.
        :param _builtins.str security_group_id: Indicates the security group ID of the DDS instance.
        :param _builtins.bool ssl: Indicates whether to enable or disable SSL.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str subnet_id: Specifies the subnet Network ID.
        :param Mapping[str, _builtins.str] tags: Indicates the key/value pairs to associate with the DDS instance.
        :param _builtins.str vpc_id: Specifies the VPC ID.
        """
        pulumi.set(__self__, "backup_strategies", backup_strategies)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "db_username", db_username)
        pulumi.set(__self__, "disk_encryption_id", disk_encryption_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="backupStrategies")
    def backup_strategies(self) -> Sequence['outputs.GetInstancesInstanceBackupStrategyResult']:
        """
        Indicates the database information.
        The BackupStrategy structure is documented below.
        """
        return pulumi.get(self, "backup_strategies")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetInstancesInstanceDatastoreResult']:
        """
        Indicates database information.
        The Datastore structure is documented below.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter(name="dbUsername")
    def db_username(self) -> _builtins.str:
        """
        Indicates the DB Administrator name.
        """
        return pulumi.get(self, "db_username")

    @_builtins.property
    @pulumi.getter(name="diskEncryptionId")
    def disk_encryption_id(self) -> _builtins.str:
        """
        Indicates the disk encryption ID of the instance.
        """
        return pulumi.get(self, "disk_encryption_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project id of the dds instance.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetInstancesInstanceGroupResult']:
        """
        Indicates the instance groups information.
        The group structure is documented below.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Specifies the mode of the database instance.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the DB instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetInstancesInstanceNodeResult']:
        """
        Indicates the nodes info.
        The node structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Indicates the database port number. The port range is 2100 to 9500.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        Indicates the security group ID of the DDS instance.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def ssl(self) -> _builtins.bool:
        """
        Indicates whether to enable or disable SSL.
        """
        return pulumi.get(self, "ssl")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the subnet Network ID.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the key/value pairs to associate with the DDS instance.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstancesInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.int keep_days: Indicates the number of days to retain the generated backup files.
        :param _builtins.str start_time: Indicates the backup time window.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Indicates the number of days to retain the generated backup files.
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the backup time window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetInstancesInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 storage_engine: _builtins.str,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str storage_engine: Indicates the storage engine of the DB instance.
        :param _builtins.str type: Indicates the node type.
        :param _builtins.str version: Indicates the DB instance version.
        """
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> _builtins.str:
        """
        Indicates the storage engine of the DB instance.
        """
        return pulumi.get(self, "storage_engine")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the DB instance version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInstancesInstanceGroupResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 nodes: Sequence['outputs.GetInstancesInstanceGroupNodeResult'],
                 size: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 used: _builtins.str):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the DB instance name.
        :param Sequence['GetInstancesInstanceGroupNodeArgs'] nodes: Indicates the nodes info.
               The node structure is documented below.
        :param _builtins.str size: Indicates the disk size.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type.
        :param _builtins.str used: Indicates the disk usage.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the DB instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetInstancesInstanceGroupNodeResult']:
        """
        Indicates the nodes info.
        The node structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.str:
        """
        Indicates the disk size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.str:
        """
        Indicates the disk usage.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetInstancesInstanceGroupNodeResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str,
                 role: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the DB instance name.
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str public_ip: Indicates the EIP that has been bound on a node.
        :param _builtins.str role: Indicates the node role.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the DB instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Indicates the EIP that has been bound on a node.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstancesInstanceNodeResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str,
                 role: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the DB instance name.
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str public_ip: Indicates the EIP that has been bound on a node.
        :param _builtins.str role: Indicates the node role.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the DB instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Indicates the EIP that has been bound on a node.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstantTasksJobResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 ended_at: _builtins.str,
                 fail_reason: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 name: _builtins.str,
                 progress: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str created_at: Indicates the task creation time.
        :param _builtins.str ended_at: Indicates the task end time.
        :param _builtins.str fail_reason: Indicates the task failure information.
        :param _builtins.str id: Indicates the task ID.
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str instance_name: Indicates the instance name.
        :param _builtins.str name: Specifies the task name. The value can be:
               + **CreateMongoDB**: Create a cluster instance.
               + **CreateMongoDBReplica**: Create a replica set instance.
               + **CreateMongoDBReplicaSingle**: Create a single node instance.
               + **EnlargeMongoDBVolume**: Scale up the storage capacity of a DB instance.
               + **ResizeMongoDBInstance**: Change the class of a DB instance of Community Edition.
               + **ResizeDfvMongoDBInstance**: Change the class of a DB instance of Enhanced Edition.
               + **EnlargeMongoDBGroup**: Add a node.
               + **ReplicaSetEnlargeNode**: Add a standby node to a replica set instance.
               + **AddReadonlyNode**: Add a read replica.
               + **RestartInstance**: Restart a cluster instance.
               + **RestartGroup**: Restart a cluster node group.
               + **RestartNode**: Restart a cluster node.
               + **RestartReplicaSetInstance**: Restart a replica set instance.
               + **RestartReplicaSingleInstance**: Restart a single node instance.
               + **SwitchPrimary**: Perform a primary/standby switchover.
               + **ModifyIp**: Change the private IP address.
               + **ModifySecurityGroup**: Modify a security group.
               + **ModifyPort**: Change the database port.
               + **BindPublicIP**: Bind an EIP.
               + **UnbindPublicIP**: Unbind an EIP.
               + **SwitchInstanceSSL**: Switch the SSL.
               + **AzMigrate**: Migrate a DB instance from one AZ to another.
               + **CreateIp**: Enable the shard/config IP address.
               + **ModifyOpLogSize**: Change the oplog size.
               + **RestoreMongoDB**: Restore a cluster instance to a new DB instance.
               + **RestoreMongoDB_Replica**: Restore a replica set instance to a new DB instance.
               + **RestoreMongoDB_Replica_Single**: Restore a single node instance to a new DB instance.
               + **RestoreMongoDB_Replica_PITR**: Restore a replica set instance to a specified point in time.
               + **MongodbSnapshotBackup**: Create a physical backup.
               + **MongodbSnapshotEBackup**: Create a snapshot backup.
               + **MongodbRestoreData2CurrentInstance**: Restore a backup to the original DB instance.
               + **MongodbRestoreData2NewInstance**: Restore a backup to a new DB instance.
               + **MongodbPitr2CurrentInstance**: Restore a backup to a specified time point of the original DB instance.
               + **MongodbPitr2NewInstance**: Restore a backup to a specified time point of a new DB instance.
               + **MongodbRecycleBackup**: Restore a backup from the recycle bin.
               + **MongodbRestoreTable**: Restore databases and tables to a specified point in time.
               + **UpgradeDatabaseVersion**: Upgrade the database patch.
        :param _builtins.str progress: Indicates the task execution progress.
        :param _builtins.str status: Specifies the task status.
               + **Running**: Indicates that the task is being executed.
               + **Completed**: Indicates that the task is completed.
               + **Failed**: Indicates that the task fails.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "ended_at", ended_at)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the task creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="endedAt")
    def ended_at(self) -> _builtins.str:
        """
        Indicates the task end time.
        """
        return pulumi.get(self, "ended_at")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        Indicates the task failure information.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the task ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the task name. The value can be:
        + **CreateMongoDB**: Create a cluster instance.
        + **CreateMongoDBReplica**: Create a replica set instance.
        + **CreateMongoDBReplicaSingle**: Create a single node instance.
        + **EnlargeMongoDBVolume**: Scale up the storage capacity of a DB instance.
        + **ResizeMongoDBInstance**: Change the class of a DB instance of Community Edition.
        + **ResizeDfvMongoDBInstance**: Change the class of a DB instance of Enhanced Edition.
        + **EnlargeMongoDBGroup**: Add a node.
        + **ReplicaSetEnlargeNode**: Add a standby node to a replica set instance.
        + **AddReadonlyNode**: Add a read replica.
        + **RestartInstance**: Restart a cluster instance.
        + **RestartGroup**: Restart a cluster node group.
        + **RestartNode**: Restart a cluster node.
        + **RestartReplicaSetInstance**: Restart a replica set instance.
        + **RestartReplicaSingleInstance**: Restart a single node instance.
        + **SwitchPrimary**: Perform a primary/standby switchover.
        + **ModifyIp**: Change the private IP address.
        + **ModifySecurityGroup**: Modify a security group.
        + **ModifyPort**: Change the database port.
        + **BindPublicIP**: Bind an EIP.
        + **UnbindPublicIP**: Unbind an EIP.
        + **SwitchInstanceSSL**: Switch the SSL.
        + **AzMigrate**: Migrate a DB instance from one AZ to another.
        + **CreateIp**: Enable the shard/config IP address.
        + **ModifyOpLogSize**: Change the oplog size.
        + **RestoreMongoDB**: Restore a cluster instance to a new DB instance.
        + **RestoreMongoDB_Replica**: Restore a replica set instance to a new DB instance.
        + **RestoreMongoDB_Replica_Single**: Restore a single node instance to a new DB instance.
        + **RestoreMongoDB_Replica_PITR**: Restore a replica set instance to a specified point in time.
        + **MongodbSnapshotBackup**: Create a physical backup.
        + **MongodbSnapshotEBackup**: Create a snapshot backup.
        + **MongodbRestoreData2CurrentInstance**: Restore a backup to the original DB instance.
        + **MongodbRestoreData2NewInstance**: Restore a backup to a new DB instance.
        + **MongodbPitr2CurrentInstance**: Restore a backup to a specified time point of the original DB instance.
        + **MongodbPitr2NewInstance**: Restore a backup to a specified time point of a new DB instance.
        + **MongodbRecycleBackup**: Restore a backup from the recycle bin.
        + **MongodbRestoreTable**: Restore databases and tables to a specified point in time.
        + **UpgradeDatabaseVersion**: Upgrade the database patch.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.str:
        """
        Indicates the task execution progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the task status.
        + **Running**: Indicates that the task is being executed.
        + **Completed**: Indicates that the task is completed.
        + **Failed**: Indicates that the task fails.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetParameterTemplatesConfigurationResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 datastore_name: _builtins.str,
                 datastore_version: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 node_type: _builtins.str,
                 updated_at: _builtins.str,
                 user_defined: _builtins.bool):
        """
        :param _builtins.str created_at: The update time of the parameter template.
        :param _builtins.str datastore_name: Database (DB Engine) type.
        :param _builtins.str datastore_version: Specifies the database (DB Engine) version.
               The value can be `4.4`, `4.2`, `4.0`, `3.4` or `3.2`.
        :param _builtins.str description: The parameter template description.
        :param _builtins.str id: The parameter template ID.
        :param _builtins.str name: Specifies the parameter template name.
        :param _builtins.str node_type: The the node type of parameter template.
               Valid value:
               + **mongos**: the mongos node type.
               + **shard**: the shard node type.
               + **config**: the config node type.
               + **replica**: the replica node type.
               + **single**: the single node type.
        :param _builtins.str updated_at: The creation time of the parameter template.
        :param _builtins.bool user_defined: Whether the parameter template is a custom template.
               + **false**: default parameter template.
               + **true**: custom template.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "datastore_name", datastore_name)
        pulumi.set(__self__, "datastore_version", datastore_version)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_defined", user_defined)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The update time of the parameter template.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> _builtins.str:
        """
        Database (DB Engine) type.
        """
        return pulumi.get(self, "datastore_name")

    @_builtins.property
    @pulumi.getter(name="datastoreVersion")
    def datastore_version(self) -> _builtins.str:
        """
        Specifies the database (DB Engine) version.
        The value can be `4.4`, `4.2`, `4.0`, `3.4` or `3.2`.
        """
        return pulumi.get(self, "datastore_version")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The parameter template description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The parameter template ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> _builtins.str:
        """
        The the node type of parameter template.
        Valid value:
        + **mongos**: the mongos node type.
        + **shard**: the shard node type.
        + **config**: the config node type.
        + **replica**: the replica node type.
        + **single**: the single node type.
        """
        return pulumi.get(self, "node_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The creation time of the parameter template.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userDefined")
    def user_defined(self) -> _builtins.bool:
        """
        Whether the parameter template is a custom template.
        + **false**: default parameter template.
        + **true**: custom template.
        """
        return pulumi.get(self, "user_defined")


@pulumi.output_type
class GetPtApplicableInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 entities: Sequence['outputs.GetPtApplicableInstancesInstanceEntityResult'],
                 instance_id: _builtins.str,
                 instance_name: _builtins.str):
        """
        :param Sequence['GetPtApplicableInstancesInstanceEntityArgs'] entities: Indicates the list of node group information or node information.
               + For a replica set instance, it is not returned and the parameter template is directly applied to the corresponding
               DB instance.
               + For the shard or config group of a cluster instance, information about the node group of the corresponding instance
               is returned. For the mongos group of a cluster instance, information about the node of the corresponding instance is
               returned.
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str instance_name: Indicates the instance name.
        """
        pulumi.set(__self__, "entities", entities)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)

    @_builtins.property
    @pulumi.getter
    def entities(self) -> Sequence['outputs.GetPtApplicableInstancesInstanceEntityResult']:
        """
        Indicates the list of node group information or node information.
        + For a replica set instance, it is not returned and the parameter template is directly applied to the corresponding
        DB instance.
        + For the shard or config group of a cluster instance, information about the node group of the corresponding instance
        is returned. For the mongos group of a cluster instance, information about the node of the corresponding instance is
        returned.
        """
        return pulumi.get(self, "entities")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")


@pulumi.output_type
class GetPtApplicableInstancesInstanceEntityResult(dict):
    def __init__(__self__, *,
                 entity_id: _builtins.str,
                 entity_name: _builtins.str):
        """
        :param _builtins.str entity_id: Indicates the group ID or node ID.
        :param _builtins.str entity_name: Indicates the group name or node name.
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_name", entity_name)

    @_builtins.property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> _builtins.str:
        """
        Indicates the group ID or node ID.
        """
        return pulumi.get(self, "entity_id")

    @_builtins.property
    @pulumi.getter(name="entityName")
    def entity_name(self) -> _builtins.str:
        """
        Indicates the group name or node name.
        """
        return pulumi.get(self, "entity_name")


@pulumi.output_type
class GetPtApplicationRecordsHistoryResult(dict):
    def __init__(__self__, *,
                 applied_at: _builtins.str,
                 apply_result: _builtins.str,
                 failure_reason: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str):
        """
        :param _builtins.str applied_at: Indicates the application time, in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str apply_result: Indicates the application result.
        :param _builtins.str failure_reason: Indicates the failure reason.
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str instance_name: Indicates the instance name.
        """
        pulumi.set(__self__, "applied_at", applied_at)
        pulumi.set(__self__, "apply_result", apply_result)
        pulumi.set(__self__, "failure_reason", failure_reason)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)

    @_builtins.property
    @pulumi.getter(name="appliedAt")
    def applied_at(self) -> _builtins.str:
        """
        Indicates the application time, in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "applied_at")

    @_builtins.property
    @pulumi.getter(name="applyResult")
    def apply_result(self) -> _builtins.str:
        """
        Indicates the application result.
        """
        return pulumi.get(self, "apply_result")

    @_builtins.property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> _builtins.str:
        """
        Indicates the failure reason.
        """
        return pulumi.get(self, "failure_reason")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")


@pulumi.output_type
class GetPtModificationRecordsHistoryResult(dict):
    def __init__(__self__, *,
                 new_value: _builtins.str,
                 old_value: _builtins.str,
                 parameter_name: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str new_value: Indicates the new value.
        :param _builtins.str old_value: Indicates the old value.
        :param _builtins.str parameter_name: Indicates the parameter name.
        :param _builtins.str updated_at: Indicates the update time, in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="newValue")
    def new_value(self) -> _builtins.str:
        """
        Indicates the new value.
        """
        return pulumi.get(self, "new_value")

    @_builtins.property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> _builtins.str:
        """
        Indicates the old value.
        """
        return pulumi.get(self, "old_value")

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> _builtins.str:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time, in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 mode: _builtins.str,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.str mode: Indicates the instance type.
        :param _builtins.int quota: Indicates the existing quota.
        :param _builtins.str type: Indicates the quota resource type.
        :param _builtins.int used: Indicates the number of the used instances.
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the instance type.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        Indicates the existing quota.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the quota resource type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        Indicates the number of the used instances.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetRecycleInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 backup_id: _builtins.str,
                 charging_mode: _builtins.str,
                 created_at: _builtins.str,
                 datastores: Sequence['outputs.GetRecycleInstancesInstanceDatastoreResult'],
                 deleted_at: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 mode: _builtins.str,
                 name: _builtins.str,
                 retained_until: _builtins.str):
        """
        :param _builtins.str backup_id: Indicates the backup ID.
        :param _builtins.str charging_mode: Indicates the charging mode.
        :param _builtins.str created_at: Indicates the creation time.
        :param Sequence['GetRecycleInstancesInstanceDatastoreArgs'] datastores: Indicates the database information.
        :param _builtins.str deleted_at: Indicates the deletion time.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project ID.
        :param _builtins.str id: Indicates the instance ID.
        :param _builtins.str mode: Indicates the instance mode.
        :param _builtins.str name: Indicates the instance name.
        :param _builtins.str retained_until: Indicates the retention end time.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "retained_until", retained_until)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        """
        Indicates the backup ID.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> _builtins.str:
        """
        Indicates the charging mode.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetRecycleInstancesInstanceDatastoreResult']:
        """
        Indicates the database information.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.str:
        """
        Indicates the deletion time.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the instance mode.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="retainedUntil")
    def retained_until(self) -> _builtins.str:
        """
        Indicates the retention end time.
        """
        return pulumi.get(self, "retained_until")


@pulumi.output_type
class GetRecycleInstancesInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str type: Indicates the database type.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the database type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetRestoreTimeRangesRestoreTimeResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.int,
                 start_time: _builtins.int):
        """
        :param _builtins.int end_time: Indicates the end time in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC.
        :param _builtins.int start_time: Indicates the start time in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetScheduledTasksScheduleResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 end_time: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 instance_status: _builtins.str,
                 job_id: _builtins.str,
                 job_name: _builtins.str,
                 job_status: _builtins.str,
                 start_time: _builtins.str):
        """
        :param _builtins.str create_time: Indicates the create time.
        :param _builtins.str end_time: Specifies the end time.
               The format of the end time is **yyyy-mm-ddThh:mm:ssZ**.
               Defaults to current time.
        :param _builtins.str instance_id: Specifies the instance ID.
        :param _builtins.str instance_name: Indicates the instance name.
        :param _builtins.str instance_status: Indicates the instance status.
               Values can be as follows:
               + **createfail**: The instance failed to be created.
               + **creating**: The instance is being created.
               + **normal**: The instance is running properly.
               + **abnormal**: The instance is abnormal.
               + **deleted**: The instance has been deleted.
        :param _builtins.str job_id: Indicates the task ID.
        :param _builtins.str job_name: Specifies the task name.
               Value can be as follows:
               + **RESIZE_FLAVOR**: Change vCPUs and memory of an instance.
        :param _builtins.str job_status: Specifies the task execution status.
               Value can be as follows:
               + **Pending**: The task is not executed.
               + **Running**: The task is being executed.
               + **Completed**: The task is successfully executed.
               + **Failed**: The task fails to be executed.
               + **Canceled**: The task is canceled.
        :param _builtins.str start_time: Specifies the start time.
               The format of the start time is **yyyy-mm-ddThh:mm:ssZ**.
               Defaults to seven days before the current time.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_name", job_name)
        pulumi.set(__self__, "job_status", job_status)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the end time.
        The format of the end time is **yyyy-mm-ddThh:mm:ssZ**.
        Defaults to current time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> _builtins.str:
        """
        Indicates the instance status.
        Values can be as follows:
        + **createfail**: The instance failed to be created.
        + **creating**: The instance is being created.
        + **normal**: The instance is running properly.
        + **abnormal**: The instance is abnormal.
        + **deleted**: The instance has been deleted.
        """
        return pulumi.get(self, "instance_status")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        Indicates the task ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> _builtins.str:
        """
        Specifies the task name.
        Value can be as follows:
        + **RESIZE_FLAVOR**: Change vCPUs and memory of an instance.
        """
        return pulumi.get(self, "job_name")

    @_builtins.property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> _builtins.str:
        """
        Specifies the task execution status.
        Value can be as follows:
        + **Pending**: The task is not executed.
        + **Running**: The task is being executed.
        + **Completed**: The task is successfully executed.
        + **Failed**: The task fails to be executed.
        + **Canceled**: The task is canceled.
        """
        return pulumi.get(self, "job_status")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the start time.
        The format of the start time is **yyyy-mm-ddThh:mm:ssZ**.
        Defaults to seven days before the current time.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetSlowLogLinksLinkResult(dict):
    def __init__(__self__, *,
                 file_link: _builtins.str,
                 file_name: _builtins.str,
                 file_size: _builtins.str,
                 node_name: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str file_link: Indicates the file link.
        :param _builtins.str file_name: Indicates the file name.
        :param _builtins.str file_size: Indicates the file size.
        :param _builtins.str node_name: Indicates the node name.
        :param _builtins.str status: Indicates the link status.
        :param _builtins.str updated_at: Indicates the update time.
        """
        pulumi.set(__self__, "file_link", file_link)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_size", file_size)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="fileLink")
    def file_link(self) -> _builtins.str:
        """
        Indicates the file link.
        """
        return pulumi.get(self, "file_link")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        Indicates the file name.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> _builtins.str:
        """
        Indicates the file size.
        """
        return pulumi.get(self, "file_size")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the link status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSlowLogsSlowLogResult(dict):
    def __init__(__self__, *,
                 collection: _builtins.str,
                 cost_time: _builtins.int,
                 database: _builtins.str,
                 docs_returned: _builtins.int,
                 docs_scanned: _builtins.int,
                 lock_time: _builtins.int,
                 log_time: _builtins.str,
                 node_id: _builtins.str,
                 node_name: _builtins.str,
                 operate_type: _builtins.str,
                 whole_message: _builtins.str):
        """
        :param _builtins.str collection: Indicates the name of the database table which the log belongs to.
        :param _builtins.int cost_time: Indicates the execution time. Unit is ms.
        :param _builtins.str database: Indicates the name of the database which the log belongs to.
        :param _builtins.int docs_returned: Indicates the number of returned documents.
        :param _builtins.int docs_scanned: Indicates the number of scanned documents.
        :param _builtins.int lock_time: Indicates the lock wait time. Unit is ms.
        :param _builtins.str log_time: Indicates the time of the slow log in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str node_id: Specifies the node ID.
        :param _builtins.str node_name: Indicates the node name.
        :param _builtins.str operate_type: Specifies the statement type. Valid values are **insert**, **query**, **update**,
               **remove**, **getmore**, **command** and **killcursors**.
        :param _builtins.str whole_message: Indicates the statement.
        """
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "cost_time", cost_time)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "docs_returned", docs_returned)
        pulumi.set(__self__, "docs_scanned", docs_scanned)
        pulumi.set(__self__, "lock_time", lock_time)
        pulumi.set(__self__, "log_time", log_time)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "whole_message", whole_message)

    @_builtins.property
    @pulumi.getter
    def collection(self) -> _builtins.str:
        """
        Indicates the name of the database table which the log belongs to.
        """
        return pulumi.get(self, "collection")

    @_builtins.property
    @pulumi.getter(name="costTime")
    def cost_time(self) -> _builtins.int:
        """
        Indicates the execution time. Unit is ms.
        """
        return pulumi.get(self, "cost_time")

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Indicates the name of the database which the log belongs to.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter(name="docsReturned")
    def docs_returned(self) -> _builtins.int:
        """
        Indicates the number of returned documents.
        """
        return pulumi.get(self, "docs_returned")

    @_builtins.property
    @pulumi.getter(name="docsScanned")
    def docs_scanned(self) -> _builtins.int:
        """
        Indicates the number of scanned documents.
        """
        return pulumi.get(self, "docs_scanned")

    @_builtins.property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> _builtins.int:
        """
        Indicates the lock wait time. Unit is ms.
        """
        return pulumi.get(self, "lock_time")

    @_builtins.property
    @pulumi.getter(name="logTime")
    def log_time(self) -> _builtins.str:
        """
        Indicates the time of the slow log in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "log_time")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Specifies the node ID.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> _builtins.str:
        """
        Specifies the statement type. Valid values are **insert**, **query**, **update**,
        **remove**, **getmore**, **command** and **killcursors**.
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter(name="wholeMessage")
    def whole_message(self) -> _builtins.str:
        """
        Indicates the statement.
        """
        return pulumi.get(self, "whole_message")


@pulumi.output_type
class GetSslCertDownloadLinksCertResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 download_link: _builtins.str):
        """
        :param _builtins.str category: Indicates the certificate type.
        :param _builtins.str download_link: Indicates the certificate download link.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "download_link", download_link)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Indicates the certificate type.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> _builtins.str:
        """
        Indicates the certificate download link.
        """
        return pulumi.get(self, "download_link")


@pulumi.output_type
class GetStorageTypesStorageTypeResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 name: _builtins.str):
        """
        :param Mapping[str, _builtins.str] az_status: The status details of the AZs to which the specification belongs. Key indicates the AZ ID, and value
               indicates the specification status in the AZ. The values are as follows:
               + **normal**: The specifications in the AZ are available.
               + **unsupported**: The specifications are not supported by the AZ.
               + **sellout**: The specifications in the AZ are sold out.
        :param _builtins.str name: Indicates the storage type. The values are as follows:
               + **ULTRAHIGH**: SSD storage.
               + **EXTREMEHIGH**: extreme SSD storage.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        The status details of the AZs to which the specification belongs. Key indicates the AZ ID, and value
        indicates the specification status in the AZ. The values are as follows:
        + **normal**: The specifications in the AZ are available.
        + **unsupported**: The specifications are not supported by the AZ.
        + **sellout**: The specifications in the AZ are sold out.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the storage type. The values are as follows:
        + **ULTRAHIGH**: SSD storage.
        + **EXTREMEHIGH**: extreme SSD storage.
        """
        return pulumi.get(self, "name")


