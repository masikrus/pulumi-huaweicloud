# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['InstanceRestartArgs', 'InstanceRestart']

@pulumi.input_type
class InstanceRestartArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a InstanceRestart resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of the object to be restarted. When you restart a node in
               a cluster instance, the value is the mongos node ID for a mongos node, and shard or config group ID for a shard or
               config group. It's required with `target_type`.
               Changing this creates a new resource.
               
               > If you want to restart instance, set both `target_type` and `target_id` empty.
        :param pulumi.Input[_builtins.str] target_type: Specifies the type of the object to restart. Valid values are **mongos**,
               **shard**, **config**. It's required with `target_id`. Changing this creates a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a DDS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the object to be restarted. When you restart a node in
        a cluster instance, the value is the mongos node ID for a mongos node, and shard or config group ID for a shard or
        config group. It's required with `target_type`.
        Changing this creates a new resource.

        > If you want to restart instance, set both `target_type` and `target_id` empty.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_id", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the object to restart. Valid values are **mongos**,
        **shard**, **config**. It's required with `target_id`. Changing this creates a new resource.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_type", value)


@pulumi.input_type
class _InstanceRestartState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering InstanceRestart resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of the object to be restarted. When you restart a node in
               a cluster instance, the value is the mongos node ID for a mongos node, and shard or config group ID for a shard or
               config group. It's required with `target_type`.
               Changing this creates a new resource.
               
               > If you want to restart instance, set both `target_type` and `target_id` empty.
        :param pulumi.Input[_builtins.str] target_type: Specifies the type of the object to restart. Valid values are **mongos**,
               **shard**, **config**. It's required with `target_id`. Changing this creates a new resource.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a DDS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the object to be restarted. When you restart a node in
        a cluster instance, the value is the mongos node ID for a mongos node, and shard or config group ID for a shard or
        config group. It's required with `target_type`.
        Changing this creates a new resource.

        > If you want to restart instance, set both `target_type` and `target_id` empty.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_id", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the object to restart. Valid values are **mongos**,
        **shard**, **config**. It's required with `target_id`. Changing this creates a new resource.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_type", value)


@pulumi.type_token("huaweicloud:Dds/instanceRestart:InstanceRestart")
class InstanceRestart(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DDS instance restart resource within HuaweiCloud.

        ## Example Usage

        ### Restart insatnce

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dds.InstanceRestart("test", instance_id=instance_id)
        ```

        ### Restart insatnce's mongos node

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        node_id = config.require_object("nodeId")
        test = huaweicloud.dds.InstanceRestart("test",
            instance_id=instance_id,
            target_type="mongos",
            target_id=node_id)
        ```

        ### Restart insatnce's shard group

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group_id = config.require_object("groupId")
        test = huaweicloud.dds.InstanceRestart("test",
            instance_id=instance_id,
            target_type="shard",
            target_id=group_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of the object to be restarted. When you restart a node in
               a cluster instance, the value is the mongos node ID for a mongos node, and shard or config group ID for a shard or
               config group. It's required with `target_type`.
               Changing this creates a new resource.
               
               > If you want to restart instance, set both `target_type` and `target_id` empty.
        :param pulumi.Input[_builtins.str] target_type: Specifies the type of the object to restart. Valid values are **mongos**,
               **shard**, **config**. It's required with `target_id`. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceRestartArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DDS instance restart resource within HuaweiCloud.

        ## Example Usage

        ### Restart insatnce

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dds.InstanceRestart("test", instance_id=instance_id)
        ```

        ### Restart insatnce's mongos node

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        node_id = config.require_object("nodeId")
        test = huaweicloud.dds.InstanceRestart("test",
            instance_id=instance_id,
            target_type="mongos",
            target_id=node_id)
        ```

        ### Restart insatnce's shard group

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group_id = config.require_object("groupId")
        test = huaweicloud.dds.InstanceRestart("test",
            instance_id=instance_id,
            target_type="shard",
            target_id=group_id)
        ```

        :param str resource_name: The name of the resource.
        :param InstanceRestartArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceRestartArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceRestartArgs.__new__(InstanceRestartArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["target_id"] = target_id
            __props__.__dict__["target_type"] = target_type
        super(InstanceRestart, __self__).__init__(
            'huaweicloud:Dds/instanceRestart:InstanceRestart',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            target_id: Optional[pulumi.Input[_builtins.str]] = None,
            target_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'InstanceRestart':
        """
        Get an existing InstanceRestart resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of the object to be restarted. When you restart a node in
               a cluster instance, the value is the mongos node ID for a mongos node, and shard or config group ID for a shard or
               config group. It's required with `target_type`.
               Changing this creates a new resource.
               
               > If you want to restart instance, set both `target_type` and `target_id` empty.
        :param pulumi.Input[_builtins.str] target_type: Specifies the type of the object to restart. Valid values are **mongos**,
               **shard**, **config**. It's required with `target_id`. Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceRestartState.__new__(_InstanceRestartState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["target_id"] = target_id
        __props__.__dict__["target_type"] = target_type
        return InstanceRestart(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a DDS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the object to be restarted. When you restart a node in
        a cluster instance, the value is the mongos node ID for a mongos node, and shard or config group ID for a shard or
        config group. It's required with `target_type`.
        Changing this creates a new resource.

        > If you want to restart instance, set both `target_type` and `target_id` empty.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of the object to restart. Valid values are **mongos**,
        **shard**, **config**. It's required with `target_id`. Changing this creates a new resource.
        """
        return pulumi.get(self, "target_type")

