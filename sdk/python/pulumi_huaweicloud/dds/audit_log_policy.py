# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AuditLogPolicyArgs', 'AuditLogPolicy']

@pulumi.input_type
class AuditLogPolicyArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 keep_days: pulumi.Input[_builtins.int],
                 audit_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 audit_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserve_auditlogs: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AuditLogPolicy resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DDS instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] keep_days: Specifies the number of days for storing audit logs.  
               The value ranges from `7` to `732`.
        :param pulumi.Input[_builtins.str] audit_scope: Specifies the audit scope.
               If this parameter is left blank or set to **all**, all audit log policies are enabled.
               You can enter the database or collection name. Use commas (,) to separate multiple databases
               or collections. If the name contains a comma (,), add a dollar sign ($) before the comma
               to distinguish it from the separators. Enter a maximum of 1024 characters. The value
               cannot contain spaces or the following special characters "[]{}():? The dollar sign ($)
               can be used only in escape mode.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] audit_types: Specifies the audit type. Value options:
               + **auth**
               + **insert**
               + **delete**
               + **update**
               + **query**
               + **command**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] reserve_auditlogs: Specifies whether the historical audit logs are
               retained when SQL audit is disabled.
               + **true** (default value): indicates that historical audit logs are retained
               when SQL audit is disabled.
               + **false**: indicates that existing historical audit logs are deleted when
               SQL audit is disabled.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "keep_days", keep_days)
        if audit_scope is not None:
            pulumi.set(__self__, "audit_scope", audit_scope)
        if audit_types is not None:
            pulumi.set(__self__, "audit_types", audit_types)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reserve_auditlogs is not None:
            pulumi.set(__self__, "reserve_auditlogs", reserve_auditlogs)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the DDS instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of days for storing audit logs.  
        The value ranges from `7` to `732`.
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "keep_days", value)

    @_builtins.property
    @pulumi.getter(name="auditScope")
    def audit_scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the audit scope.
        If this parameter is left blank or set to **all**, all audit log policies are enabled.
        You can enter the database or collection name. Use commas (,) to separate multiple databases
        or collections. If the name contains a comma (,), add a dollar sign ($) before the comma
        to distinguish it from the separators. Enter a maximum of 1024 characters. The value
        cannot contain spaces or the following special characters "[]{}():? The dollar sign ($)
        can be used only in escape mode.
        """
        return pulumi.get(self, "audit_scope")

    @audit_scope.setter
    def audit_scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "audit_scope", value)

    @_builtins.property
    @pulumi.getter(name="auditTypes")
    def audit_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the audit type. Value options:
        + **auth**
        + **insert**
        + **delete**
        + **update**
        + **query**
        + **command**
        """
        return pulumi.get(self, "audit_types")

    @audit_types.setter
    def audit_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "audit_types", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="reserveAuditlogs")
    def reserve_auditlogs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the historical audit logs are
        retained when SQL audit is disabled.
        + **true** (default value): indicates that historical audit logs are retained
        when SQL audit is disabled.
        + **false**: indicates that existing historical audit logs are deleted when
        SQL audit is disabled.
        """
        return pulumi.get(self, "reserve_auditlogs")

    @reserve_auditlogs.setter
    def reserve_auditlogs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reserve_auditlogs", value)


@pulumi.input_type
class _AuditLogPolicyState:
    def __init__(__self__, *,
                 audit_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 audit_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_days: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserve_auditlogs: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AuditLogPolicy resources.
        :param pulumi.Input[_builtins.str] audit_scope: Specifies the audit scope.
               If this parameter is left blank or set to **all**, all audit log policies are enabled.
               You can enter the database or collection name. Use commas (,) to separate multiple databases
               or collections. If the name contains a comma (,), add a dollar sign ($) before the comma
               to distinguish it from the separators. Enter a maximum of 1024 characters. The value
               cannot contain spaces or the following special characters "[]{}():? The dollar sign ($)
               can be used only in escape mode.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] audit_types: Specifies the audit type. Value options:
               + **auth**
               + **insert**
               + **delete**
               + **update**
               + **query**
               + **command**
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DDS instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] keep_days: Specifies the number of days for storing audit logs.  
               The value ranges from `7` to `732`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] reserve_auditlogs: Specifies whether the historical audit logs are
               retained when SQL audit is disabled.
               + **true** (default value): indicates that historical audit logs are retained
               when SQL audit is disabled.
               + **false**: indicates that existing historical audit logs are deleted when
               SQL audit is disabled.
        """
        if audit_scope is not None:
            pulumi.set(__self__, "audit_scope", audit_scope)
        if audit_types is not None:
            pulumi.set(__self__, "audit_types", audit_types)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reserve_auditlogs is not None:
            pulumi.set(__self__, "reserve_auditlogs", reserve_auditlogs)

    @_builtins.property
    @pulumi.getter(name="auditScope")
    def audit_scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the audit scope.
        If this parameter is left blank or set to **all**, all audit log policies are enabled.
        You can enter the database or collection name. Use commas (,) to separate multiple databases
        or collections. If the name contains a comma (,), add a dollar sign ($) before the comma
        to distinguish it from the separators. Enter a maximum of 1024 characters. The value
        cannot contain spaces or the following special characters "[]{}():? The dollar sign ($)
        can be used only in escape mode.
        """
        return pulumi.get(self, "audit_scope")

    @audit_scope.setter
    def audit_scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "audit_scope", value)

    @_builtins.property
    @pulumi.getter(name="auditTypes")
    def audit_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the audit type. Value options:
        + **auth**
        + **insert**
        + **delete**
        + **update**
        + **query**
        + **command**
        """
        return pulumi.get(self, "audit_types")

    @audit_types.setter
    def audit_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "audit_types", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the DDS instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of days for storing audit logs.  
        The value ranges from `7` to `732`.
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keep_days", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="reserveAuditlogs")
    def reserve_auditlogs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the historical audit logs are
        retained when SQL audit is disabled.
        + **true** (default value): indicates that historical audit logs are retained
        when SQL audit is disabled.
        + **false**: indicates that existing historical audit logs are deleted when
        SQL audit is disabled.
        """
        return pulumi.get(self, "reserve_auditlogs")

    @reserve_auditlogs.setter
    def reserve_auditlogs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reserve_auditlogs", value)


@pulumi.type_token("huaweicloud:Dds/auditLogPolicy:AuditLogPolicy")
class AuditLogPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 audit_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_days: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserve_auditlogs: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DDS audit log policy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        keep_days = config.require_object("keepDays")
        test = huaweicloud.dds.AuditLogPolicy("test",
            instance_id=instance_id,
            keep_days=keep_days)
        ```

        ## Import

        The DDS audit log policy can be imported using the instance ID, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Dds/auditLogPolicy:AuditLogPolicy test <instance_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] audit_scope: Specifies the audit scope.
               If this parameter is left blank or set to **all**, all audit log policies are enabled.
               You can enter the database or collection name. Use commas (,) to separate multiple databases
               or collections. If the name contains a comma (,), add a dollar sign ($) before the comma
               to distinguish it from the separators. Enter a maximum of 1024 characters. The value
               cannot contain spaces or the following special characters "[]{}():? The dollar sign ($)
               can be used only in escape mode.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] audit_types: Specifies the audit type. Value options:
               + **auth**
               + **insert**
               + **delete**
               + **update**
               + **query**
               + **command**
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DDS instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] keep_days: Specifies the number of days for storing audit logs.  
               The value ranges from `7` to `732`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] reserve_auditlogs: Specifies whether the historical audit logs are
               retained when SQL audit is disabled.
               + **true** (default value): indicates that historical audit logs are retained
               when SQL audit is disabled.
               + **false**: indicates that existing historical audit logs are deleted when
               SQL audit is disabled.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuditLogPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DDS audit log policy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        keep_days = config.require_object("keepDays")
        test = huaweicloud.dds.AuditLogPolicy("test",
            instance_id=instance_id,
            keep_days=keep_days)
        ```

        ## Import

        The DDS audit log policy can be imported using the instance ID, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Dds/auditLogPolicy:AuditLogPolicy test <instance_id>
        ```

        :param str resource_name: The name of the resource.
        :param AuditLogPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuditLogPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 audit_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_days: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserve_auditlogs: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuditLogPolicyArgs.__new__(AuditLogPolicyArgs)

            __props__.__dict__["audit_scope"] = audit_scope
            __props__.__dict__["audit_types"] = audit_types
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if keep_days is None and not opts.urn:
                raise TypeError("Missing required property 'keep_days'")
            __props__.__dict__["keep_days"] = keep_days
            __props__.__dict__["region"] = region
            __props__.__dict__["reserve_auditlogs"] = reserve_auditlogs
        super(AuditLogPolicy, __self__).__init__(
            'huaweicloud:Dds/auditLogPolicy:AuditLogPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            audit_scope: Optional[pulumi.Input[_builtins.str]] = None,
            audit_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            keep_days: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            reserve_auditlogs: Optional[pulumi.Input[_builtins.str]] = None) -> 'AuditLogPolicy':
        """
        Get an existing AuditLogPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] audit_scope: Specifies the audit scope.
               If this parameter is left blank or set to **all**, all audit log policies are enabled.
               You can enter the database or collection name. Use commas (,) to separate multiple databases
               or collections. If the name contains a comma (,), add a dollar sign ($) before the comma
               to distinguish it from the separators. Enter a maximum of 1024 characters. The value
               cannot contain spaces or the following special characters "[]{}():? The dollar sign ($)
               can be used only in escape mode.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] audit_types: Specifies the audit type. Value options:
               + **auth**
               + **insert**
               + **delete**
               + **update**
               + **query**
               + **command**
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DDS instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] keep_days: Specifies the number of days for storing audit logs.  
               The value ranges from `7` to `732`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] reserve_auditlogs: Specifies whether the historical audit logs are
               retained when SQL audit is disabled.
               + **true** (default value): indicates that historical audit logs are retained
               when SQL audit is disabled.
               + **false**: indicates that existing historical audit logs are deleted when
               SQL audit is disabled.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuditLogPolicyState.__new__(_AuditLogPolicyState)

        __props__.__dict__["audit_scope"] = audit_scope
        __props__.__dict__["audit_types"] = audit_types
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["keep_days"] = keep_days
        __props__.__dict__["region"] = region
        __props__.__dict__["reserve_auditlogs"] = reserve_auditlogs
        return AuditLogPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="auditScope")
    def audit_scope(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the audit scope.
        If this parameter is left blank or set to **all**, all audit log policies are enabled.
        You can enter the database or collection name. Use commas (,) to separate multiple databases
        or collections. If the name contains a comma (,), add a dollar sign ($) before the comma
        to distinguish it from the separators. Enter a maximum of 1024 characters. The value
        cannot contain spaces or the following special characters "[]{}():? The dollar sign ($)
        can be used only in escape mode.
        """
        return pulumi.get(self, "audit_scope")

    @_builtins.property
    @pulumi.getter(name="auditTypes")
    def audit_types(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the audit type. Value options:
        + **auth**
        + **insert**
        + **delete**
        + **update**
        + **query**
        + **command**
        """
        return pulumi.get(self, "audit_types")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the DDS instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of days for storing audit logs.  
        The value ranges from `7` to `732`.
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="reserveAuditlogs")
    def reserve_auditlogs(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether the historical audit logs are
        retained when SQL audit is disabled.
        + **true** (default value): indicates that historical audit logs are retained
        when SQL audit is disabled.
        + **false**: indicates that existing historical audit logs are deleted when
        SQL audit is disabled.
        """
        return pulumi.get(self, "reserve_auditlogs")

