# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['NacosNamespaceArgs', 'NacosNamespace']

@pulumi.input_type
class NacosNamespaceArgs:
    def __init__(__self__, *,
                 engine_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a NacosNamespace resource.
        :param pulumi.Input[_builtins.str] engine_id: Specifies the ID of the Nacos microservice engine to which the namespace
               belongs. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Nacos namespace.
               The name can contain `1` to `128` characters, special characters `@#$%^&*` are not allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Nacos namespace is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "engine_id", engine_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the Nacos microservice engine to which the namespace
        belongs. Changing this will create a new resource.
        """
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "engine_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the Nacos namespace.
        The name can contain `1` to `128` characters, special characters `@#$%^&*` are not allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the Nacos namespace is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _NacosNamespaceState:
    def __init__(__self__, *,
                 engine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering NacosNamespace resources.
        :param pulumi.Input[_builtins.str] engine_id: Specifies the ID of the Nacos microservice engine to which the namespace
               belongs. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Nacos namespace.
               The name can contain `1` to `128` characters, special characters `@#$%^&*` are not allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Nacos namespace is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the Nacos microservice engine to which the namespace
        belongs. Changing this will create a new resource.
        """
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the Nacos namespace.
        The name can contain `1` to `128` characters, special characters `@#$%^&*` are not allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the Nacos namespace is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Cse/nacosNamespace:NacosNamespace")
class NacosNamespace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 engine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a namespace resource under CSE Nacos microservice engine within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        nacos_engine_id = config.require_object("nacosEngineId")
        namespace_name = config.require_object("namespaceName")
        test = huaweicloud.cse.NacosNamespace("test",
            engine_id=nacos_engine_id,
            name=namespace_name)
        ```

        ## Import

        Nacos namespace can be imported using related `engine_id` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/nacosNamespace:NacosNamespace test <engine_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] engine_id: Specifies the ID of the Nacos microservice engine to which the namespace
               belongs. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Nacos namespace.
               The name can contain `1` to `128` characters, special characters `@#$%^&*` are not allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Nacos namespace is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NacosNamespaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a namespace resource under CSE Nacos microservice engine within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        nacos_engine_id = config.require_object("nacosEngineId")
        namespace_name = config.require_object("namespaceName")
        test = huaweicloud.cse.NacosNamespace("test",
            engine_id=nacos_engine_id,
            name=namespace_name)
        ```

        ## Import

        Nacos namespace can be imported using related `engine_id` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/nacosNamespace:NacosNamespace test <engine_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param NacosNamespaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NacosNamespaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 engine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NacosNamespaceArgs.__new__(NacosNamespaceArgs)

            if engine_id is None and not opts.urn:
                raise TypeError("Missing required property 'engine_id'")
            __props__.__dict__["engine_id"] = engine_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
        super(NacosNamespace, __self__).__init__(
            'huaweicloud:Cse/nacosNamespace:NacosNamespace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            engine_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'NacosNamespace':
        """
        Get an existing NacosNamespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] engine_id: Specifies the ID of the Nacos microservice engine to which the namespace
               belongs. Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Nacos namespace.
               The name can contain `1` to `128` characters, special characters `@#$%^&*` are not allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the Nacos namespace is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NacosNamespaceState.__new__(_NacosNamespaceState)

        __props__.__dict__["engine_id"] = engine_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        return NacosNamespace(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the Nacos microservice engine to which the namespace
        belongs. Changing this will create a new resource.
        """
        return pulumi.get(self, "engine_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the Nacos namespace.
        The name can contain `1` to `128` characters, special characters `@#$%^&*` are not allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the Nacos namespace is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

