# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNacosNamespacesResult',
    'AwaitableGetNacosNamespacesResult',
    'get_nacos_namespaces',
    'get_nacos_namespaces_output',
]

@pulumi.output_type
class GetNacosNamespacesResult:
    """
    A collection of values returned by getNacosNamespaces.
    """
    def __init__(__self__, engine_id=None, id=None, namespaces=None, region=None):
        if engine_id and not isinstance(engine_id, str):
            raise TypeError("Expected argument 'engine_id' to be a str")
        pulumi.set(__self__, "engine_id", engine_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespaces and not isinstance(namespaces, list):
            raise TypeError("Expected argument 'namespaces' to be a list")
        pulumi.set(__self__, "namespaces", namespaces)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> _builtins.str:
        return pulumi.get(self, "engine_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Sequence['outputs.GetNacosNamespacesNamespaceResult']:
        """
        All queried Nacos namespaces.  
        The namespaces structure is documented below.
        """
        return pulumi.get(self, "namespaces")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetNacosNamespacesResult(GetNacosNamespacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNacosNamespacesResult(
            engine_id=self.engine_id,
            id=self.id,
            namespaces=self.namespaces,
            region=self.region)


def get_nacos_namespaces(engine_id: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNacosNamespacesResult:
    """
    Use this data source to query available Nacos namespaces within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    nacos_engine_id = config.require_object("nacosEngineId")
    test = huaweicloud.Cse.get_nacos_namespaces(engine_id=nacos_engine_id)
    ```


    :param _builtins.str engine_id: Specifies the ID of the Nacos microservice engine to which the namespaces belong.
    :param _builtins.str region: Specifies the region where the Nacos namespaces are located.  
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['engineId'] = engine_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getNacosNamespaces:getNacosNamespaces', __args__, opts=opts, typ=GetNacosNamespacesResult).value

    return AwaitableGetNacosNamespacesResult(
        engine_id=pulumi.get(__ret__, 'engine_id'),
        id=pulumi.get(__ret__, 'id'),
        namespaces=pulumi.get(__ret__, 'namespaces'),
        region=pulumi.get(__ret__, 'region'))
def get_nacos_namespaces_output(engine_id: Optional[pulumi.Input[_builtins.str]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNacosNamespacesResult]:
    """
    Use this data source to query available Nacos namespaces within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    nacos_engine_id = config.require_object("nacosEngineId")
    test = huaweicloud.Cse.get_nacos_namespaces(engine_id=nacos_engine_id)
    ```


    :param _builtins.str engine_id: Specifies the ID of the Nacos microservice engine to which the namespaces belong.
    :param _builtins.str region: Specifies the region where the Nacos namespaces are located.  
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['engineId'] = engine_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getNacosNamespaces:getNacosNamespaces', __args__, opts=opts, typ=GetNacosNamespacesResult)
    return __ret__.apply(lambda __response__: GetNacosNamespacesResult(
        engine_id=pulumi.get(__response__, 'engine_id'),
        id=pulumi.get(__response__, 'id'),
        namespaces=pulumi.get(__response__, 'namespaces'),
        region=pulumi.get(__response__, 'region')))
