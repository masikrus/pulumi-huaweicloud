# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAgentStatusesResult',
    'AwaitableGetAgentStatusesResult',
    'get_agent_statuses',
    'get_agent_statuses_output',
]

@pulumi.output_type
class GetAgentStatusesResult:
    """
    A collection of values returned by getAgentStatuses.
    """
    def __init__(__self__, agent_statuses=None, extension_name=None, extension_status=None, id=None, instance_ids=None, region=None, uniagent_status=None):
        if agent_statuses and not isinstance(agent_statuses, list):
            raise TypeError("Expected argument 'agent_statuses' to be a list")
        pulumi.set(__self__, "agent_statuses", agent_statuses)
        if extension_name and not isinstance(extension_name, str):
            raise TypeError("Expected argument 'extension_name' to be a str")
        pulumi.set(__self__, "extension_name", extension_name)
        if extension_status and not isinstance(extension_status, str):
            raise TypeError("Expected argument 'extension_status' to be a str")
        pulumi.set(__self__, "extension_status", extension_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError("Expected argument 'instance_ids' to be a list")
        pulumi.set(__self__, "instance_ids", instance_ids)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if uniagent_status and not isinstance(uniagent_status, str):
            raise TypeError("Expected argument 'uniagent_status' to be a str")
        pulumi.set(__self__, "uniagent_status", uniagent_status)

    @_builtins.property
    @pulumi.getter(name="agentStatuses")
    def agent_statuses(self) -> Sequence['outputs.GetAgentStatusesAgentStatusResult']:
        """
        The agent statuses.
        """
        return pulumi.get(self, "agent_statuses")

    @_builtins.property
    @pulumi.getter(name="extensionName")
    def extension_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "extension_name")

    @_builtins.property
    @pulumi.getter(name="extensionStatus")
    def extension_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "extension_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "instance_ids")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="uniagentStatus")
    def uniagent_status(self) -> Optional[_builtins.str]:
        """
        The uniagent status.
        """
        return pulumi.get(self, "uniagent_status")


class AwaitableGetAgentStatusesResult(GetAgentStatusesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAgentStatusesResult(
            agent_statuses=self.agent_statuses,
            extension_name=self.extension_name,
            extension_status=self.extension_status,
            id=self.id,
            instance_ids=self.instance_ids,
            region=self.region,
            uniagent_status=self.uniagent_status)


def get_agent_statuses(extension_name: Optional[_builtins.str] = None,
                       extension_status: Optional[_builtins.str] = None,
                       instance_ids: Optional[Sequence[_builtins.str]] = None,
                       region: Optional[_builtins.str] = None,
                       uniagent_status: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAgentStatusesResult:
    """
    Use this data source to get the list of agent statuses.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Cse.get_agent_statuses(instance_ids=[instance_id])
    ```


    :param _builtins.str extension_name: Specifies the agent name.
           If this parameter is not specified, all agents are queried.
           Currently, only telescope can be queried.
    :param _builtins.str extension_status: Specifies the agent status.
           If this parameter is not specified, all statuses are queried.
           The valid value can be **none** (not installed), **running**, **stopped**, **fault** (process exception)
           or **unknown** (connection exception).
    :param Sequence[_builtins.str] instance_ids: Specifies the cloud server ID list.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str uniagent_status: Specifies the uniagent status.
           The valid value can be **none** (not installed), **running**, **silent** or **unknown** (faulty).
    """
    __args__ = dict()
    __args__['extensionName'] = extension_name
    __args__['extensionStatus'] = extension_status
    __args__['instanceIds'] = instance_ids
    __args__['region'] = region
    __args__['uniagentStatus'] = uniagent_status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getAgentStatuses:getAgentStatuses', __args__, opts=opts, typ=GetAgentStatusesResult).value

    return AwaitableGetAgentStatusesResult(
        agent_statuses=pulumi.get(__ret__, 'agent_statuses'),
        extension_name=pulumi.get(__ret__, 'extension_name'),
        extension_status=pulumi.get(__ret__, 'extension_status'),
        id=pulumi.get(__ret__, 'id'),
        instance_ids=pulumi.get(__ret__, 'instance_ids'),
        region=pulumi.get(__ret__, 'region'),
        uniagent_status=pulumi.get(__ret__, 'uniagent_status'))
def get_agent_statuses_output(extension_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              extension_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              instance_ids: Optional[pulumi.Input[Sequence[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              uniagent_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAgentStatusesResult]:
    """
    Use this data source to get the list of agent statuses.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Cse.get_agent_statuses(instance_ids=[instance_id])
    ```


    :param _builtins.str extension_name: Specifies the agent name.
           If this parameter is not specified, all agents are queried.
           Currently, only telescope can be queried.
    :param _builtins.str extension_status: Specifies the agent status.
           If this parameter is not specified, all statuses are queried.
           The valid value can be **none** (not installed), **running**, **stopped**, **fault** (process exception)
           or **unknown** (connection exception).
    :param Sequence[_builtins.str] instance_ids: Specifies the cloud server ID list.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str uniagent_status: Specifies the uniagent status.
           The valid value can be **none** (not installed), **running**, **silent** or **unknown** (faulty).
    """
    __args__ = dict()
    __args__['extensionName'] = extension_name
    __args__['extensionStatus'] = extension_status
    __args__['instanceIds'] = instance_ids
    __args__['region'] = region
    __args__['uniagentStatus'] = uniagent_status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getAgentStatuses:getAgentStatuses', __args__, opts=opts, typ=GetAgentStatusesResult)
    return __ret__.apply(lambda __response__: GetAgentStatusesResult(
        agent_statuses=pulumi.get(__response__, 'agent_statuses'),
        extension_name=pulumi.get(__response__, 'extension_name'),
        extension_status=pulumi.get(__response__, 'extension_status'),
        id=pulumi.get(__response__, 'id'),
        instance_ids=pulumi.get(__response__, 'instance_ids'),
        region=pulumi.get(__response__, 'region'),
        uniagent_status=pulumi.get(__response__, 'uniagent_status')))
