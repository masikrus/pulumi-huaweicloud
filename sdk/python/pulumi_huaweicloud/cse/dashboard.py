# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DashboardArgs', 'Dashboard']

@pulumi.input_type
class DashboardArgs:
    def __init__(__self__, *,
                 row_widget_num: pulumi.Input[_builtins.int],
                 dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extend_info: Optional[pulumi.Input['DashboardExtendInfoArgs']] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Dashboard resource.
        :param pulumi.Input[_builtins.int] row_widget_num: Specifies the monitoring view display mode.
               The valid values are as follows:
               + **0**: custom coordinates;
               + **1**: one per row;
               + **2**: two per row;
               + **3**: three per row.
        :param pulumi.Input[_builtins.str] dashboard_id: Specifies the copied dashboard ID.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the dashboard.
        :param pulumi.Input['DashboardExtendInfoArgs'] extend_info: Specifies the information about the extension.
               The extend_info structure is documented below.
               
               <a name="extend_info_struct"></a>
               The `extend_info` block supports:
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether the dashboard is favorite.
        :param pulumi.Input[_builtins.str] name: Specifies the dashboard name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "row_widget_num", row_widget_num)
        if dashboard_id is not None:
            pulumi.set(__self__, "dashboard_id", dashboard_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if extend_info is not None:
            pulumi.set(__self__, "extend_info", extend_info)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="rowWidgetNum")
    def row_widget_num(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the monitoring view display mode.
        The valid values are as follows:
        + **0**: custom coordinates;
        + **1**: one per row;
        + **2**: two per row;
        + **3**: three per row.
        """
        return pulumi.get(self, "row_widget_num")

    @row_widget_num.setter
    def row_widget_num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "row_widget_num", value)

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the copied dashboard ID.
        """
        return pulumi.get(self, "dashboard_id")

    @dashboard_id.setter
    def dashboard_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of the dashboard.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="extendInfo")
    def extend_info(self) -> Optional[pulumi.Input['DashboardExtendInfoArgs']]:
        """
        Specifies the information about the extension.
        The extend_info structure is documented below.

        <a name="extend_info_struct"></a>
        The `extend_info` block supports:
        """
        return pulumi.get(self, "extend_info")

    @extend_info.setter
    def extend_info(self, value: Optional[pulumi.Input['DashboardExtendInfoArgs']]):
        pulumi.set(self, "extend_info", value)

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the dashboard is favorite.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_favorite", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dashboard name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DashboardState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 creator_name: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extend_info: Optional[pulumi.Input['DashboardExtendInfoArgs']] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 row_widget_num: Optional[pulumi.Input[_builtins.int]] = None,
                 sub_product: Optional[pulumi.Input[_builtins.str]] = None,
                 widgets_num: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering Dashboard resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time of the dashboard.
        :param pulumi.Input[_builtins.str] creator_name: Indicates the creator name of the dashboard.
        :param pulumi.Input[_builtins.str] dashboard_id: Specifies the copied dashboard ID.
        :param pulumi.Input[_builtins.str] dashboard_template_id: Indicates the monitoring disk template ID.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the dashboard.
        :param pulumi.Input['DashboardExtendInfoArgs'] extend_info: Specifies the information about the extension.
               The extend_info structure is documented below.
               
               <a name="extend_info_struct"></a>
               The `extend_info` block supports:
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether the dashboard is favorite.
        :param pulumi.Input[_builtins.str] name: Specifies the dashboard name.
        :param pulumi.Input[_builtins.str] namespace: Indicates the namespace.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] row_widget_num: Specifies the monitoring view display mode.
               The valid values are as follows:
               + **0**: custom coordinates;
               + **1**: one per row;
               + **2**: two per row;
               + **3**: three per row.
        :param pulumi.Input[_builtins.str] sub_product: Indicates the sub-product ID.
        :param pulumi.Input[_builtins.int] widgets_num: Indicates the total number of views under the board.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if creator_name is not None:
            pulumi.set(__self__, "creator_name", creator_name)
        if dashboard_id is not None:
            pulumi.set(__self__, "dashboard_id", dashboard_id)
        if dashboard_template_id is not None:
            pulumi.set(__self__, "dashboard_template_id", dashboard_template_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if extend_info is not None:
            pulumi.set(__self__, "extend_info", extend_info)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if row_widget_num is not None:
            pulumi.set(__self__, "row_widget_num", row_widget_num)
        if sub_product is not None:
            pulumi.set(__self__, "sub_product", sub_product)
        if widgets_num is not None:
            pulumi.set(__self__, "widgets_num", widgets_num)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time of the dashboard.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creator name of the dashboard.
        """
        return pulumi.get(self, "creator_name")

    @creator_name.setter
    def creator_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator_name", value)

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the copied dashboard ID.
        """
        return pulumi.get(self, "dashboard_id")

    @dashboard_id.setter
    def dashboard_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_id", value)

    @_builtins.property
    @pulumi.getter(name="dashboardTemplateId")
    def dashboard_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the monitoring disk template ID.
        """
        return pulumi.get(self, "dashboard_template_id")

    @dashboard_template_id.setter
    def dashboard_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_template_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of the dashboard.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="extendInfo")
    def extend_info(self) -> Optional[pulumi.Input['DashboardExtendInfoArgs']]:
        """
        Specifies the information about the extension.
        The extend_info structure is documented below.

        <a name="extend_info_struct"></a>
        The `extend_info` block supports:
        """
        return pulumi.get(self, "extend_info")

    @extend_info.setter
    def extend_info(self, value: Optional[pulumi.Input['DashboardExtendInfoArgs']]):
        pulumi.set(self, "extend_info", value)

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the dashboard is favorite.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_favorite", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dashboard name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rowWidgetNum")
    def row_widget_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the monitoring view display mode.
        The valid values are as follows:
        + **0**: custom coordinates;
        + **1**: one per row;
        + **2**: two per row;
        + **3**: three per row.
        """
        return pulumi.get(self, "row_widget_num")

    @row_widget_num.setter
    def row_widget_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "row_widget_num", value)

    @_builtins.property
    @pulumi.getter(name="subProduct")
    def sub_product(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the sub-product ID.
        """
        return pulumi.get(self, "sub_product")

    @sub_product.setter
    def sub_product(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sub_product", value)

    @_builtins.property
    @pulumi.getter(name="widgetsNum")
    def widgets_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the total number of views under the board.
        """
        return pulumi.get(self, "widgets_num")

    @widgets_num.setter
    def widgets_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "widgets_num", value)


@pulumi.type_token("huaweicloud:Cse/dashboard:Dashboard")
class Dashboard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extend_info: Optional[pulumi.Input[Union['DashboardExtendInfoArgs', 'DashboardExtendInfoArgsDict']]] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 row_widget_num: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a CES dashboard resource within HuaweiCloud.

        ## Example Usage

        ### Basic example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        row_widget_num = config.require_object("rowWidgetNum")
        test = huaweicloud.cse.Dashboard("test",
            name=name,
            row_widget_num=row_widget_num)
        ```

        ### Copy dashboard example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        dashboard_id = config.require_object("dashboardId")
        row_widget_num = config.require_object("rowWidgetNum")
        test = huaweicloud.cse.Dashboard("test",
            name=name,
            dashboard_id=dashboard_id,
            row_widget_num=row_widget_num)
        ```

        ## Import

        The dashboard can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/dashboard:Dashboard test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attribute is `dashboard_id`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the dashboard, or the resource definition should be updated to

        align with the dashboard. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ces_dashboard" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              dashboard_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] dashboard_id: Specifies the copied dashboard ID.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the dashboard.
        :param pulumi.Input[Union['DashboardExtendInfoArgs', 'DashboardExtendInfoArgsDict']] extend_info: Specifies the information about the extension.
               The extend_info structure is documented below.
               
               <a name="extend_info_struct"></a>
               The `extend_info` block supports:
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether the dashboard is favorite.
        :param pulumi.Input[_builtins.str] name: Specifies the dashboard name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] row_widget_num: Specifies the monitoring view display mode.
               The valid values are as follows:
               + **0**: custom coordinates;
               + **1**: one per row;
               + **2**: two per row;
               + **3**: three per row.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CES dashboard resource within HuaweiCloud.

        ## Example Usage

        ### Basic example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        row_widget_num = config.require_object("rowWidgetNum")
        test = huaweicloud.cse.Dashboard("test",
            name=name,
            row_widget_num=row_widget_num)
        ```

        ### Copy dashboard example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        dashboard_id = config.require_object("dashboardId")
        row_widget_num = config.require_object("rowWidgetNum")
        test = huaweicloud.cse.Dashboard("test",
            name=name,
            dashboard_id=dashboard_id,
            row_widget_num=row_widget_num)
        ```

        ## Import

        The dashboard can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/dashboard:Dashboard test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attribute is `dashboard_id`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the dashboard, or the resource definition should be updated to

        align with the dashboard. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ces_dashboard" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              dashboard_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DashboardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extend_info: Optional[pulumi.Input[Union['DashboardExtendInfoArgs', 'DashboardExtendInfoArgsDict']]] = None,
                 is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 row_widget_num: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardArgs.__new__(DashboardArgs)

            __props__.__dict__["dashboard_id"] = dashboard_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["extend_info"] = extend_info
            __props__.__dict__["is_favorite"] = is_favorite
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if row_widget_num is None and not opts.urn:
                raise TypeError("Missing required property 'row_widget_num'")
            __props__.__dict__["row_widget_num"] = row_widget_num
            __props__.__dict__["created_at"] = None
            __props__.__dict__["creator_name"] = None
            __props__.__dict__["dashboard_template_id"] = None
            __props__.__dict__["namespace"] = None
            __props__.__dict__["sub_product"] = None
            __props__.__dict__["widgets_num"] = None
        super(Dashboard, __self__).__init__(
            'huaweicloud:Cse/dashboard:Dashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            creator_name: Optional[pulumi.Input[_builtins.str]] = None,
            dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
            dashboard_template_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            extend_info: Optional[pulumi.Input[Union['DashboardExtendInfoArgs', 'DashboardExtendInfoArgsDict']]] = None,
            is_favorite: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            row_widget_num: Optional[pulumi.Input[_builtins.int]] = None,
            sub_product: Optional[pulumi.Input[_builtins.str]] = None,
            widgets_num: Optional[pulumi.Input[_builtins.int]] = None) -> 'Dashboard':
        """
        Get an existing Dashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time of the dashboard.
        :param pulumi.Input[_builtins.str] creator_name: Indicates the creator name of the dashboard.
        :param pulumi.Input[_builtins.str] dashboard_id: Specifies the copied dashboard ID.
        :param pulumi.Input[_builtins.str] dashboard_template_id: Indicates the monitoring disk template ID.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the dashboard.
        :param pulumi.Input[Union['DashboardExtendInfoArgs', 'DashboardExtendInfoArgsDict']] extend_info: Specifies the information about the extension.
               The extend_info structure is documented below.
               
               <a name="extend_info_struct"></a>
               The `extend_info` block supports:
        :param pulumi.Input[_builtins.bool] is_favorite: Specifies whether the dashboard is favorite.
        :param pulumi.Input[_builtins.str] name: Specifies the dashboard name.
        :param pulumi.Input[_builtins.str] namespace: Indicates the namespace.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] row_widget_num: Specifies the monitoring view display mode.
               The valid values are as follows:
               + **0**: custom coordinates;
               + **1**: one per row;
               + **2**: two per row;
               + **3**: three per row.
        :param pulumi.Input[_builtins.str] sub_product: Indicates the sub-product ID.
        :param pulumi.Input[_builtins.int] widgets_num: Indicates the total number of views under the board.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardState.__new__(_DashboardState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["creator_name"] = creator_name
        __props__.__dict__["dashboard_id"] = dashboard_id
        __props__.__dict__["dashboard_template_id"] = dashboard_template_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["extend_info"] = extend_info
        __props__.__dict__["is_favorite"] = is_favorite
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["region"] = region
        __props__.__dict__["row_widget_num"] = row_widget_num
        __props__.__dict__["sub_product"] = sub_product
        __props__.__dict__["widgets_num"] = widgets_num
        return Dashboard(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creation time of the dashboard.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creator name of the dashboard.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the copied dashboard ID.
        """
        return pulumi.get(self, "dashboard_id")

    @_builtins.property
    @pulumi.getter(name="dashboardTemplateId")
    def dashboard_template_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the monitoring disk template ID.
        """
        return pulumi.get(self, "dashboard_template_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID of the dashboard.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="extendInfo")
    def extend_info(self) -> pulumi.Output[Optional['outputs.DashboardExtendInfo']]:
        """
        Specifies the information about the extension.
        The extend_info structure is documented below.

        <a name="extend_info_struct"></a>
        The `extend_info` block supports:
        """
        return pulumi.get(self, "extend_info")

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the dashboard is favorite.
        """
        return pulumi.get(self, "is_favorite")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the dashboard name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rowWidgetNum")
    def row_widget_num(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the monitoring view display mode.
        The valid values are as follows:
        + **0**: custom coordinates;
        + **1**: one per row;
        + **2**: two per row;
        + **3**: three per row.
        """
        return pulumi.get(self, "row_widget_num")

    @_builtins.property
    @pulumi.getter(name="subProduct")
    def sub_product(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the sub-product ID.
        """
        return pulumi.get(self, "sub_product")

    @_builtins.property
    @pulumi.getter(name="widgetsNum")
    def widgets_num(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the total number of views under the board.
        """
        return pulumi.get(self, "widgets_num")

