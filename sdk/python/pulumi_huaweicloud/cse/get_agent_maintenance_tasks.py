# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAgentMaintenanceTasksResult',
    'AwaitableGetAgentMaintenanceTasksResult',
    'get_agent_maintenance_tasks',
    'get_agent_maintenance_tasks_output',
]

@pulumi.output_type
class GetAgentMaintenanceTasksResult:
    """
    A collection of values returned by getAgentMaintenanceTasks.
    """
    def __init__(__self__, id=None, instance_id=None, instance_type=None, invocation_id=None, invocation_target=None, invocation_type=None, invocations=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if invocation_id and not isinstance(invocation_id, str):
            raise TypeError("Expected argument 'invocation_id' to be a str")
        pulumi.set(__self__, "invocation_id", invocation_id)
        if invocation_target and not isinstance(invocation_target, str):
            raise TypeError("Expected argument 'invocation_target' to be a str")
        pulumi.set(__self__, "invocation_target", invocation_target)
        if invocation_type and not isinstance(invocation_type, str):
            raise TypeError("Expected argument 'invocation_type' to be a str")
        pulumi.set(__self__, "invocation_type", invocation_type)
        if invocations and not isinstance(invocations, list):
            raise TypeError("Expected argument 'invocations' to be a list")
        pulumi.set(__self__, "invocations", invocations)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The server ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[_builtins.str]:
        """
        The server type.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="invocationId")
    def invocation_id(self) -> Optional[_builtins.str]:
        """
        The task ID.
        """
        return pulumi.get(self, "invocation_id")

    @_builtins.property
    @pulumi.getter(name="invocationTarget")
    def invocation_target(self) -> Optional[_builtins.str]:
        """
        The task object.
        """
        return pulumi.get(self, "invocation_target")

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[_builtins.str]:
        """
        The task type.
        """
        return pulumi.get(self, "invocation_type")

    @_builtins.property
    @pulumi.getter
    def invocations(self) -> Sequence['outputs.GetAgentMaintenanceTasksInvocationResult']:
        """
        The task list.
        """
        return pulumi.get(self, "invocations")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAgentMaintenanceTasksResult(GetAgentMaintenanceTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAgentMaintenanceTasksResult(
            id=self.id,
            instance_id=self.instance_id,
            instance_type=self.instance_type,
            invocation_id=self.invocation_id,
            invocation_target=self.invocation_target,
            invocation_type=self.invocation_type,
            invocations=self.invocations,
            region=self.region)


def get_agent_maintenance_tasks(instance_id: Optional[_builtins.str] = None,
                                instance_type: Optional[_builtins.str] = None,
                                invocation_id: Optional[_builtins.str] = None,
                                invocation_target: Optional[_builtins.str] = None,
                                invocation_type: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAgentMaintenanceTasksResult:
    """
    Use this data source to get the list of CES agent maintenance tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cse.get_agent_maintenance_tasks()
    ```


    :param _builtins.str instance_id: Specifies the server ID.
    :param _builtins.str instance_type: Specifies the server type.
           The valid value can be **ECS** or **BMS**.
    :param _builtins.str invocation_id: Specifies the task ID.
    :param _builtins.str invocation_target: Specifies the task object. Only **telescope** is supported.
    :param _builtins.str invocation_type: Specifies the task type.
           The valid value can be **INSTALL**, **UPDATE**, **ROLLBACK** or **RETRY**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['instanceType'] = instance_type
    __args__['invocationId'] = invocation_id
    __args__['invocationTarget'] = invocation_target
    __args__['invocationType'] = invocation_type
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getAgentMaintenanceTasks:getAgentMaintenanceTasks', __args__, opts=opts, typ=GetAgentMaintenanceTasksResult).value

    return AwaitableGetAgentMaintenanceTasksResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        invocation_id=pulumi.get(__ret__, 'invocation_id'),
        invocation_target=pulumi.get(__ret__, 'invocation_target'),
        invocation_type=pulumi.get(__ret__, 'invocation_type'),
        invocations=pulumi.get(__ret__, 'invocations'),
        region=pulumi.get(__ret__, 'region'))
def get_agent_maintenance_tasks_output(instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       instance_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       invocation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       invocation_target: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       invocation_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAgentMaintenanceTasksResult]:
    """
    Use this data source to get the list of CES agent maintenance tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cse.get_agent_maintenance_tasks()
    ```


    :param _builtins.str instance_id: Specifies the server ID.
    :param _builtins.str instance_type: Specifies the server type.
           The valid value can be **ECS** or **BMS**.
    :param _builtins.str invocation_id: Specifies the task ID.
    :param _builtins.str invocation_target: Specifies the task object. Only **telescope** is supported.
    :param _builtins.str invocation_type: Specifies the task type.
           The valid value can be **INSTALL**, **UPDATE**, **ROLLBACK** or **RETRY**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['instanceType'] = instance_type
    __args__['invocationId'] = invocation_id
    __args__['invocationTarget'] = invocation_target
    __args__['invocationType'] = invocation_type
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getAgentMaintenanceTasks:getAgentMaintenanceTasks', __args__, opts=opts, typ=GetAgentMaintenanceTasksResult)
    return __ret__.apply(lambda __response__: GetAgentMaintenanceTasksResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instance_type=pulumi.get(__response__, 'instance_type'),
        invocation_id=pulumi.get(__response__, 'invocation_id'),
        invocation_target=pulumi.get(__response__, 'invocation_target'),
        invocation_type=pulumi.get(__response__, 'invocation_type'),
        invocations=pulumi.get(__response__, 'invocations'),
        region=pulumi.get(__response__, 'region')))
