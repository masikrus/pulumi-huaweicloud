# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['OneClickAlarmRuleActionArgs', 'OneClickAlarmRuleAction']

@pulumi.input_type
class OneClickAlarmRuleActionArgs:
    def __init__(__self__, *,
                 alarm_enabled: pulumi.Input[_builtins.bool],
                 alarm_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 one_click_alarm_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a OneClickAlarmRuleAction resource.
        :param pulumi.Input[_builtins.bool] alarm_enabled: Specifies whether to generate alarms when the alarm triggering
               conditions are met.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alarm_ids: Specifies IDs of alarm rules to be enabled or disabled in batches.
        :param pulumi.Input[_builtins.str] one_click_alarm_id: Specifies the one-click monitoring ID for a service.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "alarm_enabled", alarm_enabled)
        pulumi.set(__self__, "alarm_ids", alarm_ids)
        pulumi.set(__self__, "one_click_alarm_id", one_click_alarm_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="alarmEnabled")
    def alarm_enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to generate alarms when the alarm triggering
        conditions are met.
        """
        return pulumi.get(self, "alarm_enabled")

    @alarm_enabled.setter
    def alarm_enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "alarm_enabled", value)

    @_builtins.property
    @pulumi.getter(name="alarmIds")
    def alarm_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies IDs of alarm rules to be enabled or disabled in batches.
        """
        return pulumi.get(self, "alarm_ids")

    @alarm_ids.setter
    def alarm_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "alarm_ids", value)

    @_builtins.property
    @pulumi.getter(name="oneClickAlarmId")
    def one_click_alarm_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the one-click monitoring ID for a service.
        """
        return pulumi.get(self, "one_click_alarm_id")

    @one_click_alarm_id.setter
    def one_click_alarm_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "one_click_alarm_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _OneClickAlarmRuleActionState:
    def __init__(__self__, *,
                 alarm_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 alarm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 one_click_alarm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 success_alarm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering OneClickAlarmRuleAction resources.
        :param pulumi.Input[_builtins.bool] alarm_enabled: Specifies whether to generate alarms when the alarm triggering
               conditions are met.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alarm_ids: Specifies IDs of alarm rules to be enabled or disabled in batches.
        :param pulumi.Input[_builtins.str] one_click_alarm_id: Specifies the one-click monitoring ID for a service.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] success_alarm_ids: Indicates IDs of alarm rules that were enabled or disabled.
        """
        if alarm_enabled is not None:
            pulumi.set(__self__, "alarm_enabled", alarm_enabled)
        if alarm_ids is not None:
            pulumi.set(__self__, "alarm_ids", alarm_ids)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if one_click_alarm_id is not None:
            pulumi.set(__self__, "one_click_alarm_id", one_click_alarm_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if success_alarm_ids is not None:
            pulumi.set(__self__, "success_alarm_ids", success_alarm_ids)

    @_builtins.property
    @pulumi.getter(name="alarmEnabled")
    def alarm_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to generate alarms when the alarm triggering
        conditions are met.
        """
        return pulumi.get(self, "alarm_enabled")

    @alarm_enabled.setter
    def alarm_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alarm_enabled", value)

    @_builtins.property
    @pulumi.getter(name="alarmIds")
    def alarm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies IDs of alarm rules to be enabled or disabled in batches.
        """
        return pulumi.get(self, "alarm_ids")

    @alarm_ids.setter
    def alarm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "alarm_ids", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="oneClickAlarmId")
    def one_click_alarm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the one-click monitoring ID for a service.
        """
        return pulumi.get(self, "one_click_alarm_id")

    @one_click_alarm_id.setter
    def one_click_alarm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "one_click_alarm_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="successAlarmIds")
    def success_alarm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates IDs of alarm rules that were enabled or disabled.
        """
        return pulumi.get(self, "success_alarm_ids")

    @success_alarm_ids.setter
    def success_alarm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "success_alarm_ids", value)


@pulumi.type_token("huaweicloud:Cse/oneClickAlarmRuleAction:OneClickAlarmRuleAction")
class OneClickAlarmRuleAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 alarm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 one_click_alarm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an CES batch enable or disable alarm rules for one service in one-click monitoring resource within HuaweiCloud.

        > Deleting the batch enable or disable alarm rules resource is not supported. The batch enable or disable alarm rules
          for one service in one-click monitoring resource is only removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        one_click_alarm_id = config.require_object("oneClickAlarmId")
        alarm_id = config.require_object("alarmId")
        test = huaweicloud.cse.OneClickAlarmRuleAction("test",
            one_click_alarm_id=one_click_alarm_id,
            alarm_ids=[alarm_id],
            alarm_enabled=False)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] alarm_enabled: Specifies whether to generate alarms when the alarm triggering
               conditions are met.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alarm_ids: Specifies IDs of alarm rules to be enabled or disabled in batches.
        :param pulumi.Input[_builtins.str] one_click_alarm_id: Specifies the one-click monitoring ID for a service.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OneClickAlarmRuleActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an CES batch enable or disable alarm rules for one service in one-click monitoring resource within HuaweiCloud.

        > Deleting the batch enable or disable alarm rules resource is not supported. The batch enable or disable alarm rules
          for one service in one-click monitoring resource is only removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        one_click_alarm_id = config.require_object("oneClickAlarmId")
        alarm_id = config.require_object("alarmId")
        test = huaweicloud.cse.OneClickAlarmRuleAction("test",
            one_click_alarm_id=one_click_alarm_id,
            alarm_ids=[alarm_id],
            alarm_enabled=False)
        ```

        :param str resource_name: The name of the resource.
        :param OneClickAlarmRuleActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OneClickAlarmRuleActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 alarm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 one_click_alarm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OneClickAlarmRuleActionArgs.__new__(OneClickAlarmRuleActionArgs)

            if alarm_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_enabled'")
            __props__.__dict__["alarm_enabled"] = alarm_enabled
            if alarm_ids is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_ids'")
            __props__.__dict__["alarm_ids"] = alarm_ids
            __props__.__dict__["enable_force_new"] = enable_force_new
            if one_click_alarm_id is None and not opts.urn:
                raise TypeError("Missing required property 'one_click_alarm_id'")
            __props__.__dict__["one_click_alarm_id"] = one_click_alarm_id
            __props__.__dict__["region"] = region
            __props__.__dict__["success_alarm_ids"] = None
        super(OneClickAlarmRuleAction, __self__).__init__(
            'huaweicloud:Cse/oneClickAlarmRuleAction:OneClickAlarmRuleAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            alarm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            one_click_alarm_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            success_alarm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'OneClickAlarmRuleAction':
        """
        Get an existing OneClickAlarmRuleAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] alarm_enabled: Specifies whether to generate alarms when the alarm triggering
               conditions are met.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alarm_ids: Specifies IDs of alarm rules to be enabled or disabled in batches.
        :param pulumi.Input[_builtins.str] one_click_alarm_id: Specifies the one-click monitoring ID for a service.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] success_alarm_ids: Indicates IDs of alarm rules that were enabled or disabled.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OneClickAlarmRuleActionState.__new__(_OneClickAlarmRuleActionState)

        __props__.__dict__["alarm_enabled"] = alarm_enabled
        __props__.__dict__["alarm_ids"] = alarm_ids
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["one_click_alarm_id"] = one_click_alarm_id
        __props__.__dict__["region"] = region
        __props__.__dict__["success_alarm_ids"] = success_alarm_ids
        return OneClickAlarmRuleAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alarmEnabled")
    def alarm_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to generate alarms when the alarm triggering
        conditions are met.
        """
        return pulumi.get(self, "alarm_enabled")

    @_builtins.property
    @pulumi.getter(name="alarmIds")
    def alarm_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies IDs of alarm rules to be enabled or disabled in batches.
        """
        return pulumi.get(self, "alarm_ids")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="oneClickAlarmId")
    def one_click_alarm_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the one-click monitoring ID for a service.
        """
        return pulumi.get(self, "one_click_alarm_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="successAlarmIds")
    def success_alarm_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates IDs of alarm rules that were enabled or disabled.
        """
        return pulumi.get(self, "success_alarm_ids")

