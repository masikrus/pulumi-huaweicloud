# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlarmHistoriesResult',
    'AwaitableGetAlarmHistoriesResult',
    'get_alarm_histories',
    'get_alarm_histories_output',
]

@pulumi.output_type
class GetAlarmHistoriesResult:
    """
    A collection of values returned by getAlarmHistories.
    """
    def __init__(__self__, alarm_histories=None, alarm_id=None, alarm_type=None, from_=None, id=None, level=None, name=None, namespace=None, order_by=None, record_id=None, region=None, resource_id=None, status=None, to=None):
        if alarm_histories and not isinstance(alarm_histories, list):
            raise TypeError("Expected argument 'alarm_histories' to be a list")
        pulumi.set(__self__, "alarm_histories", alarm_histories)
        if alarm_id and not isinstance(alarm_id, str):
            raise TypeError("Expected argument 'alarm_id' to be a str")
        pulumi.set(__self__, "alarm_id", alarm_id)
        if alarm_type and not isinstance(alarm_type, str):
            raise TypeError("Expected argument 'alarm_type' to be a str")
        pulumi.set(__self__, "alarm_type", alarm_type)
        if from_ and not isinstance(from_, str):
            raise TypeError("Expected argument 'from_' to be a str")
        pulumi.set(__self__, "from_", from_)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if level and not isinstance(level, int):
            raise TypeError("Expected argument 'level' to be a int")
        pulumi.set(__self__, "level", level)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if record_id and not isinstance(record_id, str):
            raise TypeError("Expected argument 'record_id' to be a str")
        pulumi.set(__self__, "record_id", record_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if to and not isinstance(to, str):
            raise TypeError("Expected argument 'to' to be a str")
        pulumi.set(__self__, "to", to)

    @_builtins.property
    @pulumi.getter(name="alarmHistories")
    def alarm_histories(self) -> Sequence['outputs.GetAlarmHistoriesAlarmHistoryResult']:
        """
        The alarm records.
        """
        return pulumi.get(self, "alarm_histories")

    @_builtins.property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> Optional[_builtins.str]:
        """
        The alarm rule ID.
        """
        return pulumi.get(self, "alarm_id")

    @_builtins.property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "alarm_type")

    @_builtins.property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "from_")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[_builtins.int]:
        """
        The alarm severity of alarm records.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The dimension of a resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        The namespace of a service.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "order_by")

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[_builtins.str]:
        """
        The alarm record ID.
        """
        return pulumi.get(self, "record_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The resource ID corresponding to the alarm record.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of an alarm record.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def to(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "to")


class AwaitableGetAlarmHistoriesResult(GetAlarmHistoriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmHistoriesResult(
            alarm_histories=self.alarm_histories,
            alarm_id=self.alarm_id,
            alarm_type=self.alarm_type,
            from_=self.from_,
            id=self.id,
            level=self.level,
            name=self.name,
            namespace=self.namespace,
            order_by=self.order_by,
            record_id=self.record_id,
            region=self.region,
            resource_id=self.resource_id,
            status=self.status,
            to=self.to)


def get_alarm_histories(alarm_id: Optional[_builtins.str] = None,
                        alarm_type: Optional[_builtins.str] = None,
                        from_: Optional[_builtins.str] = None,
                        level: Optional[_builtins.int] = None,
                        name: Optional[_builtins.str] = None,
                        namespace: Optional[_builtins.str] = None,
                        order_by: Optional[_builtins.str] = None,
                        record_id: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        resource_id: Optional[_builtins.str] = None,
                        status: Optional[_builtins.str] = None,
                        to: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmHistoriesResult:
    """
    Use this data source to get the list of CES alarm history records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cse.get_alarm_histories()
    ```


    :param _builtins.str alarm_id: Specifies an alarm ID.
    :param _builtins.str alarm_type: Specifies the alarm type.
           The valid value can be **event** (querying event alarms) or **metric** (querying metric alarms).
    :param _builtins.str from_: Specifies the start time for querying alarm records.
           For example, **2022-02-10T10:05:46+08:00**.
    :param _builtins.int level: Specifies the alarm severity.
           The valid value can be **1** (critical), **2** (major), **3** (minor) or **4** (informational).
    :param _builtins.str name: Specifies the alarm rule name.
    :param _builtins.str namespace: Specifies the namespace of a service.
    :param _builtins.str order_by: Specifies the keyword for sorting alarms.
           The valid values are as follows:
           + **first_alarm_time**: time for generating the alarm for the first time;
           + **update_time**: alarm update time, The default value;
           + **alarm_level**: alarm severity;
           + **record_id**: primary key of the table record;
    :param _builtins.str record_id: Specifies the alarm record ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the ID of a resource in an alarm rule.
    :param _builtins.str status: Specifies the alarm rule status.
           The valid value can be **ok**, **alarm** or **invalid**.
    :param _builtins.str to: Specifies the end time for querying alarm records.
           For example, **2022-02-10T10:05:47+08:00**.
    """
    __args__ = dict()
    __args__['alarmId'] = alarm_id
    __args__['alarmType'] = alarm_type
    __args__['from'] = from_
    __args__['level'] = level
    __args__['name'] = name
    __args__['namespace'] = namespace
    __args__['orderBy'] = order_by
    __args__['recordId'] = record_id
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['status'] = status
    __args__['to'] = to
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getAlarmHistories:getAlarmHistories', __args__, opts=opts, typ=GetAlarmHistoriesResult).value

    return AwaitableGetAlarmHistoriesResult(
        alarm_histories=pulumi.get(__ret__, 'alarm_histories'),
        alarm_id=pulumi.get(__ret__, 'alarm_id'),
        alarm_type=pulumi.get(__ret__, 'alarm_type'),
        from_=pulumi.get(__ret__, 'from_'),
        id=pulumi.get(__ret__, 'id'),
        level=pulumi.get(__ret__, 'level'),
        name=pulumi.get(__ret__, 'name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        order_by=pulumi.get(__ret__, 'order_by'),
        record_id=pulumi.get(__ret__, 'record_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        status=pulumi.get(__ret__, 'status'),
        to=pulumi.get(__ret__, 'to'))
def get_alarm_histories_output(alarm_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               alarm_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               from_: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               level: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               namespace: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               order_by: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               record_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               to: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAlarmHistoriesResult]:
    """
    Use this data source to get the list of CES alarm history records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cse.get_alarm_histories()
    ```


    :param _builtins.str alarm_id: Specifies an alarm ID.
    :param _builtins.str alarm_type: Specifies the alarm type.
           The valid value can be **event** (querying event alarms) or **metric** (querying metric alarms).
    :param _builtins.str from_: Specifies the start time for querying alarm records.
           For example, **2022-02-10T10:05:46+08:00**.
    :param _builtins.int level: Specifies the alarm severity.
           The valid value can be **1** (critical), **2** (major), **3** (minor) or **4** (informational).
    :param _builtins.str name: Specifies the alarm rule name.
    :param _builtins.str namespace: Specifies the namespace of a service.
    :param _builtins.str order_by: Specifies the keyword for sorting alarms.
           The valid values are as follows:
           + **first_alarm_time**: time for generating the alarm for the first time;
           + **update_time**: alarm update time, The default value;
           + **alarm_level**: alarm severity;
           + **record_id**: primary key of the table record;
    :param _builtins.str record_id: Specifies the alarm record ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the ID of a resource in an alarm rule.
    :param _builtins.str status: Specifies the alarm rule status.
           The valid value can be **ok**, **alarm** or **invalid**.
    :param _builtins.str to: Specifies the end time for querying alarm records.
           For example, **2022-02-10T10:05:47+08:00**.
    """
    __args__ = dict()
    __args__['alarmId'] = alarm_id
    __args__['alarmType'] = alarm_type
    __args__['from'] = from_
    __args__['level'] = level
    __args__['name'] = name
    __args__['namespace'] = namespace
    __args__['orderBy'] = order_by
    __args__['recordId'] = record_id
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['status'] = status
    __args__['to'] = to
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getAlarmHistories:getAlarmHistories', __args__, opts=opts, typ=GetAlarmHistoriesResult)
    return __ret__.apply(lambda __response__: GetAlarmHistoriesResult(
        alarm_histories=pulumi.get(__response__, 'alarm_histories'),
        alarm_id=pulumi.get(__response__, 'alarm_id'),
        alarm_type=pulumi.get(__response__, 'alarm_type'),
        from_=pulumi.get(__response__, 'from_'),
        id=pulumi.get(__response__, 'id'),
        level=pulumi.get(__response__, 'level'),
        name=pulumi.get(__response__, 'name'),
        namespace=pulumi.get(__response__, 'namespace'),
        order_by=pulumi.get(__response__, 'order_by'),
        record_id=pulumi.get(__response__, 'record_id'),
        region=pulumi.get(__response__, 'region'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        status=pulumi.get(__response__, 'status'),
        to=pulumi.get(__response__, 'to')))
