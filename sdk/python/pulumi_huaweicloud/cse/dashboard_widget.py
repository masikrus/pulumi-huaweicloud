# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DashboardWidgetArgs', 'DashboardWidget']

@pulumi.input_type
class DashboardWidgetArgs:
    def __init__(__self__, *,
                 dashboard_id: pulumi.Input[_builtins.str],
                 location: pulumi.Input['DashboardWidgetLocationArgs'],
                 metric_display_mode: pulumi.Input[_builtins.str],
                 metrics: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetMetricArgs']]],
                 title: pulumi.Input[_builtins.str],
                 view: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input['DashboardWidgetPropertiesArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DashboardWidget resource.
        :param pulumi.Input[_builtins.str] dashboard_id: Specifies the dashboard ID.
        :param pulumi.Input['DashboardWidgetLocationArgs'] location: Specifies the dashboard widget coordinates.
               
               The location structure is documented below.
        :param pulumi.Input[_builtins.str] metric_display_mode: Specifies how many metrics will be displayed on one widget.
               The valid values are as follows:
               + **single**: one metric.
               + **multiple**: multiple metrics.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetMetricArgs']]] metrics: Specifies the metric list.
               
               The metrics structure is documented below.
        :param pulumi.Input[_builtins.str] title: Specifies the dashboard widget title.
        :param pulumi.Input[_builtins.str] view: Specifies the graph type.
               The valid values are as follows:
               + **bar**: bar chart.
               + **line**: line chart.
               + **bar_chart**: histogram.
               + **table**: table.
               + **circular_bar**: pie chart.
               + **area_chart**: area chart.
        :param pulumi.Input['DashboardWidgetPropertiesArgs'] properties: Specifies additional information.
               
               The properties structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] unit: Specifies the metric unit.
               
               <a name="Metrics"></a>
               The `metrics` block supports:
        """
        pulumi.set(__self__, "dashboard_id", dashboard_id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "metric_display_mode", metric_display_mode)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "view", view)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the dashboard ID.
        """
        return pulumi.get(self, "dashboard_id")

    @dashboard_id.setter
    def dashboard_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dashboard_id", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input['DashboardWidgetLocationArgs']:
        """
        Specifies the dashboard widget coordinates.

        The location structure is documented below.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input['DashboardWidgetLocationArgs']):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="metricDisplayMode")
    def metric_display_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies how many metrics will be displayed on one widget.
        The valid values are as follows:
        + **single**: one metric.
        + **multiple**: multiple metrics.
        """
        return pulumi.get(self, "metric_display_mode")

    @metric_display_mode.setter
    def metric_display_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "metric_display_mode", value)

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetMetricArgs']]]:
        """
        Specifies the metric list.

        The metrics structure is documented below.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetMetricArgs']]]):
        pulumi.set(self, "metrics", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the dashboard widget title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def view(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the graph type.
        The valid values are as follows:
        + **bar**: bar chart.
        + **line**: line chart.
        + **bar_chart**: histogram.
        + **table**: table.
        + **circular_bar**: pie chart.
        + **area_chart**: area chart.
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "view", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['DashboardWidgetPropertiesArgs']]:
        """
        Specifies additional information.

        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['DashboardWidgetPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the metric unit.

        <a name="Metrics"></a>
        The `metrics` block supports:
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class _DashboardWidgetState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input['DashboardWidgetLocationArgs']] = None,
                 metric_display_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetMetricArgs']]]] = None,
                 properties: Optional[pulumi.Input['DashboardWidgetPropertiesArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None,
                 view: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DashboardWidget resources.
        :param pulumi.Input[_builtins.str] created_at: When the dashboard widget was created.
        :param pulumi.Input[_builtins.str] dashboard_id: Specifies the dashboard ID.
        :param pulumi.Input['DashboardWidgetLocationArgs'] location: Specifies the dashboard widget coordinates.
               
               The location structure is documented below.
        :param pulumi.Input[_builtins.str] metric_display_mode: Specifies how many metrics will be displayed on one widget.
               The valid values are as follows:
               + **single**: one metric.
               + **multiple**: multiple metrics.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetMetricArgs']]] metrics: Specifies the metric list.
               
               The metrics structure is documented below.
        :param pulumi.Input['DashboardWidgetPropertiesArgs'] properties: Specifies additional information.
               
               The properties structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] title: Specifies the dashboard widget title.
        :param pulumi.Input[_builtins.str] unit: Specifies the metric unit.
               
               <a name="Metrics"></a>
               The `metrics` block supports:
        :param pulumi.Input[_builtins.str] view: Specifies the graph type.
               The valid values are as follows:
               + **bar**: bar chart.
               + **line**: line chart.
               + **bar_chart**: histogram.
               + **table**: table.
               + **circular_bar**: pie chart.
               + **area_chart**: area chart.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dashboard_id is not None:
            pulumi.set(__self__, "dashboard_id", dashboard_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if metric_display_mode is not None:
            pulumi.set(__self__, "metric_display_mode", metric_display_mode)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the dashboard widget was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dashboard ID.
        """
        return pulumi.get(self, "dashboard_id")

    @dashboard_id.setter
    def dashboard_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input['DashboardWidgetLocationArgs']]:
        """
        Specifies the dashboard widget coordinates.

        The location structure is documented below.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input['DashboardWidgetLocationArgs']]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="metricDisplayMode")
    def metric_display_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies how many metrics will be displayed on one widget.
        The valid values are as follows:
        + **single**: one metric.
        + **multiple**: multiple metrics.
        """
        return pulumi.get(self, "metric_display_mode")

    @metric_display_mode.setter
    def metric_display_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metric_display_mode", value)

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetMetricArgs']]]]:
        """
        Specifies the metric list.

        The metrics structure is documented below.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetMetricArgs']]]]):
        pulumi.set(self, "metrics", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['DashboardWidgetPropertiesArgs']]:
        """
        Specifies additional information.

        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['DashboardWidgetPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dashboard widget title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the metric unit.

        <a name="Metrics"></a>
        The `metrics` block supports:
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unit", value)

    @_builtins.property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the graph type.
        The valid values are as follows:
        + **bar**: bar chart.
        + **line**: line chart.
        + **bar_chart**: histogram.
        + **table**: table.
        + **circular_bar**: pie chart.
        + **area_chart**: area chart.
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "view", value)


@pulumi.type_token("huaweicloud:Cse/dashboardWidget:DashboardWidget")
class DashboardWidget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[Union['DashboardWidgetLocationArgs', 'DashboardWidgetLocationArgsDict']]] = None,
                 metric_display_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DashboardWidgetMetricArgs', 'DashboardWidgetMetricArgsDict']]]]] = None,
                 properties: Optional[pulumi.Input[Union['DashboardWidgetPropertiesArgs', 'DashboardWidgetPropertiesArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None,
                 view: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CES dashboard widget resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        title = config.require_object("title")
        dashboard_id = config.require_object("dashboardId")
        instance_id = config.require_object("instanceId")
        left = config.require_object("left")
        top = config.require_object("top")
        width = config.require_object("width")
        height = config.require_object("height")
        test = huaweicloud.cse.DashboardWidget("test",
            dashboard_id=dashboard_id,
            title=title,
            view="line",
            metric_display_mode="single",
            metrics=[{
                "metric_name": "cpu_util",
                "namespace": "SYS.ECS",
                "dimensions": {
                    "name": "instance_id",
                    "filter_type": "specific_instances",
                    "values": [instance_id],
                },
            }],
            location={
                "left": left,
                "top": top,
                "width": width,
                "height": height,
            })
        ```

        ## Import

        The dashboard widget can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/dashboardWidget:DashboardWidget test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.The missing attributes is `dashboard_id`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the dashboard widget, or the resource definition should be updated to

        align with the dashboard widget. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ces_dashboard_widget" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              dashboard_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] dashboard_id: Specifies the dashboard ID.
        :param pulumi.Input[Union['DashboardWidgetLocationArgs', 'DashboardWidgetLocationArgsDict']] location: Specifies the dashboard widget coordinates.
               
               The location structure is documented below.
        :param pulumi.Input[_builtins.str] metric_display_mode: Specifies how many metrics will be displayed on one widget.
               The valid values are as follows:
               + **single**: one metric.
               + **multiple**: multiple metrics.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DashboardWidgetMetricArgs', 'DashboardWidgetMetricArgsDict']]]] metrics: Specifies the metric list.
               
               The metrics structure is documented below.
        :param pulumi.Input[Union['DashboardWidgetPropertiesArgs', 'DashboardWidgetPropertiesArgsDict']] properties: Specifies additional information.
               
               The properties structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] title: Specifies the dashboard widget title.
        :param pulumi.Input[_builtins.str] unit: Specifies the metric unit.
               
               <a name="Metrics"></a>
               The `metrics` block supports:
        :param pulumi.Input[_builtins.str] view: Specifies the graph type.
               The valid values are as follows:
               + **bar**: bar chart.
               + **line**: line chart.
               + **bar_chart**: histogram.
               + **table**: table.
               + **circular_bar**: pie chart.
               + **area_chart**: area chart.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardWidgetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CES dashboard widget resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        title = config.require_object("title")
        dashboard_id = config.require_object("dashboardId")
        instance_id = config.require_object("instanceId")
        left = config.require_object("left")
        top = config.require_object("top")
        width = config.require_object("width")
        height = config.require_object("height")
        test = huaweicloud.cse.DashboardWidget("test",
            dashboard_id=dashboard_id,
            title=title,
            view="line",
            metric_display_mode="single",
            metrics=[{
                "metric_name": "cpu_util",
                "namespace": "SYS.ECS",
                "dimensions": {
                    "name": "instance_id",
                    "filter_type": "specific_instances",
                    "values": [instance_id],
                },
            }],
            location={
                "left": left,
                "top": top,
                "width": width,
                "height": height,
            })
        ```

        ## Import

        The dashboard widget can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/dashboardWidget:DashboardWidget test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.The missing attributes is `dashboard_id`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the dashboard widget, or the resource definition should be updated to

        align with the dashboard widget. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ces_dashboard_widget" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              dashboard_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DashboardWidgetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardWidgetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[Union['DashboardWidgetLocationArgs', 'DashboardWidgetLocationArgsDict']]] = None,
                 metric_display_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DashboardWidgetMetricArgs', 'DashboardWidgetMetricArgsDict']]]]] = None,
                 properties: Optional[pulumi.Input[Union['DashboardWidgetPropertiesArgs', 'DashboardWidgetPropertiesArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None,
                 view: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardWidgetArgs.__new__(DashboardWidgetArgs)

            if dashboard_id is None and not opts.urn:
                raise TypeError("Missing required property 'dashboard_id'")
            __props__.__dict__["dashboard_id"] = dashboard_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            if metric_display_mode is None and not opts.urn:
                raise TypeError("Missing required property 'metric_display_mode'")
            __props__.__dict__["metric_display_mode"] = metric_display_mode
            if metrics is None and not opts.urn:
                raise TypeError("Missing required property 'metrics'")
            __props__.__dict__["metrics"] = metrics
            __props__.__dict__["properties"] = properties
            __props__.__dict__["region"] = region
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["unit"] = unit
            if view is None and not opts.urn:
                raise TypeError("Missing required property 'view'")
            __props__.__dict__["view"] = view
            __props__.__dict__["created_at"] = None
        super(DashboardWidget, __self__).__init__(
            'huaweicloud:Cse/dashboardWidget:DashboardWidget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[Union['DashboardWidgetLocationArgs', 'DashboardWidgetLocationArgsDict']]] = None,
            metric_display_mode: Optional[pulumi.Input[_builtins.str]] = None,
            metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DashboardWidgetMetricArgs', 'DashboardWidgetMetricArgsDict']]]]] = None,
            properties: Optional[pulumi.Input[Union['DashboardWidgetPropertiesArgs', 'DashboardWidgetPropertiesArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            title: Optional[pulumi.Input[_builtins.str]] = None,
            unit: Optional[pulumi.Input[_builtins.str]] = None,
            view: Optional[pulumi.Input[_builtins.str]] = None) -> 'DashboardWidget':
        """
        Get an existing DashboardWidget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: When the dashboard widget was created.
        :param pulumi.Input[_builtins.str] dashboard_id: Specifies the dashboard ID.
        :param pulumi.Input[Union['DashboardWidgetLocationArgs', 'DashboardWidgetLocationArgsDict']] location: Specifies the dashboard widget coordinates.
               
               The location structure is documented below.
        :param pulumi.Input[_builtins.str] metric_display_mode: Specifies how many metrics will be displayed on one widget.
               The valid values are as follows:
               + **single**: one metric.
               + **multiple**: multiple metrics.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DashboardWidgetMetricArgs', 'DashboardWidgetMetricArgsDict']]]] metrics: Specifies the metric list.
               
               The metrics structure is documented below.
        :param pulumi.Input[Union['DashboardWidgetPropertiesArgs', 'DashboardWidgetPropertiesArgsDict']] properties: Specifies additional information.
               
               The properties structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] title: Specifies the dashboard widget title.
        :param pulumi.Input[_builtins.str] unit: Specifies the metric unit.
               
               <a name="Metrics"></a>
               The `metrics` block supports:
        :param pulumi.Input[_builtins.str] view: Specifies the graph type.
               The valid values are as follows:
               + **bar**: bar chart.
               + **line**: line chart.
               + **bar_chart**: histogram.
               + **table**: table.
               + **circular_bar**: pie chart.
               + **area_chart**: area chart.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardWidgetState.__new__(_DashboardWidgetState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dashboard_id"] = dashboard_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["location"] = location
        __props__.__dict__["metric_display_mode"] = metric_display_mode
        __props__.__dict__["metrics"] = metrics
        __props__.__dict__["properties"] = properties
        __props__.__dict__["region"] = region
        __props__.__dict__["title"] = title
        __props__.__dict__["unit"] = unit
        __props__.__dict__["view"] = view
        return DashboardWidget(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        When the dashboard widget was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the dashboard ID.
        """
        return pulumi.get(self, "dashboard_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output['outputs.DashboardWidgetLocation']:
        """
        Specifies the dashboard widget coordinates.

        The location structure is documented below.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="metricDisplayMode")
    def metric_display_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies how many metrics will be displayed on one widget.
        The valid values are as follows:
        + **single**: one metric.
        + **multiple**: multiple metrics.
        """
        return pulumi.get(self, "metric_display_mode")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> pulumi.Output[Sequence['outputs.DashboardWidgetMetric']]:
        """
        Specifies the metric list.

        The metrics structure is documented below.
        """
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> pulumi.Output['outputs.DashboardWidgetProperties']:
        """
        Specifies additional information.

        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the dashboard widget title.
        """
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the metric unit.

        <a name="Metrics"></a>
        The `metrics` block supports:
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def view(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the graph type.
        The valid values are as follows:
        + **bar**: bar chart.
        + **line**: line chart.
        + **bar_chart**: histogram.
        + **table**: table.
        + **circular_bar**: pie chart.
        + **area_chart**: area chart.
        """
        return pulumi.get(self, "view")

