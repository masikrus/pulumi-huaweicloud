# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMetricDataResult',
    'AwaitableGetMetricDataResult',
    'get_metric_data',
    'get_metric_data_output',
]

@pulumi.output_type
class GetMetricDataResult:
    """
    A collection of values returned by getMetricData.
    """
    def __init__(__self__, datapoints=None, dim0=None, dim1=None, dim2=None, dim3=None, filter=None, from_=None, id=None, metric_name=None, namespace=None, period=None, region=None, to=None):
        if datapoints and not isinstance(datapoints, list):
            raise TypeError("Expected argument 'datapoints' to be a list")
        pulumi.set(__self__, "datapoints", datapoints)
        if dim0 and not isinstance(dim0, str):
            raise TypeError("Expected argument 'dim0' to be a str")
        pulumi.set(__self__, "dim0", dim0)
        if dim1 and not isinstance(dim1, str):
            raise TypeError("Expected argument 'dim1' to be a str")
        pulumi.set(__self__, "dim1", dim1)
        if dim2 and not isinstance(dim2, str):
            raise TypeError("Expected argument 'dim2' to be a str")
        pulumi.set(__self__, "dim2", dim2)
        if dim3 and not isinstance(dim3, str):
            raise TypeError("Expected argument 'dim3' to be a str")
        pulumi.set(__self__, "dim3", dim3)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if from_ and not isinstance(from_, str):
            raise TypeError("Expected argument 'from_' to be a str")
        pulumi.set(__self__, "from_", from_)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric_name and not isinstance(metric_name, str):
            raise TypeError("Expected argument 'metric_name' to be a str")
        pulumi.set(__self__, "metric_name", metric_name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if period and not isinstance(period, int):
            raise TypeError("Expected argument 'period' to be a int")
        pulumi.set(__self__, "period", period)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if to and not isinstance(to, str):
            raise TypeError("Expected argument 'to' to be a str")
        pulumi.set(__self__, "to", to)

    @_builtins.property
    @pulumi.getter
    def datapoints(self) -> Sequence['outputs.GetMetricDataDatapointResult']:
        """
        The metric data list.
        """
        return pulumi.get(self, "datapoints")

    @_builtins.property
    @pulumi.getter
    def dim0(self) -> _builtins.str:
        return pulumi.get(self, "dim0")

    @_builtins.property
    @pulumi.getter
    def dim1(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dim1")

    @_builtins.property
    @pulumi.getter
    def dim2(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dim2")

    @_builtins.property
    @pulumi.getter
    def dim3(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dim3")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="from")
    def from_(self) -> _builtins.str:
        return pulumi.get(self, "from_")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def to(self) -> _builtins.str:
        return pulumi.get(self, "to")


class AwaitableGetMetricDataResult(GetMetricDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetricDataResult(
            datapoints=self.datapoints,
            dim0=self.dim0,
            dim1=self.dim1,
            dim2=self.dim2,
            dim3=self.dim3,
            filter=self.filter,
            from_=self.from_,
            id=self.id,
            metric_name=self.metric_name,
            namespace=self.namespace,
            period=self.period,
            region=self.region,
            to=self.to)


def get_metric_data(dim0: Optional[_builtins.str] = None,
                    dim1: Optional[_builtins.str] = None,
                    dim2: Optional[_builtins.str] = None,
                    dim3: Optional[_builtins.str] = None,
                    filter: Optional[_builtins.str] = None,
                    from_: Optional[_builtins.str] = None,
                    metric_name: Optional[_builtins.str] = None,
                    namespace: Optional[_builtins.str] = None,
                    period: Optional[_builtins.int] = None,
                    region: Optional[_builtins.str] = None,
                    to: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetricDataResult:
    """
    Using the data source to get the list of CES metric data.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    from_ = config.require_object("from")
    to = config.require_object("to")
    test = huaweicloud.Cse.get_metric_data(namespace="You.APP",
        metric_name="cpu_util",
        dim0="platform_id,test_platform_id",
        filter="average",
        period=1,
        from_=from_,
        to=to)
    ```


    :param _builtins.str dim0: Specifies the level-1 dimension of a metric.
           The dimension value is in the **key,value** format.
    :param _builtins.str dim1: Specifies the level-2 dimension of a metric.
    :param _builtins.str dim2: Specifies the level-3 dimension of a metric.
    :param _builtins.str dim3: Specifies the level-4 dimension of a metric.
    :param _builtins.str filter: Specifies the data aggregation method.
           The valid value can be **max**, **min**, **average**, **sum** or **variance**.
    :param _builtins.str from_: Specifies the start time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**. The **from** must be earlier than **to**.
    :param _builtins.str metric_name: Specifies the resource metric name.
    :param _builtins.str namespace: Specifies the metric namespace.
    :param _builtins.int period: Specifies how often Cloud Eye aggregates data.
           The valid values are as follows:
           + **1**: Cloud Eye performs no aggregation and displays raw data;
           + **300**: Cloud Eye aggregates data every 5 minutes;
           + **1200**: Cloud Eye aggregates data every 20 minutes;
           + **3600**: Cloud Eye aggregates data every hour;
           + **14400**: Cloud Eye aggregates data every 4 hours;
           + **86400**: Cloud Eye aggregates data every 24 hours;
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str to: Specifies the end time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
    """
    __args__ = dict()
    __args__['dim0'] = dim0
    __args__['dim1'] = dim1
    __args__['dim2'] = dim2
    __args__['dim3'] = dim3
    __args__['filter'] = filter
    __args__['from'] = from_
    __args__['metricName'] = metric_name
    __args__['namespace'] = namespace
    __args__['period'] = period
    __args__['region'] = region
    __args__['to'] = to
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getMetricData:getMetricData', __args__, opts=opts, typ=GetMetricDataResult).value

    return AwaitableGetMetricDataResult(
        datapoints=pulumi.get(__ret__, 'datapoints'),
        dim0=pulumi.get(__ret__, 'dim0'),
        dim1=pulumi.get(__ret__, 'dim1'),
        dim2=pulumi.get(__ret__, 'dim2'),
        dim3=pulumi.get(__ret__, 'dim3'),
        filter=pulumi.get(__ret__, 'filter'),
        from_=pulumi.get(__ret__, 'from_'),
        id=pulumi.get(__ret__, 'id'),
        metric_name=pulumi.get(__ret__, 'metric_name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        period=pulumi.get(__ret__, 'period'),
        region=pulumi.get(__ret__, 'region'),
        to=pulumi.get(__ret__, 'to'))
def get_metric_data_output(dim0: Optional[pulumi.Input[_builtins.str]] = None,
                           dim1: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           dim2: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           dim3: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           filter: Optional[pulumi.Input[_builtins.str]] = None,
                           from_: Optional[pulumi.Input[_builtins.str]] = None,
                           metric_name: Optional[pulumi.Input[_builtins.str]] = None,
                           namespace: Optional[pulumi.Input[_builtins.str]] = None,
                           period: Optional[pulumi.Input[_builtins.int]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           to: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMetricDataResult]:
    """
    Using the data source to get the list of CES metric data.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    from_ = config.require_object("from")
    to = config.require_object("to")
    test = huaweicloud.Cse.get_metric_data(namespace="You.APP",
        metric_name="cpu_util",
        dim0="platform_id,test_platform_id",
        filter="average",
        period=1,
        from_=from_,
        to=to)
    ```


    :param _builtins.str dim0: Specifies the level-1 dimension of a metric.
           The dimension value is in the **key,value** format.
    :param _builtins.str dim1: Specifies the level-2 dimension of a metric.
    :param _builtins.str dim2: Specifies the level-3 dimension of a metric.
    :param _builtins.str dim3: Specifies the level-4 dimension of a metric.
    :param _builtins.str filter: Specifies the data aggregation method.
           The valid value can be **max**, **min**, **average**, **sum** or **variance**.
    :param _builtins.str from_: Specifies the start time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**. The **from** must be earlier than **to**.
    :param _builtins.str metric_name: Specifies the resource metric name.
    :param _builtins.str namespace: Specifies the metric namespace.
    :param _builtins.int period: Specifies how often Cloud Eye aggregates data.
           The valid values are as follows:
           + **1**: Cloud Eye performs no aggregation and displays raw data;
           + **300**: Cloud Eye aggregates data every 5 minutes;
           + **1200**: Cloud Eye aggregates data every 20 minutes;
           + **3600**: Cloud Eye aggregates data every hour;
           + **14400**: Cloud Eye aggregates data every 4 hours;
           + **86400**: Cloud Eye aggregates data every 24 hours;
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str to: Specifies the end time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
    """
    __args__ = dict()
    __args__['dim0'] = dim0
    __args__['dim1'] = dim1
    __args__['dim2'] = dim2
    __args__['dim3'] = dim3
    __args__['filter'] = filter
    __args__['from'] = from_
    __args__['metricName'] = metric_name
    __args__['namespace'] = namespace
    __args__['period'] = period
    __args__['region'] = region
    __args__['to'] = to
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getMetricData:getMetricData', __args__, opts=opts, typ=GetMetricDataResult)
    return __ret__.apply(lambda __response__: GetMetricDataResult(
        datapoints=pulumi.get(__response__, 'datapoints'),
        dim0=pulumi.get(__response__, 'dim0'),
        dim1=pulumi.get(__response__, 'dim1'),
        dim2=pulumi.get(__response__, 'dim2'),
        dim3=pulumi.get(__response__, 'dim3'),
        filter=pulumi.get(__response__, 'filter'),
        from_=pulumi.get(__response__, 'from_'),
        id=pulumi.get(__response__, 'id'),
        metric_name=pulumi.get(__response__, 'metric_name'),
        namespace=pulumi.get(__response__, 'namespace'),
        period=pulumi.get(__response__, 'period'),
        region=pulumi.get(__response__, 'region'),
        to=pulumi.get(__response__, 'to')))
