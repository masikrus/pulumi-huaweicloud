# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMetricsResult',
    'AwaitableGetMetricsResult',
    'get_metrics',
    'get_metrics_output',
]

@pulumi.output_type
class GetMetricsResult:
    """
    A collection of values returned by getMetrics.
    """
    def __init__(__self__, dim0=None, dim1=None, dim2=None, id=None, metric_name=None, metrics=None, namespace=None, region=None):
        if dim0 and not isinstance(dim0, str):
            raise TypeError("Expected argument 'dim0' to be a str")
        pulumi.set(__self__, "dim0", dim0)
        if dim1 and not isinstance(dim1, str):
            raise TypeError("Expected argument 'dim1' to be a str")
        pulumi.set(__self__, "dim1", dim1)
        if dim2 and not isinstance(dim2, str):
            raise TypeError("Expected argument 'dim2' to be a str")
        pulumi.set(__self__, "dim2", dim2)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric_name and not isinstance(metric_name, str):
            raise TypeError("Expected argument 'metric_name' to be a str")
        pulumi.set(__self__, "metric_name", metric_name)
        if metrics and not isinstance(metrics, list):
            raise TypeError("Expected argument 'metrics' to be a list")
        pulumi.set(__self__, "metrics", metrics)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def dim0(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dim0")

    @_builtins.property
    @pulumi.getter
    def dim1(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dim1")

    @_builtins.property
    @pulumi.getter
    def dim2(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dim2")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[_builtins.str]:
        """
        The metric name.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetMetricsMetricResult']:
        """
        The metric information list.
        """
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        The metric namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetMetricsResult(GetMetricsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetricsResult(
            dim0=self.dim0,
            dim1=self.dim1,
            dim2=self.dim2,
            id=self.id,
            metric_name=self.metric_name,
            metrics=self.metrics,
            namespace=self.namespace,
            region=self.region)


def get_metrics(dim0: Optional[_builtins.str] = None,
                dim1: Optional[_builtins.str] = None,
                dim2: Optional[_builtins.str] = None,
                metric_name: Optional[_builtins.str] = None,
                namespace: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetricsResult:
    """
    Use this data source to get the list of CES metrics.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    namespace = config.require_object("namespace")
    metric_name = config.require_object("metricName")
    test = huaweicloud.Cse.get_metrics(namespace=namespace,
        metric_name=metric_name)
    ```


    :param _builtins.str dim0: The first metric dimension.
    :param _builtins.str dim1: The second metric dimension.
    :param _builtins.str dim2: The third metric dimension.
    :param _builtins.str metric_name: The metric name.
    :param _builtins.str namespace: The metric namespace.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['dim0'] = dim0
    __args__['dim1'] = dim1
    __args__['dim2'] = dim2
    __args__['metricName'] = metric_name
    __args__['namespace'] = namespace
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getMetrics:getMetrics', __args__, opts=opts, typ=GetMetricsResult).value

    return AwaitableGetMetricsResult(
        dim0=pulumi.get(__ret__, 'dim0'),
        dim1=pulumi.get(__ret__, 'dim1'),
        dim2=pulumi.get(__ret__, 'dim2'),
        id=pulumi.get(__ret__, 'id'),
        metric_name=pulumi.get(__ret__, 'metric_name'),
        metrics=pulumi.get(__ret__, 'metrics'),
        namespace=pulumi.get(__ret__, 'namespace'),
        region=pulumi.get(__ret__, 'region'))
def get_metrics_output(dim0: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       dim1: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       dim2: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       metric_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       namespace: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMetricsResult]:
    """
    Use this data source to get the list of CES metrics.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    namespace = config.require_object("namespace")
    metric_name = config.require_object("metricName")
    test = huaweicloud.Cse.get_metrics(namespace=namespace,
        metric_name=metric_name)
    ```


    :param _builtins.str dim0: The first metric dimension.
    :param _builtins.str dim1: The second metric dimension.
    :param _builtins.str dim2: The third metric dimension.
    :param _builtins.str metric_name: The metric name.
    :param _builtins.str namespace: The metric namespace.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['dim0'] = dim0
    __args__['dim1'] = dim1
    __args__['dim2'] = dim2
    __args__['metricName'] = metric_name
    __args__['namespace'] = namespace
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getMetrics:getMetrics', __args__, opts=opts, typ=GetMetricsResult)
    return __ret__.apply(lambda __response__: GetMetricsResult(
        dim0=pulumi.get(__response__, 'dim0'),
        dim1=pulumi.get(__response__, 'dim1'),
        dim2=pulumi.get(__response__, 'dim2'),
        id=pulumi.get(__response__, 'id'),
        metric_name=pulumi.get(__response__, 'metric_name'),
        metrics=pulumi.get(__response__, 'metrics'),
        namespace=pulumi.get(__response__, 'namespace'),
        region=pulumi.get(__response__, 'region')))
