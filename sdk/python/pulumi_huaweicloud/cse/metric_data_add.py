# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MetricDataAddArgs', 'MetricDataAdd']

@pulumi.input_type
class MetricDataAddArgs:
    def __init__(__self__, *,
                 collect_time: pulumi.Input[_builtins.str],
                 metric: pulumi.Input['MetricDataAddMetricArgs'],
                 ttl: pulumi.Input[_builtins.int],
                 value: pulumi.Input[_builtins.float],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MetricDataAdd resource.
        :param pulumi.Input[_builtins.str] collect_time: Specifies the collect time.
               The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        :param pulumi.Input['MetricDataAddMetricArgs'] metric: Specifies the custom CES monitoring metric data.
               
               The metric structure is documented below.
        :param pulumi.Input[_builtins.int] ttl: Specifies the monitoring metric data retention period.
               The unit is second. The range of values is from **1** to **604800**.
        :param pulumi.Input[_builtins.float] value: Specifies the dimension value.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the monitoring metric data.
               The valid value can be **int** or **float**.
               
               <a name="Metric"></a>
               The `metric` block supports:
        :param pulumi.Input[_builtins.str] unit: Specifies the unit of the monitoring metric data.
        """
        pulumi.set(__self__, "collect_time", collect_time)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "value", value)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter(name="collectTime")
    def collect_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the collect time.
        The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        """
        return pulumi.get(self, "collect_time")

    @collect_time.setter
    def collect_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "collect_time", value)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> pulumi.Input['MetricDataAddMetricArgs']:
        """
        Specifies the custom CES monitoring metric data.

        The metric structure is documented below.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input['MetricDataAddMetricArgs']):
        pulumi.set(self, "metric", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the monitoring metric data retention period.
        The unit is second. The range of values is from **1** to **604800**.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.float]:
        """
        Specifies the dimension value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the monitoring metric data.
        The valid value can be **int** or **float**.

        <a name="Metric"></a>
        The `metric` block supports:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unit of the monitoring metric data.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class _MetricDataAddState:
    def __init__(__self__, *,
                 collect_time: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 metric: Optional[pulumi.Input['MetricDataAddMetricArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering MetricDataAdd resources.
        :param pulumi.Input[_builtins.str] collect_time: Specifies the collect time.
               The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        :param pulumi.Input['MetricDataAddMetricArgs'] metric: Specifies the custom CES monitoring metric data.
               
               The metric structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] ttl: Specifies the monitoring metric data retention period.
               The unit is second. The range of values is from **1** to **604800**.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the monitoring metric data.
               The valid value can be **int** or **float**.
               
               <a name="Metric"></a>
               The `metric` block supports:
        :param pulumi.Input[_builtins.str] unit: Specifies the unit of the monitoring metric data.
        :param pulumi.Input[_builtins.float] value: Specifies the dimension value.
        """
        if collect_time is not None:
            pulumi.set(__self__, "collect_time", collect_time)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="collectTime")
    def collect_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the collect time.
        The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        """
        return pulumi.get(self, "collect_time")

    @collect_time.setter
    def collect_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "collect_time", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input['MetricDataAddMetricArgs']]:
        """
        Specifies the custom CES monitoring metric data.

        The metric structure is documented below.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input['MetricDataAddMetricArgs']]):
        pulumi.set(self, "metric", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the monitoring metric data retention period.
        The unit is second. The range of values is from **1** to **604800**.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the monitoring metric data.
        The valid value can be **int** or **float**.

        <a name="Metric"></a>
        The `metric` block supports:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unit of the monitoring metric data.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unit", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the dimension value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("huaweicloud:Cse/metricDataAdd:MetricDataAdd")
class MetricDataAdd(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collect_time: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 metric: Optional[pulumi.Input[Union['MetricDataAddMetricArgs', 'MetricDataAddMetricArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Manages a CES metric data add resource within HuaweiCloud.

        > This resource is only a one-time action resource for operating the API.
        Deleting this resource will not clear the corresponding request record,
        but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        namespace = config.require_object("namespace")
        metric_name = config.require_object("metricName")
        name = config.require_object("name")
        value = config.require_object("value")
        ttl = config.require_object("ttl")
        collect_time = config.require_object("collectTime")
        unit = config.require_object("unit")
        type = config.require_object("type")
        test = huaweicloud.cse.MetricDataAdd("test",
            metric={
                "namespace": namespace,
                "metric_name": metric_name,
                "dimensions": [{
                    "name": name,
                    "value": value,
                }],
            },
            ttl=ttl,
            collect_time=collect_time,
            value=value,
            unit=unit,
            type=type)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] collect_time: Specifies the collect time.
               The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        :param pulumi.Input[Union['MetricDataAddMetricArgs', 'MetricDataAddMetricArgsDict']] metric: Specifies the custom CES monitoring metric data.
               
               The metric structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] ttl: Specifies the monitoring metric data retention period.
               The unit is second. The range of values is from **1** to **604800**.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the monitoring metric data.
               The valid value can be **int** or **float**.
               
               <a name="Metric"></a>
               The `metric` block supports:
        :param pulumi.Input[_builtins.str] unit: Specifies the unit of the monitoring metric data.
        :param pulumi.Input[_builtins.float] value: Specifies the dimension value.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetricDataAddArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CES metric data add resource within HuaweiCloud.

        > This resource is only a one-time action resource for operating the API.
        Deleting this resource will not clear the corresponding request record,
        but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        namespace = config.require_object("namespace")
        metric_name = config.require_object("metricName")
        name = config.require_object("name")
        value = config.require_object("value")
        ttl = config.require_object("ttl")
        collect_time = config.require_object("collectTime")
        unit = config.require_object("unit")
        type = config.require_object("type")
        test = huaweicloud.cse.MetricDataAdd("test",
            metric={
                "namespace": namespace,
                "metric_name": metric_name,
                "dimensions": [{
                    "name": name,
                    "value": value,
                }],
            },
            ttl=ttl,
            collect_time=collect_time,
            value=value,
            unit=unit,
            type=type)
        ```

        :param str resource_name: The name of the resource.
        :param MetricDataAddArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetricDataAddArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collect_time: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 metric: Optional[pulumi.Input[Union['MetricDataAddMetricArgs', 'MetricDataAddMetricArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetricDataAddArgs.__new__(MetricDataAddArgs)

            if collect_time is None and not opts.urn:
                raise TypeError("Missing required property 'collect_time'")
            __props__.__dict__["collect_time"] = collect_time
            __props__.__dict__["enable_force_new"] = enable_force_new
            if metric is None and not opts.urn:
                raise TypeError("Missing required property 'metric'")
            __props__.__dict__["metric"] = metric
            __props__.__dict__["region"] = region
            if ttl is None and not opts.urn:
                raise TypeError("Missing required property 'ttl'")
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["type"] = type
            __props__.__dict__["unit"] = unit
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
        super(MetricDataAdd, __self__).__init__(
            'huaweicloud:Cse/metricDataAdd:MetricDataAdd',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            collect_time: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            metric: Optional[pulumi.Input[Union['MetricDataAddMetricArgs', 'MetricDataAddMetricArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            ttl: Optional[pulumi.Input[_builtins.int]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            unit: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.float]] = None) -> 'MetricDataAdd':
        """
        Get an existing MetricDataAdd resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] collect_time: Specifies the collect time.
               The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        :param pulumi.Input[Union['MetricDataAddMetricArgs', 'MetricDataAddMetricArgsDict']] metric: Specifies the custom CES monitoring metric data.
               
               The metric structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] ttl: Specifies the monitoring metric data retention period.
               The unit is second. The range of values is from **1** to **604800**.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the monitoring metric data.
               The valid value can be **int** or **float**.
               
               <a name="Metric"></a>
               The `metric` block supports:
        :param pulumi.Input[_builtins.str] unit: Specifies the unit of the monitoring metric data.
        :param pulumi.Input[_builtins.float] value: Specifies the dimension value.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetricDataAddState.__new__(_MetricDataAddState)

        __props__.__dict__["collect_time"] = collect_time
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["metric"] = metric
        __props__.__dict__["region"] = region
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["type"] = type
        __props__.__dict__["unit"] = unit
        __props__.__dict__["value"] = value
        return MetricDataAdd(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="collectTime")
    def collect_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the collect time.
        The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        """
        return pulumi.get(self, "collect_time")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> pulumi.Output['outputs.MetricDataAddMetric']:
        """
        Specifies the custom CES monitoring metric data.

        The metric structure is documented below.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the monitoring metric data retention period.
        The unit is second. The range of values is from **1** to **604800**.
        """
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of the monitoring metric data.
        The valid value can be **int** or **float**.

        <a name="Metric"></a>
        The `metric` block supports:
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the unit of the monitoring metric data.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the dimension value.
        """
        return pulumi.get(self, "value")

