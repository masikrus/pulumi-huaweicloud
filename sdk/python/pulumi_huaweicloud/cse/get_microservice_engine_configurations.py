# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMicroserviceEngineConfigurationsResult',
    'AwaitableGetMicroserviceEngineConfigurationsResult',
    'get_microservice_engine_configurations',
    'get_microservice_engine_configurations_output',
]

@pulumi.output_type
class GetMicroserviceEngineConfigurationsResult:
    """
    A collection of values returned by getMicroserviceEngineConfigurations.
    """
    def __init__(__self__, admin_pass=None, admin_user=None, auth_address=None, configurations=None, connect_address=None, id=None):
        if admin_pass and not isinstance(admin_pass, str):
            raise TypeError("Expected argument 'admin_pass' to be a str")
        pulumi.set(__self__, "admin_pass", admin_pass)
        if admin_user and not isinstance(admin_user, str):
            raise TypeError("Expected argument 'admin_user' to be a str")
        pulumi.set(__self__, "admin_user", admin_user)
        if auth_address and not isinstance(auth_address, str):
            raise TypeError("Expected argument 'auth_address' to be a str")
        pulumi.set(__self__, "auth_address", auth_address)
        if configurations and not isinstance(configurations, list):
            raise TypeError("Expected argument 'configurations' to be a list")
        pulumi.set(__self__, "configurations", configurations)
        if connect_address and not isinstance(connect_address, str):
            raise TypeError("Expected argument 'connect_address' to be a str")
        pulumi.set(__self__, "connect_address", connect_address)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "admin_pass")

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "admin_user")

    @_builtins.property
    @pulumi.getter(name="authAddress")
    def auth_address(self) -> _builtins.str:
        return pulumi.get(self, "auth_address")

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetMicroserviceEngineConfigurationsConfigurationResult']:
        """
        All queried configurations of the dedicated microservice engine.  
        The configurations structure is documented below.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> _builtins.str:
        return pulumi.get(self, "connect_address")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetMicroserviceEngineConfigurationsResult(GetMicroserviceEngineConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMicroserviceEngineConfigurationsResult(
            admin_pass=self.admin_pass,
            admin_user=self.admin_user,
            auth_address=self.auth_address,
            configurations=self.configurations,
            connect_address=self.connect_address,
            id=self.id)


def get_microservice_engine_configurations(admin_pass: Optional[_builtins.str] = None,
                                           admin_user: Optional[_builtins.str] = None,
                                           auth_address: Optional[_builtins.str] = None,
                                           connect_address: Optional[_builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMicroserviceEngineConfigurationsResult:
    """
    Use this data source to query managed microservice engine configurations within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    microservice_engine_id = config.require_object("microserviceEngineId")
    # Enable the EIP access
    test = huaweicloud.Cse.get_microservice_engines()
    fileter_engines = [o for o in test.engines if o.id == microservice_engine_id]
    test_get_microservice_engine_configurations = huaweicloud.Cse.get_microservice_engine_configurations(auth_address=fileter_engines[0].service_registry_addresses[0].public,
        connect_address=fileter_engines[0].config_center_addresses[0].public)
    ```


    :param _builtins.str admin_pass: Specifies the account password for **RBAC** login.
           The password format must meet the following conditions:
           + Must be `8` to `32` characters long.
           + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
           (-~!@#%^*_=+?$&()|<>{}[]).
           + Cannot be the account name or account name spelled backwards.
           + The password can only start with a letter.
    :param _builtins.str admin_user: Specifies the account name for **RBAC** login.
    :param _builtins.str auth_address: Specifies the address that used to request the access token.
    :param _builtins.str connect_address: Specifies the address that used to access engine and manages
           configuration.
           
           > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
    """
    __args__ = dict()
    __args__['adminPass'] = admin_pass
    __args__['adminUser'] = admin_user
    __args__['authAddress'] = auth_address
    __args__['connectAddress'] = connect_address
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getMicroserviceEngineConfigurations:getMicroserviceEngineConfigurations', __args__, opts=opts, typ=GetMicroserviceEngineConfigurationsResult).value

    return AwaitableGetMicroserviceEngineConfigurationsResult(
        admin_pass=pulumi.get(__ret__, 'admin_pass'),
        admin_user=pulumi.get(__ret__, 'admin_user'),
        auth_address=pulumi.get(__ret__, 'auth_address'),
        configurations=pulumi.get(__ret__, 'configurations'),
        connect_address=pulumi.get(__ret__, 'connect_address'),
        id=pulumi.get(__ret__, 'id'))
def get_microservice_engine_configurations_output(admin_pass: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  admin_user: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  auth_address: Optional[pulumi.Input[_builtins.str]] = None,
                                                  connect_address: Optional[pulumi.Input[_builtins.str]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMicroserviceEngineConfigurationsResult]:
    """
    Use this data source to query managed microservice engine configurations within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    microservice_engine_id = config.require_object("microserviceEngineId")
    # Enable the EIP access
    test = huaweicloud.Cse.get_microservice_engines()
    fileter_engines = [o for o in test.engines if o.id == microservice_engine_id]
    test_get_microservice_engine_configurations = huaweicloud.Cse.get_microservice_engine_configurations(auth_address=fileter_engines[0].service_registry_addresses[0].public,
        connect_address=fileter_engines[0].config_center_addresses[0].public)
    ```


    :param _builtins.str admin_pass: Specifies the account password for **RBAC** login.
           The password format must meet the following conditions:
           + Must be `8` to `32` characters long.
           + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
           (-~!@#%^*_=+?$&()|<>{}[]).
           + Cannot be the account name or account name spelled backwards.
           + The password can only start with a letter.
    :param _builtins.str admin_user: Specifies the account name for **RBAC** login.
    :param _builtins.str auth_address: Specifies the address that used to request the access token.
    :param _builtins.str connect_address: Specifies the address that used to access engine and manages
           configuration.
           
           > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
    """
    __args__ = dict()
    __args__['adminPass'] = admin_pass
    __args__['adminUser'] = admin_user
    __args__['authAddress'] = auth_address
    __args__['connectAddress'] = connect_address
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getMicroserviceEngineConfigurations:getMicroserviceEngineConfigurations', __args__, opts=opts, typ=GetMicroserviceEngineConfigurationsResult)
    return __ret__.apply(lambda __response__: GetMicroserviceEngineConfigurationsResult(
        admin_pass=pulumi.get(__response__, 'admin_pass'),
        admin_user=pulumi.get(__response__, 'admin_user'),
        auth_address=pulumi.get(__response__, 'auth_address'),
        configurations=pulumi.get(__response__, 'configurations'),
        connect_address=pulumi.get(__response__, 'connect_address'),
        id=pulumi.get(__response__, 'id')))
