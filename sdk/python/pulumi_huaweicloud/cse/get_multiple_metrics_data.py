# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMultipleMetricsDataResult',
    'AwaitableGetMultipleMetricsDataResult',
    'get_multiple_metrics_data',
    'get_multiple_metrics_data_output',
]

@pulumi.output_type
class GetMultipleMetricsDataResult:
    """
    A collection of values returned by getMultipleMetricsData.
    """
    def __init__(__self__, datas=None, filter=None, from_=None, id=None, metrics=None, period=None, region=None, to=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if from_ and not isinstance(from_, str):
            raise TypeError("Expected argument 'from_' to be a str")
        pulumi.set(__self__, "from_", from_)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metrics and not isinstance(metrics, list):
            raise TypeError("Expected argument 'metrics' to be a list")
        pulumi.set(__self__, "metrics", metrics)
        if period and not isinstance(period, str):
            raise TypeError("Expected argument 'period' to be a str")
        pulumi.set(__self__, "period", period)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if to and not isinstance(to, str):
            raise TypeError("Expected argument 'to' to be a str")
        pulumi.set(__self__, "to", to)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetMultipleMetricsDataDataResult']:
        """
        The metric data.
        The data structure is documented below.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="from")
    def from_(self) -> _builtins.str:
        return pulumi.get(self, "from_")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetMultipleMetricsDataMetricResult']:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.str:
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def to(self) -> _builtins.str:
        return pulumi.get(self, "to")


class AwaitableGetMultipleMetricsDataResult(GetMultipleMetricsDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMultipleMetricsDataResult(
            datas=self.datas,
            filter=self.filter,
            from_=self.from_,
            id=self.id,
            metrics=self.metrics,
            period=self.period,
            region=self.region,
            to=self.to)


def get_multiple_metrics_data(filter: Optional[_builtins.str] = None,
                              from_: Optional[_builtins.str] = None,
                              metrics: Optional[Sequence[Union['GetMultipleMetricsDataMetricArgs', 'GetMultipleMetricsDataMetricArgsDict']]] = None,
                              period: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              to: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMultipleMetricsDataResult:
    """
    Use this data source to get the list of CES multiple metrics data.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    from_ = config.require_object("from")
    to = config.require_object("to")
    test = huaweicloud.Cse.get_multiple_metrics_data(metrics=[
            {
                "namespace": "YOU.APP",
                "metric_name": "cpu_util",
                "dimensions": [
                    {
                        "name": "platform_id",
                        "value": "test_platform_id",
                    },
                    {
                        "name": "instance_id",
                        "value": "test_instance_id",
                    },
                    {
                        "name": "cpu_type",
                        "value": "test_cpu_type",
                    },
                ],
            },
            {
                "namespace": "MINE.APP",
                "metric_name": "mem_util",
                "dimensions": [
                    {
                        "name": "instance_id",
                        "value": "test_instance_id",
                    },
                    {
                        "name": "memory_type",
                        "value": "test_memory_type",
                    },
                ],
            },
        ],
        from_=from_,
        to=to,
        period="1",
        filter="average")
    ```


    :param _builtins.str filter: Specifies the data rollup method.
           The valid value can be **max**, **min**, **average**, **sum** or **variance**.
           The field does not affect the query result of raw data. (The period is **1**.)
           
           <a name="Metrics"></a>
           The `metrics` block supports:
    :param _builtins.str from_: Specifies the start time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**. The **from** must be earlier than **to**.
    :param Sequence[Union['GetMultipleMetricsDataMetricArgs', 'GetMultipleMetricsDataMetricArgsDict']] metrics: Specifies the metric data. Up to 500 metrics can be specified at a time.
           The metrics structure is documented below.
    :param _builtins.str period: Specifies how often Cloud Eye aggregates data.
           The valid values are as follows:
           + **1**: Cloud Eye performs no aggregation and displays raw data;
           + **300**: Cloud Eye aggregates data every 5 minutes;
           + **1200**: Cloud Eye aggregates data every 20 minutes;
           + **3600**: Cloud Eye aggregates data every hour;
           + **14400**: Cloud Eye aggregates data every 4 hours;
           + **86400**: Cloud Eye aggregates data every 24 hours;
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str to: Specifies the end time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['from'] = from_
    __args__['metrics'] = metrics
    __args__['period'] = period
    __args__['region'] = region
    __args__['to'] = to
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getMultipleMetricsData:getMultipleMetricsData', __args__, opts=opts, typ=GetMultipleMetricsDataResult).value

    return AwaitableGetMultipleMetricsDataResult(
        datas=pulumi.get(__ret__, 'datas'),
        filter=pulumi.get(__ret__, 'filter'),
        from_=pulumi.get(__ret__, 'from_'),
        id=pulumi.get(__ret__, 'id'),
        metrics=pulumi.get(__ret__, 'metrics'),
        period=pulumi.get(__ret__, 'period'),
        region=pulumi.get(__ret__, 'region'),
        to=pulumi.get(__ret__, 'to'))
def get_multiple_metrics_data_output(filter: Optional[pulumi.Input[_builtins.str]] = None,
                                     from_: Optional[pulumi.Input[_builtins.str]] = None,
                                     metrics: Optional[pulumi.Input[Sequence[Union['GetMultipleMetricsDataMetricArgs', 'GetMultipleMetricsDataMetricArgsDict']]]] = None,
                                     period: Optional[pulumi.Input[_builtins.str]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     to: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMultipleMetricsDataResult]:
    """
    Use this data source to get the list of CES multiple metrics data.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    from_ = config.require_object("from")
    to = config.require_object("to")
    test = huaweicloud.Cse.get_multiple_metrics_data(metrics=[
            {
                "namespace": "YOU.APP",
                "metric_name": "cpu_util",
                "dimensions": [
                    {
                        "name": "platform_id",
                        "value": "test_platform_id",
                    },
                    {
                        "name": "instance_id",
                        "value": "test_instance_id",
                    },
                    {
                        "name": "cpu_type",
                        "value": "test_cpu_type",
                    },
                ],
            },
            {
                "namespace": "MINE.APP",
                "metric_name": "mem_util",
                "dimensions": [
                    {
                        "name": "instance_id",
                        "value": "test_instance_id",
                    },
                    {
                        "name": "memory_type",
                        "value": "test_memory_type",
                    },
                ],
            },
        ],
        from_=from_,
        to=to,
        period="1",
        filter="average")
    ```


    :param _builtins.str filter: Specifies the data rollup method.
           The valid value can be **max**, **min**, **average**, **sum** or **variance**.
           The field does not affect the query result of raw data. (The period is **1**.)
           
           <a name="Metrics"></a>
           The `metrics` block supports:
    :param _builtins.str from_: Specifies the start time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**. The **from** must be earlier than **to**.
    :param Sequence[Union['GetMultipleMetricsDataMetricArgs', 'GetMultipleMetricsDataMetricArgsDict']] metrics: Specifies the metric data. Up to 500 metrics can be specified at a time.
           The metrics structure is documented below.
    :param _builtins.str period: Specifies how often Cloud Eye aggregates data.
           The valid values are as follows:
           + **1**: Cloud Eye performs no aggregation and displays raw data;
           + **300**: Cloud Eye aggregates data every 5 minutes;
           + **1200**: Cloud Eye aggregates data every 20 minutes;
           + **3600**: Cloud Eye aggregates data every hour;
           + **14400**: Cloud Eye aggregates data every 4 hours;
           + **86400**: Cloud Eye aggregates data every 24 hours;
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str to: Specifies the end time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['from'] = from_
    __args__['metrics'] = metrics
    __args__['period'] = period
    __args__['region'] = region
    __args__['to'] = to
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getMultipleMetricsData:getMultipleMetricsData', __args__, opts=opts, typ=GetMultipleMetricsDataResult)
    return __ret__.apply(lambda __response__: GetMultipleMetricsDataResult(
        datas=pulumi.get(__response__, 'datas'),
        filter=pulumi.get(__response__, 'filter'),
        from_=pulumi.get(__response__, 'from_'),
        id=pulumi.get(__response__, 'id'),
        metrics=pulumi.get(__response__, 'metrics'),
        period=pulumi.get(__response__, 'period'),
        region=pulumi.get(__response__, 'region'),
        to=pulumi.get(__response__, 'to')))
