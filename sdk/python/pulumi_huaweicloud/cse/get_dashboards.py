# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDashboardsResult',
    'AwaitableGetDashboardsResult',
    'get_dashboards',
    'get_dashboards_output',
]

@pulumi.output_type
class GetDashboardsResult:
    """
    A collection of values returned by getDashboards.
    """
    def __init__(__self__, dashboard_id=None, dashboards=None, enterprise_project_id=None, id=None, is_favorite=None, name=None, region=None):
        if dashboard_id and not isinstance(dashboard_id, str):
            raise TypeError("Expected argument 'dashboard_id' to be a str")
        pulumi.set(__self__, "dashboard_id", dashboard_id)
        if dashboards and not isinstance(dashboards, list):
            raise TypeError("Expected argument 'dashboards' to be a list")
        pulumi.set(__self__, "dashboards", dashboards)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_favorite and not isinstance(is_favorite, bool):
            raise TypeError("Expected argument 'is_favorite' to be a bool")
        pulumi.set(__self__, "is_favorite", is_favorite)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> Optional[_builtins.str]:
        """
        The dashboard ID.
        """
        return pulumi.get(self, "dashboard_id")

    @_builtins.property
    @pulumi.getter
    def dashboards(self) -> Sequence['outputs.GetDashboardsDashboardResult']:
        """
        The dashboard list.
        """
        return pulumi.get(self, "dashboards")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[_builtins.bool]:
        """
        Whether a dashboard is added to favorites.
        """
        return pulumi.get(self, "is_favorite")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the dashboard.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDashboardsResult(GetDashboardsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDashboardsResult(
            dashboard_id=self.dashboard_id,
            dashboards=self.dashboards,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            is_favorite=self.is_favorite,
            name=self.name,
            region=self.region)


def get_dashboards(dashboard_id: Optional[_builtins.str] = None,
                   enterprise_project_id: Optional[_builtins.str] = None,
                   is_favorite: Optional[_builtins.bool] = None,
                   name: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDashboardsResult:
    """
    Use this data source to get the list of CES dashboards.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cse.get_dashboards()
    ```


    :param _builtins.str dashboard_id: Specifies the dashboard ID.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.bool is_favorite: Specifies whether a dashboard in an enterprise project is added to favorites.
           The value can be **true** (added to favorites) or **false** (not added to favorites).
           If this parameter is specified, **enterprise_project_id** is mandatory.
    :param _builtins.str name: Specifies the dashboard name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['dashboardId'] = dashboard_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['isFavorite'] = is_favorite
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getDashboards:getDashboards', __args__, opts=opts, typ=GetDashboardsResult).value

    return AwaitableGetDashboardsResult(
        dashboard_id=pulumi.get(__ret__, 'dashboard_id'),
        dashboards=pulumi.get(__ret__, 'dashboards'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        is_favorite=pulumi.get(__ret__, 'is_favorite'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'))
def get_dashboards_output(dashboard_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          is_favorite: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDashboardsResult]:
    """
    Use this data source to get the list of CES dashboards.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cse.get_dashboards()
    ```


    :param _builtins.str dashboard_id: Specifies the dashboard ID.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.bool is_favorite: Specifies whether a dashboard in an enterprise project is added to favorites.
           The value can be **true** (added to favorites) or **false** (not added to favorites).
           If this parameter is specified, **enterprise_project_id** is mandatory.
    :param _builtins.str name: Specifies the dashboard name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['dashboardId'] = dashboard_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['isFavorite'] = is_favorite
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getDashboards:getDashboards', __args__, opts=opts, typ=GetDashboardsResult)
    return __ret__.apply(lambda __response__: GetDashboardsResult(
        dashboard_id=pulumi.get(__response__, 'dashboard_id'),
        dashboards=pulumi.get(__response__, 'dashboards'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        is_favorite=pulumi.get(__response__, 'is_favorite'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region')))
