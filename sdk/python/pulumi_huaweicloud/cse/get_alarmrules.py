# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlarmrulesResult',
    'AwaitableGetAlarmrulesResult',
    'get_alarmrules',
    'get_alarmrules_output',
]

@pulumi.output_type
class GetAlarmrulesResult:
    """
    A collection of values returned by getAlarmrules.
    """
    def __init__(__self__, alarm_id=None, alarms=None, id=None, name=None, namespace=None, region=None, resource_id=None):
        if alarm_id and not isinstance(alarm_id, str):
            raise TypeError("Expected argument 'alarm_id' to be a str")
        pulumi.set(__self__, "alarm_id", alarm_id)
        if alarms and not isinstance(alarms, list):
            raise TypeError("Expected argument 'alarms' to be a list")
        pulumi.set(__self__, "alarms", alarms)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> Optional[_builtins.str]:
        """
        The alarm rule ID.
        """
        return pulumi.get(self, "alarm_id")

    @_builtins.property
    @pulumi.getter
    def alarms(self) -> Sequence['outputs.GetAlarmrulesAlarmResult']:
        """
        The alarm rule list.
        """
        return pulumi.get(self, "alarms")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the metric dimension.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        The namespace of a service.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_id")


class AwaitableGetAlarmrulesResult(GetAlarmrulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmrulesResult(
            alarm_id=self.alarm_id,
            alarms=self.alarms,
            id=self.id,
            name=self.name,
            namespace=self.namespace,
            region=self.region,
            resource_id=self.resource_id)


def get_alarmrules(alarm_id: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   namespace: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   resource_id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmrulesResult:
    """
    Use this data source to get the list of CES alarm rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cse.get_alarmrules()
    ```


    :param _builtins.str alarm_id: Specifies the alarm rule ID.
    :param _builtins.str name: Specifies the name of an alarm rule.
    :param _builtins.str namespace: Specifies the namespace of a service.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the alarm resource ID.
    """
    __args__ = dict()
    __args__['alarmId'] = alarm_id
    __args__['name'] = name
    __args__['namespace'] = namespace
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getAlarmrules:getAlarmrules', __args__, opts=opts, typ=GetAlarmrulesResult).value

    return AwaitableGetAlarmrulesResult(
        alarm_id=pulumi.get(__ret__, 'alarm_id'),
        alarms=pulumi.get(__ret__, 'alarms'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        region=pulumi.get(__ret__, 'region'),
        resource_id=pulumi.get(__ret__, 'resource_id'))
def get_alarmrules_output(alarm_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          namespace: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAlarmrulesResult]:
    """
    Use this data source to get the list of CES alarm rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cse.get_alarmrules()
    ```


    :param _builtins.str alarm_id: Specifies the alarm rule ID.
    :param _builtins.str name: Specifies the name of an alarm rule.
    :param _builtins.str namespace: Specifies the namespace of a service.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the alarm resource ID.
    """
    __args__ = dict()
    __args__['alarmId'] = alarm_id
    __args__['name'] = name
    __args__['namespace'] = namespace
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getAlarmrules:getAlarmrules', __args__, opts=opts, typ=GetAlarmrulesResult)
    return __ret__.apply(lambda __response__: GetAlarmrulesResult(
        alarm_id=pulumi.get(__response__, 'alarm_id'),
        alarms=pulumi.get(__response__, 'alarms'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        namespace=pulumi.get(__response__, 'namespace'),
        region=pulumi.get(__response__, 'region'),
        resource_id=pulumi.get(__response__, 'resource_id')))
