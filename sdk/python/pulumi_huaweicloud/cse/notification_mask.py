# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NotificationMaskArgs', 'NotificationMask']

@pulumi.input_type
class NotificationMaskArgs:
    def __init__(__self__, *,
                 mask_type: pulumi.Input[_builtins.str],
                 relation_type: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 relation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 relation_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationMaskResourceArgs']]]] = None,
                 start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a NotificationMask resource.
        :param pulumi.Input[_builtins.str] mask_type: Specifies the alarm notification masking type.
        :param pulumi.Input[_builtins.str] relation_type: Specifies the type of a resource that is associated with an alarm notification
               masking rule.
               The valid values are as follows:
               + **ALARM_RULE**: alarm rules;
               + **RESOURCE**: resources;
               + **RESOURCE_POLICY_NOTIFICATION**: alarm policies for the resource;
        :param pulumi.Input[_builtins.str] end_date: Specifies the masking end date, in **yyyy-MM-dd** format.
        :param pulumi.Input[_builtins.str] end_time: Specifies the masking end time, in **HH:mm:ss** format.
        :param pulumi.Input[_builtins.str] mask_name: Specifies the masking rule name.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] relation_id: Specifies the alarm rule ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] relation_ids: Specifies the alarm policy IDs.
        :param pulumi.Input[Sequence[pulumi.Input['NotificationMaskResourceArgs']]] resources: Specifies the resource for which alarm notifications will be masked.
               The resources structure is documented below.
               
               <a name="Resources"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] start_date: Specifies the masking start date, in **yyyy-MM-dd** format.
        :param pulumi.Input[_builtins.str] start_time: Specifies the masking start time, in **HH:mm:ss** format.
        """
        pulumi.set(__self__, "mask_type", mask_type)
        pulumi.set(__self__, "relation_type", relation_type)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if mask_name is not None:
            pulumi.set(__self__, "mask_name", mask_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if relation_id is not None:
            pulumi.set(__self__, "relation_id", relation_id)
        if relation_ids is not None:
            pulumi.set(__self__, "relation_ids", relation_ids)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="maskType")
    def mask_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm notification masking type.
        """
        return pulumi.get(self, "mask_type")

    @mask_type.setter
    def mask_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mask_type", value)

    @_builtins.property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of a resource that is associated with an alarm notification
        masking rule.
        The valid values are as follows:
        + **ALARM_RULE**: alarm rules;
        + **RESOURCE**: resources;
        + **RESOURCE_POLICY_NOTIFICATION**: alarm policies for the resource;
        """
        return pulumi.get(self, "relation_type")

    @relation_type.setter
    def relation_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "relation_type", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the masking end date, in **yyyy-MM-dd** format.
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_date", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the masking end time, in **HH:mm:ss** format.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="maskName")
    def mask_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the masking rule name.
        """
        return pulumi.get(self, "mask_name")

    @mask_name.setter
    def mask_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="relationId")
    def relation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm rule ID.
        """
        return pulumi.get(self, "relation_id")

    @relation_id.setter
    def relation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "relation_id", value)

    @_builtins.property
    @pulumi.getter(name="relationIds")
    def relation_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the alarm policy IDs.
        """
        return pulumi.get(self, "relation_ids")

    @relation_ids.setter
    def relation_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "relation_ids", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotificationMaskResourceArgs']]]]:
        """
        Specifies the resource for which alarm notifications will be masked.
        The resources structure is documented below.

        <a name="Resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationMaskResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the masking start date, in **yyyy-MM-dd** format.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_date", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the masking start time, in **HH:mm:ss** format.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class _NotificationMaskState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_status: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_type: Optional[pulumi.Input[_builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationMaskPolicyArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 relation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 relation_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 relation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationMaskResourceArgs']]]] = None,
                 start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering NotificationMask resources.
        :param pulumi.Input[_builtins.str] end_date: Specifies the masking end date, in **yyyy-MM-dd** format.
        :param pulumi.Input[_builtins.str] end_time: Specifies the masking end time, in **HH:mm:ss** format.
        :param pulumi.Input[_builtins.str] mask_name: Specifies the masking rule name.
        :param pulumi.Input[_builtins.str] mask_status: Specifies the alarm notification masking status.
        :param pulumi.Input[_builtins.str] mask_type: Specifies the alarm notification masking type.
        :param pulumi.Input[Sequence[pulumi.Input['NotificationMaskPolicyArgs']]] policies: The alarm policy list.
               The policies structure is documented below.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] relation_id: Specifies the alarm rule ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] relation_ids: Specifies the alarm policy IDs.
        :param pulumi.Input[_builtins.str] relation_type: Specifies the type of a resource that is associated with an alarm notification
               masking rule.
               The valid values are as follows:
               + **ALARM_RULE**: alarm rules;
               + **RESOURCE**: resources;
               + **RESOURCE_POLICY_NOTIFICATION**: alarm policies for the resource;
        :param pulumi.Input[Sequence[pulumi.Input['NotificationMaskResourceArgs']]] resources: Specifies the resource for which alarm notifications will be masked.
               The resources structure is documented below.
               
               <a name="Resources"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] start_date: Specifies the masking start date, in **yyyy-MM-dd** format.
        :param pulumi.Input[_builtins.str] start_time: Specifies the masking start time, in **HH:mm:ss** format.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if mask_name is not None:
            pulumi.set(__self__, "mask_name", mask_name)
        if mask_status is not None:
            pulumi.set(__self__, "mask_status", mask_status)
        if mask_type is not None:
            pulumi.set(__self__, "mask_type", mask_type)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if relation_id is not None:
            pulumi.set(__self__, "relation_id", relation_id)
        if relation_ids is not None:
            pulumi.set(__self__, "relation_ids", relation_ids)
        if relation_type is not None:
            pulumi.set(__self__, "relation_type", relation_type)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the masking end date, in **yyyy-MM-dd** format.
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_date", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the masking end time, in **HH:mm:ss** format.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="maskName")
    def mask_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the masking rule name.
        """
        return pulumi.get(self, "mask_name")

    @mask_name.setter
    def mask_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask_name", value)

    @_builtins.property
    @pulumi.getter(name="maskStatus")
    def mask_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm notification masking status.
        """
        return pulumi.get(self, "mask_status")

    @mask_status.setter
    def mask_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask_status", value)

    @_builtins.property
    @pulumi.getter(name="maskType")
    def mask_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm notification masking type.
        """
        return pulumi.get(self, "mask_type")

    @mask_type.setter
    def mask_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask_type", value)

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotificationMaskPolicyArgs']]]]:
        """
        The alarm policy list.
        The policies structure is documented below.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationMaskPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="relationId")
    def relation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm rule ID.
        """
        return pulumi.get(self, "relation_id")

    @relation_id.setter
    def relation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "relation_id", value)

    @_builtins.property
    @pulumi.getter(name="relationIds")
    def relation_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the alarm policy IDs.
        """
        return pulumi.get(self, "relation_ids")

    @relation_ids.setter
    def relation_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "relation_ids", value)

    @_builtins.property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of a resource that is associated with an alarm notification
        masking rule.
        The valid values are as follows:
        + **ALARM_RULE**: alarm rules;
        + **RESOURCE**: resources;
        + **RESOURCE_POLICY_NOTIFICATION**: alarm policies for the resource;
        """
        return pulumi.get(self, "relation_type")

    @relation_type.setter
    def relation_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "relation_type", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotificationMaskResourceArgs']]]]:
        """
        Specifies the resource for which alarm notifications will be masked.
        The resources structure is documented below.

        <a name="Resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationMaskResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the masking start date, in **yyyy-MM-dd** format.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_date", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the masking start time, in **HH:mm:ss** format.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)


@pulumi.type_token("huaweicloud:Cse/notificationMask:NotificationMask")
class NotificationMask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 relation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 relation_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 relation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NotificationMaskResourceArgs', 'NotificationMaskResourceArgsDict']]]]] = None,
                 start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CES notification mask resource within HuaweiCloud.

        ## Example Usage

        ### Masked By Resource

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        mask_name = config.require_object("maskName")
        test = huaweicloud.cse.NotificationMask("test",
            relation_type="RESOURCE",
            mask_name=mask_name,
            resources=[
                {
                    "namespace": "SYS.OBS",
                    "dimensions": [{
                        "name": "bucket_name",
                        "value": "bucket-one",
                    }],
                },
                {
                    "namespace": "SYS.OBS",
                    "dimensions": [{
                        "name": "bucket_name",
                        "value": "bucket-two",
                    }],
                },
            ],
            mask_type="START_END_TIME",
            start_date="2025-03-27",
            start_time="09:12:09",
            end_date="2025-03-27",
            end_time="20:12:09")
        ```

        ### Masked By Policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        mask_name = config.require_object("maskName")
        alarm_policy_id = config.require_object("alarmPolicyId")
        test = huaweicloud.cse.NotificationMask("test",
            relation_type="RESOURCE_POLICY_NOTIFICATION",
            mask_name=mask_name,
            relation_ids=[alarm_policy_id],
            resources=[{
                "namespace": "SYS.OBS",
                "dimensions": [{
                    "name": "bucket_name",
                    "value": "*",
                }],
            }],
            mask_type="FOREVER_TIME")
        ```

        ### Masked By Rule

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alarm_rule = config.require_object("alarmRule")
        test = huaweicloud.cse.NotificationMask("test",
            relation_type="ALARM_RULE",
            relation_id=alarm_rule,
            mask_type="START_END_TIME",
            start_date="2025-03-27",
            start_time="09:12:09",
            end_date="2025-03-27",
            end_time="20:12:10")
        ```

        ## Import

        When `relation_type` value is `RESOURCE` or `RESOURCE_POLICY_NOTIFICATION`, the notification mask can be imported

        using `relation_type` and `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/notificationMask:NotificationMask test <relation_type>/<id>
        ```

        When `relation_type` value is `ALARM_RULE`, the notification mask can be imported using `relation_type` and

        `relation_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/notificationMask:NotificationMask test <relation_type>/<relation_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] end_date: Specifies the masking end date, in **yyyy-MM-dd** format.
        :param pulumi.Input[_builtins.str] end_time: Specifies the masking end time, in **HH:mm:ss** format.
        :param pulumi.Input[_builtins.str] mask_name: Specifies the masking rule name.
        :param pulumi.Input[_builtins.str] mask_type: Specifies the alarm notification masking type.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] relation_id: Specifies the alarm rule ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] relation_ids: Specifies the alarm policy IDs.
        :param pulumi.Input[_builtins.str] relation_type: Specifies the type of a resource that is associated with an alarm notification
               masking rule.
               The valid values are as follows:
               + **ALARM_RULE**: alarm rules;
               + **RESOURCE**: resources;
               + **RESOURCE_POLICY_NOTIFICATION**: alarm policies for the resource;
        :param pulumi.Input[Sequence[pulumi.Input[Union['NotificationMaskResourceArgs', 'NotificationMaskResourceArgsDict']]]] resources: Specifies the resource for which alarm notifications will be masked.
               The resources structure is documented below.
               
               <a name="Resources"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] start_date: Specifies the masking start date, in **yyyy-MM-dd** format.
        :param pulumi.Input[_builtins.str] start_time: Specifies the masking start time, in **HH:mm:ss** format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotificationMaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CES notification mask resource within HuaweiCloud.

        ## Example Usage

        ### Masked By Resource

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        mask_name = config.require_object("maskName")
        test = huaweicloud.cse.NotificationMask("test",
            relation_type="RESOURCE",
            mask_name=mask_name,
            resources=[
                {
                    "namespace": "SYS.OBS",
                    "dimensions": [{
                        "name": "bucket_name",
                        "value": "bucket-one",
                    }],
                },
                {
                    "namespace": "SYS.OBS",
                    "dimensions": [{
                        "name": "bucket_name",
                        "value": "bucket-two",
                    }],
                },
            ],
            mask_type="START_END_TIME",
            start_date="2025-03-27",
            start_time="09:12:09",
            end_date="2025-03-27",
            end_time="20:12:09")
        ```

        ### Masked By Policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        mask_name = config.require_object("maskName")
        alarm_policy_id = config.require_object("alarmPolicyId")
        test = huaweicloud.cse.NotificationMask("test",
            relation_type="RESOURCE_POLICY_NOTIFICATION",
            mask_name=mask_name,
            relation_ids=[alarm_policy_id],
            resources=[{
                "namespace": "SYS.OBS",
                "dimensions": [{
                    "name": "bucket_name",
                    "value": "*",
                }],
            }],
            mask_type="FOREVER_TIME")
        ```

        ### Masked By Rule

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alarm_rule = config.require_object("alarmRule")
        test = huaweicloud.cse.NotificationMask("test",
            relation_type="ALARM_RULE",
            relation_id=alarm_rule,
            mask_type="START_END_TIME",
            start_date="2025-03-27",
            start_time="09:12:09",
            end_date="2025-03-27",
            end_time="20:12:10")
        ```

        ## Import

        When `relation_type` value is `RESOURCE` or `RESOURCE_POLICY_NOTIFICATION`, the notification mask can be imported

        using `relation_type` and `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/notificationMask:NotificationMask test <relation_type>/<id>
        ```

        When `relation_type` value is `ALARM_RULE`, the notification mask can be imported using `relation_type` and

        `relation_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/notificationMask:NotificationMask test <relation_type>/<relation_id>
        ```

        :param str resource_name: The name of the resource.
        :param NotificationMaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotificationMaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 relation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 relation_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 relation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NotificationMaskResourceArgs', 'NotificationMaskResourceArgsDict']]]]] = None,
                 start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotificationMaskArgs.__new__(NotificationMaskArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["end_date"] = end_date
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["mask_name"] = mask_name
            if mask_type is None and not opts.urn:
                raise TypeError("Missing required property 'mask_type'")
            __props__.__dict__["mask_type"] = mask_type
            __props__.__dict__["region"] = region
            __props__.__dict__["relation_id"] = relation_id
            __props__.__dict__["relation_ids"] = relation_ids
            if relation_type is None and not opts.urn:
                raise TypeError("Missing required property 'relation_type'")
            __props__.__dict__["relation_type"] = relation_type
            __props__.__dict__["resources"] = resources
            __props__.__dict__["start_date"] = start_date
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["mask_status"] = None
            __props__.__dict__["policies"] = None
        super(NotificationMask, __self__).__init__(
            'huaweicloud:Cse/notificationMask:NotificationMask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            end_date: Optional[pulumi.Input[_builtins.str]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            mask_name: Optional[pulumi.Input[_builtins.str]] = None,
            mask_status: Optional[pulumi.Input[_builtins.str]] = None,
            mask_type: Optional[pulumi.Input[_builtins.str]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NotificationMaskPolicyArgs', 'NotificationMaskPolicyArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            relation_id: Optional[pulumi.Input[_builtins.str]] = None,
            relation_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            relation_type: Optional[pulumi.Input[_builtins.str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NotificationMaskResourceArgs', 'NotificationMaskResourceArgsDict']]]]] = None,
            start_date: Optional[pulumi.Input[_builtins.str]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'NotificationMask':
        """
        Get an existing NotificationMask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] end_date: Specifies the masking end date, in **yyyy-MM-dd** format.
        :param pulumi.Input[_builtins.str] end_time: Specifies the masking end time, in **HH:mm:ss** format.
        :param pulumi.Input[_builtins.str] mask_name: Specifies the masking rule name.
        :param pulumi.Input[_builtins.str] mask_status: Specifies the alarm notification masking status.
        :param pulumi.Input[_builtins.str] mask_type: Specifies the alarm notification masking type.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NotificationMaskPolicyArgs', 'NotificationMaskPolicyArgsDict']]]] policies: The alarm policy list.
               The policies structure is documented below.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] relation_id: Specifies the alarm rule ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] relation_ids: Specifies the alarm policy IDs.
        :param pulumi.Input[_builtins.str] relation_type: Specifies the type of a resource that is associated with an alarm notification
               masking rule.
               The valid values are as follows:
               + **ALARM_RULE**: alarm rules;
               + **RESOURCE**: resources;
               + **RESOURCE_POLICY_NOTIFICATION**: alarm policies for the resource;
        :param pulumi.Input[Sequence[pulumi.Input[Union['NotificationMaskResourceArgs', 'NotificationMaskResourceArgsDict']]]] resources: Specifies the resource for which alarm notifications will be masked.
               The resources structure is documented below.
               
               <a name="Resources"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] start_date: Specifies the masking start date, in **yyyy-MM-dd** format.
        :param pulumi.Input[_builtins.str] start_time: Specifies the masking start time, in **HH:mm:ss** format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotificationMaskState.__new__(_NotificationMaskState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["end_date"] = end_date
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["mask_name"] = mask_name
        __props__.__dict__["mask_status"] = mask_status
        __props__.__dict__["mask_type"] = mask_type
        __props__.__dict__["policies"] = policies
        __props__.__dict__["region"] = region
        __props__.__dict__["relation_id"] = relation_id
        __props__.__dict__["relation_ids"] = relation_ids
        __props__.__dict__["relation_type"] = relation_type
        __props__.__dict__["resources"] = resources
        __props__.__dict__["start_date"] = start_date
        __props__.__dict__["start_time"] = start_time
        return NotificationMask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the masking end date, in **yyyy-MM-dd** format.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the masking end time, in **HH:mm:ss** format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="maskName")
    def mask_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the masking rule name.
        """
        return pulumi.get(self, "mask_name")

    @_builtins.property
    @pulumi.getter(name="maskStatus")
    def mask_status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm notification masking status.
        """
        return pulumi.get(self, "mask_status")

    @_builtins.property
    @pulumi.getter(name="maskType")
    def mask_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm notification masking type.
        """
        return pulumi.get(self, "mask_type")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Sequence['outputs.NotificationMaskPolicy']]:
        """
        The alarm policy list.
        The policies structure is documented below.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="relationId")
    def relation_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm rule ID.
        """
        return pulumi.get(self, "relation_id")

    @_builtins.property
    @pulumi.getter(name="relationIds")
    def relation_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the alarm policy IDs.
        """
        return pulumi.get(self, "relation_ids")

    @_builtins.property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of a resource that is associated with an alarm notification
        masking rule.
        The valid values are as follows:
        + **ALARM_RULE**: alarm rules;
        + **RESOURCE**: resources;
        + **RESOURCE_POLICY_NOTIFICATION**: alarm policies for the resource;
        """
        return pulumi.get(self, "relation_type")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationMaskResource']]]:
        """
        Specifies the resource for which alarm notifications will be masked.
        The resources structure is documented below.

        <a name="Resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the masking start date, in **yyyy-MM-dd** format.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the masking start time, in **HH:mm:ss** format.
        """
        return pulumi.get(self, "start_time")

