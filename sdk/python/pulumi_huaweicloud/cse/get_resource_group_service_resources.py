# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceGroupServiceResourcesResult',
    'AwaitableGetResourceGroupServiceResourcesResult',
    'get_resource_group_service_resources',
    'get_resource_group_service_resources_output',
]

@pulumi.output_type
class GetResourceGroupServiceResourcesResult:
    """
    A collection of values returned by getResourceGroupServiceResources.
    """
    def __init__(__self__, dim_name=None, dim_value=None, group_id=None, id=None, region=None, resources=None, service=None, status=None):
        if dim_name and not isinstance(dim_name, str):
            raise TypeError("Expected argument 'dim_name' to be a str")
        pulumi.set(__self__, "dim_name", dim_name)
        if dim_value and not isinstance(dim_value, str):
            raise TypeError("Expected argument 'dim_value' to be a str")
        pulumi.set(__self__, "dim_value", dim_value)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if service and not isinstance(service, str):
            raise TypeError("Expected argument 'service' to be a str")
        pulumi.set(__self__, "service", service)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="dimName")
    def dim_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dim_name")

    @_builtins.property
    @pulumi.getter(name="dimValue")
    def dim_value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dim_value")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetResourceGroupServiceResourcesResourceResult']:
        """
        The resources in a resource group.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The health status.
        """
        return pulumi.get(self, "status")


class AwaitableGetResourceGroupServiceResourcesResult(GetResourceGroupServiceResourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceGroupServiceResourcesResult(
            dim_name=self.dim_name,
            dim_value=self.dim_value,
            group_id=self.group_id,
            id=self.id,
            region=self.region,
            resources=self.resources,
            service=self.service,
            status=self.status)


def get_resource_group_service_resources(dim_name: Optional[_builtins.str] = None,
                                         dim_value: Optional[_builtins.str] = None,
                                         group_id: Optional[_builtins.str] = None,
                                         region: Optional[_builtins.str] = None,
                                         service: Optional[_builtins.str] = None,
                                         status: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceGroupServiceResourcesResult:
    """
    Use this data source to get the list of resources under a specific service category within a CES resource group.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    group_id = config.require_object("groupId")
    service = config.require_object("service")
    test = huaweicloud.Cse.get_resource_group_service_resources(group_id=group_id,
        service=service)
    ```


    :param _builtins.str dim_name: Specifies the dimension name.
    :param _builtins.str dim_value: Specifies the dimension value. Fuzzy match is not supported.
           You can specify only one dimension for resources with multiple dimensions.
    :param _builtins.str group_id: Specifies the resource group ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str service: Specifies the service type.
    :param _builtins.str status: Specifies the health status.
           The valid values are as follows:
           + **health**: resources for which alarm rules have been configured and no alarm was triggered.
           + **unhealthy**: resources for which alarm rules have been configured and alarms were triggered.
           + **no_alarm_rule**: resources for which alarm rules are not configured.
    """
    __args__ = dict()
    __args__['dimName'] = dim_name
    __args__['dimValue'] = dim_value
    __args__['groupId'] = group_id
    __args__['region'] = region
    __args__['service'] = service
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getResourceGroupServiceResources:getResourceGroupServiceResources', __args__, opts=opts, typ=GetResourceGroupServiceResourcesResult).value

    return AwaitableGetResourceGroupServiceResourcesResult(
        dim_name=pulumi.get(__ret__, 'dim_name'),
        dim_value=pulumi.get(__ret__, 'dim_value'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        resources=pulumi.get(__ret__, 'resources'),
        service=pulumi.get(__ret__, 'service'),
        status=pulumi.get(__ret__, 'status'))
def get_resource_group_service_resources_output(dim_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                dim_value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                group_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                service: Optional[pulumi.Input[_builtins.str]] = None,
                                                status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceGroupServiceResourcesResult]:
    """
    Use this data source to get the list of resources under a specific service category within a CES resource group.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    group_id = config.require_object("groupId")
    service = config.require_object("service")
    test = huaweicloud.Cse.get_resource_group_service_resources(group_id=group_id,
        service=service)
    ```


    :param _builtins.str dim_name: Specifies the dimension name.
    :param _builtins.str dim_value: Specifies the dimension value. Fuzzy match is not supported.
           You can specify only one dimension for resources with multiple dimensions.
    :param _builtins.str group_id: Specifies the resource group ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str service: Specifies the service type.
    :param _builtins.str status: Specifies the health status.
           The valid values are as follows:
           + **health**: resources for which alarm rules have been configured and no alarm was triggered.
           + **unhealthy**: resources for which alarm rules have been configured and alarms were triggered.
           + **no_alarm_rule**: resources for which alarm rules are not configured.
    """
    __args__ = dict()
    __args__['dimName'] = dim_name
    __args__['dimValue'] = dim_value
    __args__['groupId'] = group_id
    __args__['region'] = region
    __args__['service'] = service
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getResourceGroupServiceResources:getResourceGroupServiceResources', __args__, opts=opts, typ=GetResourceGroupServiceResourcesResult)
    return __ret__.apply(lambda __response__: GetResourceGroupServiceResourcesResult(
        dim_name=pulumi.get(__response__, 'dim_name'),
        dim_value=pulumi.get(__response__, 'dim_value'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        resources=pulumi.get(__response__, 'resources'),
        service=pulumi.get(__response__, 'service'),
        status=pulumi.get(__response__, 'status')))
