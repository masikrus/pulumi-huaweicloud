# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MicroserviceEngineConfigurationArgs', 'MicroserviceEngineConfiguration']

@pulumi.input_type
class MicroserviceEngineConfigurationArgs:
    def __init__(__self__, *,
                 auth_address: pulumi.Input[_builtins.str],
                 connect_address: pulumi.Input[_builtins.str],
                 key: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 value_type: pulumi.Input[_builtins.str],
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a MicroserviceEngineConfiguration resource.
        :param pulumi.Input[_builtins.str] auth_address: Specifies the address that used to request the access token.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] connect_address: Specifies the address that used to access engine and manages
               configuration.
               Changing this will create a new resource.
               
               > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        :param pulumi.Input[_builtins.str] key: Specifies the configuration key (item name).  
               The valid length is limited from `1` to `2,048` characters, only letters, digits, hyphens (-), underscores (_),
               colons (:) and periods (.) are allowed.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the configuration value.
        :param pulumi.Input[_builtins.str] value_type: Specifies the type of the configuration value.
               The valid values are as follows:
               + **ini**
               + **json**
               + **text**
               + **yaml**
               + **properties**
               + **xml**
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the account password for **RBAC** login.
               The password format must meet the following conditions:
               + Must be `8` to `32` characters long.
               + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
               (-~!@#%^*_=+?$&()|<>{}[]).
               + Cannot be the account name or account name spelled backwards.
               + The password can only start with a letter.
               
               Changing this will create a new resource.
               
               > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the account name for **RBAC** login.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the configuration status.  
               The valid values are as follows:
               + **enabled**
               + **disabled**
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the configuration that used to
               filter resource.
               Changing this will create a new resource.
        """
        pulumi.set(__self__, "auth_address", auth_address)
        pulumi.set(__self__, "connect_address", connect_address)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)
        if admin_pass is not None:
            pulumi.set(__self__, "admin_pass", admin_pass)
        if admin_user is not None:
            pulumi.set(__self__, "admin_user", admin_user)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="authAddress")
    def auth_address(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the address that used to request the access token.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "auth_address")

    @auth_address.setter
    def auth_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "auth_address", value)

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the address that used to access engine and manages
        configuration.
        Changing this will create a new resource.

        > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        """
        return pulumi.get(self, "connect_address")

    @connect_address.setter
    def connect_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connect_address", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the configuration key (item name).  
        The valid length is limited from `1` to `2,048` characters, only letters, digits, hyphens (-), underscores (_),
        colons (:) and periods (.) are allowed.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the configuration value.
        The valid values are as follows:
        + **ini**
        + **json**
        + **text**
        + **yaml**
        + **properties**
        + **xml**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value_type", value)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the account password for **RBAC** login.
        The password format must meet the following conditions:
        + Must be `8` to `32` characters long.
        + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
        (-~!@#%^*_=+?$&()|<>{}[]).
        + Cannot be the account name or account name spelled backwards.
        + The password can only start with a letter.

        Changing this will create a new resource.

        > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        """
        return pulumi.get(self, "admin_pass")

    @admin_pass.setter
    def admin_pass(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_pass", value)

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the account name for **RBAC** login.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "admin_user")

    @admin_user.setter
    def admin_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_user", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration status.  
        The valid values are as follows:
        + **enabled**
        + **disabled**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the configuration that used to
        filter resource.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _MicroserviceEngineConfigurationState:
    def __init__(__self__, *,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_address: Optional[pulumi.Input[_builtins.str]] = None,
                 connect_address: Optional[pulumi.Input[_builtins.str]] = None,
                 create_revision: Optional[pulumi.Input[_builtins.int]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 update_revision: Optional[pulumi.Input[_builtins.int]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 value_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MicroserviceEngineConfiguration resources.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the account password for **RBAC** login.
               The password format must meet the following conditions:
               + Must be `8` to `32` characters long.
               + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
               (-~!@#%^*_=+?$&()|<>{}[]).
               + Cannot be the account name or account name spelled backwards.
               + The password can only start with a letter.
               
               Changing this will create a new resource.
               
               > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the account name for **RBAC** login.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] auth_address: Specifies the address that used to request the access token.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] connect_address: Specifies the address that used to access engine and manages
               configuration.
               Changing this will create a new resource.
               
               > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        :param pulumi.Input[_builtins.int] create_revision: The create version of the configuration.
        :param pulumi.Input[_builtins.str] created_at: The The creation time of the configuration, in RFC3339 format.
        :param pulumi.Input[_builtins.str] key: Specifies the configuration key (item name).  
               The valid length is limited from `1` to `2,048` characters, only letters, digits, hyphens (-), underscores (_),
               colons (:) and periods (.) are allowed.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the configuration status.  
               The valid values are as follows:
               + **enabled**
               + **disabled**
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the configuration that used to
               filter resource.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] update_revision: The update version of the configuration.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the configuration, in RFC3339 format.
        :param pulumi.Input[_builtins.str] value: Specifies the configuration value.
        :param pulumi.Input[_builtins.str] value_type: Specifies the type of the configuration value.
               The valid values are as follows:
               + **ini**
               + **json**
               + **text**
               + **yaml**
               + **properties**
               + **xml**
               
               Changing this will create a new resource.
        """
        if admin_pass is not None:
            pulumi.set(__self__, "admin_pass", admin_pass)
        if admin_user is not None:
            pulumi.set(__self__, "admin_user", admin_user)
        if auth_address is not None:
            pulumi.set(__self__, "auth_address", auth_address)
        if connect_address is not None:
            pulumi.set(__self__, "connect_address", connect_address)
        if create_revision is not None:
            pulumi.set(__self__, "create_revision", create_revision)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_revision is not None:
            pulumi.set(__self__, "update_revision", update_revision)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the account password for **RBAC** login.
        The password format must meet the following conditions:
        + Must be `8` to `32` characters long.
        + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
        (-~!@#%^*_=+?$&()|<>{}[]).
        + Cannot be the account name or account name spelled backwards.
        + The password can only start with a letter.

        Changing this will create a new resource.

        > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        """
        return pulumi.get(self, "admin_pass")

    @admin_pass.setter
    def admin_pass(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_pass", value)

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the account name for **RBAC** login.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "admin_user")

    @admin_user.setter
    def admin_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_user", value)

    @_builtins.property
    @pulumi.getter(name="authAddress")
    def auth_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the address that used to request the access token.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "auth_address")

    @auth_address.setter
    def auth_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_address", value)

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the address that used to access engine and manages
        configuration.
        Changing this will create a new resource.

        > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        """
        return pulumi.get(self, "connect_address")

    @connect_address.setter
    def connect_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connect_address", value)

    @_builtins.property
    @pulumi.getter(name="createRevision")
    def create_revision(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The create version of the configuration.
        """
        return pulumi.get(self, "create_revision")

    @create_revision.setter
    def create_revision(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "create_revision", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The The creation time of the configuration, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration key (item name).  
        The valid length is limited from `1` to `2,048` characters, only letters, digits, hyphens (-), underscores (_),
        colons (:) and periods (.) are allowed.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration status.  
        The valid values are as follows:
        + **enabled**
        + **disabled**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the configuration that used to
        filter resource.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updateRevision")
    def update_revision(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The update version of the configuration.
        """
        return pulumi.get(self, "update_revision")

    @update_revision.setter
    def update_revision(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "update_revision", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the configuration, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the configuration value.
        The valid values are as follows:
        + **ini**
        + **json**
        + **text**
        + **yaml**
        + **properties**
        + **xml**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value_type", value)


@pulumi.type_token("huaweicloud:Cse/microserviceEngineConfiguration:MicroserviceEngineConfiguration")
class MicroserviceEngineConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_address: Optional[pulumi.Input[_builtins.str]] = None,
                 connect_address: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 value_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a key/value pair under a dedicated microservice engine (2.0+) resource within HuaweiCloud.

        > Before creating a configuration, make sure the engine has enabled the rules shown in the appendix
           table.

        ## Example Usage

        ### Create an engine configuration and the engine RBAC authentication is disabled

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        microservice_engine_id = config.require_object("microserviceEngineId")
        # Enable the EIP access
        test = huaweicloud.Cse.get_microservice_engines()
        fileter_engines = [o for o in test.engines if o.id == microservice_engine_id]
        test_microservice_engine_configuration = huaweicloud.cse.MicroserviceEngineConfiguration("test",
            auth_address=fileter_engines[0].service_registry_addresses[0].public,
            connect_address=fileter_engines[0].config_center_addresses[0].public,
            key="demo",
            value_type="json",
            value=json.dumps({
                "foo": "bar",
            }),
            status="enabled",
            tags={
                "owner": "terraform",
            })
        ```

        ### Create an engine configuration and the engine RBAC authentication is enabled

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        microservice_engine_id = config.require_object("microserviceEngineId")
        microservice_engine_admin_password = config.require_object("microserviceEngineAdminPassword")
        test = huaweicloud.Cse.get_microservice_engines()
        fileter_engines = [o for o in test.engines if o.id == microservice_engine_id]
        test_microservice_engine_configuration = huaweicloud.cse.MicroserviceEngineConfiguration("test",
            auth_address=fileter_engines[0].service_registry_addresses[0].public,
            connect_address=fileter_engines[0].config_center_addresses[0].public,
            admin_user="root",
            admin_pass=microservice_engine_admin_password,
            key="demo",
            value_type="json",
            value=json.dumps({
                "foo": "bar",
            }),
            status="enabled",
            tags={
                "owner": "terraform",
            })
        ```

        ## Appendix

        <a name="configuration_default_engine_access_rules"></a>
        Security group rules required to access the engine:
        (Remote is not the minimum range and can be adjusted according to business needs)

        | Direction | Priority | Action | Protocol | Ports         | Ethertype | Remote                |
        | --------- | -------- | ------ | -------- | ------------- | --------- | --------------------- |
        | Ingress   | 1        | Allow  | ICMP     | All           | Ipv6      | ::/0                  |
        | Ingress   | 1        | Allow  | TCP      | 30100-30130   | Ipv6      | ::/0                  |
        | Ingress   | 1        | Allow  | All      | All           | Ipv6      | cse-engine-default-sg |
        | Ingress   | 1        | Allow  | ICMP     | All           | Ipv4      | 0.0.0.0/0             |
        | Ingress   | 1        | Allow  | TCP      | 30100-30130   | Ipv4      | 0.0.0.0/0             |
        | Ingress   | 1        | Allow  | All      | All           | Ipv4      | cse-engine-default-sg |
        | Egress    | 100      | Allow  | All      | All           | Ipv6      | ::/0                  |
        | Egress    | 100      | Allow  | All      | All           | Ipv4      | 0.0.0.0/0             |

        ## Import

        If the related engine is disable the `RBAC`, configurations (key/value pairs) can be imported using their

        `auth_address`, `connect_address` and `key`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microserviceEngineConfiguration:MicroserviceEngineConfiguration test <auth_address>/<connect_address>/<key>
        ```

        If you enabled the **RBAC** authorization in the microservice engine, it's necessary to provide the account

        name (`admin_user`) and password (`admin_pass`) of the microservice engine.

        All fields separated by the slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microserviceEngineConfiguration:MicroserviceEngineConfiguration test <auth_address>/<connect_address>/<key>/<admin_user>/<admin_pass>
        ```

        The single quotes (') or backslashes (\\\\) can help you solve the problem of special characters reporting errors on bash.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microserviceEngineConfiguration:MicroserviceEngineConfiguration test https://124.70.26.32:30100/https://124.70.26.32:30110/demo/root/Test\\!123
        ```

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microserviceEngineConfiguration:MicroserviceEngineConfiguration test 'https://124.70.26.32:30100/https://124.70.26.32:30110/demo/root/Test!123'
        ```

        Note that the imported state may not be identical to your resource definition, due to security reason.

        The missing attribute is `admin_pass`. It is generally recommended running `pulumi preview` after importing an instance.

        You can then decide if changes should be applied to the resource, or the definition should be updated to align with the

        resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_cse_microservice_engine_configuration" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              admin_pass,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the account password for **RBAC** login.
               The password format must meet the following conditions:
               + Must be `8` to `32` characters long.
               + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
               (-~!@#%^*_=+?$&()|<>{}[]).
               + Cannot be the account name or account name spelled backwards.
               + The password can only start with a letter.
               
               Changing this will create a new resource.
               
               > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the account name for **RBAC** login.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] auth_address: Specifies the address that used to request the access token.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] connect_address: Specifies the address that used to access engine and manages
               configuration.
               Changing this will create a new resource.
               
               > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        :param pulumi.Input[_builtins.str] key: Specifies the configuration key (item name).  
               The valid length is limited from `1` to `2,048` characters, only letters, digits, hyphens (-), underscores (_),
               colons (:) and periods (.) are allowed.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the configuration status.  
               The valid values are as follows:
               + **enabled**
               + **disabled**
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the configuration that used to
               filter resource.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the configuration value.
        :param pulumi.Input[_builtins.str] value_type: Specifies the type of the configuration value.
               The valid values are as follows:
               + **ini**
               + **json**
               + **text**
               + **yaml**
               + **properties**
               + **xml**
               
               Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MicroserviceEngineConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a key/value pair under a dedicated microservice engine (2.0+) resource within HuaweiCloud.

        > Before creating a configuration, make sure the engine has enabled the rules shown in the appendix
           table.

        ## Example Usage

        ### Create an engine configuration and the engine RBAC authentication is disabled

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        microservice_engine_id = config.require_object("microserviceEngineId")
        # Enable the EIP access
        test = huaweicloud.Cse.get_microservice_engines()
        fileter_engines = [o for o in test.engines if o.id == microservice_engine_id]
        test_microservice_engine_configuration = huaweicloud.cse.MicroserviceEngineConfiguration("test",
            auth_address=fileter_engines[0].service_registry_addresses[0].public,
            connect_address=fileter_engines[0].config_center_addresses[0].public,
            key="demo",
            value_type="json",
            value=json.dumps({
                "foo": "bar",
            }),
            status="enabled",
            tags={
                "owner": "terraform",
            })
        ```

        ### Create an engine configuration and the engine RBAC authentication is enabled

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        microservice_engine_id = config.require_object("microserviceEngineId")
        microservice_engine_admin_password = config.require_object("microserviceEngineAdminPassword")
        test = huaweicloud.Cse.get_microservice_engines()
        fileter_engines = [o for o in test.engines if o.id == microservice_engine_id]
        test_microservice_engine_configuration = huaweicloud.cse.MicroserviceEngineConfiguration("test",
            auth_address=fileter_engines[0].service_registry_addresses[0].public,
            connect_address=fileter_engines[0].config_center_addresses[0].public,
            admin_user="root",
            admin_pass=microservice_engine_admin_password,
            key="demo",
            value_type="json",
            value=json.dumps({
                "foo": "bar",
            }),
            status="enabled",
            tags={
                "owner": "terraform",
            })
        ```

        ## Appendix

        <a name="configuration_default_engine_access_rules"></a>
        Security group rules required to access the engine:
        (Remote is not the minimum range and can be adjusted according to business needs)

        | Direction | Priority | Action | Protocol | Ports         | Ethertype | Remote                |
        | --------- | -------- | ------ | -------- | ------------- | --------- | --------------------- |
        | Ingress   | 1        | Allow  | ICMP     | All           | Ipv6      | ::/0                  |
        | Ingress   | 1        | Allow  | TCP      | 30100-30130   | Ipv6      | ::/0                  |
        | Ingress   | 1        | Allow  | All      | All           | Ipv6      | cse-engine-default-sg |
        | Ingress   | 1        | Allow  | ICMP     | All           | Ipv4      | 0.0.0.0/0             |
        | Ingress   | 1        | Allow  | TCP      | 30100-30130   | Ipv4      | 0.0.0.0/0             |
        | Ingress   | 1        | Allow  | All      | All           | Ipv4      | cse-engine-default-sg |
        | Egress    | 100      | Allow  | All      | All           | Ipv6      | ::/0                  |
        | Egress    | 100      | Allow  | All      | All           | Ipv4      | 0.0.0.0/0             |

        ## Import

        If the related engine is disable the `RBAC`, configurations (key/value pairs) can be imported using their

        `auth_address`, `connect_address` and `key`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microserviceEngineConfiguration:MicroserviceEngineConfiguration test <auth_address>/<connect_address>/<key>
        ```

        If you enabled the **RBAC** authorization in the microservice engine, it's necessary to provide the account

        name (`admin_user`) and password (`admin_pass`) of the microservice engine.

        All fields separated by the slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microserviceEngineConfiguration:MicroserviceEngineConfiguration test <auth_address>/<connect_address>/<key>/<admin_user>/<admin_pass>
        ```

        The single quotes (') or backslashes (\\\\) can help you solve the problem of special characters reporting errors on bash.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microserviceEngineConfiguration:MicroserviceEngineConfiguration test https://124.70.26.32:30100/https://124.70.26.32:30110/demo/root/Test\\!123
        ```

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microserviceEngineConfiguration:MicroserviceEngineConfiguration test 'https://124.70.26.32:30100/https://124.70.26.32:30110/demo/root/Test!123'
        ```

        Note that the imported state may not be identical to your resource definition, due to security reason.

        The missing attribute is `admin_pass`. It is generally recommended running `pulumi preview` after importing an instance.

        You can then decide if changes should be applied to the resource, or the definition should be updated to align with the

        resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_cse_microservice_engine_configuration" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              admin_pass,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param MicroserviceEngineConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MicroserviceEngineConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_address: Optional[pulumi.Input[_builtins.str]] = None,
                 connect_address: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 value_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MicroserviceEngineConfigurationArgs.__new__(MicroserviceEngineConfigurationArgs)

            __props__.__dict__["admin_pass"] = None if admin_pass is None else pulumi.Output.secret(admin_pass)
            __props__.__dict__["admin_user"] = admin_user
            if auth_address is None and not opts.urn:
                raise TypeError("Missing required property 'auth_address'")
            __props__.__dict__["auth_address"] = auth_address
            if connect_address is None and not opts.urn:
                raise TypeError("Missing required property 'connect_address'")
            __props__.__dict__["connect_address"] = connect_address
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            if value_type is None and not opts.urn:
                raise TypeError("Missing required property 'value_type'")
            __props__.__dict__["value_type"] = value_type
            __props__.__dict__["create_revision"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["update_revision"] = None
            __props__.__dict__["updated_at"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["adminPass"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(MicroserviceEngineConfiguration, __self__).__init__(
            'huaweicloud:Cse/microserviceEngineConfiguration:MicroserviceEngineConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
            admin_user: Optional[pulumi.Input[_builtins.str]] = None,
            auth_address: Optional[pulumi.Input[_builtins.str]] = None,
            connect_address: Optional[pulumi.Input[_builtins.str]] = None,
            create_revision: Optional[pulumi.Input[_builtins.int]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            key: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            update_revision: Optional[pulumi.Input[_builtins.int]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None,
            value_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'MicroserviceEngineConfiguration':
        """
        Get an existing MicroserviceEngineConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the account password for **RBAC** login.
               The password format must meet the following conditions:
               + Must be `8` to `32` characters long.
               + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
               (-~!@#%^*_=+?$&()|<>{}[]).
               + Cannot be the account name or account name spelled backwards.
               + The password can only start with a letter.
               
               Changing this will create a new resource.
               
               > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the account name for **RBAC** login.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] auth_address: Specifies the address that used to request the access token.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] connect_address: Specifies the address that used to access engine and manages
               configuration.
               Changing this will create a new resource.
               
               > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        :param pulumi.Input[_builtins.int] create_revision: The create version of the configuration.
        :param pulumi.Input[_builtins.str] created_at: The The creation time of the configuration, in RFC3339 format.
        :param pulumi.Input[_builtins.str] key: Specifies the configuration key (item name).  
               The valid length is limited from `1` to `2,048` characters, only letters, digits, hyphens (-), underscores (_),
               colons (:) and periods (.) are allowed.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] status: Specifies the configuration status.  
               The valid values are as follows:
               + **enabled**
               + **disabled**
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the configuration that used to
               filter resource.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.int] update_revision: The update version of the configuration.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the configuration, in RFC3339 format.
        :param pulumi.Input[_builtins.str] value: Specifies the configuration value.
        :param pulumi.Input[_builtins.str] value_type: Specifies the type of the configuration value.
               The valid values are as follows:
               + **ini**
               + **json**
               + **text**
               + **yaml**
               + **properties**
               + **xml**
               
               Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MicroserviceEngineConfigurationState.__new__(_MicroserviceEngineConfigurationState)

        __props__.__dict__["admin_pass"] = admin_pass
        __props__.__dict__["admin_user"] = admin_user
        __props__.__dict__["auth_address"] = auth_address
        __props__.__dict__["connect_address"] = connect_address
        __props__.__dict__["create_revision"] = create_revision
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["key"] = key
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_revision"] = update_revision
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["value"] = value
        __props__.__dict__["value_type"] = value_type
        return MicroserviceEngineConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the account password for **RBAC** login.
        The password format must meet the following conditions:
        + Must be `8` to `32` characters long.
        + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
        (-~!@#%^*_=+?$&()|<>{}[]).
        + Cannot be the account name or account name spelled backwards.
        + The password can only start with a letter.

        Changing this will create a new resource.

        > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        """
        return pulumi.get(self, "admin_pass")

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the account name for **RBAC** login.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "admin_user")

    @_builtins.property
    @pulumi.getter(name="authAddress")
    def auth_address(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the address that used to request the access token.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "auth_address")

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the address that used to access engine and manages
        configuration.
        Changing this will create a new resource.

        > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        """
        return pulumi.get(self, "connect_address")

    @_builtins.property
    @pulumi.getter(name="createRevision")
    def create_revision(self) -> pulumi.Output[_builtins.int]:
        """
        The create version of the configuration.
        """
        return pulumi.get(self, "create_revision")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The The creation time of the configuration, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the configuration key (item name).  
        The valid length is limited from `1` to `2,048` characters, only letters, digits, hyphens (-), underscores (_),
        colons (:) and periods (.) are allowed.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the configuration status.  
        The valid values are as follows:
        + **enabled**
        + **disabled**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the configuration that used to
        filter resource.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updateRevision")
    def update_revision(self) -> pulumi.Output[_builtins.int]:
        """
        The update version of the configuration.
        """
        return pulumi.get(self, "update_revision")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the configuration, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the configuration value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the configuration value.
        The valid values are as follows:
        + **ini**
        + **json**
        + **text**
        + **yaml**
        + **properties**
        + **xml**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "value_type")

