# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AgentMaintenanceTaskInvocation',
    'AlarmTemplatePolicy',
    'AlarmTemplatePolicyHierarchicalValue',
    'AlarmruleAlarmAction',
    'AlarmruleCondition',
    'AlarmruleInsufficientdataAction',
    'AlarmruleMetric',
    'AlarmruleMetricDimension',
    'AlarmruleOkAction',
    'AlarmruleResource',
    'AlarmruleResourceDimension',
    'DashboardExtendInfo',
    'DashboardWidgetLocation',
    'DashboardWidgetMetric',
    'DashboardWidgetMetricDimensions',
    'DashboardWidgetProperties',
    'EventReportDetail',
    'EventReportDetailDimension',
    'MetricDataAddMetric',
    'MetricDataAddMetricDimension',
    'MicroserviceEngineConfigCenterAddress',
    'MicroserviceEngineServiceRegistryAddress',
    'MicroserviceInstanceDataCenter',
    'MicroserviceInstanceHealthCheck',
    'NotificationMaskPolicy',
    'NotificationMaskPolicyExtraInfo',
    'NotificationMaskResource',
    'NotificationMaskResourceDimension',
    'OneClickAlarmAlarmNotification',
    'OneClickAlarmDimensionNames',
    'OneClickAlarmOkNotification',
    'ResourceGroupResource',
    'ResourceGroupResourceDimension',
    'GetAgentDimensionsDimensionResult',
    'GetAgentMaintenanceTasksInvocationResult',
    'GetAgentStatusesAgentStatusResult',
    'GetAgentStatusesAgentStatusExtensionResult',
    'GetAlarmHistoriesAlarmHistoryResult',
    'GetAlarmHistoriesAlarmHistoryAdditionalInfoResult',
    'GetAlarmHistoriesAlarmHistoryAlarmActionResult',
    'GetAlarmHistoriesAlarmHistoryConditionResult',
    'GetAlarmHistoriesAlarmHistoryDataPointResult',
    'GetAlarmHistoriesAlarmHistoryMetricResult',
    'GetAlarmHistoriesAlarmHistoryMetricDimensionResult',
    'GetAlarmHistoriesAlarmHistoryOkActionResult',
    'GetAlarmTemplateAssociationAlarmsAlarmResult',
    'GetAlarmTemplatesAlarmTemplateResult',
    'GetAlarmrulesAlarmResult',
    'GetAlarmrulesAlarmAlarmActionResult',
    'GetAlarmrulesAlarmConditionResult',
    'GetAlarmrulesAlarmOkActionResult',
    'GetAlarmrulesAlarmResourceResult',
    'GetAlarmrulesAlarmResourceDimensionResult',
    'GetDashboardWidgetsWidgetResult',
    'GetDashboardWidgetsWidgetLocationResult',
    'GetDashboardWidgetsWidgetMetricResult',
    'GetDashboardWidgetsWidgetMetricDimensionResult',
    'GetDashboardWidgetsWidgetPropertyResult',
    'GetDashboardsDashboardResult',
    'GetEventDetailsEventInfoResult',
    'GetEventDetailsEventInfoDetailResult',
    'GetEventDetailsEventInfoDetailDimensionResult',
    'GetEventsEventResult',
    'GetMetricDataDatapointResult',
    'GetMetricsMetricResult',
    'GetMetricsMetricDimensionResult',
    'GetMicroserviceEngineConfigurationsConfigurationResult',
    'GetMicroserviceEngineFlavorsFlavorResult',
    'GetMicroserviceEngineFlavorsFlavorSpecResult',
    'GetMicroserviceEnginesEngineResult',
    'GetMicroserviceEnginesEngineConfigCenterAddressResult',
    'GetMicroserviceEnginesEngineServiceRegistryAddressResult',
    'GetMicroserviceInstancesInstanceResult',
    'GetMicroserviceInstancesInstanceDataCenterResult',
    'GetMicroserviceInstancesInstanceHealthCheckResult',
    'GetMultipleMetricsDataDataResult',
    'GetMultipleMetricsDataDataDatapointResult',
    'GetMultipleMetricsDataDataDimensionResult',
    'GetMultipleMetricsDataMetricResult',
    'GetMultipleMetricsDataMetricDimensionResult',
    'GetNacosNamespacesNamespaceResult',
    'GetOneClickAlarmRulesAlarmResult',
    'GetOneClickAlarmRulesAlarmAlarmNotificationResult',
    'GetOneClickAlarmRulesAlarmOkNotificationResult',
    'GetOneClickAlarmRulesAlarmPolicyResult',
    'GetOneClickAlarmRulesAlarmResourceResult',
    'GetOneClickAlarmRulesAlarmResourceDimensionResult',
    'GetOneClickAlarmsOneClickAlarmResult',
    'GetQuotasQuotaResult',
    'GetQuotasQuotaResourceResult',
    'GetResourceGroupServiceResourcesResourceResult',
    'GetResourceGroupServiceResourcesResourceDimensionResult',
    'GetResourceGroupsResourceGroupResult',
    'GetResourceTagsTagResult',
]

@pulumi.output_type
class AgentMaintenanceTaskInvocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "currentVersion":
            suggest = "current_version"
        elif key == "elasticIps":
            suggest = "elastic_ips"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "intranetIps":
            suggest = "intranet_ips"
        elif key == "invocationId":
            suggest = "invocation_id"
        elif key == "invocationStatus":
            suggest = "invocation_status"
        elif key == "invocationTarget":
            suggest = "invocation_target"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "targetVersion":
            suggest = "target_version"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentMaintenanceTaskInvocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentMaintenanceTaskInvocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentMaintenanceTaskInvocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_time: Optional[_builtins.int] = None,
                 current_version: Optional[_builtins.str] = None,
                 elastic_ips: Optional[Sequence[_builtins.str]] = None,
                 instance_id: Optional[_builtins.str] = None,
                 instance_name: Optional[_builtins.str] = None,
                 instance_type: Optional[_builtins.str] = None,
                 intranet_ips: Optional[Sequence[_builtins.str]] = None,
                 invocation_id: Optional[_builtins.str] = None,
                 invocation_status: Optional[_builtins.str] = None,
                 invocation_target: Optional[_builtins.str] = None,
                 invocation_type: Optional[_builtins.str] = None,
                 target_version: Optional[_builtins.str] = None,
                 update_time: Optional[_builtins.int] = None):
        """
        :param _builtins.int create_time: When the task was created.
        :param _builtins.str current_version: The current version of the agent.
        :param Sequence[_builtins.str] elastic_ips: The EIP list.
        :param _builtins.str instance_id: Specifies the server ID.
               This parameter is mandatory when the task type is **INSTALL** or **UPDATE**.
        :param _builtins.str instance_name: The server name
        :param _builtins.str instance_type: The server type.
        :param Sequence[_builtins.str] intranet_ips: The private IP address list.
        :param _builtins.str invocation_id: Specifies the task ID.
               This parameter is mandatory when the task type is **ROLLBACK** or **RETRY**.
        :param _builtins.str invocation_status: The task status.
        :param _builtins.str invocation_target: Specifies the task object. Only **telescope** is supported.
        :param _builtins.str invocation_type: Specifies the task type.
               The valid value can be **INSTALL**, **UPDATE**, **ROLLBACK** or **RETRY**.
        :param _builtins.str target_version: The target version.
        :param _builtins.int update_time: When the task was updated.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if elastic_ips is not None:
            pulumi.set(__self__, "elastic_ips", elastic_ips)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if intranet_ips is not None:
            pulumi.set(__self__, "intranet_ips", intranet_ips)
        if invocation_id is not None:
            pulumi.set(__self__, "invocation_id", invocation_id)
        if invocation_status is not None:
            pulumi.set(__self__, "invocation_status", invocation_status)
        if invocation_target is not None:
            pulumi.set(__self__, "invocation_target", invocation_target)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[_builtins.int]:
        """
        When the task was created.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[_builtins.str]:
        """
        The current version of the agent.
        """
        return pulumi.get(self, "current_version")

    @_builtins.property
    @pulumi.getter(name="elasticIps")
    def elastic_ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        The EIP list.
        """
        return pulumi.get(self, "elastic_ips")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        Specifies the server ID.
        This parameter is mandatory when the task type is **INSTALL** or **UPDATE**.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[_builtins.str]:
        """
        The server name
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[_builtins.str]:
        """
        The server type.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="intranetIps")
    def intranet_ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        The private IP address list.
        """
        return pulumi.get(self, "intranet_ips")

    @_builtins.property
    @pulumi.getter(name="invocationId")
    def invocation_id(self) -> Optional[_builtins.str]:
        """
        Specifies the task ID.
        This parameter is mandatory when the task type is **ROLLBACK** or **RETRY**.
        """
        return pulumi.get(self, "invocation_id")

    @_builtins.property
    @pulumi.getter(name="invocationStatus")
    def invocation_status(self) -> Optional[_builtins.str]:
        """
        The task status.
        """
        return pulumi.get(self, "invocation_status")

    @_builtins.property
    @pulumi.getter(name="invocationTarget")
    def invocation_target(self) -> Optional[_builtins.str]:
        """
        Specifies the task object. Only **telescope** is supported.
        """
        return pulumi.get(self, "invocation_target")

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[_builtins.str]:
        """
        Specifies the task type.
        The valid value can be **INSTALL**, **UPDATE**, **ROLLBACK** or **RETRY**.
        """
        return pulumi.get(self, "invocation_type")

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[_builtins.str]:
        """
        The target version.
        """
        return pulumi.get(self, "target_version")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[_builtins.int]:
        """
        When the task was updated.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class AlarmTemplatePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonOperator":
            suggest = "comparison_operator"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "suppressDuration":
            suggest = "suppress_duration"
        elif key == "alarmLevel":
            suggest = "alarm_level"
        elif key == "dimensionName":
            suggest = "dimension_name"
        elif key == "hierarchicalValue":
            suggest = "hierarchical_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmTemplatePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmTemplatePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmTemplatePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison_operator: _builtins.str,
                 count: _builtins.int,
                 filter: _builtins.str,
                 metric_name: _builtins.str,
                 namespace: _builtins.str,
                 period: _builtins.int,
                 suppress_duration: _builtins.int,
                 alarm_level: Optional[_builtins.int] = None,
                 dimension_name: Optional[_builtins.str] = None,
                 hierarchical_value: Optional['outputs.AlarmTemplatePolicyHierarchicalValue'] = None,
                 unit: Optional[_builtins.str] = None,
                 value: Optional[_builtins.int] = None):
        """
        :param _builtins.str comparison_operator: Specifies the comparison conditions for alarm threshold.
               + When `type` is **0**, metric alarm template value options: **>**, **<**, **=**, **>=**, **<=**, **!=**,
               **cycle_decrease**, **cycle_increase**, **cycle_wave**.
               + When `type` is **2**, event alarm template value options: **>**, **<**, **=**, **>=**, **<=**, **!=**.
        :param _builtins.int count: Specifies the number of consecutive alarm triggering times.
               + For event alarms, the value ranges from **1** to **180**.
               + For metric and website alarms, the value can be **1**, **2**, **3**, **4**, **5**, **10**, **15**, **30**, **60**,
               **90**, **120**, **180**.
        :param _builtins.str filter: Specifies the data rollup methods.
               Value options: **average**, **variance**, **min**, **max**, **sum**.
        :param _builtins.str metric_name: Specifies the alarm metric name.
        :param _builtins.str namespace: Specifies the namespace of the service.
        :param _builtins.int period: Specifies the judgment period of alarm condition.
               Value options: **0**, **1**, **300**, **1200**, **3600**, **14400**, **86400**.
        :param _builtins.int suppress_duration: Specifies the alarm suppression cycle. Unit: second.
               Only one alarm is sent when the alarm suppression period is **0**.
               Value options: **0**, **300**, **600**, **900**, **1800**, **3600**, **10800**, **21600**,
               **43200**, **86400**.
        :param _builtins.int alarm_level: Specifies the alarm level. It means no level if not set.
               The valid values are as follows:
               + **1**: critical.
               + **2**: major.
               + **3**: minor.
               + **4**: informational.
        :param _builtins.str dimension_name: Specifies the resource dimension.
               The name starts with a letter and separated by commas(,) for multiple dimensions,
               can contain only letters, digits, hyphens (-) and hyphens (-),
               and contain a maximum of `32` characters for each dimension.
               
               <a name="CesAlarmTemplate_Policy_hierarchical_value"></a>
               The `hierarchical_value` block supports:
        :param 'AlarmTemplatePolicyHierarchicalValueArgs' hierarchical_value: Specifies the multiple levels of alarm thresholds.
               The hierarchical_value structure is documented below.
               
               > When `hierarchical_value` and `value` are used at the same time, `hierarchical_value` takes precedence.
        :param _builtins.str unit: Specifies the unit string of the alarm threshold.
               The unit can contain a maximum of `32` characters.
        :param _builtins.int value: Specifies the alarm threshold.
        """
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "suppress_duration", suppress_duration)
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if dimension_name is not None:
            pulumi.set(__self__, "dimension_name", dimension_name)
        if hierarchical_value is not None:
            pulumi.set(__self__, "hierarchical_value", hierarchical_value)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> _builtins.str:
        """
        Specifies the comparison conditions for alarm threshold.
        + When `type` is **0**, metric alarm template value options: **>**, **<**, **=**, **>=**, **<=**, **!=**,
        **cycle_decrease**, **cycle_increase**, **cycle_wave**.
        + When `type` is **2**, event alarm template value options: **>**, **<**, **=**, **>=**, **<=**, **!=**.
        """
        return pulumi.get(self, "comparison_operator")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        Specifies the number of consecutive alarm triggering times.
        + For event alarms, the value ranges from **1** to **180**.
        + For metric and website alarms, the value can be **1**, **2**, **3**, **4**, **5**, **10**, **15**, **30**, **60**,
        **90**, **120**, **180**.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        """
        Specifies the data rollup methods.
        Value options: **average**, **variance**, **min**, **max**, **sum**.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        Specifies the alarm metric name.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the namespace of the service.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        Specifies the judgment period of alarm condition.
        Value options: **0**, **1**, **300**, **1200**, **3600**, **14400**, **86400**.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="suppressDuration")
    def suppress_duration(self) -> _builtins.int:
        """
        Specifies the alarm suppression cycle. Unit: second.
        Only one alarm is sent when the alarm suppression period is **0**.
        Value options: **0**, **300**, **600**, **900**, **1800**, **3600**, **10800**, **21600**,
        **43200**, **86400**.
        """
        return pulumi.get(self, "suppress_duration")

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[_builtins.int]:
        """
        Specifies the alarm level. It means no level if not set.
        The valid values are as follows:
        + **1**: critical.
        + **2**: major.
        + **3**: minor.
        + **4**: informational.
        """
        return pulumi.get(self, "alarm_level")

    @_builtins.property
    @pulumi.getter(name="dimensionName")
    def dimension_name(self) -> Optional[_builtins.str]:
        """
        Specifies the resource dimension.
        The name starts with a letter and separated by commas(,) for multiple dimensions,
        can contain only letters, digits, hyphens (-) and hyphens (-),
        and contain a maximum of `32` characters for each dimension.

        <a name="CesAlarmTemplate_Policy_hierarchical_value"></a>
        The `hierarchical_value` block supports:
        """
        return pulumi.get(self, "dimension_name")

    @_builtins.property
    @pulumi.getter(name="hierarchicalValue")
    def hierarchical_value(self) -> Optional['outputs.AlarmTemplatePolicyHierarchicalValue']:
        """
        Specifies the multiple levels of alarm thresholds.
        The hierarchical_value structure is documented below.

        > When `hierarchical_value` and `value` are used at the same time, `hierarchical_value` takes precedence.
        """
        return pulumi.get(self, "hierarchical_value")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[_builtins.str]:
        """
        Specifies the unit string of the alarm threshold.
        The unit can contain a maximum of `32` characters.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.int]:
        """
        Specifies the alarm threshold.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmTemplatePolicyHierarchicalValue(dict):
    def __init__(__self__, *,
                 critical: Optional[_builtins.float] = None,
                 info: Optional[_builtins.float] = None,
                 major: Optional[_builtins.float] = None,
                 minor: Optional[_builtins.float] = None):
        """
        :param _builtins.float critical: Specifies the threshold for the critical level.
        :param _builtins.float info: Specifies the threshold for the info level.
        :param _builtins.float major: Specifies the threshold for the major level.
        :param _builtins.float minor: Specifies the threshold for the minor level.
        """
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if major is not None:
            pulumi.set(__self__, "major", major)
        if minor is not None:
            pulumi.set(__self__, "minor", minor)

    @_builtins.property
    @pulumi.getter
    def critical(self) -> Optional[_builtins.float]:
        """
        Specifies the threshold for the critical level.
        """
        return pulumi.get(self, "critical")

    @_builtins.property
    @pulumi.getter
    def info(self) -> Optional[_builtins.float]:
        """
        Specifies the threshold for the info level.
        """
        return pulumi.get(self, "info")

    @_builtins.property
    @pulumi.getter
    def major(self) -> Optional[_builtins.float]:
        """
        Specifies the threshold for the major level.
        """
        return pulumi.get(self, "major")

    @_builtins.property
    @pulumi.getter
    def minor(self) -> Optional[_builtins.float]:
        """
        Specifies the threshold for the minor level.
        """
        return pulumi.get(self, "minor")


@pulumi.output_type
class AlarmruleAlarmAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleAlarmAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleAlarmAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleAlarmAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] notification_lists: specifies the list of objects to be notified if the alarm status changes, the
               maximum length is 5. If `type` is set to *notification*, the value of notification_list cannot be empty. If `type` is
               set to *autoscaling*, the value of notification_list must be **[]**
               and the value of namespace must be *SYS.AS*.
               
               Note: to enable the *autoscaling* alarm rules take effect, you must bind scaling policies.
        :param _builtins.str type: Specifies the type of action triggered by an alarm. the
               value can be *notification* or *autoscaling*.
               + notification: indicates that a notification will be sent to the user.
               + autoscaling: indicates that a scaling action will be triggered.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        """
        specifies the list of objects to be notified if the alarm status changes, the
        maximum length is 5. If `type` is set to *notification*, the value of notification_list cannot be empty. If `type` is
        set to *autoscaling*, the value of notification_list must be **[]**
        and the value of namespace must be *SYS.AS*.

        Note: to enable the *autoscaling* alarm rules take effect, you must bind scaling policies.
        """
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of action triggered by an alarm. the
        value can be *notification* or *autoscaling*.
        + notification: indicates that a notification will be sent to the user.
        + autoscaling: indicates that a scaling action will be triggered.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmruleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonOperator":
            suggest = "comparison_operator"
        elif key == "alarmLevel":
            suggest = "alarm_level"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "suppressDuration":
            suggest = "suppress_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison_operator: _builtins.str,
                 count: _builtins.int,
                 filter: _builtins.str,
                 period: _builtins.int,
                 value: _builtins.float,
                 alarm_level: Optional[_builtins.int] = None,
                 metric_name: Optional[_builtins.str] = None,
                 suppress_duration: Optional[_builtins.int] = None,
                 unit: Optional[_builtins.str] = None):
        """
        :param _builtins.str comparison_operator: Specifies the comparison condition of alarm thresholds. The value can be >,
               =, <, >=, or <=.
        :param _builtins.int count: Specifies the number of consecutive occurrence times. The value ranges from 1 to 5.
        :param _builtins.str filter: Specifies the data rollup methods. The value can be max, min, average, sum, and variance.
        :param _builtins.int period: Specifies the alarm checking period in seconds. The value can be 0, 1, 300, 1200, 3600, 14400,
               and 86400.
               
               Note: If period is set to 1, the raw metric data is used to determine whether to generate an alarm. When the value of
               `alarm_type` is **EVENT.SYS** or **EVENT.CUSTOM**, period can be set to 0.
        :param _builtins.float value: Specifies the alarm threshold. The value ranges from 0 to Number of
               1.7976931348623157e+108.
        :param _builtins.int alarm_level: Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
               which indicates *critical*, *major*, *minor*, and *informational*, respectively.
               The default value is 2.
        :param _builtins.str metric_name: schema: Required
        :param _builtins.int suppress_duration: Specifies the interval for triggering an alarm if the alarm persists.
               Possible values are as follows:
               + **0**: Cloud Eye triggers the alarm only once;
               + **300**: Cloud Eye triggers the alarm every 5 minutes;
               + **600**: Cloud Eye triggers the alarm every 10 minutes;
               + **900**: Cloud Eye triggers the alarm every 15 minutes;
               + **1800**: Cloud Eye triggers the alarm every 30 minutes;
               + **3600**: Cloud Eye triggers the alarm every hour;
               + **10800**: Cloud Eye triggers the alarm every 3 hours;
               + **21600**: Cloud Eye triggers the alarm every 6 hours;
               + **43200**: Cloud Eye triggers the alarm every 12 hour;
               + **86400**: Cloud Eye triggers the alarm every day.
               
               The default value is `0`.
        :param _builtins.str unit: Specifies the data unit.
               For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "value", value)
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if suppress_duration is not None:
            pulumi.set(__self__, "suppress_duration", suppress_duration)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> _builtins.str:
        """
        Specifies the comparison condition of alarm thresholds. The value can be >,
        =, <, >=, or <=.
        """
        return pulumi.get(self, "comparison_operator")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        Specifies the number of consecutive occurrence times. The value ranges from 1 to 5.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        """
        Specifies the data rollup methods. The value can be max, min, average, sum, and variance.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        Specifies the alarm checking period in seconds. The value can be 0, 1, 300, 1200, 3600, 14400,
        and 86400.

        Note: If period is set to 1, the raw metric data is used to determine whether to generate an alarm. When the value of
        `alarm_type` is **EVENT.SYS** or **EVENT.CUSTOM**, period can be set to 0.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        Specifies the alarm threshold. The value ranges from 0 to Number of
        1.7976931348623157e+108.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[_builtins.int]:
        """
        Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
        which indicates *critical*, *major*, *minor*, and *informational*, respectively.
        The default value is 2.
        """
        return pulumi.get(self, "alarm_level")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[_builtins.str]:
        """
        schema: Required
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter(name="suppressDuration")
    def suppress_duration(self) -> Optional[_builtins.int]:
        """
        Specifies the interval for triggering an alarm if the alarm persists.
        Possible values are as follows:
        + **0**: Cloud Eye triggers the alarm only once;
        + **300**: Cloud Eye triggers the alarm every 5 minutes;
        + **600**: Cloud Eye triggers the alarm every 10 minutes;
        + **900**: Cloud Eye triggers the alarm every 15 minutes;
        + **1800**: Cloud Eye triggers the alarm every 30 minutes;
        + **3600**: Cloud Eye triggers the alarm every hour;
        + **10800**: Cloud Eye triggers the alarm every 3 hours;
        + **21600**: Cloud Eye triggers the alarm every 6 hours;
        + **43200**: Cloud Eye triggers the alarm every 12 hour;
        + **86400**: Cloud Eye triggers the alarm every day.

        The default value is `0`.
        """
        return pulumi.get(self, "suppress_duration")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[_builtins.str]:
        """
        Specifies the data unit.
        For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class AlarmruleInsufficientdataAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleInsufficientdataAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleInsufficientdataAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleInsufficientdataAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmruleMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: _builtins.str,
                 dimensions: Optional[Sequence['outputs.AlarmruleMetricDimension']] = None,
                 metric_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str namespace: Specifies the namespace in **service.item** format. **service** and **item**
               each must be a string that starts with a letter and contains only letters, digits, and underscores (_).
               Changing this creates a new resource.
               For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        :param Sequence['AlarmruleMetricDimensionArgs'] dimensions: schema: Deprecated
        :param _builtins.str metric_name: schema: Deprecated
        """
        pulumi.set(__self__, "namespace", namespace)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the namespace in **service.item** format. **service** and **item**
        each must be a string that starts with a letter and contains only letters, digits, and underscores (_).
        Changing this creates a new resource.
        For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.AlarmruleMetricDimension']]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[_builtins.str]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class AlarmruleMetricDimension(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the dimension name. The value can be a string of 1 to 32 characters
               that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
        :param _builtins.str value: Specifies the alarm threshold. The value ranges from 0 to Number of
               1.7976931348623157e+108.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the dimension name. The value can be a string of 1 to 32 characters
        that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the alarm threshold. The value ranges from 0 to Number of
        1.7976931348623157e+108.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmruleOkAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleOkAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleOkAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleOkAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] notification_lists: specifies the list of objects to be notified if the alarm status changes, the
               maximum length is 5.
        :param _builtins.str type: Specifies the type of action triggered by an alarm. the value is notification.
               notification: indicates that a notification will be sent to the user.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        """
        specifies the list of objects to be notified if the alarm status changes, the
        maximum length is 5.
        """
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of action triggered by an alarm. the value is notification.
        notification: indicates that a notification will be sent to the user.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmruleResource(dict):
    def __init__(__self__, *,
                 dimensions: Optional[Sequence['outputs.AlarmruleResourceDimension']] = None):
        """
        :param Sequence['AlarmruleResourceDimensionArgs'] dimensions: Specifies the list of metric dimensions. The structure is described below.
        """
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.AlarmruleResourceDimension']]:
        """
        Specifies the list of metric dimensions. The structure is described below.
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class AlarmruleResourceDimension(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the dimension name. The value can be a string of 1 to 32 characters
               that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
        :param _builtins.str value: Specifies the alarm threshold. The value ranges from 0 to Number of
               1.7976931348623157e+108.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the dimension name. The value can be a string of 1 to 32 characters
        that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the alarm threshold. The value ranges from 0 to Number of
        1.7976931348623157e+108.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardExtendInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayTime":
            suggest = "display_time"
        elif key == "enableLegend":
            suggest = "enable_legend"
        elif key == "enableScreenAutoPlay":
            suggest = "enable_screen_auto_play"
        elif key == "from":
            suggest = "from_"
        elif key == "fullScreenWidgetNum":
            suggest = "full_screen_widget_num"
        elif key == "refreshTime":
            suggest = "refresh_time"
        elif key == "screenColor":
            suggest = "screen_color"
        elif key == "timeInterval":
            suggest = "time_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardExtendInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardExtendInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardExtendInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_time: Optional[_builtins.int] = None,
                 enable_legend: Optional[_builtins.bool] = None,
                 enable_screen_auto_play: Optional[_builtins.bool] = None,
                 filter: Optional[_builtins.str] = None,
                 from_: Optional[_builtins.int] = None,
                 full_screen_widget_num: Optional[_builtins.int] = None,
                 period: Optional[_builtins.str] = None,
                 refresh_time: Optional[_builtins.int] = None,
                 screen_color: Optional[_builtins.str] = None,
                 time_interval: Optional[_builtins.int] = None,
                 to: Optional[_builtins.int] = None):
        """
        :param _builtins.int display_time: Specifies the display time.
               Values can be as follows:
               + **0**: Using custom time display.
               + **5**: Five minutes.
               + **15**: Fifteen minutes.
               + **30**: Thirty minutes.
               + **60**: One hour.
               + **120**: Two hours.
               + **180**: Three hours.
               + **720**: Twelve hours.
               + **1440**: One day.
               + **10080**: Seven days.
               + **43200**: Thirty days.
        :param _builtins.bool enable_legend: Specifies whether to enable the legend.
        :param _builtins.bool enable_screen_auto_play: Specifies whether the monitoring screen switches automatically.
        :param _builtins.str filter: Specifies the metric aggregation method.
               Values can be as follows:
               + **average**: Average value.
               + **min**: Minimum value.
               + **max**: Maximum value.
               + **sum**: Sum.
        :param _builtins.int from_: Specifies the start time.
        :param _builtins.int full_screen_widget_num: Specifies the number of large screen display views.
               Values can be **1**, **4**, **9**, **16** and **25**.
        :param _builtins.str period: Specifies the metric aggregation period.
               Values can be as follows:
               + **1**: Original value.
               + **60**: One minute.
               + **300**: Five minutes.
               + **1200**: Twenty minutes.
               + **3600**: One hour.
               + **14400**: Four hours.
               + **86400**: One day.
        :param _builtins.int refresh_time: Specifies the refresh time.
               Values can be as follows:
               + **0**: No refresh.
               + **10**: Ten seconds.
               + **60**: One minute.
               + **300**: Five minutes.
               + **1200**: Twenty minutes.
        :param _builtins.str screen_color: Specifies the monitoring screen background color.
        :param _builtins.int time_interval: Specifies the automatic switching time interval of the monitoring screen.
               Values can be as follows:
               + **10000**: Ten seconds.
               + **30000**: Thirty seconds.
               + **60000**: One minute.
        :param _builtins.int to: Specifies the end time.
        """
        if display_time is not None:
            pulumi.set(__self__, "display_time", display_time)
        if enable_legend is not None:
            pulumi.set(__self__, "enable_legend", enable_legend)
        if enable_screen_auto_play is not None:
            pulumi.set(__self__, "enable_screen_auto_play", enable_screen_auto_play)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if full_screen_widget_num is not None:
            pulumi.set(__self__, "full_screen_widget_num", full_screen_widget_num)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)
        if screen_color is not None:
            pulumi.set(__self__, "screen_color", screen_color)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @_builtins.property
    @pulumi.getter(name="displayTime")
    def display_time(self) -> Optional[_builtins.int]:
        """
        Specifies the display time.
        Values can be as follows:
        + **0**: Using custom time display.
        + **5**: Five minutes.
        + **15**: Fifteen minutes.
        + **30**: Thirty minutes.
        + **60**: One hour.
        + **120**: Two hours.
        + **180**: Three hours.
        + **720**: Twelve hours.
        + **1440**: One day.
        + **10080**: Seven days.
        + **43200**: Thirty days.
        """
        return pulumi.get(self, "display_time")

    @_builtins.property
    @pulumi.getter(name="enableLegend")
    def enable_legend(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable the legend.
        """
        return pulumi.get(self, "enable_legend")

    @_builtins.property
    @pulumi.getter(name="enableScreenAutoPlay")
    def enable_screen_auto_play(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the monitoring screen switches automatically.
        """
        return pulumi.get(self, "enable_screen_auto_play")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        """
        Specifies the metric aggregation method.
        Values can be as follows:
        + **average**: Average value.
        + **min**: Minimum value.
        + **max**: Maximum value.
        + **sum**: Sum.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[_builtins.int]:
        """
        Specifies the start time.
        """
        return pulumi.get(self, "from_")

    @_builtins.property
    @pulumi.getter(name="fullScreenWidgetNum")
    def full_screen_widget_num(self) -> Optional[_builtins.int]:
        """
        Specifies the number of large screen display views.
        Values can be **1**, **4**, **9**, **16** and **25**.
        """
        return pulumi.get(self, "full_screen_widget_num")

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[_builtins.str]:
        """
        Specifies the metric aggregation period.
        Values can be as follows:
        + **1**: Original value.
        + **60**: One minute.
        + **300**: Five minutes.
        + **1200**: Twenty minutes.
        + **3600**: One hour.
        + **14400**: Four hours.
        + **86400**: One day.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[_builtins.int]:
        """
        Specifies the refresh time.
        Values can be as follows:
        + **0**: No refresh.
        + **10**: Ten seconds.
        + **60**: One minute.
        + **300**: Five minutes.
        + **1200**: Twenty minutes.
        """
        return pulumi.get(self, "refresh_time")

    @_builtins.property
    @pulumi.getter(name="screenColor")
    def screen_color(self) -> Optional[_builtins.str]:
        """
        Specifies the monitoring screen background color.
        """
        return pulumi.get(self, "screen_color")

    @_builtins.property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[_builtins.int]:
        """
        Specifies the automatic switching time interval of the monitoring screen.
        Values can be as follows:
        + **10000**: Ten seconds.
        + **30000**: Thirty seconds.
        + **60000**: One minute.
        """
        return pulumi.get(self, "time_interval")

    @_builtins.property
    @pulumi.getter
    def to(self) -> Optional[_builtins.int]:
        """
        Specifies the end time.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class DashboardWidgetLocation(dict):
    def __init__(__self__, *,
                 height: _builtins.int,
                 left: _builtins.int,
                 top: _builtins.int,
                 width: _builtins.int):
        """
        :param _builtins.int height: Specifies the dashboard widget height.
               
               <a name="Properties"></a>
               The `properties` block supports:
        :param _builtins.int left: Specifies the grids between the widget and the left side of the dashboard.
        :param _builtins.int top: Specifies the grids between the widget and the top of the dashboard.
        :param _builtins.int width: Specifies the dashboard widget width.
        """
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "left", left)
        pulumi.set(__self__, "top", top)
        pulumi.set(__self__, "width", width)

    @_builtins.property
    @pulumi.getter
    def height(self) -> _builtins.int:
        """
        Specifies the dashboard widget height.

        <a name="Properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "height")

    @_builtins.property
    @pulumi.getter
    def left(self) -> _builtins.int:
        """
        Specifies the grids between the widget and the left side of the dashboard.
        """
        return pulumi.get(self, "left")

    @_builtins.property
    @pulumi.getter
    def top(self) -> _builtins.int:
        """
        Specifies the grids between the widget and the top of the dashboard.
        """
        return pulumi.get(self, "top")

    @_builtins.property
    @pulumi.getter
    def width(self) -> _builtins.int:
        """
        Specifies the dashboard widget width.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class DashboardWidgetMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions: 'outputs.DashboardWidgetMetricDimensions',
                 metric_name: _builtins.str,
                 namespace: _builtins.str,
                 aliases: Optional[Sequence[_builtins.str]] = None):
        """
        :param 'DashboardWidgetMetricDimensionsArgs' dimensions: Specifies the dimension list.
               
               The dimensions structure is documented below.
        :param _builtins.str metric_name: Specifies the metric name.
        :param _builtins.str namespace: Specifies the cloud service dimension.
        :param Sequence[_builtins.str] aliases: Specifies the alias list of metrics.
               
               <a name="Location"></a>
               The `location` block supports:
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> 'outputs.DashboardWidgetMetricDimensions':
        """
        Specifies the dimension list.

        The dimensions structure is documented below.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        Specifies the metric name.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the cloud service dimension.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def aliases(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the alias list of metrics.

        <a name="Location"></a>
        The `location` block supports:
        """
        return pulumi.get(self, "aliases")


@pulumi.output_type
class DashboardWidgetMetricDimensions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetMetricDimensions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetMetricDimensions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetMetricDimensions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: _builtins.str,
                 name: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str filter_type: Specifies the resource type.
               The value can be **all_instances** (all resources) or **specific_instances** (specified resources).
        :param _builtins.str name: Specifies the dimension name.
        :param Sequence[_builtins.str] values: Specifies the dimension value list.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> _builtins.str:
        """
        Specifies the resource type.
        The value can be **all_instances** (all resources) or **specific_instances** (specified resources).
        """
        return pulumi.get(self, "filter_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the dimension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the dimension value list.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class DashboardWidgetProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topN":
            suggest = "top_n"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 top_n: _builtins.int,
                 filter: Optional[_builtins.str] = None,
                 order: Optional[_builtins.str] = None):
        """
        :param _builtins.int top_n: Specifies the top n resources sorted by a metric.
        :param _builtins.str filter: Specifies how metric data is aggregated.
               The value can only be **topN**.
        :param _builtins.str order: Specifies how top n resources by a metric are sorted on a dashboard widget.
               The value can be **asc** or **desc**.
               
               <a name="MetricsDimensions"></a>
               The `dimensions` block supports:
        """
        pulumi.set(__self__, "top_n", top_n)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @_builtins.property
    @pulumi.getter(name="topN")
    def top_n(self) -> _builtins.int:
        """
        Specifies the top n resources sorted by a metric.
        """
        return pulumi.get(self, "top_n")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        """
        Specifies how metric data is aggregated.
        The value can only be **topN**.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[_builtins.str]:
        """
        Specifies how top n resources by a metric are sorted on a dashboard widget.
        The value can be **asc** or **desc**.

        <a name="MetricsDimensions"></a>
        The `dimensions` block supports:
        """
        return pulumi.get(self, "order")


@pulumi.output_type
class EventReportDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventReportDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventReportDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventReportDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: _builtins.str,
                 state: _builtins.str,
                 content: Optional[_builtins.str] = None,
                 dimensions: Optional[Sequence['outputs.EventReportDetailDimension']] = None,
                 group_id: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 resource_name: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None,
                 user: Optional[_builtins.str] = None):
        """
        :param _builtins.str level: Specifies the event level.
               The value can be **Critical**, **Major**, **Minor**, or **Info**.
        :param _builtins.str state: Specifies the event status.
               The value can be **normal**, **warning**, or **incident**.
        :param _builtins.str content: Specifies the event content.
        :param Sequence['EventReportDetailDimensionArgs'] dimensions: Specifies the resource dimensions.
               The dimensions structure is documented below.
               
               <a name="DetailDimensions"></a>
               The `dimensions` block supports:
        :param _builtins.str group_id: Specifies the group that the event belongs to.
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str resource_name: Specifies the resource name.
        :param _builtins.str type: Specifies the event type.
               The value can only be **EVENT.CUSTOM**.
        :param _builtins.str user: Specifies the event user.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "state", state)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        Specifies the event level.
        The value can be **Critical**, **Major**, **Minor**, or **Info**.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the event status.
        The value can be **normal**, **warning**, or **incident**.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[_builtins.str]:
        """
        Specifies the event content.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.EventReportDetailDimension']]:
        """
        Specifies the resource dimensions.
        The dimensions structure is documented below.

        <a name="DetailDimensions"></a>
        The `dimensions` block supports:
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        """
        Specifies the group that the event belongs to.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the event type.
        The value can only be **EVENT.CUSTOM**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[_builtins.str]:
        """
        Specifies the event user.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class EventReportDetailDimension(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The resource dimension name.
        :param _builtins.str value: The resource dimension value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The resource dimension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The resource dimension value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MetricDataAddMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricDataAddMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricDataAddMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricDataAddMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions: Sequence['outputs.MetricDataAddMetricDimension'],
                 metric_name: _builtins.str,
                 namespace: _builtins.str):
        """
        :param Sequence['MetricDataAddMetricDimensionArgs'] dimensions: Specifies the metric dimension.
               A maximum of four dimensions are supported.
               
               The dimensions structure is documented below.
        :param _builtins.str metric_name: Specifies the metric ID.
               
               <a name="Dimensions"></a>
               The `dimensions` block supports:
        :param _builtins.str namespace: Specifies the customized namespace.
               The namespace must be in the **service.item** format and contain `3` to `32` characters.
               **service** and **item** each must start with a letter and contain only letters, digits, and underscores (_).
               In addition, **service** cannot start with **SYS**, **AGT**, or **SRE**. The namespace cannot be **SERVICE.BMS**,
               because this namespace has been used by the system.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.MetricDataAddMetricDimension']:
        """
        Specifies the metric dimension.
        A maximum of four dimensions are supported.

        The dimensions structure is documented below.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        Specifies the metric ID.

        <a name="Dimensions"></a>
        The `dimensions` block supports:
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the customized namespace.
        The namespace must be in the **service.item** format and contain `3` to `32` characters.
        **service** and **item** each must start with a letter and contain only letters, digits, and underscores (_).
        In addition, **service** cannot start with **SYS**, **AGT**, or **SRE**. The namespace cannot be **SERVICE.BMS**,
        because this namespace has been used by the system.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class MetricDataAddMetricDimension(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the dimension.
        :param _builtins.str value: Specifies the dimension value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the dimension.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the dimension value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MicroserviceEngineConfigCenterAddress(dict):
    def __init__(__self__, *,
                 private: Optional[_builtins.str] = None,
                 public: Optional[_builtins.str] = None):
        """
        :param _builtins.str private: The internal access address.
        :param _builtins.str public: The public access address. This address is only set when EIP is bound.
        """
        if private is not None:
            pulumi.set(__self__, "private", private)
        if public is not None:
            pulumi.set(__self__, "public", public)

    @_builtins.property
    @pulumi.getter
    def private(self) -> Optional[_builtins.str]:
        """
        The internal access address.
        """
        return pulumi.get(self, "private")

    @_builtins.property
    @pulumi.getter
    def public(self) -> Optional[_builtins.str]:
        """
        The public access address. This address is only set when EIP is bound.
        """
        return pulumi.get(self, "public")


@pulumi.output_type
class MicroserviceEngineServiceRegistryAddress(dict):
    def __init__(__self__, *,
                 private: Optional[_builtins.str] = None,
                 public: Optional[_builtins.str] = None):
        """
        :param _builtins.str private: The internal access address.
        :param _builtins.str public: The public access address. This address is only set when EIP is bound.
        """
        if private is not None:
            pulumi.set(__self__, "private", private)
        if public is not None:
            pulumi.set(__self__, "public", public)

    @_builtins.property
    @pulumi.getter
    def private(self) -> Optional[_builtins.str]:
        """
        The internal access address.
        """
        return pulumi.get(self, "private")

    @_builtins.property
    @pulumi.getter
    def public(self) -> Optional[_builtins.str]:
        """
        The public access address. This address is only set when EIP is bound.
        """
        return pulumi.get(self, "public")


@pulumi.output_type
class MicroserviceInstanceDataCenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MicroserviceInstanceDataCenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MicroserviceInstanceDataCenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MicroserviceInstanceDataCenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 name: _builtins.str,
                 region: _builtins.str):
        """
        :param _builtins.str availability_zone: Specifies the custom availability zone name of the data center.
               Changing this will create a new microservice instance.
        :param _builtins.str name: Specifies the data center name.
               Changing this will create a new microservice instance.
        :param _builtins.str region: Specifies the custom region name of the data center.
               Changing this will create a new microservice instance.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Specifies the custom availability zone name of the data center.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the data center name.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the custom region name of the data center.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class MicroserviceInstanceHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRetries":
            suggest = "max_retries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MicroserviceInstanceHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MicroserviceInstanceHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MicroserviceInstanceHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: _builtins.int,
                 max_retries: _builtins.int,
                 mode: _builtins.str,
                 port: Optional[_builtins.int] = None):
        """
        :param _builtins.int interval: Specifies the heartbeat interval. The unit is **s** (second).
               Changing this will create a new microservice instance.
        :param _builtins.int max_retries: Specifies the maximum retries.
               Changing this will create a new microservice instance.
        :param _builtins.str mode: Specifies the heartbeat mode. The valid values are **push** and **pull**.
               Changing this will create a new microservice instance.
        :param _builtins.int port: Specifies the port number.
               Changing this will create a new microservice instance.
               
               <a name="microservice_instance_data_center"></a>
               The `data_center` block supports:
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "max_retries", max_retries)
        pulumi.set(__self__, "mode", mode)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Specifies the heartbeat interval. The unit is **s** (second).
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> _builtins.int:
        """
        Specifies the maximum retries.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "max_retries")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Specifies the heartbeat mode. The valid values are **push** and **pull**.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the port number.
        Changing this will create a new microservice instance.

        <a name="microservice_instance_data_center"></a>
        The `data_center` block supports:
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class NotificationMaskPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alarmLevel":
            suggest = "alarm_level"
        elif key == "alarmPolicyId":
            suggest = "alarm_policy_id"
        elif key == "comparisonOperator":
            suggest = "comparison_operator"
        elif key == "extraInfos":
            suggest = "extra_infos"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "selectedUnit":
            suggest = "selected_unit"
        elif key == "suppressDuration":
            suggest = "suppress_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationMaskPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationMaskPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationMaskPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarm_level: Optional[_builtins.int] = None,
                 alarm_policy_id: Optional[_builtins.str] = None,
                 comparison_operator: Optional[_builtins.str] = None,
                 count: Optional[_builtins.int] = None,
                 extra_infos: Optional[Sequence['outputs.NotificationMaskPolicyExtraInfo']] = None,
                 filter: Optional[_builtins.str] = None,
                 metric_name: Optional[_builtins.str] = None,
                 period: Optional[_builtins.int] = None,
                 selected_unit: Optional[_builtins.str] = None,
                 suppress_duration: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None,
                 unit: Optional[_builtins.str] = None,
                 value: Optional[_builtins.float] = None):
        """
        :param _builtins.int alarm_level: The alarm severity.
        :param _builtins.str alarm_policy_id: The alarm policy ID.
        :param _builtins.str comparison_operator: The operator.
        :param _builtins.int count: The number of consecutive times that alarm conditions are met.
        :param Sequence['NotificationMaskPolicyExtraInfoArgs'] extra_infos: The extended metric information.
               The extra_info structure is documented below.
        :param _builtins.str filter: The data rollup method.
        :param _builtins.str metric_name: The metric name of a resource.
        :param _builtins.int period: The period for determining whether to generate an alarm, in seconds.
        :param _builtins.str selected_unit: The unit you selected, which is used for subsequent metric data display and calculation.
        :param _builtins.int suppress_duration: The interval for triggering alarms.
        :param _builtins.str type: The alarm policy type.
        :param _builtins.str unit: The data unit.
        :param _builtins.float value: Specifies the value of a resource dimension.
        """
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if alarm_policy_id is not None:
            pulumi.set(__self__, "alarm_policy_id", alarm_policy_id)
        if comparison_operator is not None:
            pulumi.set(__self__, "comparison_operator", comparison_operator)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if extra_infos is not None:
            pulumi.set(__self__, "extra_infos", extra_infos)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if selected_unit is not None:
            pulumi.set(__self__, "selected_unit", selected_unit)
        if suppress_duration is not None:
            pulumi.set(__self__, "suppress_duration", suppress_duration)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[_builtins.int]:
        """
        The alarm severity.
        """
        return pulumi.get(self, "alarm_level")

    @_builtins.property
    @pulumi.getter(name="alarmPolicyId")
    def alarm_policy_id(self) -> Optional[_builtins.str]:
        """
        The alarm policy ID.
        """
        return pulumi.get(self, "alarm_policy_id")

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> Optional[_builtins.str]:
        """
        The operator.
        """
        return pulumi.get(self, "comparison_operator")

    @_builtins.property
    @pulumi.getter
    def count(self) -> Optional[_builtins.int]:
        """
        The number of consecutive times that alarm conditions are met.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Optional[Sequence['outputs.NotificationMaskPolicyExtraInfo']]:
        """
        The extended metric information.
        The extra_info structure is documented below.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        """
        The data rollup method.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[_builtins.str]:
        """
        The metric name of a resource.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[_builtins.int]:
        """
        The period for determining whether to generate an alarm, in seconds.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="selectedUnit")
    def selected_unit(self) -> Optional[_builtins.str]:
        """
        The unit you selected, which is used for subsequent metric data display and calculation.
        """
        return pulumi.get(self, "selected_unit")

    @_builtins.property
    @pulumi.getter(name="suppressDuration")
    def suppress_duration(self) -> Optional[_builtins.int]:
        """
        The interval for triggering alarms.
        """
        return pulumi.get(self, "suppress_duration")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The alarm policy type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[_builtins.str]:
        """
        The data unit.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.float]:
        """
        Specifies the value of a resource dimension.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NotificationMaskPolicyExtraInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customProcName":
            suggest = "custom_proc_name"
        elif key == "metricPrefix":
            suggest = "metric_prefix"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "originMetricName":
            suggest = "origin_metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationMaskPolicyExtraInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationMaskPolicyExtraInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationMaskPolicyExtraInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_proc_name: Optional[_builtins.str] = None,
                 metric_prefix: Optional[_builtins.str] = None,
                 metric_type: Optional[_builtins.str] = None,
                 origin_metric_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str custom_proc_name: The name of a user process.
        :param _builtins.str metric_prefix: The metric name prefix.
        :param _builtins.str metric_type: The metric type.
        :param _builtins.str origin_metric_name: The original metric name.
        """
        if custom_proc_name is not None:
            pulumi.set(__self__, "custom_proc_name", custom_proc_name)
        if metric_prefix is not None:
            pulumi.set(__self__, "metric_prefix", metric_prefix)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if origin_metric_name is not None:
            pulumi.set(__self__, "origin_metric_name", origin_metric_name)

    @_builtins.property
    @pulumi.getter(name="customProcName")
    def custom_proc_name(self) -> Optional[_builtins.str]:
        """
        The name of a user process.
        """
        return pulumi.get(self, "custom_proc_name")

    @_builtins.property
    @pulumi.getter(name="metricPrefix")
    def metric_prefix(self) -> Optional[_builtins.str]:
        """
        The metric name prefix.
        """
        return pulumi.get(self, "metric_prefix")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[_builtins.str]:
        """
        The metric type.
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter(name="originMetricName")
    def origin_metric_name(self) -> Optional[_builtins.str]:
        """
        The original metric name.
        """
        return pulumi.get(self, "origin_metric_name")


@pulumi.output_type
class NotificationMaskResource(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.NotificationMaskResourceDimension'],
                 namespace: _builtins.str):
        """
        :param Sequence['NotificationMaskResourceDimensionArgs'] dimensions: Specifies the resource dimension information.
               The dimensions structure is documented below.
               
               <a name="ResourcesDimensions"></a>
               The `dimensions` block supports:
        :param _builtins.str namespace: Specifies the resource namespace in **service.item** format.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.NotificationMaskResourceDimension']:
        """
        Specifies the resource dimension information.
        The dimensions structure is documented below.

        <a name="ResourcesDimensions"></a>
        The `dimensions` block supports:
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the resource namespace in **service.item** format.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class NotificationMaskResourceDimension(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the dimension of a resource.
        :param _builtins.str value: Specifies the value of a resource dimension.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the dimension of a resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of a resource dimension.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class OneClickAlarmAlarmNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OneClickAlarmAlarmNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OneClickAlarmAlarmNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OneClickAlarmAlarmNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] notification_lists: Specifies the list of objects to be notified if the alarm status changes.
        :param _builtins.str type: Specifies the notification type.
               The value can be **notification** or **contact**.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of objects to be notified if the alarm status changes.
        """
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the notification type.
        The value can be **notification** or **contact**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class OneClickAlarmDimensionNames(dict):
    def __init__(__self__, *,
                 event: Optional[_builtins.bool] = None,
                 metrics: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.bool event: Specifies whether to enable the event alarm rules.
        :param Sequence[_builtins.str] metrics: Specifies dimensions in metric alarm rules that have one-click monitoring enabled.
               
               <a name="Notifications"></a>
               The `alarm_notifications` block or `ok_notifications` block supports:
        """
        if event is not None:
            pulumi.set(__self__, "event", event)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)

    @_builtins.property
    @pulumi.getter
    def event(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable the event alarm rules.
        """
        return pulumi.get(self, "event")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies dimensions in metric alarm rules that have one-click monitoring enabled.

        <a name="Notifications"></a>
        The `alarm_notifications` block or `ok_notifications` block supports:
        """
        return pulumi.get(self, "metrics")


@pulumi.output_type
class OneClickAlarmOkNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OneClickAlarmOkNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OneClickAlarmOkNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OneClickAlarmOkNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] notification_lists: Specifies the list of objects to be notified if the alarm status changes.
        :param _builtins.str type: Specifies the notification type.
               The value can be **notification** or **contact**.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of objects to be notified if the alarm status changes.
        """
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the notification type.
        The value can be **notification** or **contact**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceGroupResource(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.ResourceGroupResourceDimension'],
                 namespace: _builtins.str):
        """
        :param Sequence['ResourceGroupResourceDimensionArgs'] dimensions: Specifies the list of dimensions.
               The DimensionOpts structure is documented below.
               
               <a name="ResourceGroup_DimensionOpts"></a>
               The `dimensions` block supports:
        :param _builtins.str namespace: Specifies the namespace in **service.item** format.
               **service** and **item** each must be a string that starts with a letter and contains only letters, digits, and
               underscores (_). For details,
               see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.ResourceGroupResourceDimension']:
        """
        Specifies the list of dimensions.
        The DimensionOpts structure is documented below.

        <a name="ResourceGroup_DimensionOpts"></a>
        The `dimensions` block supports:
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the namespace in **service.item** format.
        **service** and **item** each must be a string that starts with a letter and contains only letters, digits, and
        underscores (_). For details,
        see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ResourceGroupResourceDimension(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the dimension name.
               The value can be a string of 1 to 32 characters that must start with a letter
               and contain only letters, digits, underscores (_), and hyphens (-).
        :param _builtins.str value: Specifies the dimension value.
               The value can be a string of 1 to 64 characters that must start with a letter or a number
               and contain only letters, digits, underscores (_), and hyphens (-).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the dimension name.
        The value can be a string of 1 to 32 characters that must start with a letter
        and contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the dimension value.
        The value can be a string of 1 to 64 characters that must start with a letter or a number
        and contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAgentDimensionsDimensionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 origin_value: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The dimension name.
        :param _builtins.str origin_value: The actual dimension value.
        :param _builtins.str value: The dimension value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "origin_value", origin_value)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The dimension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="originValue")
    def origin_value(self) -> _builtins.str:
        """
        The actual dimension value.
        """
        return pulumi.get(self, "origin_value")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The dimension value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAgentMaintenanceTasksInvocationResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.int,
                 current_version: _builtins.str,
                 elastic_ips: Sequence[_builtins.str],
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 instance_type: _builtins.str,
                 intranet_ips: Sequence[_builtins.str],
                 invocation_id: _builtins.str,
                 invocation_status: _builtins.str,
                 invocation_target: _builtins.str,
                 invocation_type: _builtins.str,
                 target_version: _builtins.str,
                 update_time: _builtins.int):
        """
        :param _builtins.int create_time: When the task was created.
        :param _builtins.str current_version: The current version of the agent.
        :param Sequence[_builtins.str] elastic_ips: The EIP list.
        :param _builtins.str instance_id: Specifies the server ID.
        :param _builtins.str instance_name: The server name.
        :param _builtins.str instance_type: Specifies the server type.
               The valid value can be **ECS** or **BMS**.
        :param Sequence[_builtins.str] intranet_ips: The private IP address list.
        :param _builtins.str invocation_id: Specifies the task ID.
        :param _builtins.str invocation_status: The task status.
        :param _builtins.str invocation_target: Specifies the task object. Only **telescope** is supported.
        :param _builtins.str invocation_type: Specifies the task type.
               The valid value can be **INSTALL**, **UPDATE**, **ROLLBACK** or **RETRY**.
        :param _builtins.str target_version: The target version.
        :param _builtins.int update_time: When the task was updated.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "current_version", current_version)
        pulumi.set(__self__, "elastic_ips", elastic_ips)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "intranet_ips", intranet_ips)
        pulumi.set(__self__, "invocation_id", invocation_id)
        pulumi.set(__self__, "invocation_status", invocation_status)
        pulumi.set(__self__, "invocation_target", invocation_target)
        pulumi.set(__self__, "invocation_type", invocation_type)
        pulumi.set(__self__, "target_version", target_version)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        When the task was created.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> _builtins.str:
        """
        The current version of the agent.
        """
        return pulumi.get(self, "current_version")

    @_builtins.property
    @pulumi.getter(name="elasticIps")
    def elastic_ips(self) -> Sequence[_builtins.str]:
        """
        The EIP list.
        """
        return pulumi.get(self, "elastic_ips")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the server ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        The server name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        Specifies the server type.
        The valid value can be **ECS** or **BMS**.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="intranetIps")
    def intranet_ips(self) -> Sequence[_builtins.str]:
        """
        The private IP address list.
        """
        return pulumi.get(self, "intranet_ips")

    @_builtins.property
    @pulumi.getter(name="invocationId")
    def invocation_id(self) -> _builtins.str:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "invocation_id")

    @_builtins.property
    @pulumi.getter(name="invocationStatus")
    def invocation_status(self) -> _builtins.str:
        """
        The task status.
        """
        return pulumi.get(self, "invocation_status")

    @_builtins.property
    @pulumi.getter(name="invocationTarget")
    def invocation_target(self) -> _builtins.str:
        """
        Specifies the task object. Only **telescope** is supported.
        """
        return pulumi.get(self, "invocation_target")

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> _builtins.str:
        """
        Specifies the task type.
        The valid value can be **INSTALL**, **UPDATE**, **ROLLBACK** or **RETRY**.
        """
        return pulumi.get(self, "invocation_type")

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> _builtins.str:
        """
        The target version.
        """
        return pulumi.get(self, "target_version")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        When the task was updated.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetAgentStatusesAgentStatusResult(dict):
    def __init__(__self__, *,
                 extensions: Sequence['outputs.GetAgentStatusesAgentStatusExtensionResult'],
                 instance_id: _builtins.str,
                 uniagent_status: _builtins.str):
        """
        :param Sequence['GetAgentStatusesAgentStatusExtensionArgs'] extensions: The agent extension information list.
        :param _builtins.str instance_id: The cloud server ID.
        :param _builtins.str uniagent_status: Specifies the uniagent status.
               The valid value can be **none** (not installed), **running**, **silent** or **unknown** (faulty).
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "uniagent_status", uniagent_status)

    @_builtins.property
    @pulumi.getter
    def extensions(self) -> Sequence['outputs.GetAgentStatusesAgentStatusExtensionResult']:
        """
        The agent extension information list.
        """
        return pulumi.get(self, "extensions")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The cloud server ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="uniagentStatus")
    def uniagent_status(self) -> _builtins.str:
        """
        Specifies the uniagent status.
        The valid value can be **none** (not installed), **running**, **silent** or **unknown** (faulty).
        """
        return pulumi.get(self, "uniagent_status")


@pulumi.output_type
class GetAgentStatusesAgentStatusExtensionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 status: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str name: The agent name.
        :param _builtins.str status: The agent status.
        :param _builtins.str version: The agent version.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The agent name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The agent status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The agent version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAlarmHistoriesAlarmHistoryResult(dict):
    def __init__(__self__, *,
                 action_enabled: _builtins.bool,
                 additional_infos: Sequence['outputs.GetAlarmHistoriesAlarmHistoryAdditionalInfoResult'],
                 alarm_actions: Sequence['outputs.GetAlarmHistoriesAlarmHistoryAlarmActionResult'],
                 alarm_id: _builtins.str,
                 alarm_recovery_time: _builtins.str,
                 begin_time: _builtins.str,
                 conditions: Sequence['outputs.GetAlarmHistoriesAlarmHistoryConditionResult'],
                 data_points: Sequence['outputs.GetAlarmHistoriesAlarmHistoryDataPointResult'],
                 end_time: _builtins.str,
                 first_alarm_time: _builtins.str,
                 last_alarm_time: _builtins.str,
                 level: _builtins.int,
                 metrics: Sequence['outputs.GetAlarmHistoriesAlarmHistoryMetricResult'],
                 name: _builtins.str,
                 ok_actions: Sequence['outputs.GetAlarmHistoriesAlarmHistoryOkActionResult'],
                 record_id: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.bool action_enabled: Whether to send a notification.
        :param Sequence['GetAlarmHistoriesAlarmHistoryAdditionalInfoArgs'] additional_infos: The additional field of an alarm record.
        :param Sequence['GetAlarmHistoriesAlarmHistoryAlarmActionArgs'] alarm_actions: The action to be triggered by an alarm.
        :param _builtins.str alarm_id: Specifies an alarm ID.
        :param _builtins.str alarm_recovery_time: The UTC time when the alarm was cleared.
        :param _builtins.str begin_time: When an alarm record is generated (UTC time).
        :param Sequence['GetAlarmHistoriesAlarmHistoryConditionArgs'] conditions: The conditions for triggering an alarm.
        :param Sequence['GetAlarmHistoriesAlarmHistoryDataPointArgs'] data_points: The time when the resource monitoring data is reported and the monitoring data in the alarm record.
        :param _builtins.str end_time: When an alarm record becomes invalid (UTC time).
        :param _builtins.str first_alarm_time: The UTC time when the alarm was generated for the first time.
        :param _builtins.str last_alarm_time: The UTC time when the alarm was generated for the last time.
        :param _builtins.int level: Specifies the alarm severity.
               The valid value can be **1** (critical), **2** (major), **3** (minor) or **4** (informational).
        :param Sequence['GetAlarmHistoriesAlarmHistoryMetricArgs'] metrics: The metric information.
        :param _builtins.str name: Specifies the alarm rule name.
        :param Sequence['GetAlarmHistoriesAlarmHistoryOkActionArgs'] ok_actions: The action to be triggered after an alarm is cleared.
        :param _builtins.str record_id: Specifies the alarm record ID.
        :param _builtins.str status: Specifies the alarm rule status.
               The valid value can be **ok**, **alarm** or **invalid**.
        :param _builtins.str type: The notification type.
        """
        pulumi.set(__self__, "action_enabled", action_enabled)
        pulumi.set(__self__, "additional_infos", additional_infos)
        pulumi.set(__self__, "alarm_actions", alarm_actions)
        pulumi.set(__self__, "alarm_id", alarm_id)
        pulumi.set(__self__, "alarm_recovery_time", alarm_recovery_time)
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "data_points", data_points)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "first_alarm_time", first_alarm_time)
        pulumi.set(__self__, "last_alarm_time", last_alarm_time)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ok_actions", ok_actions)
        pulumi.set(__self__, "record_id", record_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="actionEnabled")
    def action_enabled(self) -> _builtins.bool:
        """
        Whether to send a notification.
        """
        return pulumi.get(self, "action_enabled")

    @_builtins.property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Sequence['outputs.GetAlarmHistoriesAlarmHistoryAdditionalInfoResult']:
        """
        The additional field of an alarm record.
        """
        return pulumi.get(self, "additional_infos")

    @_builtins.property
    @pulumi.getter(name="alarmActions")
    def alarm_actions(self) -> Sequence['outputs.GetAlarmHistoriesAlarmHistoryAlarmActionResult']:
        """
        The action to be triggered by an alarm.
        """
        return pulumi.get(self, "alarm_actions")

    @_builtins.property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> _builtins.str:
        """
        Specifies an alarm ID.
        """
        return pulumi.get(self, "alarm_id")

    @_builtins.property
    @pulumi.getter(name="alarmRecoveryTime")
    def alarm_recovery_time(self) -> _builtins.str:
        """
        The UTC time when the alarm was cleared.
        """
        return pulumi.get(self, "alarm_recovery_time")

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        When an alarm record is generated (UTC time).
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetAlarmHistoriesAlarmHistoryConditionResult']:
        """
        The conditions for triggering an alarm.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="dataPoints")
    def data_points(self) -> Sequence['outputs.GetAlarmHistoriesAlarmHistoryDataPointResult']:
        """
        The time when the resource monitoring data is reported and the monitoring data in the alarm record.
        """
        return pulumi.get(self, "data_points")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        When an alarm record becomes invalid (UTC time).
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="firstAlarmTime")
    def first_alarm_time(self) -> _builtins.str:
        """
        The UTC time when the alarm was generated for the first time.
        """
        return pulumi.get(self, "first_alarm_time")

    @_builtins.property
    @pulumi.getter(name="lastAlarmTime")
    def last_alarm_time(self) -> _builtins.str:
        """
        The UTC time when the alarm was generated for the last time.
        """
        return pulumi.get(self, "last_alarm_time")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.int:
        """
        Specifies the alarm severity.
        The valid value can be **1** (critical), **2** (major), **3** (minor) or **4** (informational).
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetAlarmHistoriesAlarmHistoryMetricResult']:
        """
        The metric information.
        """
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the alarm rule name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="okActions")
    def ok_actions(self) -> Sequence['outputs.GetAlarmHistoriesAlarmHistoryOkActionResult']:
        """
        The action to be triggered after an alarm is cleared.
        """
        return pulumi.get(self, "ok_actions")

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> _builtins.str:
        """
        Specifies the alarm record ID.
        """
        return pulumi.get(self, "record_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the alarm rule status.
        The valid value can be **ok**, **alarm** or **invalid**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The notification type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmHistoriesAlarmHistoryAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 event_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str):
        """
        :param _builtins.str event_id: The ID of the event in the alarm record.
        :param _builtins.str resource_id: Specifies the ID of a resource in an alarm rule.
        :param _builtins.str resource_name: The resource name corresponding to the alarm record.
        """
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)

    @_builtins.property
    @pulumi.getter(name="eventId")
    def event_id(self) -> _builtins.str:
        """
        The ID of the event in the alarm record.
        """
        return pulumi.get(self, "event_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the ID of a resource in an alarm rule.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The resource name corresponding to the alarm record.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class GetAlarmHistoriesAlarmHistoryAlarmActionResult(dict):
    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] notification_lists: The list of objects to be notified if the alarm status changes.
        :param _builtins.str type: The notification type.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        """
        The list of objects to be notified if the alarm status changes.
        """
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The notification type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmHistoriesAlarmHistoryConditionResult(dict):
    def __init__(__self__, *,
                 comparison_operator: _builtins.str,
                 count: _builtins.int,
                 filter: _builtins.str,
                 period: _builtins.int,
                 suppress_duration: _builtins.int,
                 unit: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str comparison_operator: The threshold symbol.
        :param _builtins.int count: The number of times that the alarm triggering conditions are met.
        :param _builtins.str filter: The rollup method.
        :param _builtins.int period: The rollup period of a metric, in seconds.
        :param _builtins.int suppress_duration: The alarm suppression time, in seconds.
        :param _builtins.str unit: The data unit.
        :param _builtins.float value: The resource monitoring data of the alarm record at the time point.
        """
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "suppress_duration", suppress_duration)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> _builtins.str:
        """
        The threshold symbol.
        """
        return pulumi.get(self, "comparison_operator")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The number of times that the alarm triggering conditions are met.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        """
        The rollup method.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        The rollup period of a metric, in seconds.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="suppressDuration")
    def suppress_duration(self) -> _builtins.int:
        """
        The alarm suppression time, in seconds.
        """
        return pulumi.get(self, "suppress_duration")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The data unit.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The resource monitoring data of the alarm record at the time point.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmHistoriesAlarmHistoryDataPointResult(dict):
    def __init__(__self__, *,
                 time: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str time: The UTC time when the resource monitoring data of the alarm record is reported.
        :param _builtins.float value: The resource monitoring data of the alarm record at the time point.
        """
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        The UTC time when the resource monitoring data of the alarm record is reported.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The resource monitoring data of the alarm record at the time point.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmHistoriesAlarmHistoryMetricResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetAlarmHistoriesAlarmHistoryMetricDimensionResult'],
                 metric_name: _builtins.str,
                 namespace: _builtins.str):
        """
        :param Sequence['GetAlarmHistoriesAlarmHistoryMetricDimensionArgs'] dimensions: The metric dimension.
        :param _builtins.str metric_name: The metric name of a resource.
        :param _builtins.str namespace: Specifies the namespace of a service.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetAlarmHistoriesAlarmHistoryMetricDimensionResult']:
        """
        The metric dimension.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The metric name of a resource.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the namespace of a service.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetAlarmHistoriesAlarmHistoryMetricDimensionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the alarm rule name.
        :param _builtins.str value: The resource monitoring data of the alarm record at the time point.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the alarm rule name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The resource monitoring data of the alarm record at the time point.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmHistoriesAlarmHistoryOkActionResult(dict):
    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] notification_lists: The list of objects to be notified if the alarm status changes.
        :param _builtins.str type: The notification type.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        """
        The list of objects to be notified if the alarm status changes.
        """
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The notification type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmTemplateAssociationAlarmsAlarmResult(dict):
    def __init__(__self__, *,
                 alarm_id: _builtins.str,
                 description: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str alarm_id: The ID of an alarm rule.
        :param _builtins.str description: The description of an alarm rule.
        :param _builtins.str name: The name of an alarm rule.
        """
        pulumi.set(__self__, "alarm_id", alarm_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> _builtins.str:
        """
        The ID of an alarm rule.
        """
        return pulumi.get(self, "alarm_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of an alarm rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of an alarm rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAlarmTemplatesAlarmTemplateResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 name: _builtins.str,
                 template_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the alarm template.
        :param _builtins.str description: The alarm template description.
        :param _builtins.str name: Specifies the name of an alarm template.
        :param _builtins.str template_id: The alarm template ID.
        :param _builtins.str type: Specifies the alarm template type.
               The valid values are as follows:
               + **system**: default metric template.
               + **custom**: custom metric template.
               + **system_event**: default event template.
               + **custom_event**: custom event template.
               + **system_custom_event**: all event templates.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "template_id", template_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the alarm template.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The alarm template description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of an alarm template.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> _builtins.str:
        """
        The alarm template ID.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the alarm template type.
        The valid values are as follows:
        + **system**: default metric template.
        + **custom**: custom metric template.
        + **system_event**: default event template.
        + **custom_event**: custom event template.
        + **system_custom_event**: all event templates.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmrulesAlarmResult(dict):
    def __init__(__self__, *,
                 alarm_action_enabled: _builtins.bool,
                 alarm_actions: Sequence['outputs.GetAlarmrulesAlarmAlarmActionResult'],
                 alarm_description: _builtins.str,
                 alarm_enabled: _builtins.bool,
                 alarm_id: _builtins.str,
                 alarm_name: _builtins.str,
                 alarm_template_id: _builtins.str,
                 alarm_type: _builtins.str,
                 conditions: Sequence['outputs.GetAlarmrulesAlarmConditionResult'],
                 enterprise_project_id: _builtins.str,
                 namespace: _builtins.str,
                 notification_begin_time: _builtins.str,
                 notification_end_time: _builtins.str,
                 ok_actions: Sequence['outputs.GetAlarmrulesAlarmOkActionResult'],
                 resources: Sequence['outputs.GetAlarmrulesAlarmResourceResult']):
        """
        :param _builtins.bool alarm_action_enabled: Whether to enable the action to be triggered by an alarm.
        :param Sequence['GetAlarmrulesAlarmAlarmActionArgs'] alarm_actions: The action to be triggered by an alarm.
        :param _builtins.str alarm_description: The alarm rule description.
        :param _builtins.bool alarm_enabled: Whether to generate alarms when the alarm triggering conditions are met.
        :param _builtins.str alarm_id: Specifies the alarm rule ID.
        :param _builtins.str alarm_name: The alarm rule name.
        :param _builtins.str alarm_template_id: The ID of an alarm template associated with an alarm rule.
        :param _builtins.str alarm_type: The alarm rule type.
        :param Sequence['GetAlarmrulesAlarmConditionArgs'] conditions: The alarm triggering condition list.
        :param _builtins.str enterprise_project_id: The enterprise project ID.
        :param _builtins.str namespace: Specifies the namespace of a service.
        :param _builtins.str notification_begin_time: The time when the alarm notification was enabled.
        :param _builtins.str notification_end_time: The time when the alarm notification was disabled.
        :param Sequence['GetAlarmrulesAlarmOkActionArgs'] ok_actions: The action to be triggered after an alarm is cleared.
        :param Sequence['GetAlarmrulesAlarmResourceArgs'] resources: The resource list.
        """
        pulumi.set(__self__, "alarm_action_enabled", alarm_action_enabled)
        pulumi.set(__self__, "alarm_actions", alarm_actions)
        pulumi.set(__self__, "alarm_description", alarm_description)
        pulumi.set(__self__, "alarm_enabled", alarm_enabled)
        pulumi.set(__self__, "alarm_id", alarm_id)
        pulumi.set(__self__, "alarm_name", alarm_name)
        pulumi.set(__self__, "alarm_template_id", alarm_template_id)
        pulumi.set(__self__, "alarm_type", alarm_type)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "notification_begin_time", notification_begin_time)
        pulumi.set(__self__, "notification_end_time", notification_end_time)
        pulumi.set(__self__, "ok_actions", ok_actions)
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter(name="alarmActionEnabled")
    def alarm_action_enabled(self) -> _builtins.bool:
        """
        Whether to enable the action to be triggered by an alarm.
        """
        return pulumi.get(self, "alarm_action_enabled")

    @_builtins.property
    @pulumi.getter(name="alarmActions")
    def alarm_actions(self) -> Sequence['outputs.GetAlarmrulesAlarmAlarmActionResult']:
        """
        The action to be triggered by an alarm.
        """
        return pulumi.get(self, "alarm_actions")

    @_builtins.property
    @pulumi.getter(name="alarmDescription")
    def alarm_description(self) -> _builtins.str:
        """
        The alarm rule description.
        """
        return pulumi.get(self, "alarm_description")

    @_builtins.property
    @pulumi.getter(name="alarmEnabled")
    def alarm_enabled(self) -> _builtins.bool:
        """
        Whether to generate alarms when the alarm triggering conditions are met.
        """
        return pulumi.get(self, "alarm_enabled")

    @_builtins.property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> _builtins.str:
        """
        Specifies the alarm rule ID.
        """
        return pulumi.get(self, "alarm_id")

    @_builtins.property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> _builtins.str:
        """
        The alarm rule name.
        """
        return pulumi.get(self, "alarm_name")

    @_builtins.property
    @pulumi.getter(name="alarmTemplateId")
    def alarm_template_id(self) -> _builtins.str:
        """
        The ID of an alarm template associated with an alarm rule.
        """
        return pulumi.get(self, "alarm_template_id")

    @_builtins.property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> _builtins.str:
        """
        The alarm rule type.
        """
        return pulumi.get(self, "alarm_type")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetAlarmrulesAlarmConditionResult']:
        """
        The alarm triggering condition list.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the namespace of a service.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="notificationBeginTime")
    def notification_begin_time(self) -> _builtins.str:
        """
        The time when the alarm notification was enabled.
        """
        return pulumi.get(self, "notification_begin_time")

    @_builtins.property
    @pulumi.getter(name="notificationEndTime")
    def notification_end_time(self) -> _builtins.str:
        """
        The time when the alarm notification was disabled.
        """
        return pulumi.get(self, "notification_end_time")

    @_builtins.property
    @pulumi.getter(name="okActions")
    def ok_actions(self) -> Sequence['outputs.GetAlarmrulesAlarmOkActionResult']:
        """
        The action to be triggered after an alarm is cleared.
        """
        return pulumi.get(self, "ok_actions")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetAlarmrulesAlarmResourceResult']:
        """
        The resource list.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetAlarmrulesAlarmAlarmActionResult(dict):
    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] notification_lists: The list of objects to be notified if the alarm status changes.
        :param _builtins.str type: The type of action triggered by an alarm.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        """
        The list of objects to be notified if the alarm status changes.
        """
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of action triggered by an alarm.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmrulesAlarmConditionResult(dict):
    def __init__(__self__, *,
                 alarm_level: _builtins.int,
                 comparison_operator: _builtins.str,
                 count: _builtins.int,
                 filter: _builtins.str,
                 metric_name: _builtins.str,
                 period: _builtins.int,
                 suppress_duration: _builtins.int,
                 unit: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.int alarm_level: The alarm severity.
        :param _builtins.str comparison_operator: The comparison condition of alarm thresholds.
        :param _builtins.int count: The number of times that the alarm triggering conditions are met.
        :param _builtins.str filter: The filter method.
        :param _builtins.str metric_name: The metric name of a resource.
        :param _builtins.int period: The monitoring period of a metric.
        :param _builtins.int suppress_duration: The interval for triggering an alarm if the alarm persists.
        :param _builtins.str unit: The metric unit.
        :param _builtins.float value: The alarm threshold.
        """
        pulumi.set(__self__, "alarm_level", alarm_level)
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "suppress_duration", suppress_duration)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> _builtins.int:
        """
        The alarm severity.
        """
        return pulumi.get(self, "alarm_level")

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> _builtins.str:
        """
        The comparison condition of alarm thresholds.
        """
        return pulumi.get(self, "comparison_operator")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The number of times that the alarm triggering conditions are met.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        """
        The filter method.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The metric name of a resource.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        The monitoring period of a metric.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="suppressDuration")
    def suppress_duration(self) -> _builtins.int:
        """
        The interval for triggering an alarm if the alarm persists.
        """
        return pulumi.get(self, "suppress_duration")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The metric unit.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The alarm threshold.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmrulesAlarmOkActionResult(dict):
    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] notification_lists: The list of objects to be notified if the alarm status changes.
        :param _builtins.str type: The type of action triggered by an alarm.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        """
        The list of objects to be notified if the alarm status changes.
        """
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of action triggered by an alarm.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmrulesAlarmResourceResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetAlarmrulesAlarmResourceDimensionResult'],
                 resource_group_id: _builtins.str,
                 resource_group_name: _builtins.str):
        """
        :param Sequence['GetAlarmrulesAlarmResourceDimensionArgs'] dimensions: The dimension information.
        :param _builtins.str resource_group_id: The resource group ID.
        :param _builtins.str resource_group_name: The resource group name.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        pulumi.set(__self__, "resource_group_name", resource_group_name)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetAlarmrulesAlarmResourceDimensionResult']:
        """
        The dimension information.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        """
        The resource group ID.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        """
        The resource group name.
        """
        return pulumi.get(self, "resource_group_name")


@pulumi.output_type
class GetAlarmrulesAlarmResourceDimensionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: Specifies the name of an alarm rule.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of an alarm rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDashboardWidgetsWidgetResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 locations: Sequence['outputs.GetDashboardWidgetsWidgetLocationResult'],
                 metric_display_mode: _builtins.str,
                 metrics: Sequence['outputs.GetDashboardWidgetsWidgetMetricResult'],
                 properties: Sequence['outputs.GetDashboardWidgetsWidgetPropertyResult'],
                 threshold: _builtins.float,
                 threshold_enabled: _builtins.bool,
                 title: _builtins.str,
                 unit: _builtins.str,
                 view: _builtins.str,
                 widget_id: _builtins.str):
        """
        :param _builtins.str created_at: When the dashboard widget was created.
        :param Sequence['GetDashboardWidgetsWidgetLocationArgs'] locations: The dashboard widget coordinates.
        :param _builtins.str metric_display_mode: How many metrics will be displayed on one widget.
        :param Sequence['GetDashboardWidgetsWidgetMetricArgs'] metrics: The metric list.
        :param Sequence['GetDashboardWidgetsWidgetPropertyArgs'] properties: The additional information.
        :param _builtins.float threshold: The threshold of metrics on the graph.
        :param _builtins.bool threshold_enabled: Whether to display the threshold of metrics.
        :param _builtins.str title: The dashboard widget title.
        :param _builtins.str unit: The metric unit.
        :param _builtins.str view: The graph type.
        :param _builtins.str widget_id: The dashboard widget ID.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "metric_display_mode", metric_display_mode)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "threshold_enabled", threshold_enabled)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "view", view)
        pulumi.set(__self__, "widget_id", widget_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        When the dashboard widget was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetDashboardWidgetsWidgetLocationResult']:
        """
        The dashboard widget coordinates.
        """
        return pulumi.get(self, "locations")

    @_builtins.property
    @pulumi.getter(name="metricDisplayMode")
    def metric_display_mode(self) -> _builtins.str:
        """
        How many metrics will be displayed on one widget.
        """
        return pulumi.get(self, "metric_display_mode")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetDashboardWidgetsWidgetMetricResult']:
        """
        The metric list.
        """
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDashboardWidgetsWidgetPropertyResult']:
        """
        The additional information.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.float:
        """
        The threshold of metrics on the graph.
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="thresholdEnabled")
    def threshold_enabled(self) -> _builtins.bool:
        """
        Whether to display the threshold of metrics.
        """
        return pulumi.get(self, "threshold_enabled")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The dashboard widget title.
        """
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The metric unit.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def view(self) -> _builtins.str:
        """
        The graph type.
        """
        return pulumi.get(self, "view")

    @_builtins.property
    @pulumi.getter(name="widgetId")
    def widget_id(self) -> _builtins.str:
        """
        The dashboard widget ID.
        """
        return pulumi.get(self, "widget_id")


@pulumi.output_type
class GetDashboardWidgetsWidgetLocationResult(dict):
    def __init__(__self__, *,
                 height: _builtins.int,
                 left: _builtins.int,
                 top: _builtins.int,
                 width: _builtins.int):
        """
        :param _builtins.int height: The dashboard widget height.
        :param _builtins.int left: The grids between the widget and the left side of the dashboard.
        :param _builtins.int top: The grids between the widget and the top of the dashboard.
        :param _builtins.int width: The dashboard widget width.
        """
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "left", left)
        pulumi.set(__self__, "top", top)
        pulumi.set(__self__, "width", width)

    @_builtins.property
    @pulumi.getter
    def height(self) -> _builtins.int:
        """
        The dashboard widget height.
        """
        return pulumi.get(self, "height")

    @_builtins.property
    @pulumi.getter
    def left(self) -> _builtins.int:
        """
        The grids between the widget and the left side of the dashboard.
        """
        return pulumi.get(self, "left")

    @_builtins.property
    @pulumi.getter
    def top(self) -> _builtins.int:
        """
        The grids between the widget and the top of the dashboard.
        """
        return pulumi.get(self, "top")

    @_builtins.property
    @pulumi.getter
    def width(self) -> _builtins.int:
        """
        The dashboard widget width.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class GetDashboardWidgetsWidgetMetricResult(dict):
    def __init__(__self__, *,
                 aliases: Sequence[_builtins.str],
                 dimensions: Sequence['outputs.GetDashboardWidgetsWidgetMetricDimensionResult'],
                 metric_name: _builtins.str,
                 namespace: _builtins.str):
        """
        :param Sequence[_builtins.str] aliases: The alias list of metrics on the dashboard widget.
        :param Sequence['GetDashboardWidgetsWidgetMetricDimensionArgs'] dimensions: The dimension list.
        :param _builtins.str metric_name: The metric name.
        :param _builtins.str namespace: The cloud service dimension.
        """
        pulumi.set(__self__, "aliases", aliases)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def aliases(self) -> Sequence[_builtins.str]:
        """
        The alias list of metrics on the dashboard widget.
        """
        return pulumi.get(self, "aliases")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetDashboardWidgetsWidgetMetricDimensionResult']:
        """
        The dimension list.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The metric name.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The cloud service dimension.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetDashboardWidgetsWidgetMetricDimensionResult(dict):
    def __init__(__self__, *,
                 filter_type: _builtins.str,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str filter_type: The resource type.
        :param _builtins.str name: The dimension name.
        :param Sequence[_builtins.str] values: The dimension value list.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "filter_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The dimension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The dimension value list.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDashboardWidgetsWidgetPropertyResult(dict):
    def __init__(__self__, *,
                 filter: _builtins.str,
                 order: _builtins.str,
                 top_n: _builtins.int):
        """
        :param _builtins.str filter: How metric data is aggregated.
        :param _builtins.str order: How top n resources by a metric are sorted on a widget.
        :param _builtins.int top_n: The top n resources sorted by a metric.
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "top_n", top_n)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        """
        How metric data is aggregated.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def order(self) -> _builtins.str:
        """
        How top n resources by a metric are sorted on a widget.
        """
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter(name="topN")
    def top_n(self) -> _builtins.int:
        """
        The top n resources sorted by a metric.
        """
        return pulumi.get(self, "top_n")


@pulumi.output_type
class GetDashboardsDashboardResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 creator_name: _builtins.str,
                 dashboard_id: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 is_favorite: _builtins.bool,
                 name: _builtins.str,
                 row_widget_num: _builtins.int):
        """
        :param _builtins.str created_at: The creation time of the dashboard.
        :param _builtins.str creator_name: The creator of the dashboard.
        :param _builtins.str dashboard_id: Specifies the dashboard ID.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.bool is_favorite: Specifies whether a dashboard in an enterprise project is added to favorites.
               The value can be **true** (added to favorites) or **false** (not added to favorites).
               If this parameter is specified, **enterprise_project_id** is mandatory.
        :param _builtins.str name: Specifies the dashboard name.
        :param _builtins.int row_widget_num: The monitoring view display mode.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator_name", creator_name)
        pulumi.set(__self__, "dashboard_id", dashboard_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "row_widget_num", row_widget_num)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the dashboard.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="creatorName")
    def creator_name(self) -> _builtins.str:
        """
        The creator of the dashboard.
        """
        return pulumi.get(self, "creator_name")

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> _builtins.str:
        """
        Specifies the dashboard ID.
        """
        return pulumi.get(self, "dashboard_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> _builtins.bool:
        """
        Specifies whether a dashboard in an enterprise project is added to favorites.
        The value can be **true** (added to favorites) or **false** (not added to favorites).
        If this parameter is specified, **enterprise_project_id** is mandatory.
        """
        return pulumi.get(self, "is_favorite")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the dashboard name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="rowWidgetNum")
    def row_widget_num(self) -> _builtins.int:
        """
        The monitoring view display mode.
        """
        return pulumi.get(self, "row_widget_num")


@pulumi.output_type
class GetEventDetailsEventInfoResult(dict):
    def __init__(__self__, *,
                 details: Sequence['outputs.GetEventDetailsEventInfoDetailResult'],
                 event_id: _builtins.str,
                 event_name: _builtins.str,
                 event_source: _builtins.str,
                 time: _builtins.str):
        """
        :param Sequence['GetEventDetailsEventInfoDetailArgs'] details: The event detail.
        :param _builtins.str event_id: The event ID.
        :param _builtins.str event_name: The event name.
        :param _builtins.str event_source: The event source.
        :param _builtins.str time: The time when the event occurred.
        """
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "event_source", event_source)
        pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetEventDetailsEventInfoDetailResult']:
        """
        The event detail.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="eventId")
    def event_id(self) -> _builtins.str:
        """
        The event ID.
        """
        return pulumi.get(self, "event_id")

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> _builtins.str:
        """
        The event name.
        """
        return pulumi.get(self, "event_name")

    @_builtins.property
    @pulumi.getter(name="eventSource")
    def event_source(self) -> _builtins.str:
        """
        The event source.
        """
        return pulumi.get(self, "event_source")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        The time when the event occurred.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetEventDetailsEventInfoDetailResult(dict):
    def __init__(__self__, *,
                 content: _builtins.str,
                 dimensions: Sequence['outputs.GetEventDetailsEventInfoDetailDimensionResult'],
                 event_level: _builtins.str,
                 event_state: _builtins.str,
                 event_type: _builtins.str,
                 event_user: _builtins.str,
                 group_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str):
        """
        :param _builtins.str content: The event content.
        :param Sequence['GetEventDetailsEventInfoDetailDimensionArgs'] dimensions: The resource dimensions.
        :param _builtins.str event_level: The event level.
        :param _builtins.str event_state: The event status.
        :param _builtins.str event_type: The event type.
        :param _builtins.str event_user: The event user.
        :param _builtins.str group_id: The group that the event belongs to.
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str resource_name: The resource name.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "event_level", event_level)
        pulumi.set(__self__, "event_state", event_state)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "event_user", event_user)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The event content.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetEventDetailsEventInfoDetailDimensionResult']:
        """
        The resource dimensions.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="eventLevel")
    def event_level(self) -> _builtins.str:
        """
        The event level.
        """
        return pulumi.get(self, "event_level")

    @_builtins.property
    @pulumi.getter(name="eventState")
    def event_state(self) -> _builtins.str:
        """
        The event status.
        """
        return pulumi.get(self, "event_state")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> _builtins.str:
        """
        The event type.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter(name="eventUser")
    def event_user(self) -> _builtins.str:
        """
        The event user.
        """
        return pulumi.get(self, "event_user")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        The group that the event belongs to.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class GetEventDetailsEventInfoDetailDimensionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the event name.
        :param _builtins.str value: The resource dimension value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the event name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The resource dimension value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetEventsEventResult(dict):
    def __init__(__self__, *,
                 event_count: _builtins.int,
                 event_name: _builtins.str,
                 event_type: _builtins.str,
                 latest_event_source: _builtins.str,
                 latest_occur_time: _builtins.str):
        """
        :param _builtins.int event_count: The number of occurrences of this event within the specified query time range.
        :param _builtins.str event_name: The event name.
        :param _builtins.str event_type: The event type.
        :param _builtins.str latest_event_source: The latest event source.
        :param _builtins.str latest_occur_time: The time when the event last occurred. The time is in UTC.
        """
        pulumi.set(__self__, "event_count", event_count)
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "latest_event_source", latest_event_source)
        pulumi.set(__self__, "latest_occur_time", latest_occur_time)

    @_builtins.property
    @pulumi.getter(name="eventCount")
    def event_count(self) -> _builtins.int:
        """
        The number of occurrences of this event within the specified query time range.
        """
        return pulumi.get(self, "event_count")

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> _builtins.str:
        """
        The event name.
        """
        return pulumi.get(self, "event_name")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> _builtins.str:
        """
        The event type.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter(name="latestEventSource")
    def latest_event_source(self) -> _builtins.str:
        """
        The latest event source.
        """
        return pulumi.get(self, "latest_event_source")

    @_builtins.property
    @pulumi.getter(name="latestOccurTime")
    def latest_occur_time(self) -> _builtins.str:
        """
        The time when the event last occurred. The time is in UTC.
        """
        return pulumi.get(self, "latest_occur_time")


@pulumi.output_type
class GetMetricDataDatapointResult(dict):
    def __init__(__self__, *,
                 average: _builtins.float,
                 max: _builtins.float,
                 min: _builtins.float,
                 sum: _builtins.float,
                 timestamp: _builtins.int,
                 unit: _builtins.str,
                 variance: _builtins.float):
        """
        :param _builtins.float average: The average value of metric data within a rollup period.
        :param _builtins.float max: The maximum value of metric data within a rollup period.
        :param _builtins.float min: The minimum value of metric data within a rollup period.
        :param _builtins.float sum: The sum of metric data within a rollup period.
        :param _builtins.int timestamp: The time when the metric is collected. The time is a UNIX timestamp and the unit is ms.
        :param _builtins.str unit: The metric unit.
        :param _builtins.float variance: The variance of metric data within a rollup period.
        """
        pulumi.set(__self__, "average", average)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "sum", sum)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "variance", variance)

    @_builtins.property
    @pulumi.getter
    def average(self) -> _builtins.float:
        """
        The average value of metric data within a rollup period.
        """
        return pulumi.get(self, "average")

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.float:
        """
        The maximum value of metric data within a rollup period.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.float:
        """
        The minimum value of metric data within a rollup period.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def sum(self) -> _builtins.float:
        """
        The sum of metric data within a rollup period.
        """
        return pulumi.get(self, "sum")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> _builtins.int:
        """
        The time when the metric is collected. The time is a UNIX timestamp and the unit is ms.
        """
        return pulumi.get(self, "timestamp")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The metric unit.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def variance(self) -> _builtins.float:
        """
        The variance of metric data within a rollup period.
        """
        return pulumi.get(self, "variance")


@pulumi.output_type
class GetMetricsMetricResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetMetricsMetricDimensionResult'],
                 metric_name: _builtins.str,
                 namespace: _builtins.str,
                 unit: _builtins.str):
        """
        :param Sequence['GetMetricsMetricDimensionArgs'] dimensions: The metric dimension list.
        :param _builtins.str metric_name: The metric name.
        :param _builtins.str namespace: The metric namespace.
        :param _builtins.str unit: The metric unit.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetMetricsMetricDimensionResult']:
        """
        The metric dimension list.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The metric name.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The metric namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The metric unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetMetricsMetricDimensionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The resource dimension name.
        :param _builtins.str value: The resource dimension value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The resource dimension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The resource dimension value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMicroserviceEngineConfigurationsConfigurationResult(dict):
    def __init__(__self__, *,
                 create_revision: _builtins.int,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 key: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 update_revision: _builtins.int,
                 updated_at: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str):
        """
        :param _builtins.int create_revision: The create version of the configuration.
        :param _builtins.str created_at: The creation time of the configuration, in RFC3339 format.
        :param _builtins.str id: The ID of the microservice engine configuration.
        :param _builtins.str key: The configuration key (item name).
        :param _builtins.str status: The configuration status.
               + **enabled**
               + **disabled**
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the configuration.
        :param _builtins.int update_revision: The update version of the configuration.
        :param _builtins.str updated_at: The latest update time of the configuration, in RFC3339 format.
        :param _builtins.str value: The configuration value.
        :param _builtins.str value_type: The type of the configuration value.
               + **ini**
               + **json**
               + **text**
               + **yaml**
               + **properties**
               + **xml**
        """
        pulumi.set(__self__, "create_revision", create_revision)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_revision", update_revision)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter(name="createRevision")
    def create_revision(self) -> _builtins.int:
        """
        The create version of the configuration.
        """
        return pulumi.get(self, "create_revision")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the configuration, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the microservice engine configuration.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The configuration key (item name).
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The configuration status.
        + **enabled**
        + **disabled**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the configuration.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updateRevision")
    def update_revision(self) -> _builtins.int:
        """
        The update version of the configuration.
        """
        return pulumi.get(self, "update_revision")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the configuration, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The configuration value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        """
        The type of the configuration value.
        + **ini**
        + **json**
        + **text**
        + **yaml**
        + **properties**
        + **xml**
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetMicroserviceEngineFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 specs: Sequence['outputs.GetMicroserviceEngineFlavorsFlavorSpecResult']):
        """
        :param _builtins.str id: The ID of the microservice engine flavor.
        :param Sequence['GetMicroserviceEngineFlavorsFlavorSpecArgs'] specs: The specification detail of the microservice engine flavor.  
               The spec structure is documented below.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "specs", specs)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the microservice engine flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetMicroserviceEngineFlavorsFlavorSpecResult']:
        """
        The specification detail of the microservice engine flavor.  
        The spec structure is documented below.
        """
        return pulumi.get(self, "specs")


@pulumi.output_type
class GetMicroserviceEngineFlavorsFlavorSpecResult(dict):
    def __init__(__self__, *,
                 available_cpu_memory: _builtins.str,
                 available_prefix: _builtins.str,
                 linear: _builtins.str):
        """
        :param _builtins.str available_cpu_memory: The CPU and memory combinations (each value separated by a hyphen) that the flavor is
               allowed, in string format and separated by the commas (,).
               For example, **2-4,4-8** means this flavors supports **2u4g** and **4u8g** instances create.
        :param _builtins.str available_prefix: The flavor name prefix of the available node, e.g. **s,c,t**.
        :param _builtins.str linear: Whether the microservice engine flavor is a linear flavor, in string format.
               + **true**
               + **false**
        """
        pulumi.set(__self__, "available_cpu_memory", available_cpu_memory)
        pulumi.set(__self__, "available_prefix", available_prefix)
        pulumi.set(__self__, "linear", linear)

    @_builtins.property
    @pulumi.getter(name="availableCpuMemory")
    def available_cpu_memory(self) -> _builtins.str:
        """
        The CPU and memory combinations (each value separated by a hyphen) that the flavor is
        allowed, in string format and separated by the commas (,).
        For example, **2-4,4-8** means this flavors supports **2u4g** and **4u8g** instances create.
        """
        return pulumi.get(self, "available_cpu_memory")

    @_builtins.property
    @pulumi.getter(name="availablePrefix")
    def available_prefix(self) -> _builtins.str:
        """
        The flavor name prefix of the available node, e.g. **s,c,t**.
        """
        return pulumi.get(self, "available_prefix")

    @_builtins.property
    @pulumi.getter
    def linear(self) -> _builtins.str:
        """
        Whether the microservice engine flavor is a linear flavor, in string format.
        + **true**
        + **false**
        """
        return pulumi.get(self, "linear")


@pulumi.output_type
class GetMicroserviceEnginesEngineResult(dict):
    def __init__(__self__, *,
                 auth_type: _builtins.str,
                 availability_zones: Sequence[_builtins.str],
                 config_center_addresses: Sequence['outputs.GetMicroserviceEnginesEngineConfigCenterAddressResult'],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 eip_id: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 extend_params: Mapping[str, _builtins.str],
                 flavor: _builtins.str,
                 id: _builtins.str,
                 instance_limit: _builtins.int,
                 name: _builtins.str,
                 network_id: _builtins.str,
                 service_limit: _builtins.int,
                 service_registry_addresses: Sequence['outputs.GetMicroserviceEnginesEngineServiceRegistryAddressResult'],
                 status: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str auth_type: The authentication method for the dedicated microservice engine
               + **RBAC**
               + **NONE**
        :param Sequence[_builtins.str] availability_zones: The list of availability zones.
        :param Sequence['GetMicroserviceEnginesEngineConfigCenterAddressArgs'] config_center_addresses: The addresses of config center.  
               The config_center_addresses structure is documented below.
        :param _builtins.str created_at: The creation time of the dedicated microservice engine, in RFC3339 format.
        :param _builtins.str description: The description of the dedicated microservice engine.
        :param _builtins.str eip_id: The EIP ID to which the dedicated microservice engine assocated.
        :param _builtins.str enterprise_project_id: The enterprise project ID to which the dedicated microservice engine belongs.
        :param Mapping[str, _builtins.str] extend_params: The additional parameters for the dedicated microservice engine.
        :param _builtins.str flavor: The flavor name of the dedicated microservice engine.
        :param _builtins.str id: The ID of the dedicated microservice engine.
        :param _builtins.int instance_limit: The maximum number of the microservice instance resources.
        :param _builtins.str name: The name of the dedicated microservice engine.
        :param _builtins.str network_id: The network ID of the subnet to which the dedicated microservice engine belongs.
        :param _builtins.int service_limit: The maximum number of the microservice resources.
        :param Sequence['GetMicroserviceEnginesEngineServiceRegistryAddressArgs'] service_registry_addresses: The connection addresses of service center.  
               The service_registry_addresses structure is documented below.
        :param _builtins.str status: The status of the dedicated microservice engine.
               + **Creating**
               + **Available**
               + **Unavailable**
               + **Deleting**
               + **Deleted**
               + **Upgrading**
               + **Modifying**
               + **CreateFailed**
               + **DeleteFailed**
               + **UpgradeFailed**
               + **ModifyFailed**
               + **Freezed**
        :param _builtins.str version: The version of the dedicated microservice engine.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "config_center_addresses", config_center_addresses)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_limit", instance_limit)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "service_limit", service_limit)
        pulumi.set(__self__, "service_registry_addresses", service_registry_addresses)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> _builtins.str:
        """
        The authentication method for the dedicated microservice engine
        + **RBAC**
        + **NONE**
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        The list of availability zones.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="configCenterAddresses")
    def config_center_addresses(self) -> Sequence['outputs.GetMicroserviceEnginesEngineConfigCenterAddressResult']:
        """
        The addresses of config center.  
        The config_center_addresses structure is documented below.
        """
        return pulumi.get(self, "config_center_addresses")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the dedicated microservice engine, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the dedicated microservice engine.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> _builtins.str:
        """
        The EIP ID to which the dedicated microservice engine assocated.
        """
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID to which the dedicated microservice engine belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, _builtins.str]:
        """
        The additional parameters for the dedicated microservice engine.
        """
        return pulumi.get(self, "extend_params")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        The flavor name of the dedicated microservice engine.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the dedicated microservice engine.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceLimit")
    def instance_limit(self) -> _builtins.int:
        """
        The maximum number of the microservice instance resources.
        """
        return pulumi.get(self, "instance_limit")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the dedicated microservice engine.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        The network ID of the subnet to which the dedicated microservice engine belongs.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="serviceLimit")
    def service_limit(self) -> _builtins.int:
        """
        The maximum number of the microservice resources.
        """
        return pulumi.get(self, "service_limit")

    @_builtins.property
    @pulumi.getter(name="serviceRegistryAddresses")
    def service_registry_addresses(self) -> Sequence['outputs.GetMicroserviceEnginesEngineServiceRegistryAddressResult']:
        """
        The connection addresses of service center.  
        The service_registry_addresses structure is documented below.
        """
        return pulumi.get(self, "service_registry_addresses")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the dedicated microservice engine.
        + **Creating**
        + **Available**
        + **Unavailable**
        + **Deleting**
        + **Deleted**
        + **Upgrading**
        + **Modifying**
        + **CreateFailed**
        + **DeleteFailed**
        + **UpgradeFailed**
        + **ModifyFailed**
        + **Freezed**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the dedicated microservice engine.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMicroserviceEnginesEngineConfigCenterAddressResult(dict):
    def __init__(__self__, *,
                 private: _builtins.str,
                 public: _builtins.str):
        """
        :param _builtins.str private: The internal access address.
        :param _builtins.str public: The public access address.
        """
        pulumi.set(__self__, "private", private)
        pulumi.set(__self__, "public", public)

    @_builtins.property
    @pulumi.getter
    def private(self) -> _builtins.str:
        """
        The internal access address.
        """
        return pulumi.get(self, "private")

    @_builtins.property
    @pulumi.getter
    def public(self) -> _builtins.str:
        """
        The public access address.
        """
        return pulumi.get(self, "public")


@pulumi.output_type
class GetMicroserviceEnginesEngineServiceRegistryAddressResult(dict):
    def __init__(__self__, *,
                 private: _builtins.str,
                 public: _builtins.str):
        """
        :param _builtins.str private: The internal access address.
        :param _builtins.str public: The public access address.
        """
        pulumi.set(__self__, "private", private)
        pulumi.set(__self__, "public", public)

    @_builtins.property
    @pulumi.getter
    def private(self) -> _builtins.str:
        """
        The internal access address.
        """
        return pulumi.get(self, "private")

    @_builtins.property
    @pulumi.getter
    def public(self) -> _builtins.str:
        """
        The public access address.
        """
        return pulumi.get(self, "public")


@pulumi.output_type
class GetMicroserviceInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 data_centers: Sequence['outputs.GetMicroserviceInstancesInstanceDataCenterResult'],
                 endpoints: Sequence[_builtins.str],
                 health_checks: Sequence['outputs.GetMicroserviceInstancesInstanceHealthCheckResult'],
                 host_name: _builtins.str,
                 id: _builtins.str,
                 properties: Mapping[str, _builtins.str],
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the microservice instance, in RFC3339 format.
        :param Sequence['GetMicroserviceInstancesInstanceDataCenterArgs'] data_centers: The data center configuration of the microservice instance.
               The data_center structure is documented below.
        :param Sequence[_builtins.str] endpoints: The list of the access addresses of the microservice instance.
        :param Sequence['GetMicroserviceInstancesInstanceHealthCheckArgs'] health_checks: The health check configuration of the microservice instance.
               The health_check structure is documented below.
        :param _builtins.str host_name: The host name of the microservice instance.
        :param _builtins.str id: The ID of the microservice instance.
        :param Mapping[str, _builtins.str] properties: The extended attributes of the microservice instance, in key/value format.
        :param _builtins.str status: The current status of the microservice instance.
               + **UP**
               + **DOWN**
               + **STARTING**
               + **OUTOFSERVICE**
        :param _builtins.str updated_at: The latest update time of the microservice instance, in RFC3339 format.
        :param _builtins.str version: The version of the microservice instance.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_centers", data_centers)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "health_checks", health_checks)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the microservice instance, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataCenters")
    def data_centers(self) -> Sequence['outputs.GetMicroserviceInstancesInstanceDataCenterResult']:
        """
        The data center configuration of the microservice instance.
        The data_center structure is documented below.
        """
        return pulumi.get(self, "data_centers")

    @_builtins.property
    @pulumi.getter
    def endpoints(self) -> Sequence[_builtins.str]:
        """
        The list of the access addresses of the microservice instance.
        """
        return pulumi.get(self, "endpoints")

    @_builtins.property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence['outputs.GetMicroserviceInstancesInstanceHealthCheckResult']:
        """
        The health check configuration of the microservice instance.
        The health_check structure is documented below.
        """
        return pulumi.get(self, "health_checks")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        The host name of the microservice instance.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the microservice instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Mapping[str, _builtins.str]:
        """
        The extended attributes of the microservice instance, in key/value format.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the microservice instance.
        + **UP**
        + **DOWN**
        + **STARTING**
        + **OUTOFSERVICE**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the microservice instance, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the microservice instance.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMicroserviceInstancesInstanceDataCenterResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 name: _builtins.str,
                 region: _builtins.str):
        """
        :param _builtins.str availability_zone: The custom availability zone of the data center.
        :param _builtins.str name: The name of the data center.
        :param _builtins.str region: The custom region name of the data center.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The custom availability zone of the data center.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the data center.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The custom region name of the data center.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetMicroserviceInstancesInstanceHealthCheckResult(dict):
    def __init__(__self__, *,
                 interval: _builtins.int,
                 max_retries: _builtins.int,
                 mode: _builtins.str,
                 port: _builtins.int):
        """
        :param _builtins.int interval: The heartbeat interval of the health check, in seconds.
        :param _builtins.int max_retries: The maximum retry number of the health check.
        :param _builtins.str mode: The heartbeat mode of the health check.
        :param _builtins.int port: The port of the health check.
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "max_retries", max_retries)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        The heartbeat interval of the health check, in seconds.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> _builtins.int:
        """
        The maximum retry number of the health check.
        """
        return pulumi.get(self, "max_retries")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        The heartbeat mode of the health check.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port of the health check.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetMultipleMetricsDataDataResult(dict):
    def __init__(__self__, *,
                 datapoints: Sequence['outputs.GetMultipleMetricsDataDataDatapointResult'],
                 dimensions: Sequence['outputs.GetMultipleMetricsDataDataDimensionResult'],
                 metric_name: _builtins.str,
                 namespace: _builtins.str,
                 unit: _builtins.str):
        """
        :param Sequence['GetMultipleMetricsDataDataDatapointArgs'] datapoints: The metric data list. Up to 3000 data points can be returned.
               The datapoints structure is documented below.
        :param Sequence['GetMultipleMetricsDataDataDimensionArgs'] dimensions: Specifies metric dimensions.
               The dimensions structure is documented below.
               
               <a name="MetricsDimensions"></a>
               The `dimensions` block supports:
        :param _builtins.str metric_name: Specifies the metric ID.
        :param _builtins.str namespace: Specifies the namespace of a service.
        :param _builtins.str unit: The metric unit.
        """
        pulumi.set(__self__, "datapoints", datapoints)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter
    def datapoints(self) -> Sequence['outputs.GetMultipleMetricsDataDataDatapointResult']:
        """
        The metric data list. Up to 3000 data points can be returned.
        The datapoints structure is documented below.
        """
        return pulumi.get(self, "datapoints")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetMultipleMetricsDataDataDimensionResult']:
        """
        Specifies metric dimensions.
        The dimensions structure is documented below.

        <a name="MetricsDimensions"></a>
        The `dimensions` block supports:
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        Specifies the metric ID.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the namespace of a service.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The metric unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetMultipleMetricsDataDataDatapointResult(dict):
    def __init__(__self__, *,
                 average: _builtins.float,
                 max: _builtins.float,
                 min: _builtins.float,
                 sum: _builtins.float,
                 timestamp: _builtins.int,
                 variance: _builtins.float):
        """
        :param _builtins.float average: The average value of metric data within a rollup period.
        :param _builtins.float max: The maximum value of metric data within a rollup period.
        :param _builtins.float min: The minimum value of metric data within a rollup period.
        :param _builtins.float sum: The sum of metric data within a rollup period.
        :param _builtins.int timestamp: The time when the metric is collected. The time is a UNIX timestamp and the unit is ms.
        :param _builtins.float variance: The variance of metric data within a rollup period.
        """
        pulumi.set(__self__, "average", average)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "sum", sum)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "variance", variance)

    @_builtins.property
    @pulumi.getter
    def average(self) -> _builtins.float:
        """
        The average value of metric data within a rollup period.
        """
        return pulumi.get(self, "average")

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.float:
        """
        The maximum value of metric data within a rollup period.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.float:
        """
        The minimum value of metric data within a rollup period.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def sum(self) -> _builtins.float:
        """
        The sum of metric data within a rollup period.
        """
        return pulumi.get(self, "sum")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> _builtins.int:
        """
        The time when the metric is collected. The time is a UNIX timestamp and the unit is ms.
        """
        return pulumi.get(self, "timestamp")

    @_builtins.property
    @pulumi.getter
    def variance(self) -> _builtins.float:
        """
        The variance of metric data within a rollup period.
        """
        return pulumi.get(self, "variance")


@pulumi.output_type
class GetMultipleMetricsDataDataDimensionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the dimension.
        :param _builtins.str value: Specifies the dimension value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the dimension.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the dimension value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMultipleMetricsDataMetricResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetMultipleMetricsDataMetricDimensionResult'],
                 metric_name: _builtins.str,
                 namespace: _builtins.str):
        """
        :param Sequence['GetMultipleMetricsDataMetricDimensionArgs'] dimensions: Specifies metric dimensions.
               The dimensions structure is documented below.
               
               <a name="MetricsDimensions"></a>
               The `dimensions` block supports:
        :param _builtins.str metric_name: Specifies the metric ID.
        :param _builtins.str namespace: Specifies the namespace of a service.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetMultipleMetricsDataMetricDimensionResult']:
        """
        Specifies metric dimensions.
        The dimensions structure is documented below.

        <a name="MetricsDimensions"></a>
        The `dimensions` block supports:
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        Specifies the metric ID.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the namespace of a service.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetMultipleMetricsDataMetricDimensionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the dimension.
        :param _builtins.str value: Specifies the dimension value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the dimension.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the dimension value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNacosNamespacesNamespaceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: The ID of the Nacos namespace.
        :param _builtins.str name: The name of the Nacos namespace.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Nacos namespace.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Nacos namespace.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetOneClickAlarmRulesAlarmResult(dict):
    def __init__(__self__, *,
                 alarm_id: _builtins.str,
                 alarm_notifications: Sequence['outputs.GetOneClickAlarmRulesAlarmAlarmNotificationResult'],
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 notification_begin_time: _builtins.str,
                 notification_enabled: _builtins.bool,
                 notification_end_time: _builtins.str,
                 ok_notifications: Sequence['outputs.GetOneClickAlarmRulesAlarmOkNotificationResult'],
                 policies: Sequence['outputs.GetOneClickAlarmRulesAlarmPolicyResult'],
                 resources: Sequence['outputs.GetOneClickAlarmRulesAlarmResourceResult'],
                 type: _builtins.str):
        """
        :param _builtins.str alarm_id: The ID of an alarm rule.
        :param Sequence['GetOneClickAlarmRulesAlarmAlarmNotificationArgs'] alarm_notifications: The action to be triggered by an alarm.
        :param _builtins.str description: The supplementary information about an alarm rule.
        :param _builtins.bool enabled: Whether the one-click monitoring is enabled.
        :param _builtins.str name: The name of the metric dimension.
        :param _builtins.str namespace: The metric namespace.
        :param _builtins.str notification_begin_time: The time when the alarm notification was enabled.
        :param _builtins.bool notification_enabled: Whether the alarm notification is enabled.
        :param _builtins.str notification_end_time: The time when the alarm notification was disabled.
        :param Sequence['GetOneClickAlarmRulesAlarmOkNotificationArgs'] ok_notifications: The action to be triggered after an alarm is cleared.
        :param Sequence['GetOneClickAlarmRulesAlarmPolicyArgs'] policies: The alarm policy list.
        :param Sequence['GetOneClickAlarmRulesAlarmResourceArgs'] resources: The resource list.
        :param _builtins.str type: The notification type.
        """
        pulumi.set(__self__, "alarm_id", alarm_id)
        pulumi.set(__self__, "alarm_notifications", alarm_notifications)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "notification_begin_time", notification_begin_time)
        pulumi.set(__self__, "notification_enabled", notification_enabled)
        pulumi.set(__self__, "notification_end_time", notification_end_time)
        pulumi.set(__self__, "ok_notifications", ok_notifications)
        pulumi.set(__self__, "policies", policies)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> _builtins.str:
        """
        The ID of an alarm rule.
        """
        return pulumi.get(self, "alarm_id")

    @_builtins.property
    @pulumi.getter(name="alarmNotifications")
    def alarm_notifications(self) -> Sequence['outputs.GetOneClickAlarmRulesAlarmAlarmNotificationResult']:
        """
        The action to be triggered by an alarm.
        """
        return pulumi.get(self, "alarm_notifications")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The supplementary information about an alarm rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether the one-click monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the metric dimension.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The metric namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="notificationBeginTime")
    def notification_begin_time(self) -> _builtins.str:
        """
        The time when the alarm notification was enabled.
        """
        return pulumi.get(self, "notification_begin_time")

    @_builtins.property
    @pulumi.getter(name="notificationEnabled")
    def notification_enabled(self) -> _builtins.bool:
        """
        Whether the alarm notification is enabled.
        """
        return pulumi.get(self, "notification_enabled")

    @_builtins.property
    @pulumi.getter(name="notificationEndTime")
    def notification_end_time(self) -> _builtins.str:
        """
        The time when the alarm notification was disabled.
        """
        return pulumi.get(self, "notification_end_time")

    @_builtins.property
    @pulumi.getter(name="okNotifications")
    def ok_notifications(self) -> Sequence['outputs.GetOneClickAlarmRulesAlarmOkNotificationResult']:
        """
        The action to be triggered after an alarm is cleared.
        """
        return pulumi.get(self, "ok_notifications")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetOneClickAlarmRulesAlarmPolicyResult']:
        """
        The alarm policy list.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetOneClickAlarmRulesAlarmResourceResult']:
        """
        The resource list.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The notification type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOneClickAlarmRulesAlarmAlarmNotificationResult(dict):
    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] notification_lists: The list of objects to be notified if the alarm status changes.
        :param _builtins.str type: The notification type.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        """
        The list of objects to be notified if the alarm status changes.
        """
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The notification type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOneClickAlarmRulesAlarmOkNotificationResult(dict):
    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] notification_lists: The list of objects to be notified if the alarm status changes.
        :param _builtins.str type: The notification type.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        """
        The list of objects to be notified if the alarm status changes.
        """
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The notification type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOneClickAlarmRulesAlarmPolicyResult(dict):
    def __init__(__self__, *,
                 alarm_policy_id: _builtins.str,
                 comparison_operator: _builtins.str,
                 count: _builtins.int,
                 enabled: _builtins.bool,
                 filter: _builtins.str,
                 level: _builtins.int,
                 metric_name: _builtins.str,
                 period: _builtins.int,
                 suppress_duration: _builtins.int,
                 unit: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str alarm_policy_id: The alarm policy ID.
        :param _builtins.str comparison_operator: The operator of an alarm threshold.
        :param _builtins.int count: The number of times that the alarm triggering conditions are met.
        :param _builtins.bool enabled: Whether the one-click monitoring is enabled.
        :param _builtins.str filter: The roll up method.
        :param _builtins.int level: The alarm severity.
        :param _builtins.str metric_name: The metric name.
        :param _builtins.int period: How often to generate an alarm.
        :param _builtins.int suppress_duration: The suppression period.
        :param _builtins.str unit: The metric unit.
        :param _builtins.float value: The value of the metric dimension.
        """
        pulumi.set(__self__, "alarm_policy_id", alarm_policy_id)
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "suppress_duration", suppress_duration)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="alarmPolicyId")
    def alarm_policy_id(self) -> _builtins.str:
        """
        The alarm policy ID.
        """
        return pulumi.get(self, "alarm_policy_id")

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> _builtins.str:
        """
        The operator of an alarm threshold.
        """
        return pulumi.get(self, "comparison_operator")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The number of times that the alarm triggering conditions are met.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether the one-click monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        """
        The roll up method.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.int:
        """
        The alarm severity.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The metric name.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        How often to generate an alarm.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="suppressDuration")
    def suppress_duration(self) -> _builtins.int:
        """
        The suppression period.
        """
        return pulumi.get(self, "suppress_duration")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The metric unit.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The value of the metric dimension.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOneClickAlarmRulesAlarmResourceResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetOneClickAlarmRulesAlarmResourceDimensionResult'],
                 resource_group_id: _builtins.str,
                 resource_group_name: _builtins.str):
        """
        :param Sequence['GetOneClickAlarmRulesAlarmResourceDimensionArgs'] dimensions: The dimension information.
        :param _builtins.str resource_group_id: The resource group ID.
        :param _builtins.str resource_group_name: The resource group name.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        pulumi.set(__self__, "resource_group_name", resource_group_name)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetOneClickAlarmRulesAlarmResourceDimensionResult']:
        """
        The dimension information.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        """
        The resource group ID.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        """
        The resource group name.
        """
        return pulumi.get(self, "resource_group_name")


@pulumi.output_type
class GetOneClickAlarmRulesAlarmResourceDimensionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The name of the metric dimension.
        :param _builtins.str value: The value of the metric dimension.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the metric dimension.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the metric dimension.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOneClickAlarmsOneClickAlarmResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 namespace: _builtins.str,
                 one_click_alarm_id: _builtins.str):
        """
        :param _builtins.str description: The supplementary information about one-click monitoring.
        :param _builtins.bool enabled: Whether to enable one-click monitoring.
        :param _builtins.str namespace: The metric namespace.
        :param _builtins.str one_click_alarm_id: The one-click monitoring ID for a service.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "one_click_alarm_id", one_click_alarm_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The supplementary information about one-click monitoring.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether to enable one-click monitoring.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The metric namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="oneClickAlarmId")
    def one_click_alarm_id(self) -> _builtins.str:
        """
        The one-click monitoring ID for a service.
        """
        return pulumi.get(self, "one_click_alarm_id")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetQuotasQuotaResourceResult']):
        """
        :param Sequence['GetQuotasQuotaResourceArgs'] resources: The resource quota list.
        """
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetQuotasQuotaResourceResult']:
        """
        The resource quota list.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetQuotasQuotaResourceResult(dict):
    def __init__(__self__, *,
                 quota: _builtins.int,
                 type: _builtins.str,
                 unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int quota: The total amount of the quota.
        :param _builtins.str type: The quota type.
        :param _builtins.str unit: The unit.
        :param _builtins.int used: The used amount of the quota.
        """
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        The total amount of the quota.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The quota type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The used amount of the quota.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetResourceGroupServiceResourcesResourceResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetResourceGroupServiceResourcesResourceDimensionResult'],
                 status: _builtins.str):
        """
        :param Sequence['GetResourceGroupServiceResourcesResourceDimensionArgs'] dimensions: The dimension information about a resource.
        :param _builtins.str status: Specifies the health status.
               The valid values are as follows:
               + **health**: resources for which alarm rules have been configured and no alarm was triggered.
               + **unhealthy**: resources for which alarm rules have been configured and alarms were triggered.
               + **no_alarm_rule**: resources for which alarm rules are not configured.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetResourceGroupServiceResourcesResourceDimensionResult']:
        """
        The dimension information about a resource.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the health status.
        The valid values are as follows:
        + **health**: resources for which alarm rules have been configured and no alarm was triggered.
        + **unhealthy**: resources for which alarm rules have been configured and alarms were triggered.
        + **no_alarm_rule**: resources for which alarm rules are not configured.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetResourceGroupServiceResourcesResourceDimensionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The dimension name.
        :param _builtins.str value: The dimension value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The dimension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The dimension value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceGroupsResourceGroupResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 group_id: _builtins.str,
                 group_name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str created_at: The time when the resource group was created.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the resource group belongs.
        :param _builtins.str group_id: Specifies the resource group ID.
        :param _builtins.str group_name: Specifies the name of a resource group.
               Fuzzy search is supported.
        :param _builtins.str type: Specifies the method of adding resources to a resource group.
               The valid values are as follows:
               + **EPS**: Resources in an enterprise project are added to a resource group.
               + **TAG**: Resources with selected tags are added to a resource group.
               + **Manual**: Resources are added manually to a resource group.
               
               If this parameter is empty, all resource groups are queried.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the resource group was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the resource group belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Specifies the resource group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Specifies the name of a resource group.
        Fuzzy search is supported.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the method of adding resources to a resource group.
        The valid values are as follows:
        + **EPS**: Resources in an enterprise project are added to a resource group.
        + **TAG**: Resources with selected tags are added to a resource group.
        + **Manual**: Resources are added manually to a resource group.

        If this parameter is empty, all resource groups are queried.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResourceTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The tag key.
        :param Sequence[_builtins.str] values: The tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The tag values.
        """
        return pulumi.get(self, "values")


