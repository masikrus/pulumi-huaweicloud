# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MicroserviceArgs', 'Microservice']

@pulumi.input_type
class MicroserviceArgs:
    def __init__(__self__, *,
                 app_name: pulumi.Input[_builtins.str],
                 connect_address: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_address: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Microservice resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the name of the dedicated microservice application.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] connect_address: Specifies the address that used to access engine and manages
               microservice.
               Usually is the connection address of service center.
               Changing this will create a new resource.
               
               > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        :param pulumi.Input[_builtins.str] version: Specifies the version of the dedicated microservice.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the account password for **RBAC** login.
               The password format must meet the following conditions:
               + Must be `8` to `32` characters long.
               + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
               (-~!@#%^*_=+?$&()|<>{}[]).
               + Cannot be the account name or account name spelled backwards.
               + The password can only start with a letter.
               
               Changing this will create a new resource.
               
               > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the account name for **RBAC** login.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] auth_address: Specifies the address that used to request the access token.  
               Usually is the connection address of service center.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the dedicated microservice.
               The description can contain a maximum of `256` characters.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment (stage) type.
               The valid values are **development**, **testing**, **acceptance** and **production**.
               If omitted, the microservice will be deployed in an empty environment.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] level: Specifies the microservice level.
               The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the dedicated microservice.
               The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
               allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "connect_address", connect_address)
        pulumi.set(__self__, "version", version)
        if admin_pass is not None:
            pulumi.set(__self__, "admin_pass", admin_pass)
        if admin_user is not None:
            pulumi.set(__self__, "admin_user", admin_user)
        if auth_address is not None:
            pulumi.set(__self__, "auth_address", auth_address)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the dedicated microservice application.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "app_name", value)

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the address that used to access engine and manages
        microservice.
        Usually is the connection address of service center.
        Changing this will create a new resource.

        > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        """
        return pulumi.get(self, "connect_address")

    @connect_address.setter
    def connect_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connect_address", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the version of the dedicated microservice.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the account password for **RBAC** login.
        The password format must meet the following conditions:
        + Must be `8` to `32` characters long.
        + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
        (-~!@#%^*_=+?$&()|<>{}[]).
        + Cannot be the account name or account name spelled backwards.
        + The password can only start with a letter.

        Changing this will create a new resource.

        > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        """
        return pulumi.get(self, "admin_pass")

    @admin_pass.setter
    def admin_pass(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_pass", value)

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the account name for **RBAC** login.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "admin_user")

    @admin_user.setter
    def admin_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_user", value)

    @_builtins.property
    @pulumi.getter(name="authAddress")
    def auth_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the address that used to request the access token.  
        Usually is the connection address of service center.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "auth_address")

    @auth_address.setter
    def auth_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_address", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the dedicated microservice.
        The description can contain a maximum of `256` characters.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the environment (stage) type.
        The valid values are **development**, **testing**, **acceptance** and **production**.
        If omitted, the microservice will be deployed in an empty environment.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the microservice level.
        The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the dedicated microservice.
        The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
        allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MicroserviceState:
    def __init__(__self__, *,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_address: Optional[pulumi.Input[_builtins.str]] = None,
                 connect_address: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Microservice resources.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the account password for **RBAC** login.
               The password format must meet the following conditions:
               + Must be `8` to `32` characters long.
               + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
               (-~!@#%^*_=+?$&()|<>{}[]).
               + Cannot be the account name or account name spelled backwards.
               + The password can only start with a letter.
               
               Changing this will create a new resource.
               
               > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the account name for **RBAC** login.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the name of the dedicated microservice application.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] auth_address: Specifies the address that used to request the access token.  
               Usually is the connection address of service center.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] connect_address: Specifies the address that used to access engine and manages
               microservice.
               Usually is the connection address of service center.
               Changing this will create a new resource.
               
               > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        :param pulumi.Input[_builtins.str] description: Specifies the description of the dedicated microservice.
               The description can contain a maximum of `256` characters.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment (stage) type.
               The valid values are **development**, **testing**, **acceptance** and **production**.
               If omitted, the microservice will be deployed in an empty environment.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] level: Specifies the microservice level.
               The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the dedicated microservice.
               The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
               allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] status: The microservice status. The values supports **UP** and **DOWN**.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the dedicated microservice.
               Changing this will create a new microservice.
        """
        if admin_pass is not None:
            pulumi.set(__self__, "admin_pass", admin_pass)
        if admin_user is not None:
            pulumi.set(__self__, "admin_user", admin_user)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if auth_address is not None:
            pulumi.set(__self__, "auth_address", auth_address)
        if connect_address is not None:
            pulumi.set(__self__, "connect_address", connect_address)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the account password for **RBAC** login.
        The password format must meet the following conditions:
        + Must be `8` to `32` characters long.
        + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
        (-~!@#%^*_=+?$&()|<>{}[]).
        + Cannot be the account name or account name spelled backwards.
        + The password can only start with a letter.

        Changing this will create a new resource.

        > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        """
        return pulumi.get(self, "admin_pass")

    @admin_pass.setter
    def admin_pass(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_pass", value)

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the account name for **RBAC** login.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "admin_user")

    @admin_user.setter
    def admin_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_user", value)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the dedicated microservice application.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_name", value)

    @_builtins.property
    @pulumi.getter(name="authAddress")
    def auth_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the address that used to request the access token.  
        Usually is the connection address of service center.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "auth_address")

    @auth_address.setter
    def auth_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_address", value)

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the address that used to access engine and manages
        microservice.
        Usually is the connection address of service center.
        Changing this will create a new resource.

        > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        """
        return pulumi.get(self, "connect_address")

    @connect_address.setter
    def connect_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connect_address", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the dedicated microservice.
        The description can contain a maximum of `256` characters.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the environment (stage) type.
        The valid values are **development**, **testing**, **acceptance** and **production**.
        If omitted, the microservice will be deployed in an empty environment.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the microservice level.
        The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the dedicated microservice.
        The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
        allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The microservice status. The values supports **UP** and **DOWN**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the dedicated microservice.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:Cse/microservice:Microservice")
class Microservice(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_address: Optional[pulumi.Input[_builtins.str]] = None,
                 connect_address: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a dedicated microservice resource within HuaweiCloud.

        > 1. Before creating a configuration, make sure the engine has enabled the rules shown in the appendix
        >       table.
        >       <br/> 2. When deleting a microservice, all instances under it will also be deleted together.

        ## Example Usage

        ### Create a microservice in an engine with RBAC authentication disabled

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        microservice_engine_id = config.require_object("microserviceEngineId")
        service_name = config.require_object("serviceName")
        app_name = config.require_object("appName")
        test = huaweicloud.Cse.get_microservice_engines()
        fileter_engines = [o for o in test.engines if o.id == microservice_engine_id]
        test_microservice = huaweicloud.cse.Microservice("test",
            auth_address=fileter_engines[0].service_registry_addresses[0].public,
            connect_address=fileter_engines[0].service_registry_addresses[0].public,
            name=service_name,
            version="1.0.0",
            environment="development",
            app_name=app_name)
        ```

        ### Create a microservice in an engine with RBAC authentication enabled

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        microservice_engine_id = config.require_object("microserviceEngineId")
        microservice_engine_admin_password = config.require_object("microserviceEngineAdminPassword")
        service_name = config.require_object("serviceName")
        app_name = config.require_object("appName")
        test = huaweicloud.Cse.get_microservice_engines()
        fileter_engines = [o for o in test.engines if o.id == microservice_engine_id]
        test_microservice = huaweicloud.cse.Microservice("test",
            auth_address=fileter_engines[0].service_registry_addresses[0].public,
            connect_address=fileter_engines[0].service_registry_addresses[0].public,
            admin_user="root",
            admin_pass=microservice_engine_admin_password,
            name=service_name,
            version="1.0.0",
            environment="development",
            app_name=app_name)
        ```

        ## Appendix

        <a name="microservice_default_engine_access_rules"></a>
        Security group rules required to access the engine:
        (Remote is not the minimum range and can be adjusted according to business needs)

        | Direction | Priority | Action | Protocol | Ports         | Ethertype | Remote                |
        | --------- | -------- | ------ | -------- | ------------- | --------- | --------------------- |
        | Ingress   | 1        | Allow  | ICMP     | All           | Ipv6      | ::/0                  |
        | Ingress   | 1        | Allow  | TCP      | 30100-30130   | Ipv6      | ::/0                  |
        | Ingress   | 1        | Allow  | All      | All           | Ipv6      | cse-engine-default-sg |
        | Ingress   | 1        | Allow  | ICMP     | All           | Ipv4      | 0.0.0.0/0             |
        | Ingress   | 1        | Allow  | TCP      | 30100-30130   | Ipv4      | 0.0.0.0/0             |
        | Ingress   | 1        | Allow  | All      | All           | Ipv4      | cse-engine-default-sg |
        | Egress    | 100      | Allow  | All      | All           | Ipv6      | ::/0                  |
        | Egress    | 100      | Allow  | All      | All           | Ipv4      | 0.0.0.0/0             |

        ## Import

        Microservices can be imported using related `auth_address`, `connect_address` and their `id`, separated by the

        slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microservice:Microservice test <auth_address>/<connect_address>/<id>
        ```

        If you enabled the **RBAC** authorization, you also need to provide the account name (`admin_user`) and password

        (`admin_pass`) of the microservice engine. All fields separated by the slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microservice:Microservice test <auth_address>/<connect_address>/<id>/<admin_user>/<admin_pass>
        ```

        The single quotes (') or backslashes (\\\\) can help you solve the problem of special characters reporting errors on bash.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microservice:Microservice test https://124.70.26.32:30100/https://124.70.26.32:30100/f14960ba495e03f59f85aacaaafbdef3fbff3f0d/root/Test\\!123
        ```

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microservice:Microservice test 'https://124.70.26.32:30100/https://124.70.26.32:30100/f14960ba495e03f59f85aacaaafbdef3fbff3f0d/root/Test!123'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the account password for **RBAC** login.
               The password format must meet the following conditions:
               + Must be `8` to `32` characters long.
               + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
               (-~!@#%^*_=+?$&()|<>{}[]).
               + Cannot be the account name or account name spelled backwards.
               + The password can only start with a letter.
               
               Changing this will create a new resource.
               
               > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the account name for **RBAC** login.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the name of the dedicated microservice application.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] auth_address: Specifies the address that used to request the access token.  
               Usually is the connection address of service center.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] connect_address: Specifies the address that used to access engine and manages
               microservice.
               Usually is the connection address of service center.
               Changing this will create a new resource.
               
               > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        :param pulumi.Input[_builtins.str] description: Specifies the description of the dedicated microservice.
               The description can contain a maximum of `256` characters.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment (stage) type.
               The valid values are **development**, **testing**, **acceptance** and **production**.
               If omitted, the microservice will be deployed in an empty environment.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] level: Specifies the microservice level.
               The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the dedicated microservice.
               The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
               allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the dedicated microservice.
               Changing this will create a new microservice.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MicroserviceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a dedicated microservice resource within HuaweiCloud.

        > 1. Before creating a configuration, make sure the engine has enabled the rules shown in the appendix
        >       table.
        >       <br/> 2. When deleting a microservice, all instances under it will also be deleted together.

        ## Example Usage

        ### Create a microservice in an engine with RBAC authentication disabled

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        microservice_engine_id = config.require_object("microserviceEngineId")
        service_name = config.require_object("serviceName")
        app_name = config.require_object("appName")
        test = huaweicloud.Cse.get_microservice_engines()
        fileter_engines = [o for o in test.engines if o.id == microservice_engine_id]
        test_microservice = huaweicloud.cse.Microservice("test",
            auth_address=fileter_engines[0].service_registry_addresses[0].public,
            connect_address=fileter_engines[0].service_registry_addresses[0].public,
            name=service_name,
            version="1.0.0",
            environment="development",
            app_name=app_name)
        ```

        ### Create a microservice in an engine with RBAC authentication enabled

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        microservice_engine_id = config.require_object("microserviceEngineId")
        microservice_engine_admin_password = config.require_object("microserviceEngineAdminPassword")
        service_name = config.require_object("serviceName")
        app_name = config.require_object("appName")
        test = huaweicloud.Cse.get_microservice_engines()
        fileter_engines = [o for o in test.engines if o.id == microservice_engine_id]
        test_microservice = huaweicloud.cse.Microservice("test",
            auth_address=fileter_engines[0].service_registry_addresses[0].public,
            connect_address=fileter_engines[0].service_registry_addresses[0].public,
            admin_user="root",
            admin_pass=microservice_engine_admin_password,
            name=service_name,
            version="1.0.0",
            environment="development",
            app_name=app_name)
        ```

        ## Appendix

        <a name="microservice_default_engine_access_rules"></a>
        Security group rules required to access the engine:
        (Remote is not the minimum range and can be adjusted according to business needs)

        | Direction | Priority | Action | Protocol | Ports         | Ethertype | Remote                |
        | --------- | -------- | ------ | -------- | ------------- | --------- | --------------------- |
        | Ingress   | 1        | Allow  | ICMP     | All           | Ipv6      | ::/0                  |
        | Ingress   | 1        | Allow  | TCP      | 30100-30130   | Ipv6      | ::/0                  |
        | Ingress   | 1        | Allow  | All      | All           | Ipv6      | cse-engine-default-sg |
        | Ingress   | 1        | Allow  | ICMP     | All           | Ipv4      | 0.0.0.0/0             |
        | Ingress   | 1        | Allow  | TCP      | 30100-30130   | Ipv4      | 0.0.0.0/0             |
        | Ingress   | 1        | Allow  | All      | All           | Ipv4      | cse-engine-default-sg |
        | Egress    | 100      | Allow  | All      | All           | Ipv6      | ::/0                  |
        | Egress    | 100      | Allow  | All      | All           | Ipv4      | 0.0.0.0/0             |

        ## Import

        Microservices can be imported using related `auth_address`, `connect_address` and their `id`, separated by the

        slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microservice:Microservice test <auth_address>/<connect_address>/<id>
        ```

        If you enabled the **RBAC** authorization, you also need to provide the account name (`admin_user`) and password

        (`admin_pass`) of the microservice engine. All fields separated by the slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microservice:Microservice test <auth_address>/<connect_address>/<id>/<admin_user>/<admin_pass>
        ```

        The single quotes (') or backslashes (\\\\) can help you solve the problem of special characters reporting errors on bash.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microservice:Microservice test https://124.70.26.32:30100/https://124.70.26.32:30100/f14960ba495e03f59f85aacaaafbdef3fbff3f0d/root/Test\\!123
        ```

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/microservice:Microservice test 'https://124.70.26.32:30100/https://124.70.26.32:30100/f14960ba495e03f59f85aacaaafbdef3fbff3f0d/root/Test!123'
        ```

        :param str resource_name: The name of the resource.
        :param MicroserviceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MicroserviceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 app_name: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_address: Optional[pulumi.Input[_builtins.str]] = None,
                 connect_address: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MicroserviceArgs.__new__(MicroserviceArgs)

            __props__.__dict__["admin_pass"] = None if admin_pass is None else pulumi.Output.secret(admin_pass)
            __props__.__dict__["admin_user"] = admin_user
            if app_name is None and not opts.urn:
                raise TypeError("Missing required property 'app_name'")
            __props__.__dict__["app_name"] = app_name
            __props__.__dict__["auth_address"] = auth_address
            if connect_address is None and not opts.urn:
                raise TypeError("Missing required property 'connect_address'")
            __props__.__dict__["connect_address"] = connect_address
            __props__.__dict__["description"] = description
            __props__.__dict__["environment"] = environment
            __props__.__dict__["level"] = level
            __props__.__dict__["name"] = name
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["adminPass"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Microservice, __self__).__init__(
            'huaweicloud:Cse/microservice:Microservice',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
            admin_user: Optional[pulumi.Input[_builtins.str]] = None,
            app_name: Optional[pulumi.Input[_builtins.str]] = None,
            auth_address: Optional[pulumi.Input[_builtins.str]] = None,
            connect_address: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            environment: Optional[pulumi.Input[_builtins.str]] = None,
            level: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'Microservice':
        """
        Get an existing Microservice resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] admin_pass: Specifies the account password for **RBAC** login.
               The password format must meet the following conditions:
               + Must be `8` to `32` characters long.
               + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
               (-~!@#%^*_=+?$&()|<>{}[]).
               + Cannot be the account name or account name spelled backwards.
               + The password can only start with a letter.
               
               Changing this will create a new resource.
               
               > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the account name for **RBAC** login.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] app_name: Specifies the name of the dedicated microservice application.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] auth_address: Specifies the address that used to request the access token.  
               Usually is the connection address of service center.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] connect_address: Specifies the address that used to access engine and manages
               microservice.
               Usually is the connection address of service center.
               Changing this will create a new resource.
               
               > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        :param pulumi.Input[_builtins.str] description: Specifies the description of the dedicated microservice.
               The description can contain a maximum of `256` characters.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment (stage) type.
               The valid values are **development**, **testing**, **acceptance** and **production**.
               If omitted, the microservice will be deployed in an empty environment.
               Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] level: Specifies the microservice level.
               The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the dedicated microservice.
               The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
               allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
        :param pulumi.Input[_builtins.str] status: The microservice status. The values supports **UP** and **DOWN**.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the dedicated microservice.
               Changing this will create a new microservice.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MicroserviceState.__new__(_MicroserviceState)

        __props__.__dict__["admin_pass"] = admin_pass
        __props__.__dict__["admin_user"] = admin_user
        __props__.__dict__["app_name"] = app_name
        __props__.__dict__["auth_address"] = auth_address
        __props__.__dict__["connect_address"] = connect_address
        __props__.__dict__["description"] = description
        __props__.__dict__["environment"] = environment
        __props__.__dict__["level"] = level
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["version"] = version
        return Microservice(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the account password for **RBAC** login.
        The password format must meet the following conditions:
        + Must be `8` to `32` characters long.
        + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
        (-~!@#%^*_=+?$&()|<>{}[]).
        + Cannot be the account name or account name spelled backwards.
        + The password can only start with a letter.

        Changing this will create a new resource.

        > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
        """
        return pulumi.get(self, "admin_pass")

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the account name for **RBAC** login.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "admin_user")

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the dedicated microservice application.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="authAddress")
    def auth_address(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the address that used to request the access token.  
        Usually is the connection address of service center.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "auth_address")

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the address that used to access engine and manages
        microservice.
        Usually is the connection address of service center.
        Changing this will create a new resource.

        > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
        """
        return pulumi.get(self, "connect_address")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the dedicated microservice.
        The description can contain a maximum of `256` characters.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the environment (stage) type.
        The valid values are **development**, **testing**, **acceptance** and **production**.
        If omitted, the microservice will be deployed in an empty environment.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter
    def level(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the microservice level.
        The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the dedicated microservice.
        The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
        allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The microservice status. The values supports **UP** and **DOWN**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the version of the dedicated microservice.
        Changing this will create a new microservice.
        """
        return pulumi.get(self, "version")

