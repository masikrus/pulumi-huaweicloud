# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMicroserviceInstancesResult',
    'AwaitableGetMicroserviceInstancesResult',
    'get_microservice_instances',
    'get_microservice_instances_output',
]

@pulumi.output_type
class GetMicroserviceInstancesResult:
    """
    A collection of values returned by getMicroserviceInstances.
    """
    def __init__(__self__, admin_pass=None, admin_user=None, auth_address=None, connect_address=None, id=None, instances=None, microservice_id=None):
        if admin_pass and not isinstance(admin_pass, str):
            raise TypeError("Expected argument 'admin_pass' to be a str")
        pulumi.set(__self__, "admin_pass", admin_pass)
        if admin_user and not isinstance(admin_user, str):
            raise TypeError("Expected argument 'admin_user' to be a str")
        pulumi.set(__self__, "admin_user", admin_user)
        if auth_address and not isinstance(auth_address, str):
            raise TypeError("Expected argument 'auth_address' to be a str")
        pulumi.set(__self__, "auth_address", auth_address)
        if connect_address and not isinstance(connect_address, str):
            raise TypeError("Expected argument 'connect_address' to be a str")
        pulumi.set(__self__, "connect_address", connect_address)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if microservice_id and not isinstance(microservice_id, str):
            raise TypeError("Expected argument 'microservice_id' to be a str")
        pulumi.set(__self__, "microservice_id", microservice_id)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "admin_pass")

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "admin_user")

    @_builtins.property
    @pulumi.getter(name="authAddress")
    def auth_address(self) -> _builtins.str:
        return pulumi.get(self, "auth_address")

    @_builtins.property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> _builtins.str:
        return pulumi.get(self, "connect_address")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetMicroserviceInstancesInstanceResult']:
        """
        The list of the microservice instances.
        The instances structure is documented below.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="microserviceId")
    def microservice_id(self) -> _builtins.str:
        return pulumi.get(self, "microservice_id")


class AwaitableGetMicroserviceInstancesResult(GetMicroserviceInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMicroserviceInstancesResult(
            admin_pass=self.admin_pass,
            admin_user=self.admin_user,
            auth_address=self.auth_address,
            connect_address=self.connect_address,
            id=self.id,
            instances=self.instances,
            microservice_id=self.microservice_id)


def get_microservice_instances(admin_pass: Optional[_builtins.str] = None,
                               admin_user: Optional[_builtins.str] = None,
                               auth_address: Optional[_builtins.str] = None,
                               connect_address: Optional[_builtins.str] = None,
                               microservice_id: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMicroserviceInstancesResult:
    """
    Use this data source to get the list of the instances under dedicated microservice within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    microservice_engine_id = config.require_object("microserviceEngineId")
    admin_user = config.require_object("adminUser")
    admin_password = config.require_object("adminPassword")
    microservice_id = config.require_object("microserviceId")
    test = huaweicloud.Cse.get_microservice_engines()
    filter_engines = [o for o in test.engines if o.id == microservice_engine_id]
    test_get_microservice_instances = huaweicloud.Cse.get_microservice_instances(auth_address=filter_engines[0].service_registry_addresses[0].public,
        connect_address=filter_engines[0].service_registry_addresses[0].public,
        admin_user=admin_user,
        admin_pass=admin_password,
        microservice_id=microservice_id)
    ```


    :param _builtins.str admin_pass: Specifies the user password that used to pass the **RBAC** control.
    :param _builtins.str admin_user: Specifies the user name that used to pass the **RBAC** control.
           The password format must meet the following conditions:
           + Must be `8` to `32` characters long.
           + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
           (-~!@#%^*_=+?$&()|<>{}[]).
           + Cannot be the account name or account name spelled backwards.
           + The password can only start with a letter.
           
           > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
    :param _builtins.str auth_address: Specifies the address that used to request the access token.
    :param _builtins.str connect_address: Specifies the address that used to send requests and manage configuration.
           
           > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
    :param _builtins.str microservice_id: Specifies the ID of the dedicated microservice to which the instances belong.
    """
    __args__ = dict()
    __args__['adminPass'] = admin_pass
    __args__['adminUser'] = admin_user
    __args__['authAddress'] = auth_address
    __args__['connectAddress'] = connect_address
    __args__['microserviceId'] = microservice_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getMicroserviceInstances:getMicroserviceInstances', __args__, opts=opts, typ=GetMicroserviceInstancesResult).value

    return AwaitableGetMicroserviceInstancesResult(
        admin_pass=pulumi.get(__ret__, 'admin_pass'),
        admin_user=pulumi.get(__ret__, 'admin_user'),
        auth_address=pulumi.get(__ret__, 'auth_address'),
        connect_address=pulumi.get(__ret__, 'connect_address'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        microservice_id=pulumi.get(__ret__, 'microservice_id'))
def get_microservice_instances_output(admin_pass: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      admin_user: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      auth_address: Optional[pulumi.Input[_builtins.str]] = None,
                                      connect_address: Optional[pulumi.Input[_builtins.str]] = None,
                                      microservice_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMicroserviceInstancesResult]:
    """
    Use this data source to get the list of the instances under dedicated microservice within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    microservice_engine_id = config.require_object("microserviceEngineId")
    admin_user = config.require_object("adminUser")
    admin_password = config.require_object("adminPassword")
    microservice_id = config.require_object("microserviceId")
    test = huaweicloud.Cse.get_microservice_engines()
    filter_engines = [o for o in test.engines if o.id == microservice_engine_id]
    test_get_microservice_instances = huaweicloud.Cse.get_microservice_instances(auth_address=filter_engines[0].service_registry_addresses[0].public,
        connect_address=filter_engines[0].service_registry_addresses[0].public,
        admin_user=admin_user,
        admin_pass=admin_password,
        microservice_id=microservice_id)
    ```


    :param _builtins.str admin_pass: Specifies the user password that used to pass the **RBAC** control.
    :param _builtins.str admin_user: Specifies the user name that used to pass the **RBAC** control.
           The password format must meet the following conditions:
           + Must be `8` to `32` characters long.
           + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
           (-~!@#%^*_=+?$&()|<>{}[]).
           + Cannot be the account name or account name spelled backwards.
           + The password can only start with a letter.
           
           > Both `admin_user` and `admin_pass` are required if **RBAC** is enabled for the microservice engine.
    :param _builtins.str auth_address: Specifies the address that used to request the access token.
    :param _builtins.str connect_address: Specifies the address that used to send requests and manage configuration.
           
           > We are only support IPv4 addresses yet (for `auth_address` and `connect_address`).
    :param _builtins.str microservice_id: Specifies the ID of the dedicated microservice to which the instances belong.
    """
    __args__ = dict()
    __args__['adminPass'] = admin_pass
    __args__['adminUser'] = admin_user
    __args__['authAddress'] = auth_address
    __args__['connectAddress'] = connect_address
    __args__['microserviceId'] = microservice_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getMicroserviceInstances:getMicroserviceInstances', __args__, opts=opts, typ=GetMicroserviceInstancesResult)
    return __ret__.apply(lambda __response__: GetMicroserviceInstancesResult(
        admin_pass=pulumi.get(__response__, 'admin_pass'),
        admin_user=pulumi.get(__response__, 'admin_user'),
        auth_address=pulumi.get(__response__, 'auth_address'),
        connect_address=pulumi.get(__response__, 'connect_address'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        microservice_id=pulumi.get(__response__, 'microservice_id')))
