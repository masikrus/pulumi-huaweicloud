# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlarmTemplatesResult',
    'AwaitableGetAlarmTemplatesResult',
    'get_alarm_templates',
    'get_alarm_templates_output',
]

@pulumi.output_type
class GetAlarmTemplatesResult:
    """
    A collection of values returned by getAlarmTemplates.
    """
    def __init__(__self__, alarm_templates=None, dimension_name=None, id=None, name=None, namespace=None, region=None, type=None):
        if alarm_templates and not isinstance(alarm_templates, list):
            raise TypeError("Expected argument 'alarm_templates' to be a list")
        pulumi.set(__self__, "alarm_templates", alarm_templates)
        if dimension_name and not isinstance(dimension_name, str):
            raise TypeError("Expected argument 'dimension_name' to be a str")
        pulumi.set(__self__, "dimension_name", dimension_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="alarmTemplates")
    def alarm_templates(self) -> Sequence['outputs.GetAlarmTemplatesAlarmTemplateResult']:
        """
        The alarm template list.
        """
        return pulumi.get(self, "alarm_templates")

    @_builtins.property
    @pulumi.getter(name="dimensionName")
    def dimension_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dimension_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The alarm template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The alarm template type.
        """
        return pulumi.get(self, "type")


class AwaitableGetAlarmTemplatesResult(GetAlarmTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmTemplatesResult(
            alarm_templates=self.alarm_templates,
            dimension_name=self.dimension_name,
            id=self.id,
            name=self.name,
            namespace=self.namespace,
            region=self.region,
            type=self.type)


def get_alarm_templates(dimension_name: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        namespace: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        type: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmTemplatesResult:
    """
    Use this data source to get the list of CES alarm templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cse.get_alarm_templates()
    ```


    :param _builtins.str dimension_name: Specifies the resource dimension.
    :param _builtins.str name: Specifies the name of an alarm template.
    :param _builtins.str namespace: Specifies the namespace of a service.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the alarm template type.
           The valid values are as follows:
           + **system**: default metric template.
           + **custom**: custom metric template.
           + **system_event**: default event template.
           + **custom_event**: custom event template.
           + **system_custom_event**: all event templates.
    """
    __args__ = dict()
    __args__['dimensionName'] = dimension_name
    __args__['name'] = name
    __args__['namespace'] = namespace
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getAlarmTemplates:getAlarmTemplates', __args__, opts=opts, typ=GetAlarmTemplatesResult).value

    return AwaitableGetAlarmTemplatesResult(
        alarm_templates=pulumi.get(__ret__, 'alarm_templates'),
        dimension_name=pulumi.get(__ret__, 'dimension_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_alarm_templates_output(dimension_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               namespace: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAlarmTemplatesResult]:
    """
    Use this data source to get the list of CES alarm templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cse.get_alarm_templates()
    ```


    :param _builtins.str dimension_name: Specifies the resource dimension.
    :param _builtins.str name: Specifies the name of an alarm template.
    :param _builtins.str namespace: Specifies the namespace of a service.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the alarm template type.
           The valid values are as follows:
           + **system**: default metric template.
           + **custom**: custom metric template.
           + **system_event**: default event template.
           + **custom_event**: custom event template.
           + **system_custom_event**: all event templates.
    """
    __args__ = dict()
    __args__['dimensionName'] = dimension_name
    __args__['name'] = name
    __args__['namespace'] = namespace
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getAlarmTemplates:getAlarmTemplates', __args__, opts=opts, typ=GetAlarmTemplatesResult)
    return __ret__.apply(lambda __response__: GetAlarmTemplatesResult(
        alarm_templates=pulumi.get(__response__, 'alarm_templates'),
        dimension_name=pulumi.get(__response__, 'dimension_name'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        namespace=pulumi.get(__response__, 'namespace'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
