# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEventDetailsResult',
    'AwaitableGetEventDetailsResult',
    'get_event_details',
    'get_event_details_output',
]

@pulumi.output_type
class GetEventDetailsResult:
    """
    A collection of values returned by getEventDetails.
    """
    def __init__(__self__, event_infos=None, from_=None, id=None, level=None, name=None, region=None, source=None, state=None, to=None, type=None, user=None):
        if event_infos and not isinstance(event_infos, list):
            raise TypeError("Expected argument 'event_infos' to be a list")
        pulumi.set(__self__, "event_infos", event_infos)
        if from_ and not isinstance(from_, str):
            raise TypeError("Expected argument 'from_' to be a str")
        pulumi.set(__self__, "from_", from_)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if level and not isinstance(level, str):
            raise TypeError("Expected argument 'level' to be a str")
        pulumi.set(__self__, "level", level)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if to and not isinstance(to, str):
            raise TypeError("Expected argument 'to' to be a str")
        pulumi.set(__self__, "to", to)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if user and not isinstance(user, str):
            raise TypeError("Expected argument 'user' to be a str")
        pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter(name="eventInfos")
    def event_infos(self) -> Sequence['outputs.GetEventDetailsEventInfoResult']:
        """
        The event information.
        """
        return pulumi.get(self, "event_infos")

    @_builtins.property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "from_")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The resource dimension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def to(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "to")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user")


class AwaitableGetEventDetailsResult(GetEventDetailsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventDetailsResult(
            event_infos=self.event_infos,
            from_=self.from_,
            id=self.id,
            level=self.level,
            name=self.name,
            region=self.region,
            source=self.source,
            state=self.state,
            to=self.to,
            type=self.type,
            user=self.user)


def get_event_details(from_: Optional[_builtins.str] = None,
                      level: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      source: Optional[_builtins.str] = None,
                      state: Optional[_builtins.str] = None,
                      to: Optional[_builtins.str] = None,
                      type: Optional[_builtins.str] = None,
                      user: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventDetailsResult:
    """
    Use this data source to get the CES event details.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    type = config.require_object("type")
    test = huaweicloud.Cse.get_event_details(name=name,
        type=type)
    ```


    :param _builtins.str from_: Specifies the start time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
           The start time cannot be greater than the current time.
    :param _builtins.str level: Specifies the event severity.
           The value can be **Critical**, **Major**, **Minor**, or **Info**.
    :param _builtins.str name: Specifies the event name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str source: Specifies the event source.
    :param _builtins.str state: Specifies the event status.
           The value can be **normal**, **warning**, or **incident**.
    :param _builtins.str to: Specifies the end time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
           The start time needs to be less than the end time.
    :param _builtins.str type: Specifies the event type.
           The value can be **EVENT.SYS** (system event) or **EVENT.CUSTOM** (custom event).
    :param _builtins.str user: Specifies the name of the user for reporting event monitoring data.
    """
    __args__ = dict()
    __args__['from'] = from_
    __args__['level'] = level
    __args__['name'] = name
    __args__['region'] = region
    __args__['source'] = source
    __args__['state'] = state
    __args__['to'] = to
    __args__['type'] = type
    __args__['user'] = user
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getEventDetails:getEventDetails', __args__, opts=opts, typ=GetEventDetailsResult).value

    return AwaitableGetEventDetailsResult(
        event_infos=pulumi.get(__ret__, 'event_infos'),
        from_=pulumi.get(__ret__, 'from_'),
        id=pulumi.get(__ret__, 'id'),
        level=pulumi.get(__ret__, 'level'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        source=pulumi.get(__ret__, 'source'),
        state=pulumi.get(__ret__, 'state'),
        to=pulumi.get(__ret__, 'to'),
        type=pulumi.get(__ret__, 'type'),
        user=pulumi.get(__ret__, 'user'))
def get_event_details_output(from_: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[_builtins.str]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             source: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             to: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             type: Optional[pulumi.Input[_builtins.str]] = None,
                             user: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventDetailsResult]:
    """
    Use this data source to get the CES event details.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    type = config.require_object("type")
    test = huaweicloud.Cse.get_event_details(name=name,
        type=type)
    ```


    :param _builtins.str from_: Specifies the start time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
           The start time cannot be greater than the current time.
    :param _builtins.str level: Specifies the event severity.
           The value can be **Critical**, **Major**, **Minor**, or **Info**.
    :param _builtins.str name: Specifies the event name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str source: Specifies the event source.
    :param _builtins.str state: Specifies the event status.
           The value can be **normal**, **warning**, or **incident**.
    :param _builtins.str to: Specifies the end time of the query.
           The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
           The start time needs to be less than the end time.
    :param _builtins.str type: Specifies the event type.
           The value can be **EVENT.SYS** (system event) or **EVENT.CUSTOM** (custom event).
    :param _builtins.str user: Specifies the name of the user for reporting event monitoring data.
    """
    __args__ = dict()
    __args__['from'] = from_
    __args__['level'] = level
    __args__['name'] = name
    __args__['region'] = region
    __args__['source'] = source
    __args__['state'] = state
    __args__['to'] = to
    __args__['type'] = type
    __args__['user'] = user
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getEventDetails:getEventDetails', __args__, opts=opts, typ=GetEventDetailsResult)
    return __ret__.apply(lambda __response__: GetEventDetailsResult(
        event_infos=pulumi.get(__response__, 'event_infos'),
        from_=pulumi.get(__response__, 'from_'),
        id=pulumi.get(__response__, 'id'),
        level=pulumi.get(__response__, 'level'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        source=pulumi.get(__response__, 'source'),
        state=pulumi.get(__response__, 'state'),
        to=pulumi.get(__response__, 'to'),
        type=pulumi.get(__response__, 'type'),
        user=pulumi.get(__response__, 'user')))
