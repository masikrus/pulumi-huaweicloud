# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDashboardWidgetsResult',
    'AwaitableGetDashboardWidgetsResult',
    'get_dashboard_widgets',
    'get_dashboard_widgets_output',
]

@pulumi.output_type
class GetDashboardWidgetsResult:
    """
    A collection of values returned by getDashboardWidgets.
    """
    def __init__(__self__, dashboard_id=None, id=None, region=None, widgets=None):
        if dashboard_id and not isinstance(dashboard_id, str):
            raise TypeError("Expected argument 'dashboard_id' to be a str")
        pulumi.set(__self__, "dashboard_id", dashboard_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if widgets and not isinstance(widgets, list):
            raise TypeError("Expected argument 'widgets' to be a list")
        pulumi.set(__self__, "widgets", widgets)

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> _builtins.str:
        return pulumi.get(self, "dashboard_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def widgets(self) -> Sequence['outputs.GetDashboardWidgetsWidgetResult']:
        """
        The dashboard widget list.
        """
        return pulumi.get(self, "widgets")


class AwaitableGetDashboardWidgetsResult(GetDashboardWidgetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDashboardWidgetsResult(
            dashboard_id=self.dashboard_id,
            id=self.id,
            region=self.region,
            widgets=self.widgets)


def get_dashboard_widgets(dashboard_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDashboardWidgetsResult:
    """
    Use this data source to get the list of CES dashboard widgets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dashboard_id = config.require_object("dashboardId")
    test = huaweicloud.Cse.get_dashboard_widgets(dashboard_id=dashboard_id)
    ```


    :param _builtins.str dashboard_id: Specifies the dashboard ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['dashboardId'] = dashboard_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cse/getDashboardWidgets:getDashboardWidgets', __args__, opts=opts, typ=GetDashboardWidgetsResult).value

    return AwaitableGetDashboardWidgetsResult(
        dashboard_id=pulumi.get(__ret__, 'dashboard_id'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        widgets=pulumi.get(__ret__, 'widgets'))
def get_dashboard_widgets_output(dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDashboardWidgetsResult]:
    """
    Use this data source to get the list of CES dashboard widgets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    dashboard_id = config.require_object("dashboardId")
    test = huaweicloud.Cse.get_dashboard_widgets(dashboard_id=dashboard_id)
    ```


    :param _builtins.str dashboard_id: Specifies the dashboard ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['dashboardId'] = dashboard_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cse/getDashboardWidgets:getDashboardWidgets', __args__, opts=opts, typ=GetDashboardWidgetsResult)
    return __ret__.apply(lambda __response__: GetDashboardWidgetsResult(
        dashboard_id=pulumi.get(__response__, 'dashboard_id'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        widgets=pulumi.get(__response__, 'widgets')))
