# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmTemplateArgs', 'AlarmTemplate']

@pulumi.input_type
class AlarmTemplateArgs:
    def __init__(__self__, *,
                 policies: pulumi.Input[Sequence[pulumi.Input['AlarmTemplatePolicyArgs']]],
                 delete_associate_alarm: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_overwrite: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a AlarmTemplate resource.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmTemplatePolicyArgs']]] policies: Specifies the policy list of the CES alarm template.
               The Policy structure is documented below.
        :param pulumi.Input[_builtins.bool] delete_associate_alarm: Specifies whether delete the alarm rule which the alarm
               template associated with. Default to **false**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the CES alarm template.
               The description can contain a maximum of `256` characters.
               
               <a name="CesAlarmTemplate_Policy"></a>
               The `Policy` block supports:
        :param pulumi.Input[_builtins.bool] is_overwrite: Specifies whether to overwrite an existing alarm template with the same
               template name when creating a template. Default to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the CES alarm template.
               An alarm template name starts with a letter or Chinese, consists of `1` to `128` characters,
               and can contain only letters, Chinese characters, digits, hyphens (-) and hyphens (-).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] type: Specifies the type of the CES alarm template.
               Default to `0`. The valid values are as follows:
               + **0**: metric alarm template.
               + **2**: event alarm template.
        """
        pulumi.set(__self__, "policies", policies)
        if delete_associate_alarm is not None:
            pulumi.set(__self__, "delete_associate_alarm", delete_associate_alarm)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_overwrite is not None:
            pulumi.set(__self__, "is_overwrite", is_overwrite)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def policies(self) -> pulumi.Input[Sequence[pulumi.Input['AlarmTemplatePolicyArgs']]]:
        """
        Specifies the policy list of the CES alarm template.
        The Policy structure is documented below.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: pulumi.Input[Sequence[pulumi.Input['AlarmTemplatePolicyArgs']]]):
        pulumi.set(self, "policies", value)

    @_builtins.property
    @pulumi.getter(name="deleteAssociateAlarm")
    def delete_associate_alarm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether delete the alarm rule which the alarm
        template associated with. Default to **false**.
        """
        return pulumi.get(self, "delete_associate_alarm")

    @delete_associate_alarm.setter
    def delete_associate_alarm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_associate_alarm", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the CES alarm template.
        The description can contain a maximum of `256` characters.

        <a name="CesAlarmTemplate_Policy"></a>
        The `Policy` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isOverwrite")
    def is_overwrite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to overwrite an existing alarm template with the same
        template name when creating a template. Default to **false**.
        """
        return pulumi.get(self, "is_overwrite")

    @is_overwrite.setter
    def is_overwrite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_overwrite", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the CES alarm template.
        An alarm template name starts with a letter or Chinese, consists of `1` to `128` characters,
        and can contain only letters, Chinese characters, digits, hyphens (-) and hyphens (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the type of the CES alarm template.
        Default to `0`. The valid values are as follows:
        + **0**: metric alarm template.
        + **2**: event alarm template.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _AlarmTemplateState:
    def __init__(__self__, *,
                 association_alarm_total: Optional[pulumi.Input[_builtins.int]] = None,
                 delete_associate_alarm: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_overwrite: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmTemplatePolicyArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering AlarmTemplate resources.
        :param pulumi.Input[_builtins.int] association_alarm_total: Indicates the total num of the alarm that associated with the alarm template.
        :param pulumi.Input[_builtins.bool] delete_associate_alarm: Specifies whether delete the alarm rule which the alarm
               template associated with. Default to **false**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the CES alarm template.
               The description can contain a maximum of `256` characters.
               
               <a name="CesAlarmTemplate_Policy"></a>
               The `Policy` block supports:
        :param pulumi.Input[_builtins.bool] is_overwrite: Specifies whether to overwrite an existing alarm template with the same
               template name when creating a template. Default to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the CES alarm template.
               An alarm template name starts with a letter or Chinese, consists of `1` to `128` characters,
               and can contain only letters, Chinese characters, digits, hyphens (-) and hyphens (-).
        :param pulumi.Input[Sequence[pulumi.Input['AlarmTemplatePolicyArgs']]] policies: Specifies the policy list of the CES alarm template.
               The Policy structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] type: Specifies the type of the CES alarm template.
               Default to `0`. The valid values are as follows:
               + **0**: metric alarm template.
               + **2**: event alarm template.
        """
        if association_alarm_total is not None:
            pulumi.set(__self__, "association_alarm_total", association_alarm_total)
        if delete_associate_alarm is not None:
            pulumi.set(__self__, "delete_associate_alarm", delete_associate_alarm)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_overwrite is not None:
            pulumi.set(__self__, "is_overwrite", is_overwrite)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="associationAlarmTotal")
    def association_alarm_total(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the total num of the alarm that associated with the alarm template.
        """
        return pulumi.get(self, "association_alarm_total")

    @association_alarm_total.setter
    def association_alarm_total(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "association_alarm_total", value)

    @_builtins.property
    @pulumi.getter(name="deleteAssociateAlarm")
    def delete_associate_alarm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether delete the alarm rule which the alarm
        template associated with. Default to **false**.
        """
        return pulumi.get(self, "delete_associate_alarm")

    @delete_associate_alarm.setter
    def delete_associate_alarm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_associate_alarm", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the CES alarm template.
        The description can contain a maximum of `256` characters.

        <a name="CesAlarmTemplate_Policy"></a>
        The `Policy` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isOverwrite")
    def is_overwrite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to overwrite an existing alarm template with the same
        template name when creating a template. Default to **false**.
        """
        return pulumi.get(self, "is_overwrite")

    @is_overwrite.setter
    def is_overwrite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_overwrite", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the CES alarm template.
        An alarm template name starts with a letter or Chinese, consists of `1` to `128` characters,
        and can contain only letters, Chinese characters, digits, hyphens (-) and hyphens (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmTemplatePolicyArgs']]]]:
        """
        Specifies the policy list of the CES alarm template.
        The Policy structure is documented below.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmTemplatePolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the type of the CES alarm template.
        Default to `0`. The valid values are as follows:
        + **0**: metric alarm template.
        + **2**: event alarm template.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Cse/alarmTemplate:AlarmTemplate")
class AlarmTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_associate_alarm: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_overwrite: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmTemplatePolicyArgs', 'AlarmTemplatePolicyArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a CES alarm template resource within HuaweiCloud.

        ## Example Usage

        ### Create a metric alarm template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        test = huaweicloud.cse.AlarmTemplate("test",
            name=name,
            policies=[{
                "namespace": "SYS.APIG",
                "dimension_name": "api_id",
                "metric_name": "req_count_2xx",
                "period": 1,
                "filter": "average",
                "comparison_operator": ">=",
                "value": 10,
                "unit": "times/minute",
                "count": 3,
                "alarm_level": 2,
                "suppress_duration": 43200,
            }])
        ```

        ### Create an event alarm template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        test = huaweicloud.cse.AlarmTemplate("test",
            name=name,
            type=2,
            policies=[{
                "namespace": "SYS.VPC",
                "metric_name": "modifyVpc",
                "period": 0,
                "filter": "average",
                "comparison_operator": ">=",
                "value": 1,
                "unit": "count",
                "count": 1,
                "alarm_level": 2,
                "suppress_duration": 0,
            }])
        ```

        ## Import

        The ces alarm template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/alarmTemplate:AlarmTemplate test <template_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `is_overwrite`.

        It is generally recommended running `pulumi preview` after importing a alarm template.

        You can then decide if changes should be applied to the alarm template, or the resource definition should be updated to

        align with the alarm template. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ces_alarm_template" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              is_overwrite,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delete_associate_alarm: Specifies whether delete the alarm rule which the alarm
               template associated with. Default to **false**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the CES alarm template.
               The description can contain a maximum of `256` characters.
               
               <a name="CesAlarmTemplate_Policy"></a>
               The `Policy` block supports:
        :param pulumi.Input[_builtins.bool] is_overwrite: Specifies whether to overwrite an existing alarm template with the same
               template name when creating a template. Default to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the CES alarm template.
               An alarm template name starts with a letter or Chinese, consists of `1` to `128` characters,
               and can contain only letters, Chinese characters, digits, hyphens (-) and hyphens (-).
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlarmTemplatePolicyArgs', 'AlarmTemplatePolicyArgsDict']]]] policies: Specifies the policy list of the CES alarm template.
               The Policy structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] type: Specifies the type of the CES alarm template.
               Default to `0`. The valid values are as follows:
               + **0**: metric alarm template.
               + **2**: event alarm template.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CES alarm template resource within HuaweiCloud.

        ## Example Usage

        ### Create a metric alarm template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        test = huaweicloud.cse.AlarmTemplate("test",
            name=name,
            policies=[{
                "namespace": "SYS.APIG",
                "dimension_name": "api_id",
                "metric_name": "req_count_2xx",
                "period": 1,
                "filter": "average",
                "comparison_operator": ">=",
                "value": 10,
                "unit": "times/minute",
                "count": 3,
                "alarm_level": 2,
                "suppress_duration": 43200,
            }])
        ```

        ### Create an event alarm template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        test = huaweicloud.cse.AlarmTemplate("test",
            name=name,
            type=2,
            policies=[{
                "namespace": "SYS.VPC",
                "metric_name": "modifyVpc",
                "period": 0,
                "filter": "average",
                "comparison_operator": ">=",
                "value": 1,
                "unit": "count",
                "count": 1,
                "alarm_level": 2,
                "suppress_duration": 0,
            }])
        ```

        ## Import

        The ces alarm template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/alarmTemplate:AlarmTemplate test <template_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `is_overwrite`.

        It is generally recommended running `pulumi preview` after importing a alarm template.

        You can then decide if changes should be applied to the alarm template, or the resource definition should be updated to

        align with the alarm template. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ces_alarm_template" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              is_overwrite,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AlarmTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_associate_alarm: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_overwrite: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmTemplatePolicyArgs', 'AlarmTemplatePolicyArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmTemplateArgs.__new__(AlarmTemplateArgs)

            __props__.__dict__["delete_associate_alarm"] = delete_associate_alarm
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["is_overwrite"] = is_overwrite
            __props__.__dict__["name"] = name
            if policies is None and not opts.urn:
                raise TypeError("Missing required property 'policies'")
            __props__.__dict__["policies"] = policies
            __props__.__dict__["region"] = region
            __props__.__dict__["type"] = type
            __props__.__dict__["association_alarm_total"] = None
        super(AlarmTemplate, __self__).__init__(
            'huaweicloud:Cse/alarmTemplate:AlarmTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            association_alarm_total: Optional[pulumi.Input[_builtins.int]] = None,
            delete_associate_alarm: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            is_overwrite: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AlarmTemplatePolicyArgs', 'AlarmTemplatePolicyArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.int]] = None) -> 'AlarmTemplate':
        """
        Get an existing AlarmTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] association_alarm_total: Indicates the total num of the alarm that associated with the alarm template.
        :param pulumi.Input[_builtins.bool] delete_associate_alarm: Specifies whether delete the alarm rule which the alarm
               template associated with. Default to **false**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the CES alarm template.
               The description can contain a maximum of `256` characters.
               
               <a name="CesAlarmTemplate_Policy"></a>
               The `Policy` block supports:
        :param pulumi.Input[_builtins.bool] is_overwrite: Specifies whether to overwrite an existing alarm template with the same
               template name when creating a template. Default to **false**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the CES alarm template.
               An alarm template name starts with a letter or Chinese, consists of `1` to `128` characters,
               and can contain only letters, Chinese characters, digits, hyphens (-) and hyphens (-).
        :param pulumi.Input[Sequence[pulumi.Input[Union['AlarmTemplatePolicyArgs', 'AlarmTemplatePolicyArgsDict']]]] policies: Specifies the policy list of the CES alarm template.
               The Policy structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] type: Specifies the type of the CES alarm template.
               Default to `0`. The valid values are as follows:
               + **0**: metric alarm template.
               + **2**: event alarm template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmTemplateState.__new__(_AlarmTemplateState)

        __props__.__dict__["association_alarm_total"] = association_alarm_total
        __props__.__dict__["delete_associate_alarm"] = delete_associate_alarm
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["is_overwrite"] = is_overwrite
        __props__.__dict__["name"] = name
        __props__.__dict__["policies"] = policies
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        return AlarmTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="associationAlarmTotal")
    def association_alarm_total(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the total num of the alarm that associated with the alarm template.
        """
        return pulumi.get(self, "association_alarm_total")

    @_builtins.property
    @pulumi.getter(name="deleteAssociateAlarm")
    def delete_associate_alarm(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether delete the alarm rule which the alarm
        template associated with. Default to **false**.
        """
        return pulumi.get(self, "delete_associate_alarm")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the CES alarm template.
        The description can contain a maximum of `256` characters.

        <a name="CesAlarmTemplate_Policy"></a>
        The `Policy` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="isOverwrite")
    def is_overwrite(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to overwrite an existing alarm template with the same
        template name when creating a template. Default to **false**.
        """
        return pulumi.get(self, "is_overwrite")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the CES alarm template.
        An alarm template name starts with a letter or Chinese, consists of `1` to `128` characters,
        and can contain only letters, Chinese characters, digits, hyphens (-) and hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Sequence['outputs.AlarmTemplatePolicy']]:
        """
        Specifies the policy list of the CES alarm template.
        The Policy structure is documented below.
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the type of the CES alarm template.
        Default to `0`. The valid values are as follows:
        + **0**: metric alarm template.
        + **2**: event alarm template.
        """
        return pulumi.get(self, "type")

