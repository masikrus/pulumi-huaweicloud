# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceGroupArgs', 'ResourceGroup']

@pulumi.input_type
class ResourceGroupArgs:
    def __init__(__self__, *,
                 associated_eps_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ResourceGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] associated_eps_ids: Specifies the enterprise project IDs where the resources from.
               It's required if the value of type is **EPS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the resource group.
        :param pulumi.Input[_builtins.str] name: Specifies the dimension name.
               The value can be a string of 1 to 32 characters that must start with a letter
               and contain only letters, digits, underscores (_), and hyphens (-).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceArgs']]] resources: Specifies the list of resources to add into the group.
               The ResourcesOpts structure is documented below.
               
               <a name="ResourceGroup_ResourcesOpts"></a>
               The `resources` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to match resources.
               It's required if the value of type is **TAG**.
        :param pulumi.Input[_builtins.str] type: Specifies the resource group type.
               The value can be **EPS** and **TAG**. If not specified, that means add resources manually.
               
               Changing this parameter will create a new resource.
        """
        if associated_eps_ids is not None:
            pulumi.set(__self__, "associated_eps_ids", associated_eps_ids)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="associatedEpsIds")
    def associated_eps_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the enterprise project IDs where the resources from.
        It's required if the value of type is **EPS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "associated_eps_ids")

    @associated_eps_ids.setter
    def associated_eps_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "associated_eps_ids", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of the resource group.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dimension name.
        The value can be a string of 1 to 32 characters that must start with a letter
        and contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceArgs']]]]:
        """
        Specifies the list of resources to add into the group.
        The ResourcesOpts structure is documented below.

        <a name="ResourceGroup_ResourcesOpts"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value to match resources.
        It's required if the value of type is **TAG**.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource group type.
        The value can be **EPS** and **TAG**. If not specified, that means add resources manually.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ResourceGroupState:
    def __init__(__self__, *,
                 associated_eps_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ResourceGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] associated_eps_ids: Specifies the enterprise project IDs where the resources from.
               It's required if the value of type is **EPS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the resource group.
        :param pulumi.Input[_builtins.str] name: Specifies the dimension name.
               The value can be a string of 1 to 32 characters that must start with a letter
               and contain only letters, digits, underscores (_), and hyphens (-).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceArgs']]] resources: Specifies the list of resources to add into the group.
               The ResourcesOpts structure is documented below.
               
               <a name="ResourceGroup_ResourcesOpts"></a>
               The `resources` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to match resources.
               It's required if the value of type is **TAG**.
        :param pulumi.Input[_builtins.str] type: Specifies the resource group type.
               The value can be **EPS** and **TAG**. If not specified, that means add resources manually.
               
               Changing this parameter will create a new resource.
        """
        if associated_eps_ids is not None:
            pulumi.set(__self__, "associated_eps_ids", associated_eps_ids)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="associatedEpsIds")
    def associated_eps_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the enterprise project IDs where the resources from.
        It's required if the value of type is **EPS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "associated_eps_ids")

    @associated_eps_ids.setter
    def associated_eps_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "associated_eps_ids", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of the resource group.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dimension name.
        The value can be a string of 1 to 32 characters that must start with a letter
        and contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceArgs']]]]:
        """
        Specifies the list of resources to add into the group.
        The ResourcesOpts structure is documented below.

        <a name="ResourceGroup_ResourcesOpts"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value to match resources.
        It's required if the value of type is **TAG**.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource group type.
        The value can be **EPS** and **TAG**. If not specified, that means add resources manually.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Cse/resourceGroup:ResourceGroup")
class ResourceGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associated_eps_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourceGroupResourceArgs', 'ResourceGroupResourceArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CES resource group resource within HuaweiCloud.

        ## Example Usage

        ### Add resources manually

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        image_id = config.require_object("imageId")
        flavor_id = config.require_object("flavorId")
        security_group_id = config.require_object("securityGroupId")
        availability_zone = config.require_object("availabilityZone")
        subnet_id = config.require_object("subnetId")
        vm1 = huaweicloud.ecs.Instance("vm_1",
            name="ecs-test",
            image_id=image_id,
            flavor_id=flavor_id,
            security_group_ids=[security_group_id],
            availability_zone=availability_zone,
            networks=[{
                "uuid": subnet_id,
            }])
        test = huaweicloud.cse.ResourceGroup("test",
            name="test",
            resources=[
                {
                    "namespace": "SYS.ECS",
                    "dimensions": [{
                        "name": "instance_id",
                        "value": vm1.id,
                    }],
                },
                {
                    "namespace": "SYS.EVS",
                    "dimensions": [{
                        "name": "disk_name",
                        "value": vm1.id.apply(lambda id: f"{id}-sda"),
                    }],
                },
            ])
        ```

        ### Add resources from enterprise projects

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        eps_id = config.require_object("epsId")
        test = huaweicloud.cse.ResourceGroup("test",
            name="test",
            type="EPS",
            associated_eps_ids=[eps_id])
        ```

        ### Add resources by tags

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cse.ResourceGroup("test",
            name="test",
            type="TAG",
            tags={
                "key": "value",
                "foo": "bar",
            })
        ```

        ## Import

        The resource group can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/resourceGroup:ResourceGroup test 0ce123456a00f2591fabc00385ff1234
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `resources`.

        It is generally recommended running `pulumi preview` after importing a resource group.

        You can then decide if changes should be applied to the resource group, or the resource definition should be updated to

        align with the resource group. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ces_resource_group" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              resources,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] associated_eps_ids: Specifies the enterprise project IDs where the resources from.
               It's required if the value of type is **EPS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the resource group.
        :param pulumi.Input[_builtins.str] name: Specifies the dimension name.
               The value can be a string of 1 to 32 characters that must start with a letter
               and contain only letters, digits, underscores (_), and hyphens (-).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourceGroupResourceArgs', 'ResourceGroupResourceArgsDict']]]] resources: Specifies the list of resources to add into the group.
               The ResourcesOpts structure is documented below.
               
               <a name="ResourceGroup_ResourcesOpts"></a>
               The `resources` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to match resources.
               It's required if the value of type is **TAG**.
        :param pulumi.Input[_builtins.str] type: Specifies the resource group type.
               The value can be **EPS** and **TAG**. If not specified, that means add resources manually.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ResourceGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CES resource group resource within HuaweiCloud.

        ## Example Usage

        ### Add resources manually

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        image_id = config.require_object("imageId")
        flavor_id = config.require_object("flavorId")
        security_group_id = config.require_object("securityGroupId")
        availability_zone = config.require_object("availabilityZone")
        subnet_id = config.require_object("subnetId")
        vm1 = huaweicloud.ecs.Instance("vm_1",
            name="ecs-test",
            image_id=image_id,
            flavor_id=flavor_id,
            security_group_ids=[security_group_id],
            availability_zone=availability_zone,
            networks=[{
                "uuid": subnet_id,
            }])
        test = huaweicloud.cse.ResourceGroup("test",
            name="test",
            resources=[
                {
                    "namespace": "SYS.ECS",
                    "dimensions": [{
                        "name": "instance_id",
                        "value": vm1.id,
                    }],
                },
                {
                    "namespace": "SYS.EVS",
                    "dimensions": [{
                        "name": "disk_name",
                        "value": vm1.id.apply(lambda id: f"{id}-sda"),
                    }],
                },
            ])
        ```

        ### Add resources from enterprise projects

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        eps_id = config.require_object("epsId")
        test = huaweicloud.cse.ResourceGroup("test",
            name="test",
            type="EPS",
            associated_eps_ids=[eps_id])
        ```

        ### Add resources by tags

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cse.ResourceGroup("test",
            name="test",
            type="TAG",
            tags={
                "key": "value",
                "foo": "bar",
            })
        ```

        ## Import

        The resource group can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cse/resourceGroup:ResourceGroup test 0ce123456a00f2591fabc00385ff1234
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `resources`.

        It is generally recommended running `pulumi preview` after importing a resource group.

        You can then decide if changes should be applied to the resource group, or the resource definition should be updated to

        align with the resource group. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ces_resource_group" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              resources,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ResourceGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associated_eps_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourceGroupResourceArgs', 'ResourceGroupResourceArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceGroupArgs.__new__(ResourceGroupArgs)

            __props__.__dict__["associated_eps_ids"] = associated_eps_ids
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["resources"] = resources
            __props__.__dict__["tags"] = tags
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
        super(ResourceGroup, __self__).__init__(
            'huaweicloud:Cse/resourceGroup:ResourceGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            associated_eps_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourceGroupResourceArgs', 'ResourceGroupResourceArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'ResourceGroup':
        """
        Get an existing ResourceGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] associated_eps_ids: Specifies the enterprise project IDs where the resources from.
               It's required if the value of type is **EPS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the resource group.
        :param pulumi.Input[_builtins.str] name: Specifies the dimension name.
               The value can be a string of 1 to 32 characters that must start with a letter
               and contain only letters, digits, underscores (_), and hyphens (-).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourceGroupResourceArgs', 'ResourceGroupResourceArgsDict']]]] resources: Specifies the list of resources to add into the group.
               The ResourcesOpts structure is documented below.
               
               <a name="ResourceGroup_ResourcesOpts"></a>
               The `resources` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to match resources.
               It's required if the value of type is **TAG**.
        :param pulumi.Input[_builtins.str] type: Specifies the resource group type.
               The value can be **EPS** and **TAG**. If not specified, that means add resources manually.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceGroupState.__new__(_ResourceGroupState)

        __props__.__dict__["associated_eps_ids"] = associated_eps_ids
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["resources"] = resources
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        return ResourceGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="associatedEpsIds")
    def associated_eps_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the enterprise project IDs where the resources from.
        It's required if the value of type is **EPS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "associated_eps_ids")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID of the resource group.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the dimension name.
        The value can be a string of 1 to 32 characters that must start with a letter
        and contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Optional[Sequence['outputs.ResourceGroupResource']]]:
        """
        Specifies the list of resources to add into the group.
        The ResourcesOpts structure is documented below.

        <a name="ResourceGroup_ResourcesOpts"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value to match resources.
        It's required if the value of type is **TAG**.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource group type.
        The value can be **EPS** and **TAG**. If not specified, that means add resources manually.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

