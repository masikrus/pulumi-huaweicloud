# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventReportArgs', 'EventReport']

@pulumi.input_type
class EventReportArgs:
    def __init__(__self__, *,
                 detail: pulumi.Input['EventReportDetailArgs'],
                 source: pulumi.Input[_builtins.str],
                 time: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EventReport resource.
        :param pulumi.Input['EventReportDetailArgs'] detail: Specifies the detail of the CES event.
               The detail structure is documented below.
               
               <a name="Detail"></a>
               The `detail` block supports:
        :param pulumi.Input[_builtins.str] source: Specifies the event source.
        :param pulumi.Input[_builtins.str] time: Specifies the occurrence time of the event.
               The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        :param pulumi.Input[_builtins.str] name: The resource dimension name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "time", time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> pulumi.Input['EventReportDetailArgs']:
        """
        Specifies the detail of the CES event.
        The detail structure is documented below.

        <a name="Detail"></a>
        The `detail` block supports:
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: pulumi.Input['EventReportDetailArgs']):
        pulumi.set(self, "detail", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the event source.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the occurrence time of the event.
        The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource dimension name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _EventReportState:
    def __init__(__self__, *,
                 detail: Optional[pulumi.Input['EventReportDetailArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EventReport resources.
        :param pulumi.Input['EventReportDetailArgs'] detail: Specifies the detail of the CES event.
               The detail structure is documented below.
               
               <a name="Detail"></a>
               The `detail` block supports:
        :param pulumi.Input[_builtins.str] name: The resource dimension name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the event source.
        :param pulumi.Input[_builtins.str] time: Specifies the occurrence time of the event.
               The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        """
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input['EventReportDetailArgs']]:
        """
        Specifies the detail of the CES event.
        The detail structure is documented below.

        <a name="Detail"></a>
        The `detail` block supports:
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input['EventReportDetailArgs']]):
        pulumi.set(self, "detail", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource dimension name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the event source.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the occurrence time of the event.
        The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time", value)


@pulumi.type_token("huaweicloud:Cse/eventReport:EventReport")
class EventReport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 detail: Optional[pulumi.Input[Union['EventReportDetailArgs', 'EventReportDetailArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 time: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CES event report resource within HuaweiCloud.

        > This resource is only a one-time action resource for operating the API.
        Deleting this resource will not clear the corresponding request record,
        but will only remove the resource information from the tfstate file.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['EventReportDetailArgs', 'EventReportDetailArgsDict']] detail: Specifies the detail of the CES event.
               The detail structure is documented below.
               
               <a name="Detail"></a>
               The `detail` block supports:
        :param pulumi.Input[_builtins.str] name: The resource dimension name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the event source.
        :param pulumi.Input[_builtins.str] time: Specifies the occurrence time of the event.
               The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventReportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CES event report resource within HuaweiCloud.

        > This resource is only a one-time action resource for operating the API.
        Deleting this resource will not clear the corresponding request record,
        but will only remove the resource information from the tfstate file.

        :param str resource_name: The name of the resource.
        :param EventReportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventReportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 detail: Optional[pulumi.Input[Union['EventReportDetailArgs', 'EventReportDetailArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 time: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventReportArgs.__new__(EventReportArgs)

            if detail is None and not opts.urn:
                raise TypeError("Missing required property 'detail'")
            __props__.__dict__["detail"] = detail
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if time is None and not opts.urn:
                raise TypeError("Missing required property 'time'")
            __props__.__dict__["time"] = time
        super(EventReport, __self__).__init__(
            'huaweicloud:Cse/eventReport:EventReport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            detail: Optional[pulumi.Input[Union['EventReportDetailArgs', 'EventReportDetailArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source: Optional[pulumi.Input[_builtins.str]] = None,
            time: Optional[pulumi.Input[_builtins.str]] = None) -> 'EventReport':
        """
        Get an existing EventReport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['EventReportDetailArgs', 'EventReportDetailArgsDict']] detail: Specifies the detail of the CES event.
               The detail structure is documented below.
               
               <a name="Detail"></a>
               The `detail` block supports:
        :param pulumi.Input[_builtins.str] name: The resource dimension name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] source: Specifies the event source.
        :param pulumi.Input[_builtins.str] time: Specifies the occurrence time of the event.
               The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventReportState.__new__(_EventReportState)

        __props__.__dict__["detail"] = detail
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["source"] = source
        __props__.__dict__["time"] = time
        return EventReport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> pulumi.Output['outputs.EventReportDetail']:
        """
        Specifies the detail of the CES event.
        The detail structure is documented below.

        <a name="Detail"></a>
        The `detail` block supports:
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource dimension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the event source.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the occurrence time of the event.
        The time is in UTC. The format is **yyyy-MM-dd HH:mm:ss**.
        """
        return pulumi.get(self, "time")

