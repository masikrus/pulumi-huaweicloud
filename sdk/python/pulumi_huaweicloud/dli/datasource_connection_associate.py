# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DatasourceConnectionAssociateArgs', 'DatasourceConnectionAssociate']

@pulumi.input_type
class DatasourceConnectionAssociateArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[_builtins.str],
                 elastic_resource_pools: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DatasourceConnectionAssociate resource.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the datasource **enhanced** connection to be
               associated.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] elastic_resource_pools: Specifies the list of elastic resoruce pool names.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "elastic_resource_pools", elastic_resource_pools)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the datasource **enhanced** connection to be
        associated.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="elasticResourcePools")
    def elastic_resource_pools(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of elastic resoruce pool names.
        """
        return pulumi.get(self, "elastic_resource_pools")

    @elastic_resource_pools.setter
    def elastic_resource_pools(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "elastic_resource_pools", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DatasourceConnectionAssociateState:
    def __init__(__self__, *,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 elastic_resource_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DatasourceConnectionAssociate resources.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the datasource **enhanced** connection to be
               associated.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] elastic_resource_pools: Specifies the list of elastic resoruce pool names.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if elastic_resource_pools is not None:
            pulumi.set(__self__, "elastic_resource_pools", elastic_resource_pools)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the datasource **enhanced** connection to be
        associated.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="elasticResourcePools")
    def elastic_resource_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of elastic resoruce pool names.
        """
        return pulumi.get(self, "elastic_resource_pools")

    @elastic_resource_pools.setter
    def elastic_resource_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "elastic_resource_pools", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dli/datasourceConnectionAssociate:DatasourceConnectionAssociate")
class DatasourceConnectionAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 elastic_resource_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to associate the elastic resource pools to the DLI datasource **enhanced** connection within
        HuaweiCloud.

        > A connection can only have one resource.

        ## Example Usage

        ### Grant queue binding permission to the datasource enhanced connection

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        connection_id = config.require_object("connectionId")
        associated_pool_names = config.require_object("associatedPoolNames")
        test = huaweicloud.dli.DatasourceConnectionAssociate("test",
            connection_id=connection_id,
            elastic_resource_pools=associated_pool_names)
        ```

        ## Import

        The associate relationship can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dli/datasourceConnectionAssociate:DatasourceConnectionAssociate test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the datasource **enhanced** connection to be
               associated.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] elastic_resource_pools: Specifies the list of elastic resoruce pool names.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatasourceConnectionAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to associate the elastic resource pools to the DLI datasource **enhanced** connection within
        HuaweiCloud.

        > A connection can only have one resource.

        ## Example Usage

        ### Grant queue binding permission to the datasource enhanced connection

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        connection_id = config.require_object("connectionId")
        associated_pool_names = config.require_object("associatedPoolNames")
        test = huaweicloud.dli.DatasourceConnectionAssociate("test",
            connection_id=connection_id,
            elastic_resource_pools=associated_pool_names)
        ```

        ## Import

        The associate relationship can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dli/datasourceConnectionAssociate:DatasourceConnectionAssociate test <id>
        ```

        :param str resource_name: The name of the resource.
        :param DatasourceConnectionAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatasourceConnectionAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 elastic_resource_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatasourceConnectionAssociateArgs.__new__(DatasourceConnectionAssociateArgs)

            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            if elastic_resource_pools is None and not opts.urn:
                raise TypeError("Missing required property 'elastic_resource_pools'")
            __props__.__dict__["elastic_resource_pools"] = elastic_resource_pools
            __props__.__dict__["region"] = region
        super(DatasourceConnectionAssociate, __self__).__init__(
            'huaweicloud:Dli/datasourceConnectionAssociate:DatasourceConnectionAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            elastic_resource_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'DatasourceConnectionAssociate':
        """
        Get an existing DatasourceConnectionAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the datasource **enhanced** connection to be
               associated.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] elastic_resource_pools: Specifies the list of elastic resoruce pool names.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatasourceConnectionAssociateState.__new__(_DatasourceConnectionAssociateState)

        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["elastic_resource_pools"] = elastic_resource_pools
        __props__.__dict__["region"] = region
        return DatasourceConnectionAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the datasource **enhanced** connection to be
        associated.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="elasticResourcePools")
    def elastic_resource_pools(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of elastic resoruce pool names.
        """
        return pulumi.get(self, "elastic_resource_pools")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

