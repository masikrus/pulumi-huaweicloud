# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SparkTemplateArgs', 'SparkTemplate']

@pulumi.input_type
class SparkTemplateArgs:
    def __init__(__self__, *,
                 body: pulumi.Input['SparkTemplateBodyArgs'],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SparkTemplate resource.
        :param pulumi.Input['SparkTemplateBodyArgs'] body: The content of the spark template.
               The body structure is documented below.
        :param pulumi.Input[_builtins.str] description: The description of the spark template.
               
               <a name="SparkTemplate_body"></a>
               The `body` block supports:
        :param pulumi.Input[_builtins.str] group: The group of the spark template.
        :param pulumi.Input[_builtins.str] name: User group name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "body", body)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Input['SparkTemplateBodyArgs']:
        """
        The content of the spark template.
        The body structure is documented below.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input['SparkTemplateBodyArgs']):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the spark template.

        <a name="SparkTemplate_body"></a>
        The `body` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The group of the spark template.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SparkTemplateState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input['SparkTemplateBodyArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SparkTemplate resources.
        :param pulumi.Input['SparkTemplateBodyArgs'] body: The content of the spark template.
               The body structure is documented below.
        :param pulumi.Input[_builtins.str] description: The description of the spark template.
               
               <a name="SparkTemplate_body"></a>
               The `body` block supports:
        :param pulumi.Input[_builtins.str] group: The group of the spark template.
        :param pulumi.Input[_builtins.str] name: User group name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input['SparkTemplateBodyArgs']]:
        """
        The content of the spark template.
        The body structure is documented below.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input['SparkTemplateBodyArgs']]):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the spark template.

        <a name="SparkTemplate_body"></a>
        The `body` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The group of the spark template.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dli/sparkTemplate:SparkTemplate")
class SparkTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[Union['SparkTemplateBodyArgs', 'SparkTemplateBodyArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DLI Spark template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.dli.SparkTemplate("test",
            name="demo",
            description="This is a demo",
            group="demo",
            body={
                "queue_name": "queue_demo",
                "name": "demo",
                "app_name": "jar_package/demo.jar",
                "main_class": "com.demo.main",
                "specification": "B",
            })
        ```

        ## Import

        The spark template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dli/sparkTemplate:SparkTemplate test 9680ed93-fa3f-47e5-8471-ff6e7e1a6499
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['SparkTemplateBodyArgs', 'SparkTemplateBodyArgsDict']] body: The content of the spark template.
               The body structure is documented below.
        :param pulumi.Input[_builtins.str] description: The description of the spark template.
               
               <a name="SparkTemplate_body"></a>
               The `body` block supports:
        :param pulumi.Input[_builtins.str] group: The group of the spark template.
        :param pulumi.Input[_builtins.str] name: User group name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SparkTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DLI Spark template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.dli.SparkTemplate("test",
            name="demo",
            description="This is a demo",
            group="demo",
            body={
                "queue_name": "queue_demo",
                "name": "demo",
                "app_name": "jar_package/demo.jar",
                "main_class": "com.demo.main",
                "specification": "B",
            })
        ```

        ## Import

        The spark template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dli/sparkTemplate:SparkTemplate test 9680ed93-fa3f-47e5-8471-ff6e7e1a6499
        ```

        :param str resource_name: The name of the resource.
        :param SparkTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SparkTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[Union['SparkTemplateBodyArgs', 'SparkTemplateBodyArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SparkTemplateArgs.__new__(SparkTemplateArgs)

            if body is None and not opts.urn:
                raise TypeError("Missing required property 'body'")
            __props__.__dict__["body"] = body
            __props__.__dict__["description"] = description
            __props__.__dict__["group"] = group
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
        super(SparkTemplate, __self__).__init__(
            'huaweicloud:Dli/sparkTemplate:SparkTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[Union['SparkTemplateBodyArgs', 'SparkTemplateBodyArgsDict']]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            group: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'SparkTemplate':
        """
        Get an existing SparkTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['SparkTemplateBodyArgs', 'SparkTemplateBodyArgsDict']] body: The content of the spark template.
               The body structure is documented below.
        :param pulumi.Input[_builtins.str] description: The description of the spark template.
               
               <a name="SparkTemplate_body"></a>
               The `body` block supports:
        :param pulumi.Input[_builtins.str] group: The group of the spark template.
        :param pulumi.Input[_builtins.str] name: User group name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SparkTemplateState.__new__(_SparkTemplateState)

        __props__.__dict__["body"] = body
        __props__.__dict__["description"] = description
        __props__.__dict__["group"] = group
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        return SparkTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Output['outputs.SparkTemplateBody']:
        """
        The content of the spark template.
        The body structure is documented below.
        """
        return pulumi.get(self, "body")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The description of the spark template.

        <a name="SparkTemplate_body"></a>
        The `body` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def group(self) -> pulumi.Output[_builtins.str]:
        """
        The group of the spark template.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        User group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

