# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetElasticResourcePoolsResult',
    'AwaitableGetElasticResourcePoolsResult',
    'get_elastic_resource_pools',
    'get_elastic_resource_pools_output',
]

@pulumi.output_type
class GetElasticResourcePoolsResult:
    """
    A collection of values returned by getElasticResourcePools.
    """
    def __init__(__self__, elastic_resource_pools=None, id=None, name=None, region=None, status=None, tags=None):
        if elastic_resource_pools and not isinstance(elastic_resource_pools, list):
            raise TypeError("Expected argument 'elastic_resource_pools' to be a list")
        pulumi.set(__self__, "elastic_resource_pools", elastic_resource_pools)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="elasticResourcePools")
    def elastic_resource_pools(self) -> Sequence['outputs.GetElasticResourcePoolsElasticResourcePoolResult']:
        """
        All elastic resource pools that match the filter parameters.
        """
        return pulumi.get(self, "elastic_resource_pools")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The elastic resource pool name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The current status of the elastic resource pool.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "tags")


class AwaitableGetElasticResourcePoolsResult(GetElasticResourcePoolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetElasticResourcePoolsResult(
            elastic_resource_pools=self.elastic_resource_pools,
            id=self.id,
            name=self.name,
            region=self.region,
            status=self.status,
            tags=self.tags)


def get_elastic_resource_pools(name: Optional[_builtins.str] = None,
                               region: Optional[_builtins.str] = None,
                               status: Optional[_builtins.str] = None,
                               tags: Optional[Mapping[str, _builtins.str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetElasticResourcePoolsResult:
    """
    Use this data source to get the list of DLI elastic resource pools within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resoure_pool_name = config.require_object("resourePoolName")
    test = huaweicloud.Dli.get_elastic_resource_pools(name=resoure_pool_name)
    ```


    :param _builtins.str name: Specifies the name of the elastic resource pool.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the elastic resource pool.
           The valid values are as follows:
           + **available**
           + **failed**
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the elastic resource pool.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dli/getElasticResourcePools:getElasticResourcePools', __args__, opts=opts, typ=GetElasticResourcePoolsResult).value

    return AwaitableGetElasticResourcePoolsResult(
        elastic_resource_pools=pulumi.get(__ret__, 'elastic_resource_pools'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))
def get_elastic_resource_pools_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetElasticResourcePoolsResult]:
    """
    Use this data source to get the list of DLI elastic resource pools within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resoure_pool_name = config.require_object("resourePoolName")
    test = huaweicloud.Dli.get_elastic_resource_pools(name=resoure_pool_name)
    ```


    :param _builtins.str name: Specifies the name of the elastic resource pool.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the elastic resource pool.
           The valid values are as follows:
           + **available**
           + **failed**
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the elastic resource pool.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dli/getElasticResourcePools:getElasticResourcePools', __args__, opts=opts, typ=GetElasticResourcePoolsResult)
    return __ret__.apply(lambda __response__: GetElasticResourcePoolsResult(
        elastic_resource_pools=pulumi.get(__response__, 'elastic_resource_pools'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags')))
