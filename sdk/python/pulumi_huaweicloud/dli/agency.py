# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AgencyArgs', 'Agency']

@pulumi.input_type
class AgencyArgs:
    def __init__(__self__, *,
                 roles: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Agency resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: The list of roles.  
               The options are as follows:
               + **te_admin**: Tenant Administrator permissions are required to access data from OBS to execute Flink jobs on DLI,
               for example, obtaining OBS/DWS data sources, log dump (including bucket authorization), checkpoint enabling,
               and job import and export. Due to cloud service cache differences, operations require about 60 minutes to take effect.
               + **dis_adm**: DIS Administrator permissions are required to use DIS data as the data source of DLI Flink jobs.
               Due to cloud service cache differences, operations require about 30 minutes to take effect.
               + **ctable_adm**: CloudTable Administrator permissions are required to use CloudTable data as the data source of
               DLI Flink jobs.
               + **vpc_netadm**: VPC Administrator permissions are required to use the VPC, subnet, route, VPC peering connection,
               and port for DLI datasource connections.
               + **smn_adm**: SMN Administrator permissions are required to receive notifications when a DLI job fails.
               + **obs_adm**: OBS Administrator permissions are required to use the Object Storage service.
               + **iam_readOnlyAccess**: IAM ReadOnlyAccess permissions are required to obtain information about the
               IAM users who have never logged in to DLI.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "roles", roles)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The list of roles.  
        The options are as follows:
        + **te_admin**: Tenant Administrator permissions are required to access data from OBS to execute Flink jobs on DLI,
        for example, obtaining OBS/DWS data sources, log dump (including bucket authorization), checkpoint enabling,
        and job import and export. Due to cloud service cache differences, operations require about 60 minutes to take effect.
        + **dis_adm**: DIS Administrator permissions are required to use DIS data as the data source of DLI Flink jobs.
        Due to cloud service cache differences, operations require about 30 minutes to take effect.
        + **ctable_adm**: CloudTable Administrator permissions are required to use CloudTable data as the data source of
        DLI Flink jobs.
        + **vpc_netadm**: VPC Administrator permissions are required to use the VPC, subnet, route, VPC peering connection,
        and port for DLI datasource connections.
        + **smn_adm**: SMN Administrator permissions are required to receive notifications when a DLI job fails.
        + **obs_adm**: OBS Administrator permissions are required to use the Object Storage service.
        + **iam_readOnlyAccess**: IAM ReadOnlyAccess permissions are required to obtain information about the
        IAM users who have never logged in to DLI.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AgencyState:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Agency resources.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: The list of roles.  
               The options are as follows:
               + **te_admin**: Tenant Administrator permissions are required to access data from OBS to execute Flink jobs on DLI,
               for example, obtaining OBS/DWS data sources, log dump (including bucket authorization), checkpoint enabling,
               and job import and export. Due to cloud service cache differences, operations require about 60 minutes to take effect.
               + **dis_adm**: DIS Administrator permissions are required to use DIS data as the data source of DLI Flink jobs.
               Due to cloud service cache differences, operations require about 30 minutes to take effect.
               + **ctable_adm**: CloudTable Administrator permissions are required to use CloudTable data as the data source of
               DLI Flink jobs.
               + **vpc_netadm**: VPC Administrator permissions are required to use the VPC, subnet, route, VPC peering connection,
               and port for DLI datasource connections.
               + **smn_adm**: SMN Administrator permissions are required to receive notifications when a DLI job fails.
               + **obs_adm**: OBS Administrator permissions are required to use the Object Storage service.
               + **iam_readOnlyAccess**: IAM ReadOnlyAccess permissions are required to obtain information about the
               IAM users who have never logged in to DLI.
        :param pulumi.Input[_builtins.str] version: Agency version information.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of roles.  
        The options are as follows:
        + **te_admin**: Tenant Administrator permissions are required to access data from OBS to execute Flink jobs on DLI,
        for example, obtaining OBS/DWS data sources, log dump (including bucket authorization), checkpoint enabling,
        and job import and export. Due to cloud service cache differences, operations require about 60 minutes to take effect.
        + **dis_adm**: DIS Administrator permissions are required to use DIS data as the data source of DLI Flink jobs.
        Due to cloud service cache differences, operations require about 30 minutes to take effect.
        + **ctable_adm**: CloudTable Administrator permissions are required to use CloudTable data as the data source of
        DLI Flink jobs.
        + **vpc_netadm**: VPC Administrator permissions are required to use the VPC, subnet, route, VPC peering connection,
        and port for DLI datasource connections.
        + **smn_adm**: SMN Administrator permissions are required to receive notifications when a DLI job fails.
        + **obs_adm**: OBS Administrator permissions are required to use the Object Storage service.
        + **iam_readOnlyAccess**: IAM ReadOnlyAccess permissions are required to obtain information about the
        IAM users who have never logged in to DLI.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Agency version information.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:Dli/agency:Agency")
class Agency(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Assign Agency Permissions of DLI service within HuaweiCloud.\\
        Once service authorization has succeeded, an agency named **dli_admin_agency** on IAM will be created.
        You can only create one this resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.dli.Agency("test", roles=[
            "obs_adm",
            "dis_adm",
            "ctable_adm",
            "vpc_netadm",
            "smn_adm",
            "te_admin",
            "iam_readOnlyAccess",
        ])
        ```

        ## Import

        The agency can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dli/agency:Agency test dli_admin_agency
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: The list of roles.  
               The options are as follows:
               + **te_admin**: Tenant Administrator permissions are required to access data from OBS to execute Flink jobs on DLI,
               for example, obtaining OBS/DWS data sources, log dump (including bucket authorization), checkpoint enabling,
               and job import and export. Due to cloud service cache differences, operations require about 60 minutes to take effect.
               + **dis_adm**: DIS Administrator permissions are required to use DIS data as the data source of DLI Flink jobs.
               Due to cloud service cache differences, operations require about 30 minutes to take effect.
               + **ctable_adm**: CloudTable Administrator permissions are required to use CloudTable data as the data source of
               DLI Flink jobs.
               + **vpc_netadm**: VPC Administrator permissions are required to use the VPC, subnet, route, VPC peering connection,
               and port for DLI datasource connections.
               + **smn_adm**: SMN Administrator permissions are required to receive notifications when a DLI job fails.
               + **obs_adm**: OBS Administrator permissions are required to use the Object Storage service.
               + **iam_readOnlyAccess**: IAM ReadOnlyAccess permissions are required to obtain information about the
               IAM users who have never logged in to DLI.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AgencyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Assign Agency Permissions of DLI service within HuaweiCloud.\\
        Once service authorization has succeeded, an agency named **dli_admin_agency** on IAM will be created.
        You can only create one this resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.dli.Agency("test", roles=[
            "obs_adm",
            "dis_adm",
            "ctable_adm",
            "vpc_netadm",
            "smn_adm",
            "te_admin",
            "iam_readOnlyAccess",
        ])
        ```

        ## Import

        The agency can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dli/agency:Agency test dli_admin_agency
        ```

        :param str resource_name: The name of the resource.
        :param AgencyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AgencyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AgencyArgs.__new__(AgencyArgs)

            __props__.__dict__["region"] = region
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
            __props__.__dict__["version"] = None
        super(Agency, __self__).__init__(
            'huaweicloud:Dli/agency:Agency',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'Agency':
        """
        Get an existing Agency resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: The list of roles.  
               The options are as follows:
               + **te_admin**: Tenant Administrator permissions are required to access data from OBS to execute Flink jobs on DLI,
               for example, obtaining OBS/DWS data sources, log dump (including bucket authorization), checkpoint enabling,
               and job import and export. Due to cloud service cache differences, operations require about 60 minutes to take effect.
               + **dis_adm**: DIS Administrator permissions are required to use DIS data as the data source of DLI Flink jobs.
               Due to cloud service cache differences, operations require about 30 minutes to take effect.
               + **ctable_adm**: CloudTable Administrator permissions are required to use CloudTable data as the data source of
               DLI Flink jobs.
               + **vpc_netadm**: VPC Administrator permissions are required to use the VPC, subnet, route, VPC peering connection,
               and port for DLI datasource connections.
               + **smn_adm**: SMN Administrator permissions are required to receive notifications when a DLI job fails.
               + **obs_adm**: OBS Administrator permissions are required to use the Object Storage service.
               + **iam_readOnlyAccess**: IAM ReadOnlyAccess permissions are required to obtain information about the
               IAM users who have never logged in to DLI.
        :param pulumi.Input[_builtins.str] version: Agency version information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AgencyState.__new__(_AgencyState)

        __props__.__dict__["region"] = region
        __props__.__dict__["roles"] = roles
        __props__.__dict__["version"] = version
        return Agency(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The list of roles.  
        The options are as follows:
        + **te_admin**: Tenant Administrator permissions are required to access data from OBS to execute Flink jobs on DLI,
        for example, obtaining OBS/DWS data sources, log dump (including bucket authorization), checkpoint enabling,
        and job import and export. Due to cloud service cache differences, operations require about 60 minutes to take effect.
        + **dis_adm**: DIS Administrator permissions are required to use DIS data as the data source of DLI Flink jobs.
        Due to cloud service cache differences, operations require about 30 minutes to take effect.
        + **ctable_adm**: CloudTable Administrator permissions are required to use CloudTable data as the data source of
        DLI Flink jobs.
        + **vpc_netadm**: VPC Administrator permissions are required to use the VPC, subnet, route, VPC peering connection,
        and port for DLI datasource connections.
        + **smn_adm**: SMN Administrator permissions are required to receive notifications when a DLI job fails.
        + **obs_adm**: OBS Administrator permissions are required to use the Object Storage service.
        + **iam_readOnlyAccess**: IAM ReadOnlyAccess permissions are required to obtain information about the
        IAM users who have never logged in to DLI.
        """
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Agency version information.
        """
        return pulumi.get(self, "version")

