# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TemplateSparkArgs', 'TemplateSpark']

@pulumi.input_type
class TemplateSparkArgs:
    def __init__(__self__, *,
                 body: pulumi.Input['TemplateSparkBodyArgs'],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TemplateSpark resource.
        :param pulumi.Input['TemplateSparkBodyArgs'] body: The content of the spark template.
        :param pulumi.Input[_builtins.str] description: The description of the spark template.
        :param pulumi.Input[_builtins.str] group: The group of the spark template.
        :param pulumi.Input[_builtins.str] name: The name of the spark template.
        """
        pulumi.set(__self__, "body", body)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Input['TemplateSparkBodyArgs']:
        """
        The content of the spark template.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input['TemplateSparkBodyArgs']):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the spark template.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The group of the spark template.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the spark template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _TemplateSparkState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input['TemplateSparkBodyArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TemplateSpark resources.
        :param pulumi.Input['TemplateSparkBodyArgs'] body: The content of the spark template.
        :param pulumi.Input[_builtins.str] description: The description of the spark template.
        :param pulumi.Input[_builtins.str] group: The group of the spark template.
        :param pulumi.Input[_builtins.str] name: The name of the spark template.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input['TemplateSparkBodyArgs']]:
        """
        The content of the spark template.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input['TemplateSparkBodyArgs']]):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the spark template.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The group of the spark template.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the spark template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dli/templateSpark:TemplateSpark")
class TemplateSpark(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[Union['TemplateSparkBodyArgs', 'TemplateSparkBodyArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a TemplateSpark resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['TemplateSparkBodyArgs', 'TemplateSparkBodyArgsDict']] body: The content of the spark template.
        :param pulumi.Input[_builtins.str] description: The description of the spark template.
        :param pulumi.Input[_builtins.str] group: The group of the spark template.
        :param pulumi.Input[_builtins.str] name: The name of the spark template.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TemplateSparkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TemplateSpark resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TemplateSparkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TemplateSparkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[Union['TemplateSparkBodyArgs', 'TemplateSparkBodyArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TemplateSparkArgs.__new__(TemplateSparkArgs)

            if body is None and not opts.urn:
                raise TypeError("Missing required property 'body'")
            __props__.__dict__["body"] = body
            __props__.__dict__["description"] = description
            __props__.__dict__["group"] = group
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
        super(TemplateSpark, __self__).__init__(
            'huaweicloud:Dli/templateSpark:TemplateSpark',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[Union['TemplateSparkBodyArgs', 'TemplateSparkBodyArgsDict']]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            group: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'TemplateSpark':
        """
        Get an existing TemplateSpark resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['TemplateSparkBodyArgs', 'TemplateSparkBodyArgsDict']] body: The content of the spark template.
        :param pulumi.Input[_builtins.str] description: The description of the spark template.
        :param pulumi.Input[_builtins.str] group: The group of the spark template.
        :param pulumi.Input[_builtins.str] name: The name of the spark template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TemplateSparkState.__new__(_TemplateSparkState)

        __props__.__dict__["body"] = body
        __props__.__dict__["description"] = description
        __props__.__dict__["group"] = group
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        return TemplateSpark(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Output['outputs.TemplateSparkBody']:
        """
        The content of the spark template.
        """
        return pulumi.get(self, "body")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The description of the spark template.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def group(self) -> pulumi.Output[_builtins.str]:
        """
        The group of the spark template.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the spark template.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

