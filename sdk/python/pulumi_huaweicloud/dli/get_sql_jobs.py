# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSqlJobsResult',
    'AwaitableGetSqlJobsResult',
    'get_sql_jobs',
    'get_sql_jobs_output',
]

@pulumi.output_type
class GetSqlJobsResult:
    """
    A collection of values returned by getSqlJobs.
    """
    def __init__(__self__, end_time=None, id=None, job_id=None, jobs=None, queue_name=None, region=None, start_time=None, status=None, type=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if jobs and not isinstance(jobs, list):
            raise TypeError("Expected argument 'jobs' to be a list")
        pulumi.set(__self__, "jobs", jobs)
        if queue_name and not isinstance(queue_name, str):
            raise TypeError("Expected argument 'queue_name' to be a str")
        pulumi.set(__self__, "queue_name", queue_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        The time when a job is end, in RFC 3339 format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence['outputs.GetSqlJobsJobResult']:
        """
        All jobs that match the filter parameters.
        """
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[_builtins.str]:
        """
        The queue name which this job to be submitted belongs.
        """
        return pulumi.get(self, "queue_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        The time when a job is start, in RFC 3339 format.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the job.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of job.
        """
        return pulumi.get(self, "type")


class AwaitableGetSqlJobsResult(GetSqlJobsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSqlJobsResult(
            end_time=self.end_time,
            id=self.id,
            job_id=self.job_id,
            jobs=self.jobs,
            queue_name=self.queue_name,
            region=self.region,
            start_time=self.start_time,
            status=self.status,
            type=self.type)


def get_sql_jobs(end_time: Optional[_builtins.str] = None,
                 job_id: Optional[_builtins.str] = None,
                 queue_name: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 start_time: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSqlJobsResult:
    """
    Use this data source to get the list of the DLI SQL jobs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    job_id = config.require_object("jobId")
    test = huaweicloud.Dli.get_sql_jobs(job_id=job_id)
    ```


    :param _builtins.str end_time: Specifies the time when a job is end to be queried.
           The format is `YYYY-MM-DDThh:mm:ss{timezone}`, e.g. `2024-01-01T08:00:00+08:00`.
    :param _builtins.str job_id: Specifies the ID of the job to be queried.
    :param _builtins.str queue_name: Specifies the queue name which the jobs to be submitted belong.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the time when a job is start to be queried.
           The format is `YYYY-MM-DDThh:mm:ss{timezone}`, e.g. `2024-01-01T08:00:00+08:00`.
    :param _builtins.str status: Specifies the status of the job to be queried.
           The valid values are **FINISHED**, **FAILED** and **CANCELED**.
    :param _builtins.str type: Specifies the type of the jobs to be queried.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['jobId'] = job_id
    __args__['queueName'] = queue_name
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dli/getSqlJobs:getSqlJobs', __args__, opts=opts, typ=GetSqlJobsResult).value

    return AwaitableGetSqlJobsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        job_id=pulumi.get(__ret__, 'job_id'),
        jobs=pulumi.get(__ret__, 'jobs'),
        queue_name=pulumi.get(__ret__, 'queue_name'),
        region=pulumi.get(__ret__, 'region'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_sql_jobs_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        job_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        queue_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSqlJobsResult]:
    """
    Use this data source to get the list of the DLI SQL jobs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    job_id = config.require_object("jobId")
    test = huaweicloud.Dli.get_sql_jobs(job_id=job_id)
    ```


    :param _builtins.str end_time: Specifies the time when a job is end to be queried.
           The format is `YYYY-MM-DDThh:mm:ss{timezone}`, e.g. `2024-01-01T08:00:00+08:00`.
    :param _builtins.str job_id: Specifies the ID of the job to be queried.
    :param _builtins.str queue_name: Specifies the queue name which the jobs to be submitted belong.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the time when a job is start to be queried.
           The format is `YYYY-MM-DDThh:mm:ss{timezone}`, e.g. `2024-01-01T08:00:00+08:00`.
    :param _builtins.str status: Specifies the status of the job to be queried.
           The valid values are **FINISHED**, **FAILED** and **CANCELED**.
    :param _builtins.str type: Specifies the type of the jobs to be queried.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['jobId'] = job_id
    __args__['queueName'] = queue_name
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dli/getSqlJobs:getSqlJobs', __args__, opts=opts, typ=GetSqlJobsResult)
    return __ret__.apply(lambda __response__: GetSqlJobsResult(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        job_id=pulumi.get(__response__, 'job_id'),
        jobs=pulumi.get(__response__, 'jobs'),
        queue_name=pulumi.get(__response__, 'queue_name'),
        region=pulumi.get(__response__, 'region'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
