# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatasourceConnectionArgs', 'DatasourceConnection']

@pulumi.input_type
class DatasourceConnectionArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionHostArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionRouteArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a DatasourceConnection resource.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID of the service to be connected.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID of the service to be connected.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionHostArgs']]] hosts: The user-defined host information. A maximum of 20,000 records are supported.
               The Host structure is documented below.
        :param pulumi.Input[_builtins.str] name: The route name.  
               The valid length is limited from `1` to `64`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] queues: List of queue names that are available for datasource connections.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] route_table_id: The route table ID associated with the subnet of the service to be connected.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionRouteArgs']]] routes: List of routes.
               
               The Route structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the datasource connection.
               
               Changing this parameter will create a new resource.
               
               <a name="datasourceConnection_Host"></a>
               The `Host` block supports:
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if queues is not None:
            pulumi.set(__self__, "queues", queues)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        The subnet ID of the service to be connected.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        The VPC ID of the service to be connected.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionHostArgs']]]]:
        """
        The user-defined host information. A maximum of 20,000 records are supported.
        The Host structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The route name.  
        The valid length is limited from `1` to `64`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of queue names that are available for datasource connections.
        """
        return pulumi.get(self, "queues")

    @queues.setter
    def queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "queues", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The route table ID associated with the subnet of the service to be connected.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_table_id", value)

    @_builtins.property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionRouteArgs']]]]:
        """
        List of routes.

        The Route structure is documented below.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The key/value pairs to associate with the datasource connection.

        Changing this parameter will create a new resource.

        <a name="datasourceConnection_Host"></a>
        The `Host` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DatasourceConnectionState:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionHostArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionRouteArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DatasourceConnection resources.
        :param pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionHostArgs']]] hosts: The user-defined host information. A maximum of 20,000 records are supported.
               The Host structure is documented below.
        :param pulumi.Input[_builtins.str] name: The route name.  
               The valid length is limited from `1` to `64`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] queues: List of queue names that are available for datasource connections.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] route_table_id: The route table ID associated with the subnet of the service to be connected.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionRouteArgs']]] routes: List of routes.
               
               The Route structure is documented below.
        :param pulumi.Input[_builtins.str] status: The connection status.  
               The options are as follows:
               + **ACTIVE**: The datasource connection is activated.
               + **DELETED**: The datasource connection is deleted.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID of the service to be connected.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the datasource connection.
               
               Changing this parameter will create a new resource.
               
               <a name="datasourceConnection_Host"></a>
               The `Host` block supports:
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID of the service to be connected.
               
               Changing this parameter will create a new resource.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if queues is not None:
            pulumi.set(__self__, "queues", queues)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionHostArgs']]]]:
        """
        The user-defined host information. A maximum of 20,000 records are supported.
        The Host structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The route name.  
        The valid length is limited from `1` to `64`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of queue names that are available for datasource connections.
        """
        return pulumi.get(self, "queues")

    @queues.setter
    def queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "queues", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The route table ID associated with the subnet of the service to be connected.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_table_id", value)

    @_builtins.property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionRouteArgs']]]]:
        """
        List of routes.

        The Route structure is documented below.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatasourceConnectionRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The connection status.  
        The options are as follows:
        + **ACTIVE**: The datasource connection is activated.
        + **DELETED**: The datasource connection is deleted.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subnet ID of the service to be connected.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The key/value pairs to associate with the datasource connection.

        Changing this parameter will create a new resource.

        <a name="datasourceConnection_Host"></a>
        The `Host` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC ID of the service to be connected.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:Dli/datasourceConnection:DatasourceConnection")
class DatasourceConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatasourceConnectionHostArgs', 'DatasourceConnectionHostArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatasourceConnectionRouteArgs', 'DatasourceConnectionRouteArgsDict']]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DLI datasource **enhanced** connection resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        test = huaweicloud.dli.DatasourceConnection("test",
            name=name,
            vpc_id=vpc_id,
            subnet_id=subnet_id)
        ```

        ## Import

        The DLI datasource connection can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dli/datasourceConnection:DatasourceConnection test 0ce123456a00f2591fabc00385ff1234
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `tags`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dli_datasource_connection" "test" {

            ...
            
            lifecycle {
            
              ignore_changes = [
            
                tags,
            
              ]
            
            }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DatasourceConnectionHostArgs', 'DatasourceConnectionHostArgsDict']]]] hosts: The user-defined host information. A maximum of 20,000 records are supported.
               The Host structure is documented below.
        :param pulumi.Input[_builtins.str] name: The route name.  
               The valid length is limited from `1` to `64`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] queues: List of queue names that are available for datasource connections.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] route_table_id: The route table ID associated with the subnet of the service to be connected.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DatasourceConnectionRouteArgs', 'DatasourceConnectionRouteArgsDict']]]] routes: List of routes.
               
               The Route structure is documented below.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID of the service to be connected.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the datasource connection.
               
               Changing this parameter will create a new resource.
               
               <a name="datasourceConnection_Host"></a>
               The `Host` block supports:
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID of the service to be connected.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatasourceConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DLI datasource **enhanced** connection resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        test = huaweicloud.dli.DatasourceConnection("test",
            name=name,
            vpc_id=vpc_id,
            subnet_id=subnet_id)
        ```

        ## Import

        The DLI datasource connection can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dli/datasourceConnection:DatasourceConnection test 0ce123456a00f2591fabc00385ff1234
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `tags`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dli_datasource_connection" "test" {

            ...
            
            lifecycle {
            
              ignore_changes = [
            
                tags,
            
              ]
            
            }

        }

        :param str resource_name: The name of the resource.
        :param DatasourceConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatasourceConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatasourceConnectionHostArgs', 'DatasourceConnectionHostArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatasourceConnectionRouteArgs', 'DatasourceConnectionRouteArgsDict']]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatasourceConnectionArgs.__new__(DatasourceConnectionArgs)

            __props__.__dict__["hosts"] = hosts
            __props__.__dict__["name"] = name
            __props__.__dict__["queues"] = queues
            __props__.__dict__["region"] = region
            __props__.__dict__["route_table_id"] = route_table_id
            __props__.__dict__["routes"] = routes
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["status"] = None
        super(DatasourceConnection, __self__).__init__(
            'huaweicloud:Dli/datasourceConnection:DatasourceConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatasourceConnectionHostArgs', 'DatasourceConnectionHostArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            queues: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
            routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatasourceConnectionRouteArgs', 'DatasourceConnectionRouteArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DatasourceConnection':
        """
        Get an existing DatasourceConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DatasourceConnectionHostArgs', 'DatasourceConnectionHostArgsDict']]]] hosts: The user-defined host information. A maximum of 20,000 records are supported.
               The Host structure is documented below.
        :param pulumi.Input[_builtins.str] name: The route name.  
               The valid length is limited from `1` to `64`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] queues: List of queue names that are available for datasource connections.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] route_table_id: The route table ID associated with the subnet of the service to be connected.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DatasourceConnectionRouteArgs', 'DatasourceConnectionRouteArgsDict']]]] routes: List of routes.
               
               The Route structure is documented below.
        :param pulumi.Input[_builtins.str] status: The connection status.  
               The options are as follows:
               + **ACTIVE**: The datasource connection is activated.
               + **DELETED**: The datasource connection is deleted.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet ID of the service to be connected.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The key/value pairs to associate with the datasource connection.
               
               Changing this parameter will create a new resource.
               
               <a name="datasourceConnection_Host"></a>
               The `Host` block supports:
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID of the service to be connected.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatasourceConnectionState.__new__(_DatasourceConnectionState)

        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["name"] = name
        __props__.__dict__["queues"] = queues
        __props__.__dict__["region"] = region
        __props__.__dict__["route_table_id"] = route_table_id
        __props__.__dict__["routes"] = routes
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return DatasourceConnection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence['outputs.DatasourceConnectionHost']]:
        """
        The user-defined host information. A maximum of 20,000 records are supported.
        The Host structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The route name.  
        The valid length is limited from `1` to `64`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def queues(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of queue names that are available for datasource connections.
        """
        return pulumi.get(self, "queues")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[_builtins.str]:
        """
        The route table ID associated with the subnet of the service to be connected.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "route_table_id")

    @_builtins.property
    @pulumi.getter
    def routes(self) -> pulumi.Output[Sequence['outputs.DatasourceConnectionRoute']]:
        """
        List of routes.

        The Route structure is documented below.
        """
        return pulumi.get(self, "routes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The connection status.  
        The options are as follows:
        + **ACTIVE**: The datasource connection is activated.
        + **DELETED**: The datasource connection is deleted.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        The subnet ID of the service to be connected.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The key/value pairs to associate with the datasource connection.

        Changing this parameter will create a new resource.

        <a name="datasourceConnection_Host"></a>
        The `Host` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC ID of the service to be connected.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

