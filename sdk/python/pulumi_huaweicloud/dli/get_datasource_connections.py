# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDatasourceConnectionsResult',
    'AwaitableGetDatasourceConnectionsResult',
    'get_datasource_connections',
    'get_datasource_connections_output',
]

@pulumi.output_type
class GetDatasourceConnectionsResult:
    """
    A collection of values returned by getDatasourceConnections.
    """
    def __init__(__self__, connections=None, id=None, name=None, region=None, tags=None):
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetDatasourceConnectionsConnectionResult']:
        """
        The list of the datasource connections.  
        The connections structure is documented below.
        """
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The route name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "tags")


class AwaitableGetDatasourceConnectionsResult(GetDatasourceConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatasourceConnectionsResult(
            connections=self.connections,
            id=self.id,
            name=self.name,
            region=self.region,
            tags=self.tags)


def get_datasource_connections(name: Optional[_builtins.str] = None,
                               region: Optional[_builtins.str] = None,
                               tags: Optional[Mapping[str, _builtins.str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatasourceConnectionsResult:
    """
    Use this data source to get the list of DLI enhanced datasource connections within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.Dli.get_datasource_connections(name=name)
    ```


    :param _builtins.str name: Specifies the name of the datasource connection.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs of the datasource connections.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dli/getDatasourceConnections:getDatasourceConnections', __args__, opts=opts, typ=GetDatasourceConnectionsResult).value

    return AwaitableGetDatasourceConnectionsResult(
        connections=pulumi.get(__ret__, 'connections'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'))
def get_datasource_connections_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatasourceConnectionsResult]:
    """
    Use this data source to get the list of DLI enhanced datasource connections within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.Dli.get_datasource_connections(name=name)
    ```


    :param _builtins.str name: Specifies the name of the datasource connection.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs of the datasource connections.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dli/getDatasourceConnections:getDatasourceConnections', __args__, opts=opts, typ=GetDatasourceConnectionsResult)
    return __ret__.apply(lambda __response__: GetDatasourceConnectionsResult(
        connections=pulumi.get(__response__, 'connections'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags')))
