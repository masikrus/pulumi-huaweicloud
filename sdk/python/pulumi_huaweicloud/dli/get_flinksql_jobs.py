# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetFlinksqlJobsResult',
    'AwaitableGetFlinksqlJobsResult',
    'get_flinksql_jobs',
    'get_flinksql_jobs_output',
]

@pulumi.output_type
class GetFlinksqlJobsResult:
    """
    A collection of values returned by getFlinksqlJobs.
    """
    def __init__(__self__, cu_num=None, id=None, job_id=None, jobs=None, manager_cu_num=None, parallel_num=None, queue_name=None, region=None, tags=None, tm_cu_num=None, tm_slot_num=None):
        if cu_num and not isinstance(cu_num, int):
            raise TypeError("Expected argument 'cu_num' to be a int")
        pulumi.set(__self__, "cu_num", cu_num)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if jobs and not isinstance(jobs, list):
            raise TypeError("Expected argument 'jobs' to be a list")
        pulumi.set(__self__, "jobs", jobs)
        if manager_cu_num and not isinstance(manager_cu_num, int):
            raise TypeError("Expected argument 'manager_cu_num' to be a int")
        pulumi.set(__self__, "manager_cu_num", manager_cu_num)
        if parallel_num and not isinstance(parallel_num, int):
            raise TypeError("Expected argument 'parallel_num' to be a int")
        pulumi.set(__self__, "parallel_num", parallel_num)
        if queue_name and not isinstance(queue_name, str):
            raise TypeError("Expected argument 'queue_name' to be a str")
        pulumi.set(__self__, "queue_name", queue_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if tm_cu_num and not isinstance(tm_cu_num, int):
            raise TypeError("Expected argument 'tm_cu_num' to be a int")
        pulumi.set(__self__, "tm_cu_num", tm_cu_num)
        if tm_slot_num and not isinstance(tm_slot_num, int):
            raise TypeError("Expected argument 'tm_slot_num' to be a int")
        pulumi.set(__self__, "tm_slot_num", tm_slot_num)

    @_builtins.property
    @pulumi.getter(name="cuNum")
    def cu_num(self) -> Optional[_builtins.int]:
        """
        The number of CUs selected for a job.
        """
        return pulumi.get(self, "cu_num")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence['outputs.GetFlinksqlJobsJobResult']:
        """
        All jobs that match the filter parameters.
        """
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter(name="managerCuNum")
    def manager_cu_num(self) -> Optional[_builtins.int]:
        """
        The number of CUs in the job manager selected for a job.
        """
        return pulumi.get(self, "manager_cu_num")

    @_builtins.property
    @pulumi.getter(name="parallelNum")
    def parallel_num(self) -> Optional[_builtins.int]:
        """
        The number of parallel for a job.
        """
        return pulumi.get(self, "parallel_num")

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[_builtins.str]:
        """
        The name of DLI queue which this job run in.
        """
        return pulumi.get(self, "queue_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tmCuNum")
    def tm_cu_num(self) -> Optional[_builtins.int]:
        """
        The number of CUs occupied by a single TM.
        """
        return pulumi.get(self, "tm_cu_num")

    @_builtins.property
    @pulumi.getter(name="tmSlotNum")
    def tm_slot_num(self) -> Optional[_builtins.int]:
        """
        The number of single TM slots.
        """
        return pulumi.get(self, "tm_slot_num")


class AwaitableGetFlinksqlJobsResult(GetFlinksqlJobsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFlinksqlJobsResult(
            cu_num=self.cu_num,
            id=self.id,
            job_id=self.job_id,
            jobs=self.jobs,
            manager_cu_num=self.manager_cu_num,
            parallel_num=self.parallel_num,
            queue_name=self.queue_name,
            region=self.region,
            tags=self.tags,
            tm_cu_num=self.tm_cu_num,
            tm_slot_num=self.tm_slot_num)


def get_flinksql_jobs(cu_num: Optional[_builtins.int] = None,
                      job_id: Optional[_builtins.str] = None,
                      manager_cu_num: Optional[_builtins.int] = None,
                      parallel_num: Optional[_builtins.int] = None,
                      queue_name: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      tags: Optional[Mapping[str, _builtins.str]] = None,
                      tm_cu_num: Optional[_builtins.int] = None,
                      tm_slot_num: Optional[_builtins.int] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFlinksqlJobsResult:
    """
    Use this data source to get the list of the DLI flinksql jobs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    queue_name = config.require_object("queueName")
    test = huaweicloud.Dli.get_flinksql_jobs(queue_name=queue_name)
    ```


    :param _builtins.int cu_num: Specifies number of CUs to be queried.
    :param _builtins.str job_id: Specifies the ID of the job to be queried.
    :param _builtins.int manager_cu_num: Specifies number of CUs in the job manager to be queried.
    :param _builtins.int parallel_num: Specifies number of parallel to be queried.
    :param _builtins.str queue_name: Specifies the name of DLI queue which this job to be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to be queried.
    :param _builtins.int tm_cu_num: Specifies number of CUs occupied by a single TM to be queried.
    :param _builtins.int tm_slot_num: Specifies number of single TM slots to be queried.
    """
    __args__ = dict()
    __args__['cuNum'] = cu_num
    __args__['jobId'] = job_id
    __args__['managerCuNum'] = manager_cu_num
    __args__['parallelNum'] = parallel_num
    __args__['queueName'] = queue_name
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['tmCuNum'] = tm_cu_num
    __args__['tmSlotNum'] = tm_slot_num
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dli/getFlinksqlJobs:getFlinksqlJobs', __args__, opts=opts, typ=GetFlinksqlJobsResult).value

    return AwaitableGetFlinksqlJobsResult(
        cu_num=pulumi.get(__ret__, 'cu_num'),
        id=pulumi.get(__ret__, 'id'),
        job_id=pulumi.get(__ret__, 'job_id'),
        jobs=pulumi.get(__ret__, 'jobs'),
        manager_cu_num=pulumi.get(__ret__, 'manager_cu_num'),
        parallel_num=pulumi.get(__ret__, 'parallel_num'),
        queue_name=pulumi.get(__ret__, 'queue_name'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'),
        tm_cu_num=pulumi.get(__ret__, 'tm_cu_num'),
        tm_slot_num=pulumi.get(__ret__, 'tm_slot_num'))
def get_flinksql_jobs_output(cu_num: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                             job_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             manager_cu_num: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                             parallel_num: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                             queue_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                             tm_cu_num: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                             tm_slot_num: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFlinksqlJobsResult]:
    """
    Use this data source to get the list of the DLI flinksql jobs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    queue_name = config.require_object("queueName")
    test = huaweicloud.Dli.get_flinksql_jobs(queue_name=queue_name)
    ```


    :param _builtins.int cu_num: Specifies number of CUs to be queried.
    :param _builtins.str job_id: Specifies the ID of the job to be queried.
    :param _builtins.int manager_cu_num: Specifies number of CUs in the job manager to be queried.
    :param _builtins.int parallel_num: Specifies number of parallel to be queried.
    :param _builtins.str queue_name: Specifies the name of DLI queue which this job to be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to be queried.
    :param _builtins.int tm_cu_num: Specifies number of CUs occupied by a single TM to be queried.
    :param _builtins.int tm_slot_num: Specifies number of single TM slots to be queried.
    """
    __args__ = dict()
    __args__['cuNum'] = cu_num
    __args__['jobId'] = job_id
    __args__['managerCuNum'] = manager_cu_num
    __args__['parallelNum'] = parallel_num
    __args__['queueName'] = queue_name
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['tmCuNum'] = tm_cu_num
    __args__['tmSlotNum'] = tm_slot_num
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dli/getFlinksqlJobs:getFlinksqlJobs', __args__, opts=opts, typ=GetFlinksqlJobsResult)
    return __ret__.apply(lambda __response__: GetFlinksqlJobsResult(
        cu_num=pulumi.get(__response__, 'cu_num'),
        id=pulumi.get(__response__, 'id'),
        job_id=pulumi.get(__response__, 'job_id'),
        jobs=pulumi.get(__response__, 'jobs'),
        manager_cu_num=pulumi.get(__response__, 'manager_cu_num'),
        parallel_num=pulumi.get(__response__, 'parallel_num'),
        queue_name=pulumi.get(__response__, 'queue_name'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags'),
        tm_cu_num=pulumi.get(__response__, 'tm_cu_num'),
        tm_slot_num=pulumi.get(__response__, 'tm_slot_num')))
