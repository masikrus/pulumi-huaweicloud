# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DatasourceAuthArgs', 'DatasourceAuth']

@pulumi.input_type
class DatasourceAuthArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 certificate_location: Optional[pulumi.Input[_builtins.str]] = None,
                 key_password: Optional[pulumi.Input[_builtins.str]] = None,
                 keystore_location: Optional[pulumi.Input[_builtins.str]] = None,
                 keystore_password: Optional[pulumi.Input[_builtins.str]] = None,
                 keytab: Optional[pulumi.Input[_builtins.str]] = None,
                 krb5_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 truststore_location: Optional[pulumi.Input[_builtins.str]] = None,
                 truststore_password: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DatasourceAuth resource.
        :param pulumi.Input[_builtins.str] type: Data source type.  
               The options are as follows:
               + **passwd**: Password.
               + **CSS**: CSS.
               + **KRB**: Kafka_SSL.
               + **Kafka_SSL**: Kafka_SSL.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] certificate_location: Path of the security cluster certificate.  
               Currently, only OBS paths and CER files are supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_password: The key password.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] keystore_location: The OBS path of the **keystore** configuration file.
        :param pulumi.Input[_builtins.str] keystore_password: The password of the **keystore** configuration file.
        :param pulumi.Input[_builtins.str] keytab: The OBS path of the **keytab** configuration file.
        :param pulumi.Input[_builtins.str] krb5_conf: The OBS path of the **krb5** configuration file.
        :param pulumi.Input[_builtins.str] name: The name of a datasource authentication.  
               Only letters, digits and underscores (_) are allowed.
               And the name cannot be all digits or start with a underscore.
        :param pulumi.Input[_builtins.str] password: The password for accessing the security cluster or datasource.
               This parameter must be used together with `user_name`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] truststore_location: The OBS path of the **truststore** configuration file.
        :param pulumi.Input[_builtins.str] truststore_password: The password of the **truststore** configuration file.
        :param pulumi.Input[_builtins.str] user_name: Specifies the user name for accessing the security cluster or datasource.
        :param pulumi.Input[_builtins.str] username: Username for accessing the security cluster or datasource. Use 'user_name' instead.
        """
        pulumi.set(__self__, "type", type)
        if certificate_location is not None:
            pulumi.set(__self__, "certificate_location", certificate_location)
        if key_password is not None:
            pulumi.set(__self__, "key_password", key_password)
        if keystore_location is not None:
            pulumi.set(__self__, "keystore_location", keystore_location)
        if keystore_password is not None:
            pulumi.set(__self__, "keystore_password", keystore_password)
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if krb5_conf is not None:
            pulumi.set(__self__, "krb5_conf", krb5_conf)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if truststore_location is not None:
            pulumi.set(__self__, "truststore_location", truststore_location)
        if truststore_password is not None:
            pulumi.set(__self__, "truststore_password", truststore_password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Data source type.  
        The options are as follows:
        + **passwd**: Password.
        + **CSS**: CSS.
        + **KRB**: Kafka_SSL.
        + **Kafka_SSL**: Kafka_SSL.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="certificateLocation")
    def certificate_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of the security cluster certificate.  
        Currently, only OBS paths and CER files are supported.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "certificate_location")

    @certificate_location.setter
    def certificate_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_location", value)

    @_builtins.property
    @pulumi.getter(name="keyPassword")
    def key_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The key password.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_password")

    @key_password.setter
    def key_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_password", value)

    @_builtins.property
    @pulumi.getter(name="keystoreLocation")
    def keystore_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OBS path of the **keystore** configuration file.
        """
        return pulumi.get(self, "keystore_location")

    @keystore_location.setter
    def keystore_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keystore_location", value)

    @_builtins.property
    @pulumi.getter(name="keystorePassword")
    def keystore_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password of the **keystore** configuration file.
        """
        return pulumi.get(self, "keystore_password")

    @keystore_password.setter
    def keystore_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keystore_password", value)

    @_builtins.property
    @pulumi.getter
    def keytab(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OBS path of the **keytab** configuration file.
        """
        return pulumi.get(self, "keytab")

    @keytab.setter
    def keytab(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keytab", value)

    @_builtins.property
    @pulumi.getter(name="krb5Conf")
    def krb5_conf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OBS path of the **krb5** configuration file.
        """
        return pulumi.get(self, "krb5_conf")

    @krb5_conf.setter
    def krb5_conf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "krb5_conf", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of a datasource authentication.  
        Only letters, digits and underscores (_) are allowed.
        And the name cannot be all digits or start with a underscore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password for accessing the security cluster or datasource.
        This parameter must be used together with `user_name`.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="truststoreLocation")
    def truststore_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OBS path of the **truststore** configuration file.
        """
        return pulumi.get(self, "truststore_location")

    @truststore_location.setter
    def truststore_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "truststore_location", value)

    @_builtins.property
    @pulumi.getter(name="truststorePassword")
    def truststore_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password of the **truststore** configuration file.
        """
        return pulumi.get(self, "truststore_password")

    @truststore_password.setter
    def truststore_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "truststore_password", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user name for accessing the security cluster or datasource.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Username for accessing the security cluster or datasource. Use 'user_name' instead.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _DatasourceAuthState:
    def __init__(__self__, *,
                 certificate_location: Optional[pulumi.Input[_builtins.str]] = None,
                 key_password: Optional[pulumi.Input[_builtins.str]] = None,
                 keystore_location: Optional[pulumi.Input[_builtins.str]] = None,
                 keystore_password: Optional[pulumi.Input[_builtins.str]] = None,
                 keytab: Optional[pulumi.Input[_builtins.str]] = None,
                 krb5_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 truststore_location: Optional[pulumi.Input[_builtins.str]] = None,
                 truststore_password: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DatasourceAuth resources.
        :param pulumi.Input[_builtins.str] certificate_location: Path of the security cluster certificate.  
               Currently, only OBS paths and CER files are supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_password: The key password.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] keystore_location: The OBS path of the **keystore** configuration file.
        :param pulumi.Input[_builtins.str] keystore_password: The password of the **keystore** configuration file.
        :param pulumi.Input[_builtins.str] keytab: The OBS path of the **keytab** configuration file.
        :param pulumi.Input[_builtins.str] krb5_conf: The OBS path of the **krb5** configuration file.
        :param pulumi.Input[_builtins.str] name: The name of a datasource authentication.  
               Only letters, digits and underscores (_) are allowed.
               And the name cannot be all digits or start with a underscore.
        :param pulumi.Input[_builtins.str] owner: The user name of owner.
        :param pulumi.Input[_builtins.str] password: The password for accessing the security cluster or datasource.
               This parameter must be used together with `user_name`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] truststore_location: The OBS path of the **truststore** configuration file.
        :param pulumi.Input[_builtins.str] truststore_password: The password of the **truststore** configuration file.
        :param pulumi.Input[_builtins.str] type: Data source type.  
               The options are as follows:
               + **passwd**: Password.
               + **CSS**: CSS.
               + **KRB**: Kafka_SSL.
               + **Kafka_SSL**: Kafka_SSL.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_name: Specifies the user name for accessing the security cluster or datasource.
        :param pulumi.Input[_builtins.str] username: Username for accessing the security cluster or datasource. Use 'user_name' instead.
        """
        if certificate_location is not None:
            pulumi.set(__self__, "certificate_location", certificate_location)
        if key_password is not None:
            pulumi.set(__self__, "key_password", key_password)
        if keystore_location is not None:
            pulumi.set(__self__, "keystore_location", keystore_location)
        if keystore_password is not None:
            pulumi.set(__self__, "keystore_password", keystore_password)
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if krb5_conf is not None:
            pulumi.set(__self__, "krb5_conf", krb5_conf)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if truststore_location is not None:
            pulumi.set(__self__, "truststore_location", truststore_location)
        if truststore_password is not None:
            pulumi.set(__self__, "truststore_password", truststore_password)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="certificateLocation")
    def certificate_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of the security cluster certificate.  
        Currently, only OBS paths and CER files are supported.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "certificate_location")

    @certificate_location.setter
    def certificate_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_location", value)

    @_builtins.property
    @pulumi.getter(name="keyPassword")
    def key_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The key password.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_password")

    @key_password.setter
    def key_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_password", value)

    @_builtins.property
    @pulumi.getter(name="keystoreLocation")
    def keystore_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OBS path of the **keystore** configuration file.
        """
        return pulumi.get(self, "keystore_location")

    @keystore_location.setter
    def keystore_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keystore_location", value)

    @_builtins.property
    @pulumi.getter(name="keystorePassword")
    def keystore_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password of the **keystore** configuration file.
        """
        return pulumi.get(self, "keystore_password")

    @keystore_password.setter
    def keystore_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keystore_password", value)

    @_builtins.property
    @pulumi.getter
    def keytab(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OBS path of the **keytab** configuration file.
        """
        return pulumi.get(self, "keytab")

    @keytab.setter
    def keytab(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keytab", value)

    @_builtins.property
    @pulumi.getter(name="krb5Conf")
    def krb5_conf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OBS path of the **krb5** configuration file.
        """
        return pulumi.get(self, "krb5_conf")

    @krb5_conf.setter
    def krb5_conf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "krb5_conf", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of a datasource authentication.  
        Only letters, digits and underscores (_) are allowed.
        And the name cannot be all digits or start with a underscore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user name of owner.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password for accessing the security cluster or datasource.
        This parameter must be used together with `user_name`.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="truststoreLocation")
    def truststore_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OBS path of the **truststore** configuration file.
        """
        return pulumi.get(self, "truststore_location")

    @truststore_location.setter
    def truststore_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "truststore_location", value)

    @_builtins.property
    @pulumi.getter(name="truststorePassword")
    def truststore_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password of the **truststore** configuration file.
        """
        return pulumi.get(self, "truststore_password")

    @truststore_password.setter
    def truststore_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "truststore_password", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Data source type.  
        The options are as follows:
        + **passwd**: Password.
        + **CSS**: CSS.
        + **KRB**: Kafka_SSL.
        + **Kafka_SSL**: Kafka_SSL.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user name for accessing the security cluster or datasource.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Username for accessing the security cluster or datasource. Use 'user_name' instead.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.type_token("huaweicloud:Dli/datasourceAuth:DatasourceAuth")
class DatasourceAuth(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_location: Optional[pulumi.Input[_builtins.str]] = None,
                 key_password: Optional[pulumi.Input[_builtins.str]] = None,
                 keystore_location: Optional[pulumi.Input[_builtins.str]] = None,
                 keystore_password: Optional[pulumi.Input[_builtins.str]] = None,
                 keytab: Optional[pulumi.Input[_builtins.str]] = None,
                 krb5_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 truststore_location: Optional[pulumi.Input[_builtins.str]] = None,
                 truststore_password: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DLI datasource authentication resource within HuaweiCloud.

        ## Example Usage

        ### Create a datasource Password authentication

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        username = config.require_object("username")
        password = config.require_object("password")
        test = huaweicloud.dli.DatasourceAuth("test",
            type="passwd",
            name="demo",
            username=username,
            password=password)
        ```

        ### Create a datasource CSS authentication

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        username = config.require_object("username")
        password = config.require_object("password")
        certificate_location = config.require_object("certificateLocation")
        test = huaweicloud.dli.DatasourceAuth("test",
            type="CSS",
            name="demo",
            username=username,
            password=password,
            certificate_location=certificate_location)
        ```

        ### Create a datasource Kafka_SSL authentication

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        truststore_location = config.require_object("truststoreLocation")
        truststore_password = config.require_object("truststorePassword")
        keystore_location = config.require_object("keystoreLocation")
        keystore_password = config.require_object("keystorePassword")
        key_password = config.require_object("keyPassword")
        test = huaweicloud.dli.DatasourceAuth("test",
            type="Kafka_SSL",
            name="demo",
            truststore_location=truststore_location,
            truststore_password=truststore_password,
            keystore_location=keystore_location,
            keystore_password=keystore_password,
            key_password=key_password)
        ```

        ### Create a datasource Kerberos authentication

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        username = config.require_object("username")
        krb5_conf = config.require_object("krb5Conf")
        keytab = config.require_object("keytab")
        test = huaweicloud.dli.DatasourceAuth("test",
            type="KRB",
            name="demo",
            username=username,
            krb5_conf=krb5_conf,
            keytab=keytab)
        ```

        ## Import

        The DLI datasource authentication can be imported using `id` which equals the `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dli/datasourceAuth:DatasourceAuth test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include:

        `password`, `truststore_password`, `keystore_password`, `key_password`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dli_datasource_auth" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              password, truststore_password, keystore_password, key_password
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate_location: Path of the security cluster certificate.  
               Currently, only OBS paths and CER files are supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_password: The key password.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] keystore_location: The OBS path of the **keystore** configuration file.
        :param pulumi.Input[_builtins.str] keystore_password: The password of the **keystore** configuration file.
        :param pulumi.Input[_builtins.str] keytab: The OBS path of the **keytab** configuration file.
        :param pulumi.Input[_builtins.str] krb5_conf: The OBS path of the **krb5** configuration file.
        :param pulumi.Input[_builtins.str] name: The name of a datasource authentication.  
               Only letters, digits and underscores (_) are allowed.
               And the name cannot be all digits or start with a underscore.
        :param pulumi.Input[_builtins.str] password: The password for accessing the security cluster or datasource.
               This parameter must be used together with `user_name`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] truststore_location: The OBS path of the **truststore** configuration file.
        :param pulumi.Input[_builtins.str] truststore_password: The password of the **truststore** configuration file.
        :param pulumi.Input[_builtins.str] type: Data source type.  
               The options are as follows:
               + **passwd**: Password.
               + **CSS**: CSS.
               + **KRB**: Kafka_SSL.
               + **Kafka_SSL**: Kafka_SSL.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_name: Specifies the user name for accessing the security cluster or datasource.
        :param pulumi.Input[_builtins.str] username: Username for accessing the security cluster or datasource. Use 'user_name' instead.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatasourceAuthArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DLI datasource authentication resource within HuaweiCloud.

        ## Example Usage

        ### Create a datasource Password authentication

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        username = config.require_object("username")
        password = config.require_object("password")
        test = huaweicloud.dli.DatasourceAuth("test",
            type="passwd",
            name="demo",
            username=username,
            password=password)
        ```

        ### Create a datasource CSS authentication

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        username = config.require_object("username")
        password = config.require_object("password")
        certificate_location = config.require_object("certificateLocation")
        test = huaweicloud.dli.DatasourceAuth("test",
            type="CSS",
            name="demo",
            username=username,
            password=password,
            certificate_location=certificate_location)
        ```

        ### Create a datasource Kafka_SSL authentication

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        truststore_location = config.require_object("truststoreLocation")
        truststore_password = config.require_object("truststorePassword")
        keystore_location = config.require_object("keystoreLocation")
        keystore_password = config.require_object("keystorePassword")
        key_password = config.require_object("keyPassword")
        test = huaweicloud.dli.DatasourceAuth("test",
            type="Kafka_SSL",
            name="demo",
            truststore_location=truststore_location,
            truststore_password=truststore_password,
            keystore_location=keystore_location,
            keystore_password=keystore_password,
            key_password=key_password)
        ```

        ### Create a datasource Kerberos authentication

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        username = config.require_object("username")
        krb5_conf = config.require_object("krb5Conf")
        keytab = config.require_object("keytab")
        test = huaweicloud.dli.DatasourceAuth("test",
            type="KRB",
            name="demo",
            username=username,
            krb5_conf=krb5_conf,
            keytab=keytab)
        ```

        ## Import

        The DLI datasource authentication can be imported using `id` which equals the `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dli/datasourceAuth:DatasourceAuth test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include:

        `password`, `truststore_password`, `keystore_password`, `key_password`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dli_datasource_auth" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              password, truststore_password, keystore_password, key_password
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DatasourceAuthArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatasourceAuthArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_location: Optional[pulumi.Input[_builtins.str]] = None,
                 key_password: Optional[pulumi.Input[_builtins.str]] = None,
                 keystore_location: Optional[pulumi.Input[_builtins.str]] = None,
                 keystore_password: Optional[pulumi.Input[_builtins.str]] = None,
                 keytab: Optional[pulumi.Input[_builtins.str]] = None,
                 krb5_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 truststore_location: Optional[pulumi.Input[_builtins.str]] = None,
                 truststore_password: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatasourceAuthArgs.__new__(DatasourceAuthArgs)

            __props__.__dict__["certificate_location"] = certificate_location
            __props__.__dict__["key_password"] = None if key_password is None else pulumi.Output.secret(key_password)
            __props__.__dict__["keystore_location"] = keystore_location
            __props__.__dict__["keystore_password"] = None if keystore_password is None else pulumi.Output.secret(keystore_password)
            __props__.__dict__["keytab"] = keytab
            __props__.__dict__["krb5_conf"] = krb5_conf
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["region"] = region
            __props__.__dict__["truststore_location"] = truststore_location
            __props__.__dict__["truststore_password"] = None if truststore_password is None else pulumi.Output.secret(truststore_password)
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["username"] = username
            __props__.__dict__["owner"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["keyPassword", "keystorePassword", "password", "truststorePassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DatasourceAuth, __self__).__init__(
            'huaweicloud:Dli/datasourceAuth:DatasourceAuth',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_location: Optional[pulumi.Input[_builtins.str]] = None,
            key_password: Optional[pulumi.Input[_builtins.str]] = None,
            keystore_location: Optional[pulumi.Input[_builtins.str]] = None,
            keystore_password: Optional[pulumi.Input[_builtins.str]] = None,
            keytab: Optional[pulumi.Input[_builtins.str]] = None,
            krb5_conf: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            truststore_location: Optional[pulumi.Input[_builtins.str]] = None,
            truststore_password: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            user_name: Optional[pulumi.Input[_builtins.str]] = None,
            username: Optional[pulumi.Input[_builtins.str]] = None) -> 'DatasourceAuth':
        """
        Get an existing DatasourceAuth resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate_location: Path of the security cluster certificate.  
               Currently, only OBS paths and CER files are supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_password: The key password.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] keystore_location: The OBS path of the **keystore** configuration file.
        :param pulumi.Input[_builtins.str] keystore_password: The password of the **keystore** configuration file.
        :param pulumi.Input[_builtins.str] keytab: The OBS path of the **keytab** configuration file.
        :param pulumi.Input[_builtins.str] krb5_conf: The OBS path of the **krb5** configuration file.
        :param pulumi.Input[_builtins.str] name: The name of a datasource authentication.  
               Only letters, digits and underscores (_) are allowed.
               And the name cannot be all digits or start with a underscore.
        :param pulumi.Input[_builtins.str] owner: The user name of owner.
        :param pulumi.Input[_builtins.str] password: The password for accessing the security cluster or datasource.
               This parameter must be used together with `user_name`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] truststore_location: The OBS path of the **truststore** configuration file.
        :param pulumi.Input[_builtins.str] truststore_password: The password of the **truststore** configuration file.
        :param pulumi.Input[_builtins.str] type: Data source type.  
               The options are as follows:
               + **passwd**: Password.
               + **CSS**: CSS.
               + **KRB**: Kafka_SSL.
               + **Kafka_SSL**: Kafka_SSL.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_name: Specifies the user name for accessing the security cluster or datasource.
        :param pulumi.Input[_builtins.str] username: Username for accessing the security cluster or datasource. Use 'user_name' instead.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatasourceAuthState.__new__(_DatasourceAuthState)

        __props__.__dict__["certificate_location"] = certificate_location
        __props__.__dict__["key_password"] = key_password
        __props__.__dict__["keystore_location"] = keystore_location
        __props__.__dict__["keystore_password"] = keystore_password
        __props__.__dict__["keytab"] = keytab
        __props__.__dict__["krb5_conf"] = krb5_conf
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["password"] = password
        __props__.__dict__["region"] = region
        __props__.__dict__["truststore_location"] = truststore_location
        __props__.__dict__["truststore_password"] = truststore_password
        __props__.__dict__["type"] = type
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["username"] = username
        return DatasourceAuth(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="certificateLocation")
    def certificate_location(self) -> pulumi.Output[_builtins.str]:
        """
        Path of the security cluster certificate.  
        Currently, only OBS paths and CER files are supported.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "certificate_location")

    @_builtins.property
    @pulumi.getter(name="keyPassword")
    def key_password(self) -> pulumi.Output[_builtins.str]:
        """
        The key password.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_password")

    @_builtins.property
    @pulumi.getter(name="keystoreLocation")
    def keystore_location(self) -> pulumi.Output[_builtins.str]:
        """
        The OBS path of the **keystore** configuration file.
        """
        return pulumi.get(self, "keystore_location")

    @_builtins.property
    @pulumi.getter(name="keystorePassword")
    def keystore_password(self) -> pulumi.Output[_builtins.str]:
        """
        The password of the **keystore** configuration file.
        """
        return pulumi.get(self, "keystore_password")

    @_builtins.property
    @pulumi.getter
    def keytab(self) -> pulumi.Output[_builtins.str]:
        """
        The OBS path of the **keytab** configuration file.
        """
        return pulumi.get(self, "keytab")

    @_builtins.property
    @pulumi.getter(name="krb5Conf")
    def krb5_conf(self) -> pulumi.Output[_builtins.str]:
        """
        The OBS path of the **krb5** configuration file.
        """
        return pulumi.get(self, "krb5_conf")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of a datasource authentication.  
        Only letters, digits and underscores (_) are allowed.
        And the name cannot be all digits or start with a underscore.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        The user name of owner.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        The password for accessing the security cluster or datasource.
        This parameter must be used together with `user_name`.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="truststoreLocation")
    def truststore_location(self) -> pulumi.Output[_builtins.str]:
        """
        The OBS path of the **truststore** configuration file.
        """
        return pulumi.get(self, "truststore_location")

    @_builtins.property
    @pulumi.getter(name="truststorePassword")
    def truststore_password(self) -> pulumi.Output[_builtins.str]:
        """
        The password of the **truststore** configuration file.
        """
        return pulumi.get(self, "truststore_password")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Data source type.  
        The options are as follows:
        + **passwd**: Password.
        + **CSS**: CSS.
        + **KRB**: Kafka_SSL.
        + **Kafka_SSL**: Kafka_SSL.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the user name for accessing the security cluster or datasource.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Output[_builtins.str]:
        """
        Username for accessing the security cluster or datasource. Use 'user_name' instead.
        """
        return pulumi.get(self, "username")

