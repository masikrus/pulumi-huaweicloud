# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSqlTemplatesResult',
    'AwaitableGetSqlTemplatesResult',
    'get_sql_templates',
    'get_sql_templates_output',
]

@pulumi.output_type
class GetSqlTemplatesResult:
    """
    A collection of values returned by getSqlTemplates.
    """
    def __init__(__self__, group=None, id=None, name=None, owner=None, region=None, template_id=None, templates=None):
        if group and not isinstance(group, str):
            raise TypeError("Expected argument 'group' to be a str")
        pulumi.set(__self__, "group", group)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[_builtins.str]:
        """
        The group name to which the SQL template belongs.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of SQL template.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[_builtins.str]:
        """
        The user ID of owner.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetSqlTemplatesTemplateResult']:
        """
        All templates that match the filter parameters.
        """
        return pulumi.get(self, "templates")


class AwaitableGetSqlTemplatesResult(GetSqlTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSqlTemplatesResult(
            group=self.group,
            id=self.id,
            name=self.name,
            owner=self.owner,
            region=self.region,
            template_id=self.template_id,
            templates=self.templates)


def get_sql_templates(group: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      owner: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      template_id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSqlTemplatesResult:
    """
    Use this data source to get the list of the DLI SQL templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    template_name = config.require_object("templateName")
    test = huaweicloud.Dli.get_sql_templates(name=template_name)
    ```


    :param _builtins.str group: Specifies the group name to which the SQL templates belong.
    :param _builtins.str name: Specifies the name of the SQL template to be queried.
    :param _builtins.str owner: Specifies user ID of owner to be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str template_id: Specifies the ID of the SQL template to be queried.
    """
    __args__ = dict()
    __args__['group'] = group
    __args__['name'] = name
    __args__['owner'] = owner
    __args__['region'] = region
    __args__['templateId'] = template_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dli/getSqlTemplates:getSqlTemplates', __args__, opts=opts, typ=GetSqlTemplatesResult).value

    return AwaitableGetSqlTemplatesResult(
        group=pulumi.get(__ret__, 'group'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        owner=pulumi.get(__ret__, 'owner'),
        region=pulumi.get(__ret__, 'region'),
        template_id=pulumi.get(__ret__, 'template_id'),
        templates=pulumi.get(__ret__, 'templates'))
def get_sql_templates_output(group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             owner: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             template_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSqlTemplatesResult]:
    """
    Use this data source to get the list of the DLI SQL templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    template_name = config.require_object("templateName")
    test = huaweicloud.Dli.get_sql_templates(name=template_name)
    ```


    :param _builtins.str group: Specifies the group name to which the SQL templates belong.
    :param _builtins.str name: Specifies the name of the SQL template to be queried.
    :param _builtins.str owner: Specifies user ID of owner to be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str template_id: Specifies the ID of the SQL template to be queried.
    """
    __args__ = dict()
    __args__['group'] = group
    __args__['name'] = name
    __args__['owner'] = owner
    __args__['region'] = region
    __args__['templateId'] = template_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dli/getSqlTemplates:getSqlTemplates', __args__, opts=opts, typ=GetSqlTemplatesResult)
    return __ret__.apply(lambda __response__: GetSqlTemplatesResult(
        group=pulumi.get(__response__, 'group'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        owner=pulumi.get(__response__, 'owner'),
        region=pulumi.get(__response__, 'region'),
        template_id=pulumi.get(__response__, 'template_id'),
        templates=pulumi.get(__response__, 'templates')))
