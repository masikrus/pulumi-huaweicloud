# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'FileSystemAccessRule',
    'FileSystemV2AccessRule',
    'TurboDuTaskDirUsage',
    'TurboDuTaskDirUsageFileCount',
    'TurboObsTargetObs',
    'TurboObsTargetObsAttributes',
    'TurboObsTargetObsPolicy',
    'TurboObsTargetObsPolicyAutoExportPolicy',
    'GetTurboDataTasksTaskResult',
    'GetTurboDirUsageDirUsageResult',
    'GetTurboDuTasksTaskResult',
    'GetTurboDuTasksTaskDirUsageResult',
    'GetTurboDuTasksTaskDirUsageFileCountResult',
    'GetTurboObsTargetsTargetResult',
    'GetTurboObsTargetsTargetObResult',
    'GetTurboPermRulesRuleResult',
    'GetTurboShareTypesShareTypeResult',
    'GetTurboShareTypesShareTypeAttributionResult',
    'GetTurboShareTypesShareTypeAttributionBandwidthResult',
    'GetTurboShareTypesShareTypeAttributionCapacityResult',
    'GetTurboShareTypesShareTypeAttributionIopResult',
    'GetTurboShareTypesShareTypeAttributionSingleChannel4kLatencyResult',
    'GetTurboShareTypesShareTypeAvailableZoneResult',
    'GetTurboTagsTagResult',
    'GetTurbosByTagsMatchResult',
    'GetTurbosByTagsResourceResult',
    'GetTurbosByTagsResourceTagResult',
    'GetTurbosByTagsTagResult',
    'GetTurbosTurboResult',
]

@pulumi.output_type
class FileSystemAccessRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "accessRuleId":
            suggest = "access_rule_id"
        elif key == "accessTo":
            suggest = "access_to"
        elif key == "accessType":
            suggest = "access_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileSystemAccessRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileSystemAccessRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileSystemAccessRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[_builtins.str] = None,
                 access_rule_id: Optional[_builtins.str] = None,
                 access_to: Optional[_builtins.str] = None,
                 access_type: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str access_level: Specifies the access level of the shared file system. Possible values are *ro* (
               read-only)
               and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
        :param _builtins.str access_rule_id: The UUID of the share access rule.
        :param _builtins.str access_to: Specifies the value that defines the access rule. The value contains 1 to 255
               characters. Changing this will create a new access rule. The value varies according to the scenario:
               + Set the VPC ID in VPC authorization scenarios.
               + Set this parameter in IP address authorization scenario:
               - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
               For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
               - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
               For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
               
               > **NOTE:** If you want to create more access rules, please using
               huaweicloud_sfs_access_rule.
        :param _builtins.str access_type: Specifies the type of the share access rule. The default value is *cert*. Changing
               this will create a new access rule.
        :param _builtins.str status: The status of the share access rule.
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if access_rule_id is not None:
            pulumi.set(__self__, "access_rule_id", access_rule_id)
        if access_to is not None:
            pulumi.set(__self__, "access_to", access_to)
        if access_type is not None:
            pulumi.set(__self__, "access_type", access_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[_builtins.str]:
        """
        Specifies the access level of the shared file system. Possible values are *ro* (
        read-only)
        and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
        """
        return pulumi.get(self, "access_level")

    @_builtins.property
    @pulumi.getter(name="accessRuleId")
    def access_rule_id(self) -> Optional[_builtins.str]:
        """
        The UUID of the share access rule.
        """
        return pulumi.get(self, "access_rule_id")

    @_builtins.property
    @pulumi.getter(name="accessTo")
    def access_to(self) -> Optional[_builtins.str]:
        """
        Specifies the value that defines the access rule. The value contains 1 to 255
        characters. Changing this will create a new access rule. The value varies according to the scenario:
        + Set the VPC ID in VPC authorization scenarios.
        + Set this parameter in IP address authorization scenario:
        - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
        For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
        - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
        For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.

        > **NOTE:** If you want to create more access rules, please using
        huaweicloud_sfs_access_rule.
        """
        return pulumi.get(self, "access_to")

    @_builtins.property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[_builtins.str]:
        """
        Specifies the type of the share access rule. The default value is *cert*. Changing
        this will create a new access rule.
        """
        return pulumi.get(self, "access_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the share access rule.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class FileSystemV2AccessRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "accessRuleId":
            suggest = "access_rule_id"
        elif key == "accessTo":
            suggest = "access_to"
        elif key == "accessType":
            suggest = "access_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileSystemV2AccessRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileSystemV2AccessRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileSystemV2AccessRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[_builtins.str] = None,
                 access_rule_id: Optional[_builtins.str] = None,
                 access_to: Optional[_builtins.str] = None,
                 access_type: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if access_rule_id is not None:
            pulumi.set(__self__, "access_rule_id", access_rule_id)
        if access_to is not None:
            pulumi.set(__self__, "access_to", access_to)
        if access_type is not None:
            pulumi.set(__self__, "access_type", access_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "access_level")

    @_builtins.property
    @pulumi.getter(name="accessRuleId")
    def access_rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "access_rule_id")

    @_builtins.property
    @pulumi.getter(name="accessTo")
    def access_to(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "access_to")

    @_builtins.property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "access_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class TurboDuTaskDirUsage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileCounts":
            suggest = "file_counts"
        elif key == "usedCapacity":
            suggest = "used_capacity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TurboDuTaskDirUsage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TurboDuTaskDirUsage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TurboDuTaskDirUsage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_counts: Optional[Sequence['outputs.TurboDuTaskDirUsageFileCount']] = None,
                 message: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 used_capacity: Optional[_builtins.int] = None):
        """
        :param Sequence['TurboDuTaskDirUsageFileCountArgs'] file_counts: The total number of files in the directory.
               The file_count structure is documented below.
        :param _builtins.str message: The error messages.
        :param _builtins.str path: Specifies the full path to a legal directory in the file system.
               The length of a single level directory is not allowed to exceed `255`, and the length of the full path is not allowed
               to exceed `4,096`.
               Changing this creates a new resource.
        :param _builtins.int used_capacity: The used capacity, in byte.
        """
        if file_counts is not None:
            pulumi.set(__self__, "file_counts", file_counts)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if used_capacity is not None:
            pulumi.set(__self__, "used_capacity", used_capacity)

    @_builtins.property
    @pulumi.getter(name="fileCounts")
    def file_counts(self) -> Optional[Sequence['outputs.TurboDuTaskDirUsageFileCount']]:
        """
        The total number of files in the directory.
        The file_count structure is documented below.
        """
        return pulumi.get(self, "file_counts")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        The error messages.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Specifies the full path to a legal directory in the file system.
        The length of a single level directory is not allowed to exceed `255`, and the length of the full path is not allowed
        to exceed `4,096`.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="usedCapacity")
    def used_capacity(self) -> Optional[_builtins.int]:
        """
        The used capacity, in byte.
        """
        return pulumi.get(self, "used_capacity")


@pulumi.output_type
class TurboDuTaskDirUsageFileCount(dict):
    def __init__(__self__, *,
                 block: Optional[_builtins.int] = None,
                 char: Optional[_builtins.int] = None,
                 dir: Optional[_builtins.int] = None,
                 pipe: Optional[_builtins.int] = None,
                 regular: Optional[_builtins.int] = None,
                 socket: Optional[_builtins.int] = None,
                 symlink: Optional[_builtins.int] = None):
        """
        :param _builtins.int block: The number of block devices.
        :param _builtins.int char: The number of character devices.
        :param _builtins.int dir: The number of directories.
        :param _builtins.int pipe: The number of pipe files.
        :param _builtins.int regular: The number of common files.
        :param _builtins.int socket: The number of sockets.
        :param _builtins.int symlink: The number of symbolic links.
        """
        if block is not None:
            pulumi.set(__self__, "block", block)
        if char is not None:
            pulumi.set(__self__, "char", char)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if pipe is not None:
            pulumi.set(__self__, "pipe", pipe)
        if regular is not None:
            pulumi.set(__self__, "regular", regular)
        if socket is not None:
            pulumi.set(__self__, "socket", socket)
        if symlink is not None:
            pulumi.set(__self__, "symlink", symlink)

    @_builtins.property
    @pulumi.getter
    def block(self) -> Optional[_builtins.int]:
        """
        The number of block devices.
        """
        return pulumi.get(self, "block")

    @_builtins.property
    @pulumi.getter
    def char(self) -> Optional[_builtins.int]:
        """
        The number of character devices.
        """
        return pulumi.get(self, "char")

    @_builtins.property
    @pulumi.getter
    def dir(self) -> Optional[_builtins.int]:
        """
        The number of directories.
        """
        return pulumi.get(self, "dir")

    @_builtins.property
    @pulumi.getter
    def pipe(self) -> Optional[_builtins.int]:
        """
        The number of pipe files.
        """
        return pulumi.get(self, "pipe")

    @_builtins.property
    @pulumi.getter
    def regular(self) -> Optional[_builtins.int]:
        """
        The number of common files.
        """
        return pulumi.get(self, "regular")

    @_builtins.property
    @pulumi.getter
    def socket(self) -> Optional[_builtins.int]:
        """
        The number of sockets.
        """
        return pulumi.get(self, "socket")

    @_builtins.property
    @pulumi.getter
    def symlink(self) -> Optional[_builtins.int]:
        """
        The number of symbolic links.
        """
        return pulumi.get(self, "symlink")


@pulumi.output_type
class TurboObsTargetObs(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 endpoint: _builtins.str,
                 attributes: Optional['outputs.TurboObsTargetObsAttributes'] = None,
                 policy: Optional['outputs.TurboObsTargetObsPolicy'] = None):
        """
        :param _builtins.str bucket: Specifies the name of the OBS bucket.
               
               > Before configuring OBS linkage, please configure bucket policies on the access control page of the OBS bucket and
               set bucket policies for sub users who need to access the OBS bucket: current bucket, all objects in the bucket,
               all operations.
        :param _builtins.str endpoint: Specifies the domain name of the region where the OBS bucket belongs.
        :param 'TurboObsTargetObsAttributesArgs' attributes: Specifies the attributes of the storage backend.
               The paramater is not supported for the file systems which are created on or before June 30, 2024 and not upgraded.
               Please submit a service ticket if you need it. [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
               The attributes structure is documented below.
               
               <a name="obs_policy"></a>
               The `policy` block supports:
        :param 'TurboObsTargetObsPolicyArgs' policy: Specifies the auto synchronization policy of the storage backend.
               The policy structure is documented below.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "endpoint", endpoint)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        Specifies the name of the OBS bucket.

        > Before configuring OBS linkage, please configure bucket policies on the access control page of the OBS bucket and
        set bucket policies for sub users who need to access the OBS bucket: current bucket, all objects in the bucket,
        all operations.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        Specifies the domain name of the region where the OBS bucket belongs.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Optional['outputs.TurboObsTargetObsAttributes']:
        """
        Specifies the attributes of the storage backend.
        The paramater is not supported for the file systems which are created on or before June 30, 2024 and not upgraded.
        Please submit a service ticket if you need it. [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
        The attributes structure is documented below.

        <a name="obs_policy"></a>
        The `policy` block supports:
        """
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional['outputs.TurboObsTargetObsPolicy']:
        """
        Specifies the auto synchronization policy of the storage backend.
        The policy structure is documented below.
        """
        return pulumi.get(self, "policy")


@pulumi.output_type
class TurboObsTargetObsAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dirMode":
            suggest = "dir_mode"
        elif key == "fileMode":
            suggest = "file_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TurboObsTargetObsAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TurboObsTargetObsAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TurboObsTargetObsAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dir_mode: Optional[_builtins.str] = None,
                 file_mode: Optional[_builtins.str] = None,
                 gid: Optional[_builtins.int] = None,
                 uid: Optional[_builtins.int] = None):
        """
        :param _builtins.str dir_mode: Specifies the permissions on the imported directory.
               The valid value ranges from `0` to `777`.
               
               > For more details about the fields, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-sfsturbo/CreateBackendTarget.html).
        :param _builtins.str file_mode: Specifies the permissions on the imported file.
               The valid value ranges from `0` to `777`.
        :param _builtins.int gid: Specifies the ID of the user group to which the imported object belongs.
               Default value is `0`. The valid value ranges from `0` to `4,294,967,294`.
        :param _builtins.int uid: Specifies the ID of the user who owns the imported object. Default value is `0`.
               The valid value ranges from `0` to `4,294,967,294`.
        """
        if dir_mode is not None:
            pulumi.set(__self__, "dir_mode", dir_mode)
        if file_mode is not None:
            pulumi.set(__self__, "file_mode", file_mode)
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter(name="dirMode")
    def dir_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the permissions on the imported directory.
        The valid value ranges from `0` to `777`.

        > For more details about the fields, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/api-sfsturbo/CreateBackendTarget.html).
        """
        return pulumi.get(self, "dir_mode")

    @_builtins.property
    @pulumi.getter(name="fileMode")
    def file_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the permissions on the imported file.
        The valid value ranges from `0` to `777`.
        """
        return pulumi.get(self, "file_mode")

    @_builtins.property
    @pulumi.getter
    def gid(self) -> Optional[_builtins.int]:
        """
        Specifies the ID of the user group to which the imported object belongs.
        Default value is `0`. The valid value ranges from `0` to `4,294,967,294`.
        """
        return pulumi.get(self, "gid")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[_builtins.int]:
        """
        Specifies the ID of the user who owns the imported object. Default value is `0`.
        The valid value ranges from `0` to `4,294,967,294`.
        """
        return pulumi.get(self, "uid")


@pulumi.output_type
class TurboObsTargetObsPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoExportPolicy":
            suggest = "auto_export_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TurboObsTargetObsPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TurboObsTargetObsPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TurboObsTargetObsPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_export_policy: Optional['outputs.TurboObsTargetObsPolicyAutoExportPolicy'] = None):
        """
        :param 'TurboObsTargetObsPolicyAutoExportPolicyArgs' auto_export_policy: Specifies the auto export policy of the storage backend.
               If enabled, all update made on the file system will be automatically exported to the OBS bucket.
               The auto_export_policy structure is documented below.
               
               <a name="obs_export_policy"></a>
               The `attributes` block supports:
        """
        if auto_export_policy is not None:
            pulumi.set(__self__, "auto_export_policy", auto_export_policy)

    @_builtins.property
    @pulumi.getter(name="autoExportPolicy")
    def auto_export_policy(self) -> Optional['outputs.TurboObsTargetObsPolicyAutoExportPolicy']:
        """
        Specifies the auto export policy of the storage backend.
        If enabled, all update made on the file system will be automatically exported to the OBS bucket.
        The auto_export_policy structure is documented below.

        <a name="obs_export_policy"></a>
        The `attributes` block supports:
        """
        return pulumi.get(self, "auto_export_policy")


@pulumi.output_type
class TurboObsTargetObsPolicyAutoExportPolicy(dict):
    def __init__(__self__, *,
                 events: Optional[Sequence[_builtins.str]] = None,
                 prefix: Optional[_builtins.str] = None,
                 suffix: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] events: Specifies the type of the data automatically exported to the OBS bucket.
               The valid values are as follows:
               + **NEW**: Indicate add new data. Files created and then modified in the SFS Turbo interworking directory. Any data
               or metadata modifications made will be automatically synchronized to the OBS bucket.
               + **CHANGED**: Indicate modify data. Files previously imported from the OBS bucket and then modified in the SFS Turbo
               interworking directory. Any data or metadata modifications made will be automatically synchronized to the OBS bucket.
               + **DELETED**: Indicate delete data. Files deleted from the SFS Turbo interworking directory. Deletions will be
               automatically synchronized to the OBS bucket, and only such files that were previously exported to the bucket will be
               deleted.
        :param _builtins.str prefix: Specifies the prefix to be matched in the storage backend.
        :param _builtins.str suffix: Specifies the suffix to be matched in the storage backend.
               
               <a name="obs_attributes"></a>
               The `auto_export_policy` block supports:
        """
        if events is not None:
            pulumi.set(__self__, "events", events)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the type of the data automatically exported to the OBS bucket.
        The valid values are as follows:
        + **NEW**: Indicate add new data. Files created and then modified in the SFS Turbo interworking directory. Any data
        or metadata modifications made will be automatically synchronized to the OBS bucket.
        + **CHANGED**: Indicate modify data. Files previously imported from the OBS bucket and then modified in the SFS Turbo
        interworking directory. Any data or metadata modifications made will be automatically synchronized to the OBS bucket.
        + **DELETED**: Indicate delete data. Files deleted from the SFS Turbo interworking directory. Deletions will be
        automatically synchronized to the OBS bucket, and only such files that were previously exported to the bucket will be
        deleted.
        """
        return pulumi.get(self, "events")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Specifies the prefix to be matched in the storage backend.
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter
    def suffix(self) -> Optional[_builtins.str]:
        """
        Specifies the suffix to be matched in the storage backend.

        <a name="obs_attributes"></a>
        The `auto_export_policy` block supports:
        """
        return pulumi.get(self, "suffix")


@pulumi.output_type
class GetTurboDataTasksTaskResult(dict):
    def __init__(__self__, *,
                 dest_prefix: _builtins.str,
                 dest_target: _builtins.str,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 message: _builtins.str,
                 src_prefix: _builtins.str,
                 src_target: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str dest_prefix: The destination path prefix of the data task.
        :param _builtins.str dest_target: The target end information of the data task.
        :param _builtins.str end_time: The end time of the data task, in RFC3339 format.
        :param _builtins.str id: The ID of the data task.
        :param _builtins.str message: The data task execution result information.
        :param _builtins.str src_prefix: The source path prefix of the data task.
        :param _builtins.str src_target: The linkage directory name.
        :param _builtins.str start_time: The start time of the data task, in RFC3339 format.
        :param _builtins.str status: Specifies the status of the data task.
               The value can be **SUCCESS** or **FAIL**.
        :param _builtins.str type: Specifies the type of the data task.
               The valid values are as following:
               + **import**: Additional metadata import.
               + **import_metadata**: Quick import.
               + **preload**: Data preheat.
               + **export**: Data export.
        """
        pulumi.set(__self__, "dest_prefix", dest_prefix)
        pulumi.set(__self__, "dest_target", dest_target)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "src_prefix", src_prefix)
        pulumi.set(__self__, "src_target", src_target)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="destPrefix")
    def dest_prefix(self) -> _builtins.str:
        """
        The destination path prefix of the data task.
        """
        return pulumi.get(self, "dest_prefix")

    @_builtins.property
    @pulumi.getter(name="destTarget")
    def dest_target(self) -> _builtins.str:
        """
        The target end information of the data task.
        """
        return pulumi.get(self, "dest_target")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time of the data task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the data task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The data task execution result information.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="srcPrefix")
    def src_prefix(self) -> _builtins.str:
        """
        The source path prefix of the data task.
        """
        return pulumi.get(self, "src_prefix")

    @_builtins.property
    @pulumi.getter(name="srcTarget")
    def src_target(self) -> _builtins.str:
        """
        The linkage directory name.
        """
        return pulumi.get(self, "src_target")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        The start time of the data task, in RFC3339 format.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the data task.
        The value can be **SUCCESS** or **FAIL**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the data task.
        The valid values are as following:
        + **import**: Additional metadata import.
        + **import_metadata**: Quick import.
        + **preload**: Data preheat.
        + **export**: Data export.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTurboDirUsageDirUsageResult(dict):
    def __init__(__self__, *,
                 used_capacity: _builtins.int):
        """
        :param _builtins.int used_capacity: The used capacity of the directory, in bytes.
        """
        pulumi.set(__self__, "used_capacity", used_capacity)

    @_builtins.property
    @pulumi.getter(name="usedCapacity")
    def used_capacity(self) -> _builtins.int:
        """
        The used capacity of the directory, in bytes.
        """
        return pulumi.get(self, "used_capacity")


@pulumi.output_type
class GetTurboDuTasksTaskResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 dir_usages: Sequence['outputs.GetTurboDuTasksTaskDirUsageResult'],
                 end_time: _builtins.str,
                 id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str begin_time: The start time of the DU task, in RFC3339 format.
        :param Sequence['GetTurboDuTasksTaskDirUsageArgs'] dir_usages: The resource usages of a directory (including subdirectories).
        :param _builtins.str end_time: The end time of the DU task, in RFC3339 format.
        :param _builtins.str id: The ID of the DU task.
        :param _builtins.str status: The status of the DU task.
               The value can be **SUCCESS**, **DOING**, or **FAIL**.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "dir_usages", dir_usages)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        The start time of the DU task, in RFC3339 format.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="dirUsages")
    def dir_usages(self) -> Sequence['outputs.GetTurboDuTasksTaskDirUsageResult']:
        """
        The resource usages of a directory (including subdirectories).
        """
        return pulumi.get(self, "dir_usages")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time of the DU task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the DU task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the DU task.
        The value can be **SUCCESS**, **DOING**, or **FAIL**.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetTurboDuTasksTaskDirUsageResult(dict):
    def __init__(__self__, *,
                 file_counts: Sequence['outputs.GetTurboDuTasksTaskDirUsageFileCountResult'],
                 message: _builtins.str,
                 path: _builtins.str,
                 used_capacity: _builtins.int):
        """
        :param Sequence['GetTurboDuTasksTaskDirUsageFileCountArgs'] file_counts: The total number of files in the directory.
        :param _builtins.str message: The error message.
        :param _builtins.str path: The full path to a legal directory in the file system.
        :param _builtins.int used_capacity: The used capacity, in byte.
        """
        pulumi.set(__self__, "file_counts", file_counts)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "used_capacity", used_capacity)

    @_builtins.property
    @pulumi.getter(name="fileCounts")
    def file_counts(self) -> Sequence['outputs.GetTurboDuTasksTaskDirUsageFileCountResult']:
        """
        The total number of files in the directory.
        """
        return pulumi.get(self, "file_counts")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The full path to a legal directory in the file system.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="usedCapacity")
    def used_capacity(self) -> _builtins.int:
        """
        The used capacity, in byte.
        """
        return pulumi.get(self, "used_capacity")


@pulumi.output_type
class GetTurboDuTasksTaskDirUsageFileCountResult(dict):
    def __init__(__self__, *,
                 block: _builtins.int,
                 char: _builtins.int,
                 dir: _builtins.int,
                 pipe: _builtins.int,
                 regular: _builtins.int,
                 socket: _builtins.int,
                 symlink: _builtins.int):
        """
        :param _builtins.int block: The number of block devices.
        :param _builtins.int char: The number of character devices.
        :param _builtins.int dir: The number of directories.
        :param _builtins.int pipe: The number of pipe files.
        :param _builtins.int regular: The number of common files.
        :param _builtins.int socket: The number of sockets.
        :param _builtins.int symlink: The number of symbolic links.
        """
        pulumi.set(__self__, "block", block)
        pulumi.set(__self__, "char", char)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "pipe", pipe)
        pulumi.set(__self__, "regular", regular)
        pulumi.set(__self__, "socket", socket)
        pulumi.set(__self__, "symlink", symlink)

    @_builtins.property
    @pulumi.getter
    def block(self) -> _builtins.int:
        """
        The number of block devices.
        """
        return pulumi.get(self, "block")

    @_builtins.property
    @pulumi.getter
    def char(self) -> _builtins.int:
        """
        The number of character devices.
        """
        return pulumi.get(self, "char")

    @_builtins.property
    @pulumi.getter
    def dir(self) -> _builtins.int:
        """
        The number of directories.
        """
        return pulumi.get(self, "dir")

    @_builtins.property
    @pulumi.getter
    def pipe(self) -> _builtins.int:
        """
        The number of pipe files.
        """
        return pulumi.get(self, "pipe")

    @_builtins.property
    @pulumi.getter
    def regular(self) -> _builtins.int:
        """
        The number of common files.
        """
        return pulumi.get(self, "regular")

    @_builtins.property
    @pulumi.getter
    def socket(self) -> _builtins.int:
        """
        The number of sockets.
        """
        return pulumi.get(self, "socket")

    @_builtins.property
    @pulumi.getter
    def symlink(self) -> _builtins.int:
        """
        The number of symbolic links.
        """
        return pulumi.get(self, "symlink")


@pulumi.output_type
class GetTurboObsTargetsTargetResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 file_system_path: _builtins.str,
                 id: _builtins.str,
                 obs: Sequence['outputs.GetTurboObsTargetsTargetObResult'],
                 status: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the OBS target.
        :param _builtins.str file_system_path: The linkage directory name of the OBS target.
        :param _builtins.str id: The ID of the OBS target.
        :param Sequence['GetTurboObsTargetsTargetObArgs'] obs: The detail of the OBS bucket.
        :param _builtins.str status: Specifies the status of the OBS target.
               The valid values are **AVAILABLE**, **MISCONFIGURED** and **FAILED**.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "file_system_path", file_system_path)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "obs", obs)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the OBS target.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> _builtins.str:
        """
        The linkage directory name of the OBS target.
        """
        return pulumi.get(self, "file_system_path")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the OBS target.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def obs(self) -> Sequence['outputs.GetTurboObsTargetsTargetObResult']:
        """
        The detail of the OBS bucket.
        """
        return pulumi.get(self, "obs")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the OBS target.
        The valid values are **AVAILABLE**, **MISCONFIGURED** and **FAILED**.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetTurboObsTargetsTargetObResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 endpoint: _builtins.str):
        """
        :param _builtins.str bucket: Specifies the name of the OBS bucket associated with the OBS target.
        :param _builtins.str endpoint: The domain name of the region where the OBS bucket belongs.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "endpoint", endpoint)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        Specifies the name of the OBS bucket associated with the OBS target.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        The domain name of the region where the OBS bucket belongs.
        """
        return pulumi.get(self, "endpoint")


@pulumi.output_type
class GetTurboPermRulesRuleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 ip_cidr: _builtins.str,
                 rw_type: _builtins.str,
                 user_type: _builtins.str):
        """
        :param _builtins.str id: The ID of the permission rule.
        :param _builtins.str ip_cidr: The IP address or IP address range of the authorized object.
        :param _builtins.str rw_type: The read and write permission of the authorized object.
               The value can be **rw** (read and write), **ro** (read only) or **none** (no permission).
               The default value is **rw**.
        :param _builtins.str user_type: The file system access permission granted to the user of the authorized object.
               The valid values are as follow:
               + **no_root_squash**: Allow the root user on the client to access the file system as root.
               + **root_squasg**: Allow the root user on the client to access the file system as anonymous (nfsnobody).
               + **all_squash**: Allow any user on the client to access the file system as nfsnobody.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_cidr", ip_cidr)
        pulumi.set(__self__, "rw_type", rw_type)
        pulumi.set(__self__, "user_type", user_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the permission rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipCidr")
    def ip_cidr(self) -> _builtins.str:
        """
        The IP address or IP address range of the authorized object.
        """
        return pulumi.get(self, "ip_cidr")

    @_builtins.property
    @pulumi.getter(name="rwType")
    def rw_type(self) -> _builtins.str:
        """
        The read and write permission of the authorized object.
        The value can be **rw** (read and write), **ro** (read only) or **none** (no permission).
        The default value is **rw**.
        """
        return pulumi.get(self, "rw_type")

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> _builtins.str:
        """
        The file system access permission granted to the user of the authorized object.
        The valid values are as follow:
        + **no_root_squash**: Allow the root user on the client to access the file system as root.
        + **root_squasg**: Allow the root user on the client to access the file system as anonymous (nfsnobody).
        + **all_squash**: Allow any user on the client to access the file system as nfsnobody.
        """
        return pulumi.get(self, "user_type")


@pulumi.output_type
class GetTurboShareTypesShareTypeResult(dict):
    def __init__(__self__, *,
                 attributions: Sequence['outputs.GetTurboShareTypesShareTypeAttributionResult'],
                 available_zones: Sequence['outputs.GetTurboShareTypesShareTypeAvailableZoneResult'],
                 features: Sequence[_builtins.str],
                 scenario: _builtins.str,
                 share_type: _builtins.str,
                 spec_code: _builtins.str,
                 storage_media: _builtins.str,
                 support_period: _builtins.bool):
        """
        :param Sequence['GetTurboShareTypesShareTypeAttributionArgs'] attributions: The attribution of the SFS turbo file system.
               The attribution structure is documented below.
        :param Sequence['GetTurboShareTypesShareTypeAvailableZoneArgs'] available_zones: The AZs where there are the SFS turbo file system.
               The available_zones structure is documented below.
        :param Sequence[_builtins.str] features: The features list supported by the instance.
        :param _builtins.str scenario: The scene of the SFS turbo file system.
        :param _builtins.str share_type: The type of the SFS turbo file system.
        :param _builtins.str spec_code: The specification code of the SFS turbo file system.
        :param _builtins.str storage_media: The storage media of the SFS turbo file system. Possible values are **HDD**, **SDD** and **ESSD**.
        :param _builtins.bool support_period: Whether the yearly/monthly billing mode is supported.
        """
        pulumi.set(__self__, "attributions", attributions)
        pulumi.set(__self__, "available_zones", available_zones)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "scenario", scenario)
        pulumi.set(__self__, "share_type", share_type)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "storage_media", storage_media)
        pulumi.set(__self__, "support_period", support_period)

    @_builtins.property
    @pulumi.getter
    def attributions(self) -> Sequence['outputs.GetTurboShareTypesShareTypeAttributionResult']:
        """
        The attribution of the SFS turbo file system.
        The attribution structure is documented below.
        """
        return pulumi.get(self, "attributions")

    @_builtins.property
    @pulumi.getter(name="availableZones")
    def available_zones(self) -> Sequence['outputs.GetTurboShareTypesShareTypeAvailableZoneResult']:
        """
        The AZs where there are the SFS turbo file system.
        The available_zones structure is documented below.
        """
        return pulumi.get(self, "available_zones")

    @_builtins.property
    @pulumi.getter
    def features(self) -> Sequence[_builtins.str]:
        """
        The features list supported by the instance.
        """
        return pulumi.get(self, "features")

    @_builtins.property
    @pulumi.getter
    def scenario(self) -> _builtins.str:
        """
        The scene of the SFS turbo file system.
        """
        return pulumi.get(self, "scenario")

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> _builtins.str:
        """
        The type of the SFS turbo file system.
        """
        return pulumi.get(self, "share_type")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        The specification code of the SFS turbo file system.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter(name="storageMedia")
    def storage_media(self) -> _builtins.str:
        """
        The storage media of the SFS turbo file system. Possible values are **HDD**, **SDD** and **ESSD**.
        """
        return pulumi.get(self, "storage_media")

    @_builtins.property
    @pulumi.getter(name="supportPeriod")
    def support_period(self) -> _builtins.bool:
        """
        Whether the yearly/monthly billing mode is supported.
        """
        return pulumi.get(self, "support_period")


@pulumi.output_type
class GetTurboShareTypesShareTypeAttributionResult(dict):
    def __init__(__self__, *,
                 bandwidths: Sequence['outputs.GetTurboShareTypesShareTypeAttributionBandwidthResult'],
                 capacities: Sequence['outputs.GetTurboShareTypesShareTypeAttributionCapacityResult'],
                 iops: Sequence['outputs.GetTurboShareTypesShareTypeAttributionIopResult'],
                 single_channel4k_latencies: Sequence['outputs.GetTurboShareTypesShareTypeAttributionSingleChannel4kLatencyResult']):
        """
        :param Sequence['GetTurboShareTypesShareTypeAttributionBandwidthArgs'] bandwidths: The bandwidth attributions of the SFS turbo file system.
               The bandwidth structure is documented below.
        :param Sequence['GetTurboShareTypesShareTypeAttributionCapacityArgs'] capacities: The size attributions of the SFS turbo file system.
               The capacity structure is documented below.
        :param Sequence['GetTurboShareTypesShareTypeAttributionIopArgs'] iops: The iops attributions of the SFS turbo file system.
               The iops structure is documented below.
        :param Sequence['GetTurboShareTypesShareTypeAttributionSingleChannel4kLatencyArgs'] single_channel4k_latencies: The single-channel 4K latency attributions of the SFS turbo file system.
               The single_channel_4k_latency structure is documented below.
        """
        pulumi.set(__self__, "bandwidths", bandwidths)
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "single_channel4k_latencies", single_channel4k_latencies)

    @_builtins.property
    @pulumi.getter
    def bandwidths(self) -> Sequence['outputs.GetTurboShareTypesShareTypeAttributionBandwidthResult']:
        """
        The bandwidth attributions of the SFS turbo file system.
        The bandwidth structure is documented below.
        """
        return pulumi.get(self, "bandwidths")

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Sequence['outputs.GetTurboShareTypesShareTypeAttributionCapacityResult']:
        """
        The size attributions of the SFS turbo file system.
        The capacity structure is documented below.
        """
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Sequence['outputs.GetTurboShareTypesShareTypeAttributionIopResult']:
        """
        The iops attributions of the SFS turbo file system.
        The iops structure is documented below.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="singleChannel4kLatencies")
    def single_channel4k_latencies(self) -> Sequence['outputs.GetTurboShareTypesShareTypeAttributionSingleChannel4kLatencyResult']:
        """
        The single-channel 4K latency attributions of the SFS turbo file system.
        The single_channel_4k_latency structure is documented below.
        """
        return pulumi.get(self, "single_channel4k_latencies")


@pulumi.output_type
class GetTurboShareTypesShareTypeAttributionBandwidthResult(dict):
    def __init__(__self__, *,
                 base: _builtins.int,
                 density: _builtins.int,
                 max: _builtins.int,
                 min: _builtins.int,
                 step: _builtins.int):
        """
        :param _builtins.int base: The basic bandwidth of the SFS turbo file system.
        :param _builtins.int density: The bandwidth density of the SFS turbo file system.
        :param _builtins.int max: The max single-channel 4K latency of the SFS turbo file system.
        :param _builtins.int min: The min single-channel 4K latency of the SFS turbo file system.
        :param _builtins.int step: The bandwidth step of the SFS turbo file system.
        """
        pulumi.set(__self__, "base", base)
        pulumi.set(__self__, "density", density)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "step", step)

    @_builtins.property
    @pulumi.getter
    def base(self) -> _builtins.int:
        """
        The basic bandwidth of the SFS turbo file system.
        """
        return pulumi.get(self, "base")

    @_builtins.property
    @pulumi.getter
    def density(self) -> _builtins.int:
        """
        The bandwidth density of the SFS turbo file system.
        """
        return pulumi.get(self, "density")

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.int:
        """
        The max single-channel 4K latency of the SFS turbo file system.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        The min single-channel 4K latency of the SFS turbo file system.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def step(self) -> _builtins.int:
        """
        The bandwidth step of the SFS turbo file system.
        """
        return pulumi.get(self, "step")


@pulumi.output_type
class GetTurboShareTypesShareTypeAttributionCapacityResult(dict):
    def __init__(__self__, *,
                 max: _builtins.int,
                 min: _builtins.int,
                 step: _builtins.int):
        """
        :param _builtins.int max: The max single-channel 4K latency of the SFS turbo file system.
        :param _builtins.int min: The min single-channel 4K latency of the SFS turbo file system.
        :param _builtins.int step: The bandwidth step of the SFS turbo file system.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "step", step)

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.int:
        """
        The max single-channel 4K latency of the SFS turbo file system.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        The min single-channel 4K latency of the SFS turbo file system.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def step(self) -> _builtins.int:
        """
        The bandwidth step of the SFS turbo file system.
        """
        return pulumi.get(self, "step")


@pulumi.output_type
class GetTurboShareTypesShareTypeAttributionIopResult(dict):
    def __init__(__self__, *,
                 max: _builtins.int,
                 min: _builtins.int):
        """
        :param _builtins.int max: The max single-channel 4K latency of the SFS turbo file system.
        :param _builtins.int min: The min single-channel 4K latency of the SFS turbo file system.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.int:
        """
        The max single-channel 4K latency of the SFS turbo file system.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        The min single-channel 4K latency of the SFS turbo file system.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class GetTurboShareTypesShareTypeAttributionSingleChannel4kLatencyResult(dict):
    def __init__(__self__, *,
                 max: _builtins.int,
                 min: _builtins.int):
        """
        :param _builtins.int max: The max single-channel 4K latency of the SFS turbo file system.
        :param _builtins.int min: The min single-channel 4K latency of the SFS turbo file system.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.int:
        """
        The max single-channel 4K latency of the SFS turbo file system.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        The min single-channel 4K latency of the SFS turbo file system.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class GetTurboShareTypesShareTypeAvailableZoneResult(dict):
    def __init__(__self__, *,
                 available_zone: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str available_zone: The availability zone name.
        :param _builtins.str status: The SFS turbo file system status in this availability zone. Possible values are **normal** and **sellout**.
        """
        pulumi.set(__self__, "available_zone", available_zone)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> _builtins.str:
        """
        The availability zone name.
        """
        return pulumi.get(self, "available_zone")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The SFS turbo file system status in this availability zone. Possible values are **normal** and **sellout**.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetTurboTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The list of the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The list of the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTurbosByTagsMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the matches.
               Currently, only **resource_name** is supported.
        :param _builtins.str value: Specifies the value of the matches.
               If the `value` ends with `*`, prefix search will be performed. e.g. `sfsturbo*` indicates all resources whose names
               start with **sfsturbo** will be returned.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the matches.
        Currently, only **resource_name** is supported.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the matches.
        If the `value` ends with `*`, prefix search will be performed. e.g. `sfsturbo*` indicates all resources whose names
        start with **sfsturbo** will be returned.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTurbosByTagsResourceResult(dict):
    def __init__(__self__, *,
                 resource_detail: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Sequence['outputs.GetTurbosByTagsResourceTagResult']):
        """
        :param _builtins.str resource_detail: The detail of the SFS Turbo file systems.
        :param _builtins.str resource_id: The ID of the SFS Turbo file systems.
        :param _builtins.str resource_name: The name of the SFS Turbo file systems.
        :param Sequence['GetTurbosByTagsResourceTagArgs'] tags: Specifies the tags to filter the resources. The `tags` can contain a maximum of `20` keys.
               Each tag key can have a maximum of `20` tag values. The tag value corresponding to each tag key can be an empty array
               but the structure cannot be missing. Each tag key must be unique, and tag values of the same tag must be unique.
               The response returns resources containing all tags in this list. Keys in this list are in the AND relationship and
               values in each key-value structure are in the OR relationship. If no `tags` is specified, all data is returned.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_detail", resource_detail)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetail")
    def resource_detail(self) -> _builtins.str:
        """
        The detail of the SFS Turbo file systems.
        """
        return pulumi.get(self, "resource_detail")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of the SFS Turbo file systems.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the SFS Turbo file systems.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTurbosByTagsResourceTagResult']:
        """
        Specifies the tags to filter the resources. The `tags` can contain a maximum of `20` keys.
        Each tag key can have a maximum of `20` tag values. The tag value corresponding to each tag key can be an empty array
        but the structure cannot be missing. Each tag key must be unique, and tag values of the same tag must be unique.
        The response returns resources containing all tags in this list. Keys in this list are in the AND relationship and
        values in each key-value structure are in the OR relationship. If no `tags` is specified, all data is returned.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetTurbosByTagsResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the matches.
               Currently, only **resource_name** is supported.
        :param _builtins.str value: Specifies the value of the matches.
               If the `value` ends with `*`, prefix search will be performed. e.g. `sfsturbo*` indicates all resources whose names
               start with **sfsturbo** will be returned.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the matches.
        Currently, only **resource_name** is supported.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the matches.
        If the `value` ends with `*`, prefix search will be performed. e.g. `sfsturbo*` indicates all resources whose names
        start with **sfsturbo** will be returned.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTurbosByTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the matches.
               Currently, only **resource_name** is supported.
        :param Sequence[_builtins.str] values: Specifies the values list of the tags.
               Each value can contain a maximum of `255` characters. An empty list for values indicates any value.
               
               <a name="turbos_matches"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the matches.
        Currently, only **resource_name** is supported.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the values list of the tags.
        Each value can contain a maximum of `255` characters. An empty list for values indicates any value.

        <a name="turbos_matches"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTurbosTurboResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 available_capacity: _builtins.str,
                 crypt_key_id: _builtins.str,
                 enhanced: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 export_location: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 security_group_id: _builtins.str,
                 share_proto: _builtins.str,
                 share_type: _builtins.str,
                 size: _builtins.int,
                 subnet_id: _builtins.str,
                 version: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str availability_zone: The availability zone where the SFS turbo file system is located.
        :param _builtins.str available_capacity: The available capacity of the SFS turbo file system, in GB.
        :param _builtins.str crypt_key_id: The ID of a KMS key to encrypt the SFS turbo file system.
        :param _builtins.bool enhanced: Whether the SFS turbo file system is enhanced.
        :param _builtins.str enterprise_project_id: The enterprise project ID of the SFS turbo file system.
        :param _builtins.str export_location: The mount point of the SFS turbo file system.
        :param _builtins.str id: The data source ID of the SFS turbo file system.
        :param _builtins.str name: Specifies the name of the SFS turbo file system.
        :param _builtins.str security_group_id: The ID of the security group to which the SFS turbo belongs.
        :param _builtins.str share_proto: Specifies the protocol of the SFS turbo file system. The valid value is **NFS**.
        :param _builtins.str share_type: Specifies the type of the SFS turbo file system.
               The valid values are **STANDARD** and **PERFORMANCE**.
        :param _builtins.int size: Specifies the capacity of the SFS turbo file system, in GB.
               The value ranges from `500` to `32,768`, and must be large than `10,240` for an enhanced file system.
        :param _builtins.str subnet_id: The **network ID** of the subnet to which the SFS turbo belongs.
        :param _builtins.str version: The version of the SFS turbo file system.
        :param _builtins.str vpc_id: The ID of the VPC to which the SFS turbo belongs.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "available_capacity", available_capacity)
        pulumi.set(__self__, "crypt_key_id", crypt_key_id)
        pulumi.set(__self__, "enhanced", enhanced)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "export_location", export_location)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "share_proto", share_proto)
        pulumi.set(__self__, "share_type", share_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone where the SFS turbo file system is located.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="availableCapacity")
    def available_capacity(self) -> _builtins.str:
        """
        The available capacity of the SFS turbo file system, in GB.
        """
        return pulumi.get(self, "available_capacity")

    @_builtins.property
    @pulumi.getter(name="cryptKeyId")
    def crypt_key_id(self) -> _builtins.str:
        """
        The ID of a KMS key to encrypt the SFS turbo file system.
        """
        return pulumi.get(self, "crypt_key_id")

    @_builtins.property
    @pulumi.getter
    def enhanced(self) -> _builtins.bool:
        """
        Whether the SFS turbo file system is enhanced.
        """
        return pulumi.get(self, "enhanced")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID of the SFS turbo file system.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="exportLocation")
    def export_location(self) -> _builtins.str:
        """
        The mount point of the SFS turbo file system.
        """
        return pulumi.get(self, "export_location")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The data source ID of the SFS turbo file system.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the SFS turbo file system.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group to which the SFS turbo belongs.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="shareProto")
    def share_proto(self) -> _builtins.str:
        """
        Specifies the protocol of the SFS turbo file system. The valid value is **NFS**.
        """
        return pulumi.get(self, "share_proto")

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> _builtins.str:
        """
        Specifies the type of the SFS turbo file system.
        The valid values are **STANDARD** and **PERFORMANCE**.
        """
        return pulumi.get(self, "share_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the capacity of the SFS turbo file system, in GB.
        The value ranges from `500` to `32,768`, and must be large than `10,240` for an enhanced file system.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The **network ID** of the subnet to which the SFS turbo belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the SFS turbo file system.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC to which the SFS turbo belongs.
        """
        return pulumi.get(self, "vpc_id")


