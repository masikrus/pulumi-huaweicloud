# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetTurboMountedIpsResult',
    'AwaitableGetTurboMountedIpsResult',
    'get_turbo_mounted_ips',
    'get_turbo_mounted_ips_output',
]

@pulumi.output_type
class GetTurboMountedIpsResult:
    """
    A collection of values returned by getTurboMountedIps.
    """
    def __init__(__self__, id=None, ips=None, ips_attributes=None, region=None, share_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ips and not isinstance(ips, str):
            raise TypeError("Expected argument 'ips' to be a str")
        pulumi.set(__self__, "ips", ips)
        if ips_attributes and not isinstance(ips_attributes, list):
            raise TypeError("Expected argument 'ips_attributes' to be a list")
        pulumi.set(__self__, "ips_attributes", ips_attributes)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if share_id and not isinstance(share_id, str):
            raise TypeError("Expected argument 'share_id' to be a str")
        pulumi.set(__self__, "share_id", share_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter(name="ipsAttributes")
    def ips_attributes(self) -> Sequence[_builtins.str]:
        """
        The IP addresses of the clients who have mounted the file system.
        """
        return pulumi.get(self, "ips_attributes")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> _builtins.str:
        return pulumi.get(self, "share_id")


class AwaitableGetTurboMountedIpsResult(GetTurboMountedIpsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTurboMountedIpsResult(
            id=self.id,
            ips=self.ips,
            ips_attributes=self.ips_attributes,
            region=self.region,
            share_id=self.share_id)


def get_turbo_mounted_ips(ips: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          share_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTurboMountedIpsResult:
    """
    Use this data source to get the IP addresses of the clients who have mounted the file system.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    share_id = config.require_object("shareId")
    ips = config.require_object("ips")
    test = huaweicloud.Sfs.get_turbo_mounted_ips(share_id=share_id,
        ips=ips)
    ```


    :param _builtins.str ips: Specifies the IP addresses of the clients who have mounted the file system.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str share_id: Specifies the ID of the SFS turbo file system.
    """
    __args__ = dict()
    __args__['ips'] = ips
    __args__['region'] = region
    __args__['shareId'] = share_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Sfs/getTurboMountedIps:getTurboMountedIps', __args__, opts=opts, typ=GetTurboMountedIpsResult).value

    return AwaitableGetTurboMountedIpsResult(
        id=pulumi.get(__ret__, 'id'),
        ips=pulumi.get(__ret__, 'ips'),
        ips_attributes=pulumi.get(__ret__, 'ips_attributes'),
        region=pulumi.get(__ret__, 'region'),
        share_id=pulumi.get(__ret__, 'share_id'))
def get_turbo_mounted_ips_output(ips: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTurboMountedIpsResult]:
    """
    Use this data source to get the IP addresses of the clients who have mounted the file system.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    share_id = config.require_object("shareId")
    ips = config.require_object("ips")
    test = huaweicloud.Sfs.get_turbo_mounted_ips(share_id=share_id,
        ips=ips)
    ```


    :param _builtins.str ips: Specifies the IP addresses of the clients who have mounted the file system.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str share_id: Specifies the ID of the SFS turbo file system.
    """
    __args__ = dict()
    __args__['ips'] = ips
    __args__['region'] = region
    __args__['shareId'] = share_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Sfs/getTurboMountedIps:getTurboMountedIps', __args__, opts=opts, typ=GetTurboMountedIpsResult)
    return __ret__.apply(lambda __response__: GetTurboMountedIpsResult(
        id=pulumi.get(__response__, 'id'),
        ips=pulumi.get(__response__, 'ips'),
        ips_attributes=pulumi.get(__response__, 'ips_attributes'),
        region=pulumi.get(__response__, 'region'),
        share_id=pulumi.get(__response__, 'share_id')))
