# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTurboDirUsageResult',
    'AwaitableGetTurboDirUsageResult',
    'get_turbo_dir_usage',
    'get_turbo_dir_usage_output',
]

@pulumi.output_type
class GetTurboDirUsageResult:
    """
    A collection of values returned by getTurboDirUsage.
    """
    def __init__(__self__, dir_usages=None, id=None, path=None, region=None, share_id=None):
        if dir_usages and not isinstance(dir_usages, list):
            raise TypeError("Expected argument 'dir_usages' to be a list")
        pulumi.set(__self__, "dir_usages", dir_usages)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if share_id and not isinstance(share_id, str):
            raise TypeError("Expected argument 'share_id' to be a str")
        pulumi.set(__self__, "share_id", share_id)

    @_builtins.property
    @pulumi.getter(name="dirUsages")
    def dir_usages(self) -> Sequence['outputs.GetTurboDirUsageDirUsageResult']:
        """
        The usage of the directory.
        """
        return pulumi.get(self, "dir_usages")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> _builtins.str:
        return pulumi.get(self, "share_id")


class AwaitableGetTurboDirUsageResult(GetTurboDirUsageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTurboDirUsageResult(
            dir_usages=self.dir_usages,
            id=self.id,
            path=self.path,
            region=self.region,
            share_id=self.share_id)


def get_turbo_dir_usage(path: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        share_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTurboDirUsageResult:
    """
    Use this data source to get the usage of a directory.

    > 1. This datasource is only available for the following SFS Turbo file system types:
    >      **Standard**, **Standard-Enhanced**, **Performance**,**Performance-Enhanced**.
    >    <br/>2. The obtained data may not be the latest as there is a `5` minutes delay between the frontend and background.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    share_id = config.require_object("shareId")
    path = config.require_object("path")
    test = huaweicloud.Sfs.get_turbo_dir_usage(share_id=share_id,
        path=path)
    ```


    :param _builtins.str path: Specifies the valid full path of a directory in the SFS Turbo file system.
           The `path` starts with a slash(/). e.g. **/test**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str share_id: Specifies the ID of the SFS Turbo file system.
    """
    __args__ = dict()
    __args__['path'] = path
    __args__['region'] = region
    __args__['shareId'] = share_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Sfs/getTurboDirUsage:getTurboDirUsage', __args__, opts=opts, typ=GetTurboDirUsageResult).value

    return AwaitableGetTurboDirUsageResult(
        dir_usages=pulumi.get(__ret__, 'dir_usages'),
        id=pulumi.get(__ret__, 'id'),
        path=pulumi.get(__ret__, 'path'),
        region=pulumi.get(__ret__, 'region'),
        share_id=pulumi.get(__ret__, 'share_id'))
def get_turbo_dir_usage_output(path: Optional[pulumi.Input[_builtins.str]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               share_id: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTurboDirUsageResult]:
    """
    Use this data source to get the usage of a directory.

    > 1. This datasource is only available for the following SFS Turbo file system types:
    >      **Standard**, **Standard-Enhanced**, **Performance**,**Performance-Enhanced**.
    >    <br/>2. The obtained data may not be the latest as there is a `5` minutes delay between the frontend and background.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    share_id = config.require_object("shareId")
    path = config.require_object("path")
    test = huaweicloud.Sfs.get_turbo_dir_usage(share_id=share_id,
        path=path)
    ```


    :param _builtins.str path: Specifies the valid full path of a directory in the SFS Turbo file system.
           The `path` starts with a slash(/). e.g. **/test**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str share_id: Specifies the ID of the SFS Turbo file system.
    """
    __args__ = dict()
    __args__['path'] = path
    __args__['region'] = region
    __args__['shareId'] = share_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Sfs/getTurboDirUsage:getTurboDirUsage', __args__, opts=opts, typ=GetTurboDirUsageResult)
    return __ret__.apply(lambda __response__: GetTurboDirUsageResult(
        dir_usages=pulumi.get(__response__, 'dir_usages'),
        id=pulumi.get(__response__, 'id'),
        path=pulumi.get(__response__, 'path'),
        region=pulumi.get(__response__, 'region'),
        share_id=pulumi.get(__response__, 'share_id')))
