# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTurbosByTagsResult',
    'AwaitableGetTurbosByTagsResult',
    'get_turbos_by_tags',
    'get_turbos_by_tags_output',
]

@pulumi.output_type
class GetTurbosByTagsResult:
    """
    A collection of values returned by getTurbosByTags.
    """
    def __init__(__self__, action=None, id=None, matches=None, region=None, resources=None, tags=None, total_count=None, without_any_tag=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if without_any_tag and not isinstance(without_any_tag, bool):
            raise TypeError("Expected argument 'without_any_tag' to be a bool")
        pulumi.set(__self__, "without_any_tag", without_any_tag)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetTurbosByTagsMatchResult']]:
        return pulumi.get(self, "matches")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetTurbosByTagsResourceResult']:
        """
        The list of the SFS Turbo file systems.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetTurbosByTagsTagResult']]:
        """
        The tags list of the SFS Turbo file systems.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.int:
        """
        The total count of the SFS Turbo file systems.
        """
        return pulumi.get(self, "total_count")

    @_builtins.property
    @pulumi.getter(name="withoutAnyTag")
    def without_any_tag(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "without_any_tag")


class AwaitableGetTurbosByTagsResult(GetTurbosByTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTurbosByTagsResult(
            action=self.action,
            id=self.id,
            matches=self.matches,
            region=self.region,
            resources=self.resources,
            tags=self.tags,
            total_count=self.total_count,
            without_any_tag=self.without_any_tag)


def get_turbos_by_tags(action: Optional[_builtins.str] = None,
                       matches: Optional[Sequence[Union['GetTurbosByTagsMatchArgs', 'GetTurbosByTagsMatchArgsDict']]] = None,
                       region: Optional[_builtins.str] = None,
                       tags: Optional[Sequence[Union['GetTurbosByTagsTagArgs', 'GetTurbosByTagsTagArgsDict']]] = None,
                       without_any_tag: Optional[_builtins.bool] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTurbosByTagsResult:
    """
    Use this data source to get list of SFS Turbo file systems by tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Sfs.get_turbos_by_tags(action="filter")
    ```


    :param _builtins.str action: Specifies the operation type of listing fily systems by tags.
           The value can be **filter** or **count**.
    :param Sequence[Union['GetTurbosByTagsMatchArgs', 'GetTurbosByTagsMatchArgsDict']] matches: Specifies the matches condition to filter the resources.
           The matches structure is documented below.
           
           > Currently, the `matches` size is `1`.
           
           <a name="turbos_tags"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetTurbosByTagsTagArgs', 'GetTurbosByTagsTagArgsDict']] tags: Specifies the tags to filter the resources. The `tags` can contain a maximum of `20` keys.
           Each tag key can have a maximum of `20` tag values. The tag value corresponding to each tag key can be an empty array
           but the structure cannot be missing. Each tag key must be unique, and tag values of the same tag must be unique.
           The response returns resources containing all tags in this list. Keys in this list are in the AND relationship and
           values in each key-value structure are in the OR relationship. If no `tags` is specified, all data is returned.
           The tags structure is documented below.
    :param _builtins.bool without_any_tag: Specifies the resources to be queried contain no tags.
           If this parameter is set to **true**, all resources without specified tags are queried. In this case, the tags field
           is ignored. If this parameter is set to **false** or not specified, it does not take effect, meaning that all
           resources are returned or resources are filtered by `tags` or `matches`.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Sfs/getTurbosByTags:getTurbosByTags', __args__, opts=opts, typ=GetTurbosByTagsResult).value

    return AwaitableGetTurbosByTagsResult(
        action=pulumi.get(__ret__, 'action'),
        id=pulumi.get(__ret__, 'id'),
        matches=pulumi.get(__ret__, 'matches'),
        region=pulumi.get(__ret__, 'region'),
        resources=pulumi.get(__ret__, 'resources'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        without_any_tag=pulumi.get(__ret__, 'without_any_tag'))
def get_turbos_by_tags_output(action: Optional[pulumi.Input[_builtins.str]] = None,
                              matches: Optional[pulumi.Input[Optional[Sequence[Union['GetTurbosByTagsMatchArgs', 'GetTurbosByTagsMatchArgsDict']]]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              tags: Optional[pulumi.Input[Optional[Sequence[Union['GetTurbosByTagsTagArgs', 'GetTurbosByTagsTagArgsDict']]]]] = None,
                              without_any_tag: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTurbosByTagsResult]:
    """
    Use this data source to get list of SFS Turbo file systems by tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Sfs.get_turbos_by_tags(action="filter")
    ```


    :param _builtins.str action: Specifies the operation type of listing fily systems by tags.
           The value can be **filter** or **count**.
    :param Sequence[Union['GetTurbosByTagsMatchArgs', 'GetTurbosByTagsMatchArgsDict']] matches: Specifies the matches condition to filter the resources.
           The matches structure is documented below.
           
           > Currently, the `matches` size is `1`.
           
           <a name="turbos_tags"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetTurbosByTagsTagArgs', 'GetTurbosByTagsTagArgsDict']] tags: Specifies the tags to filter the resources. The `tags` can contain a maximum of `20` keys.
           Each tag key can have a maximum of `20` tag values. The tag value corresponding to each tag key can be an empty array
           but the structure cannot be missing. Each tag key must be unique, and tag values of the same tag must be unique.
           The response returns resources containing all tags in this list. Keys in this list are in the AND relationship and
           values in each key-value structure are in the OR relationship. If no `tags` is specified, all data is returned.
           The tags structure is documented below.
    :param _builtins.bool without_any_tag: Specifies the resources to be queried contain no tags.
           If this parameter is set to **true**, all resources without specified tags are queried. In this case, the tags field
           is ignored. If this parameter is set to **false** or not specified, it does not take effect, meaning that all
           resources are returned or resources are filtered by `tags` or `matches`.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['matches'] = matches
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Sfs/getTurbosByTags:getTurbosByTags', __args__, opts=opts, typ=GetTurbosByTagsResult)
    return __ret__.apply(lambda __response__: GetTurbosByTagsResult(
        action=pulumi.get(__response__, 'action'),
        id=pulumi.get(__response__, 'id'),
        matches=pulumi.get(__response__, 'matches'),
        region=pulumi.get(__response__, 'region'),
        resources=pulumi.get(__response__, 'resources'),
        tags=pulumi.get(__response__, 'tags'),
        total_count=pulumi.get(__response__, 'total_count'),
        without_any_tag=pulumi.get(__response__, 'without_any_tag')))
