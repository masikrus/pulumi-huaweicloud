# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['TurboDataTaskArgs', 'TurboDataTask']

@pulumi.input_type
class TurboDataTaskArgs:
    def __init__(__self__, *,
                 dest_target: pulumi.Input[_builtins.str],
                 share_id: pulumi.Input[_builtins.str],
                 src_target: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 dest_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 src_prefix: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TurboDataTask resource.
        :param pulumi.Input[_builtins.str] dest_target: Specifies target end information of the data task.
               Changing this creates a new resource.
               Currently, the value only support keep the same as `src_target`.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the data task
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] src_target: Specifies the linkage directory name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the data task.
               Changing this creates a new resource.
               The valid values are as following:
               + **import**: Additional metadata import. This import method will import the metadata (name, size, and latest update
               time) of the OBS object and the additional metadata (such as uid, gid and mode) exported from SFS Turbo.
               + **import_metadata**: Quick import. In this mode, only the metadata (name, size, and latest update time) of the OBS
               object will be imported, other additional metadata (such as uid, gid and mode) is not imported, SFS Turbo will
               generate the default additional metadata (uid: `0`, gid: `0`, directory permission: `755`, file permission: `644`).
               + **preload**: Data preheat. Both metadata and data content will be imported. Metadata is imported in quick mode,
               other additional metadata (such as uid, gid and mode) is not imported.
               + **export**: Data export. This method will export the files which created in the linkage directory or which have
               been modified after imported from OBS to the OBS bucket.
        :param pulumi.Input[_builtins.str] dest_prefix: Specifies destination path prefix of the data task.
               Changing this creates a new resource.
               Currently, the value only support keep the same as `src_prefix`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] src_prefix: Specifies source path prefix of the data task.
               Changing this creates a new resource.
               + For an import task, do not include the OBS bucket name.
               + For an export task, do not include the name of the linkage directory.
               + For a preload task, the source path prefix must be a directory or specific object ended with a slash (/).
               + If not specified, all objects in the bound OBS bucket will be imported when importing, all files in the linkage
               directory will be exported when exporting.
        """
        pulumi.set(__self__, "dest_target", dest_target)
        pulumi.set(__self__, "share_id", share_id)
        pulumi.set(__self__, "src_target", src_target)
        pulumi.set(__self__, "type", type)
        if dest_prefix is not None:
            pulumi.set(__self__, "dest_prefix", dest_prefix)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if src_prefix is not None:
            pulumi.set(__self__, "src_prefix", src_prefix)

    @_builtins.property
    @pulumi.getter(name="destTarget")
    def dest_target(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies target end information of the data task.
        Changing this creates a new resource.
        Currently, the value only support keep the same as `src_target`.
        """
        return pulumi.get(self, "dest_target")

    @dest_target.setter
    def dest_target(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dest_target", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the SFS Turbo file system to which the data task
        belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter(name="srcTarget")
    def src_target(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the linkage directory name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "src_target")

    @src_target.setter
    def src_target(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "src_target", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the data task.
        Changing this creates a new resource.
        The valid values are as following:
        + **import**: Additional metadata import. This import method will import the metadata (name, size, and latest update
        time) of the OBS object and the additional metadata (such as uid, gid and mode) exported from SFS Turbo.
        + **import_metadata**: Quick import. In this mode, only the metadata (name, size, and latest update time) of the OBS
        object will be imported, other additional metadata (such as uid, gid and mode) is not imported, SFS Turbo will
        generate the default additional metadata (uid: `0`, gid: `0`, directory permission: `755`, file permission: `644`).
        + **preload**: Data preheat. Both metadata and data content will be imported. Metadata is imported in quick mode,
        other additional metadata (such as uid, gid and mode) is not imported.
        + **export**: Data export. This method will export the files which created in the linkage directory or which have
        been modified after imported from OBS to the OBS bucket.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="destPrefix")
    def dest_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies destination path prefix of the data task.
        Changing this creates a new resource.
        Currently, the value only support keep the same as `src_prefix`.
        """
        return pulumi.get(self, "dest_prefix")

    @dest_prefix.setter
    def dest_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dest_prefix", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="srcPrefix")
    def src_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies source path prefix of the data task.
        Changing this creates a new resource.
        + For an import task, do not include the OBS bucket name.
        + For an export task, do not include the name of the linkage directory.
        + For a preload task, the source path prefix must be a directory or specific object ended with a slash (/).
        + If not specified, all objects in the bound OBS bucket will be imported when importing, all files in the linkage
        directory will be exported when exporting.
        """
        return pulumi.get(self, "src_prefix")

    @src_prefix.setter
    def src_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "src_prefix", value)


@pulumi.input_type
class _TurboDataTaskState:
    def __init__(__self__, *,
                 dest_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 dest_target: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 src_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 src_target: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TurboDataTask resources.
        :param pulumi.Input[_builtins.str] dest_prefix: Specifies destination path prefix of the data task.
               Changing this creates a new resource.
               Currently, the value only support keep the same as `src_prefix`.
        :param pulumi.Input[_builtins.str] dest_target: Specifies target end information of the data task.
               Changing this creates a new resource.
               Currently, the value only support keep the same as `src_target`.
        :param pulumi.Input[_builtins.str] end_time: The end time of the data task, in RFC3339 format.
        :param pulumi.Input[_builtins.str] message: The execution result information of the data task.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the data task
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] src_prefix: Specifies source path prefix of the data task.
               Changing this creates a new resource.
               + For an import task, do not include the OBS bucket name.
               + For an export task, do not include the name of the linkage directory.
               + For a preload task, the source path prefix must be a directory or specific object ended with a slash (/).
               + If not specified, all objects in the bound OBS bucket will be imported when importing, all files in the linkage
               directory will be exported when exporting.
        :param pulumi.Input[_builtins.str] src_target: Specifies the linkage directory name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] start_time: The start time of the data task, in RFC3339 format.
        :param pulumi.Input[_builtins.str] status: The status of the data task. The valid values are as following:
               + **SUCCESS**
               + **FAIL**
        :param pulumi.Input[_builtins.str] type: Specifies the type of the data task.
               Changing this creates a new resource.
               The valid values are as following:
               + **import**: Additional metadata import. This import method will import the metadata (name, size, and latest update
               time) of the OBS object and the additional metadata (such as uid, gid and mode) exported from SFS Turbo.
               + **import_metadata**: Quick import. In this mode, only the metadata (name, size, and latest update time) of the OBS
               object will be imported, other additional metadata (such as uid, gid and mode) is not imported, SFS Turbo will
               generate the default additional metadata (uid: `0`, gid: `0`, directory permission: `755`, file permission: `644`).
               + **preload**: Data preheat. Both metadata and data content will be imported. Metadata is imported in quick mode,
               other additional metadata (such as uid, gid and mode) is not imported.
               + **export**: Data export. This method will export the files which created in the linkage directory or which have
               been modified after imported from OBS to the OBS bucket.
        """
        if dest_prefix is not None:
            pulumi.set(__self__, "dest_prefix", dest_prefix)
        if dest_target is not None:
            pulumi.set(__self__, "dest_target", dest_target)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if share_id is not None:
            pulumi.set(__self__, "share_id", share_id)
        if src_prefix is not None:
            pulumi.set(__self__, "src_prefix", src_prefix)
        if src_target is not None:
            pulumi.set(__self__, "src_target", src_target)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="destPrefix")
    def dest_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies destination path prefix of the data task.
        Changing this creates a new resource.
        Currently, the value only support keep the same as `src_prefix`.
        """
        return pulumi.get(self, "dest_prefix")

    @dest_prefix.setter
    def dest_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dest_prefix", value)

    @_builtins.property
    @pulumi.getter(name="destTarget")
    def dest_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies target end information of the data task.
        Changing this creates a new resource.
        Currently, the value only support keep the same as `src_target`.
        """
        return pulumi.get(self, "dest_target")

    @dest_target.setter
    def dest_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dest_target", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The end time of the data task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The execution result information of the data task.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the SFS Turbo file system to which the data task
        belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter(name="srcPrefix")
    def src_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies source path prefix of the data task.
        Changing this creates a new resource.
        + For an import task, do not include the OBS bucket name.
        + For an export task, do not include the name of the linkage directory.
        + For a preload task, the source path prefix must be a directory or specific object ended with a slash (/).
        + If not specified, all objects in the bound OBS bucket will be imported when importing, all files in the linkage
        directory will be exported when exporting.
        """
        return pulumi.get(self, "src_prefix")

    @src_prefix.setter
    def src_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "src_prefix", value)

    @_builtins.property
    @pulumi.getter(name="srcTarget")
    def src_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the linkage directory name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "src_target")

    @src_target.setter
    def src_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "src_target", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The start time of the data task, in RFC3339 format.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the data task. The valid values are as following:
        + **SUCCESS**
        + **FAIL**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the data task.
        Changing this creates a new resource.
        The valid values are as following:
        + **import**: Additional metadata import. This import method will import the metadata (name, size, and latest update
        time) of the OBS object and the additional metadata (such as uid, gid and mode) exported from SFS Turbo.
        + **import_metadata**: Quick import. In this mode, only the metadata (name, size, and latest update time) of the OBS
        object will be imported, other additional metadata (such as uid, gid and mode) is not imported, SFS Turbo will
        generate the default additional metadata (uid: `0`, gid: `0`, directory permission: `755`, file permission: `644`).
        + **preload**: Data preheat. Both metadata and data content will be imported. Metadata is imported in quick mode,
        other additional metadata (such as uid, gid and mode) is not imported.
        + **export**: Data export. This method will export the files which created in the linkage directory or which have
        been modified after imported from OBS to the OBS bucket.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Sfs/turboDataTask:TurboDataTask")
class TurboDataTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dest_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 dest_target: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 src_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 src_target: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a data import or export task resource under the SFS Turbo within HuaweiCloud.

        > Please pay attention to the results of task execution through `status`.

        > This resource is only available for the following SFS Turbo file system types:
          **20MB/s/TiB**, **40MB/s/TiB**, **125MB/s/TiB**,**250MB/s/TiB**, **500MB/s/TiB**, **1,000MB/s/TiB**, **HPC缓存型**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        share_id = config.require_object("shareId")
        type = config.require_object("type")
        src_target = config.require_object("srcTarget")
        test = huaweicloud.sfs.TurboDataTask("test",
            share_id=share_id,
            type=type,
            src_target=src_target,
            dest_target=src_target)
        ```

        ## Import

        The SFS Turbo data task can be imported using the related `share_id` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Sfs/turboDataTask:TurboDataTask test <share_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] dest_prefix: Specifies destination path prefix of the data task.
               Changing this creates a new resource.
               Currently, the value only support keep the same as `src_prefix`.
        :param pulumi.Input[_builtins.str] dest_target: Specifies target end information of the data task.
               Changing this creates a new resource.
               Currently, the value only support keep the same as `src_target`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the data task
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] src_prefix: Specifies source path prefix of the data task.
               Changing this creates a new resource.
               + For an import task, do not include the OBS bucket name.
               + For an export task, do not include the name of the linkage directory.
               + For a preload task, the source path prefix must be a directory or specific object ended with a slash (/).
               + If not specified, all objects in the bound OBS bucket will be imported when importing, all files in the linkage
               directory will be exported when exporting.
        :param pulumi.Input[_builtins.str] src_target: Specifies the linkage directory name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the data task.
               Changing this creates a new resource.
               The valid values are as following:
               + **import**: Additional metadata import. This import method will import the metadata (name, size, and latest update
               time) of the OBS object and the additional metadata (such as uid, gid and mode) exported from SFS Turbo.
               + **import_metadata**: Quick import. In this mode, only the metadata (name, size, and latest update time) of the OBS
               object will be imported, other additional metadata (such as uid, gid and mode) is not imported, SFS Turbo will
               generate the default additional metadata (uid: `0`, gid: `0`, directory permission: `755`, file permission: `644`).
               + **preload**: Data preheat. Both metadata and data content will be imported. Metadata is imported in quick mode,
               other additional metadata (such as uid, gid and mode) is not imported.
               + **export**: Data export. This method will export the files which created in the linkage directory or which have
               been modified after imported from OBS to the OBS bucket.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TurboDataTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a data import or export task resource under the SFS Turbo within HuaweiCloud.

        > Please pay attention to the results of task execution through `status`.

        > This resource is only available for the following SFS Turbo file system types:
          **20MB/s/TiB**, **40MB/s/TiB**, **125MB/s/TiB**,**250MB/s/TiB**, **500MB/s/TiB**, **1,000MB/s/TiB**, **HPC缓存型**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        share_id = config.require_object("shareId")
        type = config.require_object("type")
        src_target = config.require_object("srcTarget")
        test = huaweicloud.sfs.TurboDataTask("test",
            share_id=share_id,
            type=type,
            src_target=src_target,
            dest_target=src_target)
        ```

        ## Import

        The SFS Turbo data task can be imported using the related `share_id` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Sfs/turboDataTask:TurboDataTask test <share_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param TurboDataTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TurboDataTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dest_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 dest_target: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 src_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 src_target: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TurboDataTaskArgs.__new__(TurboDataTaskArgs)

            __props__.__dict__["dest_prefix"] = dest_prefix
            if dest_target is None and not opts.urn:
                raise TypeError("Missing required property 'dest_target'")
            __props__.__dict__["dest_target"] = dest_target
            __props__.__dict__["region"] = region
            if share_id is None and not opts.urn:
                raise TypeError("Missing required property 'share_id'")
            __props__.__dict__["share_id"] = share_id
            __props__.__dict__["src_prefix"] = src_prefix
            if src_target is None and not opts.urn:
                raise TypeError("Missing required property 'src_target'")
            __props__.__dict__["src_target"] = src_target
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["end_time"] = None
            __props__.__dict__["message"] = None
            __props__.__dict__["start_time"] = None
            __props__.__dict__["status"] = None
        super(TurboDataTask, __self__).__init__(
            'huaweicloud:Sfs/turboDataTask:TurboDataTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dest_prefix: Optional[pulumi.Input[_builtins.str]] = None,
            dest_target: Optional[pulumi.Input[_builtins.str]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            message: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            share_id: Optional[pulumi.Input[_builtins.str]] = None,
            src_prefix: Optional[pulumi.Input[_builtins.str]] = None,
            src_target: Optional[pulumi.Input[_builtins.str]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'TurboDataTask':
        """
        Get an existing TurboDataTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] dest_prefix: Specifies destination path prefix of the data task.
               Changing this creates a new resource.
               Currently, the value only support keep the same as `src_prefix`.
        :param pulumi.Input[_builtins.str] dest_target: Specifies target end information of the data task.
               Changing this creates a new resource.
               Currently, the value only support keep the same as `src_target`.
        :param pulumi.Input[_builtins.str] end_time: The end time of the data task, in RFC3339 format.
        :param pulumi.Input[_builtins.str] message: The execution result information of the data task.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the data task
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] src_prefix: Specifies source path prefix of the data task.
               Changing this creates a new resource.
               + For an import task, do not include the OBS bucket name.
               + For an export task, do not include the name of the linkage directory.
               + For a preload task, the source path prefix must be a directory or specific object ended with a slash (/).
               + If not specified, all objects in the bound OBS bucket will be imported when importing, all files in the linkage
               directory will be exported when exporting.
        :param pulumi.Input[_builtins.str] src_target: Specifies the linkage directory name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] start_time: The start time of the data task, in RFC3339 format.
        :param pulumi.Input[_builtins.str] status: The status of the data task. The valid values are as following:
               + **SUCCESS**
               + **FAIL**
        :param pulumi.Input[_builtins.str] type: Specifies the type of the data task.
               Changing this creates a new resource.
               The valid values are as following:
               + **import**: Additional metadata import. This import method will import the metadata (name, size, and latest update
               time) of the OBS object and the additional metadata (such as uid, gid and mode) exported from SFS Turbo.
               + **import_metadata**: Quick import. In this mode, only the metadata (name, size, and latest update time) of the OBS
               object will be imported, other additional metadata (such as uid, gid and mode) is not imported, SFS Turbo will
               generate the default additional metadata (uid: `0`, gid: `0`, directory permission: `755`, file permission: `644`).
               + **preload**: Data preheat. Both metadata and data content will be imported. Metadata is imported in quick mode,
               other additional metadata (such as uid, gid and mode) is not imported.
               + **export**: Data export. This method will export the files which created in the linkage directory or which have
               been modified after imported from OBS to the OBS bucket.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TurboDataTaskState.__new__(_TurboDataTaskState)

        __props__.__dict__["dest_prefix"] = dest_prefix
        __props__.__dict__["dest_target"] = dest_target
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["message"] = message
        __props__.__dict__["region"] = region
        __props__.__dict__["share_id"] = share_id
        __props__.__dict__["src_prefix"] = src_prefix
        __props__.__dict__["src_target"] = src_target
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return TurboDataTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="destPrefix")
    def dest_prefix(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies destination path prefix of the data task.
        Changing this creates a new resource.
        Currently, the value only support keep the same as `src_prefix`.
        """
        return pulumi.get(self, "dest_prefix")

    @_builtins.property
    @pulumi.getter(name="destTarget")
    def dest_target(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies target end information of the data task.
        Changing this creates a new resource.
        Currently, the value only support keep the same as `src_target`.
        """
        return pulumi.get(self, "dest_target")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        The end time of the data task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> pulumi.Output[_builtins.str]:
        """
        The execution result information of the data task.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the SFS Turbo file system to which the data task
        belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "share_id")

    @_builtins.property
    @pulumi.getter(name="srcPrefix")
    def src_prefix(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies source path prefix of the data task.
        Changing this creates a new resource.
        + For an import task, do not include the OBS bucket name.
        + For an export task, do not include the name of the linkage directory.
        + For a preload task, the source path prefix must be a directory or specific object ended with a slash (/).
        + If not specified, all objects in the bound OBS bucket will be imported when importing, all files in the linkage
        directory will be exported when exporting.
        """
        return pulumi.get(self, "src_prefix")

    @_builtins.property
    @pulumi.getter(name="srcTarget")
    def src_target(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the linkage directory name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "src_target")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[_builtins.str]:
        """
        The start time of the data task, in RFC3339 format.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the data task. The valid values are as following:
        + **SUCCESS**
        + **FAIL**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the data task.
        Changing this creates a new resource.
        The valid values are as following:
        + **import**: Additional metadata import. This import method will import the metadata (name, size, and latest update
        time) of the OBS object and the additional metadata (such as uid, gid and mode) exported from SFS Turbo.
        + **import_metadata**: Quick import. In this mode, only the metadata (name, size, and latest update time) of the OBS
        object will be imported, other additional metadata (such as uid, gid and mode) is not imported, SFS Turbo will
        generate the default additional metadata (uid: `0`, gid: `0`, directory permission: `755`, file permission: `644`).
        + **preload**: Data preheat. Both metadata and data content will be imported. Metadata is imported in quick mode,
        other additional metadata (such as uid, gid and mode) is not imported.
        + **export**: Data export. This method will export the files which created in the linkage directory or which have
        been modified after imported from OBS to the OBS bucket.
        """
        return pulumi.get(self, "type")

