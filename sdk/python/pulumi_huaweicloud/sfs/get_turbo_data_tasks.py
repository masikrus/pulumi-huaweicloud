# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTurboDataTasksResult',
    'AwaitableGetTurboDataTasksResult',
    'get_turbo_data_tasks',
    'get_turbo_data_tasks_output',
]

@pulumi.output_type
class GetTurboDataTasksResult:
    """
    A collection of values returned by getTurboDataTasks.
    """
    def __init__(__self__, id=None, region=None, share_id=None, status=None, tasks=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if share_id and not isinstance(share_id, str):
            raise TypeError("Expected argument 'share_id' to be a str")
        pulumi.set(__self__, "share_id", share_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> _builtins.str:
        return pulumi.get(self, "share_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the data task.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetTurboDataTasksTaskResult']:
        """
        The list of the data task.
        """
        return pulumi.get(self, "tasks")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the data task.
        """
        return pulumi.get(self, "type")


class AwaitableGetTurboDataTasksResult(GetTurboDataTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTurboDataTasksResult(
            id=self.id,
            region=self.region,
            share_id=self.share_id,
            status=self.status,
            tasks=self.tasks,
            type=self.type)


def get_turbo_data_tasks(region: Optional[_builtins.str] = None,
                         share_id: Optional[_builtins.str] = None,
                         status: Optional[_builtins.str] = None,
                         type: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTurboDataTasksResult:
    """
    Use this datasource to get list of the data import or export tasks.

    > This datasource is only available for the following SFS Turbo file system types:
      **20MB/s/TiB**, **40MB/s/TiB**, **125MB/s/TiB**,**250MB/s/TiB**, **500MB/s/TiB**, **1,000MB/s/TiB**, **HPC缓存型**.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    share_id = config.require_object("shareId")
    test = huaweicloud.Sfs.get_turbo_data_tasks(share_id=share_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str share_id: Specifies the ID of the SFS Turbo file system to which the data tasks belong.
    :param _builtins.str status: Specifies the status of the data task.
           The value can be **SUCCESS** or **FAIL**.
    :param _builtins.str type: Specifies the type of the data task.
           The valid values are as following:
           + **import**: Additional metadata import.
           + **import_metadata**: Quick import.
           + **preload**: Data preheat.
           + **export**: Data export.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['shareId'] = share_id
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Sfs/getTurboDataTasks:getTurboDataTasks', __args__, opts=opts, typ=GetTurboDataTasksResult).value

    return AwaitableGetTurboDataTasksResult(
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        share_id=pulumi.get(__ret__, 'share_id'),
        status=pulumi.get(__ret__, 'status'),
        tasks=pulumi.get(__ret__, 'tasks'),
        type=pulumi.get(__ret__, 'type'))
def get_turbo_data_tasks_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                share_id: Optional[pulumi.Input[_builtins.str]] = None,
                                status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTurboDataTasksResult]:
    """
    Use this datasource to get list of the data import or export tasks.

    > This datasource is only available for the following SFS Turbo file system types:
      **20MB/s/TiB**, **40MB/s/TiB**, **125MB/s/TiB**,**250MB/s/TiB**, **500MB/s/TiB**, **1,000MB/s/TiB**, **HPC缓存型**.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    share_id = config.require_object("shareId")
    test = huaweicloud.Sfs.get_turbo_data_tasks(share_id=share_id)
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str share_id: Specifies the ID of the SFS Turbo file system to which the data tasks belong.
    :param _builtins.str status: Specifies the status of the data task.
           The value can be **SUCCESS** or **FAIL**.
    :param _builtins.str type: Specifies the type of the data task.
           The valid values are as following:
           + **import**: Additional metadata import.
           + **import_metadata**: Quick import.
           + **preload**: Data preheat.
           + **export**: Data export.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['shareId'] = share_id
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Sfs/getTurboDataTasks:getTurboDataTasks', __args__, opts=opts, typ=GetTurboDataTasksResult)
    return __ret__.apply(lambda __response__: GetTurboDataTasksResult(
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        share_id=pulumi.get(__response__, 'share_id'),
        status=pulumi.get(__response__, 'status'),
        tasks=pulumi.get(__response__, 'tasks'),
        type=pulumi.get(__response__, 'type')))
