# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['TurboColdDataEvictionArgs', 'TurboColdDataEviction']

@pulumi.input_type
class TurboColdDataEvictionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 gc_time: pulumi.Input[_builtins.int],
                 share_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TurboColdDataEviction resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               Currently, only **config_gc_time** is supported.
        :param pulumi.Input[_builtins.int] gc_time: Specifies the cold data eviction duration, in hour.
               The value ranges from `1` to `100,000,000`.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "gc_time", gc_time)
        pulumi.set(__self__, "share_id", share_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operation type.
        Currently, only **config_gc_time** is supported.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="gcTime")
    def gc_time(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the cold data eviction duration, in hour.
        The value ranges from `1` to `100,000,000`.
        """
        return pulumi.get(self, "gc_time")

    @gc_time.setter
    def gc_time(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "gc_time", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the SFS Turbo.
        """
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _TurboColdDataEvictionState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 gc_time: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TurboColdDataEviction resources.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               Currently, only **config_gc_time** is supported.
        :param pulumi.Input[_builtins.int] gc_time: Specifies the cold data eviction duration, in hour.
               The value ranges from `1` to `100,000,000`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if gc_time is not None:
            pulumi.set(__self__, "gc_time", gc_time)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if share_id is not None:
            pulumi.set(__self__, "share_id", share_id)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation type.
        Currently, only **config_gc_time** is supported.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="gcTime")
    def gc_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the cold data eviction duration, in hour.
        The value ranges from `1` to `100,000,000`.
        """
        return pulumi.get(self, "gc_time")

    @gc_time.setter
    def gc_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "gc_time", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the SFS Turbo.
        """
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share_id", value)


@pulumi.type_token("huaweicloud:Sfs/turboColdDataEviction:TurboColdDataEviction")
class TurboColdDataEviction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 gc_time: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to update the cold data eviction duration of the SFS turbo within HuaweiCloud.

        > 1. The current resource is a one-time resource, and destroying this resource will not change the current status.
        >    <br/>2. Before use this resource, please ensure the SFS turbo already bound storage backends.
        >    <br/>3. This resource is only available for the following SFS Turbo types:
        >      **20MB/s/TiB**, **40MB/s/TiB**, **125MB/s/TiB**,**250MB/s/TiB**, **500MB/s/TiB**, **1,000MB/s/TiB**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        share_id = config.require_object("shareId")
        action = config.require_object("action")
        gc_time = config.require_object("gcTime")
        test = huaweicloud.sfs.TurboColdDataEviction("test",
            share_id=share_id,
            action=action,
            gc_time=gc_time)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               Currently, only **config_gc_time** is supported.
        :param pulumi.Input[_builtins.int] gc_time: Specifies the cold data eviction duration, in hour.
               The value ranges from `1` to `100,000,000`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TurboColdDataEvictionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to update the cold data eviction duration of the SFS turbo within HuaweiCloud.

        > 1. The current resource is a one-time resource, and destroying this resource will not change the current status.
        >    <br/>2. Before use this resource, please ensure the SFS turbo already bound storage backends.
        >    <br/>3. This resource is only available for the following SFS Turbo types:
        >      **20MB/s/TiB**, **40MB/s/TiB**, **125MB/s/TiB**,**250MB/s/TiB**, **500MB/s/TiB**, **1,000MB/s/TiB**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        share_id = config.require_object("shareId")
        action = config.require_object("action")
        gc_time = config.require_object("gcTime")
        test = huaweicloud.sfs.TurboColdDataEviction("test",
            share_id=share_id,
            action=action,
            gc_time=gc_time)
        ```

        :param str resource_name: The name of the resource.
        :param TurboColdDataEvictionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TurboColdDataEvictionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 gc_time: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TurboColdDataEvictionArgs.__new__(TurboColdDataEvictionArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["enable_force_new"] = enable_force_new
            if gc_time is None and not opts.urn:
                raise TypeError("Missing required property 'gc_time'")
            __props__.__dict__["gc_time"] = gc_time
            __props__.__dict__["region"] = region
            if share_id is None and not opts.urn:
                raise TypeError("Missing required property 'share_id'")
            __props__.__dict__["share_id"] = share_id
        super(TurboColdDataEviction, __self__).__init__(
            'huaweicloud:Sfs/turboColdDataEviction:TurboColdDataEviction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            gc_time: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            share_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'TurboColdDataEviction':
        """
        Get an existing TurboColdDataEviction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation type.
               Currently, only **config_gc_time** is supported.
        :param pulumi.Input[_builtins.int] gc_time: Specifies the cold data eviction duration, in hour.
               The value ranges from `1` to `100,000,000`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TurboColdDataEvictionState.__new__(_TurboColdDataEvictionState)

        __props__.__dict__["action"] = action
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["gc_time"] = gc_time
        __props__.__dict__["region"] = region
        __props__.__dict__["share_id"] = share_id
        return TurboColdDataEviction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operation type.
        Currently, only **config_gc_time** is supported.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="gcTime")
    def gc_time(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the cold data eviction duration, in hour.
        The value ranges from `1` to `100,000,000`.
        """
        return pulumi.get(self, "gc_time")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the SFS Turbo.
        """
        return pulumi.get(self, "share_id")

