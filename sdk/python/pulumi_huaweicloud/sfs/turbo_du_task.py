# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TurboDuTaskArgs', 'TurboDuTask']

@pulumi.input_type
class TurboDuTaskArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 share_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TurboDuTask resource.
        :param pulumi.Input[_builtins.str] path: Specifies the full path to a legal directory in the file system.
               The length of a single level directory is not allowed to exceed `255`, and the length of the full path is not allowed
               to exceed `4,096`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the DU task belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "share_id", share_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the full path to a legal directory in the file system.
        The length of a single level directory is not allowed to exceed `255`, and the length of the full path is not allowed
        to exceed `4,096`.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the SFS Turbo file system to which the DU task belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _TurboDuTaskState:
    def __init__(__self__, *,
                 begin_time: Optional[pulumi.Input[_builtins.str]] = None,
                 dir_usages: Optional[pulumi.Input[Sequence[pulumi.Input['TurboDuTaskDirUsageArgs']]]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TurboDuTask resources.
        :param pulumi.Input[_builtins.str] begin_time: The start time of the DU task, in RFC3339 format.
        :param pulumi.Input[Sequence[pulumi.Input['TurboDuTaskDirUsageArgs']]] dir_usages: The direcrory resource usage (including subdirectories).
               The dir_usage structure is documented below.
        :param pulumi.Input[_builtins.str] end_time: The end time of the DU task, in RFC3339 format.
        :param pulumi.Input[_builtins.str] path: Specifies the full path to a legal directory in the file system.
               The length of a single level directory is not allowed to exceed `255`, and the length of the full path is not allowed
               to exceed `4,096`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the DU task belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the DU task. The valid values are as following:
               + **SUCCESS**
               + **DOING**
               + **FAIL**
        """
        if begin_time is not None:
            pulumi.set(__self__, "begin_time", begin_time)
        if dir_usages is not None:
            pulumi.set(__self__, "dir_usages", dir_usages)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if share_id is not None:
            pulumi.set(__self__, "share_id", share_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The start time of the DU task, in RFC3339 format.
        """
        return pulumi.get(self, "begin_time")

    @begin_time.setter
    def begin_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "begin_time", value)

    @_builtins.property
    @pulumi.getter(name="dirUsages")
    def dir_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TurboDuTaskDirUsageArgs']]]]:
        """
        The direcrory resource usage (including subdirectories).
        The dir_usage structure is documented below.
        """
        return pulumi.get(self, "dir_usages")

    @dir_usages.setter
    def dir_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TurboDuTaskDirUsageArgs']]]]):
        pulumi.set(self, "dir_usages", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The end time of the DU task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the full path to a legal directory in the file system.
        The length of a single level directory is not allowed to exceed `255`, and the length of the full path is not allowed
        to exceed `4,096`.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the SFS Turbo file system to which the DU task belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the DU task. The valid values are as following:
        + **SUCCESS**
        + **DOING**
        + **FAIL**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Sfs/turboDuTask:TurboDuTask")
class TurboDuTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DU task resource under the SFS Turbo within HuaweiCloud.

        > Only SFS Turbo File systems created after August 1, 2023 can use this resource. Creating new task is not supported
          when there are `10` or more executing tasks under the system. In order not to affect the performance of the file
          system, it is recommended that the number of tasks submitted simultaneously under one system should not exceed `4`.

        > This resource is only available for the following SFS Turbo file system types:
          **20MB/s/TiB**, **40MB/s/TiB**, **125MB/s/TiB**,**250MB/s/TiB**, **500MB/s/TiB**, **1,000MB/s/TiB**, **HPC缓存型**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        share_id = config.require_object("shareId")
        path = config.require_object("path")
        test = huaweicloud.sfs.TurboDuTask("test",
            share_id=share_id,
            path=path)
        ```

        ## Import

        The SFS Turbo DU task can be imported using the related `share_id` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Sfs/turboDuTask:TurboDuTask test <share_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] path: Specifies the full path to a legal directory in the file system.
               The length of a single level directory is not allowed to exceed `255`, and the length of the full path is not allowed
               to exceed `4,096`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the DU task belongs.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TurboDuTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DU task resource under the SFS Turbo within HuaweiCloud.

        > Only SFS Turbo File systems created after August 1, 2023 can use this resource. Creating new task is not supported
          when there are `10` or more executing tasks under the system. In order not to affect the performance of the file
          system, it is recommended that the number of tasks submitted simultaneously under one system should not exceed `4`.

        > This resource is only available for the following SFS Turbo file system types:
          **20MB/s/TiB**, **40MB/s/TiB**, **125MB/s/TiB**,**250MB/s/TiB**, **500MB/s/TiB**, **1,000MB/s/TiB**, **HPC缓存型**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        share_id = config.require_object("shareId")
        path = config.require_object("path")
        test = huaweicloud.sfs.TurboDuTask("test",
            share_id=share_id,
            path=path)
        ```

        ## Import

        The SFS Turbo DU task can be imported using the related `share_id` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Sfs/turboDuTask:TurboDuTask test <share_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param TurboDuTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TurboDuTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TurboDuTaskArgs.__new__(TurboDuTaskArgs)

            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            __props__.__dict__["region"] = region
            if share_id is None and not opts.urn:
                raise TypeError("Missing required property 'share_id'")
            __props__.__dict__["share_id"] = share_id
            __props__.__dict__["begin_time"] = None
            __props__.__dict__["dir_usages"] = None
            __props__.__dict__["end_time"] = None
            __props__.__dict__["status"] = None
        super(TurboDuTask, __self__).__init__(
            'huaweicloud:Sfs/turboDuTask:TurboDuTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            begin_time: Optional[pulumi.Input[_builtins.str]] = None,
            dir_usages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TurboDuTaskDirUsageArgs', 'TurboDuTaskDirUsageArgsDict']]]]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            share_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'TurboDuTask':
        """
        Get an existing TurboDuTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] begin_time: The start time of the DU task, in RFC3339 format.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TurboDuTaskDirUsageArgs', 'TurboDuTaskDirUsageArgsDict']]]] dir_usages: The direcrory resource usage (including subdirectories).
               The dir_usage structure is documented below.
        :param pulumi.Input[_builtins.str] end_time: The end time of the DU task, in RFC3339 format.
        :param pulumi.Input[_builtins.str] path: Specifies the full path to a legal directory in the file system.
               The length of a single level directory is not allowed to exceed `255`, and the length of the full path is not allowed
               to exceed `4,096`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the DU task belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the DU task. The valid values are as following:
               + **SUCCESS**
               + **DOING**
               + **FAIL**
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TurboDuTaskState.__new__(_TurboDuTaskState)

        __props__.__dict__["begin_time"] = begin_time
        __props__.__dict__["dir_usages"] = dir_usages
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["path"] = path
        __props__.__dict__["region"] = region
        __props__.__dict__["share_id"] = share_id
        __props__.__dict__["status"] = status
        return TurboDuTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> pulumi.Output[_builtins.str]:
        """
        The start time of the DU task, in RFC3339 format.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="dirUsages")
    def dir_usages(self) -> pulumi.Output[Sequence['outputs.TurboDuTaskDirUsage']]:
        """
        The direcrory resource usage (including subdirectories).
        The dir_usage structure is documented below.
        """
        return pulumi.get(self, "dir_usages")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        The end time of the DU task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the full path to a legal directory in the file system.
        The length of a single level directory is not allowed to exceed `255`, and the length of the full path is not allowed
        to exceed `4,096`.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the SFS Turbo file system to which the DU task belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "share_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the DU task. The valid values are as following:
        + **SUCCESS**
        + **DOING**
        + **FAIL**
        """
        return pulumi.get(self, "status")

