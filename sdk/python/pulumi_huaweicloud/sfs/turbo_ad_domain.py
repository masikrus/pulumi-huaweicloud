# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['TurboAdDomainArgs', 'TurboAdDomain']

@pulumi.input_type
class TurboAdDomainArgs:
    def __init__(__self__, *,
                 dns_servers: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 domain_name: pulumi.Input[_builtins.str],
                 password: pulumi.Input[_builtins.str],
                 service_account: pulumi.Input[_builtins.str],
                 share_id: pulumi.Input[_builtins.str],
                 system_name: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 overwrite_same_account: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TurboAdDomain resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_servers: Specifies the IP address of the DNS server. It is used to resolve the AD domain
               name.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name of the domain controller. It is specified when the
               domain server is created.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the service account.
        :param pulumi.Input[_builtins.str] service_account: Specifies the service account, which is specified when the domain
               server is created, **administrator** is used normally.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo.
        :param pulumi.Input[_builtins.str] system_name: Specifies the name of the file storage system in the AD domain.
        :param pulumi.Input[_builtins.str] organization_unit: Specifies the  group of domain objects, such as users, computers,
               and printers. If you add the file system to an organizational unit (OU), it will become a member of that OU.
               If this parameter is left blank, the file system will be added to the computers OU.
        :param pulumi.Input[_builtins.bool] overwrite_same_account: Whether overwrite the existing information in the domain controller.
               If the option is enabled and the domain controller already has the file system name you specified, the information
               you specified will be overwrited.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID.
        """
        pulumi.set(__self__, "dns_servers", dns_servers)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "share_id", share_id)
        pulumi.set(__self__, "system_name", system_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if organization_unit is not None:
            pulumi.set(__self__, "organization_unit", organization_unit)
        if overwrite_same_account is not None:
            pulumi.set(__self__, "overwrite_same_account", overwrite_same_account)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the IP address of the DNS server. It is used to resolve the AD domain
        name.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "dns_servers", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name of the domain controller. It is specified when the
        domain server is created.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the password of the service account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the service account, which is specified when the domain
        server is created, **administrator** is used normally.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_account", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the SFS Turbo.
        """
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter(name="systemName")
    def system_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the file storage system in the AD domain.
        """
        return pulumi.get(self, "system_name")

    @system_name.setter
    def system_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "system_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="organizationUnit")
    def organization_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the  group of domain objects, such as users, computers,
        and printers. If you add the file system to an organizational unit (OU), it will become a member of that OU.
        If this parameter is left blank, the file system will be added to the computers OU.
        """
        return pulumi.get(self, "organization_unit")

    @organization_unit.setter
    def organization_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_unit", value)

    @_builtins.property
    @pulumi.getter(name="overwriteSameAccount")
    def overwrite_same_account(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether overwrite the existing information in the domain controller.
        If the option is enabled and the domain controller already has the file system name you specified, the information
        you specified will be overwrited.
        """
        return pulumi.get(self, "overwrite_same_account")

    @overwrite_same_account.setter
    def overwrite_same_account(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "overwrite_same_account", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _TurboAdDomainState:
    def __init__(__self__, *,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 overwrite_same_account: Optional[pulumi.Input[_builtins.bool]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 system_name: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TurboAdDomain resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_servers: Specifies the IP address of the DNS server. It is used to resolve the AD domain
               name.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name of the domain controller. It is specified when the
               domain server is created.
        :param pulumi.Input[_builtins.str] organization_unit: Specifies the  group of domain objects, such as users, computers,
               and printers. If you add the file system to an organizational unit (OU), it will become a member of that OU.
               If this parameter is left blank, the file system will be added to the computers OU.
        :param pulumi.Input[_builtins.bool] overwrite_same_account: Whether overwrite the existing information in the domain controller.
               If the option is enabled and the domain controller already has the file system name you specified, the information
               you specified will be overwrited.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the service account.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] service_account: Specifies the service account, which is specified when the domain
               server is created, **administrator** is used normally.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo.
        :param pulumi.Input[_builtins.str] status: The current status of the AD domain. Possible values are: **JOINING**, **AVAILABLE**, **EXITING**
               and **FAILED**.
        :param pulumi.Input[_builtins.str] system_name: Specifies the name of the file storage system in the AD domain.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID.
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if organization_unit is not None:
            pulumi.set(__self__, "organization_unit", organization_unit)
        if overwrite_same_account is not None:
            pulumi.set(__self__, "overwrite_same_account", overwrite_same_account)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if share_id is not None:
            pulumi.set(__self__, "share_id", share_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_name is not None:
            pulumi.set(__self__, "system_name", system_name)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IP address of the DNS server. It is used to resolve the AD domain
        name.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dns_servers", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain name of the domain controller. It is specified when the
        domain server is created.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="organizationUnit")
    def organization_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the  group of domain objects, such as users, computers,
        and printers. If you add the file system to an organizational unit (OU), it will become a member of that OU.
        If this parameter is left blank, the file system will be added to the computers OU.
        """
        return pulumi.get(self, "organization_unit")

    @organization_unit.setter
    def organization_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_unit", value)

    @_builtins.property
    @pulumi.getter(name="overwriteSameAccount")
    def overwrite_same_account(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether overwrite the existing information in the domain controller.
        If the option is enabled and the domain controller already has the file system name you specified, the information
        you specified will be overwrited.
        """
        return pulumi.get(self, "overwrite_same_account")

    @overwrite_same_account.setter
    def overwrite_same_account(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "overwrite_same_account", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the password of the service account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service account, which is specified when the domain
        server is created, **administrator** is used normally.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the SFS Turbo.
        """
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the AD domain. Possible values are: **JOINING**, **AVAILABLE**, **EXITING**
        and **FAILED**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="systemName")
    def system_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the file storage system in the AD domain.
        """
        return pulumi.get(self, "system_name")

    @system_name.setter
    def system_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_name", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:Sfs/turboAdDomain:TurboAdDomain")
class TurboAdDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 overwrite_same_account: Optional[pulumi.Input[_builtins.bool]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_name: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to manage the AD domain of the SFS turbo within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        share_id = config.require_object("shareId")
        service_account = config.require_object("serviceAccount")
        password = config.require_object("password")
        domain_name = config.require_object("domainName")
        system_name = config.require_object("systemName")
        dns_server = config.require_object("dnsServer")
        organization_unit = config.require_object("organizationUnit")
        vpc_id = config.require_object("vpcId")
        test = huaweicloud.sfs.TurboAdDomain("test",
            share_id=share_id,
            service_account=service_account,
            password=password,
            domain_name=domain_name,
            system_name=system_name,
            dns_servers=dns_server,
            overwrite_same_account=False,
            organization_unit=organization_unit,
            vpc_id=vpc_id)
        ```

        ## Import

        The SFS Turbo AD domain can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Sfs/turboAdDomain:TurboAdDomain test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `share_id`, `service_account`, `password`,

        `overwrite_same_account`. It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the snapshot group. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_sfs_turbo_ad_domain" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              share_id,
            
              service_account,
            
              password,
            
              overwrite_same_account,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_servers: Specifies the IP address of the DNS server. It is used to resolve the AD domain
               name.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name of the domain controller. It is specified when the
               domain server is created.
        :param pulumi.Input[_builtins.str] organization_unit: Specifies the  group of domain objects, such as users, computers,
               and printers. If you add the file system to an organizational unit (OU), it will become a member of that OU.
               If this parameter is left blank, the file system will be added to the computers OU.
        :param pulumi.Input[_builtins.bool] overwrite_same_account: Whether overwrite the existing information in the domain controller.
               If the option is enabled and the domain controller already has the file system name you specified, the information
               you specified will be overwrited.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the service account.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] service_account: Specifies the service account, which is specified when the domain
               server is created, **administrator** is used normally.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo.
        :param pulumi.Input[_builtins.str] system_name: Specifies the name of the file storage system in the AD domain.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TurboAdDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to manage the AD domain of the SFS turbo within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        share_id = config.require_object("shareId")
        service_account = config.require_object("serviceAccount")
        password = config.require_object("password")
        domain_name = config.require_object("domainName")
        system_name = config.require_object("systemName")
        dns_server = config.require_object("dnsServer")
        organization_unit = config.require_object("organizationUnit")
        vpc_id = config.require_object("vpcId")
        test = huaweicloud.sfs.TurboAdDomain("test",
            share_id=share_id,
            service_account=service_account,
            password=password,
            domain_name=domain_name,
            system_name=system_name,
            dns_servers=dns_server,
            overwrite_same_account=False,
            organization_unit=organization_unit,
            vpc_id=vpc_id)
        ```

        ## Import

        The SFS Turbo AD domain can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Sfs/turboAdDomain:TurboAdDomain test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `share_id`, `service_account`, `password`,

        `overwrite_same_account`. It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the snapshot group. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_sfs_turbo_ad_domain" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              share_id,
            
              service_account,
            
              password,
            
              overwrite_same_account,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param TurboAdDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TurboAdDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 overwrite_same_account: Optional[pulumi.Input[_builtins.bool]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_name: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TurboAdDomainArgs.__new__(TurboAdDomainArgs)

            if dns_servers is None and not opts.urn:
                raise TypeError("Missing required property 'dns_servers'")
            __props__.__dict__["dns_servers"] = dns_servers
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["organization_unit"] = organization_unit
            __props__.__dict__["overwrite_same_account"] = overwrite_same_account
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["region"] = region
            if service_account is None and not opts.urn:
                raise TypeError("Missing required property 'service_account'")
            __props__.__dict__["service_account"] = service_account
            if share_id is None and not opts.urn:
                raise TypeError("Missing required property 'share_id'")
            __props__.__dict__["share_id"] = share_id
            if system_name is None and not opts.urn:
                raise TypeError("Missing required property 'system_name'")
            __props__.__dict__["system_name"] = system_name
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(TurboAdDomain, __self__).__init__(
            'huaweicloud:Sfs/turboAdDomain:TurboAdDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            organization_unit: Optional[pulumi.Input[_builtins.str]] = None,
            overwrite_same_account: Optional[pulumi.Input[_builtins.bool]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            service_account: Optional[pulumi.Input[_builtins.str]] = None,
            share_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            system_name: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'TurboAdDomain':
        """
        Get an existing TurboAdDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_servers: Specifies the IP address of the DNS server. It is used to resolve the AD domain
               name.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name of the domain controller. It is specified when the
               domain server is created.
        :param pulumi.Input[_builtins.str] organization_unit: Specifies the  group of domain objects, such as users, computers,
               and printers. If you add the file system to an organizational unit (OU), it will become a member of that OU.
               If this parameter is left blank, the file system will be added to the computers OU.
        :param pulumi.Input[_builtins.bool] overwrite_same_account: Whether overwrite the existing information in the domain controller.
               If the option is enabled and the domain controller already has the file system name you specified, the information
               you specified will be overwrited.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the service account.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] service_account: Specifies the service account, which is specified when the domain
               server is created, **administrator** is used normally.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo.
        :param pulumi.Input[_builtins.str] status: The current status of the AD domain. Possible values are: **JOINING**, **AVAILABLE**, **EXITING**
               and **FAILED**.
        :param pulumi.Input[_builtins.str] system_name: Specifies the name of the file storage system in the AD domain.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TurboAdDomainState.__new__(_TurboAdDomainState)

        __props__.__dict__["dns_servers"] = dns_servers
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["organization_unit"] = organization_unit
        __props__.__dict__["overwrite_same_account"] = overwrite_same_account
        __props__.__dict__["password"] = password
        __props__.__dict__["region"] = region
        __props__.__dict__["service_account"] = service_account
        __props__.__dict__["share_id"] = share_id
        __props__.__dict__["status"] = status
        __props__.__dict__["system_name"] = system_name
        __props__.__dict__["vpc_id"] = vpc_id
        return TurboAdDomain(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the IP address of the DNS server. It is used to resolve the AD domain
        name.
        """
        return pulumi.get(self, "dns_servers")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the domain name of the domain controller. It is specified when the
        domain server is created.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="organizationUnit")
    def organization_unit(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the  group of domain objects, such as users, computers,
        and printers. If you add the file system to an organizational unit (OU), it will become a member of that OU.
        If this parameter is left blank, the file system will be added to the computers OU.
        """
        return pulumi.get(self, "organization_unit")

    @_builtins.property
    @pulumi.getter(name="overwriteSameAccount")
    def overwrite_same_account(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether overwrite the existing information in the domain controller.
        If the option is enabled and the domain controller already has the file system name you specified, the information
        you specified will be overwrited.
        """
        return pulumi.get(self, "overwrite_same_account")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the password of the service account.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the service account, which is specified when the domain
        server is created, **administrator** is used normally.
        """
        return pulumi.get(self, "service_account")

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the SFS Turbo.
        """
        return pulumi.get(self, "share_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the AD domain. Possible values are: **JOINING**, **AVAILABLE**, **EXITING**
        and **FAILED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemName")
    def system_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the file storage system in the AD domain.
        """
        return pulumi.get(self, "system_name")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")

