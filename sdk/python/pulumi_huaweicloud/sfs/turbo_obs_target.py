# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TurboObsTargetArgs', 'TurboObsTarget']

@pulumi.input_type
class TurboObsTargetArgs:
    def __init__(__self__, *,
                 file_system_path: pulumi.Input[_builtins.str],
                 obs: pulumi.Input['TurboObsTargetObsArgs'],
                 share_id: pulumi.Input[_builtins.str],
                 delete_data_in_file_system: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TurboObsTarget resource.
        :param pulumi.Input[_builtins.str] file_system_path: Specifies the linkage directory name of the OBS target.
               Changing this creates a new resource.
               
               > The directory name must be unique and it can not be `.` or `..` character. The directory name can not contain
               slashes (/) and multi level directory is not supported.
        :param pulumi.Input['TurboObsTargetObsArgs'] obs: Specifies the detail of the OBS bucket. Changing this will create a new resource.
               The obs structure is documented below.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the OBS target
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] delete_data_in_file_system: Specifies whether to delete the associated directory and
               its data files in the  SFS Turbo file system when the OBS target is deleted. The default value is **false**.
               
               <a name="target_obs"></a>
               The `obs` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "file_system_path", file_system_path)
        pulumi.set(__self__, "obs", obs)
        pulumi.set(__self__, "share_id", share_id)
        if delete_data_in_file_system is not None:
            pulumi.set(__self__, "delete_data_in_file_system", delete_data_in_file_system)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the linkage directory name of the OBS target.
        Changing this creates a new resource.

        > The directory name must be unique and it can not be `.` or `..` character. The directory name can not contain
        slashes (/) and multi level directory is not supported.
        """
        return pulumi.get(self, "file_system_path")

    @file_system_path.setter
    def file_system_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "file_system_path", value)

    @_builtins.property
    @pulumi.getter
    def obs(self) -> pulumi.Input['TurboObsTargetObsArgs']:
        """
        Specifies the detail of the OBS bucket. Changing this will create a new resource.
        The obs structure is documented below.
        """
        return pulumi.get(self, "obs")

    @obs.setter
    def obs(self, value: pulumi.Input['TurboObsTargetObsArgs']):
        pulumi.set(self, "obs", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the SFS Turbo file system to which the OBS target
        belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter(name="deleteDataInFileSystem")
    def delete_data_in_file_system(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete the associated directory and
        its data files in the  SFS Turbo file system when the OBS target is deleted. The default value is **false**.

        <a name="target_obs"></a>
        The `obs` block supports:
        """
        return pulumi.get(self, "delete_data_in_file_system")

    @delete_data_in_file_system.setter
    def delete_data_in_file_system(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_data_in_file_system", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _TurboObsTargetState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_data_in_file_system: Optional[pulumi.Input[_builtins.bool]] = None,
                 file_system_path: Optional[pulumi.Input[_builtins.str]] = None,
                 obs: Optional[pulumi.Input['TurboObsTargetObsArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TurboObsTarget resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the OBS target.
        :param pulumi.Input[_builtins.bool] delete_data_in_file_system: Specifies whether to delete the associated directory and
               its data files in the  SFS Turbo file system when the OBS target is deleted. The default value is **false**.
               
               <a name="target_obs"></a>
               The `obs` block supports:
        :param pulumi.Input[_builtins.str] file_system_path: Specifies the linkage directory name of the OBS target.
               Changing this creates a new resource.
               
               > The directory name must be unique and it can not be `.` or `..` character. The directory name can not contain
               slashes (/) and multi level directory is not supported.
        :param pulumi.Input['TurboObsTargetObsArgs'] obs: Specifies the detail of the OBS bucket. Changing this will create a new resource.
               The obs structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the OBS target
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the OBS target. The valid values are as following:
               + **AVAILABLE**: The resource is available.
               + **MISCONFIGURED**: The resource creation failed.
               + **FAILED**: The resource deletion failed.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if delete_data_in_file_system is not None:
            pulumi.set(__self__, "delete_data_in_file_system", delete_data_in_file_system)
        if file_system_path is not None:
            pulumi.set(__self__, "file_system_path", file_system_path)
        if obs is not None:
            pulumi.set(__self__, "obs", obs)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if share_id is not None:
            pulumi.set(__self__, "share_id", share_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the OBS target.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="deleteDataInFileSystem")
    def delete_data_in_file_system(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to delete the associated directory and
        its data files in the  SFS Turbo file system when the OBS target is deleted. The default value is **false**.

        <a name="target_obs"></a>
        The `obs` block supports:
        """
        return pulumi.get(self, "delete_data_in_file_system")

    @delete_data_in_file_system.setter
    def delete_data_in_file_system(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_data_in_file_system", value)

    @_builtins.property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the linkage directory name of the OBS target.
        Changing this creates a new resource.

        > The directory name must be unique and it can not be `.` or `..` character. The directory name can not contain
        slashes (/) and multi level directory is not supported.
        """
        return pulumi.get(self, "file_system_path")

    @file_system_path.setter
    def file_system_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_system_path", value)

    @_builtins.property
    @pulumi.getter
    def obs(self) -> Optional[pulumi.Input['TurboObsTargetObsArgs']]:
        """
        Specifies the detail of the OBS bucket. Changing this will create a new resource.
        The obs structure is documented below.
        """
        return pulumi.get(self, "obs")

    @obs.setter
    def obs(self, value: Optional[pulumi.Input['TurboObsTargetObsArgs']]):
        pulumi.set(self, "obs", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the SFS Turbo file system to which the OBS target
        belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the OBS target. The valid values are as following:
        + **AVAILABLE**: The resource is available.
        + **MISCONFIGURED**: The resource creation failed.
        + **FAILED**: The resource deletion failed.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Sfs/turboObsTarget:TurboObsTarget")
class TurboObsTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_data_in_file_system: Optional[pulumi.Input[_builtins.bool]] = None,
                 file_system_path: Optional[pulumi.Input[_builtins.str]] = None,
                 obs: Optional[pulumi.Input[Union['TurboObsTargetObsArgs', 'TurboObsTargetObsArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an OBS target resource under the SFS Turbo within HuaweiCloud.

        > The resource supported SFS Turbo file system types are **20MB/s/TiB**, **40MB/s/TiB**, **125MB/s/TiB**,
          **250MB/s/TiB**, **500MB/s/TiB**, **1,000MB/s/TiB**, **HPC**.

        > Due to the inherent reason of the API, updating the `attributes` may fail.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        share_id = config.require_object("shareId")
        file_path = config.require_object("filePath")
        bucket_name = config.require_object("bucketName")
        endpoint = config.require_object("endpoint")
        test = huaweicloud.sfs.TurboObsTarget("test",
            share_id=share_id,
            file_system_path=file_path,
            obs={
                "bucket": bucket_name,
                "endpoint": endpoint,
            })
        ```

        ## Import

        The SFS Turbo OBS target can be imported using the related `share_id` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Sfs/turboObsTarget:TurboObsTarget test <share_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to payment attributes missing from

        the API response.

        The missing attributes include: `delete_data_in_file_system`, `obs.0.attributes.0.file_mode`,

        `obs.0.attributes.0.dir_mode`, `obs.0.attributes.0.uid`, `obs.0.attributes.0.gid`.

        It is generally recommended running `pulumi preview` after importing an resource.

        You can ignore changes as below.

        hcl

        resource "huaweicloud_sfs_turbo_obs_target" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              delete_data_in_file_system, obs.0.attributes.0.file_mode, obs.0.attributes.0.dir_mode,
            
              obs.0.attributes.0.uid, obs.0.attributes.0.gid,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delete_data_in_file_system: Specifies whether to delete the associated directory and
               its data files in the  SFS Turbo file system when the OBS target is deleted. The default value is **false**.
               
               <a name="target_obs"></a>
               The `obs` block supports:
        :param pulumi.Input[_builtins.str] file_system_path: Specifies the linkage directory name of the OBS target.
               Changing this creates a new resource.
               
               > The directory name must be unique and it can not be `.` or `..` character. The directory name can not contain
               slashes (/) and multi level directory is not supported.
        :param pulumi.Input[Union['TurboObsTargetObsArgs', 'TurboObsTargetObsArgsDict']] obs: Specifies the detail of the OBS bucket. Changing this will create a new resource.
               The obs structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the OBS target
               belongs. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TurboObsTargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an OBS target resource under the SFS Turbo within HuaweiCloud.

        > The resource supported SFS Turbo file system types are **20MB/s/TiB**, **40MB/s/TiB**, **125MB/s/TiB**,
          **250MB/s/TiB**, **500MB/s/TiB**, **1,000MB/s/TiB**, **HPC**.

        > Due to the inherent reason of the API, updating the `attributes` may fail.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        share_id = config.require_object("shareId")
        file_path = config.require_object("filePath")
        bucket_name = config.require_object("bucketName")
        endpoint = config.require_object("endpoint")
        test = huaweicloud.sfs.TurboObsTarget("test",
            share_id=share_id,
            file_system_path=file_path,
            obs={
                "bucket": bucket_name,
                "endpoint": endpoint,
            })
        ```

        ## Import

        The SFS Turbo OBS target can be imported using the related `share_id` and their `id`, separated by a slash (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Sfs/turboObsTarget:TurboObsTarget test <share_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to payment attributes missing from

        the API response.

        The missing attributes include: `delete_data_in_file_system`, `obs.0.attributes.0.file_mode`,

        `obs.0.attributes.0.dir_mode`, `obs.0.attributes.0.uid`, `obs.0.attributes.0.gid`.

        It is generally recommended running `pulumi preview` after importing an resource.

        You can ignore changes as below.

        hcl

        resource "huaweicloud_sfs_turbo_obs_target" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              delete_data_in_file_system, obs.0.attributes.0.file_mode, obs.0.attributes.0.dir_mode,
            
              obs.0.attributes.0.uid, obs.0.attributes.0.gid,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param TurboObsTargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TurboObsTargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_data_in_file_system: Optional[pulumi.Input[_builtins.bool]] = None,
                 file_system_path: Optional[pulumi.Input[_builtins.str]] = None,
                 obs: Optional[pulumi.Input[Union['TurboObsTargetObsArgs', 'TurboObsTargetObsArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TurboObsTargetArgs.__new__(TurboObsTargetArgs)

            __props__.__dict__["delete_data_in_file_system"] = delete_data_in_file_system
            if file_system_path is None and not opts.urn:
                raise TypeError("Missing required property 'file_system_path'")
            __props__.__dict__["file_system_path"] = file_system_path
            if obs is None and not opts.urn:
                raise TypeError("Missing required property 'obs'")
            __props__.__dict__["obs"] = obs
            __props__.__dict__["region"] = region
            if share_id is None and not opts.urn:
                raise TypeError("Missing required property 'share_id'")
            __props__.__dict__["share_id"] = share_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
        super(TurboObsTarget, __self__).__init__(
            'huaweicloud:Sfs/turboObsTarget:TurboObsTarget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            delete_data_in_file_system: Optional[pulumi.Input[_builtins.bool]] = None,
            file_system_path: Optional[pulumi.Input[_builtins.str]] = None,
            obs: Optional[pulumi.Input[Union['TurboObsTargetObsArgs', 'TurboObsTargetObsArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            share_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'TurboObsTarget':
        """
        Get an existing TurboObsTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the OBS target.
        :param pulumi.Input[_builtins.bool] delete_data_in_file_system: Specifies whether to delete the associated directory and
               its data files in the  SFS Turbo file system when the OBS target is deleted. The default value is **false**.
               
               <a name="target_obs"></a>
               The `obs` block supports:
        :param pulumi.Input[_builtins.str] file_system_path: Specifies the linkage directory name of the OBS target.
               Changing this creates a new resource.
               
               > The directory name must be unique and it can not be `.` or `..` character. The directory name can not contain
               slashes (/) and multi level directory is not supported.
        :param pulumi.Input[Union['TurboObsTargetObsArgs', 'TurboObsTargetObsArgsDict']] obs: Specifies the detail of the OBS bucket. Changing this will create a new resource.
               The obs structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] share_id: Specifies the ID of the SFS Turbo file system to which the OBS target
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the OBS target. The valid values are as following:
               + **AVAILABLE**: The resource is available.
               + **MISCONFIGURED**: The resource creation failed.
               + **FAILED**: The resource deletion failed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TurboObsTargetState.__new__(_TurboObsTargetState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["delete_data_in_file_system"] = delete_data_in_file_system
        __props__.__dict__["file_system_path"] = file_system_path
        __props__.__dict__["obs"] = obs
        __props__.__dict__["region"] = region
        __props__.__dict__["share_id"] = share_id
        __props__.__dict__["status"] = status
        return TurboObsTarget(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the OBS target.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deleteDataInFileSystem")
    def delete_data_in_file_system(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to delete the associated directory and
        its data files in the  SFS Turbo file system when the OBS target is deleted. The default value is **false**.

        <a name="target_obs"></a>
        The `obs` block supports:
        """
        return pulumi.get(self, "delete_data_in_file_system")

    @_builtins.property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the linkage directory name of the OBS target.
        Changing this creates a new resource.

        > The directory name must be unique and it can not be `.` or `..` character. The directory name can not contain
        slashes (/) and multi level directory is not supported.
        """
        return pulumi.get(self, "file_system_path")

    @_builtins.property
    @pulumi.getter
    def obs(self) -> pulumi.Output['outputs.TurboObsTargetObs']:
        """
        Specifies the detail of the OBS bucket. Changing this will create a new resource.
        The obs structure is documented below.
        """
        return pulumi.get(self, "obs")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the SFS Turbo file system to which the OBS target
        belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "share_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the OBS target. The valid values are as following:
        + **AVAILABLE**: The resource is available.
        + **MISCONFIGURED**: The resource creation failed.
        + **FAILED**: The resource deletion failed.
        """
        return pulumi.get(self, "status")

