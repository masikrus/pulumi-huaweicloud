# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetInstanceAvailableVersionsResult',
    'AwaitableGetInstanceAvailableVersionsResult',
    'get_instance_available_versions',
    'get_instance_available_versions_output',
]

@pulumi.output_type
class GetInstanceAvailableVersionsResult:
    """
    A collection of values returned by getInstanceAvailableVersions.
    """
    def __init__(__self__, current_favored_version=None, current_version=None, id=None, instance_id=None, latest_version=None, previous_version=None, region=None, versions=None):
        if current_favored_version and not isinstance(current_favored_version, str):
            raise TypeError("Expected argument 'current_favored_version' to be a str")
        pulumi.set(__self__, "current_favored_version", current_favored_version)
        if current_version and not isinstance(current_version, str):
            raise TypeError("Expected argument 'current_version' to be a str")
        pulumi.set(__self__, "current_version", current_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if latest_version and not isinstance(latest_version, str):
            raise TypeError("Expected argument 'latest_version' to be a str")
        pulumi.set(__self__, "latest_version", latest_version)
        if previous_version and not isinstance(previous_version, str):
            raise TypeError("Expected argument 'previous_version' to be a str")
        pulumi.set(__self__, "previous_version", previous_version)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter(name="currentFavoredVersion")
    def current_favored_version(self) -> _builtins.str:
        """
        Indicates the preferred version of the current series.
        """
        return pulumi.get(self, "current_favored_version")

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> _builtins.str:
        """
        Indicates the current version.
        """
        return pulumi.get(self, "current_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> _builtins.str:
        """
        Indicates the latest version.
        """
        return pulumi.get(self, "latest_version")

    @_builtins.property
    @pulumi.getter(name="previousVersion")
    def previous_version(self) -> _builtins.str:
        """
        Indicates the previous version of the current instance.
        """
        return pulumi.get(self, "previous_version")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Sequence[_builtins.str]:
        """
        Indicates the available version.
        """
        return pulumi.get(self, "versions")


class AwaitableGetInstanceAvailableVersionsResult(GetInstanceAvailableVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceAvailableVersionsResult(
            current_favored_version=self.current_favored_version,
            current_version=self.current_version,
            id=self.id,
            instance_id=self.instance_id,
            latest_version=self.latest_version,
            previous_version=self.previous_version,
            region=self.region,
            versions=self.versions)


def get_instance_available_versions(instance_id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceAvailableVersionsResult:
    """
    Use this data source to get the available versions of the DDM instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.ddm.get_instance_available_versions(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the DDM instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ddm/getInstanceAvailableVersions:getInstanceAvailableVersions', __args__, opts=opts, typ=GetInstanceAvailableVersionsResult).value

    return AwaitableGetInstanceAvailableVersionsResult(
        current_favored_version=pulumi.get(__ret__, 'current_favored_version'),
        current_version=pulumi.get(__ret__, 'current_version'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        latest_version=pulumi.get(__ret__, 'latest_version'),
        previous_version=pulumi.get(__ret__, 'previous_version'),
        region=pulumi.get(__ret__, 'region'),
        versions=pulumi.get(__ret__, 'versions'))
def get_instance_available_versions_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstanceAvailableVersionsResult]:
    """
    Use this data source to get the available versions of the DDM instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.ddm.get_instance_available_versions(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the DDM instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ddm/getInstanceAvailableVersions:getInstanceAvailableVersions', __args__, opts=opts, typ=GetInstanceAvailableVersionsResult)
    return __ret__.apply(lambda __response__: GetInstanceAvailableVersionsResult(
        current_favored_version=pulumi.get(__response__, 'current_favored_version'),
        current_version=pulumi.get(__response__, 'current_version'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        latest_version=pulumi.get(__response__, 'latest_version'),
        previous_version=pulumi.get(__response__, 'previous_version'),
        region=pulumi.get(__response__, 'region'),
        versions=pulumi.get(__response__, 'versions')))
