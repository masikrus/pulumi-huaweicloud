# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AccountSchema',
    'InstanceNode',
    'InstanceParameter',
    'InstanceReadStrategyReadWeight',
    'SchemaDataNode',
    'SchemaShard',
    'GetAccountsAccountResult',
    'GetAccountsAccountSchemaResult',
    'GetAvailableRdsInstancesInstanceResult',
    'GetConfigurationParametersConfigurationParameterResult',
    'GetConfigurationsConfigurationResult',
    'GetEnginesEngineResult',
    'GetFlavorsFlavorResult',
    'GetInstanceGroupsGroupListResult',
    'GetInstanceGroupsGroupListNodeListResult',
    'GetInstanceNodesNodeResult',
    'GetInstancesInstanceResult',
    'GetKillingSessionsAuditLogsProcessAuditLogResult',
    'GetLogicalSessionsLogicalProcessResult',
    'GetPhysicalSessionsPhysicalProcessResult',
    'GetSchemasSchemaResult',
    'GetSchemasSchemaDataNodeResult',
]

@pulumi.output_type
class AccountSchema(dict):
    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the description of the DDM account.
        :param _builtins.str name: Specifies the name of the associated schema.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the DDM account.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the associated schema.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InstanceNode(dict):
    def __init__(__self__, *,
                 ip: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip: Indicates the IP address of the DDM instance node.
        :param _builtins.str port: Indicates the port of the DDM instance node.
        :param _builtins.str status: Indicates the status of the DDM instance node.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        """
        Indicates the IP address of the DDM instance node.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        Indicates the port of the DDM instance node.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the DDM instance node.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class InstanceParameter(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        :param _builtins.str value: Specifies the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstanceReadStrategyReadWeight(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbId":
            suggest = "db_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceReadStrategyReadWeight. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceReadStrategyReadWeight.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceReadStrategyReadWeight.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_id: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str db_id: Specifies the ID of the DB instance associated with the DDM schema.
        :param _builtins.int weight: Specifies read weight of the DB instance associated with the DDM schema.
        """
        pulumi.set(__self__, "db_id", db_id)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="dbId")
    def db_id(self) -> _builtins.str:
        """
        Specifies the ID of the DB instance associated with the DDM schema.
        """
        return pulumi.get(self, "db_id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Specifies read weight of the DB instance associated with the DDM schema.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class SchemaDataNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminPassword":
            suggest = "admin_password"
        elif key == "adminUser":
            suggest = "admin_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaDataNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaDataNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaDataNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_password: _builtins.str,
                 admin_user: _builtins.str,
                 id: _builtins.str,
                 name: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str admin_password: Specifies the password for logging in to the associated RDS instance.
        :param _builtins.str admin_user: Specifies the username for logging in to the associated RDS instance.
        :param _builtins.str id: Specifies the ID of the RDS instance associated with the schema.
        :param _builtins.str name: Specifies the name of the DDM schema.
               An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
               digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.
               
               Changing this parameter will create a new resource.
        :param _builtins.str status: Indicates the status of the associated RDS instance.
        """
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "admin_user", admin_user)
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> _builtins.str:
        """
        Specifies the password for logging in to the associated RDS instance.
        """
        return pulumi.get(self, "admin_password")

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> _builtins.str:
        """
        Specifies the username for logging in to the associated RDS instance.
        """
        return pulumi.get(self, "admin_user")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the RDS instance associated with the schema.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the DDM schema.
        An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
        digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the associated RDS instance.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SchemaShard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbSlot":
            suggest = "db_slot"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaShard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaShard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaShard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_slot: Optional[_builtins.int] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.int db_slot: Indicates the number of shards.
        :param _builtins.str id: Specifies the ID of the RDS instance associated with the schema.
        :param _builtins.str name: Specifies the name of the DDM schema.
               An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
               digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.
               
               Changing this parameter will create a new resource.
        :param _builtins.str status: Indicates the status of the associated RDS instance.
        """
        if db_slot is not None:
            pulumi.set(__self__, "db_slot", db_slot)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="dbSlot")
    def db_slot(self) -> Optional[_builtins.int]:
        """
        Indicates the number of shards.
        """
        return pulumi.get(self, "db_slot")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the RDS instance associated with the schema.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the DDM schema.
        An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
        digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the associated RDS instance.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str,
                 permissions: Sequence[_builtins.str],
                 schemas: Sequence['outputs.GetAccountsAccountSchemaResult'],
                 status: _builtins.str):
        """
        :param _builtins.str description: Indicates the schema description.
        :param _builtins.str name: Specifies the name of the DDM account.
        :param Sequence[_builtins.str] permissions: Indicates the basic permissions of the DDM account.
        :param Sequence['GetAccountsAccountSchemaArgs'] schemas: Indicates the schemas that associated with the account.
               The Schema structure is documented below.
        :param _builtins.str status: Specifies the status of the DDM account.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the schema description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the DDM account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Sequence[_builtins.str]:
        """
        Indicates the basic permissions of the DDM account.
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.GetAccountsAccountSchemaResult']:
        """
        Indicates the schemas that associated with the account.
        The Schema structure is documented below.
        """
        return pulumi.get(self, "schemas")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the DDM account.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAccountsAccountSchemaResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str description: Indicates the schema description.
        :param _builtins.str name: Specifies the name of the DDM account.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the schema description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the DDM account.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAvailableRdsInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 az_code: _builtins.str,
                 engine_name: _builtins.str,
                 engine_software_version: _builtins.str,
                 id: _builtins.str,
                 mode: _builtins.str,
                 name: _builtins.str,
                 port: _builtins.int,
                 private_ip: _builtins.str,
                 project_id: _builtins.str,
                 status: _builtins.str,
                 time_zone: _builtins.str):
        """
        :param _builtins.str az_code: Indicates the AZ.
        :param _builtins.str engine_name: Indicates the engine name of the DB instance.
        :param _builtins.str engine_software_version: Indicates the engine version of the DB instance.
        :param _builtins.str id: Indicates the DB instance ID.
        :param _builtins.str mode: Indicates the DB instance type (primary/standby or single-node).
        :param _builtins.str name: Indicates the DB instance name.
        :param _builtins.int port: Indicates the port for connecting to the DB instance.
        :param _builtins.str private_ip: Indicates the private IP address for connecting to the DB instance.
        :param _builtins.str project_id: Indicates the project ID of the tenant whom the DB instance belongs to in a region.
        :param _builtins.str status: Indicates the DB instance status.
        :param _builtins.str time_zone: Indicates the time zone.
        """
        pulumi.set(__self__, "az_code", az_code)
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "engine_software_version", engine_software_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_zone", time_zone)

    @_builtins.property
    @pulumi.getter(name="azCode")
    def az_code(self) -> _builtins.str:
        """
        Indicates the AZ.
        """
        return pulumi.get(self, "az_code")

    @_builtins.property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> _builtins.str:
        """
        Indicates the engine name of the DB instance.
        """
        return pulumi.get(self, "engine_name")

    @_builtins.property
    @pulumi.getter(name="engineSoftwareVersion")
    def engine_software_version(self) -> _builtins.str:
        """
        Indicates the engine version of the DB instance.
        """
        return pulumi.get(self, "engine_software_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the DB instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the DB instance type (primary/standby or single-node).
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the DB instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Indicates the port for connecting to the DB instance.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Indicates the private IP address for connecting to the DB instance.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the project ID of the tenant whom the DB instance belongs to in a region.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the DB instance status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        Indicates the time zone.
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class GetConfigurationParametersConfigurationParameterResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str,
                 readonly: _builtins.bool,
                 restart_required: _builtins.bool,
                 type: _builtins.str,
                 value: _builtins.str,
                 value_range: _builtins.str):
        """
        :param _builtins.str description: Indicates the parameter description.
        :param _builtins.str name: Indicates the name of the parameter.
        :param _builtins.bool readonly: Indicates whether the parameter is read-only. The value can be **false** (indicates that the parameter
               is not read-only) or **true** (indicates that the parameter is read-only).
        :param _builtins.bool restart_required: Indicates whether a restart is required for this parameter. The value can be **false** (indicates
               that a restart is not required) or **true** (indicates that a restart is required)
        :param _builtins.str type: Indicates the parameter type.
        :param _builtins.str value: Indicates the parameter value.
        :param _builtins.str value_range: Indicates the valid value range of parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)
        pulumi.set(__self__, "restart_required", restart_required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        Indicates whether the parameter is read-only. The value can be **false** (indicates that the parameter
        is not read-only) or **true** (indicates that the parameter is read-only).
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> _builtins.bool:
        """
        Indicates whether a restart is required for this parameter. The value can be **false** (indicates
        that a restart is not required) or **true** (indicates that a restart is required)
        """
        return pulumi.get(self, "restart_required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> _builtins.str:
        """
        Indicates the valid value range of parameter.
        """
        return pulumi.get(self, "value_range")


@pulumi.output_type
class GetConfigurationsConfigurationResult(dict):
    def __init__(__self__, *,
                 created: _builtins.str,
                 datastore_name: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated: _builtins.str,
                 user_defined: _builtins.bool):
        """
        :param _builtins.str created: Indicates the creation time, in the format **yyyy-MM-ddTHH:mm:ssZ**.
        :param _builtins.str datastore_name: Indicates the database type.
        :param _builtins.str description: Indicates the description of the parameter template.
        :param _builtins.str id: Indicates the parameter template ID.
        :param _builtins.str name: Indicates the name of the parameter template.
        :param _builtins.str updated: Indicates the update time, in the format **yyyy-MM-ddTHH:mm:ssZ**.
        :param _builtins.bool user_defined: Indicates whether the parameter template is a custom template. Possible values: **false** (default
               template), **true** (custom template).
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "datastore_name", datastore_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated", updated)
        pulumi.set(__self__, "user_defined", user_defined)

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        """
        Indicates the creation time, in the format **yyyy-MM-ddTHH:mm:ssZ**.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> _builtins.str:
        """
        Indicates the database type.
        """
        return pulumi.get(self, "datastore_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the parameter template.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the parameter template ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the parameter template.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        """
        Indicates the update time, in the format **yyyy-MM-ddTHH:mm:ssZ**.
        """
        return pulumi.get(self, "updated")

    @_builtins.property
    @pulumi.getter(name="userDefined")
    def user_defined(self) -> _builtins.bool:
        """
        Indicates whether the parameter template is a custom template. Possible values: **false** (default
        template), **true** (custom template).
        """
        return pulumi.get(self, "user_defined")


@pulumi.output_type
class GetEnginesEngineResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str id: Indicates the ID of the engine.
        :param _builtins.str version: Specifies the engine version.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the engine.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the engine version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 cpu_arch: _builtins.str,
                 id: _builtins.str,
                 memory: _builtins.int,
                 vcpus: _builtins.int):
        """
        :param _builtins.str code: Specifies the VM flavor types recorded in DDM.
        :param _builtins.str cpu_arch: Specifies the compute resource architecture type. The options are **X86** and **ARM**.
        :param _builtins.str id: Indicates the ID of a flavor.
        :param _builtins.int memory: Specifies the memory size. Unit GB.
        :param _builtins.int vcpus: Specifies the number of CPUs.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "cpu_arch", cpu_arch)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Specifies the VM flavor types recorded in DDM.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="cpuArch")
    def cpu_arch(self) -> _builtins.str:
        """
        Specifies the compute resource architecture type. The options are **X86** and **ARM**.
        """
        return pulumi.get(self, "cpu_arch")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of a flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        Specifies the memory size. Unit GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        Specifies the number of CPUs.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstanceGroupsGroupListResult(dict):
    def __init__(__self__, *,
                 architecture: _builtins.str,
                 cpu_num_per_node: _builtins.int,
                 endpoint: _builtins.str,
                 id: _builtins.str,
                 ipv6_endpoint: _builtins.str,
                 is_default_group: _builtins.bool,
                 is_load_balance: _builtins.bool,
                 mem_num_per_node: _builtins.int,
                 name: _builtins.str,
                 node_lists: Sequence['outputs.GetInstanceGroupsGroupListNodeListResult'],
                 role: _builtins.str):
        """
        :param _builtins.str architecture: Indicates the CPU architecture. The value can be: **x86**, **Arm**.
        :param _builtins.int cpu_num_per_node: Indicates the number of CPU cores per node.
        :param _builtins.str endpoint: Indicates the connection address of the group. If load balancing is not enabled, the connection address
               string of the node in the group is returned.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str ipv6_endpoint: Indicates the IPv6 connection address of the group.
        :param _builtins.bool is_default_group: Indicates whether the API group is the default group.
        :param _builtins.bool is_load_balance: Indicates whether load balancing is enabled.
        :param _builtins.int mem_num_per_node: Indicates the memory size per node, in GB.
        :param _builtins.str name: Indicates the node name.
        :param Sequence['GetInstanceGroupsGroupListNodeListArgs'] node_lists: Indicates the list of node.
               The node_list structure is documented below.
        :param _builtins.str role: Indicates the group role type, which can be read/write or read-only. The value can be:
               + **rw**: read/write group.
               + **r**: read-only group.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "cpu_num_per_node", cpu_num_per_node)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv6_endpoint", ipv6_endpoint)
        pulumi.set(__self__, "is_default_group", is_default_group)
        pulumi.set(__self__, "is_load_balance", is_load_balance)
        pulumi.set(__self__, "mem_num_per_node", mem_num_per_node)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_lists", node_lists)
        pulumi.set(__self__, "role", role)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        """
        Indicates the CPU architecture. The value can be: **x86**, **Arm**.
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="cpuNumPerNode")
    def cpu_num_per_node(self) -> _builtins.int:
        """
        Indicates the number of CPU cores per node.
        """
        return pulumi.get(self, "cpu_num_per_node")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        Indicates the connection address of the group. If load balancing is not enabled, the connection address
        string of the node in the group is returned.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipv6Endpoint")
    def ipv6_endpoint(self) -> _builtins.str:
        """
        Indicates the IPv6 connection address of the group.
        """
        return pulumi.get(self, "ipv6_endpoint")

    @_builtins.property
    @pulumi.getter(name="isDefaultGroup")
    def is_default_group(self) -> _builtins.bool:
        """
        Indicates whether the API group is the default group.
        """
        return pulumi.get(self, "is_default_group")

    @_builtins.property
    @pulumi.getter(name="isLoadBalance")
    def is_load_balance(self) -> _builtins.bool:
        """
        Indicates whether load balancing is enabled.
        """
        return pulumi.get(self, "is_load_balance")

    @_builtins.property
    @pulumi.getter(name="memNumPerNode")
    def mem_num_per_node(self) -> _builtins.int:
        """
        Indicates the memory size per node, in GB.
        """
        return pulumi.get(self, "mem_num_per_node")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeLists")
    def node_lists(self) -> Sequence['outputs.GetInstanceGroupsGroupListNodeListResult']:
        """
        Indicates the list of node.
        The node_list structure is documented below.
        """
        return pulumi.get(self, "node_lists")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Indicates the group role type, which can be read/write or read-only. The value can be:
        + **rw**: read/write group.
        + **r**: read-only group.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetInstanceGroupsGroupListNodeListResult(dict):
    def __init__(__self__, *,
                 az: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str az: Indicates the AZ to which the node belongs.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Indicates the node name.
        """
        pulumi.set(__self__, "az", az)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def az(self) -> _builtins.str:
        """
        Indicates the AZ to which the node belongs.
        """
        return pulumi.get(self, "az")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInstanceNodesNodeResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 ip: _builtins.str,
                 port: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str id: Indicates the ID of the DDM instance node.
        :param _builtins.str ip: Indicates the IP address of the DDM instance node.
        :param _builtins.str port: Indicates the port of the DDM instance node.
        :param _builtins.str status: Indicates the status of the DDM instance node.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the DDM instance node.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Indicates the IP address of the DDM instance node.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        Indicates the port of the DDM instance node.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of the DDM instance node.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 access_ip: _builtins.str,
                 access_port: _builtins.str,
                 availability_zones: Sequence[_builtins.str],
                 engine_version: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 name: _builtins.str,
                 node_num: _builtins.int,
                 security_group_id: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str access_ip: Indicates the address for accessing the DDM instance.
        :param _builtins.str access_port: Indicates the port for accessing the DDM instance.
        :param Sequence[_builtins.str] availability_zones: Indicates the list of availability zones.
        :param _builtins.str engine_version: Specifies the engine version.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project id.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.int node_num: Indicates the number of nodes.
        :param _builtins.str security_group_id: Indicates the ID of a security group.
        :param _builtins.str status: Specifies the status of the instance.
        :param _builtins.str subnet_id: Indicates the ID of a subnet.
        :param _builtins.str vpc_id: Indicates the ID of a VPC.
        """
        pulumi.set(__self__, "access_ip", access_ip)
        pulumi.set(__self__, "access_port", access_port)
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="accessIp")
    def access_ip(self) -> _builtins.str:
        """
        Indicates the address for accessing the DDM instance.
        """
        return pulumi.get(self, "access_ip")

    @_builtins.property
    @pulumi.getter(name="accessPort")
    def access_port(self) -> _builtins.str:
        """
        Indicates the port for accessing the DDM instance.
        """
        return pulumi.get(self, "access_port")

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of availability zones.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Specifies the engine version.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project id.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> _builtins.int:
        """
        Indicates the number of nodes.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        Indicates the ID of a security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the instance.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Indicates the ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Indicates the ID of a VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetKillingSessionsAuditLogsProcessAuditLogResult(dict):
    def __init__(__self__, *,
                 execute_time: _builtins.str,
                 execute_user_name: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 process_id: _builtins.str):
        """
        :param _builtins.str execute_time: Indicates the execute time in UTC format.
        :param _builtins.str execute_user_name: Indicates the name of the user who executes the task.
        :param _builtins.str instance_id: Specifies the DDM instance ID or ID of the associated RDS instance.
        :param _builtins.str instance_name: Indicates the DDM instance name.
        :param _builtins.str process_id: Indicates the session ID.
        """
        pulumi.set(__self__, "execute_time", execute_time)
        pulumi.set(__self__, "execute_user_name", execute_user_name)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "process_id", process_id)

    @_builtins.property
    @pulumi.getter(name="executeTime")
    def execute_time(self) -> _builtins.str:
        """
        Indicates the execute time in UTC format.
        """
        return pulumi.get(self, "execute_time")

    @_builtins.property
    @pulumi.getter(name="executeUserName")
    def execute_user_name(self) -> _builtins.str:
        """
        Indicates the name of the user who executes the task.
        """
        return pulumi.get(self, "execute_user_name")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the DDM instance ID or ID of the associated RDS instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the DDM instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="processId")
    def process_id(self) -> _builtins.str:
        """
        Indicates the session ID.
        """
        return pulumi.get(self, "process_id")


@pulumi.output_type
class GetLogicalSessionsLogicalProcessResult(dict):
    def __init__(__self__, *,
                 command: _builtins.str,
                 db: _builtins.str,
                 host: _builtins.str,
                 id: _builtins.str,
                 info: _builtins.str,
                 state: _builtins.str,
                 time: _builtins.str,
                 user: _builtins.str):
        """
        :param _builtins.str command: Indicates the connection status.
               Generally, the value can be **sleep**, **query**, or **connect**.
        :param _builtins.str db: Indicates the database name.
        :param _builtins.str host: Indicates the IP address and port number.
        :param _builtins.str id: Indicates the session ID
        :param _builtins.str info: Indicates the SQL statement that is being executed.
        :param _builtins.str state: Indicates the status of the SQL statement.
        :param _builtins.str time: Indicates the duration of a connection, in seconds.
        :param _builtins.str user: Indicates the current user.
        """
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter
    def command(self) -> _builtins.str:
        """
        Indicates the connection status.
        Generally, the value can be **sleep**, **query**, or **connect**.
        """
        return pulumi.get(self, "command")

    @_builtins.property
    @pulumi.getter
    def db(self) -> _builtins.str:
        """
        Indicates the database name.
        """
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        Indicates the IP address and port number.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the session ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def info(self) -> _builtins.str:
        """
        Indicates the SQL statement that is being executed.
        """
        return pulumi.get(self, "info")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Indicates the status of the SQL statement.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        Indicates the duration of a connection, in seconds.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter
    def user(self) -> _builtins.str:
        """
        Indicates the current user.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetPhysicalSessionsPhysicalProcessResult(dict):
    def __init__(__self__, *,
                 command: _builtins.str,
                 db: _builtins.str,
                 host: _builtins.str,
                 id: _builtins.int,
                 info: _builtins.str,
                 state: _builtins.str,
                 time: _builtins.int,
                 trx_executed_time: _builtins.int,
                 user: _builtins.str):
        """
        :param _builtins.str command: Indicates the connection status.
               Generally, the value can be **sleep**, **query** or **connect**.
        :param _builtins.str db: Indicates the database name.
        :param _builtins.str host: Indicates the IP address and port number.
        :param _builtins.int id: Indicates the session ID.
        :param _builtins.str info: Indicates the SQL statement that is being executed.
        :param _builtins.str state: Indicates the status of the SQL statement being executed.
        :param _builtins.int time: Indicates the duration of a connection, in seconds.
        :param _builtins.int trx_executed_time: Indicates the duration of a transaction, in seconds.
        :param _builtins.str user: Indicates the current user.
        """
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "trx_executed_time", trx_executed_time)
        pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter
    def command(self) -> _builtins.str:
        """
        Indicates the connection status.
        Generally, the value can be **sleep**, **query** or **connect**.
        """
        return pulumi.get(self, "command")

    @_builtins.property
    @pulumi.getter
    def db(self) -> _builtins.str:
        """
        Indicates the database name.
        """
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        Indicates the IP address and port number.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Indicates the session ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def info(self) -> _builtins.str:
        """
        Indicates the SQL statement that is being executed.
        """
        return pulumi.get(self, "info")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Indicates the status of the SQL statement being executed.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        Indicates the duration of a connection, in seconds.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="trxExecutedTime")
    def trx_executed_time(self) -> _builtins.int:
        """
        Indicates the duration of a transaction, in seconds.
        """
        return pulumi.get(self, "trx_executed_time")

    @_builtins.property
    @pulumi.getter
    def user(self) -> _builtins.str:
        """
        Indicates the current user.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSchemasSchemaResult(dict):
    def __init__(__self__, *,
                 data_nodes: Sequence['outputs.GetSchemasSchemaDataNodeResult'],
                 name: _builtins.str,
                 shard_mode: _builtins.str,
                 shard_number: _builtins.int,
                 status: _builtins.str):
        """
        :param Sequence['GetSchemasSchemaDataNodeArgs'] data_nodes: Indicates the RDS instances associated with the schema.
               The DataNode structure is documented below.
        :param _builtins.str name: Specifies the name of the DDM schema.
        :param _builtins.str shard_mode: Specifies the sharding mode of the schema. Values option: **cluster**, **single**.
        :param _builtins.int shard_number: Indicates the number of shards in the same working mode.
        :param _builtins.str status: Specifies the status of the DDM schema.
        """
        pulumi.set(__self__, "data_nodes", data_nodes)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "shard_mode", shard_mode)
        pulumi.set(__self__, "shard_number", shard_number)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="dataNodes")
    def data_nodes(self) -> Sequence['outputs.GetSchemasSchemaDataNodeResult']:
        """
        Indicates the RDS instances associated with the schema.
        The DataNode structure is documented below.
        """
        return pulumi.get(self, "data_nodes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the DDM schema.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="shardMode")
    def shard_mode(self) -> _builtins.str:
        """
        Specifies the sharding mode of the schema. Values option: **cluster**, **single**.
        """
        return pulumi.get(self, "shard_mode")

    @_builtins.property
    @pulumi.getter(name="shardNumber")
    def shard_number(self) -> _builtins.int:
        """
        Indicates the number of shards in the same working mode.
        """
        return pulumi.get(self, "shard_number")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the DDM schema.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSchemasSchemaDataNodeResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str id: Indicates the node ID of the associated RDS instance.
        :param _builtins.str name: Specifies the name of the DDM schema.
        :param _builtins.str status: Specifies the status of the DDM schema.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID of the associated RDS instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the DDM schema.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the DDM schema.
        """
        return pulumi.get(self, "status")


