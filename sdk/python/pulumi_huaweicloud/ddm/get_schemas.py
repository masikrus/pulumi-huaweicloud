# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSchemasResult',
    'AwaitableGetSchemasResult',
    'get_schemas',
    'get_schemas_output',
]

@pulumi.output_type
class GetSchemasResult:
    """
    A collection of values returned by getSchemas.
    """
    def __init__(__self__, id=None, instance_id=None, name=None, region=None, schemas=None, shard_mode=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if shard_mode and not isinstance(shard_mode, str):
            raise TypeError("Expected argument 'shard_mode' to be a str")
        pulumi.set(__self__, "shard_mode", shard_mode)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the associated RDS instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.GetSchemasSchemaResult']:
        """
        Indicates the list of DDM schema.
        The Schema structure is documented below.
        """
        return pulumi.get(self, "schemas")

    @_builtins.property
    @pulumi.getter(name="shardMode")
    def shard_mode(self) -> Optional[_builtins.str]:
        """
        Indicates the sharding mode of the schema.
        """
        return pulumi.get(self, "shard_mode")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the associated RDS instance
        """
        return pulumi.get(self, "status")


class AwaitableGetSchemasResult(GetSchemasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchemasResult(
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            schemas=self.schemas,
            shard_mode=self.shard_mode,
            status=self.status)


def get_schemas(instance_id: Optional[_builtins.str] = None,
                name: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                shard_mode: Optional[_builtins.str] = None,
                status: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchemasResult:
    """
    Use this data source to get the list of DDM schemas.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    ddm_instance_id = config.require_object("ddmInstanceId")
    ddm_schema_name = config.require_object("ddmSchemaName")
    test = huaweicloud.ddm.get_schemas(instance_id=ddm_instance_id,
        name=ddm_schema_name)
    ```


    :param _builtins.str instance_id: Specifies the ID of DDM instance.
    :param _builtins.str name: Specifies the name of the DDM schema.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str shard_mode: Specifies the sharding mode of the schema. Values option: **cluster**, **single**.
    :param _builtins.str status: Specifies the status of the DDM schema.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['shardMode'] = shard_mode
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ddm/getSchemas:getSchemas', __args__, opts=opts, typ=GetSchemasResult).value

    return AwaitableGetSchemasResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        schemas=pulumi.get(__ret__, 'schemas'),
        shard_mode=pulumi.get(__ret__, 'shard_mode'),
        status=pulumi.get(__ret__, 'status'))
def get_schemas_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       shard_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchemasResult]:
    """
    Use this data source to get the list of DDM schemas.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    ddm_instance_id = config.require_object("ddmInstanceId")
    ddm_schema_name = config.require_object("ddmSchemaName")
    test = huaweicloud.ddm.get_schemas(instance_id=ddm_instance_id,
        name=ddm_schema_name)
    ```


    :param _builtins.str instance_id: Specifies the ID of DDM instance.
    :param _builtins.str name: Specifies the name of the DDM schema.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str shard_mode: Specifies the sharding mode of the schema. Values option: **cluster**, **single**.
    :param _builtins.str status: Specifies the status of the DDM schema.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['shardMode'] = shard_mode
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ddm/getSchemas:getSchemas', __args__, opts=opts, typ=GetSchemasResult)
    return __ret__.apply(lambda __response__: GetSchemasResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        schemas=pulumi.get(__response__, 'schemas'),
        shard_mode=pulumi.get(__response__, 'shard_mode'),
        status=pulumi.get(__response__, 'status')))
