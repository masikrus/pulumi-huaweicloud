# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SchemaArgs', 'Schema']

@pulumi.input_type
class SchemaArgs:
    def __init__(__self__, *,
                 data_nodes: pulumi.Input[Sequence[pulumi.Input['SchemaDataNodeArgs']]],
                 instance_id: pulumi.Input[_builtins.str],
                 shard_mode: pulumi.Input[_builtins.str],
                 shard_number: pulumi.Input[_builtins.int],
                 delete_rds_data: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Schema resource.
        :param pulumi.Input[Sequence[pulumi.Input['SchemaDataNodeArgs']]] data_nodes: Specifies the RDS instances associated with the schema.
               
               Changing this parameter will create a new resource.
               The data_nodes structure is documented below.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDM instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] shard_mode: Specifies the sharding mode of the schema. Values option:
               + **cluster**: indicates that the schema is in sharded mode.
               + **single**: indicates that the schema is in non-sharded mode.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] shard_number: Specifies the number of shards in the same working mode.
               The value must be greater than or equal to the number of associated RDS instances and less than or equal
               to the number of associated instances multiplied by 64.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] delete_rds_data: Specifies whether data stored on the associated DB instances is deleted.
               
               <a name="data_nodes_struct"></a>
               The `data_nodes` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DDM schema.
               An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
               digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "data_nodes", data_nodes)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "shard_mode", shard_mode)
        pulumi.set(__self__, "shard_number", shard_number)
        if delete_rds_data is not None:
            pulumi.set(__self__, "delete_rds_data", delete_rds_data)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="dataNodes")
    def data_nodes(self) -> pulumi.Input[Sequence[pulumi.Input['SchemaDataNodeArgs']]]:
        """
        Specifies the RDS instances associated with the schema.

        Changing this parameter will create a new resource.
        The data_nodes structure is documented below.
        """
        return pulumi.get(self, "data_nodes")

    @data_nodes.setter
    def data_nodes(self, value: pulumi.Input[Sequence[pulumi.Input['SchemaDataNodeArgs']]]):
        pulumi.set(self, "data_nodes", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a DDM instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="shardMode")
    def shard_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the sharding mode of the schema. Values option:
        + **cluster**: indicates that the schema is in sharded mode.
        + **single**: indicates that the schema is in non-sharded mode.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "shard_mode")

    @shard_mode.setter
    def shard_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "shard_mode", value)

    @_builtins.property
    @pulumi.getter(name="shardNumber")
    def shard_number(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of shards in the same working mode.
        The value must be greater than or equal to the number of associated RDS instances and less than or equal
        to the number of associated instances multiplied by 64.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "shard_number")

    @shard_number.setter
    def shard_number(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "shard_number", value)

    @_builtins.property
    @pulumi.getter(name="deleteRdsData")
    def delete_rds_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether data stored on the associated DB instances is deleted.

        <a name="data_nodes_struct"></a>
        The `data_nodes` block supports:
        """
        return pulumi.get(self, "delete_rds_data")

    @delete_rds_data.setter
    def delete_rds_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_rds_data", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DDM schema.
        An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
        digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SchemaState:
    def __init__(__self__, *,
                 data_nodes: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaDataNodeArgs']]]] = None,
                 data_vips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 delete_rds_data: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 shard_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 shard_number: Optional[pulumi.Input[_builtins.int]] = None,
                 shards: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaShardArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Schema resources.
        :param pulumi.Input[Sequence[pulumi.Input['SchemaDataNodeArgs']]] data_nodes: Specifies the RDS instances associated with the schema.
               
               Changing this parameter will create a new resource.
               The data_nodes structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] data_vips: Indicates the IP address and port number for connecting to the schema.
        :param pulumi.Input[_builtins.str] delete_rds_data: Specifies whether data stored on the associated DB instances is deleted.
               
               <a name="data_nodes_struct"></a>
               The `data_nodes` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDM instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DDM schema.
               An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
               digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] shard_mode: Specifies the sharding mode of the schema. Values option:
               + **cluster**: indicates that the schema is in sharded mode.
               + **single**: indicates that the schema is in non-sharded mode.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] shard_number: Specifies the number of shards in the same working mode.
               The value must be greater than or equal to the number of associated RDS instances and less than or equal
               to the number of associated instances multiplied by 64.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['SchemaShardArgs']]] shards: Indicates the sharding information of the schema.
               The shards structure is documented below.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the associated RDS instance.
        """
        if data_nodes is not None:
            pulumi.set(__self__, "data_nodes", data_nodes)
        if data_vips is not None:
            pulumi.set(__self__, "data_vips", data_vips)
        if delete_rds_data is not None:
            pulumi.set(__self__, "delete_rds_data", delete_rds_data)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if shard_mode is not None:
            pulumi.set(__self__, "shard_mode", shard_mode)
        if shard_number is not None:
            pulumi.set(__self__, "shard_number", shard_number)
        if shards is not None:
            pulumi.set(__self__, "shards", shards)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="dataNodes")
    def data_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaDataNodeArgs']]]]:
        """
        Specifies the RDS instances associated with the schema.

        Changing this parameter will create a new resource.
        The data_nodes structure is documented below.
        """
        return pulumi.get(self, "data_nodes")

    @data_nodes.setter
    def data_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaDataNodeArgs']]]]):
        pulumi.set(self, "data_nodes", value)

    @_builtins.property
    @pulumi.getter(name="dataVips")
    def data_vips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the IP address and port number for connecting to the schema.
        """
        return pulumi.get(self, "data_vips")

    @data_vips.setter
    def data_vips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "data_vips", value)

    @_builtins.property
    @pulumi.getter(name="deleteRdsData")
    def delete_rds_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether data stored on the associated DB instances is deleted.

        <a name="data_nodes_struct"></a>
        The `data_nodes` block supports:
        """
        return pulumi.get(self, "delete_rds_data")

    @delete_rds_data.setter
    def delete_rds_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_rds_data", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a DDM instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DDM schema.
        An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
        digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="shardMode")
    def shard_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the sharding mode of the schema. Values option:
        + **cluster**: indicates that the schema is in sharded mode.
        + **single**: indicates that the schema is in non-sharded mode.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "shard_mode")

    @shard_mode.setter
    def shard_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shard_mode", value)

    @_builtins.property
    @pulumi.getter(name="shardNumber")
    def shard_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of shards in the same working mode.
        The value must be greater than or equal to the number of associated RDS instances and less than or equal
        to the number of associated instances multiplied by 64.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "shard_number")

    @shard_number.setter
    def shard_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "shard_number", value)

    @_builtins.property
    @pulumi.getter
    def shards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchemaShardArgs']]]]:
        """
        Indicates the sharding information of the schema.
        The shards structure is documented below.
        """
        return pulumi.get(self, "shards")

    @shards.setter
    def shards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchemaShardArgs']]]]):
        pulumi.set(self, "shards", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the associated RDS instance.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:ddm/schema:Schema")
class Schema(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchemaDataNodeArgs', 'SchemaDataNodeArgsDict']]]]] = None,
                 delete_rds_data: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 shard_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 shard_number: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a DDM schema resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        rds_instance_id = config.require_object("rdsInstanceId")
        rds_password = config.require_object("rdsPassword")
        test = huaweicloud.ddm.Schema("test",
            instance_id=instance_id,
            name="test_schema",
            shard_mode="single",
            shard_number=1,
            data_nodes=[{
                "id": rds_instance_id,
                "admin_user": "root",
                "admin_password": rds_password,
            }])
        ```

        ## Import

        The DDM schema can be imported using the `<instance_id>/<name>`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ddm/schema:Schema test <instance_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `data_nodes/admin_user`,

        `data_nodes/admin_password`. It is generally recommended running `pulumi preview` after importing a DDM schema. You can

        then decide if changes should be applied to the DDM schema, or the resource definition should be updated to align with

        the DDM schema. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ddm_schema" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              data_nodes.0.admin_user, data_nodes.0.admin_password
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SchemaDataNodeArgs', 'SchemaDataNodeArgsDict']]]] data_nodes: Specifies the RDS instances associated with the schema.
               
               Changing this parameter will create a new resource.
               The data_nodes structure is documented below.
        :param pulumi.Input[_builtins.str] delete_rds_data: Specifies whether data stored on the associated DB instances is deleted.
               
               <a name="data_nodes_struct"></a>
               The `data_nodes` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDM instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DDM schema.
               An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
               digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] shard_mode: Specifies the sharding mode of the schema. Values option:
               + **cluster**: indicates that the schema is in sharded mode.
               + **single**: indicates that the schema is in non-sharded mode.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] shard_number: Specifies the number of shards in the same working mode.
               The value must be greater than or equal to the number of associated RDS instances and less than or equal
               to the number of associated instances multiplied by 64.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SchemaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DDM schema resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        rds_instance_id = config.require_object("rdsInstanceId")
        rds_password = config.require_object("rdsPassword")
        test = huaweicloud.ddm.Schema("test",
            instance_id=instance_id,
            name="test_schema",
            shard_mode="single",
            shard_number=1,
            data_nodes=[{
                "id": rds_instance_id,
                "admin_user": "root",
                "admin_password": rds_password,
            }])
        ```

        ## Import

        The DDM schema can be imported using the `<instance_id>/<name>`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ddm/schema:Schema test <instance_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `data_nodes/admin_user`,

        `data_nodes/admin_password`. It is generally recommended running `pulumi preview` after importing a DDM schema. You can

        then decide if changes should be applied to the DDM schema, or the resource definition should be updated to align with

        the DDM schema. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_ddm_schema" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              data_nodes.0.admin_user, data_nodes.0.admin_password
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param SchemaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SchemaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchemaDataNodeArgs', 'SchemaDataNodeArgsDict']]]]] = None,
                 delete_rds_data: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 shard_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 shard_number: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SchemaArgs.__new__(SchemaArgs)

            if data_nodes is None and not opts.urn:
                raise TypeError("Missing required property 'data_nodes'")
            __props__.__dict__["data_nodes"] = data_nodes
            __props__.__dict__["delete_rds_data"] = delete_rds_data
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if shard_mode is None and not opts.urn:
                raise TypeError("Missing required property 'shard_mode'")
            __props__.__dict__["shard_mode"] = shard_mode
            if shard_number is None and not opts.urn:
                raise TypeError("Missing required property 'shard_number'")
            __props__.__dict__["shard_number"] = shard_number
            __props__.__dict__["data_vips"] = None
            __props__.__dict__["shards"] = None
            __props__.__dict__["status"] = None
        super(Schema, __self__).__init__(
            'huaweicloud:ddm/schema:Schema',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchemaDataNodeArgs', 'SchemaDataNodeArgsDict']]]]] = None,
            data_vips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            delete_rds_data: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            shard_mode: Optional[pulumi.Input[_builtins.str]] = None,
            shard_number: Optional[pulumi.Input[_builtins.int]] = None,
            shards: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchemaShardArgs', 'SchemaShardArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'Schema':
        """
        Get an existing Schema resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SchemaDataNodeArgs', 'SchemaDataNodeArgsDict']]]] data_nodes: Specifies the RDS instances associated with the schema.
               
               Changing this parameter will create a new resource.
               The data_nodes structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] data_vips: Indicates the IP address and port number for connecting to the schema.
        :param pulumi.Input[_builtins.str] delete_rds_data: Specifies whether data stored on the associated DB instances is deleted.
               
               <a name="data_nodes_struct"></a>
               The `data_nodes` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of a DDM instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DDM schema.
               An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
               digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] shard_mode: Specifies the sharding mode of the schema. Values option:
               + **cluster**: indicates that the schema is in sharded mode.
               + **single**: indicates that the schema is in non-sharded mode.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] shard_number: Specifies the number of shards in the same working mode.
               The value must be greater than or equal to the number of associated RDS instances and less than or equal
               to the number of associated instances multiplied by 64.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SchemaShardArgs', 'SchemaShardArgsDict']]]] shards: Indicates the sharding information of the schema.
               The shards structure is documented below.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the associated RDS instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SchemaState.__new__(_SchemaState)

        __props__.__dict__["data_nodes"] = data_nodes
        __props__.__dict__["data_vips"] = data_vips
        __props__.__dict__["delete_rds_data"] = delete_rds_data
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["shard_mode"] = shard_mode
        __props__.__dict__["shard_number"] = shard_number
        __props__.__dict__["shards"] = shards
        __props__.__dict__["status"] = status
        return Schema(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dataNodes")
    def data_nodes(self) -> pulumi.Output[Sequence['outputs.SchemaDataNode']]:
        """
        Specifies the RDS instances associated with the schema.

        Changing this parameter will create a new resource.
        The data_nodes structure is documented below.
        """
        return pulumi.get(self, "data_nodes")

    @_builtins.property
    @pulumi.getter(name="dataVips")
    def data_vips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the IP address and port number for connecting to the schema.
        """
        return pulumi.get(self, "data_vips")

    @_builtins.property
    @pulumi.getter(name="deleteRdsData")
    def delete_rds_data(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether data stored on the associated DB instances is deleted.

        <a name="data_nodes_struct"></a>
        The `data_nodes` block supports:
        """
        return pulumi.get(self, "delete_rds_data")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a DDM instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the DDM schema.
        An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
        digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="shardMode")
    def shard_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the sharding mode of the schema. Values option:
        + **cluster**: indicates that the schema is in sharded mode.
        + **single**: indicates that the schema is in non-sharded mode.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "shard_mode")

    @_builtins.property
    @pulumi.getter(name="shardNumber")
    def shard_number(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of shards in the same working mode.
        The value must be greater than or equal to the number of associated RDS instances and less than or equal
        to the number of associated instances multiplied by 64.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "shard_number")

    @_builtins.property
    @pulumi.getter
    def shards(self) -> pulumi.Output[Sequence['outputs.SchemaShard']]:
        """
        Indicates the sharding information of the schema.
        The shards structure is documented below.
        """
        return pulumi.get(self, "shards")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the associated RDS instance.
        """
        return pulumi.get(self, "status")

