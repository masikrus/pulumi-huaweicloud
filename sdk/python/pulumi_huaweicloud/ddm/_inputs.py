# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccountSchemaArgs',
    'AccountSchemaArgsDict',
    'InstanceNodeArgs',
    'InstanceNodeArgsDict',
    'InstanceParameterArgs',
    'InstanceParameterArgsDict',
    'InstanceReadStrategyReadWeightArgs',
    'InstanceReadStrategyReadWeightArgsDict',
    'SchemaDataNodeArgs',
    'SchemaDataNodeArgsDict',
    'SchemaShardArgs',
    'SchemaShardArgsDict',
]

MYPY = False

if not MYPY:
    class AccountSchemaArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the DDM account.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the associated schema.
        """
elif False:
    AccountSchemaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccountSchemaArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] description: Specifies the description of the DDM account.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the associated schema.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the DDM account.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the associated schema.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class InstanceNodeArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the IP address of the DDM instance node.
        """
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the port of the DDM instance node.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the status of the DDM instance node.
        """
elif False:
    InstanceNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceNodeArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip: Indicates the IP address of the DDM instance node.
        :param pulumi.Input[_builtins.str] port: Indicates the port of the DDM instance node.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the DDM instance node.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the IP address of the DDM instance node.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the port of the DDM instance node.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the DDM instance node.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class InstanceParameterArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the parameter value.
        """
elif False:
    InstanceParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        :param pulumi.Input[_builtins.str] value: Specifies the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InstanceReadStrategyReadWeightArgsDict(TypedDict):
        db_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the DB instance associated with the DDM schema.
        """
        weight: pulumi.Input[_builtins.int]
        """
        Specifies read weight of the DB instance associated with the DDM schema.
        """
elif False:
    InstanceReadStrategyReadWeightArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceReadStrategyReadWeightArgs:
    def __init__(__self__, *,
                 db_id: pulumi.Input[_builtins.str],
                 weight: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.str] db_id: Specifies the ID of the DB instance associated with the DDM schema.
        :param pulumi.Input[_builtins.int] weight: Specifies read weight of the DB instance associated with the DDM schema.
        """
        pulumi.set(__self__, "db_id", db_id)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="dbId")
    def db_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the DB instance associated with the DDM schema.
        """
        return pulumi.get(self, "db_id")

    @db_id.setter
    def db_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "db_id", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies read weight of the DB instance associated with the DDM schema.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class SchemaDataNodeArgsDict(TypedDict):
        admin_password: pulumi.Input[_builtins.str]
        """
        Specifies the password for logging in to the associated RDS instance.
        """
        admin_user: pulumi.Input[_builtins.str]
        """
        Specifies the username for logging in to the associated RDS instance.
        """
        id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the RDS instance associated with the schema.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the DDM schema.
        An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
        digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.

        Changing this parameter will create a new resource.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the status of the associated RDS instance.
        """
elif False:
    SchemaDataNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaDataNodeArgs:
    def __init__(__self__, *,
                 admin_password: pulumi.Input[_builtins.str],
                 admin_user: pulumi.Input[_builtins.str],
                 id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] admin_password: Specifies the password for logging in to the associated RDS instance.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the username for logging in to the associated RDS instance.
        :param pulumi.Input[_builtins.str] id: Specifies the ID of the RDS instance associated with the schema.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DDM schema.
               An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
               digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the associated RDS instance.
        """
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "admin_user", admin_user)
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the password for logging in to the associated RDS instance.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "admin_password", value)

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the username for logging in to the associated RDS instance.
        """
        return pulumi.get(self, "admin_user")

    @admin_user.setter
    def admin_user(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "admin_user", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the RDS instance associated with the schema.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DDM schema.
        An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
        digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the associated RDS instance.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class SchemaShardArgsDict(TypedDict):
        db_slot: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the number of shards.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the RDS instance associated with the schema.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the DDM schema.
        An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
        digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.

        Changing this parameter will create a new resource.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the status of the associated RDS instance.
        """
elif False:
    SchemaShardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaShardArgs:
    def __init__(__self__, *,
                 db_slot: Optional[pulumi.Input[_builtins.int]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] db_slot: Indicates the number of shards.
        :param pulumi.Input[_builtins.str] id: Specifies the ID of the RDS instance associated with the schema.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the DDM schema.
               An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
               digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the associated RDS instance.
        """
        if db_slot is not None:
            pulumi.set(__self__, "db_slot", db_slot)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="dbSlot")
    def db_slot(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of shards.
        """
        return pulumi.get(self, "db_slot")

    @db_slot.setter
    def db_slot(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "db_slot", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the RDS instance associated with the schema.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the DDM schema.
        An instance name starts with a letter, consists of `2` to `48` characters, and can contain only lowercase letters,
        digits, and underscores (_). Cannot contain keywords information_schema, mysql, performance_schema, or sys.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the associated RDS instance.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


