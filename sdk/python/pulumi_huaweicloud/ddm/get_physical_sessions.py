# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPhysicalSessionsResult',
    'AwaitableGetPhysicalSessionsResult',
    'get_physical_sessions',
    'get_physical_sessions_output',
]

@pulumi.output_type
class GetPhysicalSessionsResult:
    """
    A collection of values returned by getPhysicalSessions.
    """
    def __init__(__self__, id=None, instance_id=None, keyword=None, physical_processes=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if keyword and not isinstance(keyword, str):
            raise TypeError("Expected argument 'keyword' to be a str")
        pulumi.set(__self__, "keyword", keyword)
        if physical_processes and not isinstance(physical_processes, list):
            raise TypeError("Expected argument 'physical_processes' to be a list")
        pulumi.set(__self__, "physical_processes", physical_processes)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def keyword(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "keyword")

    @_builtins.property
    @pulumi.getter(name="physicalProcesses")
    def physical_processes(self) -> Sequence['outputs.GetPhysicalSessionsPhysicalProcessResult']:
        """
        Indicates the physical session information list.
        """
        return pulumi.get(self, "physical_processes")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetPhysicalSessionsResult(GetPhysicalSessionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPhysicalSessionsResult(
            id=self.id,
            instance_id=self.instance_id,
            keyword=self.keyword,
            physical_processes=self.physical_processes,
            region=self.region)


def get_physical_sessions(instance_id: Optional[_builtins.str] = None,
                          keyword: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPhysicalSessionsResult:
    """
    Use this data source to get the physical sessions of a DDM instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.ddm.get_physical_sessions(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the associated RDS instance.
    :param _builtins.str keyword: Specifies the Keyword filtered by the sessions result. It can contain a maximum of 255 characters.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['keyword'] = keyword
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ddm/getPhysicalSessions:getPhysicalSessions', __args__, opts=opts, typ=GetPhysicalSessionsResult).value

    return AwaitableGetPhysicalSessionsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        keyword=pulumi.get(__ret__, 'keyword'),
        physical_processes=pulumi.get(__ret__, 'physical_processes'),
        region=pulumi.get(__ret__, 'region'))
def get_physical_sessions_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 keyword: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPhysicalSessionsResult]:
    """
    Use this data source to get the physical sessions of a DDM instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.ddm.get_physical_sessions(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the associated RDS instance.
    :param _builtins.str keyword: Specifies the Keyword filtered by the sessions result. It can contain a maximum of 255 characters.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['keyword'] = keyword
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ddm/getPhysicalSessions:getPhysicalSessions', __args__, opts=opts, typ=GetPhysicalSessionsResult)
    return __ret__.apply(lambda __response__: GetPhysicalSessionsResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        keyword=pulumi.get(__response__, 'keyword'),
        physical_processes=pulumi.get(__response__, 'physical_processes'),
        region=pulumi.get(__response__, 'region')))
