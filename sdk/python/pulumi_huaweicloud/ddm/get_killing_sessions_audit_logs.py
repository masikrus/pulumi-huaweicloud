# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetKillingSessionsAuditLogsResult',
    'AwaitableGetKillingSessionsAuditLogsResult',
    'get_killing_sessions_audit_logs',
    'get_killing_sessions_audit_logs_output',
]

@pulumi.output_type
class GetKillingSessionsAuditLogsResult:
    """
    A collection of values returned by getKillingSessionsAuditLogs.
    """
    def __init__(__self__, end_time=None, id=None, instance_id=None, process_audit_logs=None, region=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if process_audit_logs and not isinstance(process_audit_logs, list):
            raise TypeError("Expected argument 'process_audit_logs' to be a list")
        pulumi.set(__self__, "process_audit_logs", process_audit_logs)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the DDM instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="processAuditLogs")
    def process_audit_logs(self) -> Sequence['outputs.GetKillingSessionsAuditLogsProcessAuditLogResult']:
        """
        Indicates the list of killing sessions audit log.
        """
        return pulumi.get(self, "process_audit_logs")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        return pulumi.get(self, "start_time")


class AwaitableGetKillingSessionsAuditLogsResult(GetKillingSessionsAuditLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKillingSessionsAuditLogsResult(
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            process_audit_logs=self.process_audit_logs,
            region=self.region,
            start_time=self.start_time)


def get_killing_sessions_audit_logs(end_time: Optional[_builtins.str] = None,
                                    instance_id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    start_time: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKillingSessionsAuditLogsResult:
    """
    Use this data source to get the list of killing sessions audit log.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.ddm.get_killing_sessions_audit_logs(instance_id=instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str end_time: Specifies the end time in UTC, accurate to milliseconds.
           The format is **yyyy-mm-ddThh:mm:ssZ**. The interval between the start time and the end time must be no more than 7 days.
    :param _builtins.str instance_id: Specifies the DDM instance ID or ID of the associated RDS instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time in UTC, accurate to milliseconds.
           The format is **yyyy-mm-ddThh:mm:ssZ**.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ddm/getKillingSessionsAuditLogs:getKillingSessionsAuditLogs', __args__, opts=opts, typ=GetKillingSessionsAuditLogsResult).value

    return AwaitableGetKillingSessionsAuditLogsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        process_audit_logs=pulumi.get(__ret__, 'process_audit_logs'),
        region=pulumi.get(__ret__, 'region'),
        start_time=pulumi.get(__ret__, 'start_time'))
def get_killing_sessions_audit_logs_output(end_time: Optional[pulumi.Input[_builtins.str]] = None,
                                           instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           start_time: Optional[pulumi.Input[_builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKillingSessionsAuditLogsResult]:
    """
    Use this data source to get the list of killing sessions audit log.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.ddm.get_killing_sessions_audit_logs(instance_id=instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str end_time: Specifies the end time in UTC, accurate to milliseconds.
           The format is **yyyy-mm-ddThh:mm:ssZ**. The interval between the start time and the end time must be no more than 7 days.
    :param _builtins.str instance_id: Specifies the DDM instance ID or ID of the associated RDS instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time in UTC, accurate to milliseconds.
           The format is **yyyy-mm-ddThh:mm:ssZ**.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ddm/getKillingSessionsAuditLogs:getKillingSessionsAuditLogs', __args__, opts=opts, typ=GetKillingSessionsAuditLogsResult)
    return __ret__.apply(lambda __response__: GetKillingSessionsAuditLogsResult(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        process_audit_logs=pulumi.get(__response__, 'process_audit_logs'),
        region=pulumi.get(__response__, 'region'),
        start_time=pulumi.get(__response__, 'start_time')))
