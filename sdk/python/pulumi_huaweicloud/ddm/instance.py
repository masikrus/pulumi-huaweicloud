# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 availability_zones: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 engine_id: pulumi.Input[_builtins.str],
                 flavor_id: pulumi.Input[_builtins.str],
                 node_num: pulumi.Input[_builtins.int],
                 security_group_id: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 admin_password: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_rds_data: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 param_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] availability_zones: Specifies the list of availability zones.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] engine_id: Specifies the ID of an Engine.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the ID of a product.
        :param pulumi.Input[_builtins.int] node_num: Specifies the number of nodes.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the ID of a security group.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of a subnet.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of a VPC.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] admin_password: Specifies the password of the administrator.
               The password consists of 8 to 32 characters, and must be a combination of uppercase letters,
               lowercase letters, digits, and the following special characters: ~!@#%^*-_=+?.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the username of the administrator.
               The username starts with a letter, consists of 1 to 32 characters, and can contain only letters,
               digits, and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled.
               Valid values are **true** and **false**. Defaults to **false**.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the DDM instance.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] delete_rds_data: Specifies whether data stored on the associated DB instances is deleted.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id.
               Value 0 indicates the default enterprise project.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        :param pulumi.Input[_builtins.str] param_group_id: Specifies the ID of parameter group.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]] parameters: Specify an array of one or more parameters to be set to the instance after launched.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "engine_id", engine_id)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_user is not None:
            pulumi.set(__self__, "admin_user", admin_user)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if delete_rds_data is not None:
            pulumi.set(__self__, "delete_rds_data", delete_rds_data)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if param_group_id is not None:
            pulumi.set(__self__, "param_group_id", param_group_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of availability zones.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "availability_zones", value)

    @_builtins.property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of an Engine.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "engine_id", value)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a product.
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of nodes.
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "node_num", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a security group.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a subnet.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a VPC.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the password of the administrator.
        The password consists of 8 to 32 characters, and must be a combination of uppercase letters,
        lowercase letters, digits, and the following special characters: ~!@#%^*-_=+?.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_password", value)

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the username of the administrator.
        The username starts with a letter, consists of 1 to 32 characters, and can contain only letters,
        digits, and underscores (_).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "admin_user")

    @admin_user.setter
    def admin_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_user", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled.
        Valid values are **true** and **false**. Defaults to **false**.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the DDM instance.
        Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="deleteRdsData")
    def delete_rds_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether data stored on the associated DB instances is deleted.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "delete_rds_data")

    @delete_rds_data.setter
    def delete_rds_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_rds_data", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project id.
        Value 0 indicates the default enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="paramGroupId")
    def param_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of parameter group.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "param_group_id")

    @param_group_id.setter
    def param_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "param_group_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]]:
        """
        Specify an array of one or more parameters to be set to the instance after launched.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the charging period.
        If `period_unit` is set to **month**, the value ranges from 1 to 9.
        If `period_unit` is set to **year**, the value ranges from 1 to 3.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time zone.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 access_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 access_port: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_password: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_rds_data: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNodeArgs']]]] = None,
                 param_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[_builtins.str] access_ip: Indicates the address for accessing the DDM instance.
        :param pulumi.Input[_builtins.str] access_port: Indicates the port for accessing the DDM instance.
        :param pulumi.Input[_builtins.str] admin_password: Specifies the password of the administrator.
               The password consists of 8 to 32 characters, and must be a combination of uppercase letters,
               lowercase letters, digits, and the following special characters: ~!@#%^*-_=+?.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the username of the administrator.
               The username starts with a letter, consists of 1 to 32 characters, and can contain only letters,
               digits, and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled.
               Valid values are **true** and **false**. Defaults to **false**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] availability_zones: Specifies the list of availability zones.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the DDM instance.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] delete_rds_data: Specifies whether data stored on the associated DB instances is deleted.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] engine_id: Specifies the ID of an Engine.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] engine_version: Indicates the engine version.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id.
               Value 0 indicates the default enterprise project.
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the ID of a product.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        :param pulumi.Input[_builtins.int] node_num: Specifies the number of nodes.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceNodeArgs']]] nodes: Indicates the node information.
               The NodeInfoRef structure is documented below.
        :param pulumi.Input[_builtins.str] param_group_id: Specifies the ID of parameter group.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]] parameters: Specify an array of one or more parameters to be set to the instance after launched.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the ID of a security group.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the DDM instance node.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of a subnet.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of a VPC.
               
               Changing this parameter will create a new resource.
        """
        if access_ip is not None:
            pulumi.set(__self__, "access_ip", access_ip)
        if access_port is not None:
            pulumi.set(__self__, "access_port", access_port)
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_user is not None:
            pulumi.set(__self__, "admin_user", admin_user)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if delete_rds_data is not None:
            pulumi.set(__self__, "delete_rds_data", delete_rds_data)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if flavor_id is not None:
            pulumi.set(__self__, "flavor_id", flavor_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_num is not None:
            pulumi.set(__self__, "node_num", node_num)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if param_group_id is not None:
            pulumi.set(__self__, "param_group_id", param_group_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="accessIp")
    def access_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the address for accessing the DDM instance.
        """
        return pulumi.get(self, "access_ip")

    @access_ip.setter
    def access_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_ip", value)

    @_builtins.property
    @pulumi.getter(name="accessPort")
    def access_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the port for accessing the DDM instance.
        """
        return pulumi.get(self, "access_port")

    @access_port.setter
    def access_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_port", value)

    @_builtins.property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the password of the administrator.
        The password consists of 8 to 32 characters, and must be a combination of uppercase letters,
        lowercase letters, digits, and the following special characters: ~!@#%^*-_=+?.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_password", value)

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the username of the administrator.
        The username starts with a letter, consists of 1 to 32 characters, and can contain only letters,
        digits, and underscores (_).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "admin_user")

    @admin_user.setter
    def admin_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_user", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled.
        Valid values are **true** and **false**. Defaults to **false**.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of availability zones.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "availability_zones", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the DDM instance.
        Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="deleteRdsData")
    def delete_rds_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether data stored on the associated DB instances is deleted.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "delete_rds_data")

    @delete_rds_data.setter
    def delete_rds_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_rds_data", value)

    @_builtins.property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of an Engine.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_id", value)

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the engine version.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_version", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project id.
        Value 0 indicates the default enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a product.
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of nodes.
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "node_num", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNodeArgs']]]]:
        """
        Indicates the node information.
        The NodeInfoRef structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter(name="paramGroupId")
    def param_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of parameter group.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "param_group_id")

    @param_group_id.setter
    def param_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "param_group_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]]:
        """
        Specify an array of one or more parameters to be set to the instance after launched.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the charging period.
        If `period_unit` is set to **month**, the value ranges from 1 to 9.
        If `period_unit` is set to **year**, the value ranges from 1 to 3.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging period unit.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a security group.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the DDM instance node.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a subnet.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time zone.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_zone", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a VPC.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:ddm/instance:Instance")
class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_password: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_rds_data: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 param_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceParameterArgs', 'InstanceParameterArgsDict']]]]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages DDM instance resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        flavor_id = config.require_object("flavorId")
        engine_id = config.require_object("engineId")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        security_group_id = config.require_object("securityGroupId")
        availability_zone = config.require_object("availabilityZone")
        test = huaweicloud.ddm.Instance("test",
            name="ddm_test",
            flavor_id=flavor_id,
            node_num=2,
            engine_id=engine_id,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            security_group_id=security_group_id,
            availability_zones=[availability_zone])
        ```

        ## Import

        The DDM instance can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ddm/instance:Instance test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] admin_password: Specifies the password of the administrator.
               The password consists of 8 to 32 characters, and must be a combination of uppercase letters,
               lowercase letters, digits, and the following special characters: ~!@#%^*-_=+?.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the username of the administrator.
               The username starts with a letter, consists of 1 to 32 characters, and can contain only letters,
               digits, and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled.
               Valid values are **true** and **false**. Defaults to **false**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] availability_zones: Specifies the list of availability zones.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the DDM instance.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] delete_rds_data: Specifies whether data stored on the associated DB instances is deleted.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] engine_id: Specifies the ID of an Engine.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id.
               Value 0 indicates the default enterprise project.
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the ID of a product.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        :param pulumi.Input[_builtins.int] node_num: Specifies the number of nodes.
        :param pulumi.Input[_builtins.str] param_group_id: Specifies the ID of parameter group.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InstanceParameterArgs', 'InstanceParameterArgsDict']]]] parameters: Specify an array of one or more parameters to be set to the instance after launched.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the ID of a security group.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of a subnet.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of a VPC.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages DDM instance resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        flavor_id = config.require_object("flavorId")
        engine_id = config.require_object("engineId")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        security_group_id = config.require_object("securityGroupId")
        availability_zone = config.require_object("availabilityZone")
        test = huaweicloud.ddm.Instance("test",
            name="ddm_test",
            flavor_id=flavor_id,
            node_num=2,
            engine_id=engine_id,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            security_group_id=security_group_id,
            availability_zones=[availability_zone])
        ```

        ## Import

        The DDM instance can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ddm/instance:Instance test <id>
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_password: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_user: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_rds_data: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 param_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceParameterArgs', 'InstanceParameterArgsDict']]]]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["admin_password"] = None if admin_password is None else pulumi.Output.secret(admin_password)
            __props__.__dict__["admin_user"] = admin_user
            __props__.__dict__["auto_renew"] = auto_renew
            if availability_zones is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zones'")
            __props__.__dict__["availability_zones"] = availability_zones
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["delete_rds_data"] = delete_rds_data
            if engine_id is None and not opts.urn:
                raise TypeError("Missing required property 'engine_id'")
            __props__.__dict__["engine_id"] = engine_id
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if flavor_id is None and not opts.urn:
                raise TypeError("Missing required property 'flavor_id'")
            __props__.__dict__["flavor_id"] = flavor_id
            __props__.__dict__["name"] = name
            if node_num is None and not opts.urn:
                raise TypeError("Missing required property 'node_num'")
            __props__.__dict__["node_num"] = node_num
            __props__.__dict__["param_group_id"] = param_group_id
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["period"] = period
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["region"] = region
            if security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id'")
            __props__.__dict__["security_group_id"] = security_group_id
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["time_zone"] = time_zone
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["access_ip"] = None
            __props__.__dict__["access_port"] = None
            __props__.__dict__["engine_version"] = None
            __props__.__dict__["nodes"] = None
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["adminPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'huaweicloud:ddm/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_ip: Optional[pulumi.Input[_builtins.str]] = None,
            access_port: Optional[pulumi.Input[_builtins.str]] = None,
            admin_password: Optional[pulumi.Input[_builtins.str]] = None,
            admin_user: Optional[pulumi.Input[_builtins.str]] = None,
            auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
            availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            delete_rds_data: Optional[pulumi.Input[_builtins.str]] = None,
            engine_id: Optional[pulumi.Input[_builtins.str]] = None,
            engine_version: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            node_num: Optional[pulumi.Input[_builtins.int]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceNodeArgs', 'InstanceNodeArgsDict']]]]] = None,
            param_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceParameterArgs', 'InstanceParameterArgsDict']]]]] = None,
            period: Optional[pulumi.Input[_builtins.int]] = None,
            period_unit: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            time_zone: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_ip: Indicates the address for accessing the DDM instance.
        :param pulumi.Input[_builtins.str] access_port: Indicates the port for accessing the DDM instance.
        :param pulumi.Input[_builtins.str] admin_password: Specifies the password of the administrator.
               The password consists of 8 to 32 characters, and must be a combination of uppercase letters,
               lowercase letters, digits, and the following special characters: ~!@#%^*-_=+?.
        :param pulumi.Input[_builtins.str] admin_user: Specifies the username of the administrator.
               The username starts with a letter, consists of 1 to 32 characters, and can contain only letters,
               digits, and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled.
               Valid values are **true** and **false**. Defaults to **false**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] availability_zones: Specifies the list of availability zones.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the DDM instance.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] delete_rds_data: Specifies whether data stored on the associated DB instances is deleted.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] engine_id: Specifies the ID of an Engine.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] engine_version: Indicates the engine version.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id.
               Value 0 indicates the default enterprise project.
        :param pulumi.Input[_builtins.str] flavor_id: Specifies the ID of a product.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        :param pulumi.Input[_builtins.int] node_num: Specifies the number of nodes.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InstanceNodeArgs', 'InstanceNodeArgsDict']]]] nodes: Indicates the node information.
               The NodeInfoRef structure is documented below.
        :param pulumi.Input[_builtins.str] param_group_id: Specifies the ID of parameter group.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InstanceParameterArgs', 'InstanceParameterArgsDict']]]] parameters: Specify an array of one or more parameters to be set to the instance after launched.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.int] period: Specifies the charging period.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] period_unit: Specifies the charging period unit.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the ID of a security group.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the DDM instance node.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the ID of a subnet.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time_zone: Specifies the time zone.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of a VPC.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["access_ip"] = access_ip
        __props__.__dict__["access_port"] = access_port
        __props__.__dict__["admin_password"] = admin_password
        __props__.__dict__["admin_user"] = admin_user
        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["availability_zones"] = availability_zones
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["delete_rds_data"] = delete_rds_data
        __props__.__dict__["engine_id"] = engine_id
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["flavor_id"] = flavor_id
        __props__.__dict__["name"] = name
        __props__.__dict__["node_num"] = node_num
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["param_group_id"] = param_group_id
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["region"] = region
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["time_zone"] = time_zone
        __props__.__dict__["vpc_id"] = vpc_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessIp")
    def access_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the address for accessing the DDM instance.
        """
        return pulumi.get(self, "access_ip")

    @_builtins.property
    @pulumi.getter(name="accessPort")
    def access_port(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the port for accessing the DDM instance.
        """
        return pulumi.get(self, "access_port")

    @_builtins.property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the password of the administrator.
        The password consists of 8 to 32 characters, and must be a combination of uppercase letters,
        lowercase letters, digits, and the following special characters: ~!@#%^*-_=+?.
        """
        return pulumi.get(self, "admin_password")

    @_builtins.property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the username of the administrator.
        The username starts with a letter, consists of 1 to 32 characters, and can contain only letters,
        digits, and underscores (_).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "admin_user")

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled.
        Valid values are **true** and **false**. Defaults to **false**.
        """
        return pulumi.get(self, "auto_renew")

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of availability zones.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the charging mode of the DDM instance.
        Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="deleteRdsData")
    def delete_rds_data(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether data stored on the associated DB instances is deleted.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "delete_rds_data")

    @_builtins.property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of an Engine.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine_id")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the engine version.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project id.
        Value 0 indicates the default enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a product.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the parameter name. Some of them needs the instance to be restarted to take effect.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of nodes.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence['outputs.InstanceNode']]:
        """
        Indicates the node information.
        The NodeInfoRef structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="paramGroupId")
    def param_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of parameter group.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "param_group_id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Sequence['outputs.InstanceParameter']]:
        """
        Specify an array of one or more parameters to be set to the instance after launched.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the charging period.
        If `period_unit` is set to **month**, the value ranges from 1 to 9.
        If `period_unit` is set to **year**, the value ranges from 1 to 3.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the charging period unit.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the DDM instance node.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a subnet.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the time zone.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a VPC.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

