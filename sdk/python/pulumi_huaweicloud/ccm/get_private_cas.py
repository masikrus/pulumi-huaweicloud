# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPrivateCasResult',
    'AwaitableGetPrivateCasResult',
    'get_private_cas',
    'get_private_cas_output',
]

@pulumi.output_type
class GetPrivateCasResult:
    """
    A collection of values returned by getPrivateCas.
    """
    def __init__(__self__, cas=None, id=None, name=None, region=None, sort_dir=None, sort_key=None, status=None, type=None):
        if cas and not isinstance(cas, list):
            raise TypeError("Expected argument 'cas' to be a list")
        pulumi.set(__self__, "cas", cas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def cas(self) -> Sequence['outputs.GetPrivateCasCaResult']:
        """
        The CA details.
        """
        return pulumi.get(self, "cas")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The CA status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The CA type.
        """
        return pulumi.get(self, "type")


class AwaitableGetPrivateCasResult(GetPrivateCasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateCasResult(
            cas=self.cas,
            id=self.id,
            name=self.name,
            region=self.region,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            status=self.status,
            type=self.type)


def get_private_cas(name: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    sort_dir: Optional[_builtins.str] = None,
                    sort_key: Optional[_builtins.str] = None,
                    status: Optional[_builtins.str] = None,
                    type: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateCasResult:
    """
    Use this data source to get a list of CCM private CAs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ccm.get_private_cas()
    ```


    :param _builtins.str name: Specifies the private CA name. The CAs whose names contain the `name` value will be returned.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting sequence. Valid values are as follows:
           + **DESC**: Descending order (default).
           + **ASC**: Ascending order.
    :param _builtins.str sort_key: Specifies the sorting attribute. Valid values are as follows:
           + **create_time**: Time when the CA was created (default).
           + **common_name**: The CA name.
           + **type**: The CA type.
           + **not_after**: The CA expiration time.
    :param _builtins.str status: Specifies the private CA status. Valid values are as follows:
           + **PENDING**: The CA is to be activated.
           + **ACTIVED**: The CA is activated.
           + **DISABLED**: The CA is disabled.
           + **DELETED**: The CA is to be deleted as scheduled.
           + **EXPIRED**: The CA has expired.
           
           The CA can issue certificates only when `status` is **ACTIVED**.
    :param _builtins.str type: Specifies the private CA type. Valid values are as follows:
           + **ROOT**: A root CA certificate.
           + **SUBORDINATE**: A subordinate CA certificate.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ccm/getPrivateCas:getPrivateCas', __args__, opts=opts, typ=GetPrivateCasResult).value

    return AwaitableGetPrivateCasResult(
        cas=pulumi.get(__ret__, 'cas'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_private_cas_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrivateCasResult]:
    """
    Use this data source to get a list of CCM private CAs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ccm.get_private_cas()
    ```


    :param _builtins.str name: Specifies the private CA name. The CAs whose names contain the `name` value will be returned.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sorting sequence. Valid values are as follows:
           + **DESC**: Descending order (default).
           + **ASC**: Ascending order.
    :param _builtins.str sort_key: Specifies the sorting attribute. Valid values are as follows:
           + **create_time**: Time when the CA was created (default).
           + **common_name**: The CA name.
           + **type**: The CA type.
           + **not_after**: The CA expiration time.
    :param _builtins.str status: Specifies the private CA status. Valid values are as follows:
           + **PENDING**: The CA is to be activated.
           + **ACTIVED**: The CA is activated.
           + **DISABLED**: The CA is disabled.
           + **DELETED**: The CA is to be deleted as scheduled.
           + **EXPIRED**: The CA has expired.
           
           The CA can issue certificates only when `status` is **ACTIVED**.
    :param _builtins.str type: Specifies the private CA type. Valid values are as follows:
           + **ROOT**: A root CA certificate.
           + **SUBORDINATE**: A subordinate CA certificate.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ccm/getPrivateCas:getPrivateCas', __args__, opts=opts, typ=GetPrivateCasResult)
    return __ret__.apply(lambda __response__: GetPrivateCasResult(
        cas=pulumi.get(__response__, 'cas'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
