# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CertificateApplyArgs', 'CertificateApply']

@pulumi.input_type
class CertificateApplyArgs:
    def __init__(__self__, *,
                 applicant_email: pulumi.Input[_builtins.str],
                 applicant_name: pulumi.Input[_builtins.str],
                 applicant_phone: pulumi.Input[_builtins.str],
                 certificate_id: pulumi.Input[_builtins.str],
                 domain: pulumi.Input[_builtins.str],
                 domain_method: pulumi.Input[_builtins.str],
                 auto_dns_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 ca_hash_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 company_city: Optional[pulumi.Input[_builtins.str]] = None,
                 company_name: Optional[pulumi.Input[_builtins.str]] = None,
                 company_province: Optional[pulumi.Input[_builtins.str]] = None,
                 company_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_email: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_name: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_phone: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sans: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CertificateApply resource.
        :param pulumi.Input[_builtins.str] applicant_email: Specifies the email of the applicant.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] applicant_name: Specifies the name of the applicant. The valid length is limited
               from `4` to `100`, only chinese and english letters, underscores (_), hyphens (-), commas (,) and dots (.) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] applicant_phone: Specifies the phone number of the applicant.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the CCM SSL certificate ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain: Specifies the domain name bound to the certificate.
               + When the certificate is **single domain name** or **wide domain name**, just fill in the domain name directly.
               + When the certificate is **multiple domain names**, the written domain name will exist as the main domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain_method: Specifies the domain name verification method. Valid values are:
               + **DNS**: Verify using DNS. Refers to verifying domain name ownership by parsing specified DNS records on the domain
               name management platform.
               + **FILE**: Verify using file. Refers to verifying domain name ownership by creating a specified file on the server.
               + **EMAIL**: Verify using email. Refers to logging in to the domain name administrator's email, receiving the domain
               name confirmation email and following the prompts to verify domain name ownership.
               
               Changing this parameter will create a new resource.
               
               > 1. DV and DV (Basic) certificates are verified by **DNS** by default.
               <br/>2. Pure IP (public IP) certificates only support verification through **FILE**.
               <br/>3. Only pure IP certificates support **FILE** verification.
        :param pulumi.Input[_builtins.bool] auto_dns_auth: Specifies whether to push DNS verification information to HuaweiCloud
               resolution service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ca_hash_algorithm: Specifies the signature algorithm. This field is required for Geo
               OV certificate. Valid values are **DEFAULT** and **SHA-256**.
        :param pulumi.Input[_builtins.str] company_city: Specifies the city where the company is located. The valid length
               is limited from `0` to `63`. This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_name: Specifies the company name. The valid length is limited from `0` to `63`.
               This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_province: Specifies the province where the company is located. The valid length
               is limited from `0` to `63`. This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_unit: Specifies the department name. The valid length is limited from `0` to `63`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_email: Specifies the technical contact email.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_name: Specifies the technical contact name. The valid length is limited from
               `0` to `63`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_phone: Specifies the technical contact phone number.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] country: Specifies the country code. Must comply with the regular pattern `[A-Za-z]{2}`.
               This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] csr: Specifies the certificate CSR string, which must match the domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm. Defaults to **RSA_2048**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] sans: Specifies additional domain names bound to multi-domain type certificates.
               This value only needs to be set when the purchased certificate is **multiple domain names** and there is a quota for
               adding additional domain names. Multiple domain names need to be separated by ";".
               For example, `www.example.com;www.example1.com;www.example2.com`.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "applicant_email", applicant_email)
        pulumi.set(__self__, "applicant_name", applicant_name)
        pulumi.set(__self__, "applicant_phone", applicant_phone)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "domain_method", domain_method)
        if auto_dns_auth is not None:
            pulumi.set(__self__, "auto_dns_auth", auto_dns_auth)
        if ca_hash_algorithm is not None:
            pulumi.set(__self__, "ca_hash_algorithm", ca_hash_algorithm)
        if company_city is not None:
            pulumi.set(__self__, "company_city", company_city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if company_province is not None:
            pulumi.set(__self__, "company_province", company_province)
        if company_unit is not None:
            pulumi.set(__self__, "company_unit", company_unit)
        if contact_email is not None:
            pulumi.set(__self__, "contact_email", contact_email)
        if contact_name is not None:
            pulumi.set(__self__, "contact_name", contact_name)
        if contact_phone is not None:
            pulumi.set(__self__, "contact_phone", contact_phone)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if csr is not None:
            pulumi.set(__self__, "csr", csr)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sans is not None:
            pulumi.set(__self__, "sans", sans)

    @_builtins.property
    @pulumi.getter(name="applicantEmail")
    def applicant_email(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the email of the applicant.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "applicant_email")

    @applicant_email.setter
    def applicant_email(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "applicant_email", value)

    @_builtins.property
    @pulumi.getter(name="applicantName")
    def applicant_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the applicant. The valid length is limited
        from `4` to `100`, only chinese and english letters, underscores (_), hyphens (-), commas (,) and dots (.) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "applicant_name")

    @applicant_name.setter
    def applicant_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "applicant_name", value)

    @_builtins.property
    @pulumi.getter(name="applicantPhone")
    def applicant_phone(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the phone number of the applicant.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "applicant_phone")

    @applicant_phone.setter
    def applicant_phone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "applicant_phone", value)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CCM SSL certificate ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name bound to the certificate.
        + When the certificate is **single domain name** or **wide domain name**, just fill in the domain name directly.
        + When the certificate is **multiple domain names**, the written domain name will exist as the main domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="domainMethod")
    def domain_method(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name verification method. Valid values are:
        + **DNS**: Verify using DNS. Refers to verifying domain name ownership by parsing specified DNS records on the domain
        name management platform.
        + **FILE**: Verify using file. Refers to verifying domain name ownership by creating a specified file on the server.
        + **EMAIL**: Verify using email. Refers to logging in to the domain name administrator's email, receiving the domain
        name confirmation email and following the prompts to verify domain name ownership.

        Changing this parameter will create a new resource.

        > 1. DV and DV (Basic) certificates are verified by **DNS** by default.
        <br/>2. Pure IP (public IP) certificates only support verification through **FILE**.
        <br/>3. Only pure IP certificates support **FILE** verification.
        """
        return pulumi.get(self, "domain_method")

    @domain_method.setter
    def domain_method(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_method", value)

    @_builtins.property
    @pulumi.getter(name="autoDnsAuth")
    def auto_dns_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to push DNS verification information to HuaweiCloud
        resolution service.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auto_dns_auth")

    @auto_dns_auth.setter
    def auto_dns_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_dns_auth", value)

    @_builtins.property
    @pulumi.getter(name="caHashAlgorithm")
    def ca_hash_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the signature algorithm. This field is required for Geo
        OV certificate. Valid values are **DEFAULT** and **SHA-256**.
        """
        return pulumi.get(self, "ca_hash_algorithm")

    @ca_hash_algorithm.setter
    def ca_hash_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ca_hash_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="companyCity")
    def company_city(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the city where the company is located. The valid length
        is limited from `0` to `63`. This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_city")

    @company_city.setter
    def company_city(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "company_city", value)

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the company name. The valid length is limited from `0` to `63`.
        This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "company_name", value)

    @_builtins.property
    @pulumi.getter(name="companyProvince")
    def company_province(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the province where the company is located. The valid length
        is limited from `0` to `63`. This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_province")

    @company_province.setter
    def company_province(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "company_province", value)

    @_builtins.property
    @pulumi.getter(name="companyUnit")
    def company_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the department name. The valid length is limited from `0` to `63`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_unit")

    @company_unit.setter
    def company_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "company_unit", value)

    @_builtins.property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the technical contact email.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "contact_email")

    @contact_email.setter
    def contact_email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contact_email", value)

    @_builtins.property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the technical contact name. The valid length is limited from
        `0` to `63`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "contact_name")

    @contact_name.setter
    def contact_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contact_name", value)

    @_builtins.property
    @pulumi.getter(name="contactPhone")
    def contact_phone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the technical contact phone number.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "contact_phone")

    @contact_phone.setter
    def contact_phone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contact_phone", value)

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the country code. Must comply with the regular pattern `[A-Za-z]{2}`.
        This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "country", value)

    @_builtins.property
    @pulumi.getter
    def csr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate CSR string, which must match the domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "csr", value)

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key algorithm. Defaults to **RSA_2048**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies additional domain names bound to multi-domain type certificates.
        This value only needs to be set when the purchased certificate is **multiple domain names** and there is a quota for
        adding additional domain names. Multiple domain names need to be separated by ";".
        For example, `www.example.com;www.example1.com;www.example2.com`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "sans")

    @sans.setter
    def sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sans", value)


@pulumi.input_type
class _CertificateApplyState:
    def __init__(__self__, *,
                 applicant_email: Optional[pulumi.Input[_builtins.str]] = None,
                 applicant_name: Optional[pulumi.Input[_builtins.str]] = None,
                 applicant_phone: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_dns_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 ca_hash_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 company_city: Optional[pulumi.Input[_builtins.str]] = None,
                 company_name: Optional[pulumi.Input[_builtins.str]] = None,
                 company_province: Optional[pulumi.Input[_builtins.str]] = None,
                 company_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_email: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_name: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_phone: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_method: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sans: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CertificateApply resources.
        :param pulumi.Input[_builtins.str] applicant_email: Specifies the email of the applicant.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] applicant_name: Specifies the name of the applicant. The valid length is limited
               from `4` to `100`, only chinese and english letters, underscores (_), hyphens (-), commas (,) and dots (.) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] applicant_phone: Specifies the phone number of the applicant.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] auto_dns_auth: Specifies whether to push DNS verification information to HuaweiCloud
               resolution service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ca_hash_algorithm: Specifies the signature algorithm. This field is required for Geo
               OV certificate. Valid values are **DEFAULT** and **SHA-256**.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the CCM SSL certificate ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_city: Specifies the city where the company is located. The valid length
               is limited from `0` to `63`. This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_name: Specifies the company name. The valid length is limited from `0` to `63`.
               This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_province: Specifies the province where the company is located. The valid length
               is limited from `0` to `63`. This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_unit: Specifies the department name. The valid length is limited from `0` to `63`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_email: Specifies the technical contact email.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_name: Specifies the technical contact name. The valid length is limited from
               `0` to `63`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_phone: Specifies the technical contact phone number.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] country: Specifies the country code. Must comply with the regular pattern `[A-Za-z]{2}`.
               This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] csr: Specifies the certificate CSR string, which must match the domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain: Specifies the domain name bound to the certificate.
               + When the certificate is **single domain name** or **wide domain name**, just fill in the domain name directly.
               + When the certificate is **multiple domain names**, the written domain name will exist as the main domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain_method: Specifies the domain name verification method. Valid values are:
               + **DNS**: Verify using DNS. Refers to verifying domain name ownership by parsing specified DNS records on the domain
               name management platform.
               + **FILE**: Verify using file. Refers to verifying domain name ownership by creating a specified file on the server.
               + **EMAIL**: Verify using email. Refers to logging in to the domain name administrator's email, receiving the domain
               name confirmation email and following the prompts to verify domain name ownership.
               
               Changing this parameter will create a new resource.
               
               > 1. DV and DV (Basic) certificates are verified by **DNS** by default.
               <br/>2. Pure IP (public IP) certificates only support verification through **FILE**.
               <br/>3. Only pure IP certificates support **FILE** verification.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm. Defaults to **RSA_2048**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] sans: Specifies additional domain names bound to multi-domain type certificates.
               This value only needs to be set when the purchased certificate is **multiple domain names** and there is a quota for
               adding additional domain names. Multiple domain names need to be separated by ";".
               For example, `www.example.com;www.example1.com;www.example2.com`.
               
               Changing this parameter will create a new resource.
        """
        if applicant_email is not None:
            pulumi.set(__self__, "applicant_email", applicant_email)
        if applicant_name is not None:
            pulumi.set(__self__, "applicant_name", applicant_name)
        if applicant_phone is not None:
            pulumi.set(__self__, "applicant_phone", applicant_phone)
        if auto_dns_auth is not None:
            pulumi.set(__self__, "auto_dns_auth", auto_dns_auth)
        if ca_hash_algorithm is not None:
            pulumi.set(__self__, "ca_hash_algorithm", ca_hash_algorithm)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if company_city is not None:
            pulumi.set(__self__, "company_city", company_city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if company_province is not None:
            pulumi.set(__self__, "company_province", company_province)
        if company_unit is not None:
            pulumi.set(__self__, "company_unit", company_unit)
        if contact_email is not None:
            pulumi.set(__self__, "contact_email", contact_email)
        if contact_name is not None:
            pulumi.set(__self__, "contact_name", contact_name)
        if contact_phone is not None:
            pulumi.set(__self__, "contact_phone", contact_phone)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if csr is not None:
            pulumi.set(__self__, "csr", csr)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_method is not None:
            pulumi.set(__self__, "domain_method", domain_method)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sans is not None:
            pulumi.set(__self__, "sans", sans)

    @_builtins.property
    @pulumi.getter(name="applicantEmail")
    def applicant_email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the email of the applicant.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "applicant_email")

    @applicant_email.setter
    def applicant_email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "applicant_email", value)

    @_builtins.property
    @pulumi.getter(name="applicantName")
    def applicant_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the applicant. The valid length is limited
        from `4` to `100`, only chinese and english letters, underscores (_), hyphens (-), commas (,) and dots (.) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "applicant_name")

    @applicant_name.setter
    def applicant_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "applicant_name", value)

    @_builtins.property
    @pulumi.getter(name="applicantPhone")
    def applicant_phone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the phone number of the applicant.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "applicant_phone")

    @applicant_phone.setter
    def applicant_phone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "applicant_phone", value)

    @_builtins.property
    @pulumi.getter(name="autoDnsAuth")
    def auto_dns_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to push DNS verification information to HuaweiCloud
        resolution service.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auto_dns_auth")

    @auto_dns_auth.setter
    def auto_dns_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_dns_auth", value)

    @_builtins.property
    @pulumi.getter(name="caHashAlgorithm")
    def ca_hash_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the signature algorithm. This field is required for Geo
        OV certificate. Valid values are **DEFAULT** and **SHA-256**.
        """
        return pulumi.get(self, "ca_hash_algorithm")

    @ca_hash_algorithm.setter
    def ca_hash_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ca_hash_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CCM SSL certificate ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="companyCity")
    def company_city(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the city where the company is located. The valid length
        is limited from `0` to `63`. This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_city")

    @company_city.setter
    def company_city(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "company_city", value)

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the company name. The valid length is limited from `0` to `63`.
        This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "company_name", value)

    @_builtins.property
    @pulumi.getter(name="companyProvince")
    def company_province(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the province where the company is located. The valid length
        is limited from `0` to `63`. This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_province")

    @company_province.setter
    def company_province(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "company_province", value)

    @_builtins.property
    @pulumi.getter(name="companyUnit")
    def company_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the department name. The valid length is limited from `0` to `63`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_unit")

    @company_unit.setter
    def company_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "company_unit", value)

    @_builtins.property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the technical contact email.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "contact_email")

    @contact_email.setter
    def contact_email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contact_email", value)

    @_builtins.property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the technical contact name. The valid length is limited from
        `0` to `63`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "contact_name")

    @contact_name.setter
    def contact_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contact_name", value)

    @_builtins.property
    @pulumi.getter(name="contactPhone")
    def contact_phone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the technical contact phone number.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "contact_phone")

    @contact_phone.setter
    def contact_phone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contact_phone", value)

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the country code. Must comply with the regular pattern `[A-Za-z]{2}`.
        This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "country", value)

    @_builtins.property
    @pulumi.getter
    def csr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate CSR string, which must match the domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "csr", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain name bound to the certificate.
        + When the certificate is **single domain name** or **wide domain name**, just fill in the domain name directly.
        + When the certificate is **multiple domain names**, the written domain name will exist as the main domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="domainMethod")
    def domain_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain name verification method. Valid values are:
        + **DNS**: Verify using DNS. Refers to verifying domain name ownership by parsing specified DNS records on the domain
        name management platform.
        + **FILE**: Verify using file. Refers to verifying domain name ownership by creating a specified file on the server.
        + **EMAIL**: Verify using email. Refers to logging in to the domain name administrator's email, receiving the domain
        name confirmation email and following the prompts to verify domain name ownership.

        Changing this parameter will create a new resource.

        > 1. DV and DV (Basic) certificates are verified by **DNS** by default.
        <br/>2. Pure IP (public IP) certificates only support verification through **FILE**.
        <br/>3. Only pure IP certificates support **FILE** verification.
        """
        return pulumi.get(self, "domain_method")

    @domain_method.setter
    def domain_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_method", value)

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key algorithm. Defaults to **RSA_2048**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies additional domain names bound to multi-domain type certificates.
        This value only needs to be set when the purchased certificate is **multiple domain names** and there is a quota for
        adding additional domain names. Multiple domain names need to be separated by ";".
        For example, `www.example.com;www.example1.com;www.example2.com`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "sans")

    @sans.setter
    def sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sans", value)


@pulumi.type_token("huaweicloud:ccm/certificateApply:CertificateApply")
class CertificateApply(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applicant_email: Optional[pulumi.Input[_builtins.str]] = None,
                 applicant_name: Optional[pulumi.Input[_builtins.str]] = None,
                 applicant_phone: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_dns_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 ca_hash_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 company_city: Optional[pulumi.Input[_builtins.str]] = None,
                 company_name: Optional[pulumi.Input[_builtins.str]] = None,
                 company_province: Optional[pulumi.Input[_builtins.str]] = None,
                 company_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_email: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_name: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_phone: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_method: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sans: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CCM SSL certificate apply resource within HuaweiCloud.

        > 1. The application for a certificate needs to wait for approval before it can be used.
        >    <br/>2. The certificate application results can be obtained through `status` in datasource `ccm_get_certificates`.
        >    <br/>3. The current resource is a one-time resource, and destroying this resource will not affect the result of the
        >    certificate application.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        domain = config.require_object("domain")
        applicant_name = config.require_object("applicantName")
        applicant_phone = config.require_object("applicantPhone")
        applicant_email = config.require_object("applicantEmail")
        domain_method = config.require_object("domainMethod")
        test = huaweicloud.ccm.CertificateApply("test",
            certificate_id=certificate_id,
            domain=domain,
            applicant_name=applicant_name,
            applicant_phone=applicant_phone,
            applicant_email=applicant_email,
            domain_method=domain_method)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] applicant_email: Specifies the email of the applicant.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] applicant_name: Specifies the name of the applicant. The valid length is limited
               from `4` to `100`, only chinese and english letters, underscores (_), hyphens (-), commas (,) and dots (.) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] applicant_phone: Specifies the phone number of the applicant.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] auto_dns_auth: Specifies whether to push DNS verification information to HuaweiCloud
               resolution service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ca_hash_algorithm: Specifies the signature algorithm. This field is required for Geo
               OV certificate. Valid values are **DEFAULT** and **SHA-256**.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the CCM SSL certificate ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_city: Specifies the city where the company is located. The valid length
               is limited from `0` to `63`. This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_name: Specifies the company name. The valid length is limited from `0` to `63`.
               This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_province: Specifies the province where the company is located. The valid length
               is limited from `0` to `63`. This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_unit: Specifies the department name. The valid length is limited from `0` to `63`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_email: Specifies the technical contact email.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_name: Specifies the technical contact name. The valid length is limited from
               `0` to `63`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_phone: Specifies the technical contact phone number.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] country: Specifies the country code. Must comply with the regular pattern `[A-Za-z]{2}`.
               This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] csr: Specifies the certificate CSR string, which must match the domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain: Specifies the domain name bound to the certificate.
               + When the certificate is **single domain name** or **wide domain name**, just fill in the domain name directly.
               + When the certificate is **multiple domain names**, the written domain name will exist as the main domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain_method: Specifies the domain name verification method. Valid values are:
               + **DNS**: Verify using DNS. Refers to verifying domain name ownership by parsing specified DNS records on the domain
               name management platform.
               + **FILE**: Verify using file. Refers to verifying domain name ownership by creating a specified file on the server.
               + **EMAIL**: Verify using email. Refers to logging in to the domain name administrator's email, receiving the domain
               name confirmation email and following the prompts to verify domain name ownership.
               
               Changing this parameter will create a new resource.
               
               > 1. DV and DV (Basic) certificates are verified by **DNS** by default.
               <br/>2. Pure IP (public IP) certificates only support verification through **FILE**.
               <br/>3. Only pure IP certificates support **FILE** verification.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm. Defaults to **RSA_2048**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] sans: Specifies additional domain names bound to multi-domain type certificates.
               This value only needs to be set when the purchased certificate is **multiple domain names** and there is a quota for
               adding additional domain names. Multiple domain names need to be separated by ";".
               For example, `www.example.com;www.example1.com;www.example2.com`.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateApplyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CCM SSL certificate apply resource within HuaweiCloud.

        > 1. The application for a certificate needs to wait for approval before it can be used.
        >    <br/>2. The certificate application results can be obtained through `status` in datasource `ccm_get_certificates`.
        >    <br/>3. The current resource is a one-time resource, and destroying this resource will not affect the result of the
        >    certificate application.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        domain = config.require_object("domain")
        applicant_name = config.require_object("applicantName")
        applicant_phone = config.require_object("applicantPhone")
        applicant_email = config.require_object("applicantEmail")
        domain_method = config.require_object("domainMethod")
        test = huaweicloud.ccm.CertificateApply("test",
            certificate_id=certificate_id,
            domain=domain,
            applicant_name=applicant_name,
            applicant_phone=applicant_phone,
            applicant_email=applicant_email,
            domain_method=domain_method)
        ```

        :param str resource_name: The name of the resource.
        :param CertificateApplyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateApplyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applicant_email: Optional[pulumi.Input[_builtins.str]] = None,
                 applicant_name: Optional[pulumi.Input[_builtins.str]] = None,
                 applicant_phone: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_dns_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 ca_hash_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 company_city: Optional[pulumi.Input[_builtins.str]] = None,
                 company_name: Optional[pulumi.Input[_builtins.str]] = None,
                 company_province: Optional[pulumi.Input[_builtins.str]] = None,
                 company_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_email: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_name: Optional[pulumi.Input[_builtins.str]] = None,
                 contact_phone: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_method: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sans: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificateApplyArgs.__new__(CertificateApplyArgs)

            if applicant_email is None and not opts.urn:
                raise TypeError("Missing required property 'applicant_email'")
            __props__.__dict__["applicant_email"] = applicant_email
            if applicant_name is None and not opts.urn:
                raise TypeError("Missing required property 'applicant_name'")
            __props__.__dict__["applicant_name"] = applicant_name
            if applicant_phone is None and not opts.urn:
                raise TypeError("Missing required property 'applicant_phone'")
            __props__.__dict__["applicant_phone"] = applicant_phone
            __props__.__dict__["auto_dns_auth"] = auto_dns_auth
            __props__.__dict__["ca_hash_algorithm"] = ca_hash_algorithm
            if certificate_id is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_id'")
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["company_city"] = company_city
            __props__.__dict__["company_name"] = company_name
            __props__.__dict__["company_province"] = company_province
            __props__.__dict__["company_unit"] = company_unit
            __props__.__dict__["contact_email"] = contact_email
            __props__.__dict__["contact_name"] = contact_name
            __props__.__dict__["contact_phone"] = contact_phone
            __props__.__dict__["country"] = country
            __props__.__dict__["csr"] = csr
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            if domain_method is None and not opts.urn:
                raise TypeError("Missing required property 'domain_method'")
            __props__.__dict__["domain_method"] = domain_method
            __props__.__dict__["key_algorithm"] = key_algorithm
            __props__.__dict__["region"] = region
            __props__.__dict__["sans"] = sans
        super(CertificateApply, __self__).__init__(
            'huaweicloud:ccm/certificateApply:CertificateApply',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applicant_email: Optional[pulumi.Input[_builtins.str]] = None,
            applicant_name: Optional[pulumi.Input[_builtins.str]] = None,
            applicant_phone: Optional[pulumi.Input[_builtins.str]] = None,
            auto_dns_auth: Optional[pulumi.Input[_builtins.bool]] = None,
            ca_hash_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
            company_city: Optional[pulumi.Input[_builtins.str]] = None,
            company_name: Optional[pulumi.Input[_builtins.str]] = None,
            company_province: Optional[pulumi.Input[_builtins.str]] = None,
            company_unit: Optional[pulumi.Input[_builtins.str]] = None,
            contact_email: Optional[pulumi.Input[_builtins.str]] = None,
            contact_name: Optional[pulumi.Input[_builtins.str]] = None,
            contact_phone: Optional[pulumi.Input[_builtins.str]] = None,
            country: Optional[pulumi.Input[_builtins.str]] = None,
            csr: Optional[pulumi.Input[_builtins.str]] = None,
            domain: Optional[pulumi.Input[_builtins.str]] = None,
            domain_method: Optional[pulumi.Input[_builtins.str]] = None,
            key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            sans: Optional[pulumi.Input[_builtins.str]] = None) -> 'CertificateApply':
        """
        Get an existing CertificateApply resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] applicant_email: Specifies the email of the applicant.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] applicant_name: Specifies the name of the applicant. The valid length is limited
               from `4` to `100`, only chinese and english letters, underscores (_), hyphens (-), commas (,) and dots (.) are allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] applicant_phone: Specifies the phone number of the applicant.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] auto_dns_auth: Specifies whether to push DNS verification information to HuaweiCloud
               resolution service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ca_hash_algorithm: Specifies the signature algorithm. This field is required for Geo
               OV certificate. Valid values are **DEFAULT** and **SHA-256**.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the CCM SSL certificate ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_city: Specifies the city where the company is located. The valid length
               is limited from `0` to `63`. This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_name: Specifies the company name. The valid length is limited from `0` to `63`.
               This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_province: Specifies the province where the company is located. The valid length
               is limited from `0` to `63`. This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] company_unit: Specifies the department name. The valid length is limited from `0` to `63`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_email: Specifies the technical contact email.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_name: Specifies the technical contact name. The valid length is limited from
               `0` to `63`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] contact_phone: Specifies the technical contact phone number.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] country: Specifies the country code. Must comply with the regular pattern `[A-Za-z]{2}`.
               This field is required for OV and EV type certificates.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] csr: Specifies the certificate CSR string, which must match the domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain: Specifies the domain name bound to the certificate.
               + When the certificate is **single domain name** or **wide domain name**, just fill in the domain name directly.
               + When the certificate is **multiple domain names**, the written domain name will exist as the main domain name.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain_method: Specifies the domain name verification method. Valid values are:
               + **DNS**: Verify using DNS. Refers to verifying domain name ownership by parsing specified DNS records on the domain
               name management platform.
               + **FILE**: Verify using file. Refers to verifying domain name ownership by creating a specified file on the server.
               + **EMAIL**: Verify using email. Refers to logging in to the domain name administrator's email, receiving the domain
               name confirmation email and following the prompts to verify domain name ownership.
               
               Changing this parameter will create a new resource.
               
               > 1. DV and DV (Basic) certificates are verified by **DNS** by default.
               <br/>2. Pure IP (public IP) certificates only support verification through **FILE**.
               <br/>3. Only pure IP certificates support **FILE** verification.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm. Defaults to **RSA_2048**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] sans: Specifies additional domain names bound to multi-domain type certificates.
               This value only needs to be set when the purchased certificate is **multiple domain names** and there is a quota for
               adding additional domain names. Multiple domain names need to be separated by ";".
               For example, `www.example.com;www.example1.com;www.example2.com`.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CertificateApplyState.__new__(_CertificateApplyState)

        __props__.__dict__["applicant_email"] = applicant_email
        __props__.__dict__["applicant_name"] = applicant_name
        __props__.__dict__["applicant_phone"] = applicant_phone
        __props__.__dict__["auto_dns_auth"] = auto_dns_auth
        __props__.__dict__["ca_hash_algorithm"] = ca_hash_algorithm
        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["company_city"] = company_city
        __props__.__dict__["company_name"] = company_name
        __props__.__dict__["company_province"] = company_province
        __props__.__dict__["company_unit"] = company_unit
        __props__.__dict__["contact_email"] = contact_email
        __props__.__dict__["contact_name"] = contact_name
        __props__.__dict__["contact_phone"] = contact_phone
        __props__.__dict__["country"] = country
        __props__.__dict__["csr"] = csr
        __props__.__dict__["domain"] = domain
        __props__.__dict__["domain_method"] = domain_method
        __props__.__dict__["key_algorithm"] = key_algorithm
        __props__.__dict__["region"] = region
        __props__.__dict__["sans"] = sans
        return CertificateApply(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicantEmail")
    def applicant_email(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the email of the applicant.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "applicant_email")

    @_builtins.property
    @pulumi.getter(name="applicantName")
    def applicant_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the applicant. The valid length is limited
        from `4` to `100`, only chinese and english letters, underscores (_), hyphens (-), commas (,) and dots (.) are allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "applicant_name")

    @_builtins.property
    @pulumi.getter(name="applicantPhone")
    def applicant_phone(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the phone number of the applicant.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "applicant_phone")

    @_builtins.property
    @pulumi.getter(name="autoDnsAuth")
    def auto_dns_auth(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to push DNS verification information to HuaweiCloud
        resolution service.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auto_dns_auth")

    @_builtins.property
    @pulumi.getter(name="caHashAlgorithm")
    def ca_hash_algorithm(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the signature algorithm. This field is required for Geo
        OV certificate. Valid values are **DEFAULT** and **SHA-256**.
        """
        return pulumi.get(self, "ca_hash_algorithm")

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CCM SSL certificate ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="companyCity")
    def company_city(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the city where the company is located. The valid length
        is limited from `0` to `63`. This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_city")

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the company name. The valid length is limited from `0` to `63`.
        This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_name")

    @_builtins.property
    @pulumi.getter(name="companyProvince")
    def company_province(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the province where the company is located. The valid length
        is limited from `0` to `63`. This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_province")

    @_builtins.property
    @pulumi.getter(name="companyUnit")
    def company_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the department name. The valid length is limited from `0` to `63`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "company_unit")

    @_builtins.property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the technical contact email.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "contact_email")

    @_builtins.property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the technical contact name. The valid length is limited from
        `0` to `63`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "contact_name")

    @_builtins.property
    @pulumi.getter(name="contactPhone")
    def contact_phone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the technical contact phone number.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "contact_phone")

    @_builtins.property
    @pulumi.getter
    def country(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the country code. Must comply with the regular pattern `[A-Za-z]{2}`.
        This field is required for OV and EV type certificates.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def csr(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the certificate CSR string, which must match the domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "csr")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the domain name bound to the certificate.
        + When the certificate is **single domain name** or **wide domain name**, just fill in the domain name directly.
        + When the certificate is **multiple domain names**, the written domain name will exist as the main domain name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="domainMethod")
    def domain_method(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the domain name verification method. Valid values are:
        + **DNS**: Verify using DNS. Refers to verifying domain name ownership by parsing specified DNS records on the domain
        name management platform.
        + **FILE**: Verify using file. Refers to verifying domain name ownership by creating a specified file on the server.
        + **EMAIL**: Verify using email. Refers to logging in to the domain name administrator's email, receiving the domain
        name confirmation email and following the prompts to verify domain name ownership.

        Changing this parameter will create a new resource.

        > 1. DV and DV (Basic) certificates are verified by **DNS** by default.
        <br/>2. Pure IP (public IP) certificates only support verification through **FILE**.
        <br/>3. Only pure IP certificates support **FILE** verification.
        """
        return pulumi.get(self, "domain_method")

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the key algorithm. Defaults to **RSA_2048**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_algorithm")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sans(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies additional domain names bound to multi-domain type certificates.
        This value only needs to be set when the purchased certificate is **multiple domain names** and there is a quota for
        adding additional domain names. Multiple domain names need to be separated by ";".
        For example, `www.example.com;www.example1.com;www.example2.com`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "sans")

