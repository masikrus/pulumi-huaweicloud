# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PrivateCertificateArgs', 'PrivateCertificate']

@pulumi.input_type
class PrivateCertificateArgs:
    def __init__(__self__, *,
                 distinguished_names: pulumi.Input[Sequence[pulumi.Input['PrivateCertificateDistinguishedNameArgs']]],
                 issuer_id: pulumi.Input[_builtins.str],
                 key_algorithm: pulumi.Input[_builtins.str],
                 signature_algorithm: pulumi.Input[_builtins.str],
                 validities: pulumi.Input[Sequence[pulumi.Input['PrivateCertificateValidityArgs']]],
                 client_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 code_signing: Optional[pulumi.Input[_builtins.bool]] = None,
                 email_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 object_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 object_identifier_value: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateSubjectAlternativeNameArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 time_stamping: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a PrivateCertificate resource.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCertificateDistinguishedNameArgs']]] distinguished_names: Specifies the distinguished name of private certificate.
               Changing this parameter will create a new resource.
               The distinguished_name structure is documented below.
        :param pulumi.Input[_builtins.str] issuer_id: Specifies the ID of the parent CA. Changing this creates
               a new private certificate resource.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm. Valid values are **RSA2048**, **RSA4096**,
               **EC256**, and **EC384**.
               Changing this creates a new private certificate resource.
        :param pulumi.Input[_builtins.str] signature_algorithm: Specifies the private certificate signature hash algorithm.
               Valid values are **SHA256**, **SHA384**, and **SHA512**. Changing this creates a new private certificate resource.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCertificateValidityArgs']]] validities: Specifies the validity of private certificate.
               Changing this parameter will create a new resource.
               The validity structure is documented below.
        :param pulumi.Input[_builtins.bool] client_auth: Specifies whether to enable client authentication. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               > Enable this enhanced key usage for the client certificate.
        :param pulumi.Input[_builtins.bool] code_signing: Specifies whether to enable signing of downloadable executable code client
               authentication. Defaults to **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] email_protection: Specifies whether to enable email protection. Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the certificate belongs.
               For enterprise users, if omitted, resources under all authorized enterprise projects of the tenant will be queried.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] key_usages: Specifies the key usage. Changing this parameter will create a new resource.
               Refer to [4.2.1.3](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3)
               Valid values are as follows:
               + **digitalSignature**: The key is used as a digital signature.
               + **nonRepudiation**: The key can be used for non-repudiation.
               + **keyEncipherment**: The key can be used for key encryption.
               + **dataEncipherment**: The key can be used for data encryption.
               + **keyAgreement**: The key can be used for key negotiation.
               + **keyCertSign**: The key can issue a certificate.
               + **cRLSign**: The key can issue a certificate revocation list (CRL).
               + **encipherOnly**: The key is used only for encryption.
               + **decipherOnly**: The key is used only for decryption.
        :param pulumi.Input[_builtins.str] object_identifier: Specifies the object identifier. Changing this parameter will create
               a new resource.
               
               > The value of this parameter must be a dot-decimal notation string that complies with the ASN1 specifications,
               for example, **1.3.6.1.4.1.2011.4.99**.
        :param pulumi.Input[_builtins.str] object_identifier_value: Specifies the custom attribute content,
               work with `object_identifier`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the certificate region. Changing this creates a new
               private certificate resource. Now only support cn-north-4 (china) and ap-southeast-3 (international)
        :param pulumi.Input[_builtins.bool] server_auth: Specifies whether to enable server authentication. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               > Enable this enhanced key usage for the server certificate.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCertificateSubjectAlternativeNameArgs']]] subject_alternative_names: Specifies the alternative name for the subject.
               Changing this parameter will create a new resource.
               The subject_alternative_names structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs associating with the private certificate.
               
               <a name="block-distinguished_name"></a>
               The `distinguished_name` block supports:
        :param pulumi.Input[_builtins.bool] time_stamping: Specifies whether to bind the hash of an object to a time.
               Defaults to **false**. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "distinguished_names", distinguished_names)
        pulumi.set(__self__, "issuer_id", issuer_id)
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "validities", validities)
        if client_auth is not None:
            pulumi.set(__self__, "client_auth", client_auth)
        if code_signing is not None:
            pulumi.set(__self__, "code_signing", code_signing)
        if email_protection is not None:
            pulumi.set(__self__, "email_protection", email_protection)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if key_usages is not None:
            pulumi.set(__self__, "key_usages", key_usages)
        if object_identifier is not None:
            pulumi.set(__self__, "object_identifier", object_identifier)
        if object_identifier_value is not None:
            pulumi.set(__self__, "object_identifier_value", object_identifier_value)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server_auth is not None:
            pulumi.set(__self__, "server_auth", server_auth)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_stamping is not None:
            pulumi.set(__self__, "time_stamping", time_stamping)

    @_builtins.property
    @pulumi.getter(name="distinguishedNames")
    def distinguished_names(self) -> pulumi.Input[Sequence[pulumi.Input['PrivateCertificateDistinguishedNameArgs']]]:
        """
        Specifies the distinguished name of private certificate.
        Changing this parameter will create a new resource.
        The distinguished_name structure is documented below.
        """
        return pulumi.get(self, "distinguished_names")

    @distinguished_names.setter
    def distinguished_names(self, value: pulumi.Input[Sequence[pulumi.Input['PrivateCertificateDistinguishedNameArgs']]]):
        pulumi.set(self, "distinguished_names", value)

    @_builtins.property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the parent CA. Changing this creates
        a new private certificate resource.
        """
        return pulumi.get(self, "issuer_id")

    @issuer_id.setter
    def issuer_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "issuer_id", value)

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key algorithm. Valid values are **RSA2048**, **RSA4096**,
        **EC256**, and **EC384**.
        Changing this creates a new private certificate resource.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the private certificate signature hash algorithm.
        Valid values are **SHA256**, **SHA384**, and **SHA512**. Changing this creates a new private certificate resource.
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "signature_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def validities(self) -> pulumi.Input[Sequence[pulumi.Input['PrivateCertificateValidityArgs']]]:
        """
        Specifies the validity of private certificate.
        Changing this parameter will create a new resource.
        The validity structure is documented below.
        """
        return pulumi.get(self, "validities")

    @validities.setter
    def validities(self, value: pulumi.Input[Sequence[pulumi.Input['PrivateCertificateValidityArgs']]]):
        pulumi.set(self, "validities", value)

    @_builtins.property
    @pulumi.getter(name="clientAuth")
    def client_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable client authentication. Defaults to **false**.
        Changing this parameter will create a new resource.

        > Enable this enhanced key usage for the client certificate.
        """
        return pulumi.get(self, "client_auth")

    @client_auth.setter
    def client_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "client_auth", value)

    @_builtins.property
    @pulumi.getter(name="codeSigning")
    def code_signing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable signing of downloadable executable code client
        authentication. Defaults to **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "code_signing")

    @code_signing.setter
    def code_signing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "code_signing", value)

    @_builtins.property
    @pulumi.getter(name="emailProtection")
    def email_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable email protection. Defaults to **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "email_protection")

    @email_protection.setter
    def email_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "email_protection", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the certificate belongs.
        For enterprise users, if omitted, resources under all authorized enterprise projects of the tenant will be queried.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key usage. Changing this parameter will create a new resource.
        Refer to [4.2.1.3](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3)
        Valid values are as follows:
        + **digitalSignature**: The key is used as a digital signature.
        + **nonRepudiation**: The key can be used for non-repudiation.
        + **keyEncipherment**: The key can be used for key encryption.
        + **dataEncipherment**: The key can be used for data encryption.
        + **keyAgreement**: The key can be used for key negotiation.
        + **keyCertSign**: The key can issue a certificate.
        + **cRLSign**: The key can issue a certificate revocation list (CRL).
        + **encipherOnly**: The key is used only for encryption.
        + **decipherOnly**: The key is used only for decryption.
        """
        return pulumi.get(self, "key_usages")

    @key_usages.setter
    def key_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "key_usages", value)

    @_builtins.property
    @pulumi.getter(name="objectIdentifier")
    def object_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the object identifier. Changing this parameter will create
        a new resource.

        > The value of this parameter must be a dot-decimal notation string that complies with the ASN1 specifications,
        for example, **1.3.6.1.4.1.2011.4.99**.
        """
        return pulumi.get(self, "object_identifier")

    @object_identifier.setter
    def object_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_identifier", value)

    @_builtins.property
    @pulumi.getter(name="objectIdentifierValue")
    def object_identifier_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom attribute content,
        work with `object_identifier`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "object_identifier_value")

    @object_identifier_value.setter
    def object_identifier_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_identifier_value", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate region. Changing this creates a new
        private certificate resource. Now only support cn-north-4 (china) and ap-southeast-3 (international)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serverAuth")
    def server_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable server authentication. Defaults to **false**.
        Changing this parameter will create a new resource.

        > Enable this enhanced key usage for the server certificate.
        """
        return pulumi.get(self, "server_auth")

    @server_auth.setter
    def server_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "server_auth", value)

    @_builtins.property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateSubjectAlternativeNameArgs']]]]:
        """
        Specifies the alternative name for the subject.
        Changing this parameter will create a new resource.
        The subject_alternative_names structure is documented below.
        """
        return pulumi.get(self, "subject_alternative_names")

    @subject_alternative_names.setter
    def subject_alternative_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateSubjectAlternativeNameArgs']]]]):
        pulumi.set(self, "subject_alternative_names", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs associating with the private certificate.

        <a name="block-distinguished_name"></a>
        The `distinguished_name` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="timeStamping")
    def time_stamping(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to bind the hash of an object to a time.
        Defaults to **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_stamping")

    @time_stamping.setter
    def time_stamping(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "time_stamping", value)


@pulumi.input_type
class _PrivateCertificateState:
    def __init__(__self__, *,
                 client_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 code_signing: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 distinguished_names: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateDistinguishedNameArgs']]]] = None,
                 email_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_at: Optional[pulumi.Input[_builtins.str]] = None,
                 gen_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 object_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 object_identifier_value: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 start_at: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateSubjectAlternativeNameArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 time_stamping: Optional[pulumi.Input[_builtins.bool]] = None,
                 validities: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateValidityArgs']]]] = None):
        """
        Input properties used for looking up and filtering PrivateCertificate resources.
        :param pulumi.Input[_builtins.bool] client_auth: Specifies whether to enable client authentication. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               > Enable this enhanced key usage for the client certificate.
        :param pulumi.Input[_builtins.bool] code_signing: Specifies whether to enable signing of downloadable executable code client
               authentication. Defaults to **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the certificate was created.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCertificateDistinguishedNameArgs']]] distinguished_names: Specifies the distinguished name of private certificate.
               Changing this parameter will create a new resource.
               The distinguished_name structure is documented below.
        :param pulumi.Input[_builtins.bool] email_protection: Specifies whether to enable email protection. Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the certificate belongs.
               For enterprise users, if omitted, resources under all authorized enterprise projects of the tenant will be queried.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: Indicates the private certificate valid expired time.
        :param pulumi.Input[_builtins.str] gen_mode: Indicates the private certificate create mode,by system or user. Valid values are as follows:
               + **GENERATE**: The certificate is generated through the PCA system.
               + **IMPORT**: The certificate is imported externally.
               + **CSR**: The CSR is imported externally and issued by the internal CA. The private key is not managed in PCA.
        :param pulumi.Input[_builtins.str] issuer_id: Specifies the ID of the parent CA. Changing this creates
               a new private certificate resource.
        :param pulumi.Input[_builtins.str] issuer_name: Indicates the parent CA name.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm. Valid values are **RSA2048**, **RSA4096**,
               **EC256**, and **EC384**.
               Changing this creates a new private certificate resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] key_usages: Specifies the key usage. Changing this parameter will create a new resource.
               Refer to [4.2.1.3](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3)
               Valid values are as follows:
               + **digitalSignature**: The key is used as a digital signature.
               + **nonRepudiation**: The key can be used for non-repudiation.
               + **keyEncipherment**: The key can be used for key encryption.
               + **dataEncipherment**: The key can be used for data encryption.
               + **keyAgreement**: The key can be used for key negotiation.
               + **keyCertSign**: The key can issue a certificate.
               + **cRLSign**: The key can issue a certificate revocation list (CRL).
               + **encipherOnly**: The key is used only for encryption.
               + **decipherOnly**: The key is used only for decryption.
        :param pulumi.Input[_builtins.str] object_identifier: Specifies the object identifier. Changing this parameter will create
               a new resource.
               
               > The value of this parameter must be a dot-decimal notation string that complies with the ASN1 specifications,
               for example, **1.3.6.1.4.1.2011.4.99**.
        :param pulumi.Input[_builtins.str] object_identifier_value: Specifies the custom attribute content,
               work with `object_identifier`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the certificate region. Changing this creates a new
               private certificate resource. Now only support cn-north-4 (china) and ap-southeast-3 (international)
        :param pulumi.Input[_builtins.bool] server_auth: Specifies whether to enable server authentication. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               > Enable this enhanced key usage for the server certificate.
        :param pulumi.Input[_builtins.str] signature_algorithm: Specifies the private certificate signature hash algorithm.
               Valid values are **SHA256**, **SHA384**, and **SHA512**. Changing this creates a new private certificate resource.
        :param pulumi.Input[_builtins.str] start_at: Specifies the private certificate validity start from.
               The value is a timestamp in milliseconds. For example, `1645146939688` indicates `2022-02-18 09:15:39`.
               The value of `start_at` cannot be earlier than the result of the value of current time minus `5` minutes.
               Changing this creates a new private certificate resource.
               
               <a name="block-subject_alternative_names"></a>
               The `subject_alternative_names` block supports:
        :param pulumi.Input[_builtins.str] status: Indicates the private certificate status. Valid values are: **ISSUED**, **EXPIRED** and **REVOKED**.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCertificateSubjectAlternativeNameArgs']]] subject_alternative_names: Specifies the alternative name for the subject.
               Changing this parameter will create a new resource.
               The subject_alternative_names structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs associating with the private certificate.
               
               <a name="block-distinguished_name"></a>
               The `distinguished_name` block supports:
        :param pulumi.Input[_builtins.bool] time_stamping: Specifies whether to bind the hash of an object to a time.
               Defaults to **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCertificateValidityArgs']]] validities: Specifies the validity of private certificate.
               Changing this parameter will create a new resource.
               The validity structure is documented below.
        """
        if client_auth is not None:
            pulumi.set(__self__, "client_auth", client_auth)
        if code_signing is not None:
            pulumi.set(__self__, "code_signing", code_signing)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if distinguished_names is not None:
            pulumi.set(__self__, "distinguished_names", distinguished_names)
        if email_protection is not None:
            pulumi.set(__self__, "email_protection", email_protection)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if expired_at is not None:
            pulumi.set(__self__, "expired_at", expired_at)
        if gen_mode is not None:
            pulumi.set(__self__, "gen_mode", gen_mode)
        if issuer_id is not None:
            pulumi.set(__self__, "issuer_id", issuer_id)
        if issuer_name is not None:
            pulumi.set(__self__, "issuer_name", issuer_name)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if key_usages is not None:
            pulumi.set(__self__, "key_usages", key_usages)
        if object_identifier is not None:
            pulumi.set(__self__, "object_identifier", object_identifier)
        if object_identifier_value is not None:
            pulumi.set(__self__, "object_identifier_value", object_identifier_value)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server_auth is not None:
            pulumi.set(__self__, "server_auth", server_auth)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if start_at is not None:
            pulumi.set(__self__, "start_at", start_at)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_stamping is not None:
            pulumi.set(__self__, "time_stamping", time_stamping)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)

    @_builtins.property
    @pulumi.getter(name="clientAuth")
    def client_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable client authentication. Defaults to **false**.
        Changing this parameter will create a new resource.

        > Enable this enhanced key usage for the client certificate.
        """
        return pulumi.get(self, "client_auth")

    @client_auth.setter
    def client_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "client_auth", value)

    @_builtins.property
    @pulumi.getter(name="codeSigning")
    def code_signing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable signing of downloadable executable code client
        authentication. Defaults to **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "code_signing")

    @code_signing.setter
    def code_signing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "code_signing", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the certificate was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="distinguishedNames")
    def distinguished_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateDistinguishedNameArgs']]]]:
        """
        Specifies the distinguished name of private certificate.
        Changing this parameter will create a new resource.
        The distinguished_name structure is documented below.
        """
        return pulumi.get(self, "distinguished_names")

    @distinguished_names.setter
    def distinguished_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateDistinguishedNameArgs']]]]):
        pulumi.set(self, "distinguished_names", value)

    @_builtins.property
    @pulumi.getter(name="emailProtection")
    def email_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable email protection. Defaults to **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "email_protection")

    @email_protection.setter
    def email_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "email_protection", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the certificate belongs.
        For enterprise users, if omitted, resources under all authorized enterprise projects of the tenant will be queried.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the private certificate valid expired time.
        """
        return pulumi.get(self, "expired_at")

    @expired_at.setter
    def expired_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expired_at", value)

    @_builtins.property
    @pulumi.getter(name="genMode")
    def gen_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the private certificate create mode,by system or user. Valid values are as follows:
        + **GENERATE**: The certificate is generated through the PCA system.
        + **IMPORT**: The certificate is imported externally.
        + **CSR**: The CSR is imported externally and issued by the internal CA. The private key is not managed in PCA.
        """
        return pulumi.get(self, "gen_mode")

    @gen_mode.setter
    def gen_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gen_mode", value)

    @_builtins.property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the parent CA. Changing this creates
        a new private certificate resource.
        """
        return pulumi.get(self, "issuer_id")

    @issuer_id.setter
    def issuer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer_id", value)

    @_builtins.property
    @pulumi.getter(name="issuerName")
    def issuer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parent CA name.
        """
        return pulumi.get(self, "issuer_name")

    @issuer_name.setter
    def issuer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer_name", value)

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key algorithm. Valid values are **RSA2048**, **RSA4096**,
        **EC256**, and **EC384**.
        Changing this creates a new private certificate resource.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key usage. Changing this parameter will create a new resource.
        Refer to [4.2.1.3](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3)
        Valid values are as follows:
        + **digitalSignature**: The key is used as a digital signature.
        + **nonRepudiation**: The key can be used for non-repudiation.
        + **keyEncipherment**: The key can be used for key encryption.
        + **dataEncipherment**: The key can be used for data encryption.
        + **keyAgreement**: The key can be used for key negotiation.
        + **keyCertSign**: The key can issue a certificate.
        + **cRLSign**: The key can issue a certificate revocation list (CRL).
        + **encipherOnly**: The key is used only for encryption.
        + **decipherOnly**: The key is used only for decryption.
        """
        return pulumi.get(self, "key_usages")

    @key_usages.setter
    def key_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "key_usages", value)

    @_builtins.property
    @pulumi.getter(name="objectIdentifier")
    def object_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the object identifier. Changing this parameter will create
        a new resource.

        > The value of this parameter must be a dot-decimal notation string that complies with the ASN1 specifications,
        for example, **1.3.6.1.4.1.2011.4.99**.
        """
        return pulumi.get(self, "object_identifier")

    @object_identifier.setter
    def object_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_identifier", value)

    @_builtins.property
    @pulumi.getter(name="objectIdentifierValue")
    def object_identifier_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom attribute content,
        work with `object_identifier`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "object_identifier_value")

    @object_identifier_value.setter
    def object_identifier_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_identifier_value", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate region. Changing this creates a new
        private certificate resource. Now only support cn-north-4 (china) and ap-southeast-3 (international)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serverAuth")
    def server_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable server authentication. Defaults to **false**.
        Changing this parameter will create a new resource.

        > Enable this enhanced key usage for the server certificate.
        """
        return pulumi.get(self, "server_auth")

    @server_auth.setter
    def server_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "server_auth", value)

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private certificate signature hash algorithm.
        Valid values are **SHA256**, **SHA384**, and **SHA512**. Changing this creates a new private certificate resource.
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="startAt")
    def start_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private certificate validity start from.
        The value is a timestamp in milliseconds. For example, `1645146939688` indicates `2022-02-18 09:15:39`.
        The value of `start_at` cannot be earlier than the result of the value of current time minus `5` minutes.
        Changing this creates a new private certificate resource.

        <a name="block-subject_alternative_names"></a>
        The `subject_alternative_names` block supports:
        """
        return pulumi.get(self, "start_at")

    @start_at.setter
    def start_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_at", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the private certificate status. Valid values are: **ISSUED**, **EXPIRED** and **REVOKED**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateSubjectAlternativeNameArgs']]]]:
        """
        Specifies the alternative name for the subject.
        Changing this parameter will create a new resource.
        The subject_alternative_names structure is documented below.
        """
        return pulumi.get(self, "subject_alternative_names")

    @subject_alternative_names.setter
    def subject_alternative_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateSubjectAlternativeNameArgs']]]]):
        pulumi.set(self, "subject_alternative_names", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs associating with the private certificate.

        <a name="block-distinguished_name"></a>
        The `distinguished_name` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="timeStamping")
    def time_stamping(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to bind the hash of an object to a time.
        Defaults to **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_stamping")

    @time_stamping.setter
    def time_stamping(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "time_stamping", value)

    @_builtins.property
    @pulumi.getter
    def validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateValidityArgs']]]]:
        """
        Specifies the validity of private certificate.
        Changing this parameter will create a new resource.
        The validity structure is documented below.
        """
        return pulumi.get(self, "validities")

    @validities.setter
    def validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCertificateValidityArgs']]]]):
        pulumi.set(self, "validities", value)


@pulumi.type_token("huaweicloud:ccm/privateCertificate:PrivateCertificate")
class PrivateCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 code_signing: Optional[pulumi.Input[_builtins.bool]] = None,
                 distinguished_names: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateDistinguishedNameArgs', 'PrivateCertificateDistinguishedNameArgsDict']]]]] = None,
                 email_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 object_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 object_identifier_value: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateSubjectAlternativeNameArgs', 'PrivateCertificateSubjectAlternativeNameArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 time_stamping: Optional[pulumi.Input[_builtins.bool]] = None,
                 validities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateValidityArgs', 'PrivateCertificateValidityArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a CCM private certificate resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        common_name = config.require_object("commonName")
        issuer_id = config.require_object("issuerId")
        test = huaweicloud.ccm.PrivateCertificate("test",
            issuer_id=issuer_id,
            key_algorithm="RSA2048",
            signature_algorithm="SHA256",
            distinguished_names=[{
                "common_name": common_name,
            }],
            validities=[{
                "type": "DAY",
                "value": 1,
            }])
        ```

        ## Import

        The CCM private certificate can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ccm/privateCertificate:PrivateCertificate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

          API response, security or some other reason. The missing attributes include: `validity`,`key_usage`,`server_auth`,

        `client_auth`,`code_signing`,`email_protection`,`time_stamping`,`object_identifier`,`object_identifier_value`,

        `subject_alternative_names`.

        It is generally recommended running `pulumi preview` after importing a private certificate. You can then decide if

        changes should be applied to the private certificate, or the resource definition should be updated to align with the

        private certificate. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_ccm_private_certificate" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
                validity,
            
                key_usage,
            
                server_auth,
            
                client_auth,
            
                code_signing,
            
                email_protection,
            
                time_stamping,
            
                object_identifier,
            
                object_identifier_value,
            
                subject_alternative_names,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] client_auth: Specifies whether to enable client authentication. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               > Enable this enhanced key usage for the client certificate.
        :param pulumi.Input[_builtins.bool] code_signing: Specifies whether to enable signing of downloadable executable code client
               authentication. Defaults to **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateDistinguishedNameArgs', 'PrivateCertificateDistinguishedNameArgsDict']]]] distinguished_names: Specifies the distinguished name of private certificate.
               Changing this parameter will create a new resource.
               The distinguished_name structure is documented below.
        :param pulumi.Input[_builtins.bool] email_protection: Specifies whether to enable email protection. Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the certificate belongs.
               For enterprise users, if omitted, resources under all authorized enterprise projects of the tenant will be queried.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] issuer_id: Specifies the ID of the parent CA. Changing this creates
               a new private certificate resource.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm. Valid values are **RSA2048**, **RSA4096**,
               **EC256**, and **EC384**.
               Changing this creates a new private certificate resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] key_usages: Specifies the key usage. Changing this parameter will create a new resource.
               Refer to [4.2.1.3](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3)
               Valid values are as follows:
               + **digitalSignature**: The key is used as a digital signature.
               + **nonRepudiation**: The key can be used for non-repudiation.
               + **keyEncipherment**: The key can be used for key encryption.
               + **dataEncipherment**: The key can be used for data encryption.
               + **keyAgreement**: The key can be used for key negotiation.
               + **keyCertSign**: The key can issue a certificate.
               + **cRLSign**: The key can issue a certificate revocation list (CRL).
               + **encipherOnly**: The key is used only for encryption.
               + **decipherOnly**: The key is used only for decryption.
        :param pulumi.Input[_builtins.str] object_identifier: Specifies the object identifier. Changing this parameter will create
               a new resource.
               
               > The value of this parameter must be a dot-decimal notation string that complies with the ASN1 specifications,
               for example, **1.3.6.1.4.1.2011.4.99**.
        :param pulumi.Input[_builtins.str] object_identifier_value: Specifies the custom attribute content,
               work with `object_identifier`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the certificate region. Changing this creates a new
               private certificate resource. Now only support cn-north-4 (china) and ap-southeast-3 (international)
        :param pulumi.Input[_builtins.bool] server_auth: Specifies whether to enable server authentication. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               > Enable this enhanced key usage for the server certificate.
        :param pulumi.Input[_builtins.str] signature_algorithm: Specifies the private certificate signature hash algorithm.
               Valid values are **SHA256**, **SHA384**, and **SHA512**. Changing this creates a new private certificate resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateSubjectAlternativeNameArgs', 'PrivateCertificateSubjectAlternativeNameArgsDict']]]] subject_alternative_names: Specifies the alternative name for the subject.
               Changing this parameter will create a new resource.
               The subject_alternative_names structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs associating with the private certificate.
               
               <a name="block-distinguished_name"></a>
               The `distinguished_name` block supports:
        :param pulumi.Input[_builtins.bool] time_stamping: Specifies whether to bind the hash of an object to a time.
               Defaults to **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateValidityArgs', 'PrivateCertificateValidityArgsDict']]]] validities: Specifies the validity of private certificate.
               Changing this parameter will create a new resource.
               The validity structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrivateCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CCM private certificate resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        common_name = config.require_object("commonName")
        issuer_id = config.require_object("issuerId")
        test = huaweicloud.ccm.PrivateCertificate("test",
            issuer_id=issuer_id,
            key_algorithm="RSA2048",
            signature_algorithm="SHA256",
            distinguished_names=[{
                "common_name": common_name,
            }],
            validities=[{
                "type": "DAY",
                "value": 1,
            }])
        ```

        ## Import

        The CCM private certificate can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ccm/privateCertificate:PrivateCertificate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

          API response, security or some other reason. The missing attributes include: `validity`,`key_usage`,`server_auth`,

        `client_auth`,`code_signing`,`email_protection`,`time_stamping`,`object_identifier`,`object_identifier_value`,

        `subject_alternative_names`.

        It is generally recommended running `pulumi preview` after importing a private certificate. You can then decide if

        changes should be applied to the private certificate, or the resource definition should be updated to align with the

        private certificate. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_ccm_private_certificate" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
                validity,
            
                key_usage,
            
                server_auth,
            
                client_auth,
            
                code_signing,
            
                email_protection,
            
                time_stamping,
            
                object_identifier,
            
                object_identifier_value,
            
                subject_alternative_names,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param PrivateCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrivateCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 code_signing: Optional[pulumi.Input[_builtins.bool]] = None,
                 distinguished_names: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateDistinguishedNameArgs', 'PrivateCertificateDistinguishedNameArgsDict']]]]] = None,
                 email_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 object_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 object_identifier_value: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateSubjectAlternativeNameArgs', 'PrivateCertificateSubjectAlternativeNameArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 time_stamping: Optional[pulumi.Input[_builtins.bool]] = None,
                 validities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateValidityArgs', 'PrivateCertificateValidityArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrivateCertificateArgs.__new__(PrivateCertificateArgs)

            __props__.__dict__["client_auth"] = client_auth
            __props__.__dict__["code_signing"] = code_signing
            if distinguished_names is None and not opts.urn:
                raise TypeError("Missing required property 'distinguished_names'")
            __props__.__dict__["distinguished_names"] = distinguished_names
            __props__.__dict__["email_protection"] = email_protection
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if issuer_id is None and not opts.urn:
                raise TypeError("Missing required property 'issuer_id'")
            __props__.__dict__["issuer_id"] = issuer_id
            if key_algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'key_algorithm'")
            __props__.__dict__["key_algorithm"] = key_algorithm
            __props__.__dict__["key_usages"] = key_usages
            __props__.__dict__["object_identifier"] = object_identifier
            __props__.__dict__["object_identifier_value"] = object_identifier_value
            __props__.__dict__["region"] = region
            __props__.__dict__["server_auth"] = server_auth
            if signature_algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'signature_algorithm'")
            __props__.__dict__["signature_algorithm"] = signature_algorithm
            __props__.__dict__["subject_alternative_names"] = subject_alternative_names
            __props__.__dict__["tags"] = tags
            __props__.__dict__["time_stamping"] = time_stamping
            if validities is None and not opts.urn:
                raise TypeError("Missing required property 'validities'")
            __props__.__dict__["validities"] = validities
            __props__.__dict__["created_at"] = None
            __props__.__dict__["expired_at"] = None
            __props__.__dict__["gen_mode"] = None
            __props__.__dict__["issuer_name"] = None
            __props__.__dict__["start_at"] = None
            __props__.__dict__["status"] = None
        super(PrivateCertificate, __self__).__init__(
            'huaweicloud:ccm/privateCertificate:PrivateCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_auth: Optional[pulumi.Input[_builtins.bool]] = None,
            code_signing: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            distinguished_names: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateDistinguishedNameArgs', 'PrivateCertificateDistinguishedNameArgsDict']]]]] = None,
            email_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            expired_at: Optional[pulumi.Input[_builtins.str]] = None,
            gen_mode: Optional[pulumi.Input[_builtins.str]] = None,
            issuer_id: Optional[pulumi.Input[_builtins.str]] = None,
            issuer_name: Optional[pulumi.Input[_builtins.str]] = None,
            key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            object_identifier: Optional[pulumi.Input[_builtins.str]] = None,
            object_identifier_value: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            server_auth: Optional[pulumi.Input[_builtins.bool]] = None,
            signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            start_at: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateSubjectAlternativeNameArgs', 'PrivateCertificateSubjectAlternativeNameArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            time_stamping: Optional[pulumi.Input[_builtins.bool]] = None,
            validities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateValidityArgs', 'PrivateCertificateValidityArgsDict']]]]] = None) -> 'PrivateCertificate':
        """
        Get an existing PrivateCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] client_auth: Specifies whether to enable client authentication. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               > Enable this enhanced key usage for the client certificate.
        :param pulumi.Input[_builtins.bool] code_signing: Specifies whether to enable signing of downloadable executable code client
               authentication. Defaults to **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the certificate was created.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateDistinguishedNameArgs', 'PrivateCertificateDistinguishedNameArgsDict']]]] distinguished_names: Specifies the distinguished name of private certificate.
               Changing this parameter will create a new resource.
               The distinguished_name structure is documented below.
        :param pulumi.Input[_builtins.bool] email_protection: Specifies whether to enable email protection. Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the certificate belongs.
               For enterprise users, if omitted, resources under all authorized enterprise projects of the tenant will be queried.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: Indicates the private certificate valid expired time.
        :param pulumi.Input[_builtins.str] gen_mode: Indicates the private certificate create mode,by system or user. Valid values are as follows:
               + **GENERATE**: The certificate is generated through the PCA system.
               + **IMPORT**: The certificate is imported externally.
               + **CSR**: The CSR is imported externally and issued by the internal CA. The private key is not managed in PCA.
        :param pulumi.Input[_builtins.str] issuer_id: Specifies the ID of the parent CA. Changing this creates
               a new private certificate resource.
        :param pulumi.Input[_builtins.str] issuer_name: Indicates the parent CA name.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm. Valid values are **RSA2048**, **RSA4096**,
               **EC256**, and **EC384**.
               Changing this creates a new private certificate resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] key_usages: Specifies the key usage. Changing this parameter will create a new resource.
               Refer to [4.2.1.3](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3)
               Valid values are as follows:
               + **digitalSignature**: The key is used as a digital signature.
               + **nonRepudiation**: The key can be used for non-repudiation.
               + **keyEncipherment**: The key can be used for key encryption.
               + **dataEncipherment**: The key can be used for data encryption.
               + **keyAgreement**: The key can be used for key negotiation.
               + **keyCertSign**: The key can issue a certificate.
               + **cRLSign**: The key can issue a certificate revocation list (CRL).
               + **encipherOnly**: The key is used only for encryption.
               + **decipherOnly**: The key is used only for decryption.
        :param pulumi.Input[_builtins.str] object_identifier: Specifies the object identifier. Changing this parameter will create
               a new resource.
               
               > The value of this parameter must be a dot-decimal notation string that complies with the ASN1 specifications,
               for example, **1.3.6.1.4.1.2011.4.99**.
        :param pulumi.Input[_builtins.str] object_identifier_value: Specifies the custom attribute content,
               work with `object_identifier`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the certificate region. Changing this creates a new
               private certificate resource. Now only support cn-north-4 (china) and ap-southeast-3 (international)
        :param pulumi.Input[_builtins.bool] server_auth: Specifies whether to enable server authentication. Defaults to **false**.
               Changing this parameter will create a new resource.
               
               > Enable this enhanced key usage for the server certificate.
        :param pulumi.Input[_builtins.str] signature_algorithm: Specifies the private certificate signature hash algorithm.
               Valid values are **SHA256**, **SHA384**, and **SHA512**. Changing this creates a new private certificate resource.
        :param pulumi.Input[_builtins.str] start_at: Specifies the private certificate validity start from.
               The value is a timestamp in milliseconds. For example, `1645146939688` indicates `2022-02-18 09:15:39`.
               The value of `start_at` cannot be earlier than the result of the value of current time minus `5` minutes.
               Changing this creates a new private certificate resource.
               
               <a name="block-subject_alternative_names"></a>
               The `subject_alternative_names` block supports:
        :param pulumi.Input[_builtins.str] status: Indicates the private certificate status. Valid values are: **ISSUED**, **EXPIRED** and **REVOKED**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateSubjectAlternativeNameArgs', 'PrivateCertificateSubjectAlternativeNameArgsDict']]]] subject_alternative_names: Specifies the alternative name for the subject.
               Changing this parameter will create a new resource.
               The subject_alternative_names structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs associating with the private certificate.
               
               <a name="block-distinguished_name"></a>
               The `distinguished_name` block supports:
        :param pulumi.Input[_builtins.bool] time_stamping: Specifies whether to bind the hash of an object to a time.
               Defaults to **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCertificateValidityArgs', 'PrivateCertificateValidityArgsDict']]]] validities: Specifies the validity of private certificate.
               Changing this parameter will create a new resource.
               The validity structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrivateCertificateState.__new__(_PrivateCertificateState)

        __props__.__dict__["client_auth"] = client_auth
        __props__.__dict__["code_signing"] = code_signing
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["distinguished_names"] = distinguished_names
        __props__.__dict__["email_protection"] = email_protection
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["expired_at"] = expired_at
        __props__.__dict__["gen_mode"] = gen_mode
        __props__.__dict__["issuer_id"] = issuer_id
        __props__.__dict__["issuer_name"] = issuer_name
        __props__.__dict__["key_algorithm"] = key_algorithm
        __props__.__dict__["key_usages"] = key_usages
        __props__.__dict__["object_identifier"] = object_identifier
        __props__.__dict__["object_identifier_value"] = object_identifier_value
        __props__.__dict__["region"] = region
        __props__.__dict__["server_auth"] = server_auth
        __props__.__dict__["signature_algorithm"] = signature_algorithm
        __props__.__dict__["start_at"] = start_at
        __props__.__dict__["status"] = status
        __props__.__dict__["subject_alternative_names"] = subject_alternative_names
        __props__.__dict__["tags"] = tags
        __props__.__dict__["time_stamping"] = time_stamping
        __props__.__dict__["validities"] = validities
        return PrivateCertificate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clientAuth")
    def client_auth(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable client authentication. Defaults to **false**.
        Changing this parameter will create a new resource.

        > Enable this enhanced key usage for the client certificate.
        """
        return pulumi.get(self, "client_auth")

    @_builtins.property
    @pulumi.getter(name="codeSigning")
    def code_signing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable signing of downloadable executable code client
        authentication. Defaults to **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "code_signing")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the certificate was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="distinguishedNames")
    def distinguished_names(self) -> pulumi.Output[Sequence['outputs.PrivateCertificateDistinguishedName']]:
        """
        Specifies the distinguished name of private certificate.
        Changing this parameter will create a new resource.
        The distinguished_name structure is documented below.
        """
        return pulumi.get(self, "distinguished_names")

    @_builtins.property
    @pulumi.getter(name="emailProtection")
    def email_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable email protection. Defaults to **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "email_protection")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the certificate belongs.
        For enterprise users, if omitted, resources under all authorized enterprise projects of the tenant will be queried.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the private certificate valid expired time.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter(name="genMode")
    def gen_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the private certificate create mode,by system or user. Valid values are as follows:
        + **GENERATE**: The certificate is generated through the PCA system.
        + **IMPORT**: The certificate is imported externally.
        + **CSR**: The CSR is imported externally and issued by the internal CA. The private key is not managed in PCA.
        """
        return pulumi.get(self, "gen_mode")

    @_builtins.property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the parent CA. Changing this creates
        a new private certificate resource.
        """
        return pulumi.get(self, "issuer_id")

    @_builtins.property
    @pulumi.getter(name="issuerName")
    def issuer_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the parent CA name.
        """
        return pulumi.get(self, "issuer_name")

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key algorithm. Valid values are **RSA2048**, **RSA4096**,
        **EC256**, and **EC384**.
        Changing this creates a new private certificate resource.
        """
        return pulumi.get(self, "key_algorithm")

    @_builtins.property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the key usage. Changing this parameter will create a new resource.
        Refer to [4.2.1.3](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3)
        Valid values are as follows:
        + **digitalSignature**: The key is used as a digital signature.
        + **nonRepudiation**: The key can be used for non-repudiation.
        + **keyEncipherment**: The key can be used for key encryption.
        + **dataEncipherment**: The key can be used for data encryption.
        + **keyAgreement**: The key can be used for key negotiation.
        + **keyCertSign**: The key can issue a certificate.
        + **cRLSign**: The key can issue a certificate revocation list (CRL).
        + **encipherOnly**: The key is used only for encryption.
        + **decipherOnly**: The key is used only for decryption.
        """
        return pulumi.get(self, "key_usages")

    @_builtins.property
    @pulumi.getter(name="objectIdentifier")
    def object_identifier(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the object identifier. Changing this parameter will create
        a new resource.

        > The value of this parameter must be a dot-decimal notation string that complies with the ASN1 specifications,
        for example, **1.3.6.1.4.1.2011.4.99**.
        """
        return pulumi.get(self, "object_identifier")

    @_builtins.property
    @pulumi.getter(name="objectIdentifierValue")
    def object_identifier_value(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the custom attribute content,
        work with `object_identifier`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "object_identifier_value")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the certificate region. Changing this creates a new
        private certificate resource. Now only support cn-north-4 (china) and ap-southeast-3 (international)
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverAuth")
    def server_auth(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable server authentication. Defaults to **false**.
        Changing this parameter will create a new resource.

        > Enable this enhanced key usage for the server certificate.
        """
        return pulumi.get(self, "server_auth")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the private certificate signature hash algorithm.
        Valid values are **SHA256**, **SHA384**, and **SHA512**. Changing this creates a new private certificate resource.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter(name="startAt")
    def start_at(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the private certificate validity start from.
        The value is a timestamp in milliseconds. For example, `1645146939688` indicates `2022-02-18 09:15:39`.
        The value of `start_at` cannot be earlier than the result of the value of current time minus `5` minutes.
        Changing this creates a new private certificate resource.

        <a name="block-subject_alternative_names"></a>
        The `subject_alternative_names` block supports:
        """
        return pulumi.get(self, "start_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the private certificate status. Valid values are: **ISSUED**, **EXPIRED** and **REVOKED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> pulumi.Output[Optional[Sequence['outputs.PrivateCertificateSubjectAlternativeName']]]:
        """
        Specifies the alternative name for the subject.
        Changing this parameter will create a new resource.
        The subject_alternative_names structure is documented below.
        """
        return pulumi.get(self, "subject_alternative_names")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs associating with the private certificate.

        <a name="block-distinguished_name"></a>
        The `distinguished_name` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="timeStamping")
    def time_stamping(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to bind the hash of an object to a time.
        Defaults to **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time_stamping")

    @_builtins.property
    @pulumi.getter
    def validities(self) -> pulumi.Output[Sequence['outputs.PrivateCertificateValidity']]:
        """
        Specifies the validity of private certificate.
        Changing this parameter will create a new resource.
        The validity structure is documented below.
        """
        return pulumi.get(self, "validities")

