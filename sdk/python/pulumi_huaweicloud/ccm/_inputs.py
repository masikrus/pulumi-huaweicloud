# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CertificateAuthentificationArgs',
    'CertificateAuthentificationArgsDict',
    'CertificateDeployResourceArgs',
    'CertificateDeployResourceArgsDict',
    'CertificateImportAuthentificationArgs',
    'CertificateImportAuthentificationArgsDict',
    'CertificateImportTargetArgs',
    'CertificateImportTargetArgsDict',
    'CertificatePushTargetArgs',
    'CertificatePushTargetArgsDict',
    'PrivateCaCrlConfigurationArgs',
    'PrivateCaCrlConfigurationArgsDict',
    'PrivateCaDistinguishedNameArgs',
    'PrivateCaDistinguishedNameArgsDict',
    'PrivateCaValidityArgs',
    'PrivateCaValidityArgsDict',
    'PrivateCertificateDistinguishedNameArgs',
    'PrivateCertificateDistinguishedNameArgsDict',
    'PrivateCertificateSubjectAlternativeNameArgs',
    'PrivateCertificateSubjectAlternativeNameArgsDict',
    'PrivateCertificateValidityArgs',
    'PrivateCertificateValidityArgsDict',
]

MYPY = False

if not MYPY:
    class CertificateAuthentificationArgsDict(TypedDict):
        domain: NotRequired[pulumi.Input[_builtins.str]]
        """
        The domain name corresponding to the check value.
        """
        record_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the domain name check value.
        """
        record_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the domain name check value.
        """
        record_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The domain name check value.
        """
elif False:
    CertificateAuthentificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CertificateAuthentificationArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 record_name: Optional[pulumi.Input[_builtins.str]] = None,
                 record_type: Optional[pulumi.Input[_builtins.str]] = None,
                 record_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] domain: The domain name corresponding to the check value.
        :param pulumi.Input[_builtins.str] record_name: The name of the domain name check value.
        :param pulumi.Input[_builtins.str] record_type: The type of the domain name check value.
        :param pulumi.Input[_builtins.str] record_value: The domain name check value.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if record_name is not None:
            pulumi.set(__self__, "record_name", record_name)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if record_value is not None:
            pulumi.set(__self__, "record_value", record_value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The domain name corresponding to the check value.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="recordName")
    def record_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the domain name check value.
        """
        return pulumi.get(self, "record_name")

    @record_name.setter
    def record_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_name", value)

    @_builtins.property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the domain name check value.
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_type", value)

    @_builtins.property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The domain name check value.
        """
        return pulumi.get(self, "record_value")

    @record_value.setter
    def record_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_value", value)


if not MYPY:
    class CertificateDeployResourceArgsDict(TypedDict):
        domain_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the domain name to be deployed. This field is required only
        when `service_name` is set to **CDN**. The domain name must match the certificate.

        Changing this parameter will create a new resource.
        """
        enterprise_project_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the enterprise project ID to which the resources
        to be deployed. This field is required only when `service_name` is set to **WAF**.
        If omitted, default enterprise project will be used.

        Changing this parameter will create a new resource.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the certificate ID. This field is required only when `service_name` is
        set to **WAF** or **ELB**.

        Changing this parameter will create a new resource.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the resource type. This field is required only when `service_name` is
        set to **WAF**. Valid values are **premium** (exclusive mode) and **cloud** (cloud mode).

        Changing this parameter will create a new resource.
        """
elif False:
    CertificateDeployResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CertificateDeployResourceArgs:
    def __init__(__self__, *,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name to be deployed. This field is required only
               when `service_name` is set to **CDN**. The domain name must match the certificate.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the resources
               to be deployed. This field is required only when `service_name` is set to **WAF**.
               If omitted, default enterprise project will be used.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] id: Specifies the certificate ID. This field is required only when `service_name` is
               set to **WAF** or **ELB**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the resource type. This field is required only when `service_name` is
               set to **WAF**. Valid values are **premium** (exclusive mode) and **cloud** (cloud mode).
               
               Changing this parameter will create a new resource.
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain name to be deployed. This field is required only
        when `service_name` is set to **CDN**. The domain name must match the certificate.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the resources
        to be deployed. This field is required only when `service_name` is set to **WAF**.
        If omitted, default enterprise project will be used.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate ID. This field is required only when `service_name` is
        set to **WAF** or **ELB**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource type. This field is required only when `service_name` is
        set to **WAF**. Valid values are **premium** (exclusive mode) and **cloud** (cloud mode).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class CertificateImportAuthentificationArgsDict(TypedDict):
        domain: NotRequired[pulumi.Input[_builtins.str]]
        """
        The domain name mapping to the verification value
        """
        record_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of a domain ownership verification value.
        """
        record_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the domain name verification value.
        """
        record_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The domain verification value.
        """
elif False:
    CertificateImportAuthentificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CertificateImportAuthentificationArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 record_name: Optional[pulumi.Input[_builtins.str]] = None,
                 record_type: Optional[pulumi.Input[_builtins.str]] = None,
                 record_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] domain: The domain name mapping to the verification value
        :param pulumi.Input[_builtins.str] record_name: The name of a domain ownership verification value.
        :param pulumi.Input[_builtins.str] record_type: The type of the domain name verification value.
        :param pulumi.Input[_builtins.str] record_value: The domain verification value.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if record_name is not None:
            pulumi.set(__self__, "record_name", record_name)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if record_value is not None:
            pulumi.set(__self__, "record_value", record_value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The domain name mapping to the verification value
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="recordName")
    def record_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of a domain ownership verification value.
        """
        return pulumi.get(self, "record_name")

    @record_name.setter
    def record_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_name", value)

    @_builtins.property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the domain name verification value.
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_type", value)

    @_builtins.property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The domain verification value.
        """
        return pulumi.get(self, "record_value")

    @record_value.setter
    def record_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "record_value", value)


if not MYPY:
    class CertificateImportTargetArgsDict(TypedDict):
        service: pulumi.Input[_builtins.str]
        """
        Specifies the service to which the certificate is pushed. The options include `CDN`,`WAF`
        and `ELB`.
        """
        projects: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the projects where the service you want to push a certificate to.
        The same certificate can be pushed repeatedly to the same WAF or ELB service in the same `project`, but the CDN service
        can only be pushed once. This parameter is required when pushing certificate to `WAF` or `ELB` service.
        """
elif False:
    CertificateImportTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CertificateImportTargetArgs:
    def __init__(__self__, *,
                 service: pulumi.Input[_builtins.str],
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] service: Specifies the service to which the certificate is pushed. The options include `CDN`,`WAF`
               and `ELB`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] projects: Specifies the projects where the service you want to push a certificate to.
               The same certificate can be pushed repeatedly to the same WAF or ELB service in the same `project`, but the CDN service
               can only be pushed once. This parameter is required when pushing certificate to `WAF` or `ELB` service.
        """
        pulumi.set(__self__, "service", service)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the service to which the certificate is pushed. The options include `CDN`,`WAF`
        and `ELB`.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter
    def projects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the projects where the service you want to push a certificate to.
        The same certificate can be pushed repeatedly to the same WAF or ELB service in the same `project`, but the CDN service
        can only be pushed once. This parameter is required when pushing certificate to `WAF` or `ELB` service.
        """
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "projects", value)


if not MYPY:
    class CertificatePushTargetArgsDict(TypedDict):
        project_name: pulumi.Input[_builtins.str]
        """
        Specifies the region where the target service for certificate push is located.
        """
        cert_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the target certificate ID.
        """
        cert_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the target certificate name.
        """
elif False:
    CertificatePushTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CertificatePushTargetArgs:
    def __init__(__self__, *,
                 project_name: pulumi.Input[_builtins.str],
                 cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cert_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] project_name: Specifies the region where the target service for certificate push is located.
        :param pulumi.Input[_builtins.str] cert_id: Indicates the target certificate ID.
        :param pulumi.Input[_builtins.str] cert_name: Indicates the target certificate name.
        """
        pulumi.set(__self__, "project_name", project_name)
        if cert_id is not None:
            pulumi.set(__self__, "cert_id", cert_id)
        if cert_name is not None:
            pulumi.set(__self__, "cert_name", cert_name)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the region where the target service for certificate push is located.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_name", value)

    @_builtins.property
    @pulumi.getter(name="certId")
    def cert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the target certificate ID.
        """
        return pulumi.get(self, "cert_id")

    @cert_id.setter
    def cert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cert_id", value)

    @_builtins.property
    @pulumi.getter(name="certName")
    def cert_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the target certificate name.
        """
        return pulumi.get(self, "cert_name")

    @cert_name.setter
    def cert_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cert_name", value)


if not MYPY:
    class PrivateCaCrlConfigurationArgsDict(TypedDict):
        crl_dis_point: NotRequired[pulumi.Input[_builtins.str]]
        crl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        schema: Computed
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable the CRL publishing function. Defaults to **false**.
        """
        obs_bucket_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the OBS bucket name. This field is required only when the CRL publishing
        function is enabled.
        """
        valid_days: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the CRL update interval, in days. It's limited from `7` to `30`.
        This field is required only when the CRL publishing function is enabled.

        > Due to API limitations, the fields `obs_bucket_name` and `valid_days` must be changed together with `enable`.
        For example, if you want to update `obs_bucket_name` or `valid_days` when the CRL function is enabled, you need to
        disable the CRL function first, then enable it and configure new `obs_bucket_name` or `valid_days` values.
        """
elif False:
    PrivateCaCrlConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateCaCrlConfigurationArgs:
    def __init__(__self__, *,
                 crl_dis_point: Optional[pulumi.Input[_builtins.str]] = None,
                 crl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 obs_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_days: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] crl_name: schema: Computed
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable the CRL publishing function. Defaults to **false**.
        :param pulumi.Input[_builtins.str] obs_bucket_name: Specifies the OBS bucket name. This field is required only when the CRL publishing
               function is enabled.
        :param pulumi.Input[_builtins.int] valid_days: Specifies the CRL update interval, in days. It's limited from `7` to `30`.
               This field is required only when the CRL publishing function is enabled.
               
               > Due to API limitations, the fields `obs_bucket_name` and `valid_days` must be changed together with `enable`.
               For example, if you want to update `obs_bucket_name` or `valid_days` when the CRL function is enabled, you need to
               disable the CRL function first, then enable it and configure new `obs_bucket_name` or `valid_days` values.
        """
        if crl_dis_point is not None:
            pulumi.set(__self__, "crl_dis_point", crl_dis_point)
        if crl_name is not None:
            pulumi.set(__self__, "crl_name", crl_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if obs_bucket_name is not None:
            pulumi.set(__self__, "obs_bucket_name", obs_bucket_name)
        if valid_days is not None:
            pulumi.set(__self__, "valid_days", valid_days)

    @_builtins.property
    @pulumi.getter(name="crlDisPoint")
    def crl_dis_point(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "crl_dis_point")

    @crl_dis_point.setter
    def crl_dis_point(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crl_dis_point", value)

    @_builtins.property
    @pulumi.getter(name="crlName")
    def crl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "crl_name")

    @crl_name.setter
    def crl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crl_name", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the CRL publishing function. Defaults to **false**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="obsBucketName")
    def obs_bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OBS bucket name. This field is required only when the CRL publishing
        function is enabled.
        """
        return pulumi.get(self, "obs_bucket_name")

    @obs_bucket_name.setter
    def obs_bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "obs_bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="validDays")
    def valid_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the CRL update interval, in days. It's limited from `7` to `30`.
        This field is required only when the CRL publishing function is enabled.

        > Due to API limitations, the fields `obs_bucket_name` and `valid_days` must be changed together with `enable`.
        For example, if you want to update `obs_bucket_name` or `valid_days` when the CRL function is enabled, you need to
        disable the CRL function first, then enable it and configure new `obs_bucket_name` or `valid_days` values.
        """
        return pulumi.get(self, "valid_days")

    @valid_days.setter
    def valid_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "valid_days", value)


if not MYPY:
    class PrivateCaDistinguishedNameArgsDict(TypedDict):
        common_name: pulumi.Input[_builtins.str]
        """
        Specifies the common name of private CA. The valid length is limited
        between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,),
        space ( ) and asterisks (*) are allowed. Changing this parameter will create a new resource.
        """
        country: pulumi.Input[_builtins.str]
        """
        Specifies the country of private CA. The valid length is limited in `2`,
        Only English letters are allowed. Changing this parameter will create a new resource.
        """
        locality: pulumi.Input[_builtins.str]
        """
        Specifies the locality of private CA. The valid length is limited between
        `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
        space ( ) are allowed. Changing this parameter will create a new resource.
        """
        organization: pulumi.Input[_builtins.str]
        """
        Specifies the organization of private CA. The valid length is limited
        between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
        space ( ) are allowed. Changing this parameter will create a new resource.
        """
        organizational_unit: pulumi.Input[_builtins.str]
        """
        Specifies the organizational unit of private CA. The valid length
        is limited between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.),
        comma (,) and space ( ) are allowed. Changing this parameter will create a new resource.

        <a name="block-validity"></a>
        The `validity` block supports:
        """
        state: pulumi.Input[_builtins.str]
        """
        Specifies the state of private CA. The valid length is limited between
        `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
        space ( ) are allowed. Changing this parameter will create a new resource.
        """
elif False:
    PrivateCaDistinguishedNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateCaDistinguishedNameArgs:
    def __init__(__self__, *,
                 common_name: pulumi.Input[_builtins.str],
                 country: pulumi.Input[_builtins.str],
                 locality: pulumi.Input[_builtins.str],
                 organization: pulumi.Input[_builtins.str],
                 organizational_unit: pulumi.Input[_builtins.str],
                 state: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] common_name: Specifies the common name of private CA. The valid length is limited
               between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,),
               space ( ) and asterisks (*) are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] country: Specifies the country of private CA. The valid length is limited in `2`,
               Only English letters are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] locality: Specifies the locality of private CA. The valid length is limited between
               `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
               space ( ) are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the organization of private CA. The valid length is limited
               between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
               space ( ) are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organizational_unit: Specifies the organizational unit of private CA. The valid length
               is limited between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.),
               comma (,) and space ( ) are allowed. Changing this parameter will create a new resource.
               
               <a name="block-validity"></a>
               The `validity` block supports:
        :param pulumi.Input[_builtins.str] state: Specifies the state of private CA. The valid length is limited between
               `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
               space ( ) are allowed. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "common_name", common_name)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "locality", locality)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "organizational_unit", organizational_unit)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the common name of private CA. The valid length is limited
        between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,),
        space ( ) and asterisks (*) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "common_name", value)

    @_builtins.property
    @pulumi.getter
    def country(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the country of private CA. The valid length is limited in `2`,
        Only English letters are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "country", value)

    @_builtins.property
    @pulumi.getter
    def locality(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the locality of private CA. The valid length is limited between
        `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
        space ( ) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "locality", value)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the organization of private CA. The valid length is limited
        between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
        space ( ) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization", value)

    @_builtins.property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the organizational unit of private CA. The valid length
        is limited between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.),
        comma (,) and space ( ) are allowed. Changing this parameter will create a new resource.

        <a name="block-validity"></a>
        The `validity` block supports:
        """
        return pulumi.get(self, "organizational_unit")

    @organizational_unit.setter
    def organizational_unit(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organizational_unit", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the state of private CA. The valid length is limited between
        `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
        space ( ) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "state", value)


if not MYPY:
    class PrivateCaValidityArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of validity value. Changing this parameter will create a new
        resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
        support **YEAR** and **MONTH(31 days)**.
        """
        value: pulumi.Input[_builtins.int]
        """
        Specifies the value of validity. Root CA certificate is no longer than 30 years
        and subordinate CA is no longer than 20 years. Changing this parameter will create a new resource. When creating a
        subordinate CA, the validity must less than the root CA.
        """
        started_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the start time of validity. The value is a timestamp in milliseconds.
        For example, `1722840237000` indicates `2024-08-05 14:43:57`. The value of `started_at` cannot be earlier than `5` minutes
        from the current time.
        Changing this parameter will create a new resource.

        <a name="block-crl_configuration"></a>
        The `crl_configuration` block supports:
        """
elif False:
    PrivateCaValidityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateCaValidityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.int],
                 started_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the type of validity value. Changing this parameter will create a new
               resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
               support **YEAR** and **MONTH(31 days)**.
        :param pulumi.Input[_builtins.int] value: Specifies the value of validity. Root CA certificate is no longer than 30 years
               and subordinate CA is no longer than 20 years. Changing this parameter will create a new resource. When creating a
               subordinate CA, the validity must less than the root CA.
        :param pulumi.Input[_builtins.str] started_at: Specifies the start time of validity. The value is a timestamp in milliseconds.
               For example, `1722840237000` indicates `2024-08-05 14:43:57`. The value of `started_at` cannot be earlier than `5` minutes
               from the current time.
               Changing this parameter will create a new resource.
               
               <a name="block-crl_configuration"></a>
               The `crl_configuration` block supports:
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of validity value. Changing this parameter will create a new
        resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
        support **YEAR** and **MONTH(31 days)**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the value of validity. Root CA certificate is no longer than 30 years
        and subordinate CA is no longer than 20 years. Changing this parameter will create a new resource. When creating a
        subordinate CA, the validity must less than the root CA.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the start time of validity. The value is a timestamp in milliseconds.
        For example, `1722840237000` indicates `2024-08-05 14:43:57`. The value of `started_at` cannot be earlier than `5` minutes
        from the current time.
        Changing this parameter will create a new resource.

        <a name="block-crl_configuration"></a>
        The `crl_configuration` block supports:
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "started_at", value)


if not MYPY:
    class PrivateCertificateDistinguishedNameArgsDict(TypedDict):
        common_name: pulumi.Input[_builtins.str]
        """
        Specifies the common name of private certificate. The valid length
        is limited between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_),
        dots (.), comma (,), space ( ) and asterisks (*) are allowed. Changing this parameter will create a new resource.
        """
        country: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the country code of private certificate. The valid length is
        limited in `2`. Only English letters are allowed. The value corresponding to the parent CA is inherited by default.
        Changing this parameter will create a new resource.
        """
        locality: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the locality of private certificate. The valid length
        is limited between `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_),
        dots (.), comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited by default.
        Changing this parameter will create a new resource.
        """
        organization: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the organization of private certificate. The valid length
        is limited between `1` to `64`. Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.),
        comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited by default.
        Changing this parameter will create a new resource.
        """
        organizational_unit: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the organizational unit of private certificate.
        The valid length is limited between `1` to `64`. Only Chinese and English letters, digits, hyphens (-),
        underscores (_), dots (.), comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited
        by default. Changing this parameter will create a new resource.

        <a name="block-validity"></a>
        The `validity` block supports:
        """
        state: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the state or city name of private certificate. The valid length is
        limited between `1` to `128`. Only Chinese and English letters, digits, hyphens (-), underscores (_),
        dots (.), comma (,) and space ( ) are allowed. Changing this parameter will create a new resource.
        """
elif False:
    PrivateCertificateDistinguishedNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateCertificateDistinguishedNameArgs:
    def __init__(__self__, *,
                 common_name: pulumi.Input[_builtins.str],
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 locality: Optional[pulumi.Input[_builtins.str]] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None,
                 organizational_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] common_name: Specifies the common name of private certificate. The valid length
               is limited between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_),
               dots (.), comma (,), space ( ) and asterisks (*) are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] country: Specifies the country code of private certificate. The valid length is
               limited in `2`. Only English letters are allowed. The value corresponding to the parent CA is inherited by default.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] locality: Specifies the locality of private certificate. The valid length
               is limited between `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_),
               dots (.), comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited by default.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization: Specifies the organization of private certificate. The valid length
               is limited between `1` to `64`. Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.),
               comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited by default.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organizational_unit: Specifies the organizational unit of private certificate.
               The valid length is limited between `1` to `64`. Only Chinese and English letters, digits, hyphens (-),
               underscores (_), dots (.), comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited
               by default. Changing this parameter will create a new resource.
               
               <a name="block-validity"></a>
               The `validity` block supports:
        :param pulumi.Input[_builtins.str] state: Specifies the state or city name of private certificate. The valid length is
               limited between `1` to `128`. Only Chinese and English letters, digits, hyphens (-), underscores (_),
               dots (.), comma (,) and space ( ) are allowed. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the common name of private certificate. The valid length
        is limited between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_),
        dots (.), comma (,), space ( ) and asterisks (*) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "common_name", value)

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the country code of private certificate. The valid length is
        limited in `2`. Only English letters are allowed. The value corresponding to the parent CA is inherited by default.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "country", value)

    @_builtins.property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the locality of private certificate. The valid length
        is limited between `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_),
        dots (.), comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited by default.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "locality", value)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the organization of private certificate. The valid length
        is limited between `1` to `64`. Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.),
        comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited by default.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization", value)

    @_builtins.property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the organizational unit of private certificate.
        The valid length is limited between `1` to `64`. Only Chinese and English letters, digits, hyphens (-),
        underscores (_), dots (.), comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited
        by default. Changing this parameter will create a new resource.

        <a name="block-validity"></a>
        The `validity` block supports:
        """
        return pulumi.get(self, "organizational_unit")

    @organizational_unit.setter
    def organizational_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organizational_unit", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the state or city name of private certificate. The valid length is
        limited between `1` to `128`. Only Chinese and English letters, digits, hyphens (-), underscores (_),
        dots (.), comma (,) and space ( ) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class PrivateCertificateSubjectAlternativeNameArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the alternative name. Currently,
        only **DNS**, **IP**, **EMAIL**, and **URI** are allowed. Changing this parameter will create a new resource.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the corresponding alternative name type.
        Changing this parameter will create a new resource.
        + When `type` is **DNS**, the value length ranges from `0` to `253` characters.
        + When `type` is **IP**, the value length ranges from `0` to `39` characters. Support IPv4 and IPv6.
        + When `type` is **EMAIL**, the value length ranges from `0` to `256` characters.
        + When `type` is **URI**, the value length ranges from `0` to `253` characters.
        """
elif False:
    PrivateCertificateSubjectAlternativeNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateCertificateSubjectAlternativeNameArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the type of the alternative name. Currently,
               only **DNS**, **IP**, **EMAIL**, and **URI** are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the corresponding alternative name type.
               Changing this parameter will create a new resource.
               + When `type` is **DNS**, the value length ranges from `0` to `253` characters.
               + When `type` is **IP**, the value length ranges from `0` to `39` characters. Support IPv4 and IPv6.
               + When `type` is **EMAIL**, the value length ranges from `0` to `256` characters.
               + When `type` is **URI**, the value length ranges from `0` to `253` characters.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the alternative name. Currently,
        only **DNS**, **IP**, **EMAIL**, and **URI** are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the corresponding alternative name type.
        Changing this parameter will create a new resource.
        + When `type` is **DNS**, the value length ranges from `0` to `253` characters.
        + When `type` is **IP**, the value length ranges from `0` to `39` characters. Support IPv4 and IPv6.
        + When `type` is **EMAIL**, the value length ranges from `0` to `256` characters.
        + When `type` is **URI**, the value length ranges from `0` to `253` characters.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PrivateCertificateValidityArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the alternative name. Currently,
        only **DNS**, **IP**, **EMAIL**, and **URI** are allowed. Changing this parameter will create a new resource.
        """
        value: pulumi.Input[_builtins.int]
        """
        Specifies the value of the corresponding alternative name type.
        Changing this parameter will create a new resource.
        + When `type` is **DNS**, the value length ranges from `0` to `253` characters.
        + When `type` is **IP**, the value length ranges from `0` to `39` characters. Support IPv4 and IPv6.
        + When `type` is **EMAIL**, the value length ranges from `0` to `256` characters.
        + When `type` is **URI**, the value length ranges from `0` to `253` characters.
        """
        start_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the private certificate validity start from.
        The value is a timestamp in milliseconds. For example, `1645146939688` indicates `2022-02-18 09:15:39`.
        The value of `start_at` cannot be earlier than the result of the value of current time minus `5` minutes.
        Changing this creates a new private certificate resource.

        <a name="block-subject_alternative_names"></a>
        The `subject_alternative_names` block supports:
        """
elif False:
    PrivateCertificateValidityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateCertificateValidityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.int],
                 start_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the type of the alternative name. Currently,
               only **DNS**, **IP**, **EMAIL**, and **URI** are allowed. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] value: Specifies the value of the corresponding alternative name type.
               Changing this parameter will create a new resource.
               + When `type` is **DNS**, the value length ranges from `0` to `253` characters.
               + When `type` is **IP**, the value length ranges from `0` to `39` characters. Support IPv4 and IPv6.
               + When `type` is **EMAIL**, the value length ranges from `0` to `256` characters.
               + When `type` is **URI**, the value length ranges from `0` to `253` characters.
        :param pulumi.Input[_builtins.str] start_at: Specifies the private certificate validity start from.
               The value is a timestamp in milliseconds. For example, `1645146939688` indicates `2022-02-18 09:15:39`.
               The value of `start_at` cannot be earlier than the result of the value of current time minus `5` minutes.
               Changing this creates a new private certificate resource.
               
               <a name="block-subject_alternative_names"></a>
               The `subject_alternative_names` block supports:
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if start_at is not None:
            pulumi.set(__self__, "start_at", start_at)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the alternative name. Currently,
        only **DNS**, **IP**, **EMAIL**, and **URI** are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the value of the corresponding alternative name type.
        Changing this parameter will create a new resource.
        + When `type` is **DNS**, the value length ranges from `0` to `253` characters.
        + When `type` is **IP**, the value length ranges from `0` to `39` characters. Support IPv4 and IPv6.
        + When `type` is **EMAIL**, the value length ranges from `0` to `256` characters.
        + When `type` is **URI**, the value length ranges from `0` to `253` characters.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="startAt")
    def start_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the private certificate validity start from.
        The value is a timestamp in milliseconds. For example, `1645146939688` indicates `2022-02-18 09:15:39`.
        The value of `start_at` cannot be earlier than the result of the value of current time minus `5` minutes.
        Changing this creates a new private certificate resource.

        <a name="block-subject_alternative_names"></a>
        The `subject_alternative_names` block supports:
        """
        return pulumi.get(self, "start_at")

    @start_at.setter
    def start_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_at", value)


