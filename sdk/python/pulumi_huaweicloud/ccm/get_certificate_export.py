# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetCertificateExportResult',
    'AwaitableGetCertificateExportResult',
    'get_certificate_export',
    'get_certificate_export_output',
]

@pulumi.output_type
class GetCertificateExportResult:
    """
    A collection of values returned by getCertificateExport.
    """
    def __init__(__self__, certificate=None, certificate_chain=None, certificate_id=None, enc_certificate=None, enc_private_key=None, entire_certificate=None, id=None, private_key=None, region=None):
        if certificate and not isinstance(certificate, str):
            raise TypeError("Expected argument 'certificate' to be a str")
        pulumi.set(__self__, "certificate", certificate)
        if certificate_chain and not isinstance(certificate_chain, str):
            raise TypeError("Expected argument 'certificate_chain' to be a str")
        pulumi.set(__self__, "certificate_chain", certificate_chain)
        if certificate_id and not isinstance(certificate_id, str):
            raise TypeError("Expected argument 'certificate_id' to be a str")
        pulumi.set(__self__, "certificate_id", certificate_id)
        if enc_certificate and not isinstance(enc_certificate, str):
            raise TypeError("Expected argument 'enc_certificate' to be a str")
        pulumi.set(__self__, "enc_certificate", enc_certificate)
        if enc_private_key and not isinstance(enc_private_key, str):
            raise TypeError("Expected argument 'enc_private_key' to be a str")
        pulumi.set(__self__, "enc_private_key", enc_private_key)
        if entire_certificate and not isinstance(entire_certificate, str):
            raise TypeError("Expected argument 'entire_certificate' to be a str")
        pulumi.set(__self__, "entire_certificate", entire_certificate)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if private_key and not isinstance(private_key, str):
            raise TypeError("Expected argument 'private_key' to be a str")
        pulumi.set(__self__, "private_key", private_key)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> _builtins.str:
        """
        The certificate content.
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> _builtins.str:
        """
        The certificate chain.
        """
        return pulumi.get(self, "certificate_chain")

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> _builtins.str:
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="encCertificate")
    def enc_certificate(self) -> _builtins.str:
        """
        The encryption certificate content. This attribute is only meaningful in the state secret certificate.
        """
        return pulumi.get(self, "enc_certificate")

    @_builtins.property
    @pulumi.getter(name="encPrivateKey")
    def enc_private_key(self) -> _builtins.str:
        """
        The encryption certificate private key. This attribute is only meaningful in the state secret certificate.
        """
        return pulumi.get(self, "enc_private_key")

    @_builtins.property
    @pulumi.getter(name="entireCertificate")
    def entire_certificate(self) -> _builtins.str:
        """
        The certificate content and certificate chain.
        """
        return pulumi.get(self, "entire_certificate")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> _builtins.str:
        """
        The private key of the certificate.
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetCertificateExportResult(GetCertificateExportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificateExportResult(
            certificate=self.certificate,
            certificate_chain=self.certificate_chain,
            certificate_id=self.certificate_id,
            enc_certificate=self.enc_certificate,
            enc_private_key=self.enc_private_key,
            entire_certificate=self.entire_certificate,
            id=self.id,
            private_key=self.private_key,
            region=self.region)


def get_certificate_export(certificate_id: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificateExportResult:
    """
    Use this data source to export an SSL certificate within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    certificate_id = config.require_object("certificateId")
    test = huaweicloud.ccm.get_certificate_export(certificate_id=certificate_id)
    ```


    :param _builtins.str certificate_id: Specifies the SSL certificate ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ccm/getCertificateExport:getCertificateExport', __args__, opts=opts, typ=GetCertificateExportResult).value

    return AwaitableGetCertificateExportResult(
        certificate=pulumi.get(__ret__, 'certificate'),
        certificate_chain=pulumi.get(__ret__, 'certificate_chain'),
        certificate_id=pulumi.get(__ret__, 'certificate_id'),
        enc_certificate=pulumi.get(__ret__, 'enc_certificate'),
        enc_private_key=pulumi.get(__ret__, 'enc_private_key'),
        entire_certificate=pulumi.get(__ret__, 'entire_certificate'),
        id=pulumi.get(__ret__, 'id'),
        private_key=pulumi.get(__ret__, 'private_key'),
        region=pulumi.get(__ret__, 'region'))
def get_certificate_export_output(certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCertificateExportResult]:
    """
    Use this data source to export an SSL certificate within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    certificate_id = config.require_object("certificateId")
    test = huaweicloud.ccm.get_certificate_export(certificate_id=certificate_id)
    ```


    :param _builtins.str certificate_id: Specifies the SSL certificate ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ccm/getCertificateExport:getCertificateExport', __args__, opts=opts, typ=GetCertificateExportResult)
    return __ret__.apply(lambda __response__: GetCertificateExportResult(
        certificate=pulumi.get(__response__, 'certificate'),
        certificate_chain=pulumi.get(__response__, 'certificate_chain'),
        certificate_id=pulumi.get(__response__, 'certificate_id'),
        enc_certificate=pulumi.get(__response__, 'enc_certificate'),
        enc_private_key=pulumi.get(__response__, 'enc_private_key'),
        entire_certificate=pulumi.get(__response__, 'entire_certificate'),
        id=pulumi.get(__response__, 'id'),
        private_key=pulumi.get(__response__, 'private_key'),
        region=pulumi.get(__response__, 'region')))
