# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPrivateCaExportResult',
    'AwaitableGetPrivateCaExportResult',
    'get_private_ca_export',
    'get_private_ca_export_output',
]

@pulumi.output_type
class GetPrivateCaExportResult:
    """
    A collection of values returned by getPrivateCaExport.
    """
    def __init__(__self__, ca_id=None, certificate=None, certificate_chain=None, id=None, region=None):
        if ca_id and not isinstance(ca_id, str):
            raise TypeError("Expected argument 'ca_id' to be a str")
        pulumi.set(__self__, "ca_id", ca_id)
        if certificate and not isinstance(certificate, str):
            raise TypeError("Expected argument 'certificate' to be a str")
        pulumi.set(__self__, "certificate", certificate)
        if certificate_chain and not isinstance(certificate_chain, str):
            raise TypeError("Expected argument 'certificate_chain' to be a str")
        pulumi.set(__self__, "certificate_chain", certificate_chain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="caId")
    def ca_id(self) -> _builtins.str:
        return pulumi.get(self, "ca_id")

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> _builtins.str:
        """
        The certificate content.
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> _builtins.str:
        """
        The content of the certificate chain.
        """
        return pulumi.get(self, "certificate_chain")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetPrivateCaExportResult(GetPrivateCaExportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateCaExportResult(
            ca_id=self.ca_id,
            certificate=self.certificate,
            certificate_chain=self.certificate_chain,
            id=self.id,
            region=self.region)


def get_private_ca_export(ca_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateCaExportResult:
    """
    Use this data source to export a private CA within HuaweiCloud.

    > Only CAs in `ACTIVED`, `DISABLED` or `EXPIRED` status support exporting operation.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    ca_id = config.require_object("caId")
    test = huaweicloud.ccm.get_private_ca_export(ca_id=ca_id)
    ```


    :param _builtins.str ca_id: Specifies the ID of the CA you want to export.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['caId'] = ca_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ccm/getPrivateCaExport:getPrivateCaExport', __args__, opts=opts, typ=GetPrivateCaExportResult).value

    return AwaitableGetPrivateCaExportResult(
        ca_id=pulumi.get(__ret__, 'ca_id'),
        certificate=pulumi.get(__ret__, 'certificate'),
        certificate_chain=pulumi.get(__ret__, 'certificate_chain'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_private_ca_export_output(ca_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrivateCaExportResult]:
    """
    Use this data source to export a private CA within HuaweiCloud.

    > Only CAs in `ACTIVED`, `DISABLED` or `EXPIRED` status support exporting operation.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    ca_id = config.require_object("caId")
    test = huaweicloud.ccm.get_private_ca_export(ca_id=ca_id)
    ```


    :param _builtins.str ca_id: Specifies the ID of the CA you want to export.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['caId'] = ca_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ccm/getPrivateCaExport:getPrivateCaExport', __args__, opts=opts, typ=GetPrivateCaExportResult)
    return __ret__.apply(lambda __response__: GetPrivateCaExportResult(
        ca_id=pulumi.get(__response__, 'ca_id'),
        certificate=pulumi.get(__response__, 'certificate'),
        certificate_chain=pulumi.get(__response__, 'certificate_chain'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
