# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CertificatePushArgs', 'CertificatePush']

@pulumi.input_type
class CertificatePushArgs:
    def __init__(__self__, *,
                 certificate_id: pulumi.Input[_builtins.str],
                 service: pulumi.Input[_builtins.str],
                 targets: pulumi.Input[Sequence[pulumi.Input['CertificatePushTargetArgs']]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CertificatePush resource.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the ID of the SSL certificate to be pushed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service: Specifies the target service for certificate push.
               Changing this creates a new resource. Valid values are **ELB** and **WAF**.
               
               > Before pushing the certificate to the WAF service, please confirm that the target region has an available WAF instance.
        :param pulumi.Input[Sequence[pulumi.Input['CertificatePushTargetArgs']]] targets: Specifies the projects which certificate will be push to.
               The targets structure is documented below.
               
               <a name="block-targets"></a>
               The `targets` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the certificate region. Changing this creates a new
               private certificate resource. Now only support cn-north-4 (china) and ap-southeast-1 (international).
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "targets", targets)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the SSL certificate to be pushed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the target service for certificate push.
        Changing this creates a new resource. Valid values are **ELB** and **WAF**.

        > Before pushing the certificate to the WAF service, please confirm that the target region has an available WAF instance.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Input[Sequence[pulumi.Input['CertificatePushTargetArgs']]]:
        """
        Specifies the projects which certificate will be push to.
        The targets structure is documented below.

        <a name="block-targets"></a>
        The `targets` block supports:
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: pulumi.Input[Sequence[pulumi.Input['CertificatePushTargetArgs']]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate region. Changing this creates a new
        private certificate resource. Now only support cn-north-4 (china) and ap-southeast-1 (international).
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CertificatePushState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['CertificatePushTargetArgs']]]] = None):
        """
        Input properties used for looking up and filtering CertificatePush resources.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the ID of the SSL certificate to be pushed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the certificate region. Changing this creates a new
               private certificate resource. Now only support cn-north-4 (china) and ap-southeast-1 (international).
        :param pulumi.Input[_builtins.str] service: Specifies the target service for certificate push.
               Changing this creates a new resource. Valid values are **ELB** and **WAF**.
               
               > Before pushing the certificate to the WAF service, please confirm that the target region has an available WAF instance.
        :param pulumi.Input[Sequence[pulumi.Input['CertificatePushTargetArgs']]] targets: Specifies the projects which certificate will be push to.
               The targets structure is documented below.
               
               <a name="block-targets"></a>
               The `targets` block supports:
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the SSL certificate to be pushed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate region. Changing this creates a new
        private certificate resource. Now only support cn-north-4 (china) and ap-southeast-1 (international).
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target service for certificate push.
        Changing this creates a new resource. Valid values are **ELB** and **WAF**.

        > Before pushing the certificate to the WAF service, please confirm that the target region has an available WAF instance.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CertificatePushTargetArgs']]]]:
        """
        Specifies the projects which certificate will be push to.
        The targets structure is documented below.

        <a name="block-targets"></a>
        The `targets` block supports:
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CertificatePushTargetArgs']]]]):
        pulumi.set(self, "targets", value)


@pulumi.type_token("huaweicloud:ccm/certificatePush:CertificatePush")
class CertificatePush(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CertificatePushTargetArgs', 'CertificatePushTargetArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a CCM resource to push SSL certificate to ELB or WAF service within HuaweiCloud.

        ## Example Usage

        ### Pushing a certificate to ELB service

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        project_name1 = config.require_object("projectName1")
        project_name2 = config.require_object("projectName2")
        test = huaweicloud.ccm.CertificatePush("test",
            certificate_id=certificate_id,
            service="ELB",
            targets=[
                {
                    "project_name": project_name1,
                },
                {
                    "project_name": project_name2,
                },
            ])
        ```

        ### Pushing a certificate to WAF service

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        project_name = config.require_object("projectName")
        test = huaweicloud.ccm.CertificatePush("test",
            certificate_id=certificate_id,
            service="WAF",
            targets=[{
                "project_name": project_name,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the ID of the SSL certificate to be pushed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the certificate region. Changing this creates a new
               private certificate resource. Now only support cn-north-4 (china) and ap-southeast-1 (international).
        :param pulumi.Input[_builtins.str] service: Specifies the target service for certificate push.
               Changing this creates a new resource. Valid values are **ELB** and **WAF**.
               
               > Before pushing the certificate to the WAF service, please confirm that the target region has an available WAF instance.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CertificatePushTargetArgs', 'CertificatePushTargetArgsDict']]]] targets: Specifies the projects which certificate will be push to.
               The targets structure is documented below.
               
               <a name="block-targets"></a>
               The `targets` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificatePushArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CCM resource to push SSL certificate to ELB or WAF service within HuaweiCloud.

        ## Example Usage

        ### Pushing a certificate to ELB service

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        project_name1 = config.require_object("projectName1")
        project_name2 = config.require_object("projectName2")
        test = huaweicloud.ccm.CertificatePush("test",
            certificate_id=certificate_id,
            service="ELB",
            targets=[
                {
                    "project_name": project_name1,
                },
                {
                    "project_name": project_name2,
                },
            ])
        ```

        ### Pushing a certificate to WAF service

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        project_name = config.require_object("projectName")
        test = huaweicloud.ccm.CertificatePush("test",
            certificate_id=certificate_id,
            service="WAF",
            targets=[{
                "project_name": project_name,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param CertificatePushArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificatePushArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CertificatePushTargetArgs', 'CertificatePushTargetArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificatePushArgs.__new__(CertificatePushArgs)

            if certificate_id is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_id'")
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["region"] = region
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            if targets is None and not opts.urn:
                raise TypeError("Missing required property 'targets'")
            __props__.__dict__["targets"] = targets
        super(CertificatePush, __self__).__init__(
            'huaweicloud:ccm/certificatePush:CertificatePush',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            service: Optional[pulumi.Input[_builtins.str]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CertificatePushTargetArgs', 'CertificatePushTargetArgsDict']]]]] = None) -> 'CertificatePush':
        """
        Get an existing CertificatePush resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the ID of the SSL certificate to be pushed.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the certificate region. Changing this creates a new
               private certificate resource. Now only support cn-north-4 (china) and ap-southeast-1 (international).
        :param pulumi.Input[_builtins.str] service: Specifies the target service for certificate push.
               Changing this creates a new resource. Valid values are **ELB** and **WAF**.
               
               > Before pushing the certificate to the WAF service, please confirm that the target region has an available WAF instance.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CertificatePushTargetArgs', 'CertificatePushTargetArgsDict']]]] targets: Specifies the projects which certificate will be push to.
               The targets structure is documented below.
               
               <a name="block-targets"></a>
               The `targets` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CertificatePushState.__new__(_CertificatePushState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["region"] = region
        __props__.__dict__["service"] = service
        __props__.__dict__["targets"] = targets
        return CertificatePush(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the SSL certificate to be pushed.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the certificate region. Changing this creates a new
        private certificate resource. Now only support cn-north-4 (china) and ap-southeast-1 (international).
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the target service for certificate push.
        Changing this creates a new resource. Valid values are **ELB** and **WAF**.

        > Before pushing the certificate to the WAF service, please confirm that the target region has an available WAF instance.
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence['outputs.CertificatePushTarget']]:
        """
        Specifies the projects which certificate will be push to.
        The targets structure is documented below.

        <a name="block-targets"></a>
        The `targets` block supports:
        """
        return pulumi.get(self, "targets")

