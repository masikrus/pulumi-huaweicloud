# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CertificateArgs', 'Certificate']

@pulumi.input_type
class CertificateArgs:
    def __init__(__self__, *,
                 cert_brand: pulumi.Input[_builtins.str],
                 cert_type: pulumi.Input[_builtins.str],
                 domain_numbers: pulumi.Input[_builtins.int],
                 domain_type: pulumi.Input[_builtins.str],
                 effective_time: pulumi.Input[_builtins.int],
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_domain_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 single_domain_number: Optional[pulumi.Input[_builtins.int]] = None,
                 wildcard_domain_number: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a Certificate resource.
        :param pulumi.Input[_builtins.str] cert_brand: Specifies the certificate authority. Valid values are **GEOTRUST**,
               **GLOBALSIGN**, **SYMANTEC**, **CFCA**, **TRUSTASIA**, and **VTRUS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cert_type: Specifies the certificate type. Valid values are **DV_SSL_CERT**,
               **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**, **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, and **OV_SSL_CERT_PRO**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] domain_numbers: Specifies the quantity of domain name.
               + When `domain_type` is set to **SINGLE_DOMAIN** or **WILDCARD**, this field can only be set to `1`.
               + When `domain_type` is set to **MULTI_DOMAIN**, the value of this field ranges from `2` to `250`. The value of this
               field should be the number of additional domain names plus one main domain name.
               For example, if field `single_domain_number` is set to `1`, and field `wildcard_domain_number` is set to `2`, then
               the value of this field should be `4`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain_type: Specifies the type of domain name. Valid values are **SINGLE_DOMAIN**,
               **MULTI_DOMAIN**, and **WILDCARD**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] effective_time: Specifies the validity period (year). Valid values are `1`, `2`, and `3`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] primary_domain_type: Specifies the type of primary domain name in multiple domains.
               Valid values are **SINGLE_DOMAIN** and **WILDCARD_DOMAIN**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] single_domain_number: Specifies the number of additional single domain names.
               The value of this field ranges from `1` to `249`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] wildcard_domain_number: Specifies the number of additional wildcard domain names.
               The value of this field ranges from `0` to `248`.
               
               Changing this parameter will create a new resource.
               
               > Fields `primary_domain_type`, `single_domain_number`, and `wildcard_domain_number` are required when `domain_type`
               is set to **MULTI_DOMAIN**.
        """
        pulumi.set(__self__, "cert_brand", cert_brand)
        pulumi.set(__self__, "cert_type", cert_type)
        pulumi.set(__self__, "domain_numbers", domain_numbers)
        pulumi.set(__self__, "domain_type", domain_type)
        pulumi.set(__self__, "effective_time", effective_time)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if primary_domain_type is not None:
            pulumi.set(__self__, "primary_domain_type", primary_domain_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if single_domain_number is not None:
            pulumi.set(__self__, "single_domain_number", single_domain_number)
        if wildcard_domain_number is not None:
            pulumi.set(__self__, "wildcard_domain_number", wildcard_domain_number)

    @_builtins.property
    @pulumi.getter(name="certBrand")
    def cert_brand(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the certificate authority. Valid values are **GEOTRUST**,
        **GLOBALSIGN**, **SYMANTEC**, **CFCA**, **TRUSTASIA**, and **VTRUS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cert_brand")

    @cert_brand.setter
    def cert_brand(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cert_brand", value)

    @_builtins.property
    @pulumi.getter(name="certType")
    def cert_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the certificate type. Valid values are **DV_SSL_CERT**,
        **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**, **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, and **OV_SSL_CERT_PRO**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cert_type", value)

    @_builtins.property
    @pulumi.getter(name="domainNumbers")
    def domain_numbers(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the quantity of domain name.
        + When `domain_type` is set to **SINGLE_DOMAIN** or **WILDCARD**, this field can only be set to `1`.
        + When `domain_type` is set to **MULTI_DOMAIN**, the value of this field ranges from `2` to `250`. The value of this
        field should be the number of additional domain names plus one main domain name.
        For example, if field `single_domain_number` is set to `1`, and field `wildcard_domain_number` is set to `2`, then
        the value of this field should be `4`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_numbers")

    @domain_numbers.setter
    def domain_numbers(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "domain_numbers", value)

    @_builtins.property
    @pulumi.getter(name="domainType")
    def domain_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of domain name. Valid values are **SINGLE_DOMAIN**,
        **MULTI_DOMAIN**, and **WILDCARD**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_type")

    @domain_type.setter
    def domain_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_type", value)

    @_builtins.property
    @pulumi.getter(name="effectiveTime")
    def effective_time(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the validity period (year). Valid values are `1`, `2`, and `3`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "effective_time")

    @effective_time.setter
    def effective_time(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "effective_time", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="primaryDomainType")
    def primary_domain_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of primary domain name in multiple domains.
        Valid values are **SINGLE_DOMAIN** and **WILDCARD_DOMAIN**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "primary_domain_type")

    @primary_domain_type.setter
    def primary_domain_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_domain_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="singleDomainNumber")
    def single_domain_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of additional single domain names.
        The value of this field ranges from `1` to `249`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "single_domain_number")

    @single_domain_number.setter
    def single_domain_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "single_domain_number", value)

    @_builtins.property
    @pulumi.getter(name="wildcardDomainNumber")
    def wildcard_domain_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of additional wildcard domain names.
        The value of this field ranges from `0` to `248`.

        Changing this parameter will create a new resource.

        > Fields `primary_domain_type`, `single_domain_number`, and `wildcard_domain_number` are required when `domain_type`
        is set to **MULTI_DOMAIN**.
        """
        return pulumi.get(self, "wildcard_domain_number")

    @wildcard_domain_number.setter
    def wildcard_domain_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "wildcard_domain_number", value)


@pulumi.input_type
class _CertificateState:
    def __init__(__self__, *,
                 authentifications: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateAuthentificationArgs']]]] = None,
                 cert_brand: Optional[pulumi.Input[_builtins.str]] = None,
                 cert_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_numbers: Optional[pulumi.Input[_builtins.int]] = None,
                 domain_type: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_time: Optional[pulumi.Input[_builtins.int]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 fingerprint: Optional[pulumi.Input[_builtins.str]] = None,
                 issue_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 not_after: Optional[pulumi.Input[_builtins.str]] = None,
                 not_before: Optional[pulumi.Input[_builtins.str]] = None,
                 order_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_domain_type: Optional[pulumi.Input[_builtins.str]] = None,
                 push_support: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 revoke_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 sans: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 single_domain_number: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 validation_method: Optional[pulumi.Input[_builtins.str]] = None,
                 validity_period: Optional[pulumi.Input[_builtins.int]] = None,
                 wildcard_domain_number: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering Certificate resources.
        :param pulumi.Input[Sequence[pulumi.Input['CertificateAuthentificationArgs']]] authentifications: The ownership certification information of domain name.
               The authentification structure is documented below.
        :param pulumi.Input[_builtins.str] cert_brand: Specifies the certificate authority. Valid values are **GEOTRUST**,
               **GLOBALSIGN**, **SYMANTEC**, **CFCA**, **TRUSTASIA**, and **VTRUS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cert_type: Specifies the certificate type. Valid values are **DV_SSL_CERT**,
               **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**, **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, and **OV_SSL_CERT_PRO**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain: The domain name corresponding to the check value.
        :param pulumi.Input[_builtins.int] domain_numbers: Specifies the quantity of domain name.
               + When `domain_type` is set to **SINGLE_DOMAIN** or **WILDCARD**, this field can only be set to `1`.
               + When `domain_type` is set to **MULTI_DOMAIN**, the value of this field ranges from `2` to `250`. The value of this
               field should be the number of additional domain names plus one main domain name.
               For example, if field `single_domain_number` is set to `1`, and field `wildcard_domain_number` is set to `2`, then
               the value of this field should be `4`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain_type: Specifies the type of domain name. Valid values are **SINGLE_DOMAIN**,
               **MULTI_DOMAIN**, and **WILDCARD**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] effective_time: Specifies the validity period (year). Valid values are `1`, `2`, and `3`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] fingerprint: The SHA-1 fingerprint of the certificate.
        :param pulumi.Input[_builtins.str] issue_time: The certificate issuance time.
        :param pulumi.Input[_builtins.str] name: The certificate name.
        :param pulumi.Input[_builtins.str] not_after: The certificate expiration time.
        :param pulumi.Input[_builtins.str] not_before: The certificate validity time.
        :param pulumi.Input[_builtins.str] order_id: The order ID.
        :param pulumi.Input[_builtins.str] primary_domain_type: Specifies the type of primary domain name in multiple domains.
               Valid values are **SINGLE_DOMAIN** and **WILDCARD_DOMAIN**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] push_support: Whether the certificate supports push.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] revoke_reason: The reason for certificate revocation.
        :param pulumi.Input[_builtins.str] sans: The information of additional domain name for the bound certificate.
        :param pulumi.Input[_builtins.str] signature_algorithm: The signature algorithm.
        :param pulumi.Input[_builtins.int] single_domain_number: Specifies the number of additional single domain names.
               The value of this field ranges from `1` to `249`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The certificate status. Valid values are:
               + **PAID**: The certificate has been paid and the certificate is waiting to be applied for.
               + **ISSUED**: The certificate has been issued.
               + **CHECKING**: The certificate application is under review.
               + **CANCELCHECKING**: The certificate cancellation application is under review.
               + **UNPASSED**: The certificate application failed.
               + **EXPIRED**: The certificate has expired.
               + **REVOKING**: The certificate revocation application is under review.
               + **REVOKED**: The certificate has been revoked.
               + **UPLOAD**: The certificate in custody.
               + **SUPPLEMENTCHECKING**: Additional domain names added to multi-domain certificates are under review.
               + **CANCELSUPPLEMENTING**: Cancel the addition of additional domain names under review.
        :param pulumi.Input[_builtins.str] validation_method: The authentication method of domain name.
        :param pulumi.Input[_builtins.int] validity_period: The validity period (month).
        :param pulumi.Input[_builtins.int] wildcard_domain_number: Specifies the number of additional wildcard domain names.
               The value of this field ranges from `0` to `248`.
               
               Changing this parameter will create a new resource.
               
               > Fields `primary_domain_type`, `single_domain_number`, and `wildcard_domain_number` are required when `domain_type`
               is set to **MULTI_DOMAIN**.
        """
        if authentifications is not None:
            pulumi.set(__self__, "authentifications", authentifications)
        if cert_brand is not None:
            pulumi.set(__self__, "cert_brand", cert_brand)
        if cert_type is not None:
            pulumi.set(__self__, "cert_type", cert_type)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_numbers is not None:
            pulumi.set(__self__, "domain_numbers", domain_numbers)
        if domain_type is not None:
            pulumi.set(__self__, "domain_type", domain_type)
        if effective_time is not None:
            pulumi.set(__self__, "effective_time", effective_time)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if issue_time is not None:
            pulumi.set(__self__, "issue_time", issue_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if not_after is not None:
            pulumi.set(__self__, "not_after", not_after)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if primary_domain_type is not None:
            pulumi.set(__self__, "primary_domain_type", primary_domain_type)
        if push_support is not None:
            pulumi.set(__self__, "push_support", push_support)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if revoke_reason is not None:
            pulumi.set(__self__, "revoke_reason", revoke_reason)
        if sans is not None:
            pulumi.set(__self__, "sans", sans)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if single_domain_number is not None:
            pulumi.set(__self__, "single_domain_number", single_domain_number)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if validation_method is not None:
            pulumi.set(__self__, "validation_method", validation_method)
        if validity_period is not None:
            pulumi.set(__self__, "validity_period", validity_period)
        if wildcard_domain_number is not None:
            pulumi.set(__self__, "wildcard_domain_number", wildcard_domain_number)

    @_builtins.property
    @pulumi.getter
    def authentifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CertificateAuthentificationArgs']]]]:
        """
        The ownership certification information of domain name.
        The authentification structure is documented below.
        """
        return pulumi.get(self, "authentifications")

    @authentifications.setter
    def authentifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateAuthentificationArgs']]]]):
        pulumi.set(self, "authentifications", value)

    @_builtins.property
    @pulumi.getter(name="certBrand")
    def cert_brand(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate authority. Valid values are **GEOTRUST**,
        **GLOBALSIGN**, **SYMANTEC**, **CFCA**, **TRUSTASIA**, and **VTRUS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cert_brand")

    @cert_brand.setter
    def cert_brand(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cert_brand", value)

    @_builtins.property
    @pulumi.getter(name="certType")
    def cert_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate type. Valid values are **DV_SSL_CERT**,
        **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**, **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, and **OV_SSL_CERT_PRO**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cert_type", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The domain name corresponding to the check value.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="domainNumbers")
    def domain_numbers(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the quantity of domain name.
        + When `domain_type` is set to **SINGLE_DOMAIN** or **WILDCARD**, this field can only be set to `1`.
        + When `domain_type` is set to **MULTI_DOMAIN**, the value of this field ranges from `2` to `250`. The value of this
        field should be the number of additional domain names plus one main domain name.
        For example, if field `single_domain_number` is set to `1`, and field `wildcard_domain_number` is set to `2`, then
        the value of this field should be `4`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_numbers")

    @domain_numbers.setter
    def domain_numbers(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "domain_numbers", value)

    @_builtins.property
    @pulumi.getter(name="domainType")
    def domain_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of domain name. Valid values are **SINGLE_DOMAIN**,
        **MULTI_DOMAIN**, and **WILDCARD**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_type")

    @domain_type.setter
    def domain_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_type", value)

    @_builtins.property
    @pulumi.getter(name="effectiveTime")
    def effective_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the validity period (year). Valid values are `1`, `2`, and `3`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "effective_time")

    @effective_time.setter
    def effective_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "effective_time", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SHA-1 fingerprint of the certificate.
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fingerprint", value)

    @_builtins.property
    @pulumi.getter(name="issueTime")
    def issue_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The certificate issuance time.
        """
        return pulumi.get(self, "issue_time")

    @issue_time.setter
    def issue_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issue_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The certificate name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The certificate expiration time.
        """
        return pulumi.get(self, "not_after")

    @not_after.setter
    def not_after(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "not_after", value)

    @_builtins.property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The certificate validity time.
        """
        return pulumi.get(self, "not_before")

    @not_before.setter
    def not_before(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "not_before", value)

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The order ID.
        """
        return pulumi.get(self, "order_id")

    @order_id.setter
    def order_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "order_id", value)

    @_builtins.property
    @pulumi.getter(name="primaryDomainType")
    def primary_domain_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of primary domain name in multiple domains.
        Valid values are **SINGLE_DOMAIN** and **WILDCARD_DOMAIN**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "primary_domain_type")

    @primary_domain_type.setter
    def primary_domain_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_domain_type", value)

    @_builtins.property
    @pulumi.getter(name="pushSupport")
    def push_support(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the certificate supports push.
        """
        return pulumi.get(self, "push_support")

    @push_support.setter
    def push_support(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "push_support", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="revokeReason")
    def revoke_reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The reason for certificate revocation.
        """
        return pulumi.get(self, "revoke_reason")

    @revoke_reason.setter
    def revoke_reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "revoke_reason", value)

    @_builtins.property
    @pulumi.getter
    def sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The information of additional domain name for the bound certificate.
        """
        return pulumi.get(self, "sans")

    @sans.setter
    def sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sans", value)

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The signature algorithm.
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="singleDomainNumber")
    def single_domain_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of additional single domain names.
        The value of this field ranges from `1` to `249`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "single_domain_number")

    @single_domain_number.setter
    def single_domain_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "single_domain_number", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The certificate status. Valid values are:
        + **PAID**: The certificate has been paid and the certificate is waiting to be applied for.
        + **ISSUED**: The certificate has been issued.
        + **CHECKING**: The certificate application is under review.
        + **CANCELCHECKING**: The certificate cancellation application is under review.
        + **UNPASSED**: The certificate application failed.
        + **EXPIRED**: The certificate has expired.
        + **REVOKING**: The certificate revocation application is under review.
        + **REVOKED**: The certificate has been revoked.
        + **UPLOAD**: The certificate in custody.
        + **SUPPLEMENTCHECKING**: Additional domain names added to multi-domain certificates are under review.
        + **CANCELSUPPLEMENTING**: Cancel the addition of additional domain names under review.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="validationMethod")
    def validation_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication method of domain name.
        """
        return pulumi.get(self, "validation_method")

    @validation_method.setter
    def validation_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "validation_method", value)

    @_builtins.property
    @pulumi.getter(name="validityPeriod")
    def validity_period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The validity period (month).
        """
        return pulumi.get(self, "validity_period")

    @validity_period.setter
    def validity_period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "validity_period", value)

    @_builtins.property
    @pulumi.getter(name="wildcardDomainNumber")
    def wildcard_domain_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of additional wildcard domain names.
        The value of this field ranges from `0` to `248`.

        Changing this parameter will create a new resource.

        > Fields `primary_domain_type`, `single_domain_number`, and `wildcard_domain_number` are required when `domain_type`
        is set to **MULTI_DOMAIN**.
        """
        return pulumi.get(self, "wildcard_domain_number")

    @wildcard_domain_number.setter
    def wildcard_domain_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "wildcard_domain_number", value)


@pulumi.type_token("huaweicloud:ccm/certificate:Certificate")
class Certificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_brand: Optional[pulumi.Input[_builtins.str]] = None,
                 cert_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_numbers: Optional[pulumi.Input[_builtins.int]] = None,
                 domain_type: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_time: Optional[pulumi.Input[_builtins.int]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_domain_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 single_domain_number: Optional[pulumi.Input[_builtins.int]] = None,
                 wildcard_domain_number: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a CCM SSL certificate resource within HuaweiCloud.

        > Refer to [document](https://support.huaweicloud.com/intl/en-us/productdesc-ccm/ccm_01_0219.html) to see the
        differences between different types of certificates.

        ## Example Usage

        ### Single Domain Certificate

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cert_brand = config.require_object("certBrand")
        cert_type = config.require_object("certType")
        test = huaweicloud.ccm.Certificate("test",
            cert_brand=cert_brand,
            cert_type=cert_type,
            domain_type="SINGLE_DOMAIN",
            effective_time=1,
            domain_numbers=1)
        ```

        ### Multi Domain Certificate

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cert_brand = config.require_object("certBrand")
        cert_type = config.require_object("certType")
        test = huaweicloud.ccm.Certificate("test",
            cert_brand=cert_brand,
            cert_type=cert_type,
            domain_type="MULTI_DOMAIN",
            effective_time=1,
            domain_numbers=4,
            primary_domain_type="SINGLE_DOMAIN",
            single_domain_number=1,
            wildcard_domain_number=2)
        ```

        ### Wildcard Domain Certificate

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cert_brand = config.require_object("certBrand")
        cert_type = config.require_object("certType")
        test = huaweicloud.ccm.Certificate("test",
            cert_brand=cert_brand,
            cert_type=cert_type,
            domain_type="WILDCARD",
            effective_time=1,
            domain_numbers=1)
        ```

        ## Import

        The CCM certificate can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ccm/certificate:Certificate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `effective_time`, `single_domain_number`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_ccm_certificate" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              effective_time, single_domain_number,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cert_brand: Specifies the certificate authority. Valid values are **GEOTRUST**,
               **GLOBALSIGN**, **SYMANTEC**, **CFCA**, **TRUSTASIA**, and **VTRUS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cert_type: Specifies the certificate type. Valid values are **DV_SSL_CERT**,
               **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**, **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, and **OV_SSL_CERT_PRO**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] domain_numbers: Specifies the quantity of domain name.
               + When `domain_type` is set to **SINGLE_DOMAIN** or **WILDCARD**, this field can only be set to `1`.
               + When `domain_type` is set to **MULTI_DOMAIN**, the value of this field ranges from `2` to `250`. The value of this
               field should be the number of additional domain names plus one main domain name.
               For example, if field `single_domain_number` is set to `1`, and field `wildcard_domain_number` is set to `2`, then
               the value of this field should be `4`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain_type: Specifies the type of domain name. Valid values are **SINGLE_DOMAIN**,
               **MULTI_DOMAIN**, and **WILDCARD**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] effective_time: Specifies the validity period (year). Valid values are `1`, `2`, and `3`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] primary_domain_type: Specifies the type of primary domain name in multiple domains.
               Valid values are **SINGLE_DOMAIN** and **WILDCARD_DOMAIN**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] single_domain_number: Specifies the number of additional single domain names.
               The value of this field ranges from `1` to `249`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] wildcard_domain_number: Specifies the number of additional wildcard domain names.
               The value of this field ranges from `0` to `248`.
               
               Changing this parameter will create a new resource.
               
               > Fields `primary_domain_type`, `single_domain_number`, and `wildcard_domain_number` are required when `domain_type`
               is set to **MULTI_DOMAIN**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CCM SSL certificate resource within HuaweiCloud.

        > Refer to [document](https://support.huaweicloud.com/intl/en-us/productdesc-ccm/ccm_01_0219.html) to see the
        differences between different types of certificates.

        ## Example Usage

        ### Single Domain Certificate

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cert_brand = config.require_object("certBrand")
        cert_type = config.require_object("certType")
        test = huaweicloud.ccm.Certificate("test",
            cert_brand=cert_brand,
            cert_type=cert_type,
            domain_type="SINGLE_DOMAIN",
            effective_time=1,
            domain_numbers=1)
        ```

        ### Multi Domain Certificate

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cert_brand = config.require_object("certBrand")
        cert_type = config.require_object("certType")
        test = huaweicloud.ccm.Certificate("test",
            cert_brand=cert_brand,
            cert_type=cert_type,
            domain_type="MULTI_DOMAIN",
            effective_time=1,
            domain_numbers=4,
            primary_domain_type="SINGLE_DOMAIN",
            single_domain_number=1,
            wildcard_domain_number=2)
        ```

        ### Wildcard Domain Certificate

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cert_brand = config.require_object("certBrand")
        cert_type = config.require_object("certType")
        test = huaweicloud.ccm.Certificate("test",
            cert_brand=cert_brand,
            cert_type=cert_type,
            domain_type="WILDCARD",
            effective_time=1,
            domain_numbers=1)
        ```

        ## Import

        The CCM certificate can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ccm/certificate:Certificate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `effective_time`, `single_domain_number`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition

        should be updated to align with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_ccm_certificate" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              effective_time, single_domain_number,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param CertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_brand: Optional[pulumi.Input[_builtins.str]] = None,
                 cert_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_numbers: Optional[pulumi.Input[_builtins.int]] = None,
                 domain_type: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_time: Optional[pulumi.Input[_builtins.int]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_domain_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 single_domain_number: Optional[pulumi.Input[_builtins.int]] = None,
                 wildcard_domain_number: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificateArgs.__new__(CertificateArgs)

            if cert_brand is None and not opts.urn:
                raise TypeError("Missing required property 'cert_brand'")
            __props__.__dict__["cert_brand"] = cert_brand
            if cert_type is None and not opts.urn:
                raise TypeError("Missing required property 'cert_type'")
            __props__.__dict__["cert_type"] = cert_type
            if domain_numbers is None and not opts.urn:
                raise TypeError("Missing required property 'domain_numbers'")
            __props__.__dict__["domain_numbers"] = domain_numbers
            if domain_type is None and not opts.urn:
                raise TypeError("Missing required property 'domain_type'")
            __props__.__dict__["domain_type"] = domain_type
            if effective_time is None and not opts.urn:
                raise TypeError("Missing required property 'effective_time'")
            __props__.__dict__["effective_time"] = effective_time
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["primary_domain_type"] = primary_domain_type
            __props__.__dict__["region"] = region
            __props__.__dict__["single_domain_number"] = single_domain_number
            __props__.__dict__["wildcard_domain_number"] = wildcard_domain_number
            __props__.__dict__["authentifications"] = None
            __props__.__dict__["domain"] = None
            __props__.__dict__["fingerprint"] = None
            __props__.__dict__["issue_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["not_after"] = None
            __props__.__dict__["not_before"] = None
            __props__.__dict__["order_id"] = None
            __props__.__dict__["push_support"] = None
            __props__.__dict__["revoke_reason"] = None
            __props__.__dict__["sans"] = None
            __props__.__dict__["signature_algorithm"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["validation_method"] = None
            __props__.__dict__["validity_period"] = None
        super(Certificate, __self__).__init__(
            'huaweicloud:ccm/certificate:Certificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CertificateAuthentificationArgs', 'CertificateAuthentificationArgsDict']]]]] = None,
            cert_brand: Optional[pulumi.Input[_builtins.str]] = None,
            cert_type: Optional[pulumi.Input[_builtins.str]] = None,
            domain: Optional[pulumi.Input[_builtins.str]] = None,
            domain_numbers: Optional[pulumi.Input[_builtins.int]] = None,
            domain_type: Optional[pulumi.Input[_builtins.str]] = None,
            effective_time: Optional[pulumi.Input[_builtins.int]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            fingerprint: Optional[pulumi.Input[_builtins.str]] = None,
            issue_time: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            not_after: Optional[pulumi.Input[_builtins.str]] = None,
            not_before: Optional[pulumi.Input[_builtins.str]] = None,
            order_id: Optional[pulumi.Input[_builtins.str]] = None,
            primary_domain_type: Optional[pulumi.Input[_builtins.str]] = None,
            push_support: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            revoke_reason: Optional[pulumi.Input[_builtins.str]] = None,
            sans: Optional[pulumi.Input[_builtins.str]] = None,
            signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            single_domain_number: Optional[pulumi.Input[_builtins.int]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            validation_method: Optional[pulumi.Input[_builtins.str]] = None,
            validity_period: Optional[pulumi.Input[_builtins.int]] = None,
            wildcard_domain_number: Optional[pulumi.Input[_builtins.int]] = None) -> 'Certificate':
        """
        Get an existing Certificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CertificateAuthentificationArgs', 'CertificateAuthentificationArgsDict']]]] authentifications: The ownership certification information of domain name.
               The authentification structure is documented below.
        :param pulumi.Input[_builtins.str] cert_brand: Specifies the certificate authority. Valid values are **GEOTRUST**,
               **GLOBALSIGN**, **SYMANTEC**, **CFCA**, **TRUSTASIA**, and **VTRUS**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cert_type: Specifies the certificate type. Valid values are **DV_SSL_CERT**,
               **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**, **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, and **OV_SSL_CERT_PRO**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain: The domain name corresponding to the check value.
        :param pulumi.Input[_builtins.int] domain_numbers: Specifies the quantity of domain name.
               + When `domain_type` is set to **SINGLE_DOMAIN** or **WILDCARD**, this field can only be set to `1`.
               + When `domain_type` is set to **MULTI_DOMAIN**, the value of this field ranges from `2` to `250`. The value of this
               field should be the number of additional domain names plus one main domain name.
               For example, if field `single_domain_number` is set to `1`, and field `wildcard_domain_number` is set to `2`, then
               the value of this field should be `4`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] domain_type: Specifies the type of domain name. Valid values are **SINGLE_DOMAIN**,
               **MULTI_DOMAIN**, and **WILDCARD**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] effective_time: Specifies the validity period (year). Valid values are `1`, `2`, and `3`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] fingerprint: The SHA-1 fingerprint of the certificate.
        :param pulumi.Input[_builtins.str] issue_time: The certificate issuance time.
        :param pulumi.Input[_builtins.str] name: The certificate name.
        :param pulumi.Input[_builtins.str] not_after: The certificate expiration time.
        :param pulumi.Input[_builtins.str] not_before: The certificate validity time.
        :param pulumi.Input[_builtins.str] order_id: The order ID.
        :param pulumi.Input[_builtins.str] primary_domain_type: Specifies the type of primary domain name in multiple domains.
               Valid values are **SINGLE_DOMAIN** and **WILDCARD_DOMAIN**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] push_support: Whether the certificate supports push.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] revoke_reason: The reason for certificate revocation.
        :param pulumi.Input[_builtins.str] sans: The information of additional domain name for the bound certificate.
        :param pulumi.Input[_builtins.str] signature_algorithm: The signature algorithm.
        :param pulumi.Input[_builtins.int] single_domain_number: Specifies the number of additional single domain names.
               The value of this field ranges from `1` to `249`.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The certificate status. Valid values are:
               + **PAID**: The certificate has been paid and the certificate is waiting to be applied for.
               + **ISSUED**: The certificate has been issued.
               + **CHECKING**: The certificate application is under review.
               + **CANCELCHECKING**: The certificate cancellation application is under review.
               + **UNPASSED**: The certificate application failed.
               + **EXPIRED**: The certificate has expired.
               + **REVOKING**: The certificate revocation application is under review.
               + **REVOKED**: The certificate has been revoked.
               + **UPLOAD**: The certificate in custody.
               + **SUPPLEMENTCHECKING**: Additional domain names added to multi-domain certificates are under review.
               + **CANCELSUPPLEMENTING**: Cancel the addition of additional domain names under review.
        :param pulumi.Input[_builtins.str] validation_method: The authentication method of domain name.
        :param pulumi.Input[_builtins.int] validity_period: The validity period (month).
        :param pulumi.Input[_builtins.int] wildcard_domain_number: Specifies the number of additional wildcard domain names.
               The value of this field ranges from `0` to `248`.
               
               Changing this parameter will create a new resource.
               
               > Fields `primary_domain_type`, `single_domain_number`, and `wildcard_domain_number` are required when `domain_type`
               is set to **MULTI_DOMAIN**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CertificateState.__new__(_CertificateState)

        __props__.__dict__["authentifications"] = authentifications
        __props__.__dict__["cert_brand"] = cert_brand
        __props__.__dict__["cert_type"] = cert_type
        __props__.__dict__["domain"] = domain
        __props__.__dict__["domain_numbers"] = domain_numbers
        __props__.__dict__["domain_type"] = domain_type
        __props__.__dict__["effective_time"] = effective_time
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["fingerprint"] = fingerprint
        __props__.__dict__["issue_time"] = issue_time
        __props__.__dict__["name"] = name
        __props__.__dict__["not_after"] = not_after
        __props__.__dict__["not_before"] = not_before
        __props__.__dict__["order_id"] = order_id
        __props__.__dict__["primary_domain_type"] = primary_domain_type
        __props__.__dict__["push_support"] = push_support
        __props__.__dict__["region"] = region
        __props__.__dict__["revoke_reason"] = revoke_reason
        __props__.__dict__["sans"] = sans
        __props__.__dict__["signature_algorithm"] = signature_algorithm
        __props__.__dict__["single_domain_number"] = single_domain_number
        __props__.__dict__["status"] = status
        __props__.__dict__["validation_method"] = validation_method
        __props__.__dict__["validity_period"] = validity_period
        __props__.__dict__["wildcard_domain_number"] = wildcard_domain_number
        return Certificate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def authentifications(self) -> pulumi.Output[Sequence['outputs.CertificateAuthentification']]:
        """
        The ownership certification information of domain name.
        The authentification structure is documented below.
        """
        return pulumi.get(self, "authentifications")

    @_builtins.property
    @pulumi.getter(name="certBrand")
    def cert_brand(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the certificate authority. Valid values are **GEOTRUST**,
        **GLOBALSIGN**, **SYMANTEC**, **CFCA**, **TRUSTASIA**, and **VTRUS**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cert_brand")

    @_builtins.property
    @pulumi.getter(name="certType")
    def cert_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the certificate type. Valid values are **DV_SSL_CERT**,
        **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**, **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, and **OV_SSL_CERT_PRO**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cert_type")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[_builtins.str]:
        """
        The domain name corresponding to the check value.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="domainNumbers")
    def domain_numbers(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the quantity of domain name.
        + When `domain_type` is set to **SINGLE_DOMAIN** or **WILDCARD**, this field can only be set to `1`.
        + When `domain_type` is set to **MULTI_DOMAIN**, the value of this field ranges from `2` to `250`. The value of this
        field should be the number of additional domain names plus one main domain name.
        For example, if field `single_domain_number` is set to `1`, and field `wildcard_domain_number` is set to `2`, then
        the value of this field should be `4`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_numbers")

    @_builtins.property
    @pulumi.getter(name="domainType")
    def domain_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of domain name. Valid values are **SINGLE_DOMAIN**,
        **MULTI_DOMAIN**, and **WILDCARD**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_type")

    @_builtins.property
    @pulumi.getter(name="effectiveTime")
    def effective_time(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the validity period (year). Valid values are `1`, `2`, and `3`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "effective_time")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> pulumi.Output[_builtins.str]:
        """
        The SHA-1 fingerprint of the certificate.
        """
        return pulumi.get(self, "fingerprint")

    @_builtins.property
    @pulumi.getter(name="issueTime")
    def issue_time(self) -> pulumi.Output[_builtins.str]:
        """
        The certificate issuance time.
        """
        return pulumi.get(self, "issue_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The certificate name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> pulumi.Output[_builtins.str]:
        """
        The certificate expiration time.
        """
        return pulumi.get(self, "not_after")

    @_builtins.property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> pulumi.Output[_builtins.str]:
        """
        The certificate validity time.
        """
        return pulumi.get(self, "not_before")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> pulumi.Output[_builtins.str]:
        """
        The order ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="primaryDomainType")
    def primary_domain_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of primary domain name in multiple domains.
        Valid values are **SINGLE_DOMAIN** and **WILDCARD_DOMAIN**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "primary_domain_type")

    @_builtins.property
    @pulumi.getter(name="pushSupport")
    def push_support(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the certificate supports push.
        """
        return pulumi.get(self, "push_support")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="revokeReason")
    def revoke_reason(self) -> pulumi.Output[_builtins.str]:
        """
        The reason for certificate revocation.
        """
        return pulumi.get(self, "revoke_reason")

    @_builtins.property
    @pulumi.getter
    def sans(self) -> pulumi.Output[_builtins.str]:
        """
        The information of additional domain name for the bound certificate.
        """
        return pulumi.get(self, "sans")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        The signature algorithm.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter(name="singleDomainNumber")
    def single_domain_number(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of additional single domain names.
        The value of this field ranges from `1` to `249`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "single_domain_number")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The certificate status. Valid values are:
        + **PAID**: The certificate has been paid and the certificate is waiting to be applied for.
        + **ISSUED**: The certificate has been issued.
        + **CHECKING**: The certificate application is under review.
        + **CANCELCHECKING**: The certificate cancellation application is under review.
        + **UNPASSED**: The certificate application failed.
        + **EXPIRED**: The certificate has expired.
        + **REVOKING**: The certificate revocation application is under review.
        + **REVOKED**: The certificate has been revoked.
        + **UPLOAD**: The certificate in custody.
        + **SUPPLEMENTCHECKING**: Additional domain names added to multi-domain certificates are under review.
        + **CANCELSUPPLEMENTING**: Cancel the addition of additional domain names under review.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="validationMethod")
    def validation_method(self) -> pulumi.Output[_builtins.str]:
        """
        The authentication method of domain name.
        """
        return pulumi.get(self, "validation_method")

    @_builtins.property
    @pulumi.getter(name="validityPeriod")
    def validity_period(self) -> pulumi.Output[_builtins.int]:
        """
        The validity period (month).
        """
        return pulumi.get(self, "validity_period")

    @_builtins.property
    @pulumi.getter(name="wildcardDomainNumber")
    def wildcard_domain_number(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of additional wildcard domain names.
        The value of this field ranges from `0` to `248`.

        Changing this parameter will create a new resource.

        > Fields `primary_domain_type`, `single_domain_number`, and `wildcard_domain_number` are required when `domain_type`
        is set to **MULTI_DOMAIN**.
        """
        return pulumi.get(self, "wildcard_domain_number")

