# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'CertificateAuthentification',
    'CertificateDeployResource',
    'CertificateImportAuthentification',
    'CertificateImportTarget',
    'CertificatePushTarget',
    'PrivateCaCrlConfiguration',
    'PrivateCaDistinguishedName',
    'PrivateCaValidity',
    'PrivateCertificateDistinguishedName',
    'PrivateCertificateSubjectAlternativeName',
    'PrivateCertificateValidity',
    'GetCertificatesCertificateResult',
    'GetPrivateCasCaResult',
    'GetPrivateCasCaCrlConfigurationResult',
    'GetPrivateCasCaDistinguishedNameResult',
    'GetPrivateCertificatesCertificateResult',
    'GetPrivateCertificatesCertificateDistinguishedNameResult',
]

@pulumi.output_type
class CertificateAuthentification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recordName":
            suggest = "record_name"
        elif key == "recordType":
            suggest = "record_type"
        elif key == "recordValue":
            suggest = "record_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthentification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthentification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthentification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: Optional[_builtins.str] = None,
                 record_name: Optional[_builtins.str] = None,
                 record_type: Optional[_builtins.str] = None,
                 record_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str domain: The domain name corresponding to the check value.
        :param _builtins.str record_name: The name of the domain name check value.
        :param _builtins.str record_type: The type of the domain name check value.
        :param _builtins.str record_value: The domain name check value.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if record_name is not None:
            pulumi.set(__self__, "record_name", record_name)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if record_value is not None:
            pulumi.set(__self__, "record_value", record_value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[_builtins.str]:
        """
        The domain name corresponding to the check value.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="recordName")
    def record_name(self) -> Optional[_builtins.str]:
        """
        The name of the domain name check value.
        """
        return pulumi.get(self, "record_name")

    @_builtins.property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[_builtins.str]:
        """
        The type of the domain name check value.
        """
        return pulumi.get(self, "record_type")

    @_builtins.property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> Optional[_builtins.str]:
        """
        The domain name check value.
        """
        return pulumi.get(self, "record_value")


@pulumi.output_type
class CertificateDeployResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "enterpriseProjectId":
            suggest = "enterprise_project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateDeployResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateDeployResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateDeployResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: Optional[_builtins.str] = None,
                 enterprise_project_id: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str domain_name: Specifies the domain name to be deployed. This field is required only
               when `service_name` is set to **CDN**. The domain name must match the certificate.
               
               Changing this parameter will create a new resource.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the resources
               to be deployed. This field is required only when `service_name` is set to **WAF**.
               If omitted, default enterprise project will be used.
               
               Changing this parameter will create a new resource.
        :param _builtins.str id: Specifies the certificate ID. This field is required only when `service_name` is
               set to **WAF** or **ELB**.
               
               Changing this parameter will create a new resource.
        :param _builtins.str type: Specifies the resource type. This field is required only when `service_name` is
               set to **WAF**. Valid values are **premium** (exclusive mode) and **cloud** (cloud mode).
               
               Changing this parameter will create a new resource.
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        """
        Specifies the domain name to be deployed. This field is required only
        when `service_name` is set to **CDN**. The domain name must match the certificate.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Specifies the enterprise project ID to which the resources
        to be deployed. This field is required only when `service_name` is set to **WAF**.
        If omitted, default enterprise project will be used.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the certificate ID. This field is required only when `service_name` is
        set to **WAF** or **ELB**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the resource type. This field is required only when `service_name` is
        set to **WAF**. Valid values are **premium** (exclusive mode) and **cloud** (cloud mode).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CertificateImportAuthentification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recordName":
            suggest = "record_name"
        elif key == "recordType":
            suggest = "record_type"
        elif key == "recordValue":
            suggest = "record_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateImportAuthentification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateImportAuthentification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateImportAuthentification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: Optional[_builtins.str] = None,
                 record_name: Optional[_builtins.str] = None,
                 record_type: Optional[_builtins.str] = None,
                 record_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str domain: The domain name mapping to the verification value
        :param _builtins.str record_name: The name of a domain ownership verification value.
        :param _builtins.str record_type: The type of the domain name verification value.
        :param _builtins.str record_value: The domain verification value.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if record_name is not None:
            pulumi.set(__self__, "record_name", record_name)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if record_value is not None:
            pulumi.set(__self__, "record_value", record_value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[_builtins.str]:
        """
        The domain name mapping to the verification value
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="recordName")
    def record_name(self) -> Optional[_builtins.str]:
        """
        The name of a domain ownership verification value.
        """
        return pulumi.get(self, "record_name")

    @_builtins.property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[_builtins.str]:
        """
        The type of the domain name verification value.
        """
        return pulumi.get(self, "record_type")

    @_builtins.property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> Optional[_builtins.str]:
        """
        The domain verification value.
        """
        return pulumi.get(self, "record_value")


@pulumi.output_type
class CertificateImportTarget(dict):
    def __init__(__self__, *,
                 service: _builtins.str,
                 projects: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str service: Specifies the service to which the certificate is pushed. The options include `CDN`,`WAF`
               and `ELB`.
        :param Sequence[_builtins.str] projects: Specifies the projects where the service you want to push a certificate to.
               The same certificate can be pushed repeatedly to the same WAF or ELB service in the same `project`, but the CDN service
               can only be pushed once. This parameter is required when pushing certificate to `WAF` or `ELB` service.
        """
        pulumi.set(__self__, "service", service)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        """
        Specifies the service to which the certificate is pushed. The options include `CDN`,`WAF`
        and `ELB`.
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def projects(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the projects where the service you want to push a certificate to.
        The same certificate can be pushed repeatedly to the same WAF or ELB service in the same `project`, but the CDN service
        can only be pushed once. This parameter is required when pushing certificate to `WAF` or `ELB` service.
        """
        return pulumi.get(self, "projects")


@pulumi.output_type
class CertificatePushTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectName":
            suggest = "project_name"
        elif key == "certId":
            suggest = "cert_id"
        elif key == "certName":
            suggest = "cert_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificatePushTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificatePushTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificatePushTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_name: _builtins.str,
                 cert_id: Optional[_builtins.str] = None,
                 cert_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str project_name: Specifies the region where the target service for certificate push is located.
        :param _builtins.str cert_id: Indicates the target certificate ID.
        :param _builtins.str cert_name: Indicates the target certificate name.
        """
        pulumi.set(__self__, "project_name", project_name)
        if cert_id is not None:
            pulumi.set(__self__, "cert_id", cert_id)
        if cert_name is not None:
            pulumi.set(__self__, "cert_name", cert_name)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> _builtins.str:
        """
        Specifies the region where the target service for certificate push is located.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter(name="certId")
    def cert_id(self) -> Optional[_builtins.str]:
        """
        Indicates the target certificate ID.
        """
        return pulumi.get(self, "cert_id")

    @_builtins.property
    @pulumi.getter(name="certName")
    def cert_name(self) -> Optional[_builtins.str]:
        """
        Indicates the target certificate name.
        """
        return pulumi.get(self, "cert_name")


@pulumi.output_type
class PrivateCaCrlConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crlDisPoint":
            suggest = "crl_dis_point"
        elif key == "crlName":
            suggest = "crl_name"
        elif key == "obsBucketName":
            suggest = "obs_bucket_name"
        elif key == "validDays":
            suggest = "valid_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateCaCrlConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateCaCrlConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateCaCrlConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 crl_dis_point: Optional[_builtins.str] = None,
                 crl_name: Optional[_builtins.str] = None,
                 enabled: Optional[_builtins.bool] = None,
                 obs_bucket_name: Optional[_builtins.str] = None,
                 valid_days: Optional[_builtins.int] = None):
        """
        :param _builtins.str crl_name: schema: Computed
        :param _builtins.bool enabled: Specifies whether to enable the CRL publishing function. Defaults to **false**.
        :param _builtins.str obs_bucket_name: Specifies the OBS bucket name. This field is required only when the CRL publishing
               function is enabled.
        :param _builtins.int valid_days: Specifies the CRL update interval, in days. It's limited from `7` to `30`.
               This field is required only when the CRL publishing function is enabled.
               
               > Due to API limitations, the fields `obs_bucket_name` and `valid_days` must be changed together with `enable`.
               For example, if you want to update `obs_bucket_name` or `valid_days` when the CRL function is enabled, you need to
               disable the CRL function first, then enable it and configure new `obs_bucket_name` or `valid_days` values.
        """
        if crl_dis_point is not None:
            pulumi.set(__self__, "crl_dis_point", crl_dis_point)
        if crl_name is not None:
            pulumi.set(__self__, "crl_name", crl_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if obs_bucket_name is not None:
            pulumi.set(__self__, "obs_bucket_name", obs_bucket_name)
        if valid_days is not None:
            pulumi.set(__self__, "valid_days", valid_days)

    @_builtins.property
    @pulumi.getter(name="crlDisPoint")
    def crl_dis_point(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "crl_dis_point")

    @_builtins.property
    @pulumi.getter(name="crlName")
    def crl_name(self) -> Optional[_builtins.str]:
        """
        schema: Computed
        """
        return pulumi.get(self, "crl_name")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable the CRL publishing function. Defaults to **false**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="obsBucketName")
    def obs_bucket_name(self) -> Optional[_builtins.str]:
        """
        Specifies the OBS bucket name. This field is required only when the CRL publishing
        function is enabled.
        """
        return pulumi.get(self, "obs_bucket_name")

    @_builtins.property
    @pulumi.getter(name="validDays")
    def valid_days(self) -> Optional[_builtins.int]:
        """
        Specifies the CRL update interval, in days. It's limited from `7` to `30`.
        This field is required only when the CRL publishing function is enabled.

        > Due to API limitations, the fields `obs_bucket_name` and `valid_days` must be changed together with `enable`.
        For example, if you want to update `obs_bucket_name` or `valid_days` when the CRL function is enabled, you need to
        disable the CRL function first, then enable it and configure new `obs_bucket_name` or `valid_days` values.
        """
        return pulumi.get(self, "valid_days")


@pulumi.output_type
class PrivateCaDistinguishedName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateCaDistinguishedName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateCaDistinguishedName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateCaDistinguishedName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: _builtins.str,
                 country: _builtins.str,
                 locality: _builtins.str,
                 organization: _builtins.str,
                 organizational_unit: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str common_name: Specifies the common name of private CA. The valid length is limited
               between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,),
               space ( ) and asterisks (*) are allowed. Changing this parameter will create a new resource.
        :param _builtins.str country: Specifies the country of private CA. The valid length is limited in `2`,
               Only English letters are allowed. Changing this parameter will create a new resource.
        :param _builtins.str locality: Specifies the locality of private CA. The valid length is limited between
               `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
               space ( ) are allowed. Changing this parameter will create a new resource.
        :param _builtins.str organization: Specifies the organization of private CA. The valid length is limited
               between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
               space ( ) are allowed. Changing this parameter will create a new resource.
        :param _builtins.str organizational_unit: Specifies the organizational unit of private CA. The valid length
               is limited between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.),
               comma (,) and space ( ) are allowed. Changing this parameter will create a new resource.
               
               <a name="block-validity"></a>
               The `validity` block supports:
        :param _builtins.str state: Specifies the state of private CA. The valid length is limited between
               `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
               space ( ) are allowed. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "common_name", common_name)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "locality", locality)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "organizational_unit", organizational_unit)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> _builtins.str:
        """
        Specifies the common name of private CA. The valid length is limited
        between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,),
        space ( ) and asterisks (*) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Specifies the country of private CA. The valid length is limited in `2`,
        Only English letters are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def locality(self) -> _builtins.str:
        """
        Specifies the locality of private CA. The valid length is limited between
        `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
        space ( ) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "locality")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        Specifies the organization of private CA. The valid length is limited
        between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
        space ( ) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> _builtins.str:
        """
        Specifies the organizational unit of private CA. The valid length
        is limited between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.),
        comma (,) and space ( ) are allowed. Changing this parameter will create a new resource.

        <a name="block-validity"></a>
        The `validity` block supports:
        """
        return pulumi.get(self, "organizational_unit")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the state of private CA. The valid length is limited between
        `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.), comma (,) and
        space ( ) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class PrivateCaValidity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startedAt":
            suggest = "started_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateCaValidity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateCaValidity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateCaValidity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 value: _builtins.int,
                 started_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Specifies the type of validity value. Changing this parameter will create a new
               resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
               support **YEAR** and **MONTH(31 days)**.
        :param _builtins.int value: Specifies the value of validity. Root CA certificate is no longer than 30 years
               and subordinate CA is no longer than 20 years. Changing this parameter will create a new resource. When creating a
               subordinate CA, the validity must less than the root CA.
        :param _builtins.str started_at: Specifies the start time of validity. The value is a timestamp in milliseconds.
               For example, `1722840237000` indicates `2024-08-05 14:43:57`. The value of `started_at` cannot be earlier than `5` minutes
               from the current time.
               Changing this parameter will create a new resource.
               
               <a name="block-crl_configuration"></a>
               The `crl_configuration` block supports:
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of validity value. Changing this parameter will create a new
        resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
        support **YEAR** and **MONTH(31 days)**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.int:
        """
        Specifies the value of validity. Root CA certificate is no longer than 30 years
        and subordinate CA is no longer than 20 years. Changing this parameter will create a new resource. When creating a
        subordinate CA, the validity must less than the root CA.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[_builtins.str]:
        """
        Specifies the start time of validity. The value is a timestamp in milliseconds.
        For example, `1722840237000` indicates `2024-08-05 14:43:57`. The value of `started_at` cannot be earlier than `5` minutes
        from the current time.
        Changing this parameter will create a new resource.

        <a name="block-crl_configuration"></a>
        The `crl_configuration` block supports:
        """
        return pulumi.get(self, "started_at")


@pulumi.output_type
class PrivateCertificateDistinguishedName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateCertificateDistinguishedName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateCertificateDistinguishedName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateCertificateDistinguishedName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: _builtins.str,
                 country: Optional[_builtins.str] = None,
                 locality: Optional[_builtins.str] = None,
                 organization: Optional[_builtins.str] = None,
                 organizational_unit: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.str common_name: Specifies the common name of private certificate. The valid length
               is limited between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_),
               dots (.), comma (,), space ( ) and asterisks (*) are allowed. Changing this parameter will create a new resource.
        :param _builtins.str country: Specifies the country code of private certificate. The valid length is
               limited in `2`. Only English letters are allowed. The value corresponding to the parent CA is inherited by default.
               Changing this parameter will create a new resource.
        :param _builtins.str locality: Specifies the locality of private certificate. The valid length
               is limited between `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_),
               dots (.), comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited by default.
               Changing this parameter will create a new resource.
        :param _builtins.str organization: Specifies the organization of private certificate. The valid length
               is limited between `1` to `64`. Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.),
               comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited by default.
               Changing this parameter will create a new resource.
        :param _builtins.str organizational_unit: Specifies the organizational unit of private certificate.
               The valid length is limited between `1` to `64`. Only Chinese and English letters, digits, hyphens (-),
               underscores (_), dots (.), comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited
               by default. Changing this parameter will create a new resource.
               
               <a name="block-validity"></a>
               The `validity` block supports:
        :param _builtins.str state: Specifies the state or city name of private certificate. The valid length is
               limited between `1` to `128`. Only Chinese and English letters, digits, hyphens (-), underscores (_),
               dots (.), comma (,) and space ( ) are allowed. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> _builtins.str:
        """
        Specifies the common name of private certificate. The valid length
        is limited between `1` to `64`, Only Chinese and English letters, digits, hyphens (-), underscores (_),
        dots (.), comma (,), space ( ) and asterisks (*) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[_builtins.str]:
        """
        Specifies the country code of private certificate. The valid length is
        limited in `2`. Only English letters are allowed. The value corresponding to the parent CA is inherited by default.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def locality(self) -> Optional[_builtins.str]:
        """
        Specifies the locality of private certificate. The valid length
        is limited between `1` to `128`, Only Chinese and English letters, digits, hyphens (-), underscores (_),
        dots (.), comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited by default.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "locality")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> Optional[_builtins.str]:
        """
        Specifies the organization of private certificate. The valid length
        is limited between `1` to `64`. Only Chinese and English letters, digits, hyphens (-), underscores (_), dots (.),
        comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited by default.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[_builtins.str]:
        """
        Specifies the organizational unit of private certificate.
        The valid length is limited between `1` to `64`. Only Chinese and English letters, digits, hyphens (-),
        underscores (_), dots (.), comma (,) and space ( ) are allowed. The value corresponding to the parent CA is inherited
        by default. Changing this parameter will create a new resource.

        <a name="block-validity"></a>
        The `validity` block supports:
        """
        return pulumi.get(self, "organizational_unit")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        Specifies the state or city name of private certificate. The valid length is
        limited between `1` to `128`. Only Chinese and English letters, digits, hyphens (-), underscores (_),
        dots (.), comma (,) and space ( ) are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class PrivateCertificateSubjectAlternativeName(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str type: Specifies the type of the alternative name. Currently,
               only **DNS**, **IP**, **EMAIL**, and **URI** are allowed. Changing this parameter will create a new resource.
        :param _builtins.str value: Specifies the value of the corresponding alternative name type.
               Changing this parameter will create a new resource.
               + When `type` is **DNS**, the value length ranges from `0` to `253` characters.
               + When `type` is **IP**, the value length ranges from `0` to `39` characters. Support IPv4 and IPv6.
               + When `type` is **EMAIL**, the value length ranges from `0` to `256` characters.
               + When `type` is **URI**, the value length ranges from `0` to `253` characters.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the alternative name. Currently,
        only **DNS**, **IP**, **EMAIL**, and **URI** are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the corresponding alternative name type.
        Changing this parameter will create a new resource.
        + When `type` is **DNS**, the value length ranges from `0` to `253` characters.
        + When `type` is **IP**, the value length ranges from `0` to `39` characters. Support IPv4 and IPv6.
        + When `type` is **EMAIL**, the value length ranges from `0` to `256` characters.
        + When `type` is **URI**, the value length ranges from `0` to `253` characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PrivateCertificateValidity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startAt":
            suggest = "start_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateCertificateValidity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateCertificateValidity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateCertificateValidity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 value: _builtins.int,
                 start_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Specifies the type of the alternative name. Currently,
               only **DNS**, **IP**, **EMAIL**, and **URI** are allowed. Changing this parameter will create a new resource.
        :param _builtins.int value: Specifies the value of the corresponding alternative name type.
               Changing this parameter will create a new resource.
               + When `type` is **DNS**, the value length ranges from `0` to `253` characters.
               + When `type` is **IP**, the value length ranges from `0` to `39` characters. Support IPv4 and IPv6.
               + When `type` is **EMAIL**, the value length ranges from `0` to `256` characters.
               + When `type` is **URI**, the value length ranges from `0` to `253` characters.
        :param _builtins.str start_at: Specifies the private certificate validity start from.
               The value is a timestamp in milliseconds. For example, `1645146939688` indicates `2022-02-18 09:15:39`.
               The value of `start_at` cannot be earlier than the result of the value of current time minus `5` minutes.
               Changing this creates a new private certificate resource.
               
               <a name="block-subject_alternative_names"></a>
               The `subject_alternative_names` block supports:
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if start_at is not None:
            pulumi.set(__self__, "start_at", start_at)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the alternative name. Currently,
        only **DNS**, **IP**, **EMAIL**, and **URI** are allowed. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.int:
        """
        Specifies the value of the corresponding alternative name type.
        Changing this parameter will create a new resource.
        + When `type` is **DNS**, the value length ranges from `0` to `253` characters.
        + When `type` is **IP**, the value length ranges from `0` to `39` characters. Support IPv4 and IPv6.
        + When `type` is **EMAIL**, the value length ranges from `0` to `256` characters.
        + When `type` is **URI**, the value length ranges from `0` to `253` characters.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="startAt")
    def start_at(self) -> Optional[_builtins.str]:
        """
        Specifies the private certificate validity start from.
        The value is a timestamp in milliseconds. For example, `1645146939688` indicates `2022-02-18 09:15:39`.
        The value of `start_at` cannot be earlier than the result of the value of current time minus `5` minutes.
        Changing this creates a new private certificate resource.

        <a name="block-subject_alternative_names"></a>
        The `subject_alternative_names` block supports:
        """
        return pulumi.get(self, "start_at")


@pulumi.output_type
class GetCertificatesCertificateResult(dict):
    def __init__(__self__, *,
                 brand: _builtins.str,
                 deploy_support: _builtins.bool,
                 description: _builtins.str,
                 domain: _builtins.str,
                 domain_count: _builtins.int,
                 domain_type: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 expire_time: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 sans: _builtins.str,
                 signature_algorithm: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 validity_period: _builtins.int,
                 wildcard_count: _builtins.int):
        """
        :param _builtins.str brand: The certificate authority. The value can be: **GLOBALSIGN**, **SYMANTEC**, **GEOTRUST**, **CFCA**.
        :param _builtins.bool deploy_support: Specifies whether to query only certificates that support deployment.
               Defaults to **false**.
        :param _builtins.str description: The certificate description.
        :param _builtins.str domain: The domain name associated with the certificate.
        :param _builtins.int domain_count: The number of domain names that can be associated with the certificate.
        :param _builtins.str domain_type: The domain name type. The options are as follows:
               + **SINGLE_DOMAIN**: Single domain names.
               + **WILDCARD**: Wildcard domain names.
               + **MULTI_DOMAIN**: Multiple domain names.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the CCM certificates belong.
               This field is only valid for enterprise users. For enterprise users, all resources with permission will be queried
               when this field is not specified.
        :param _builtins.str expire_time: The certificate expiration time.
        :param _builtins.str id: The certificate ID.
        :param _builtins.str name: Specifies the certificate name.
        :param _builtins.str sans: The additional domain name associated with the certificate.
        :param _builtins.str signature_algorithm: The signature algorithm.
        :param _builtins.str status: Specifies the certificate status.  
               The options are as follows:
               + **ALL**: All certificate status.
               + **PAID**: The certificate has been paid and needs to be applied for from the CA.
               + **ISSUED**: The certificate has been issued.
               + **CHECKING**: The certificate application is being reviewed.
               + **CANCELCHECKING**: The certificate application cancellation is being reviewed.
               + **UNPASSED**: The certificate application fails.
               + **EXPIRED**: The certificate has expired.
               + **REVOKING**: The certificate revocation application is being reviewed.
               + **REVOKED**: The certificate has been revoked.
               + **UPLOAD**: The certificate is being managed.
               + **CHECKING_ORG**: The organization verification is to be completed.
               + **ISSUING**: The certificate is to be issued.
               + **SUPPLEMENTCHECKING**: Additional domain names to be added for a multi-domain certificate are being reviewed.
               
               Defaults to **ALL**.
        :param _builtins.str type: The certificate type. The value can be: **DV_SSL_CERT**, **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**,
               **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, **OV_SSL_CERT_PRO**.
        :param _builtins.int validity_period: The certificate validity period, in months.
        :param _builtins.int wildcard_count: The number of wildcard domain names that can be associated with the certificate.
        """
        pulumi.set(__self__, "brand", brand)
        pulumi.set(__self__, "deploy_support", deploy_support)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "domain_count", domain_count)
        pulumi.set(__self__, "domain_type", domain_type)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sans", sans)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "validity_period", validity_period)
        pulumi.set(__self__, "wildcard_count", wildcard_count)

    @_builtins.property
    @pulumi.getter
    def brand(self) -> _builtins.str:
        """
        The certificate authority. The value can be: **GLOBALSIGN**, **SYMANTEC**, **GEOTRUST**, **CFCA**.
        """
        return pulumi.get(self, "brand")

    @_builtins.property
    @pulumi.getter(name="deploySupport")
    def deploy_support(self) -> _builtins.bool:
        """
        Specifies whether to query only certificates that support deployment.
        Defaults to **false**.
        """
        return pulumi.get(self, "deploy_support")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The certificate description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        The domain name associated with the certificate.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="domainCount")
    def domain_count(self) -> _builtins.int:
        """
        The number of domain names that can be associated with the certificate.
        """
        return pulumi.get(self, "domain_count")

    @_builtins.property
    @pulumi.getter(name="domainType")
    def domain_type(self) -> _builtins.str:
        """
        The domain name type. The options are as follows:
        + **SINGLE_DOMAIN**: Single domain names.
        + **WILDCARD**: Wildcard domain names.
        + **MULTI_DOMAIN**: Multiple domain names.
        """
        return pulumi.get(self, "domain_type")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID to which the CCM certificates belong.
        This field is only valid for enterprise users. For enterprise users, all resources with permission will be queried
        when this field is not specified.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.str:
        """
        The certificate expiration time.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The certificate ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the certificate name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sans(self) -> _builtins.str:
        """
        The additional domain name associated with the certificate.
        """
        return pulumi.get(self, "sans")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> _builtins.str:
        """
        The signature algorithm.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the certificate status.  
        The options are as follows:
        + **ALL**: All certificate status.
        + **PAID**: The certificate has been paid and needs to be applied for from the CA.
        + **ISSUED**: The certificate has been issued.
        + **CHECKING**: The certificate application is being reviewed.
        + **CANCELCHECKING**: The certificate application cancellation is being reviewed.
        + **UNPASSED**: The certificate application fails.
        + **EXPIRED**: The certificate has expired.
        + **REVOKING**: The certificate revocation application is being reviewed.
        + **REVOKED**: The certificate has been revoked.
        + **UPLOAD**: The certificate is being managed.
        + **CHECKING_ORG**: The organization verification is to be completed.
        + **ISSUING**: The certificate is to be issued.
        + **SUPPLEMENTCHECKING**: Additional domain names to be added for a multi-domain certificate are being reviewed.

        Defaults to **ALL**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The certificate type. The value can be: **DV_SSL_CERT**, **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**,
        **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, **OV_SSL_CERT_PRO**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="validityPeriod")
    def validity_period(self) -> _builtins.int:
        """
        The certificate validity period, in months.
        """
        return pulumi.get(self, "validity_period")

    @_builtins.property
    @pulumi.getter(name="wildcardCount")
    def wildcard_count(self) -> _builtins.int:
        """
        The number of wildcard domain names that can be associated with the certificate.
        """
        return pulumi.get(self, "wildcard_count")


@pulumi.output_type
class GetPrivateCasCaResult(dict):
    def __init__(__self__, *,
                 charging_mode: _builtins.str,
                 created_at: _builtins.str,
                 crl_configurations: Sequence['outputs.GetPrivateCasCaCrlConfigurationResult'],
                 deleted_at: _builtins.str,
                 distinguished_names: Sequence['outputs.GetPrivateCasCaDistinguishedNameResult'],
                 enterprise_project_id: _builtins.str,
                 expired_at: _builtins.str,
                 free_quota: _builtins.int,
                 gen_mode: _builtins.str,
                 id: _builtins.str,
                 issuer_id: _builtins.str,
                 issuer_name: _builtins.str,
                 key_algorithm: _builtins.str,
                 path_length: _builtins.int,
                 serial_number: _builtins.str,
                 signature_algorithm: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str charging_mode: The charge mode. Valid values are **prePaid** and **postPaid**.
        :param _builtins.str created_at: The creation time of the private CA, in RFC3339 format.
        :param Sequence['GetPrivateCasCaCrlConfigurationArgs'] crl_configurations: The certificate CRL configuration.
        :param _builtins.str deleted_at: The deletion time of the private CA, in RFC3339 format.
        :param Sequence['GetPrivateCasCaDistinguishedNameArgs'] distinguished_names: The distinguished name of the private CA.
        :param _builtins.str enterprise_project_id: The enterprise project ID. Defaults to `0`.
               + For enterprise users, `0` means the resources are under the default enterprise project.
               + For non-enterprise project users, `0`  means the resources are not under an enterprise project.
        :param _builtins.str expired_at: The expiration time of the private CA, in RFC3339 format.
        :param _builtins.int free_quota: The free certificate quota.
        :param _builtins.str gen_mode: The CA generation method.
               + **GENERATE**: Generated by the PCA system.
               + **IMPORT**: Imported externally.
               + **CSR**: Issued by an internal CA with CSRs imported externally. This means the private key is not managed by PCA.
        :param _builtins.str id: The ID of the private CA.
        :param _builtins.str issuer_id: The ID of the parent CA. This field is meaningless for root CAs.
        :param _builtins.str issuer_name: The name of the parent CA. This field is meaningless for root CAs.
        :param _builtins.str key_algorithm: The key algorithm.
        :param _builtins.int path_length: The length of the CA path.
        :param _builtins.str serial_number: The serial number of the private CA.
        :param _builtins.str signature_algorithm: The signature hash algorithm.
        :param _builtins.str status: Specifies the private CA status. Valid values are as follows:
               + **PENDING**: The CA is to be activated.
               + **ACTIVED**: The CA is activated.
               + **DISABLED**: The CA is disabled.
               + **DELETED**: The CA is to be deleted as scheduled.
               + **EXPIRED**: The CA has expired.
               
               The CA can issue certificates only when `status` is **ACTIVED**.
        :param _builtins.str type: Specifies the private CA type. Valid values are as follows:
               + **ROOT**: A root CA certificate.
               + **SUBORDINATE**: A subordinate CA certificate.
        """
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "crl_configurations", crl_configurations)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "distinguished_names", distinguished_names)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "expired_at", expired_at)
        pulumi.set(__self__, "free_quota", free_quota)
        pulumi.set(__self__, "gen_mode", gen_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issuer_id", issuer_id)
        pulumi.set(__self__, "issuer_name", issuer_name)
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        pulumi.set(__self__, "path_length", path_length)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> _builtins.str:
        """
        The charge mode. Valid values are **prePaid** and **postPaid**.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the private CA, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="crlConfigurations")
    def crl_configurations(self) -> Sequence['outputs.GetPrivateCasCaCrlConfigurationResult']:
        """
        The certificate CRL configuration.
        """
        return pulumi.get(self, "crl_configurations")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.str:
        """
        The deletion time of the private CA, in RFC3339 format.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="distinguishedNames")
    def distinguished_names(self) -> Sequence['outputs.GetPrivateCasCaDistinguishedNameResult']:
        """
        The distinguished name of the private CA.
        """
        return pulumi.get(self, "distinguished_names")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID. Defaults to `0`.
        + For enterprise users, `0` means the resources are under the default enterprise project.
        + For non-enterprise project users, `0`  means the resources are not under an enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> _builtins.str:
        """
        The expiration time of the private CA, in RFC3339 format.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter(name="freeQuota")
    def free_quota(self) -> _builtins.int:
        """
        The free certificate quota.
        """
        return pulumi.get(self, "free_quota")

    @_builtins.property
    @pulumi.getter(name="genMode")
    def gen_mode(self) -> _builtins.str:
        """
        The CA generation method.
        + **GENERATE**: Generated by the PCA system.
        + **IMPORT**: Imported externally.
        + **CSR**: Issued by an internal CA with CSRs imported externally. This means the private key is not managed by PCA.
        """
        return pulumi.get(self, "gen_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the private CA.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> _builtins.str:
        """
        The ID of the parent CA. This field is meaningless for root CAs.
        """
        return pulumi.get(self, "issuer_id")

    @_builtins.property
    @pulumi.getter(name="issuerName")
    def issuer_name(self) -> _builtins.str:
        """
        The name of the parent CA. This field is meaningless for root CAs.
        """
        return pulumi.get(self, "issuer_name")

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> _builtins.str:
        """
        The key algorithm.
        """
        return pulumi.get(self, "key_algorithm")

    @_builtins.property
    @pulumi.getter(name="pathLength")
    def path_length(self) -> _builtins.int:
        """
        The length of the CA path.
        """
        return pulumi.get(self, "path_length")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        The serial number of the private CA.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> _builtins.str:
        """
        The signature hash algorithm.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the private CA status. Valid values are as follows:
        + **PENDING**: The CA is to be activated.
        + **ACTIVED**: The CA is activated.
        + **DISABLED**: The CA is disabled.
        + **DELETED**: The CA is to be deleted as scheduled.
        + **EXPIRED**: The CA has expired.

        The CA can issue certificates only when `status` is **ACTIVED**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the private CA type. Valid values are as follows:
        + **ROOT**: A root CA certificate.
        + **SUBORDINATE**: A subordinate CA certificate.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPrivateCasCaCrlConfigurationResult(dict):
    def __init__(__self__, *,
                 crl_dis_point: _builtins.str,
                 crl_name: _builtins.str,
                 enabled: _builtins.bool,
                 obs_bucket_name: _builtins.str,
                 valid_days: _builtins.int):
        """
        :param _builtins.str crl_dis_point: The revocation list distribution address, which is also the address of the CRL file in the OBS bucket.
        :param _builtins.str crl_name: The name of the certificate revocation list.
        :param _builtins.bool enabled: Whether to enable the release function of CRL.
        :param _builtins.str obs_bucket_name: The OBS bucket name.
        :param _builtins.int valid_days: The CRL update interval, in days.
        """
        pulumi.set(__self__, "crl_dis_point", crl_dis_point)
        pulumi.set(__self__, "crl_name", crl_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "obs_bucket_name", obs_bucket_name)
        pulumi.set(__self__, "valid_days", valid_days)

    @_builtins.property
    @pulumi.getter(name="crlDisPoint")
    def crl_dis_point(self) -> _builtins.str:
        """
        The revocation list distribution address, which is also the address of the CRL file in the OBS bucket.
        """
        return pulumi.get(self, "crl_dis_point")

    @_builtins.property
    @pulumi.getter(name="crlName")
    def crl_name(self) -> _builtins.str:
        """
        The name of the certificate revocation list.
        """
        return pulumi.get(self, "crl_name")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether to enable the release function of CRL.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="obsBucketName")
    def obs_bucket_name(self) -> _builtins.str:
        """
        The OBS bucket name.
        """
        return pulumi.get(self, "obs_bucket_name")

    @_builtins.property
    @pulumi.getter(name="validDays")
    def valid_days(self) -> _builtins.int:
        """
        The CRL update interval, in days.
        """
        return pulumi.get(self, "valid_days")


@pulumi.output_type
class GetPrivateCasCaDistinguishedNameResult(dict):
    def __init__(__self__, *,
                 common_name: _builtins.str,
                 country: _builtins.str,
                 locality: _builtins.str,
                 organization: _builtins.str,
                 organizational_unit: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str common_name: The common name.
        :param _builtins.str country: The country code.
        :param _builtins.str locality: The country or region name.
        :param _builtins.str organization: The organization name.
        :param _builtins.str organizational_unit: The organization unit.
        :param _builtins.str state: The state or city name.
        """
        pulumi.set(__self__, "common_name", common_name)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "locality", locality)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "organizational_unit", organizational_unit)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> _builtins.str:
        """
        The common name.
        """
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        The country code.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def locality(self) -> _builtins.str:
        """
        The country or region name.
        """
        return pulumi.get(self, "locality")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        The organization name.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> _builtins.str:
        """
        The organization unit.
        """
        return pulumi.get(self, "organizational_unit")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state or city name.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetPrivateCertificatesCertificateResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 distinguished_names: Sequence['outputs.GetPrivateCertificatesCertificateDistinguishedNameResult'],
                 enterprise_project_id: _builtins.str,
                 expired_at: _builtins.str,
                 gen_mode: _builtins.str,
                 id: _builtins.str,
                 issuer_id: _builtins.str,
                 issuer_name: _builtins.str,
                 key_algorithm: _builtins.str,
                 signature_algorithm: _builtins.str,
                 start_at: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the certificate, in RFC3339 format.
        :param Sequence['GetPrivateCertificatesCertificateDistinguishedNameArgs'] distinguished_names: The certificate name configuration.
        :param _builtins.str enterprise_project_id: The enterprise project ID. Defaults to `0`.
               + For enterprise users, `0` means the resources are under the default enterprise project.
               + For non-enterprise project users, `0`  means the resources are not under an enterprise project.
        :param _builtins.str expired_at: The certificate expiration time, in RFC3339 format.
        :param _builtins.str gen_mode: The certificate generation method.
               + **GENERATE**: Generated by the PCA system.
               + **IMPORT**: Imported externally.
               + **CSR**: Issued by an internal CA with CSRs imported externally. This means the private key is not managed by PCA.
        :param _builtins.str id: The ID of the private certificate.
        :param _builtins.str issuer_id: The ID of the parent CA.
        :param _builtins.str issuer_name: The name of the parent CA certificate.
        :param _builtins.str key_algorithm: The key algorithm.
        :param _builtins.str signature_algorithm: The signature algorithm.
        :param _builtins.str start_at: The private certificate validity start from, in RFC3339 format.
        :param _builtins.str status: Specifies the private certificate status. The valid values are as follows:
               + **ISSUED**: The certificate has been issued.
               + **REVOKED**: The certificate has been revoked.
               + **EXPIRED**: The certificate has expired.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "distinguished_names", distinguished_names)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "expired_at", expired_at)
        pulumi.set(__self__, "gen_mode", gen_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issuer_id", issuer_id)
        pulumi.set(__self__, "issuer_name", issuer_name)
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "start_at", start_at)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the certificate, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="distinguishedNames")
    def distinguished_names(self) -> Sequence['outputs.GetPrivateCertificatesCertificateDistinguishedNameResult']:
        """
        The certificate name configuration.
        """
        return pulumi.get(self, "distinguished_names")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID. Defaults to `0`.
        + For enterprise users, `0` means the resources are under the default enterprise project.
        + For non-enterprise project users, `0`  means the resources are not under an enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> _builtins.str:
        """
        The certificate expiration time, in RFC3339 format.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter(name="genMode")
    def gen_mode(self) -> _builtins.str:
        """
        The certificate generation method.
        + **GENERATE**: Generated by the PCA system.
        + **IMPORT**: Imported externally.
        + **CSR**: Issued by an internal CA with CSRs imported externally. This means the private key is not managed by PCA.
        """
        return pulumi.get(self, "gen_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the private certificate.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> _builtins.str:
        """
        The ID of the parent CA.
        """
        return pulumi.get(self, "issuer_id")

    @_builtins.property
    @pulumi.getter(name="issuerName")
    def issuer_name(self) -> _builtins.str:
        """
        The name of the parent CA certificate.
        """
        return pulumi.get(self, "issuer_name")

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> _builtins.str:
        """
        The key algorithm.
        """
        return pulumi.get(self, "key_algorithm")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> _builtins.str:
        """
        The signature algorithm.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter(name="startAt")
    def start_at(self) -> _builtins.str:
        """
        The private certificate validity start from, in RFC3339 format.
        """
        return pulumi.get(self, "start_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the private certificate status. The valid values are as follows:
        + **ISSUED**: The certificate has been issued.
        + **REVOKED**: The certificate has been revoked.
        + **EXPIRED**: The certificate has expired.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetPrivateCertificatesCertificateDistinguishedNameResult(dict):
    def __init__(__self__, *,
                 common_name: _builtins.str,
                 country: _builtins.str,
                 locality: _builtins.str,
                 organization: _builtins.str,
                 organizational_unit: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str common_name: The common certificate name.
        :param _builtins.str country: The country code.
        :param _builtins.str locality: The country or region name.
        :param _builtins.str organization: The organization name.
        :param _builtins.str organizational_unit: The organization unit.
        :param _builtins.str state: The state or city name.
        """
        pulumi.set(__self__, "common_name", common_name)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "locality", locality)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "organizational_unit", organizational_unit)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> _builtins.str:
        """
        The common certificate name.
        """
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        The country code.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def locality(self) -> _builtins.str:
        """
        The country or region name.
        """
        return pulumi.get(self, "locality")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        The organization name.
        """
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> _builtins.str:
        """
        The organization unit.
        """
        return pulumi.get(self, "organizational_unit")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state or city name.
        """
        return pulumi.get(self, "state")


