# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPrivateCertificateExportResult',
    'AwaitableGetPrivateCertificateExportResult',
    'get_private_certificate_export',
    'get_private_certificate_export_output',
]

@pulumi.output_type
class GetPrivateCertificateExportResult:
    """
    A collection of values returned by getPrivateCertificateExport.
    """
    def __init__(__self__, certificate=None, certificate_chain=None, certificate_id=None, enc_certificate=None, enc_private_key=None, enc_sm2_enveloped_key=None, id=None, keystore_pass=None, password=None, private_key=None, region=None, server_jks=None, server_pfx=None, signed_and_enveloped_data=None, sm_standard=None, type=None):
        if certificate and not isinstance(certificate, str):
            raise TypeError("Expected argument 'certificate' to be a str")
        pulumi.set(__self__, "certificate", certificate)
        if certificate_chain and not isinstance(certificate_chain, str):
            raise TypeError("Expected argument 'certificate_chain' to be a str")
        pulumi.set(__self__, "certificate_chain", certificate_chain)
        if certificate_id and not isinstance(certificate_id, str):
            raise TypeError("Expected argument 'certificate_id' to be a str")
        pulumi.set(__self__, "certificate_id", certificate_id)
        if enc_certificate and not isinstance(enc_certificate, str):
            raise TypeError("Expected argument 'enc_certificate' to be a str")
        pulumi.set(__self__, "enc_certificate", enc_certificate)
        if enc_private_key and not isinstance(enc_private_key, str):
            raise TypeError("Expected argument 'enc_private_key' to be a str")
        pulumi.set(__self__, "enc_private_key", enc_private_key)
        if enc_sm2_enveloped_key and not isinstance(enc_sm2_enveloped_key, str):
            raise TypeError("Expected argument 'enc_sm2_enveloped_key' to be a str")
        pulumi.set(__self__, "enc_sm2_enveloped_key", enc_sm2_enveloped_key)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keystore_pass and not isinstance(keystore_pass, str):
            raise TypeError("Expected argument 'keystore_pass' to be a str")
        pulumi.set(__self__, "keystore_pass", keystore_pass)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if private_key and not isinstance(private_key, str):
            raise TypeError("Expected argument 'private_key' to be a str")
        pulumi.set(__self__, "private_key", private_key)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_jks and not isinstance(server_jks, str):
            raise TypeError("Expected argument 'server_jks' to be a str")
        pulumi.set(__self__, "server_jks", server_jks)
        if server_pfx and not isinstance(server_pfx, str):
            raise TypeError("Expected argument 'server_pfx' to be a str")
        pulumi.set(__self__, "server_pfx", server_pfx)
        if signed_and_enveloped_data and not isinstance(signed_and_enveloped_data, str):
            raise TypeError("Expected argument 'signed_and_enveloped_data' to be a str")
        pulumi.set(__self__, "signed_and_enveloped_data", signed_and_enveloped_data)
        if sm_standard and not isinstance(sm_standard, str):
            raise TypeError("Expected argument 'sm_standard' to be a str")
        pulumi.set(__self__, "sm_standard", sm_standard)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> _builtins.str:
        """
        Indicates the certificate content in PEM format.
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> _builtins.str:
        """
        Indicates the certificate chain in PEM format.
        """
        return pulumi.get(self, "certificate_chain")

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> _builtins.str:
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="encCertificate")
    def enc_certificate(self) -> _builtins.str:
        """
        Indicates the encryption certificate content in PEM format.
        """
        return pulumi.get(self, "enc_certificate")

    @_builtins.property
    @pulumi.getter(name="encPrivateKey")
    def enc_private_key(self) -> _builtins.str:
        """
        Indicates the encryption certificate private key in PEM format.
        """
        return pulumi.get(self, "enc_private_key")

    @_builtins.property
    @pulumi.getter(name="encSm2EnvelopedKey")
    def enc_sm2_enveloped_key(self) -> _builtins.str:
        """
        Indicates the national secret **GMT0009** standard specification SM2 digital envelope for
        encrypting private key.
        """
        return pulumi.get(self, "enc_sm2_enveloped_key")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keystorePass")
    def keystore_pass(self) -> _builtins.str:
        """
        Indicates the keystore password. This field is empty when argument `password` is specified.
        """
        return pulumi.get(self, "keystore_pass")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> _builtins.str:
        """
        Indicates the certificate private key in PEM format.
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverJks")
    def server_jks(self) -> _builtins.str:
        """
        Indicates the certificate file for **TOMCAT** server. Encoding by base64.
        """
        return pulumi.get(self, "server_jks")

    @_builtins.property
    @pulumi.getter(name="serverPfx")
    def server_pfx(self) -> _builtins.str:
        """
        Indicates the certificate file for **IIS** server. Encoding by base64.
        """
        return pulumi.get(self, "server_pfx")

    @_builtins.property
    @pulumi.getter(name="signedAndEnvelopedData")
    def signed_and_enveloped_data(self) -> _builtins.str:
        """
        Indicates the national secret **GMT0010** standard specification signed digital envelope
        with encrypted private key.
        """
        return pulumi.get(self, "signed_and_enveloped_data")

    @_builtins.property
    @pulumi.getter(name="smStandard")
    def sm_standard(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sm_standard")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetPrivateCertificateExportResult(GetPrivateCertificateExportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateCertificateExportResult(
            certificate=self.certificate,
            certificate_chain=self.certificate_chain,
            certificate_id=self.certificate_id,
            enc_certificate=self.enc_certificate,
            enc_private_key=self.enc_private_key,
            enc_sm2_enveloped_key=self.enc_sm2_enveloped_key,
            id=self.id,
            keystore_pass=self.keystore_pass,
            password=self.password,
            private_key=self.private_key,
            region=self.region,
            server_jks=self.server_jks,
            server_pfx=self.server_pfx,
            signed_and_enveloped_data=self.signed_and_enveloped_data,
            sm_standard=self.sm_standard,
            type=self.type)


def get_private_certificate_export(certificate_id: Optional[_builtins.str] = None,
                                   password: Optional[_builtins.str] = None,
                                   region: Optional[_builtins.str] = None,
                                   sm_standard: Optional[_builtins.str] = None,
                                   type: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateCertificateExportResult:
    """
    Use this data source export a private Certificate within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    certificate_id = config.require_object("certificateId")
    test = huaweicloud.ccm.get_private_certificate_export(region="cn-north-4",
        type="OTHER",
        certificate_id=certificate_id)
    ```


    :param _builtins.str certificate_id: Specifies the certificate ID of the private certificate
           you want to export.
    :param _builtins.str password: Specifies the password used to encrypt the private key. Only uppercase letters,
           lowercase letters, digits, and special characters (`,.+-_#`) are allowed. The maximum length is 32 bytes.
           By default, encryption is not used when exporting.
    :param _builtins.str region: Specifies the certificate region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sm_standard: Specifies whether to use the national secret **GMT0009** and **GMT0010** standard
           specification. This field is valid only when the certificate algorithm is **SM2**.
           The sm2 cert only support **OTHER** type. Valid values are **true** and **false**. Defaults to **false**.
    :param _builtins.str type: Specifies the type of the server on which the certificate is installed.
           The options are as follows:
           + **APACHE**: Using for apache server.
           + **NGINX**: Using for nginx server.
           + **OTHER**: Using for download certificates in PEM format.
           + **IIS**: Using for Windows server.
           + **TOMCAT**: Using for tomcat server.
           
           > The certificate file exported is different each time when `type` is set to **IIS** or **TOMCAT**.
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['password'] = password
    __args__['region'] = region
    __args__['smStandard'] = sm_standard
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ccm/getPrivateCertificateExport:getPrivateCertificateExport', __args__, opts=opts, typ=GetPrivateCertificateExportResult).value

    return AwaitableGetPrivateCertificateExportResult(
        certificate=pulumi.get(__ret__, 'certificate'),
        certificate_chain=pulumi.get(__ret__, 'certificate_chain'),
        certificate_id=pulumi.get(__ret__, 'certificate_id'),
        enc_certificate=pulumi.get(__ret__, 'enc_certificate'),
        enc_private_key=pulumi.get(__ret__, 'enc_private_key'),
        enc_sm2_enveloped_key=pulumi.get(__ret__, 'enc_sm2_enveloped_key'),
        id=pulumi.get(__ret__, 'id'),
        keystore_pass=pulumi.get(__ret__, 'keystore_pass'),
        password=pulumi.get(__ret__, 'password'),
        private_key=pulumi.get(__ret__, 'private_key'),
        region=pulumi.get(__ret__, 'region'),
        server_jks=pulumi.get(__ret__, 'server_jks'),
        server_pfx=pulumi.get(__ret__, 'server_pfx'),
        signed_and_enveloped_data=pulumi.get(__ret__, 'signed_and_enveloped_data'),
        sm_standard=pulumi.get(__ret__, 'sm_standard'),
        type=pulumi.get(__ret__, 'type'))
def get_private_certificate_export_output(certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          password: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          sm_standard: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          type: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrivateCertificateExportResult]:
    """
    Use this data source export a private Certificate within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    certificate_id = config.require_object("certificateId")
    test = huaweicloud.ccm.get_private_certificate_export(region="cn-north-4",
        type="OTHER",
        certificate_id=certificate_id)
    ```


    :param _builtins.str certificate_id: Specifies the certificate ID of the private certificate
           you want to export.
    :param _builtins.str password: Specifies the password used to encrypt the private key. Only uppercase letters,
           lowercase letters, digits, and special characters (`,.+-_#`) are allowed. The maximum length is 32 bytes.
           By default, encryption is not used when exporting.
    :param _builtins.str region: Specifies the certificate region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sm_standard: Specifies whether to use the national secret **GMT0009** and **GMT0010** standard
           specification. This field is valid only when the certificate algorithm is **SM2**.
           The sm2 cert only support **OTHER** type. Valid values are **true** and **false**. Defaults to **false**.
    :param _builtins.str type: Specifies the type of the server on which the certificate is installed.
           The options are as follows:
           + **APACHE**: Using for apache server.
           + **NGINX**: Using for nginx server.
           + **OTHER**: Using for download certificates in PEM format.
           + **IIS**: Using for Windows server.
           + **TOMCAT**: Using for tomcat server.
           
           > The certificate file exported is different each time when `type` is set to **IIS** or **TOMCAT**.
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['password'] = password
    __args__['region'] = region
    __args__['smStandard'] = sm_standard
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ccm/getPrivateCertificateExport:getPrivateCertificateExport', __args__, opts=opts, typ=GetPrivateCertificateExportResult)
    return __ret__.apply(lambda __response__: GetPrivateCertificateExportResult(
        certificate=pulumi.get(__response__, 'certificate'),
        certificate_chain=pulumi.get(__response__, 'certificate_chain'),
        certificate_id=pulumi.get(__response__, 'certificate_id'),
        enc_certificate=pulumi.get(__response__, 'enc_certificate'),
        enc_private_key=pulumi.get(__response__, 'enc_private_key'),
        enc_sm2_enveloped_key=pulumi.get(__response__, 'enc_sm2_enveloped_key'),
        id=pulumi.get(__response__, 'id'),
        keystore_pass=pulumi.get(__response__, 'keystore_pass'),
        password=pulumi.get(__response__, 'password'),
        private_key=pulumi.get(__response__, 'private_key'),
        region=pulumi.get(__response__, 'region'),
        server_jks=pulumi.get(__response__, 'server_jks'),
        server_pfx=pulumi.get(__response__, 'server_pfx'),
        signed_and_enveloped_data=pulumi.get(__response__, 'signed_and_enveloped_data'),
        sm_standard=pulumi.get(__response__, 'sm_standard'),
        type=pulumi.get(__response__, 'type')))
