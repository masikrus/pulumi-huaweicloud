# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PrivateCaArgs', 'PrivateCa']

@pulumi.input_type
class PrivateCaArgs:
    def __init__(__self__, *,
                 distinguished_names: pulumi.Input[Sequence[pulumi.Input['PrivateCaDistinguishedNameArgs']]],
                 key_algorithm: pulumi.Input[_builtins.str],
                 pending_days: pulumi.Input[_builtins.str],
                 signature_algorithm: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 validities: pulumi.Input[Sequence[pulumi.Input['PrivateCaValidityArgs']]],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 crl_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaCrlConfigurationArgs']]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 path_length: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a PrivateCa resource.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCaDistinguishedNameArgs']]] distinguished_names: Specifies the distinguished name of private CA.
               Changing this parameter will create a new resource.
               The distinguished_name structure is documented below.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm of private CA.
               Options are: **RSA2048**, **RSA4096**, **EC256**, **EC256**,**SM2**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] pending_days: Specifies the pending days when deleting the private CA. It's limited
               between `7` to `30`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] signature_algorithm: Specifies the signature algorithm of private CA.
               Options are: **SHA256**, **SHA384**, **SHA512**, **SM3**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of validity value. Changing this parameter will create a new
               resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
               support **YEAR** and **MONTH(31 days)**.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCaValidityArgs']]] validities: Specifies the validity of private CA.
               Changing this parameter will create a new resource.
               The validity structure is documented below.
        :param pulumi.Input[_builtins.str] action: Specifies the operation action of the CCM private CA.
               Valid values are **enable** and **disable**.
               
               > 1. The **enable** operation is allowed only when the CA status is **DISABLED**.
               <br/>2. The **disable** operation is allowed only when the CA status is **ACTIVED** or **EXPIRED**.
               <br/>3. The status of the newly created CA is **ACTIVED**.
               <br/>4. The child CA's certificate status will remain consistent with the parent CA, so enabling or disabling the child
               CA alone may not be effective.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled.
               Valid values are **true** and **false**. Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the billing mode of the private CA.
               The valid values are **prePaid** and **postPaid**. Defaults to **postPaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCaCrlConfigurationArgs']]] crl_configurations: Specifies the CRL configuration of private CA. The maximum length is `1`.
               The crl_configuration structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] issuer_id: Specifies the ID of the parent CA. It's **required** for subordinate CA.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] key_usages: Specifies the key usage of private CA. It's a list of string.
               Options are: **digitalSignature**, **nonRepudiation**, **keyEncipherment**, **dataEncipherment**, **keyAgreement**,
               **keyCertSign**, **cRLSign**, **encipherOnly**, **decipherOnly**.
               This parameter is [digitalSignature,keyCertSign,cRLSign] by default and only support to customize when you create a
               subordinate CA. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] path_length: Specifies the length of the CA certificate path. The valid value is
               limited between `0` to `6`. If you want to create a root CA, this parameter is **not required** by default and the
               value will be set to `7` in return. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCM private CA. If omitted, the
               provider-level region will be used. Changing this will create a new resource. Now only support cn-north-4 (china) and
               ap-southeast-3 (international).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs associating with the private CA.
               
               <a name="block-distinguished_name"></a>
               The `distinguished_name` block supports:
        """
        pulumi.set(__self__, "distinguished_names", distinguished_names)
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        pulumi.set(__self__, "pending_days", pending_days)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "validities", validities)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if crl_configurations is not None:
            pulumi.set(__self__, "crl_configurations", crl_configurations)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if issuer_id is not None:
            pulumi.set(__self__, "issuer_id", issuer_id)
        if key_usages is not None:
            pulumi.set(__self__, "key_usages", key_usages)
        if path_length is not None:
            pulumi.set(__self__, "path_length", path_length)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="distinguishedNames")
    def distinguished_names(self) -> pulumi.Input[Sequence[pulumi.Input['PrivateCaDistinguishedNameArgs']]]:
        """
        Specifies the distinguished name of private CA.
        Changing this parameter will create a new resource.
        The distinguished_name structure is documented below.
        """
        return pulumi.get(self, "distinguished_names")

    @distinguished_names.setter
    def distinguished_names(self, value: pulumi.Input[Sequence[pulumi.Input['PrivateCaDistinguishedNameArgs']]]):
        pulumi.set(self, "distinguished_names", value)

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key algorithm of private CA.
        Options are: **RSA2048**, **RSA4096**, **EC256**, **EC256**,**SM2**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="pendingDays")
    def pending_days(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the pending days when deleting the private CA. It's limited
        between `7` to `30`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "pending_days")

    @pending_days.setter
    def pending_days(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pending_days", value)

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the signature algorithm of private CA.
        Options are: **SHA256**, **SHA384**, **SHA512**, **SM3**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "signature_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of validity value. Changing this parameter will create a new
        resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
        support **YEAR** and **MONTH(31 days)**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def validities(self) -> pulumi.Input[Sequence[pulumi.Input['PrivateCaValidityArgs']]]:
        """
        Specifies the validity of private CA.
        Changing this parameter will create a new resource.
        The validity structure is documented below.
        """
        return pulumi.get(self, "validities")

    @validities.setter
    def validities(self, value: pulumi.Input[Sequence[pulumi.Input['PrivateCaValidityArgs']]]):
        pulumi.set(self, "validities", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation action of the CCM private CA.
        Valid values are **enable** and **disable**.

        > 1. The **enable** operation is allowed only when the CA status is **DISABLED**.
        <br/>2. The **disable** operation is allowed only when the CA status is **ACTIVED** or **EXPIRED**.
        <br/>3. The status of the newly created CA is **ACTIVED**.
        <br/>4. The child CA's certificate status will remain consistent with the parent CA, so enabling or disabling the child
        CA alone may not be effective.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled.
        Valid values are **true** and **false**. Defaults to **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the billing mode of the private CA.
        The valid values are **prePaid** and **postPaid**. Defaults to **postPaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="crlConfigurations")
    def crl_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaCrlConfigurationArgs']]]]:
        """
        Specifies the CRL configuration of private CA. The maximum length is `1`.
        The crl_configuration structure is documented below.
        """
        return pulumi.get(self, "crl_configurations")

    @crl_configurations.setter
    def crl_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaCrlConfigurationArgs']]]]):
        pulumi.set(self, "crl_configurations", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the parent CA. It's **required** for subordinate CA.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "issuer_id")

    @issuer_id.setter
    def issuer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer_id", value)

    @_builtins.property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key usage of private CA. It's a list of string.
        Options are: **digitalSignature**, **nonRepudiation**, **keyEncipherment**, **dataEncipherment**, **keyAgreement**,
        **keyCertSign**, **cRLSign**, **encipherOnly**, **decipherOnly**.
        This parameter is [digitalSignature,keyCertSign,cRLSign] by default and only support to customize when you create a
        subordinate CA. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_usages")

    @key_usages.setter
    def key_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "key_usages", value)

    @_builtins.property
    @pulumi.getter(name="pathLength")
    def path_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the length of the CA certificate path. The valid value is
        limited between `0` to `6`. If you want to create a root CA, this parameter is **not required** by default and the
        value will be set to `7` in return. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "path_length")

    @path_length.setter
    def path_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "path_length", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CCM private CA. If omitted, the
        provider-level region will be used. Changing this will create a new resource. Now only support cn-north-4 (china) and
        ap-southeast-3 (international).
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs associating with the private CA.

        <a name="block-distinguished_name"></a>
        The `distinguished_name` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _PrivateCaState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crl_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaCrlConfigurationArgs']]]] = None,
                 distinguished_names: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaDistinguishedNameArgs']]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_at: Optional[pulumi.Input[_builtins.str]] = None,
                 free_quota: Optional[pulumi.Input[_builtins.int]] = None,
                 gen_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 path_length: Optional[pulumi.Input[_builtins.int]] = None,
                 pending_days: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 validities: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaValidityArgs']]]] = None):
        """
        Input properties used for looking up and filtering PrivateCa resources.
        :param pulumi.Input[_builtins.str] action: Specifies the operation action of the CCM private CA.
               Valid values are **enable** and **disable**.
               
               > 1. The **enable** operation is allowed only when the CA status is **DISABLED**.
               <br/>2. The **disable** operation is allowed only when the CA status is **ACTIVED** or **EXPIRED**.
               <br/>3. The status of the newly created CA is **ACTIVED**.
               <br/>4. The child CA's certificate status will remain consistent with the parent CA, so enabling or disabling the child
               CA alone may not be effective.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled.
               Valid values are **true** and **false**. Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the billing mode of the private CA.
               The valid values are **prePaid** and **postPaid**. Defaults to **postPaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the private CA.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCaCrlConfigurationArgs']]] crl_configurations: Specifies the CRL configuration of private CA. The maximum length is `1`.
               The crl_configuration structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCaDistinguishedNameArgs']]] distinguished_names: Specifies the distinguished name of private CA.
               Changing this parameter will create a new resource.
               The distinguished_name structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: The expiration time of the private CA.
        :param pulumi.Input[_builtins.int] free_quota: The free quota of the private certificate.
        :param pulumi.Input[_builtins.str] gen_mode: The generation method of the private CA. Valid values are as follows:
               + **GENERATE**: The certificate is generated through the PCA system.
               + **IMPORT**: The certificate is imported externally.
               + **CSR**: The CSR is imported externally and issued by the internal CA. The private key is not managed in PCA.
        :param pulumi.Input[_builtins.str] issuer_id: Specifies the ID of the parent CA. It's **required** for subordinate CA.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] issuer_name: The name of the parent CA. For a root CA, the value of this parameter is null.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm of private CA.
               Options are: **RSA2048**, **RSA4096**, **EC256**, **EC256**,**SM2**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] key_usages: Specifies the key usage of private CA. It's a list of string.
               Options are: **digitalSignature**, **nonRepudiation**, **keyEncipherment**, **dataEncipherment**, **keyAgreement**,
               **keyCertSign**, **cRLSign**, **encipherOnly**, **decipherOnly**.
               This parameter is [digitalSignature,keyCertSign,cRLSign] by default and only support to customize when you create a
               subordinate CA. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] path_length: Specifies the length of the CA certificate path. The valid value is
               limited between `0` to `6`. If you want to create a root CA, this parameter is **not required** by default and the
               value will be set to `7` in return. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] pending_days: Specifies the pending days when deleting the private CA. It's limited
               between `7` to `30`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCM private CA. If omitted, the
               provider-level region will be used. Changing this will create a new resource. Now only support cn-north-4 (china) and
               ap-southeast-3 (international).
        :param pulumi.Input[_builtins.str] serial_number: The serial number of the private CA.
        :param pulumi.Input[_builtins.str] signature_algorithm: Specifies the signature algorithm of private CA.
               Options are: **SHA256**, **SHA384**, **SHA512**, **SM3**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The current phase of the private CA. Valid values are as follows:
               + **PENDING**: The CA certificate is to be activated.
               + **ACTIVED**: The CA certificate is activated.
               + **DISABLED**: The CA certificate is disabled.
               + **DELETED**: The CA certificate is to be deleted as scheduled.
               + **EXPIRED**: The CA certificate has expired.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs associating with the private CA.
               
               <a name="block-distinguished_name"></a>
               The `distinguished_name` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of validity value. Changing this parameter will create a new
               resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
               support **YEAR** and **MONTH(31 days)**.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateCaValidityArgs']]] validities: Specifies the validity of private CA.
               Changing this parameter will create a new resource.
               The validity structure is documented below.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crl_configurations is not None:
            pulumi.set(__self__, "crl_configurations", crl_configurations)
        if distinguished_names is not None:
            pulumi.set(__self__, "distinguished_names", distinguished_names)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if expired_at is not None:
            pulumi.set(__self__, "expired_at", expired_at)
        if free_quota is not None:
            pulumi.set(__self__, "free_quota", free_quota)
        if gen_mode is not None:
            pulumi.set(__self__, "gen_mode", gen_mode)
        if issuer_id is not None:
            pulumi.set(__self__, "issuer_id", issuer_id)
        if issuer_name is not None:
            pulumi.set(__self__, "issuer_name", issuer_name)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if key_usages is not None:
            pulumi.set(__self__, "key_usages", key_usages)
        if path_length is not None:
            pulumi.set(__self__, "path_length", path_length)
        if pending_days is not None:
            pulumi.set(__self__, "pending_days", pending_days)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation action of the CCM private CA.
        Valid values are **enable** and **disable**.

        > 1. The **enable** operation is allowed only when the CA status is **DISABLED**.
        <br/>2. The **disable** operation is allowed only when the CA status is **ACTIVED** or **EXPIRED**.
        <br/>3. The status of the newly created CA is **ACTIVED**.
        <br/>4. The child CA's certificate status will remain consistent with the parent CA, so enabling or disabling the child
        CA alone may not be effective.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled.
        Valid values are **true** and **false**. Defaults to **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the billing mode of the private CA.
        The valid values are **prePaid** and **postPaid**. Defaults to **postPaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the private CA.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="crlConfigurations")
    def crl_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaCrlConfigurationArgs']]]]:
        """
        Specifies the CRL configuration of private CA. The maximum length is `1`.
        The crl_configuration structure is documented below.
        """
        return pulumi.get(self, "crl_configurations")

    @crl_configurations.setter
    def crl_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaCrlConfigurationArgs']]]]):
        pulumi.set(self, "crl_configurations", value)

    @_builtins.property
    @pulumi.getter(name="distinguishedNames")
    def distinguished_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaDistinguishedNameArgs']]]]:
        """
        Specifies the distinguished name of private CA.
        Changing this parameter will create a new resource.
        The distinguished_name structure is documented below.
        """
        return pulumi.get(self, "distinguished_names")

    @distinguished_names.setter
    def distinguished_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaDistinguishedNameArgs']]]]):
        pulumi.set(self, "distinguished_names", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The expiration time of the private CA.
        """
        return pulumi.get(self, "expired_at")

    @expired_at.setter
    def expired_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expired_at", value)

    @_builtins.property
    @pulumi.getter(name="freeQuota")
    def free_quota(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The free quota of the private certificate.
        """
        return pulumi.get(self, "free_quota")

    @free_quota.setter
    def free_quota(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "free_quota", value)

    @_builtins.property
    @pulumi.getter(name="genMode")
    def gen_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The generation method of the private CA. Valid values are as follows:
        + **GENERATE**: The certificate is generated through the PCA system.
        + **IMPORT**: The certificate is imported externally.
        + **CSR**: The CSR is imported externally and issued by the internal CA. The private key is not managed in PCA.
        """
        return pulumi.get(self, "gen_mode")

    @gen_mode.setter
    def gen_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gen_mode", value)

    @_builtins.property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the parent CA. It's **required** for subordinate CA.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "issuer_id")

    @issuer_id.setter
    def issuer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer_id", value)

    @_builtins.property
    @pulumi.getter(name="issuerName")
    def issuer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the parent CA. For a root CA, the value of this parameter is null.
        """
        return pulumi.get(self, "issuer_name")

    @issuer_name.setter
    def issuer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer_name", value)

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key algorithm of private CA.
        Options are: **RSA2048**, **RSA4096**, **EC256**, **EC256**,**SM2**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key usage of private CA. It's a list of string.
        Options are: **digitalSignature**, **nonRepudiation**, **keyEncipherment**, **dataEncipherment**, **keyAgreement**,
        **keyCertSign**, **cRLSign**, **encipherOnly**, **decipherOnly**.
        This parameter is [digitalSignature,keyCertSign,cRLSign] by default and only support to customize when you create a
        subordinate CA. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_usages")

    @key_usages.setter
    def key_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "key_usages", value)

    @_builtins.property
    @pulumi.getter(name="pathLength")
    def path_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the length of the CA certificate path. The valid value is
        limited between `0` to `6`. If you want to create a root CA, this parameter is **not required** by default and the
        value will be set to `7` in return. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "path_length")

    @path_length.setter
    def path_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "path_length", value)

    @_builtins.property
    @pulumi.getter(name="pendingDays")
    def pending_days(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the pending days when deleting the private CA. It's limited
        between `7` to `30`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "pending_days")

    @pending_days.setter
    def pending_days(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pending_days", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the CCM private CA. If omitted, the
        provider-level region will be used. Changing this will create a new resource. Now only support cn-north-4 (china) and
        ap-southeast-3 (international).
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The serial number of the private CA.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serial_number", value)

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the signature algorithm of private CA.
        Options are: **SHA256**, **SHA384**, **SHA512**, **SM3**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current phase of the private CA. Valid values are as follows:
        + **PENDING**: The CA certificate is to be activated.
        + **ACTIVED**: The CA certificate is activated.
        + **DISABLED**: The CA certificate is disabled.
        + **DELETED**: The CA certificate is to be deleted as scheduled.
        + **EXPIRED**: The CA certificate has expired.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs associating with the private CA.

        <a name="block-distinguished_name"></a>
        The `distinguished_name` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of validity value. Changing this parameter will create a new
        resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
        support **YEAR** and **MONTH(31 days)**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaValidityArgs']]]]:
        """
        Specifies the validity of private CA.
        Changing this parameter will create a new resource.
        The validity structure is documented below.
        """
        return pulumi.get(self, "validities")

    @validities.setter
    def validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateCaValidityArgs']]]]):
        pulumi.set(self, "validities", value)


@pulumi.type_token("huaweicloud:ccm/privateCa:PrivateCa")
class PrivateCa(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 crl_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaCrlConfigurationArgs', 'PrivateCaCrlConfigurationArgsDict']]]]] = None,
                 distinguished_names: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaDistinguishedNameArgs', 'PrivateCaDistinguishedNameArgsDict']]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 path_length: Optional[pulumi.Input[_builtins.int]] = None,
                 pending_days: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 validities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaValidityArgs', 'PrivateCaValidityArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages CCM private CA resource within HuaweiCloud.

        ## Example Usage

        ### create a root private CA

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        obs_bucket_name = config.require_object("obsBucketName")
        test_root = huaweicloud.ccm.PrivateCa("test_root",
            region="cn-north-4",
            type="ROOT",
            key_algorithm="RSA2048",
            signature_algorithm="SHA512",
            pending_days="7",
            distinguished_names=[{
                "common_name": "test-root",
                "country": "CN",
                "state": "GD",
                "locality": "SZ",
                "organization": "huawei",
                "organizational_unit": "cloud",
            }],
            validities=[{
                "type": "DAY",
                "value": 5,
            }],
            crl_configurations=[{
                "obs_bucket_name": obs_bucket_name,
                "valid_days": 7,
                "enabled": True,
            }])
        ```

        ### create a subordinate private CA

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        root_issuer_id = config.require_object("rootIssuerId")
        test_subordinate = huaweicloud.ccm.PrivateCa("test_subordinate",
            region="cn-north-4",
            type="SUBORDINATE",
            key_algorithm="RSA2048",
            issuer_id=root_issuer_id,
            signature_algorithm="SHA512",
            pending_days="7",
            distinguished_names=[{
                "common_name": "test-subordinate",
                "country": "CN",
                "state": "GD",
                "locality": "SZ",
                "organization": "huawei",
                "organizational_unit": "cloud",
            }],
            validities=[{
                "type": "DAY",
                "value": 4,
            }])
        ```

        ## Import

        Private CA can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ccm/privateCa:PrivateCa test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `validity`, `key_usages`, `pending_days`,

        `action`, `auto_renew`.

        It is generally recommended running `pulumi preview` after importing a private CA. You can then decide if changes should

        be applied to it, also you can ignore changes as below.

        hcl

        resource "huaweicloud_ccm_private_ca" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              validity, key_usages, pending_days, action, auto_renew,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation action of the CCM private CA.
               Valid values are **enable** and **disable**.
               
               > 1. The **enable** operation is allowed only when the CA status is **DISABLED**.
               <br/>2. The **disable** operation is allowed only when the CA status is **ACTIVED** or **EXPIRED**.
               <br/>3. The status of the newly created CA is **ACTIVED**.
               <br/>4. The child CA's certificate status will remain consistent with the parent CA, so enabling or disabling the child
               CA alone may not be effective.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled.
               Valid values are **true** and **false**. Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the billing mode of the private CA.
               The valid values are **prePaid** and **postPaid**. Defaults to **postPaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaCrlConfigurationArgs', 'PrivateCaCrlConfigurationArgsDict']]]] crl_configurations: Specifies the CRL configuration of private CA. The maximum length is `1`.
               The crl_configuration structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaDistinguishedNameArgs', 'PrivateCaDistinguishedNameArgsDict']]]] distinguished_names: Specifies the distinguished name of private CA.
               Changing this parameter will create a new resource.
               The distinguished_name structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] issuer_id: Specifies the ID of the parent CA. It's **required** for subordinate CA.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm of private CA.
               Options are: **RSA2048**, **RSA4096**, **EC256**, **EC256**,**SM2**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] key_usages: Specifies the key usage of private CA. It's a list of string.
               Options are: **digitalSignature**, **nonRepudiation**, **keyEncipherment**, **dataEncipherment**, **keyAgreement**,
               **keyCertSign**, **cRLSign**, **encipherOnly**, **decipherOnly**.
               This parameter is [digitalSignature,keyCertSign,cRLSign] by default and only support to customize when you create a
               subordinate CA. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] path_length: Specifies the length of the CA certificate path. The valid value is
               limited between `0` to `6`. If you want to create a root CA, this parameter is **not required** by default and the
               value will be set to `7` in return. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] pending_days: Specifies the pending days when deleting the private CA. It's limited
               between `7` to `30`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCM private CA. If omitted, the
               provider-level region will be used. Changing this will create a new resource. Now only support cn-north-4 (china) and
               ap-southeast-3 (international).
        :param pulumi.Input[_builtins.str] signature_algorithm: Specifies the signature algorithm of private CA.
               Options are: **SHA256**, **SHA384**, **SHA512**, **SM3**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs associating with the private CA.
               
               <a name="block-distinguished_name"></a>
               The `distinguished_name` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of validity value. Changing this parameter will create a new
               resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
               support **YEAR** and **MONTH(31 days)**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaValidityArgs', 'PrivateCaValidityArgsDict']]]] validities: Specifies the validity of private CA.
               Changing this parameter will create a new resource.
               The validity structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrivateCaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages CCM private CA resource within HuaweiCloud.

        ## Example Usage

        ### create a root private CA

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        obs_bucket_name = config.require_object("obsBucketName")
        test_root = huaweicloud.ccm.PrivateCa("test_root",
            region="cn-north-4",
            type="ROOT",
            key_algorithm="RSA2048",
            signature_algorithm="SHA512",
            pending_days="7",
            distinguished_names=[{
                "common_name": "test-root",
                "country": "CN",
                "state": "GD",
                "locality": "SZ",
                "organization": "huawei",
                "organizational_unit": "cloud",
            }],
            validities=[{
                "type": "DAY",
                "value": 5,
            }],
            crl_configurations=[{
                "obs_bucket_name": obs_bucket_name,
                "valid_days": 7,
                "enabled": True,
            }])
        ```

        ### create a subordinate private CA

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        root_issuer_id = config.require_object("rootIssuerId")
        test_subordinate = huaweicloud.ccm.PrivateCa("test_subordinate",
            region="cn-north-4",
            type="SUBORDINATE",
            key_algorithm="RSA2048",
            issuer_id=root_issuer_id,
            signature_algorithm="SHA512",
            pending_days="7",
            distinguished_names=[{
                "common_name": "test-subordinate",
                "country": "CN",
                "state": "GD",
                "locality": "SZ",
                "organization": "huawei",
                "organizational_unit": "cloud",
            }],
            validities=[{
                "type": "DAY",
                "value": 4,
            }])
        ```

        ## Import

        Private CA can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ccm/privateCa:PrivateCa test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `validity`, `key_usages`, `pending_days`,

        `action`, `auto_renew`.

        It is generally recommended running `pulumi preview` after importing a private CA. You can then decide if changes should

        be applied to it, also you can ignore changes as below.

        hcl

        resource "huaweicloud_ccm_private_ca" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              validity, key_usages, pending_days, action, auto_renew,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param PrivateCaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrivateCaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 crl_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaCrlConfigurationArgs', 'PrivateCaCrlConfigurationArgsDict']]]]] = None,
                 distinguished_names: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaDistinguishedNameArgs', 'PrivateCaDistinguishedNameArgsDict']]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 path_length: Optional[pulumi.Input[_builtins.int]] = None,
                 pending_days: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 validities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaValidityArgs', 'PrivateCaValidityArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrivateCaArgs.__new__(PrivateCaArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["auto_renew"] = auto_renew
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["crl_configurations"] = crl_configurations
            if distinguished_names is None and not opts.urn:
                raise TypeError("Missing required property 'distinguished_names'")
            __props__.__dict__["distinguished_names"] = distinguished_names
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["issuer_id"] = issuer_id
            if key_algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'key_algorithm'")
            __props__.__dict__["key_algorithm"] = key_algorithm
            __props__.__dict__["key_usages"] = key_usages
            __props__.__dict__["path_length"] = path_length
            if pending_days is None and not opts.urn:
                raise TypeError("Missing required property 'pending_days'")
            __props__.__dict__["pending_days"] = pending_days
            __props__.__dict__["region"] = region
            if signature_algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'signature_algorithm'")
            __props__.__dict__["signature_algorithm"] = signature_algorithm
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if validities is None and not opts.urn:
                raise TypeError("Missing required property 'validities'")
            __props__.__dict__["validities"] = validities
            __props__.__dict__["created_at"] = None
            __props__.__dict__["expired_at"] = None
            __props__.__dict__["free_quota"] = None
            __props__.__dict__["gen_mode"] = None
            __props__.__dict__["issuer_name"] = None
            __props__.__dict__["serial_number"] = None
            __props__.__dict__["status"] = None
        super(PrivateCa, __self__).__init__(
            'huaweicloud:ccm/privateCa:PrivateCa',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crl_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaCrlConfigurationArgs', 'PrivateCaCrlConfigurationArgsDict']]]]] = None,
            distinguished_names: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaDistinguishedNameArgs', 'PrivateCaDistinguishedNameArgsDict']]]]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            expired_at: Optional[pulumi.Input[_builtins.str]] = None,
            free_quota: Optional[pulumi.Input[_builtins.int]] = None,
            gen_mode: Optional[pulumi.Input[_builtins.str]] = None,
            issuer_id: Optional[pulumi.Input[_builtins.str]] = None,
            issuer_name: Optional[pulumi.Input[_builtins.str]] = None,
            key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            path_length: Optional[pulumi.Input[_builtins.int]] = None,
            pending_days: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            serial_number: Optional[pulumi.Input[_builtins.str]] = None,
            signature_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            validities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaValidityArgs', 'PrivateCaValidityArgsDict']]]]] = None) -> 'PrivateCa':
        """
        Get an existing PrivateCa resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation action of the CCM private CA.
               Valid values are **enable** and **disable**.
               
               > 1. The **enable** operation is allowed only when the CA status is **DISABLED**.
               <br/>2. The **disable** operation is allowed only when the CA status is **ACTIVED** or **EXPIRED**.
               <br/>3. The status of the newly created CA is **ACTIVED**.
               <br/>4. The child CA's certificate status will remain consistent with the parent CA, so enabling or disabling the child
               CA alone may not be effective.
        :param pulumi.Input[_builtins.str] auto_renew: Specifies whether auto-renew is enabled.
               Valid values are **true** and **false**. Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the billing mode of the private CA.
               The valid values are **prePaid** and **postPaid**. Defaults to **postPaid**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the private CA.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaCrlConfigurationArgs', 'PrivateCaCrlConfigurationArgsDict']]]] crl_configurations: Specifies the CRL configuration of private CA. The maximum length is `1`.
               The crl_configuration structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaDistinguishedNameArgs', 'PrivateCaDistinguishedNameArgsDict']]]] distinguished_names: Specifies the distinguished name of private CA.
               Changing this parameter will create a new resource.
               The distinguished_name structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: The expiration time of the private CA.
        :param pulumi.Input[_builtins.int] free_quota: The free quota of the private certificate.
        :param pulumi.Input[_builtins.str] gen_mode: The generation method of the private CA. Valid values are as follows:
               + **GENERATE**: The certificate is generated through the PCA system.
               + **IMPORT**: The certificate is imported externally.
               + **CSR**: The CSR is imported externally and issued by the internal CA. The private key is not managed in PCA.
        :param pulumi.Input[_builtins.str] issuer_id: Specifies the ID of the parent CA. It's **required** for subordinate CA.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] issuer_name: The name of the parent CA. For a root CA, the value of this parameter is null.
        :param pulumi.Input[_builtins.str] key_algorithm: Specifies the key algorithm of private CA.
               Options are: **RSA2048**, **RSA4096**, **EC256**, **EC256**,**SM2**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] key_usages: Specifies the key usage of private CA. It's a list of string.
               Options are: **digitalSignature**, **nonRepudiation**, **keyEncipherment**, **dataEncipherment**, **keyAgreement**,
               **keyCertSign**, **cRLSign**, **encipherOnly**, **decipherOnly**.
               This parameter is [digitalSignature,keyCertSign,cRLSign] by default and only support to customize when you create a
               subordinate CA. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] path_length: Specifies the length of the CA certificate path. The valid value is
               limited between `0` to `6`. If you want to create a root CA, this parameter is **not required** by default and the
               value will be set to `7` in return. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] pending_days: Specifies the pending days when deleting the private CA. It's limited
               between `7` to `30`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the CCM private CA. If omitted, the
               provider-level region will be used. Changing this will create a new resource. Now only support cn-north-4 (china) and
               ap-southeast-3 (international).
        :param pulumi.Input[_builtins.str] serial_number: The serial number of the private CA.
        :param pulumi.Input[_builtins.str] signature_algorithm: Specifies the signature algorithm of private CA.
               Options are: **SHA256**, **SHA384**, **SHA512**, **SM3**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The current phase of the private CA. Valid values are as follows:
               + **PENDING**: The CA certificate is to be activated.
               + **ACTIVED**: The CA certificate is activated.
               + **DISABLED**: The CA certificate is disabled.
               + **DELETED**: The CA certificate is to be deleted as scheduled.
               + **EXPIRED**: The CA certificate has expired.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs associating with the private CA.
               
               <a name="block-distinguished_name"></a>
               The `distinguished_name` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the type of validity value. Changing this parameter will create a new
               resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
               support **YEAR** and **MONTH(31 days)**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PrivateCaValidityArgs', 'PrivateCaValidityArgsDict']]]] validities: Specifies the validity of private CA.
               Changing this parameter will create a new resource.
               The validity structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrivateCaState.__new__(_PrivateCaState)

        __props__.__dict__["action"] = action
        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crl_configurations"] = crl_configurations
        __props__.__dict__["distinguished_names"] = distinguished_names
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["expired_at"] = expired_at
        __props__.__dict__["free_quota"] = free_quota
        __props__.__dict__["gen_mode"] = gen_mode
        __props__.__dict__["issuer_id"] = issuer_id
        __props__.__dict__["issuer_name"] = issuer_name
        __props__.__dict__["key_algorithm"] = key_algorithm
        __props__.__dict__["key_usages"] = key_usages
        __props__.__dict__["path_length"] = path_length
        __props__.__dict__["pending_days"] = pending_days
        __props__.__dict__["region"] = region
        __props__.__dict__["serial_number"] = serial_number
        __props__.__dict__["signature_algorithm"] = signature_algorithm
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["validities"] = validities
        return PrivateCa(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the operation action of the CCM private CA.
        Valid values are **enable** and **disable**.

        > 1. The **enable** operation is allowed only when the CA status is **DISABLED**.
        <br/>2. The **disable** operation is allowed only when the CA status is **ACTIVED** or **EXPIRED**.
        <br/>3. The status of the newly created CA is **ACTIVED**.
        <br/>4. The child CA's certificate status will remain consistent with the parent CA, so enabling or disabling the child
        CA alone may not be effective.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether auto-renew is enabled.
        Valid values are **true** and **false**. Defaults to **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "auto_renew")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the billing mode of the private CA.
        The valid values are **prePaid** and **postPaid**. Defaults to **postPaid**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the private CA.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="crlConfigurations")
    def crl_configurations(self) -> pulumi.Output[Sequence['outputs.PrivateCaCrlConfiguration']]:
        """
        Specifies the CRL configuration of private CA. The maximum length is `1`.
        The crl_configuration structure is documented below.
        """
        return pulumi.get(self, "crl_configurations")

    @_builtins.property
    @pulumi.getter(name="distinguishedNames")
    def distinguished_names(self) -> pulumi.Output[Sequence['outputs.PrivateCaDistinguishedName']]:
        """
        Specifies the distinguished name of private CA.
        Changing this parameter will create a new resource.
        The distinguished_name structure is documented below.
        """
        return pulumi.get(self, "distinguished_names")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> pulumi.Output[_builtins.str]:
        """
        The expiration time of the private CA.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter(name="freeQuota")
    def free_quota(self) -> pulumi.Output[_builtins.int]:
        """
        The free quota of the private certificate.
        """
        return pulumi.get(self, "free_quota")

    @_builtins.property
    @pulumi.getter(name="genMode")
    def gen_mode(self) -> pulumi.Output[_builtins.str]:
        """
        The generation method of the private CA. Valid values are as follows:
        + **GENERATE**: The certificate is generated through the PCA system.
        + **IMPORT**: The certificate is imported externally.
        + **CSR**: The CSR is imported externally and issued by the internal CA. The private key is not managed in PCA.
        """
        return pulumi.get(self, "gen_mode")

    @_builtins.property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the parent CA. It's **required** for subordinate CA.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "issuer_id")

    @_builtins.property
    @pulumi.getter(name="issuerName")
    def issuer_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the parent CA. For a root CA, the value of this parameter is null.
        """
        return pulumi.get(self, "issuer_name")

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key algorithm of private CA.
        Options are: **RSA2048**, **RSA4096**, **EC256**, **EC256**,**SM2**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_algorithm")

    @_builtins.property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the key usage of private CA. It's a list of string.
        Options are: **digitalSignature**, **nonRepudiation**, **keyEncipherment**, **dataEncipherment**, **keyAgreement**,
        **keyCertSign**, **cRLSign**, **encipherOnly**, **decipherOnly**.
        This parameter is [digitalSignature,keyCertSign,cRLSign] by default and only support to customize when you create a
        subordinate CA. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key_usages")

    @_builtins.property
    @pulumi.getter(name="pathLength")
    def path_length(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the length of the CA certificate path. The valid value is
        limited between `0` to `6`. If you want to create a root CA, this parameter is **not required** by default and the
        value will be set to `7` in return. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "path_length")

    @_builtins.property
    @pulumi.getter(name="pendingDays")
    def pending_days(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the pending days when deleting the private CA. It's limited
        between `7` to `30`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "pending_days")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the CCM private CA. If omitted, the
        provider-level region will be used. Changing this will create a new resource. Now only support cn-north-4 (china) and
        ap-southeast-3 (international).
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[_builtins.str]:
        """
        The serial number of the private CA.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the signature algorithm of private CA.
        Options are: **SHA256**, **SHA384**, **SHA512**, **SM3**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current phase of the private CA. Valid values are as follows:
        + **PENDING**: The CA certificate is to be activated.
        + **ACTIVED**: The CA certificate is activated.
        + **DISABLED**: The CA certificate is disabled.
        + **DELETED**: The CA certificate is to be deleted as scheduled.
        + **EXPIRED**: The CA certificate has expired.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs associating with the private CA.

        <a name="block-distinguished_name"></a>
        The `distinguished_name` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of validity value. Changing this parameter will create a new
        resource. Options are: **YEAR**, **MONTH(31 days)**, **DAY**, **HOUR**. If the charging mode is **prePaid**, only
        support **YEAR** and **MONTH(31 days)**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def validities(self) -> pulumi.Output[Sequence['outputs.PrivateCaValidity']]:
        """
        Specifies the validity of private CA.
        Changing this parameter will create a new resource.
        The validity structure is documented below.
        """
        return pulumi.get(self, "validities")

