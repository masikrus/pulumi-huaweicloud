# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CertificateDeployArgs', 'CertificateDeploy']

@pulumi.input_type
class CertificateDeployArgs:
    def __init__(__self__, *,
                 certificate_id: pulumi.Input[_builtins.str],
                 resources: pulumi.Input[Sequence[pulumi.Input['CertificateDeployResourceArgs']]],
                 service_name: pulumi.Input[_builtins.str],
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CertificateDeploy resource.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the CCM SSL certificate ID to be deployed.
               Changing this parameter will create a new resource.
               
               > Certificates encrypted with SM series cryptographic algorithms cannot be deployed to other cloud services.
        :param pulumi.Input[Sequence[pulumi.Input['CertificateDeployResourceArgs']]] resources: Specifies the list of resources to be deployed.
               The resources structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service_name: Specifies the target service name to which the certificate is pushed.
               Valid values are **CDN**, **WAF**, and **ELB**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name where the deployed resources are located.
               This field is required only when `service_name` is set to **WAF** or **ELB**.
               
               Changing this parameter will create a new resource.
               
               <a name="resources_struct"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "service_name", service_name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CCM SSL certificate ID to be deployed.
        Changing this parameter will create a new resource.

        > Certificates encrypted with SM series cryptographic algorithms cannot be deployed to other cloud services.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Input[Sequence[pulumi.Input['CertificateDeployResourceArgs']]]:
        """
        Specifies the list of resources to be deployed.
        The resources structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input[Sequence[pulumi.Input['CertificateDeployResourceArgs']]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the target service name to which the certificate is pushed.
        Valid values are **CDN**, **WAF**, and **ELB**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_name", value)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project name where the deployed resources are located.
        This field is required only when `service_name` is set to **WAF** or **ELB**.

        Changing this parameter will create a new resource.

        <a name="resources_struct"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CertificateDeployState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateDeployResourceArgs']]]] = None,
                 service_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CertificateDeploy resources.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the CCM SSL certificate ID to be deployed.
               Changing this parameter will create a new resource.
               
               > Certificates encrypted with SM series cryptographic algorithms cannot be deployed to other cloud services.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name where the deployed resources are located.
               This field is required only when `service_name` is set to **WAF** or **ELB**.
               
               Changing this parameter will create a new resource.
               
               <a name="resources_struct"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input['CertificateDeployResourceArgs']]] resources: Specifies the list of resources to be deployed.
               The resources structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service_name: Specifies the target service name to which the certificate is pushed.
               Valid values are **CDN**, **WAF**, and **ELB**.
               
               Changing this parameter will create a new resource.
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CCM SSL certificate ID to be deployed.
        Changing this parameter will create a new resource.

        > Certificates encrypted with SM series cryptographic algorithms cannot be deployed to other cloud services.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project name where the deployed resources are located.
        This field is required only when `service_name` is set to **WAF** or **ELB**.

        Changing this parameter will create a new resource.

        <a name="resources_struct"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CertificateDeployResourceArgs']]]]:
        """
        Specifies the list of resources to be deployed.
        The resources structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateDeployResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target service name to which the certificate is pushed.
        Valid values are **CDN**, **WAF**, and **ELB**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_name", value)


@pulumi.type_token("huaweicloud:ccm/certificateDeploy:CertificateDeploy")
class CertificateDeploy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CertificateDeployResourceArgs', 'CertificateDeployResourceArgsDict']]]]] = None,
                 service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CCM SSL certificate deploy resource within HuaweiCloud.

        > 1. Currently, this resource only supports deploying SSL certificates to **CDN**, **WAF** or **ELB**.
        >    <br/>2. Each successful deployment of a certificate to a service resource incurs a cost.
        >    <br/>3. The current resource is a one-time resource, and destroying this resource will not affect the result.

        ## Example Usage

        ### Deploy the certificate to CDN

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        domain_name = config.require_object("domainName")
        test = huaweicloud.ccm.CertificateDeploy("test",
            certificate_id=certificate_id,
            service_name="CDN",
            resources=[{
                "domain_name": domain_name,
            }])
        ```

        ### Deploy the certificate to WAF

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        project_name = config.require_object("projectName")
        waf_certificate_id = config.require_object("wafCertificateId")
        waf_type = config.require_object("wafType")
        waf_eps_id = config.require_object("wafEpsId")
        test = huaweicloud.ccm.CertificateDeploy("test",
            certificate_id=certificate_id,
            project_name=project_name,
            service_name="WAF",
            resources=[{
                "id": waf_certificate_id,
                "type": waf_type,
                "enterprise_project_id": waf_eps_id,
            }])
        ```

        ### Deploy the certificate to ELB

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        project_name = config.require_object("projectName")
        elb_certificate_id = config.require_object("elbCertificateId")
        test = huaweicloud.ccm.CertificateDeploy("test",
            certificate_id=certificate_id,
            project_name=project_name,
            service_name="ELB",
            resources=[{
                "id": elb_certificate_id,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the CCM SSL certificate ID to be deployed.
               Changing this parameter will create a new resource.
               
               > Certificates encrypted with SM series cryptographic algorithms cannot be deployed to other cloud services.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name where the deployed resources are located.
               This field is required only when `service_name` is set to **WAF** or **ELB**.
               
               Changing this parameter will create a new resource.
               
               <a name="resources_struct"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CertificateDeployResourceArgs', 'CertificateDeployResourceArgsDict']]]] resources: Specifies the list of resources to be deployed.
               The resources structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service_name: Specifies the target service name to which the certificate is pushed.
               Valid values are **CDN**, **WAF**, and **ELB**.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateDeployArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CCM SSL certificate deploy resource within HuaweiCloud.

        > 1. Currently, this resource only supports deploying SSL certificates to **CDN**, **WAF** or **ELB**.
        >    <br/>2. Each successful deployment of a certificate to a service resource incurs a cost.
        >    <br/>3. The current resource is a one-time resource, and destroying this resource will not affect the result.

        ## Example Usage

        ### Deploy the certificate to CDN

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        domain_name = config.require_object("domainName")
        test = huaweicloud.ccm.CertificateDeploy("test",
            certificate_id=certificate_id,
            service_name="CDN",
            resources=[{
                "domain_name": domain_name,
            }])
        ```

        ### Deploy the certificate to WAF

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        project_name = config.require_object("projectName")
        waf_certificate_id = config.require_object("wafCertificateId")
        waf_type = config.require_object("wafType")
        waf_eps_id = config.require_object("wafEpsId")
        test = huaweicloud.ccm.CertificateDeploy("test",
            certificate_id=certificate_id,
            project_name=project_name,
            service_name="WAF",
            resources=[{
                "id": waf_certificate_id,
                "type": waf_type,
                "enterprise_project_id": waf_eps_id,
            }])
        ```

        ### Deploy the certificate to ELB

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        project_name = config.require_object("projectName")
        elb_certificate_id = config.require_object("elbCertificateId")
        test = huaweicloud.ccm.CertificateDeploy("test",
            certificate_id=certificate_id,
            project_name=project_name,
            service_name="ELB",
            resources=[{
                "id": elb_certificate_id,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param CertificateDeployArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateDeployArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CertificateDeployResourceArgs', 'CertificateDeployResourceArgsDict']]]]] = None,
                 service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificateDeployArgs.__new__(CertificateDeployArgs)

            if certificate_id is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_id'")
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["region"] = region
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__.__dict__["resources"] = resources
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
        super(CertificateDeploy, __self__).__init__(
            'huaweicloud:ccm/certificateDeploy:CertificateDeploy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
            project_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CertificateDeployResourceArgs', 'CertificateDeployResourceArgsDict']]]]] = None,
            service_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'CertificateDeploy':
        """
        Get an existing CertificateDeploy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the CCM SSL certificate ID to be deployed.
               Changing this parameter will create a new resource.
               
               > Certificates encrypted with SM series cryptographic algorithms cannot be deployed to other cloud services.
        :param pulumi.Input[_builtins.str] project_name: Specifies the project name where the deployed resources are located.
               This field is required only when `service_name` is set to **WAF** or **ELB**.
               
               Changing this parameter will create a new resource.
               
               <a name="resources_struct"></a>
               The `resources` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CertificateDeployResourceArgs', 'CertificateDeployResourceArgsDict']]]] resources: Specifies the list of resources to be deployed.
               The resources structure is documented below.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] service_name: Specifies the target service name to which the certificate is pushed.
               Valid values are **CDN**, **WAF**, and **ELB**.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CertificateDeployState.__new__(_CertificateDeployState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["region"] = region
        __props__.__dict__["resources"] = resources
        __props__.__dict__["service_name"] = service_name
        return CertificateDeploy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CCM SSL certificate ID to be deployed.
        Changing this parameter will create a new resource.

        > Certificates encrypted with SM series cryptographic algorithms cannot be deployed to other cloud services.
        """
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the project name where the deployed resources are located.
        This field is required only when `service_name` is set to **WAF** or **ELB**.

        Changing this parameter will create a new resource.

        <a name="resources_struct"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.CertificateDeployResource']]:
        """
        Specifies the list of resources to be deployed.
        The resources structure is documented below.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the target service name to which the certificate is pushed.
        Valid values are **CDN**, **WAF**, and **ELB**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "service_name")

