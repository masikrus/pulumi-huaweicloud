# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DomainAssociateCertificateArgs', 'DomainAssociateCertificate']

@pulumi.input_type
class DomainAssociateCertificateArgs:
    def __init__(__self__, *,
                 certificate_id: pulumi.Input[_builtins.str],
                 cloud_host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 premium_host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DomainAssociateCertificate resource.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the ID of the certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cloud_host_ids: Specifies the ID lsit of the domain in cloud mode.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] premium_host_ids: Specifies the ID list of the domain in dedicated mode.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        if cloud_host_ids is not None:
            pulumi.set(__self__, "cloud_host_ids", cloud_host_ids)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if premium_host_ids is not None:
            pulumi.set(__self__, "premium_host_ids", premium_host_ids)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the certificate.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="cloudHostIds")
    def cloud_host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID lsit of the domain in cloud mode.
        """
        return pulumi.get(self, "cloud_host_ids")

    @cloud_host_ids.setter
    def cloud_host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cloud_host_ids", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="premiumHostIds")
    def premium_host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID list of the domain in dedicated mode.
        """
        return pulumi.get(self, "premium_host_ids")

    @premium_host_ids.setter
    def premium_host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "premium_host_ids", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DomainAssociateCertificateState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 premium_host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DomainAssociateCertificate resources.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the ID of the certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cloud_host_ids: Specifies the ID lsit of the domain in cloud mode.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] premium_host_ids: Specifies the ID list of the domain in dedicated mode.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if cloud_host_ids is not None:
            pulumi.set(__self__, "cloud_host_ids", cloud_host_ids)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if premium_host_ids is not None:
            pulumi.set(__self__, "premium_host_ids", premium_host_ids)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the certificate.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="cloudHostIds")
    def cloud_host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID lsit of the domain in cloud mode.
        """
        return pulumi.get(self, "cloud_host_ids")

    @cloud_host_ids.setter
    def cloud_host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cloud_host_ids", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="premiumHostIds")
    def premium_host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID list of the domain in dedicated mode.
        """
        return pulumi.get(self, "premium_host_ids")

    @premium_host_ids.setter
    def premium_host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "premium_host_ids", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Waf/domainAssociateCertificate:DomainAssociateCertificate")
class DomainAssociateCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 premium_host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a resource to associate the certificate to the domain within HuaweiCloud.

        > All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be used.

        > 1. The current resource is a one-time resource, and destroying this resource will not change the current status.
        >    <br/>2. If you use this resource associate a certificate to a domain, the opration may trigger changes to the existing
        >    resource: `Waf.Domain` or `Waf.DedicatedDomain`.
        >    <br/>3. The resource only can used when the domain `client_protocol` is set to **HTTPS**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        cloud_host_ids = config.require_object("cloudHostIds")
        test = huaweicloud.waf.DomainAssociateCertificate("test",
            certificate_id=certificate_id,
            cloud_host_ids=cloud_host_ids)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the ID of the certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cloud_host_ids: Specifies the ID lsit of the domain in cloud mode.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] premium_host_ids: Specifies the ID list of the domain in dedicated mode.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainAssociateCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a resource to associate the certificate to the domain within HuaweiCloud.

        > All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be used.

        > 1. The current resource is a one-time resource, and destroying this resource will not change the current status.
        >    <br/>2. If you use this resource associate a certificate to a domain, the opration may trigger changes to the existing
        >    resource: `Waf.Domain` or `Waf.DedicatedDomain`.
        >    <br/>3. The resource only can used when the domain `client_protocol` is set to **HTTPS**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        certificate_id = config.require_object("certificateId")
        cloud_host_ids = config.require_object("cloudHostIds")
        test = huaweicloud.waf.DomainAssociateCertificate("test",
            certificate_id=certificate_id,
            cloud_host_ids=cloud_host_ids)
        ```

        :param str resource_name: The name of the resource.
        :param DomainAssociateCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainAssociateCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 premium_host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainAssociateCertificateArgs.__new__(DomainAssociateCertificateArgs)

            if certificate_id is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_id'")
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["cloud_host_ids"] = cloud_host_ids
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["premium_host_ids"] = premium_host_ids
            __props__.__dict__["region"] = region
        super(DomainAssociateCertificate, __self__).__init__(
            'huaweicloud:Waf/domainAssociateCertificate:DomainAssociateCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
            cloud_host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            premium_host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'DomainAssociateCertificate':
        """
        Get an existing DomainAssociateCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate_id: Specifies the ID of the certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cloud_host_ids: Specifies the ID lsit of the domain in cloud mode.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] premium_host_ids: Specifies the ID list of the domain in dedicated mode.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainAssociateCertificateState.__new__(_DomainAssociateCertificateState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["cloud_host_ids"] = cloud_host_ids
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["premium_host_ids"] = premium_host_ids
        __props__.__dict__["region"] = region
        return DomainAssociateCertificate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the certificate.
        """
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="cloudHostIds")
    def cloud_host_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the ID lsit of the domain in cloud mode.
        """
        return pulumi.get(self, "cloud_host_ids")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="premiumHostIds")
    def premium_host_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the ID list of the domain in dedicated mode.
        """
        return pulumi.get(self, "premium_host_ids")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

