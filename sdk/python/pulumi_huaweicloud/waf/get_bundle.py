# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetBundleResult',
    'AwaitableGetBundleResult',
    'get_bundle',
    'get_bundle_output',
]

@pulumi.output_type
class GetBundleResult:
    """
    A collection of values returned by getBundle.
    """
    def __init__(__self__, enterprise_project_id=None, feature=None, host=None, id=None, name=None, options=None, premium_host=None, premium_name=None, premium_type=None, region=None, rule=None, type=None, upgrade=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if feature and not isinstance(feature, dict):
            raise TypeError("Expected argument 'feature' to be a dict")
        pulumi.set(__self__, "feature", feature)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if options and not isinstance(options, dict):
            raise TypeError("Expected argument 'options' to be a dict")
        pulumi.set(__self__, "options", options)
        if premium_host and not isinstance(premium_host, str):
            raise TypeError("Expected argument 'premium_host' to be a str")
        pulumi.set(__self__, "premium_host", premium_host)
        if premium_name and not isinstance(premium_name, str):
            raise TypeError("Expected argument 'premium_name' to be a str")
        pulumi.set(__self__, "premium_name", premium_name)
        if premium_type and not isinstance(premium_type, int):
            raise TypeError("Expected argument 'premium_type' to be a int")
        pulumi.set(__self__, "premium_type", premium_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule and not isinstance(rule, dict):
            raise TypeError("Expected argument 'rule' to be a dict")
        pulumi.set(__self__, "rule", rule)
        if type and not isinstance(type, int):
            raise TypeError("Expected argument 'type' to be a int")
        pulumi.set(__self__, "type", type)
        if upgrade and not isinstance(upgrade, dict):
            raise TypeError("Expected argument 'upgrade' to be a dict")
        pulumi.set(__self__, "upgrade", upgrade)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def feature(self) -> Mapping[str, _builtins.bool]:
        """
        The features information.
        """
        return pulumi.get(self, "feature")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The cloud mode supports domain quota information, in JSON format.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The cloud mode bundle name.
        The valid values are as follows:
        + **None**: Indicates None.
        + **BASIC**: Indicates cloud mode getting started edition (yearly/monthly).
        + **Professional**: Indicates cloud mode standard edition (yearly/monthly).
        + **Enterprise**: Indicates cloud mode professional edition (yearly/monthly).
        + **Ultimate**: Indicates cloud mode enterprise edition (yearly/monthly).
        + **cloud.waf.postpaid**: Indicates cloud mode (pay-per-use).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def options(self) -> Mapping[str, _builtins.bool]:
        """
        The policy related information.
        """
        return pulumi.get(self, "options")

    @_builtins.property
    @pulumi.getter(name="premiumHost")
    def premium_host(self) -> _builtins.str:
        """
        The dedicated mode supports domain quota information, in JSON format.
        """
        return pulumi.get(self, "premium_host")

    @_builtins.property
    @pulumi.getter(name="premiumName")
    def premium_name(self) -> _builtins.str:
        """
        The dedicated mode bundle name.
        The valid values are as follows:
        + **None**: Indicates None.
        + **Instance.professional**: Indicates dedicated mode version specification is WI-100.
        + **Instance.enterprise**: Indicates dedicated mode version specification is WI-500.
        """
        return pulumi.get(self, "premium_name")

    @_builtins.property
    @pulumi.getter(name="premiumType")
    def premium_type(self) -> _builtins.int:
        """
        The dedicated mode bundle type.
        The valid values are as follows:
        + `-2`: Indicates frozen.
        + `-1`: Indicates None.
        """
        return pulumi.get(self, "premium_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def rule(self) -> Mapping[str, _builtins.int]:
        """
        The rule quota related information.
        """
        return pulumi.get(self, "rule")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.int:
        """
        The cloud mode bundle type.
        The valid values are as follows:
        + `-2`: Indicates frozen.
        + `-1`: Indicates None.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def upgrade(self) -> Mapping[str, _builtins.int]:
        """
        The different versions supports rule information.
        """
        return pulumi.get(self, "upgrade")


class AwaitableGetBundleResult(GetBundleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBundleResult(
            enterprise_project_id=self.enterprise_project_id,
            feature=self.feature,
            host=self.host,
            id=self.id,
            name=self.name,
            options=self.options,
            premium_host=self.premium_host,
            premium_name=self.premium_name,
            premium_type=self.premium_type,
            region=self.region,
            rule=self.rule,
            type=self.type,
            upgrade=self.upgrade)


def get_bundle(enterprise_project_id: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBundleResult:
    """
    Use this data source to query user bundle information.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Waf.get_bundle()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Waf/getBundle:getBundle', __args__, opts=opts, typ=GetBundleResult).value

    return AwaitableGetBundleResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        feature=pulumi.get(__ret__, 'feature'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        options=pulumi.get(__ret__, 'options'),
        premium_host=pulumi.get(__ret__, 'premium_host'),
        premium_name=pulumi.get(__ret__, 'premium_name'),
        premium_type=pulumi.get(__ret__, 'premium_type'),
        region=pulumi.get(__ret__, 'region'),
        rule=pulumi.get(__ret__, 'rule'),
        type=pulumi.get(__ret__, 'type'),
        upgrade=pulumi.get(__ret__, 'upgrade'))
def get_bundle_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBundleResult]:
    """
    Use this data source to query user bundle information.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Waf.get_bundle()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Waf/getBundle:getBundle', __args__, opts=opts, typ=GetBundleResult)
    return __ret__.apply(lambda __response__: GetBundleResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        feature=pulumi.get(__response__, 'feature'),
        host=pulumi.get(__response__, 'host'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        options=pulumi.get(__response__, 'options'),
        premium_host=pulumi.get(__response__, 'premium_host'),
        premium_name=pulumi.get(__response__, 'premium_name'),
        premium_type=pulumi.get(__response__, 'premium_type'),
        region=pulumi.get(__response__, 'region'),
        rule=pulumi.get(__response__, 'rule'),
        type=pulumi.get(__response__, 'type'),
        upgrade=pulumi.get(__response__, 'upgrade')))
