# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDedicatedDomainsResult',
    'AwaitableGetDedicatedDomainsResult',
    'get_dedicated_domains',
    'get_dedicated_domains_output',
]

@pulumi.output_type
class GetDedicatedDomainsResult:
    """
    A collection of values returned by getDedicatedDomains.
    """
    def __init__(__self__, domain=None, domains=None, enterprise_project_id=None, id=None, policy_name=None, protect_status=None, region=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if domains and not isinstance(domains, list):
            raise TypeError("Expected argument 'domains' to be a list")
        pulumi.set(__self__, "domains", domains)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_name and not isinstance(policy_name, str):
            raise TypeError("Expected argument 'policy_name' to be a str")
        pulumi.set(__self__, "policy_name", policy_name)
        if protect_status and not isinstance(protect_status, str):
            raise TypeError("Expected argument 'protect_status' to be a str")
        pulumi.set(__self__, "protect_status", protect_status)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[_builtins.str]:
        """
        The protected domain name or IP address (port allowed).
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.GetDedicatedDomainsDomainResult']:
        """
        A list of WAF dedicated domains.
        """
        return pulumi.get(self, "domains")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> Optional[_builtins.str]:
        """
        The protection status of domain, `0`: suspended, `1`: enabled.
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDedicatedDomainsResult(GetDedicatedDomainsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDedicatedDomainsResult(
            domain=self.domain,
            domains=self.domains,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            policy_name=self.policy_name,
            protect_status=self.protect_status,
            region=self.region)


def get_dedicated_domains(domain: Optional[_builtins.str] = None,
                          enterprise_project_id: Optional[_builtins.str] = None,
                          policy_name: Optional[_builtins.str] = None,
                          protect_status: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDedicatedDomainsResult:
    """
    Use this data source to get a list of WAF dedicated domains.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain = config.require_object("domain")
    enterprise_project_id = config.require_object("enterpriseProjectId")
    test = huaweicloud.Waf.get_dedicated_domains(domain=domain,
        enterprise_project_id=enterprise_project_id)
    ```


    :param _builtins.str domain: Specifies the protected domain name or IP address (port allowed).
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           For enterprise users, if omitted, default enterprise project will be used.
    :param _builtins.str policy_name: Specifies the policy name associated with the domain.
    :param _builtins.str protect_status: Specifies the protection status of domain. Valid values are:
    :param _builtins.str region: Specifies the region in which to query the WAF dedicated domains.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['policyName'] = policy_name
    __args__['protectStatus'] = protect_status
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Waf/getDedicatedDomains:getDedicatedDomains', __args__, opts=opts, typ=GetDedicatedDomainsResult).value

    return AwaitableGetDedicatedDomainsResult(
        domain=pulumi.get(__ret__, 'domain'),
        domains=pulumi.get(__ret__, 'domains'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        policy_name=pulumi.get(__ret__, 'policy_name'),
        protect_status=pulumi.get(__ret__, 'protect_status'),
        region=pulumi.get(__ret__, 'region'))
def get_dedicated_domains_output(domain: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 policy_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 protect_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDedicatedDomainsResult]:
    """
    Use this data source to get a list of WAF dedicated domains.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain = config.require_object("domain")
    enterprise_project_id = config.require_object("enterpriseProjectId")
    test = huaweicloud.Waf.get_dedicated_domains(domain=domain,
        enterprise_project_id=enterprise_project_id)
    ```


    :param _builtins.str domain: Specifies the protected domain name or IP address (port allowed).
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           For enterprise users, if omitted, default enterprise project will be used.
    :param _builtins.str policy_name: Specifies the policy name associated with the domain.
    :param _builtins.str protect_status: Specifies the protection status of domain. Valid values are:
    :param _builtins.str region: Specifies the region in which to query the WAF dedicated domains.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['policyName'] = policy_name
    __args__['protectStatus'] = protect_status
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Waf/getDedicatedDomains:getDedicatedDomains', __args__, opts=opts, typ=GetDedicatedDomainsResult)
    return __ret__.apply(lambda __response__: GetDedicatedDomainsResult(
        domain=pulumi.get(__response__, 'domain'),
        domains=pulumi.get(__response__, 'domains'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        policy_name=pulumi.get(__response__, 'policy_name'),
        protect_status=pulumi.get(__response__, 'protect_status'),
        region=pulumi.get(__response__, 'region')))
