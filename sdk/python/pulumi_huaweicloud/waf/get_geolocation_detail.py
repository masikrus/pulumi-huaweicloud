# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetGeolocationDetailResult',
    'AwaitableGetGeolocationDetailResult',
    'get_geolocation_detail',
    'get_geolocation_detail_output',
]

@pulumi.output_type
class GetGeolocationDetailResult:
    """
    A collection of values returned by getGeolocationDetail.
    """
    def __init__(__self__, continent=None, geomap=None, id=None, lang=None, locale=None, region=None):
        if continent and not isinstance(continent, str):
            raise TypeError("Expected argument 'continent' to be a str")
        pulumi.set(__self__, "continent", continent)
        if geomap and not isinstance(geomap, str):
            raise TypeError("Expected argument 'geomap' to be a str")
        pulumi.set(__self__, "geomap", geomap)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lang and not isinstance(lang, str):
            raise TypeError("Expected argument 'lang' to be a str")
        pulumi.set(__self__, "lang", lang)
        if locale and not isinstance(locale, dict):
            raise TypeError("Expected argument 'locale' to be a dict")
        pulumi.set(__self__, "locale", locale)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def continent(self) -> _builtins.str:
        """
        The distribution information of country names on each continent, in JSON format.
        """
        return pulumi.get(self, "continent")

    @_builtins.property
    @pulumi.getter
    def geomap(self) -> _builtins.str:
        """
        The key value represents the abbreviations of each country (except for AB and AB2, where AB indicates
        overseas and Hong Kong, Macao and Taiwan, and AB2 indicates overseas). When the key is CN, the array content inside
        is the abbreviation of each province.
        The `geomap` value in JSON format.
        """
        return pulumi.get(self, "geomap")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lang(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "lang")

    @_builtins.property
    @pulumi.getter
    def locale(self) -> Mapping[str, _builtins.str]:
        """
        The display names of the corresponding languages for the values in `geomap`.
        """
        return pulumi.get(self, "locale")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetGeolocationDetailResult(GetGeolocationDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGeolocationDetailResult(
            continent=self.continent,
            geomap=self.geomap,
            id=self.id,
            lang=self.lang,
            locale=self.locale,
            region=self.region)


def get_geolocation_detail(lang: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGeolocationDetailResult:
    """
    Use this data source to query geolocation options detail.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Waf.get_geolocation_detail()
    ```


    :param _builtins.str lang: Specifies the language type.
           The value can be **cn** or **en**. Defaults to **cn**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['lang'] = lang
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Waf/getGeolocationDetail:getGeolocationDetail', __args__, opts=opts, typ=GetGeolocationDetailResult).value

    return AwaitableGetGeolocationDetailResult(
        continent=pulumi.get(__ret__, 'continent'),
        geomap=pulumi.get(__ret__, 'geomap'),
        id=pulumi.get(__ret__, 'id'),
        lang=pulumi.get(__ret__, 'lang'),
        locale=pulumi.get(__ret__, 'locale'),
        region=pulumi.get(__ret__, 'region'))
def get_geolocation_detail_output(lang: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGeolocationDetailResult]:
    """
    Use this data source to query geolocation options detail.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Waf.get_geolocation_detail()
    ```


    :param _builtins.str lang: Specifies the language type.
           The value can be **cn** or **en**. Defaults to **cn**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['lang'] = lang
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Waf/getGeolocationDetail:getGeolocationDetail', __args__, opts=opts, typ=GetGeolocationDetailResult)
    return __ret__.apply(lambda __response__: GetGeolocationDetailResult(
        continent=pulumi.get(__response__, 'continent'),
        geomap=pulumi.get(__response__, 'geomap'),
        id=pulumi.get(__response__, 'id'),
        lang=pulumi.get(__response__, 'lang'),
        locale=pulumi.get(__response__, 'locale'),
        region=pulumi.get(__response__, 'region')))
