# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetConfigResult',
    'AwaitableGetConfigResult',
    'get_config',
    'get_config_output',
]

@pulumi.output_type
class GetConfigResult:
    """
    A collection of values returned by getConfig.
    """
    def __init__(__self__, advanced_ignore=None, alert=None, cc_enhance=None, check_all_headers_enable=None, cname_switch=None, custom=None, custom_block=None, deep_decode_enable=None, elb_mode=None, eps=None, event_lts=None, geoip_enable=None, http2_enable=None, id=None, ip_group=None, ipv6=None, ipv6_protection_enable=None, js_crawler_enable=None, load_balance_enable=None, multi_dns=None, overview_bandwidth=None, policy_sharing_enable=None, proxy_use_oldcname=None, region=None, robot_action_enable=None, search_ip=None, timeout_config_enable=None, tls=None):
        if advanced_ignore and not isinstance(advanced_ignore, bool):
            raise TypeError("Expected argument 'advanced_ignore' to be a bool")
        pulumi.set(__self__, "advanced_ignore", advanced_ignore)
        if alert and not isinstance(alert, bool):
            raise TypeError("Expected argument 'alert' to be a bool")
        pulumi.set(__self__, "alert", alert)
        if cc_enhance and not isinstance(cc_enhance, bool):
            raise TypeError("Expected argument 'cc_enhance' to be a bool")
        pulumi.set(__self__, "cc_enhance", cc_enhance)
        if check_all_headers_enable and not isinstance(check_all_headers_enable, bool):
            raise TypeError("Expected argument 'check_all_headers_enable' to be a bool")
        pulumi.set(__self__, "check_all_headers_enable", check_all_headers_enable)
        if cname_switch and not isinstance(cname_switch, bool):
            raise TypeError("Expected argument 'cname_switch' to be a bool")
        pulumi.set(__self__, "cname_switch", cname_switch)
        if custom and not isinstance(custom, bool):
            raise TypeError("Expected argument 'custom' to be a bool")
        pulumi.set(__self__, "custom", custom)
        if custom_block and not isinstance(custom_block, bool):
            raise TypeError("Expected argument 'custom_block' to be a bool")
        pulumi.set(__self__, "custom_block", custom_block)
        if deep_decode_enable and not isinstance(deep_decode_enable, bool):
            raise TypeError("Expected argument 'deep_decode_enable' to be a bool")
        pulumi.set(__self__, "deep_decode_enable", deep_decode_enable)
        if elb_mode and not isinstance(elb_mode, bool):
            raise TypeError("Expected argument 'elb_mode' to be a bool")
        pulumi.set(__self__, "elb_mode", elb_mode)
        if eps and not isinstance(eps, bool):
            raise TypeError("Expected argument 'eps' to be a bool")
        pulumi.set(__self__, "eps", eps)
        if event_lts and not isinstance(event_lts, bool):
            raise TypeError("Expected argument 'event_lts' to be a bool")
        pulumi.set(__self__, "event_lts", event_lts)
        if geoip_enable and not isinstance(geoip_enable, bool):
            raise TypeError("Expected argument 'geoip_enable' to be a bool")
        pulumi.set(__self__, "geoip_enable", geoip_enable)
        if http2_enable and not isinstance(http2_enable, bool):
            raise TypeError("Expected argument 'http2_enable' to be a bool")
        pulumi.set(__self__, "http2_enable", http2_enable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_group and not isinstance(ip_group, bool):
            raise TypeError("Expected argument 'ip_group' to be a bool")
        pulumi.set(__self__, "ip_group", ip_group)
        if ipv6 and not isinstance(ipv6, bool):
            raise TypeError("Expected argument 'ipv6' to be a bool")
        pulumi.set(__self__, "ipv6", ipv6)
        if ipv6_protection_enable and not isinstance(ipv6_protection_enable, bool):
            raise TypeError("Expected argument 'ipv6_protection_enable' to be a bool")
        pulumi.set(__self__, "ipv6_protection_enable", ipv6_protection_enable)
        if js_crawler_enable and not isinstance(js_crawler_enable, bool):
            raise TypeError("Expected argument 'js_crawler_enable' to be a bool")
        pulumi.set(__self__, "js_crawler_enable", js_crawler_enable)
        if load_balance_enable and not isinstance(load_balance_enable, bool):
            raise TypeError("Expected argument 'load_balance_enable' to be a bool")
        pulumi.set(__self__, "load_balance_enable", load_balance_enable)
        if multi_dns and not isinstance(multi_dns, bool):
            raise TypeError("Expected argument 'multi_dns' to be a bool")
        pulumi.set(__self__, "multi_dns", multi_dns)
        if overview_bandwidth and not isinstance(overview_bandwidth, bool):
            raise TypeError("Expected argument 'overview_bandwidth' to be a bool")
        pulumi.set(__self__, "overview_bandwidth", overview_bandwidth)
        if policy_sharing_enable and not isinstance(policy_sharing_enable, bool):
            raise TypeError("Expected argument 'policy_sharing_enable' to be a bool")
        pulumi.set(__self__, "policy_sharing_enable", policy_sharing_enable)
        if proxy_use_oldcname and not isinstance(proxy_use_oldcname, bool):
            raise TypeError("Expected argument 'proxy_use_oldcname' to be a bool")
        pulumi.set(__self__, "proxy_use_oldcname", proxy_use_oldcname)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if robot_action_enable and not isinstance(robot_action_enable, bool):
            raise TypeError("Expected argument 'robot_action_enable' to be a bool")
        pulumi.set(__self__, "robot_action_enable", robot_action_enable)
        if search_ip and not isinstance(search_ip, bool):
            raise TypeError("Expected argument 'search_ip' to be a bool")
        pulumi.set(__self__, "search_ip", search_ip)
        if timeout_config_enable and not isinstance(timeout_config_enable, bool):
            raise TypeError("Expected argument 'timeout_config_enable' to be a bool")
        pulumi.set(__self__, "timeout_config_enable", timeout_config_enable)
        if tls and not isinstance(tls, bool):
            raise TypeError("Expected argument 'tls' to be a bool")
        pulumi.set(__self__, "tls", tls)

    @_builtins.property
    @pulumi.getter(name="advancedIgnore")
    def advanced_ignore(self) -> _builtins.bool:
        """
        Whether false alarm masking is supported.
        The value can be **true** or **false**.
        + **true**: The false alarm masking is supported.
        + **false**: The false alarm masking is not supported.
        """
        return pulumi.get(self, "advanced_ignore")

    @_builtins.property
    @pulumi.getter
    def alert(self) -> _builtins.bool:
        """
        Whether alarm reporting is supported.
        The value can be **true** or **false**.
        + **true**: Alarm reporting is supported.
        + **false**: Alarm reporting is not supported.
        """
        return pulumi.get(self, "alert")

    @_builtins.property
    @pulumi.getter(name="ccEnhance")
    def cc_enhance(self) -> _builtins.bool:
        """
        Whether CC attack protection is supported.
        The value can be **true** or **false**.
        + **true**: CC attack protection is supported.
        + **false**: CC attack protection is not supported.
        """
        return pulumi.get(self, "cc_enhance")

    @_builtins.property
    @pulumi.getter(name="checkAllHeadersEnable")
    def check_all_headers_enable(self) -> _builtins.bool:
        """
        Whether all header inspection is supported.
        The value can be **true** or **false**.
        + **true**: The all eader inspection is supported.
        + **false**: The all header inspection is not supported.
        """
        return pulumi.get(self, "check_all_headers_enable")

    @_builtins.property
    @pulumi.getter(name="cnameSwitch")
    def cname_switch(self) -> _builtins.bool:
        """
        Whether CNAME switchover is supported.
        The value can be **true** or **false**.
        + **true**: CNAME switchover is supported.
        + **false**: CNAME switchover is not supported.
        """
        return pulumi.get(self, "cname_switch")

    @_builtins.property
    @pulumi.getter
    def custom(self) -> _builtins.bool:
        """
        Whether precise protection is supported.
        The value can be **true** or **false**.
        + **true**: Precise protection is supported.
        + **false**: Precise protection is not supported.
        """
        return pulumi.get(self, "custom")

    @_builtins.property
    @pulumi.getter(name="customBlock")
    def custom_block(self) -> _builtins.bool:
        """
        Whether custom block page is supported.
        The value can be **true** or **false**.
        + **true**: The custom block page is supported.
        + **false**: The custom block page is not supported.
        """
        return pulumi.get(self, "custom_block")

    @_builtins.property
    @pulumi.getter(name="deepDecodeEnable")
    def deep_decode_enable(self) -> _builtins.bool:
        """
        Whether deep inspection in basic web protection is supported.
        The value can be **true** or **false**.
        + **true**: The deep inspection is supported.
        + **false**: The deep inspection is not supported.
        """
        return pulumi.get(self, "deep_decode_enable")

    @_builtins.property
    @pulumi.getter(name="elbMode")
    def elb_mode(self) -> _builtins.bool:
        """
        Whether ELB mode is supported.
        The value can be **true** or **false**.
        + **true**: The ELB mode is supported.
        + **false**: The ELB mode is not supported.
        """
        return pulumi.get(self, "elb_mode")

    @_builtins.property
    @pulumi.getter
    def eps(self) -> _builtins.bool:
        """
        Whether EPS is supported.
        The value can be **true** or **false**.
        + **true**: EPS is supported.
        + **false**: EPS is not supported.
        """
        return pulumi.get(self, "eps")

    @_builtins.property
    @pulumi.getter(name="eventLts")
    def event_lts(self) -> _builtins.bool:
        """
        Whether LTS logging is supported.
        The value can be **true** or **false**.
        + **true**: LTS logging is supported.
        + **false**: LTS logging is not supported.
        """
        return pulumi.get(self, "event_lts")

    @_builtins.property
    @pulumi.getter(name="geoipEnable")
    def geoip_enable(self) -> _builtins.bool:
        """
        Whether to support geolocation access control.
        The value can be **true** or **false**.
        + **true**: The geolocation access control is supported.
        + **false**: The geolocation access control is not supported.
        """
        return pulumi.get(self, "geoip_enable")

    @_builtins.property
    @pulumi.getter(name="http2Enable")
    def http2_enable(self) -> _builtins.bool:
        """
        Whether to support HTTP2.
        The value can be **true** or **false**.
        + **true**: The HTTP2 is supported.
        + **false**: The HTTP2 is not supported.
        """
        return pulumi.get(self, "http2_enable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipGroup")
    def ip_group(self) -> _builtins.bool:
        """
        Whether the IP address group is supported.
        The value can be **true** or **false**.
        + **true**: The IP address group is supported.
        + **false**: The IP address group is not supported.
        """
        return pulumi.get(self, "ip_group")

    @_builtins.property
    @pulumi.getter
    def ipv6(self) -> _builtins.bool:
        """
        Whether IPv6 protection is supported.
        The value can be **true** or **false**.
        + **true**: IPv6 protection is supported.
        + **false**: IPv6 protection is not supported.
        """
        return pulumi.get(self, "ipv6")

    @_builtins.property
    @pulumi.getter(name="ipv6ProtectionEnable")
    def ipv6_protection_enable(self) -> _builtins.bool:
        """
        Whether IPv6 protection is supported.
        The value can be **true** or **false**.
        + **true**: The IPv6 protection is supported.
        + **false**: The IPv6 protection is not supported.
        """
        return pulumi.get(self, "ipv6_protection_enable")

    @_builtins.property
    @pulumi.getter(name="jsCrawlerEnable")
    def js_crawler_enable(self) -> _builtins.bool:
        """
        Whether JS anti-crawler is supported.
        The value can be **true** or **false**.
        + **true**: The JS anti-crawler is supported.
        + **false**: The JS anti-crawler is not supported.
        """
        return pulumi.get(self, "js_crawler_enable")

    @_builtins.property
    @pulumi.getter(name="loadBalanceEnable")
    def load_balance_enable(self) -> _builtins.bool:
        """
        Whether to support domain name access load balancing.
        The value can be **true** or **false**.
        + **true**: The domain name access load balancing is supported.
        + **false**: The domain name access load balancing is not supported.
        """
        return pulumi.get(self, "load_balance_enable")

    @_builtins.property
    @pulumi.getter(name="multiDns")
    def multi_dns(self) -> _builtins.bool:
        """
        Whether multi-DNS resolution is supported.
        The value can be **true** or **false**.
        + **true**: The multi-DNS resolution is supported.
        + **false**: The multi-DNS resolution is not supported.
        """
        return pulumi.get(self, "multi_dns")

    @_builtins.property
    @pulumi.getter(name="overviewBandwidth")
    def overview_bandwidth(self) -> _builtins.bool:
        """
        Whether security overview bandwidth statistics is supported.
        The value can be **true** or **false**.
        + **true**: The security overview bandwidth statistics is supported.
        + **false**: The security overview bandwidth statistics is not supported.
        """
        return pulumi.get(self, "overview_bandwidth")

    @_builtins.property
    @pulumi.getter(name="policySharingEnable")
    def policy_sharing_enable(self) -> _builtins.bool:
        """
        Whether to support policy sharing.
        The value can be **true** or **false**.
        + **true**: The policy sharing is supported.
        + **false**: The policy sharing is not supported.
        """
        return pulumi.get(self, "policy_sharing_enable")

    @_builtins.property
    @pulumi.getter(name="proxyUseOldcname")
    def proxy_use_oldcname(self) -> _builtins.bool:
        """
        Whether old cname resolution is supported.
        The value can be **true** or **false**.
        + **true**: The old cname resolution is supported.
        + **false**: The old cname resolution is not supported.
        """
        return pulumi.get(self, "proxy_use_oldcname")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="robotActionEnable")
    def robot_action_enable(self) -> _builtins.bool:
        """
        Whether to support website anti-crawler.
        The value can be **true** or **false**.
        + **true**: The website anti-crawler is supported.
        + **false**: The website anti-crawler is not supported.
        """
        return pulumi.get(self, "robot_action_enable")

    @_builtins.property
    @pulumi.getter(name="searchIp")
    def search_ip(self) -> _builtins.bool:
        """
        Whether IP address search is supported.
        The value can be **true** or **false**.
        + **true**: IP address search is supported.
        + **false**: IP address search is not supported.
        """
        return pulumi.get(self, "search_ip")

    @_builtins.property
    @pulumi.getter(name="timeoutConfigEnable")
    def timeout_config_enable(self) -> _builtins.bool:
        """
        Whether to support the timeout configuration.
        The value can be **true** or **false**.
        + **true**: The timeout configuration is supported.
        + **false**: The timeout configuration is not supported.
        """
        return pulumi.get(self, "timeout_config_enable")

    @_builtins.property
    @pulumi.getter
    def tls(self) -> _builtins.bool:
        """
        Whether to support the TLS version.
        The value can be **true** or **false**.
        + **true**: TLS version is supported.
        + **false**: TLS version is not supported.
        """
        return pulumi.get(self, "tls")


class AwaitableGetConfigResult(GetConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigResult(
            advanced_ignore=self.advanced_ignore,
            alert=self.alert,
            cc_enhance=self.cc_enhance,
            check_all_headers_enable=self.check_all_headers_enable,
            cname_switch=self.cname_switch,
            custom=self.custom,
            custom_block=self.custom_block,
            deep_decode_enable=self.deep_decode_enable,
            elb_mode=self.elb_mode,
            eps=self.eps,
            event_lts=self.event_lts,
            geoip_enable=self.geoip_enable,
            http2_enable=self.http2_enable,
            id=self.id,
            ip_group=self.ip_group,
            ipv6=self.ipv6,
            ipv6_protection_enable=self.ipv6_protection_enable,
            js_crawler_enable=self.js_crawler_enable,
            load_balance_enable=self.load_balance_enable,
            multi_dns=self.multi_dns,
            overview_bandwidth=self.overview_bandwidth,
            policy_sharing_enable=self.policy_sharing_enable,
            proxy_use_oldcname=self.proxy_use_oldcname,
            region=self.region,
            robot_action_enable=self.robot_action_enable,
            search_ip=self.search_ip,
            timeout_config_enable=self.timeout_config_enable,
            tls=self.tls)


def get_config(region: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigResult:
    """
    Use this data source to get the available features under a region.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Waf.get_config()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Waf/getConfig:getConfig', __args__, opts=opts, typ=GetConfigResult).value

    return AwaitableGetConfigResult(
        advanced_ignore=pulumi.get(__ret__, 'advanced_ignore'),
        alert=pulumi.get(__ret__, 'alert'),
        cc_enhance=pulumi.get(__ret__, 'cc_enhance'),
        check_all_headers_enable=pulumi.get(__ret__, 'check_all_headers_enable'),
        cname_switch=pulumi.get(__ret__, 'cname_switch'),
        custom=pulumi.get(__ret__, 'custom'),
        custom_block=pulumi.get(__ret__, 'custom_block'),
        deep_decode_enable=pulumi.get(__ret__, 'deep_decode_enable'),
        elb_mode=pulumi.get(__ret__, 'elb_mode'),
        eps=pulumi.get(__ret__, 'eps'),
        event_lts=pulumi.get(__ret__, 'event_lts'),
        geoip_enable=pulumi.get(__ret__, 'geoip_enable'),
        http2_enable=pulumi.get(__ret__, 'http2_enable'),
        id=pulumi.get(__ret__, 'id'),
        ip_group=pulumi.get(__ret__, 'ip_group'),
        ipv6=pulumi.get(__ret__, 'ipv6'),
        ipv6_protection_enable=pulumi.get(__ret__, 'ipv6_protection_enable'),
        js_crawler_enable=pulumi.get(__ret__, 'js_crawler_enable'),
        load_balance_enable=pulumi.get(__ret__, 'load_balance_enable'),
        multi_dns=pulumi.get(__ret__, 'multi_dns'),
        overview_bandwidth=pulumi.get(__ret__, 'overview_bandwidth'),
        policy_sharing_enable=pulumi.get(__ret__, 'policy_sharing_enable'),
        proxy_use_oldcname=pulumi.get(__ret__, 'proxy_use_oldcname'),
        region=pulumi.get(__ret__, 'region'),
        robot_action_enable=pulumi.get(__ret__, 'robot_action_enable'),
        search_ip=pulumi.get(__ret__, 'search_ip'),
        timeout_config_enable=pulumi.get(__ret__, 'timeout_config_enable'),
        tls=pulumi.get(__ret__, 'tls'))
def get_config_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConfigResult]:
    """
    Use this data source to get the available features under a region.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Waf.get_config()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Waf/getConfig:getConfig', __args__, opts=opts, typ=GetConfigResult)
    return __ret__.apply(lambda __response__: GetConfigResult(
        advanced_ignore=pulumi.get(__response__, 'advanced_ignore'),
        alert=pulumi.get(__response__, 'alert'),
        cc_enhance=pulumi.get(__response__, 'cc_enhance'),
        check_all_headers_enable=pulumi.get(__response__, 'check_all_headers_enable'),
        cname_switch=pulumi.get(__response__, 'cname_switch'),
        custom=pulumi.get(__response__, 'custom'),
        custom_block=pulumi.get(__response__, 'custom_block'),
        deep_decode_enable=pulumi.get(__response__, 'deep_decode_enable'),
        elb_mode=pulumi.get(__response__, 'elb_mode'),
        eps=pulumi.get(__response__, 'eps'),
        event_lts=pulumi.get(__response__, 'event_lts'),
        geoip_enable=pulumi.get(__response__, 'geoip_enable'),
        http2_enable=pulumi.get(__response__, 'http2_enable'),
        id=pulumi.get(__response__, 'id'),
        ip_group=pulumi.get(__response__, 'ip_group'),
        ipv6=pulumi.get(__response__, 'ipv6'),
        ipv6_protection_enable=pulumi.get(__response__, 'ipv6_protection_enable'),
        js_crawler_enable=pulumi.get(__response__, 'js_crawler_enable'),
        load_balance_enable=pulumi.get(__response__, 'load_balance_enable'),
        multi_dns=pulumi.get(__response__, 'multi_dns'),
        overview_bandwidth=pulumi.get(__response__, 'overview_bandwidth'),
        policy_sharing_enable=pulumi.get(__response__, 'policy_sharing_enable'),
        proxy_use_oldcname=pulumi.get(__response__, 'proxy_use_oldcname'),
        region=pulumi.get(__response__, 'region'),
        robot_action_enable=pulumi.get(__response__, 'robot_action_enable'),
        search_ip=pulumi.get(__response__, 'search_ip'),
        timeout_config_enable=pulumi.get(__response__, 'timeout_config_enable'),
        tls=pulumi.get(__response__, 'tls')))
