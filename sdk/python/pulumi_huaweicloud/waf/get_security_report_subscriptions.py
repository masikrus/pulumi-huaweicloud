# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecurityReportSubscriptionsResult',
    'AwaitableGetSecurityReportSubscriptionsResult',
    'get_security_report_subscriptions',
    'get_security_report_subscriptions_output',
]

@pulumi.output_type
class GetSecurityReportSubscriptionsResult:
    """
    A collection of values returned by getSecurityReportSubscriptions.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, items=None, region=None, report_category=None, report_name=None, report_status=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if report_category and not isinstance(report_category, str):
            raise TypeError("Expected argument 'report_category' to be a str")
        pulumi.set(__self__, "report_category", report_category)
        if report_name and not isinstance(report_name, str):
            raise TypeError("Expected argument 'report_name' to be a str")
        pulumi.set(__self__, "report_name", report_name)
        if report_status and not isinstance(report_status, str):
            raise TypeError("Expected argument 'report_status' to be a str")
        pulumi.set(__self__, "report_status", report_status)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityReportSubscriptionsItemResult']:
        """
        The security report subscription list.
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="reportCategory")
    def report_category(self) -> Optional[_builtins.str]:
        """
        The security report type.
        """
        return pulumi.get(self, "report_category")

    @_builtins.property
    @pulumi.getter(name="reportName")
    def report_name(self) -> Optional[_builtins.str]:
        """
        The security report template name.
        """
        return pulumi.get(self, "report_name")

    @_builtins.property
    @pulumi.getter(name="reportStatus")
    def report_status(self) -> Optional[_builtins.str]:
        """
        The security report status.
        """
        return pulumi.get(self, "report_status")


class AwaitableGetSecurityReportSubscriptionsResult(GetSecurityReportSubscriptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityReportSubscriptionsResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            items=self.items,
            region=self.region,
            report_category=self.report_category,
            report_name=self.report_name,
            report_status=self.report_status)


def get_security_report_subscriptions(enterprise_project_id: Optional[_builtins.str] = None,
                                      region: Optional[_builtins.str] = None,
                                      report_category: Optional[_builtins.str] = None,
                                      report_name: Optional[_builtins.str] = None,
                                      report_status: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityReportSubscriptionsResult:
    """
    Use this data source to get the list of security report subscriptions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Waf.get_security_report_subscriptions()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str report_category: Specifies the security report type.
           The valid values are as follows:
           + **daily_report**：Indicates security daily report.
           + **weekly_report**：Indicates security weekly report.
           + **monthly_report**：Indicates security monthly report.
           + **custom_report**: Indicates custom security report.
    :param _builtins.str report_name: Specifies the security report template name.
    :param _builtins.str report_status: Specifies the security report status.
           The valid values are as follows:
           + **opened**
           + **closed**
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['region'] = region
    __args__['reportCategory'] = report_category
    __args__['reportName'] = report_name
    __args__['reportStatus'] = report_status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Waf/getSecurityReportSubscriptions:getSecurityReportSubscriptions', __args__, opts=opts, typ=GetSecurityReportSubscriptionsResult).value

    return AwaitableGetSecurityReportSubscriptionsResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        items=pulumi.get(__ret__, 'items'),
        region=pulumi.get(__ret__, 'region'),
        report_category=pulumi.get(__ret__, 'report_category'),
        report_name=pulumi.get(__ret__, 'report_name'),
        report_status=pulumi.get(__ret__, 'report_status'))
def get_security_report_subscriptions_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             report_category: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             report_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             report_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecurityReportSubscriptionsResult]:
    """
    Use this data source to get the list of security report subscriptions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Waf.get_security_report_subscriptions()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           This parameter is valid only when the enterprise project is enabled.
           The default value is **0**, indicating the default enterprise project.
           If you need to query data for all enterprise projects, the value is **all_granted_eps**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str report_category: Specifies the security report type.
           The valid values are as follows:
           + **daily_report**：Indicates security daily report.
           + **weekly_report**：Indicates security weekly report.
           + **monthly_report**：Indicates security monthly report.
           + **custom_report**: Indicates custom security report.
    :param _builtins.str report_name: Specifies the security report template name.
    :param _builtins.str report_status: Specifies the security report status.
           The valid values are as follows:
           + **opened**
           + **closed**
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['region'] = region
    __args__['reportCategory'] = report_category
    __args__['reportName'] = report_name
    __args__['reportStatus'] = report_status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Waf/getSecurityReportSubscriptions:getSecurityReportSubscriptions', __args__, opts=opts, typ=GetSecurityReportSubscriptionsResult)
    return __ret__.apply(lambda __response__: GetSecurityReportSubscriptionsResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        items=pulumi.get(__response__, 'items'),
        region=pulumi.get(__response__, 'region'),
        report_category=pulumi.get(__response__, 'report_category'),
        report_name=pulumi.get(__response__, 'report_name'),
        report_status=pulumi.get(__response__, 'report_status')))
