# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ModifyAlarmNotificationArgs', 'ModifyAlarmNotification']

@pulumi.input_type
class ModifyAlarmNotificationArgs:
    def __init__(__self__, *,
                 alert_id: pulumi.Input[_builtins.str],
                 notice_class: pulumi.Input[_builtins.str],
                 topic_urn: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_all_enterprise_project: Optional[pulumi.Input[_builtins.bool]] = None,
                 locale: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nearly_expired_time: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sendfreq: Optional[pulumi.Input[_builtins.int]] = None,
                 threats: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 times: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a ModifyAlarmNotification resource.
        :param pulumi.Input[_builtins.str] alert_id: Specifies the ID of the alarm notification.
        :param pulumi.Input[_builtins.str] notice_class: Specifies the type of the alarm notification.
               The valid values are as follows:
               + **threat_alert_notice**: Indicates protection event.
               + **cert_alert_notice**: Indicates certificate expiration. Currently, the type not supports.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the topic URN of the SMN.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable the alarm notification.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.bool] is_all_enterprise_project: Specifies whether all enterprise projects
               are involved.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] locale: Specifies the language.
               The value can be **zh-cn**(Chineses) or **en-us**(English).
        :param pulumi.Input[_builtins.str] name: Specifies the name of the alarm notification.
        :param pulumi.Input[_builtins.str] nearly_expired_time: Specifies the certificate expiration notification
               start time.
               This parameter is mandatory when the `notice_class` is set to **cert_alert_notice**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] sendfreq: Specifies the time interval, in minutes.
               The valid values are `5`, `15`, `30`, `60`, `120`, `360`, `720` and `1,440`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] threats: Specifies the event type.
               The valid values are as follows:
               **anticrawler**, **robot**, **advanced_bot**, **webshell**, **illegal**, **lfi**, **rfi**, **custom_whiteblackip**,
               **cmdi**, **custom_custom**, **custom_idc_ip**, **xss**, **cc**, **llm_prompt_sensitive**, **antitamper**, **vuln**,
               **leakage**, **llm_prompt_injection**, **third_bot_river**, **antiscan_dir_traversal**, **antiscan_high_freq_scan**,
               **botm**, **sqli**, **custom_geoip** and **llm_response_sensitive**.
               
               If you want to set all value above, you can set this parameter to **all**.
               If you not specifies this parameter, default is empty.
        :param pulumi.Input[_builtins.int] times: Specifies the threshold of attack.
               An alarm notification is sent when the number of attack reaches the threshold.
        """
        pulumi.set(__self__, "alert_id", alert_id)
        pulumi.set(__self__, "notice_class", notice_class)
        pulumi.set(__self__, "topic_urn", topic_urn)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_all_enterprise_project is not None:
            pulumi.set(__self__, "is_all_enterprise_project", is_all_enterprise_project)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nearly_expired_time is not None:
            pulumi.set(__self__, "nearly_expired_time", nearly_expired_time)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sendfreq is not None:
            pulumi.set(__self__, "sendfreq", sendfreq)
        if threats is not None:
            pulumi.set(__self__, "threats", threats)
        if times is not None:
            pulumi.set(__self__, "times", times)

    @_builtins.property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the alarm notification.
        """
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alert_id", value)

    @_builtins.property
    @pulumi.getter(name="noticeClass")
    def notice_class(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the alarm notification.
        The valid values are as follows:
        + **threat_alert_notice**: Indicates protection event.
        + **cert_alert_notice**: Indicates certificate expiration. Currently, the type not supports.
        """
        return pulumi.get(self, "notice_class")

    @notice_class.setter
    def notice_class(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notice_class", value)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the topic URN of the SMN.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the alarm notification.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="isAllEnterpriseProject")
    def is_all_enterprise_project(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether all enterprise projects
        are involved.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "is_all_enterprise_project")

    @is_all_enterprise_project.setter
    def is_all_enterprise_project(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_all_enterprise_project", value)

    @_builtins.property
    @pulumi.getter
    def locale(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the language.
        The value can be **zh-cn**(Chineses) or **en-us**(English).
        """
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "locale", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the alarm notification.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nearlyExpiredTime")
    def nearly_expired_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate expiration notification
        start time.
        This parameter is mandatory when the `notice_class` is set to **cert_alert_notice**.
        """
        return pulumi.get(self, "nearly_expired_time")

    @nearly_expired_time.setter
    def nearly_expired_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nearly_expired_time", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sendfreq(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the time interval, in minutes.
        The valid values are `5`, `15`, `30`, `60`, `120`, `360`, `720` and `1,440`.
        """
        return pulumi.get(self, "sendfreq")

    @sendfreq.setter
    def sendfreq(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sendfreq", value)

    @_builtins.property
    @pulumi.getter
    def threats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the event type.
        The valid values are as follows:
        **anticrawler**, **robot**, **advanced_bot**, **webshell**, **illegal**, **lfi**, **rfi**, **custom_whiteblackip**,
        **cmdi**, **custom_custom**, **custom_idc_ip**, **xss**, **cc**, **llm_prompt_sensitive**, **antitamper**, **vuln**,
        **leakage**, **llm_prompt_injection**, **third_bot_river**, **antiscan_dir_traversal**, **antiscan_high_freq_scan**,
        **botm**, **sqli**, **custom_geoip** and **llm_response_sensitive**.

        If you want to set all value above, you can set this parameter to **all**.
        If you not specifies this parameter, default is empty.
        """
        return pulumi.get(self, "threats")

    @threats.setter
    def threats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "threats", value)

    @_builtins.property
    @pulumi.getter
    def times(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the threshold of attack.
        An alarm notification is sent when the number of attack reaches the threshold.
        """
        return pulumi.get(self, "times")

    @times.setter
    def times(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "times", value)


@pulumi.input_type
class _ModifyAlarmNotificationState:
    def __init__(__self__, *,
                 alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_all_enterprise_project: Optional[pulumi.Input[_builtins.bool]] = None,
                 locale: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nearly_expired_time: Optional[pulumi.Input[_builtins.str]] = None,
                 notice_class: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sendfreq: Optional[pulumi.Input[_builtins.int]] = None,
                 threats: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 times: Optional[pulumi.Input[_builtins.int]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ModifyAlarmNotification resources.
        :param pulumi.Input[_builtins.str] alert_id: Specifies the ID of the alarm notification.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable the alarm notification.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.bool] is_all_enterprise_project: Specifies whether all enterprise projects
               are involved.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] locale: Specifies the language.
               The value can be **zh-cn**(Chineses) or **en-us**(English).
        :param pulumi.Input[_builtins.str] name: Specifies the name of the alarm notification.
        :param pulumi.Input[_builtins.str] nearly_expired_time: Specifies the certificate expiration notification
               start time.
               This parameter is mandatory when the `notice_class` is set to **cert_alert_notice**.
        :param pulumi.Input[_builtins.str] notice_class: Specifies the type of the alarm notification.
               The valid values are as follows:
               + **threat_alert_notice**: Indicates protection event.
               + **cert_alert_notice**: Indicates certificate expiration. Currently, the type not supports.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] sendfreq: Specifies the time interval, in minutes.
               The valid values are `5`, `15`, `30`, `60`, `120`, `360`, `720` and `1,440`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] threats: Specifies the event type.
               The valid values are as follows:
               **anticrawler**, **robot**, **advanced_bot**, **webshell**, **illegal**, **lfi**, **rfi**, **custom_whiteblackip**,
               **cmdi**, **custom_custom**, **custom_idc_ip**, **xss**, **cc**, **llm_prompt_sensitive**, **antitamper**, **vuln**,
               **leakage**, **llm_prompt_injection**, **third_bot_river**, **antiscan_dir_traversal**, **antiscan_high_freq_scan**,
               **botm**, **sqli**, **custom_geoip** and **llm_response_sensitive**.
               
               If you want to set all value above, you can set this parameter to **all**.
               If you not specifies this parameter, default is empty.
        :param pulumi.Input[_builtins.int] times: Specifies the threshold of attack.
               An alarm notification is sent when the number of attack reaches the threshold.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the topic URN of the SMN.
        """
        if alert_id is not None:
            pulumi.set(__self__, "alert_id", alert_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_all_enterprise_project is not None:
            pulumi.set(__self__, "is_all_enterprise_project", is_all_enterprise_project)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nearly_expired_time is not None:
            pulumi.set(__self__, "nearly_expired_time", nearly_expired_time)
        if notice_class is not None:
            pulumi.set(__self__, "notice_class", notice_class)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sendfreq is not None:
            pulumi.set(__self__, "sendfreq", sendfreq)
        if threats is not None:
            pulumi.set(__self__, "threats", threats)
        if times is not None:
            pulumi.set(__self__, "times", times)
        if topic_urn is not None:
            pulumi.set(__self__, "topic_urn", topic_urn)

    @_builtins.property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the alarm notification.
        """
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alert_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the alarm notification.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="isAllEnterpriseProject")
    def is_all_enterprise_project(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether all enterprise projects
        are involved.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "is_all_enterprise_project")

    @is_all_enterprise_project.setter
    def is_all_enterprise_project(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_all_enterprise_project", value)

    @_builtins.property
    @pulumi.getter
    def locale(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the language.
        The value can be **zh-cn**(Chineses) or **en-us**(English).
        """
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "locale", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the alarm notification.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nearlyExpiredTime")
    def nearly_expired_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the certificate expiration notification
        start time.
        This parameter is mandatory when the `notice_class` is set to **cert_alert_notice**.
        """
        return pulumi.get(self, "nearly_expired_time")

    @nearly_expired_time.setter
    def nearly_expired_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nearly_expired_time", value)

    @_builtins.property
    @pulumi.getter(name="noticeClass")
    def notice_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the alarm notification.
        The valid values are as follows:
        + **threat_alert_notice**: Indicates protection event.
        + **cert_alert_notice**: Indicates certificate expiration. Currently, the type not supports.
        """
        return pulumi.get(self, "notice_class")

    @notice_class.setter
    def notice_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notice_class", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def sendfreq(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the time interval, in minutes.
        The valid values are `5`, `15`, `30`, `60`, `120`, `360`, `720` and `1,440`.
        """
        return pulumi.get(self, "sendfreq")

    @sendfreq.setter
    def sendfreq(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sendfreq", value)

    @_builtins.property
    @pulumi.getter
    def threats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the event type.
        The valid values are as follows:
        **anticrawler**, **robot**, **advanced_bot**, **webshell**, **illegal**, **lfi**, **rfi**, **custom_whiteblackip**,
        **cmdi**, **custom_custom**, **custom_idc_ip**, **xss**, **cc**, **llm_prompt_sensitive**, **antitamper**, **vuln**,
        **leakage**, **llm_prompt_injection**, **third_bot_river**, **antiscan_dir_traversal**, **antiscan_high_freq_scan**,
        **botm**, **sqli**, **custom_geoip** and **llm_response_sensitive**.

        If you want to set all value above, you can set this parameter to **all**.
        If you not specifies this parameter, default is empty.
        """
        return pulumi.get(self, "threats")

    @threats.setter
    def threats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "threats", value)

    @_builtins.property
    @pulumi.getter
    def times(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the threshold of attack.
        An alarm notification is sent when the number of attack reaches the threshold.
        """
        return pulumi.get(self, "times")

    @times.setter
    def times(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "times", value)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic URN of the SMN.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_urn", value)


@pulumi.type_token("huaweicloud:Waf/modifyAlarmNotification:ModifyAlarmNotification")
class ModifyAlarmNotification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_all_enterprise_project: Optional[pulumi.Input[_builtins.bool]] = None,
                 locale: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nearly_expired_time: Optional[pulumi.Input[_builtins.str]] = None,
                 notice_class: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sendfreq: Optional[pulumi.Input[_builtins.int]] = None,
                 threats: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 times: Optional[pulumi.Input[_builtins.int]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a resource to update WAF alarm notification within HuaweiCloud.

        > All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be used.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alert_id = config.require_object("alertId")
        name = config.require_object("name")
        topic_urn = config.require_object("topicUrn")
        notice_class = config.require_object("noticeClass")
        test = huaweicloud.waf.ModifyAlarmNotification("test",
            alert_id=alert_id,
            name=name,
            topic_urn=topic_urn,
            notice_class=notice_class)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alert_id: Specifies the ID of the alarm notification.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable the alarm notification.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.bool] is_all_enterprise_project: Specifies whether all enterprise projects
               are involved.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] locale: Specifies the language.
               The value can be **zh-cn**(Chineses) or **en-us**(English).
        :param pulumi.Input[_builtins.str] name: Specifies the name of the alarm notification.
        :param pulumi.Input[_builtins.str] nearly_expired_time: Specifies the certificate expiration notification
               start time.
               This parameter is mandatory when the `notice_class` is set to **cert_alert_notice**.
        :param pulumi.Input[_builtins.str] notice_class: Specifies the type of the alarm notification.
               The valid values are as follows:
               + **threat_alert_notice**: Indicates protection event.
               + **cert_alert_notice**: Indicates certificate expiration. Currently, the type not supports.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] sendfreq: Specifies the time interval, in minutes.
               The valid values are `5`, `15`, `30`, `60`, `120`, `360`, `720` and `1,440`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] threats: Specifies the event type.
               The valid values are as follows:
               **anticrawler**, **robot**, **advanced_bot**, **webshell**, **illegal**, **lfi**, **rfi**, **custom_whiteblackip**,
               **cmdi**, **custom_custom**, **custom_idc_ip**, **xss**, **cc**, **llm_prompt_sensitive**, **antitamper**, **vuln**,
               **leakage**, **llm_prompt_injection**, **third_bot_river**, **antiscan_dir_traversal**, **antiscan_high_freq_scan**,
               **botm**, **sqli**, **custom_geoip** and **llm_response_sensitive**.
               
               If you want to set all value above, you can set this parameter to **all**.
               If you not specifies this parameter, default is empty.
        :param pulumi.Input[_builtins.int] times: Specifies the threshold of attack.
               An alarm notification is sent when the number of attack reaches the threshold.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the topic URN of the SMN.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModifyAlarmNotificationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a resource to update WAF alarm notification within HuaweiCloud.

        > All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be used.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        alert_id = config.require_object("alertId")
        name = config.require_object("name")
        topic_urn = config.require_object("topicUrn")
        notice_class = config.require_object("noticeClass")
        test = huaweicloud.waf.ModifyAlarmNotification("test",
            alert_id=alert_id,
            name=name,
            topic_urn=topic_urn,
            notice_class=notice_class)
        ```

        :param str resource_name: The name of the resource.
        :param ModifyAlarmNotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModifyAlarmNotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_all_enterprise_project: Optional[pulumi.Input[_builtins.bool]] = None,
                 locale: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nearly_expired_time: Optional[pulumi.Input[_builtins.str]] = None,
                 notice_class: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sendfreq: Optional[pulumi.Input[_builtins.int]] = None,
                 threats: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 times: Optional[pulumi.Input[_builtins.int]] = None,
                 topic_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModifyAlarmNotificationArgs.__new__(ModifyAlarmNotificationArgs)

            if alert_id is None and not opts.urn:
                raise TypeError("Missing required property 'alert_id'")
            __props__.__dict__["alert_id"] = alert_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["is_all_enterprise_project"] = is_all_enterprise_project
            __props__.__dict__["locale"] = locale
            __props__.__dict__["name"] = name
            __props__.__dict__["nearly_expired_time"] = nearly_expired_time
            if notice_class is None and not opts.urn:
                raise TypeError("Missing required property 'notice_class'")
            __props__.__dict__["notice_class"] = notice_class
            __props__.__dict__["region"] = region
            __props__.__dict__["sendfreq"] = sendfreq
            __props__.__dict__["threats"] = threats
            __props__.__dict__["times"] = times
            if topic_urn is None and not opts.urn:
                raise TypeError("Missing required property 'topic_urn'")
            __props__.__dict__["topic_urn"] = topic_urn
        super(ModifyAlarmNotification, __self__).__init__(
            'huaweicloud:Waf/modifyAlarmNotification:ModifyAlarmNotification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_all_enterprise_project: Optional[pulumi.Input[_builtins.bool]] = None,
            locale: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            nearly_expired_time: Optional[pulumi.Input[_builtins.str]] = None,
            notice_class: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            sendfreq: Optional[pulumi.Input[_builtins.int]] = None,
            threats: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            times: Optional[pulumi.Input[_builtins.int]] = None,
            topic_urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'ModifyAlarmNotification':
        """
        Get an existing ModifyAlarmNotification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alert_id: Specifies the ID of the alarm notification.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable the alarm notification.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.bool] is_all_enterprise_project: Specifies whether all enterprise projects
               are involved.
               The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] locale: Specifies the language.
               The value can be **zh-cn**(Chineses) or **en-us**(English).
        :param pulumi.Input[_builtins.str] name: Specifies the name of the alarm notification.
        :param pulumi.Input[_builtins.str] nearly_expired_time: Specifies the certificate expiration notification
               start time.
               This parameter is mandatory when the `notice_class` is set to **cert_alert_notice**.
        :param pulumi.Input[_builtins.str] notice_class: Specifies the type of the alarm notification.
               The valid values are as follows:
               + **threat_alert_notice**: Indicates protection event.
               + **cert_alert_notice**: Indicates certificate expiration. Currently, the type not supports.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] sendfreq: Specifies the time interval, in minutes.
               The valid values are `5`, `15`, `30`, `60`, `120`, `360`, `720` and `1,440`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] threats: Specifies the event type.
               The valid values are as follows:
               **anticrawler**, **robot**, **advanced_bot**, **webshell**, **illegal**, **lfi**, **rfi**, **custom_whiteblackip**,
               **cmdi**, **custom_custom**, **custom_idc_ip**, **xss**, **cc**, **llm_prompt_sensitive**, **antitamper**, **vuln**,
               **leakage**, **llm_prompt_injection**, **third_bot_river**, **antiscan_dir_traversal**, **antiscan_high_freq_scan**,
               **botm**, **sqli**, **custom_geoip** and **llm_response_sensitive**.
               
               If you want to set all value above, you can set this parameter to **all**.
               If you not specifies this parameter, default is empty.
        :param pulumi.Input[_builtins.int] times: Specifies the threshold of attack.
               An alarm notification is sent when the number of attack reaches the threshold.
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the topic URN of the SMN.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModifyAlarmNotificationState.__new__(_ModifyAlarmNotificationState)

        __props__.__dict__["alert_id"] = alert_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["is_all_enterprise_project"] = is_all_enterprise_project
        __props__.__dict__["locale"] = locale
        __props__.__dict__["name"] = name
        __props__.__dict__["nearly_expired_time"] = nearly_expired_time
        __props__.__dict__["notice_class"] = notice_class
        __props__.__dict__["region"] = region
        __props__.__dict__["sendfreq"] = sendfreq
        __props__.__dict__["threats"] = threats
        __props__.__dict__["times"] = times
        __props__.__dict__["topic_urn"] = topic_urn
        return ModifyAlarmNotification(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the alarm notification.
        """
        return pulumi.get(self, "alert_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable the alarm notification.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="isAllEnterpriseProject")
    def is_all_enterprise_project(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether all enterprise projects
        are involved.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "is_all_enterprise_project")

    @_builtins.property
    @pulumi.getter
    def locale(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the language.
        The value can be **zh-cn**(Chineses) or **en-us**(English).
        """
        return pulumi.get(self, "locale")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the alarm notification.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nearlyExpiredTime")
    def nearly_expired_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the certificate expiration notification
        start time.
        This parameter is mandatory when the `notice_class` is set to **cert_alert_notice**.
        """
        return pulumi.get(self, "nearly_expired_time")

    @_builtins.property
    @pulumi.getter(name="noticeClass")
    def notice_class(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the alarm notification.
        The valid values are as follows:
        + **threat_alert_notice**: Indicates protection event.
        + **cert_alert_notice**: Indicates certificate expiration. Currently, the type not supports.
        """
        return pulumi.get(self, "notice_class")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sendfreq(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the time interval, in minutes.
        The valid values are `5`, `15`, `30`, `60`, `120`, `360`, `720` and `1,440`.
        """
        return pulumi.get(self, "sendfreq")

    @_builtins.property
    @pulumi.getter
    def threats(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the event type.
        The valid values are as follows:
        **anticrawler**, **robot**, **advanced_bot**, **webshell**, **illegal**, **lfi**, **rfi**, **custom_whiteblackip**,
        **cmdi**, **custom_custom**, **custom_idc_ip**, **xss**, **cc**, **llm_prompt_sensitive**, **antitamper**, **vuln**,
        **leakage**, **llm_prompt_injection**, **third_bot_river**, **antiscan_dir_traversal**, **antiscan_high_freq_scan**,
        **botm**, **sqli**, **custom_geoip** and **llm_response_sensitive**.

        If you want to set all value above, you can set this parameter to **all**.
        If you not specifies this parameter, default is empty.
        """
        return pulumi.get(self, "threats")

    @_builtins.property
    @pulumi.getter
    def times(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the threshold of attack.
        An alarm notification is sent when the number of attack reaches the threshold.
        """
        return pulumi.get(self, "times")

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the topic URN of the SMN.
        """
        return pulumi.get(self, "topic_urn")

