# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAllDomainsResult',
    'AwaitableGetAllDomainsResult',
    'get_all_domains',
    'get_all_domains_output',
]

@pulumi.output_type
class GetAllDomainsResult:
    """
    A collection of values returned by getAllDomains.
    """
    def __init__(__self__, enterprise_project_id=None, hostname=None, id=None, is_https=None, items=None, policyname=None, protect_status=None, region=None, waf_type=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_https and not isinstance(is_https, str):
            raise TypeError("Expected argument 'is_https' to be a str")
        pulumi.set(__self__, "is_https", is_https)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if policyname and not isinstance(policyname, str):
            raise TypeError("Expected argument 'policyname' to be a str")
        pulumi.set(__self__, "policyname", policyname)
        if protect_status and not isinstance(protect_status, int):
            raise TypeError("Expected argument 'protect_status' to be a int")
        pulumi.set(__self__, "protect_status", protect_status)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if waf_type and not isinstance(waf_type, str):
            raise TypeError("Expected argument 'waf_type' to be a str")
        pulumi.set(__self__, "waf_type", waf_type)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[_builtins.str]:
        """
        The name of the domain.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isHttps")
    def is_https(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "is_https")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAllDomainsItemResult']:
        """
        The details about the protected domain.
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def policyname(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policyname")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> Optional[_builtins.int]:
        """
        The protection status of the domain.
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="wafType")
    def waf_type(self) -> Optional[_builtins.str]:
        """
        The mode of the domain.
        """
        return pulumi.get(self, "waf_type")


class AwaitableGetAllDomainsResult(GetAllDomainsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAllDomainsResult(
            enterprise_project_id=self.enterprise_project_id,
            hostname=self.hostname,
            id=self.id,
            is_https=self.is_https,
            items=self.items,
            policyname=self.policyname,
            protect_status=self.protect_status,
            region=self.region,
            waf_type=self.waf_type)


def get_all_domains(enterprise_project_id: Optional[_builtins.str] = None,
                    hostname: Optional[_builtins.str] = None,
                    is_https: Optional[_builtins.str] = None,
                    policyname: Optional[_builtins.str] = None,
                    protect_status: Optional[_builtins.int] = None,
                    region: Optional[_builtins.str] = None,
                    waf_type: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAllDomainsResult:
    """
    Use this data source to get list of the domains, including cloud domains and dedicated domains.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Waf.get_all_domains()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           If you want to query resources under all enterprise projects, set this parameter to **all_granted_eps**.
           Defaults to **0**.
    :param _builtins.str hostname: Specifies the name of the domain.
    :param _builtins.str is_https: Specifies whether HTTPS is used for the domain.
           The value can be **true** of **false**.
    :param _builtins.str policyname: Specifies the name of the policy.
    :param _builtins.int protect_status: Specifies the protection status of the domain.
           The valid values are as follows:
           + `-1`: The WAF protection is bypassed. Requests of the domain are directly sent to the backend server and do not
           pass through WAF.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str waf_type: Specifies the WAF mode of the domain.
           The valid values are as follows:
           + **cloud**: The cloud WAF is used to protect the domain.
           + **premium**: The dedicated WAF instance is used to protect the domain.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostname'] = hostname
    __args__['isHttps'] = is_https
    __args__['policyname'] = policyname
    __args__['protectStatus'] = protect_status
    __args__['region'] = region
    __args__['wafType'] = waf_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Waf/getAllDomains:getAllDomains', __args__, opts=opts, typ=GetAllDomainsResult).value

    return AwaitableGetAllDomainsResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        is_https=pulumi.get(__ret__, 'is_https'),
        items=pulumi.get(__ret__, 'items'),
        policyname=pulumi.get(__ret__, 'policyname'),
        protect_status=pulumi.get(__ret__, 'protect_status'),
        region=pulumi.get(__ret__, 'region'),
        waf_type=pulumi.get(__ret__, 'waf_type'))
def get_all_domains_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           hostname: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           is_https: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           policyname: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           protect_status: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           waf_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAllDomainsResult]:
    """
    Use this data source to get list of the domains, including cloud domains and dedicated domains.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Waf.get_all_domains()
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           If you want to query resources under all enterprise projects, set this parameter to **all_granted_eps**.
           Defaults to **0**.
    :param _builtins.str hostname: Specifies the name of the domain.
    :param _builtins.str is_https: Specifies whether HTTPS is used for the domain.
           The value can be **true** of **false**.
    :param _builtins.str policyname: Specifies the name of the policy.
    :param _builtins.int protect_status: Specifies the protection status of the domain.
           The valid values are as follows:
           + `-1`: The WAF protection is bypassed. Requests of the domain are directly sent to the backend server and do not
           pass through WAF.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str waf_type: Specifies the WAF mode of the domain.
           The valid values are as follows:
           + **cloud**: The cloud WAF is used to protect the domain.
           + **premium**: The dedicated WAF instance is used to protect the domain.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['hostname'] = hostname
    __args__['isHttps'] = is_https
    __args__['policyname'] = policyname
    __args__['protectStatus'] = protect_status
    __args__['region'] = region
    __args__['wafType'] = waf_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Waf/getAllDomains:getAllDomains', __args__, opts=opts, typ=GetAllDomainsResult)
    return __ret__.apply(lambda __response__: GetAllDomainsResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        hostname=pulumi.get(__response__, 'hostname'),
        id=pulumi.get(__response__, 'id'),
        is_https=pulumi.get(__response__, 'is_https'),
        items=pulumi.get(__response__, 'items'),
        policyname=pulumi.get(__response__, 'policyname'),
        protect_status=pulumi.get(__response__, 'protect_status'),
        region=pulumi.get(__response__, 'region'),
        waf_type=pulumi.get(__response__, 'waf_type')))
