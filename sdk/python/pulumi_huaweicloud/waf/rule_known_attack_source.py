# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['RuleKnownAttackSourceArgs', 'RuleKnownAttackSource']

@pulumi.input_type
class RuleKnownAttackSourceArgs:
    def __init__(__self__, *,
                 block_time: pulumi.Input[_builtins.int],
                 block_type: pulumi.Input[_builtins.str],
                 policy_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RuleKnownAttackSource resource.
        :param pulumi.Input[_builtins.int] block_time: Specifies the blocking time in seconds.
               + If the prefix of `block_type` is **long**, the value ranges from `301` to `1,800`.
               + If the prefix of `block_type` is **short**, the value ranges from `1` to `300`.
        :param pulumi.Input[_builtins.str] block_type: Specifies the type of WAF known attack source rule.
               
               Changing this parameter will create a new resource.
               
               Valid values are as follows:
               + **long_ip_block**: Long-term IP address blocking.
               + **long_cookie_block**: Long-term Cookie blocking.
               + **long_params_block**: Long-term Params blocking.
               + **short_ip_block**: Short-term IP address blocking.
               + **short_cookie_block**: Short-term Cookie blocking.
               + **short_params_block**: Short-term Params blocking.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF known attack source rule.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF known attack
               source rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "block_time", block_time)
        pulumi.set(__self__, "block_type", block_type)
        pulumi.set(__self__, "policy_id", policy_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="blockTime")
    def block_time(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the blocking time in seconds.
        + If the prefix of `block_type` is **long**, the value ranges from `301` to `1,800`.
        + If the prefix of `block_type` is **short**, the value ranges from `1` to `300`.
        """
        return pulumi.get(self, "block_time")

    @block_time.setter
    def block_time(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "block_time", value)

    @_builtins.property
    @pulumi.getter(name="blockType")
    def block_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of WAF known attack source rule.

        Changing this parameter will create a new resource.

        Valid values are as follows:
        + **long_ip_block**: Long-term IP address blocking.
        + **long_cookie_block**: Long-term Cookie blocking.
        + **long_params_block**: Long-term Params blocking.
        + **short_ip_block**: Short-term IP address blocking.
        + **short_cookie_block**: Short-term Cookie blocking.
        + **short_params_block**: Short-term Params blocking.
        """
        return pulumi.get(self, "block_type")

    @block_type.setter
    def block_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "block_type", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of WAF known attack source rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF known attack
        source rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RuleKnownAttackSourceState:
    def __init__(__self__, *,
                 block_time: Optional[pulumi.Input[_builtins.int]] = None,
                 block_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RuleKnownAttackSource resources.
        :param pulumi.Input[_builtins.int] block_time: Specifies the blocking time in seconds.
               + If the prefix of `block_type` is **long**, the value ranges from `301` to `1,800`.
               + If the prefix of `block_type` is **short**, the value ranges from `1` to `300`.
        :param pulumi.Input[_builtins.str] block_type: Specifies the type of WAF known attack source rule.
               
               Changing this parameter will create a new resource.
               
               Valid values are as follows:
               + **long_ip_block**: Long-term IP address blocking.
               + **long_cookie_block**: Long-term Cookie blocking.
               + **long_params_block**: Long-term Params blocking.
               + **short_ip_block**: Short-term IP address blocking.
               + **short_cookie_block**: Short-term Cookie blocking.
               + **short_params_block**: Short-term Params blocking.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF known attack source rule.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF known attack
               source rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if block_time is not None:
            pulumi.set(__self__, "block_time", block_time)
        if block_type is not None:
            pulumi.set(__self__, "block_type", block_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="blockTime")
    def block_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the blocking time in seconds.
        + If the prefix of `block_type` is **long**, the value ranges from `301` to `1,800`.
        + If the prefix of `block_type` is **short**, the value ranges from `1` to `300`.
        """
        return pulumi.get(self, "block_time")

    @block_time.setter
    def block_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "block_time", value)

    @_builtins.property
    @pulumi.getter(name="blockType")
    def block_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of WAF known attack source rule.

        Changing this parameter will create a new resource.

        Valid values are as follows:
        + **long_ip_block**: Long-term IP address blocking.
        + **long_cookie_block**: Long-term Cookie blocking.
        + **long_params_block**: Long-term Params blocking.
        + **short_ip_block**: Short-term IP address blocking.
        + **short_cookie_block**: Short-term Cookie blocking.
        + **short_params_block**: Short-term Params blocking.
        """
        return pulumi.get(self, "block_type")

    @block_type.setter
    def block_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of WAF known attack source rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF known attack
        source rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Waf/ruleKnownAttackSource:RuleKnownAttackSource")
class RuleKnownAttackSource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_time: Optional[pulumi.Input[_builtins.int]] = None,
                 block_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a WAF rule known attack source resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The known attack source rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.waf.RuleKnownAttackSource("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            block_type="long_ip_block",
            block_time=500,
            description="test description")
        ```

        ## Import

        There are two ways to import WAF rule known attack source state.

        * Using `policy_id` and `rule_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleKnownAttackSource:RuleKnownAttackSource test <policy_id>/<rule_id>
        ```

        * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleKnownAttackSource:RuleKnownAttackSource test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] block_time: Specifies the blocking time in seconds.
               + If the prefix of `block_type` is **long**, the value ranges from `301` to `1,800`.
               + If the prefix of `block_type` is **short**, the value ranges from `1` to `300`.
        :param pulumi.Input[_builtins.str] block_type: Specifies the type of WAF known attack source rule.
               
               Changing this parameter will create a new resource.
               
               Valid values are as follows:
               + **long_ip_block**: Long-term IP address blocking.
               + **long_cookie_block**: Long-term Cookie blocking.
               + **long_params_block**: Long-term Params blocking.
               + **short_ip_block**: Short-term IP address blocking.
               + **short_cookie_block**: Short-term Cookie blocking.
               + **short_params_block**: Short-term Params blocking.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF known attack source rule.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF known attack
               source rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuleKnownAttackSourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a WAF rule known attack source resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The known attack source rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.waf.RuleKnownAttackSource("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            block_type="long_ip_block",
            block_time=500,
            description="test description")
        ```

        ## Import

        There are two ways to import WAF rule known attack source state.

        * Using `policy_id` and `rule_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleKnownAttackSource:RuleKnownAttackSource test <policy_id>/<rule_id>
        ```

        * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleKnownAttackSource:RuleKnownAttackSource test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param RuleKnownAttackSourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuleKnownAttackSourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_time: Optional[pulumi.Input[_builtins.int]] = None,
                 block_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuleKnownAttackSourceArgs.__new__(RuleKnownAttackSourceArgs)

            if block_time is None and not opts.urn:
                raise TypeError("Missing required property 'block_time'")
            __props__.__dict__["block_time"] = block_time
            if block_type is None and not opts.urn:
                raise TypeError("Missing required property 'block_type'")
            __props__.__dict__["block_type"] = block_type
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["region"] = region
        super(RuleKnownAttackSource, __self__).__init__(
            'huaweicloud:Waf/ruleKnownAttackSource:RuleKnownAttackSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            block_time: Optional[pulumi.Input[_builtins.int]] = None,
            block_type: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'RuleKnownAttackSource':
        """
        Get an existing RuleKnownAttackSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] block_time: Specifies the blocking time in seconds.
               + If the prefix of `block_type` is **long**, the value ranges from `301` to `1,800`.
               + If the prefix of `block_type` is **short**, the value ranges from `1` to `300`.
        :param pulumi.Input[_builtins.str] block_type: Specifies the type of WAF known attack source rule.
               
               Changing this parameter will create a new resource.
               
               Valid values are as follows:
               + **long_ip_block**: Long-term IP address blocking.
               + **long_cookie_block**: Long-term Cookie blocking.
               + **long_params_block**: Long-term Params blocking.
               + **short_ip_block**: Short-term IP address blocking.
               + **short_cookie_block**: Short-term Cookie blocking.
               + **short_params_block**: Short-term Params blocking.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF known attack source rule.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF known attack
               source rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RuleKnownAttackSourceState.__new__(_RuleKnownAttackSourceState)

        __props__.__dict__["block_time"] = block_time
        __props__.__dict__["block_type"] = block_type
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["region"] = region
        return RuleKnownAttackSource(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="blockTime")
    def block_time(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the blocking time in seconds.
        + If the prefix of `block_type` is **long**, the value ranges from `301` to `1,800`.
        + If the prefix of `block_type` is **short**, the value ranges from `1` to `300`.
        """
        return pulumi.get(self, "block_time")

    @_builtins.property
    @pulumi.getter(name="blockType")
    def block_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of WAF known attack source rule.

        Changing this parameter will create a new resource.

        Valid values are as follows:
        + **long_ip_block**: Long-term IP address blocking.
        + **long_cookie_block**: Long-term Cookie blocking.
        + **long_params_block**: Long-term Params blocking.
        + **short_ip_block**: Short-term IP address blocking.
        + **short_cookie_block**: Short-term Cookie blocking.
        + **short_params_block**: Short-term Params blocking.
        """
        return pulumi.get(self, "block_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of WAF known attack source rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF known attack
        source rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

