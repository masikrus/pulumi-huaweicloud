# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOverviewsClassificationResult',
    'AwaitableGetOverviewsClassificationResult',
    'get_overviews_classification',
    'get_overviews_classification_output',
]

@pulumi.output_type
class GetOverviewsClassificationResult:
    """
    A collection of values returned by getOverviewsClassification.
    """
    def __init__(__self__, attack_types=None, domains=None, enterprise_project_id=None, from_=None, geos=None, hosts=None, id=None, instances=None, ips=None, region=None, to=None, top=None, urls=None):
        if attack_types and not isinstance(attack_types, list):
            raise TypeError("Expected argument 'attack_types' to be a list")
        pulumi.set(__self__, "attack_types", attack_types)
        if domains and not isinstance(domains, list):
            raise TypeError("Expected argument 'domains' to be a list")
        pulumi.set(__self__, "domains", domains)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if from_ and not isinstance(from_, int):
            raise TypeError("Expected argument 'from_' to be a int")
        pulumi.set(__self__, "from_", from_)
        if geos and not isinstance(geos, list):
            raise TypeError("Expected argument 'geos' to be a list")
        pulumi.set(__self__, "geos", geos)
        if hosts and not isinstance(hosts, str):
            raise TypeError("Expected argument 'hosts' to be a str")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, str):
            raise TypeError("Expected argument 'instances' to be a str")
        pulumi.set(__self__, "instances", instances)
        if ips and not isinstance(ips, list):
            raise TypeError("Expected argument 'ips' to be a list")
        pulumi.set(__self__, "ips", ips)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if to and not isinstance(to, int):
            raise TypeError("Expected argument 'to' to be a int")
        pulumi.set(__self__, "to", to)
        if top and not isinstance(top, int):
            raise TypeError("Expected argument 'top' to be a int")
        pulumi.set(__self__, "top", top)
        if urls and not isinstance(urls, list):
            raise TypeError("Expected argument 'urls' to be a list")
        pulumi.set(__self__, "urls", urls)

    @_builtins.property
    @pulumi.getter(name="attackTypes")
    def attack_types(self) -> Sequence['outputs.GetOverviewsClassificationAttackTypeResult']:
        """
        The attack event distribution.
        """
        return pulumi.get(self, "attack_types")

    @_builtins.property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.GetOverviewsClassificationDomainResult']:
        """
        The attacked domain.
        """
        return pulumi.get(self, "domains")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="from")
    def from_(self) -> _builtins.int:
        return pulumi.get(self, "from_")

    @_builtins.property
    @pulumi.getter
    def geos(self) -> Sequence['outputs.GetOverviewsClassificationGeoResult']:
        """
        The attacking source region.
        """
        return pulumi.get(self, "geos")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Sequence['outputs.GetOverviewsClassificationIpResult']:
        """
        The attacking source IP address.
        """
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def to(self) -> _builtins.int:
        return pulumi.get(self, "to")

    @_builtins.property
    @pulumi.getter
    def top(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "top")

    @_builtins.property
    @pulumi.getter
    def urls(self) -> Sequence['outputs.GetOverviewsClassificationUrlResult']:
        """
        The attacking URL.
        """
        return pulumi.get(self, "urls")


class AwaitableGetOverviewsClassificationResult(GetOverviewsClassificationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOverviewsClassificationResult(
            attack_types=self.attack_types,
            domains=self.domains,
            enterprise_project_id=self.enterprise_project_id,
            from_=self.from_,
            geos=self.geos,
            hosts=self.hosts,
            id=self.id,
            instances=self.instances,
            ips=self.ips,
            region=self.region,
            to=self.to,
            top=self.top,
            urls=self.urls)


def get_overviews_classification(enterprise_project_id: Optional[_builtins.str] = None,
                                 from_: Optional[_builtins.int] = None,
                                 hosts: Optional[_builtins.str] = None,
                                 instances: Optional[_builtins.str] = None,
                                 region: Optional[_builtins.str] = None,
                                 to: Optional[_builtins.int] = None,
                                 top: Optional[_builtins.int] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOverviewsClassificationResult:
    """
    Use this data source to get top security statistics by category.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Waf.get_overviews_classification(from_=start_time,
        to=end_time)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           If you want to query resources under all enterprise projects, set this parameter to **all_granted_eps**.
    :param _builtins.int from_: Specifies the query start time.
           The format is 13-digit timestamp in millisecond.
    :param _builtins.str hosts: Specifies the ID of the domain.
    :param _builtins.str instances: Specifies the ID of the instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.int to: Specifies the query end time.
           The format is 13-digit timestamp in millisecond.
           
           > The parameters `from` and `to` must be used together.
    :param _builtins.int top: The first several results to query.
           The valid value ranges from `1` to `10`. Defaults to `5`.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['from'] = from_
    __args__['hosts'] = hosts
    __args__['instances'] = instances
    __args__['region'] = region
    __args__['to'] = to
    __args__['top'] = top
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Waf/getOverviewsClassification:getOverviewsClassification', __args__, opts=opts, typ=GetOverviewsClassificationResult).value

    return AwaitableGetOverviewsClassificationResult(
        attack_types=pulumi.get(__ret__, 'attack_types'),
        domains=pulumi.get(__ret__, 'domains'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        from_=pulumi.get(__ret__, 'from_'),
        geos=pulumi.get(__ret__, 'geos'),
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        ips=pulumi.get(__ret__, 'ips'),
        region=pulumi.get(__ret__, 'region'),
        to=pulumi.get(__ret__, 'to'),
        top=pulumi.get(__ret__, 'top'),
        urls=pulumi.get(__ret__, 'urls'))
def get_overviews_classification_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        from_: Optional[pulumi.Input[_builtins.int]] = None,
                                        hosts: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        instances: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        to: Optional[pulumi.Input[_builtins.int]] = None,
                                        top: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOverviewsClassificationResult]:
    """
    Use this data source to get top security statistics by category.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Waf.get_overviews_classification(from_=start_time,
        to=end_time)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           If you want to query resources under all enterprise projects, set this parameter to **all_granted_eps**.
    :param _builtins.int from_: Specifies the query start time.
           The format is 13-digit timestamp in millisecond.
    :param _builtins.str hosts: Specifies the ID of the domain.
    :param _builtins.str instances: Specifies the ID of the instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.int to: Specifies the query end time.
           The format is 13-digit timestamp in millisecond.
           
           > The parameters `from` and `to` must be used together.
    :param _builtins.int top: The first several results to query.
           The valid value ranges from `1` to `10`. Defaults to `5`.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['from'] = from_
    __args__['hosts'] = hosts
    __args__['instances'] = instances
    __args__['region'] = region
    __args__['to'] = to
    __args__['top'] = top
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Waf/getOverviewsClassification:getOverviewsClassification', __args__, opts=opts, typ=GetOverviewsClassificationResult)
    return __ret__.apply(lambda __response__: GetOverviewsClassificationResult(
        attack_types=pulumi.get(__response__, 'attack_types'),
        domains=pulumi.get(__response__, 'domains'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        from_=pulumi.get(__response__, 'from_'),
        geos=pulumi.get(__response__, 'geos'),
        hosts=pulumi.get(__response__, 'hosts'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        ips=pulumi.get(__response__, 'ips'),
        region=pulumi.get(__response__, 'region'),
        to=pulumi.get(__response__, 'to'),
        top=pulumi.get(__response__, 'top'),
        urls=pulumi.get(__response__, 'urls')))
