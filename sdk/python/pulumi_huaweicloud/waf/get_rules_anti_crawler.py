# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRulesAntiCrawlerResult',
    'AwaitableGetRulesAntiCrawlerResult',
    'get_rules_anti_crawler',
    'get_rules_anti_crawler_output',
]

@pulumi.output_type
class GetRulesAntiCrawlerResult:
    """
    A collection of values returned by getRulesAntiCrawler.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, name=None, policy_id=None, protection_mode=None, region=None, rule_id=None, rules=None, status=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if protection_mode and not isinstance(protection_mode, str):
            raise TypeError("Expected argument 'protection_mode' to be a str")
        pulumi.set(__self__, "protection_mode", protection_mode)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the anti crawler rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The ID of the policy to which the anti crawler rule belongs.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[_builtins.str]:
        """
        The protection mode of the anti crawler rule.
        """
        return pulumi.get(self, "protection_mode")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetRulesAntiCrawlerRuleResult']:
        """
        The list of anti crawler rules.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the anti crawler rule.
        """
        return pulumi.get(self, "status")


class AwaitableGetRulesAntiCrawlerResult(GetRulesAntiCrawlerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRulesAntiCrawlerResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            policy_id=self.policy_id,
            protection_mode=self.protection_mode,
            region=self.region,
            rule_id=self.rule_id,
            rules=self.rules,
            status=self.status)


def get_rules_anti_crawler(enterprise_project_id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           policy_id: Optional[_builtins.str] = None,
                           protection_mode: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           rule_id: Optional[_builtins.str] = None,
                           status: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRulesAntiCrawlerResult:
    """
    Use this data source to get a list of anti crawler rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_id = config.require_object("policyId")
    rule_id = config.require_object("ruleId")
    test = huaweicloud.Waf.get_rules_anti_crawler(policy_id=policy_id,
        rule_id=rule_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the protection policy belongs.
           If omitted, will query the anti crawler rules under the default enterprise project for enterprise users.
    :param _builtins.str name: Specifies the name of the anti crawler rule.
    :param _builtins.str policy_id: Specifies the ID of the policy to which the anti crawler rules belong.
    :param _builtins.str protection_mode: Specifies the protection mode of the anti crawler rule.
           The valid values are as follows:
           + **anticrawler_except_url**: All paths are protected except the one specified in the queried anti crawler rules.
           + **anticrawler_specific_url**: The specified path is protected in the queried anti crawler rules.
           
           > If omitted, the API default query the anti crawler rules in **anticrawler_except_url** protection mode.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the anti crawler rule.
    :param _builtins.str status: Specifies the status of the anti crawler rule.
           The valid values are as follows:
           + **0**: The anti crawler rule is disabled.
           + **1**: The anti crawler rule is active.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['policyId'] = policy_id
    __args__['protectionMode'] = protection_mode
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Waf/getRulesAntiCrawler:getRulesAntiCrawler', __args__, opts=opts, typ=GetRulesAntiCrawlerResult).value

    return AwaitableGetRulesAntiCrawlerResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        protection_mode=pulumi.get(__ret__, 'protection_mode'),
        region=pulumi.get(__ret__, 'region'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rules=pulumi.get(__ret__, 'rules'),
        status=pulumi.get(__ret__, 'status'))
def get_rules_anti_crawler_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  protection_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRulesAntiCrawlerResult]:
    """
    Use this data source to get a list of anti crawler rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_id = config.require_object("policyId")
    rule_id = config.require_object("ruleId")
    test = huaweicloud.Waf.get_rules_anti_crawler(policy_id=policy_id,
        rule_id=rule_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID to which the protection policy belongs.
           If omitted, will query the anti crawler rules under the default enterprise project for enterprise users.
    :param _builtins.str name: Specifies the name of the anti crawler rule.
    :param _builtins.str policy_id: Specifies the ID of the policy to which the anti crawler rules belong.
    :param _builtins.str protection_mode: Specifies the protection mode of the anti crawler rule.
           The valid values are as follows:
           + **anticrawler_except_url**: All paths are protected except the one specified in the queried anti crawler rules.
           + **anticrawler_specific_url**: The specified path is protected in the queried anti crawler rules.
           
           > If omitted, the API default query the anti crawler rules in **anticrawler_except_url** protection mode.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_id: Specifies the ID of the anti crawler rule.
    :param _builtins.str status: Specifies the status of the anti crawler rule.
           The valid values are as follows:
           + **0**: The anti crawler rule is disabled.
           + **1**: The anti crawler rule is active.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['policyId'] = policy_id
    __args__['protectionMode'] = protection_mode
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Waf/getRulesAntiCrawler:getRulesAntiCrawler', __args__, opts=opts, typ=GetRulesAntiCrawlerResult)
    return __ret__.apply(lambda __response__: GetRulesAntiCrawlerResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        protection_mode=pulumi.get(__response__, 'protection_mode'),
        region=pulumi.get(__response__, 'region'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        rules=pulumi.get(__response__, 'rules'),
        status=pulumi.get(__response__, 'status')))
