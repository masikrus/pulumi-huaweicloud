# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['RuleInformationLeakagePreventionArgs', 'RuleInformationLeakagePrevention']

@pulumi.input_type
class RuleInformationLeakagePreventionArgs:
    def __init__(__self__, *,
                 contents: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 path: pulumi.Input[_builtins.str],
                 policy_id: pulumi.Input[_builtins.str],
                 protective_action: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RuleInformationLeakagePrevention resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] contents: Specifies the rule contents.
               + If `type` is set to **code**, valid values are **400**, **401**, **402**, **403**, **404**, **405**, **500**,
               **501**, **502**, **503**, **504** and **507**.
               + If `type` is set to **sensitive**, valid values are **phone**, **id_card** and **email**.
        :param pulumi.Input[_builtins.str] path: Specifies the path to which the rule applies. The field value needs to be prefixed
               with a slash, such as `/xxx/xxx` or `/xxx/xxx*`. The asterisk (*) refers to using the path name as a prefix.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protective_action: Specifies the protective action. Valid values are **log** and **block**.
        :param pulumi.Input[_builtins.str] type: Specifies the type of WAF information leakage prevention rule. The value can be **code**
               for response code or **sensitive** for sensitive information.
        :param pulumi.Input[_builtins.str] description: Specifies the rule description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF information leakage
               prevention rule. For enterprise users, if omitted, default enterprise project will be used.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "protective_action", protective_action)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def contents(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the rule contents.
        + If `type` is set to **code**, valid values are **400**, **401**, **402**, **403**, **404**, **405**, **500**,
        **501**, **502**, **503**, **504** and **507**.
        + If `type` is set to **sensitive**, valid values are **phone**, **id_card** and **email**.
        """
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "contents", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the path to which the rule applies. The field value needs to be prefixed
        with a slash, such as `/xxx/xxx` or `/xxx/xxx*`. The asterisk (*) refers to using the path name as a prefix.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="protectiveAction")
    def protective_action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protective action. Valid values are **log** and **block**.
        """
        return pulumi.get(self, "protective_action")

    @protective_action.setter
    def protective_action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protective_action", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of WAF information leakage prevention rule. The value can be **code**
        for response code or **sensitive** for sensitive information.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF information leakage
        prevention rule. For enterprise users, if omitted, default enterprise project will be used.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RuleInformationLeakagePreventionState:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protective_action: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RuleInformationLeakagePrevention resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] contents: Specifies the rule contents.
               + If `type` is set to **code**, valid values are **400**, **401**, **402**, **403**, **404**, **405**, **500**,
               **501**, **502**, **503**, **504** and **507**.
               + If `type` is set to **sensitive**, valid values are **phone**, **id_card** and **email**.
        :param pulumi.Input[_builtins.str] description: Specifies the rule description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF information leakage
               prevention rule. For enterprise users, if omitted, default enterprise project will be used.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] path: Specifies the path to which the rule applies. The field value needs to be prefixed
               with a slash, such as `/xxx/xxx` or `/xxx/xxx*`. The asterisk (*) refers to using the path name as a prefix.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protective_action: Specifies the protective action. Valid values are **log** and **block**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: The rule status.
        :param pulumi.Input[_builtins.str] type: Specifies the type of WAF information leakage prevention rule. The value can be **code**
               for response code or **sensitive** for sensitive information.
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protective_action is not None:
            pulumi.set(__self__, "protective_action", protective_action)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the rule contents.
        + If `type` is set to **code**, valid values are **400**, **401**, **402**, **403**, **404**, **405**, **500**,
        **501**, **502**, **503**, **504** and **507**.
        + If `type` is set to **sensitive**, valid values are **phone**, **id_card** and **email**.
        """
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "contents", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF information leakage
        prevention rule. For enterprise users, if omitted, default enterprise project will be used.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path to which the rule applies. The field value needs to be prefixed
        with a slash, such as `/xxx/xxx` or `/xxx/xxx*`. The asterisk (*) refers to using the path name as a prefix.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="protectiveAction")
    def protective_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protective action. Valid values are **log** and **block**.
        """
        return pulumi.get(self, "protective_action")

    @protective_action.setter
    def protective_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protective_action", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The rule status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of WAF information leakage prevention rule. The value can be **code**
        for response code or **sensitive** for sensitive information.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Waf/ruleInformationLeakagePrevention:RuleInformationLeakagePrevention")
class RuleInformationLeakagePrevention(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protective_action: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a WAF rule information leakage prevention resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The information leakage prevention rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.waf.RuleInformationLeakagePrevention("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            path="/test/path",
            type="sensitive",
            contents=[
                "phone",
                "id_card",
            ],
            protective_action="block",
            description="test description")
        ```

        ## Import

        There are two ways to import WAF rule information leakage prevention state.

        * Using `policy_id` and `rule_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleInformationLeakagePrevention:RuleInformationLeakagePrevention test <policy_id>/<rule_id>
        ```

        * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleInformationLeakagePrevention:RuleInformationLeakagePrevention test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] contents: Specifies the rule contents.
               + If `type` is set to **code**, valid values are **400**, **401**, **402**, **403**, **404**, **405**, **500**,
               **501**, **502**, **503**, **504** and **507**.
               + If `type` is set to **sensitive**, valid values are **phone**, **id_card** and **email**.
        :param pulumi.Input[_builtins.str] description: Specifies the rule description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF information leakage
               prevention rule. For enterprise users, if omitted, default enterprise project will be used.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] path: Specifies the path to which the rule applies. The field value needs to be prefixed
               with a slash, such as `/xxx/xxx` or `/xxx/xxx*`. The asterisk (*) refers to using the path name as a prefix.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protective_action: Specifies the protective action. Valid values are **log** and **block**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of WAF information leakage prevention rule. The value can be **code**
               for response code or **sensitive** for sensitive information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuleInformationLeakagePreventionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a WAF rule information leakage prevention resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The information leakage prevention rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.waf.RuleInformationLeakagePrevention("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            path="/test/path",
            type="sensitive",
            contents=[
                "phone",
                "id_card",
            ],
            protective_action="block",
            description="test description")
        ```

        ## Import

        There are two ways to import WAF rule information leakage prevention state.

        * Using `policy_id` and `rule_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleInformationLeakagePrevention:RuleInformationLeakagePrevention test <policy_id>/<rule_id>
        ```

        * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleInformationLeakagePrevention:RuleInformationLeakagePrevention test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param RuleInformationLeakagePreventionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuleInformationLeakagePreventionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protective_action: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuleInformationLeakagePreventionArgs.__new__(RuleInformationLeakagePreventionArgs)

            if contents is None and not opts.urn:
                raise TypeError("Missing required property 'contents'")
            __props__.__dict__["contents"] = contents
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            if protective_action is None and not opts.urn:
                raise TypeError("Missing required property 'protective_action'")
            __props__.__dict__["protective_action"] = protective_action
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["status"] = None
        super(RuleInformationLeakagePrevention, __self__).__init__(
            'huaweicloud:Waf/ruleInformationLeakagePrevention:RuleInformationLeakagePrevention',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            contents: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            protective_action: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.int]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'RuleInformationLeakagePrevention':
        """
        Get an existing RuleInformationLeakagePrevention resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] contents: Specifies the rule contents.
               + If `type` is set to **code**, valid values are **400**, **401**, **402**, **403**, **404**, **405**, **500**,
               **501**, **502**, **503**, **504** and **507**.
               + If `type` is set to **sensitive**, valid values are **phone**, **id_card** and **email**.
        :param pulumi.Input[_builtins.str] description: Specifies the rule description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF information leakage
               prevention rule. For enterprise users, if omitted, default enterprise project will be used.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] path: Specifies the path to which the rule applies. The field value needs to be prefixed
               with a slash, such as `/xxx/xxx` or `/xxx/xxx*`. The asterisk (*) refers to using the path name as a prefix.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protective_action: Specifies the protective action. Valid values are **log** and **block**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: The rule status.
        :param pulumi.Input[_builtins.str] type: Specifies the type of WAF information leakage prevention rule. The value can be **code**
               for response code or **sensitive** for sensitive information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RuleInformationLeakagePreventionState.__new__(_RuleInformationLeakagePreventionState)

        __props__.__dict__["contents"] = contents
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["path"] = path
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["protective_action"] = protective_action
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return RuleInformationLeakagePrevention(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def contents(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the rule contents.
        + If `type` is set to **code**, valid values are **400**, **401**, **402**, **403**, **404**, **405**, **500**,
        **501**, **502**, **503**, **504** and **507**.
        + If `type` is set to **sensitive**, valid values are **phone**, **id_card** and **email**.
        """
        return pulumi.get(self, "contents")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the rule description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF information leakage
        prevention rule. For enterprise users, if omitted, default enterprise project will be used.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the path to which the rule applies. The field value needs to be prefixed
        with a slash, such as `/xxx/xxx` or `/xxx/xxx*`. The asterisk (*) refers to using the path name as a prefix.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="protectiveAction")
    def protective_action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the protective action. Valid values are **log** and **block**.
        """
        return pulumi.get(self, "protective_action")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.int]:
        """
        The rule status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of WAF information leakage prevention rule. The value can be **code**
        for response code or **sensitive** for sensitive information.
        """
        return pulumi.get(self, "type")

