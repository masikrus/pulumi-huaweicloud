# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyArgs', 'Policy']

@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 deep_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 full_detection: Optional[pulumi.Input[_builtins.bool]] = None,
                 header_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
                 level: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyOptionArgs']]]] = None,
                 protection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 robot_action: Optional[pulumi.Input[_builtins.str]] = None,
                 shiro_decryption_check: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a Policy resource.
        :param pulumi.Input[_builtins.bool] deep_inspection: Specifies the deep inspection in basic web protection. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF policy.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] full_detection: Specifies the detection mode in precise protection. Defaults to **false**.
               + **false**: Instant detection. When a request hits the blocking conditions in precise protection, WAF terminates
               checks and blocks the request immediately.
               + **true**: Full detection. If a request hits the blocking conditions in precise protection, WAF does not block the
               request immediately. Instead, it blocks the requests until other checks are finished.
        :param pulumi.Input[_builtins.bool] header_inspection: Specifies the header inspection in basic web protection. Defaults to **false**.
        :param pulumi.Input[_builtins.int] level: Specifies the protection level. Defaults to `2`. Valid values are:
        :param pulumi.Input[_builtins.str] name: Specifies the policy name. The maximum length is `256` characters. Only digits, letters,
               underscores (_), and hyphens (-) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyOptionArgs']]] options: Specifies the switch options of the protection item in the policy.
               The options structure is documented below.
               
               <a name="Policy_Options"></a>
               The `options` block supports:
        :param pulumi.Input[_builtins.str] protection_mode: Specifies the protective action after a rule is matched. Defaults to **log**.
               Valid values are:
               + **block**: WAF blocks and logs detected attacks.
               + **log**: WAF logs detected attacks only.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the WAF policy resource. If omitted, the
               provider-level region will be used. Changing this setting will push a new certificate.
        :param pulumi.Input[_builtins.str] robot_action: Specifies the protective actions for each rule in anti-crawler protection.
               Defaults to **log**. Valid values are:
               + **block**: WAF blocks discovered attacks.
               + **log**: WAF only logs discovered attacks.
        :param pulumi.Input[_builtins.bool] shiro_decryption_check: Specifies the shiro decryption check in basic web protection.
               Defaults to **false**.
        """
        if deep_inspection is not None:
            pulumi.set(__self__, "deep_inspection", deep_inspection)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if full_detection is not None:
            pulumi.set(__self__, "full_detection", full_detection)
        if header_inspection is not None:
            pulumi.set(__self__, "header_inspection", header_inspection)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if robot_action is not None:
            pulumi.set(__self__, "robot_action", robot_action)
        if shiro_decryption_check is not None:
            pulumi.set(__self__, "shiro_decryption_check", shiro_decryption_check)

    @_builtins.property
    @pulumi.getter(name="deepInspection")
    def deep_inspection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the deep inspection in basic web protection. Defaults to **false**.
        """
        return pulumi.get(self, "deep_inspection")

    @deep_inspection.setter
    def deep_inspection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deep_inspection", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF policy.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="fullDetection")
    def full_detection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the detection mode in precise protection. Defaults to **false**.
        + **false**: Instant detection. When a request hits the blocking conditions in precise protection, WAF terminates
        checks and blocks the request immediately.
        + **true**: Full detection. If a request hits the blocking conditions in precise protection, WAF does not block the
        request immediately. Instead, it blocks the requests until other checks are finished.
        """
        return pulumi.get(self, "full_detection")

    @full_detection.setter
    def full_detection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "full_detection", value)

    @_builtins.property
    @pulumi.getter(name="headerInspection")
    def header_inspection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the header inspection in basic web protection. Defaults to **false**.
        """
        return pulumi.get(self, "header_inspection")

    @header_inspection.setter
    def header_inspection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "header_inspection", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the protection level. Defaults to `2`. Valid values are:
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy name. The maximum length is `256` characters. Only digits, letters,
        underscores (_), and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyOptionArgs']]]]:
        """
        Specifies the switch options of the protection item in the policy.
        The options structure is documented below.

        <a name="Policy_Options"></a>
        The `options` block supports:
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @_builtins.property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protective action after a rule is matched. Defaults to **log**.
        Valid values are:
        + **block**: WAF blocks and logs detected attacks.
        + **log**: WAF logs detected attacks only.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protection_mode", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the WAF policy resource. If omitted, the
        provider-level region will be used. Changing this setting will push a new certificate.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="robotAction")
    def robot_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protective actions for each rule in anti-crawler protection.
        Defaults to **log**. Valid values are:
        + **block**: WAF blocks discovered attacks.
        + **log**: WAF only logs discovered attacks.
        """
        return pulumi.get(self, "robot_action")

    @robot_action.setter
    def robot_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "robot_action", value)

    @_builtins.property
    @pulumi.getter(name="shiroDecryptionCheck")
    def shiro_decryption_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the shiro decryption check in basic web protection.
        Defaults to **false**.
        """
        return pulumi.get(self, "shiro_decryption_check")

    @shiro_decryption_check.setter
    def shiro_decryption_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shiro_decryption_check", value)


@pulumi.input_type
class _PolicyState:
    def __init__(__self__, *,
                 bind_hosts: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBindHostArgs']]]] = None,
                 deep_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 full_detection: Optional[pulumi.Input[_builtins.bool]] = None,
                 header_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
                 level: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyOptionArgs']]]] = None,
                 protection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 robot_action: Optional[pulumi.Input[_builtins.str]] = None,
                 shiro_decryption_check: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering Policy resources.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyBindHostArgs']]] bind_hosts: The protection switches. The options object structure is documented below.
        :param pulumi.Input[_builtins.bool] deep_inspection: Specifies the deep inspection in basic web protection. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF policy.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] full_detection: Specifies the detection mode in precise protection. Defaults to **false**.
               + **false**: Instant detection. When a request hits the blocking conditions in precise protection, WAF terminates
               checks and blocks the request immediately.
               + **true**: Full detection. If a request hits the blocking conditions in precise protection, WAF does not block the
               request immediately. Instead, it blocks the requests until other checks are finished.
        :param pulumi.Input[_builtins.bool] header_inspection: Specifies the header inspection in basic web protection. Defaults to **false**.
        :param pulumi.Input[_builtins.int] level: Specifies the protection level. Defaults to `2`. Valid values are:
        :param pulumi.Input[_builtins.str] name: Specifies the policy name. The maximum length is `256` characters. Only digits, letters,
               underscores (_), and hyphens (-) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyOptionArgs']]] options: Specifies the switch options of the protection item in the policy.
               The options structure is documented below.
               
               <a name="Policy_Options"></a>
               The `options` block supports:
        :param pulumi.Input[_builtins.str] protection_mode: Specifies the protective action after a rule is matched. Defaults to **log**.
               Valid values are:
               + **block**: WAF blocks and logs detected attacks.
               + **log**: WAF logs detected attacks only.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the WAF policy resource. If omitted, the
               provider-level region will be used. Changing this setting will push a new certificate.
        :param pulumi.Input[_builtins.str] robot_action: Specifies the protective actions for each rule in anti-crawler protection.
               Defaults to **log**. Valid values are:
               + **block**: WAF blocks discovered attacks.
               + **log**: WAF only logs discovered attacks.
        :param pulumi.Input[_builtins.bool] shiro_decryption_check: Specifies the shiro decryption check in basic web protection.
               Defaults to **false**.
        """
        if bind_hosts is not None:
            pulumi.set(__self__, "bind_hosts", bind_hosts)
        if deep_inspection is not None:
            pulumi.set(__self__, "deep_inspection", deep_inspection)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if full_detection is not None:
            pulumi.set(__self__, "full_detection", full_detection)
        if header_inspection is not None:
            pulumi.set(__self__, "header_inspection", header_inspection)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if robot_action is not None:
            pulumi.set(__self__, "robot_action", robot_action)
        if shiro_decryption_check is not None:
            pulumi.set(__self__, "shiro_decryption_check", shiro_decryption_check)

    @_builtins.property
    @pulumi.getter(name="bindHosts")
    def bind_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBindHostArgs']]]]:
        """
        The protection switches. The options object structure is documented below.
        """
        return pulumi.get(self, "bind_hosts")

    @bind_hosts.setter
    def bind_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBindHostArgs']]]]):
        pulumi.set(self, "bind_hosts", value)

    @_builtins.property
    @pulumi.getter(name="deepInspection")
    def deep_inspection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the deep inspection in basic web protection. Defaults to **false**.
        """
        return pulumi.get(self, "deep_inspection")

    @deep_inspection.setter
    def deep_inspection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deep_inspection", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF policy.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="fullDetection")
    def full_detection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the detection mode in precise protection. Defaults to **false**.
        + **false**: Instant detection. When a request hits the blocking conditions in precise protection, WAF terminates
        checks and blocks the request immediately.
        + **true**: Full detection. If a request hits the blocking conditions in precise protection, WAF does not block the
        request immediately. Instead, it blocks the requests until other checks are finished.
        """
        return pulumi.get(self, "full_detection")

    @full_detection.setter
    def full_detection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "full_detection", value)

    @_builtins.property
    @pulumi.getter(name="headerInspection")
    def header_inspection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the header inspection in basic web protection. Defaults to **false**.
        """
        return pulumi.get(self, "header_inspection")

    @header_inspection.setter
    def header_inspection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "header_inspection", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the protection level. Defaults to `2`. Valid values are:
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy name. The maximum length is `256` characters. Only digits, letters,
        underscores (_), and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyOptionArgs']]]]:
        """
        Specifies the switch options of the protection item in the policy.
        The options structure is documented below.

        <a name="Policy_Options"></a>
        The `options` block supports:
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @_builtins.property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protective action after a rule is matched. Defaults to **log**.
        Valid values are:
        + **block**: WAF blocks and logs detected attacks.
        + **log**: WAF logs detected attacks only.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protection_mode", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the WAF policy resource. If omitted, the
        provider-level region will be used. Changing this setting will push a new certificate.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="robotAction")
    def robot_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protective actions for each rule in anti-crawler protection.
        Defaults to **log**. Valid values are:
        + **block**: WAF blocks discovered attacks.
        + **log**: WAF only logs discovered attacks.
        """
        return pulumi.get(self, "robot_action")

    @robot_action.setter
    def robot_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "robot_action", value)

    @_builtins.property
    @pulumi.getter(name="shiroDecryptionCheck")
    def shiro_decryption_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the shiro decryption check in basic web protection.
        Defaults to **false**.
        """
        return pulumi.get(self, "shiro_decryption_check")

    @shiro_decryption_check.setter
    def shiro_decryption_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shiro_decryption_check", value)


@pulumi.type_token("huaweicloud:Waf/policy:Policy")
class Policy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deep_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 full_detection: Optional[pulumi.Input[_builtins.bool]] = None,
                 header_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
                 level: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyOptionArgs', 'PolicyOptionArgsDict']]]]] = None,
                 protection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 robot_action: Optional[pulumi.Input[_builtins.str]] = None,
                 shiro_decryption_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Manages a WAF policy resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The policy resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.waf.Policy("test",
            name="test_policy",
            protection_mode="log",
            robot_action="block",
            level=2,
            deep_inspection=True,
            header_inspection=True,
            shiro_decryption_check=True,
            enterprise_project_id=enterprise_project_id,
            options=[{
                "crawler_scanner": True,
                "crawler_script": True,
                "false_alarm_masking": True,
                "general_check": True,
                "geolocation_access_control": True,
                "information_leakage_prevention": True,
                "known_attack_source": True,
                "precise_protection": True,
                "web_tamper_protection": True,
                "webshell": True,
            }])
        ```

        ## Import

        There are two ways to import WAF policy state.

        * Using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/policy:Policy test <id>
        ```

        * Using `id` and `enterprise_project_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/policy:Policy test <id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] deep_inspection: Specifies the deep inspection in basic web protection. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF policy.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] full_detection: Specifies the detection mode in precise protection. Defaults to **false**.
               + **false**: Instant detection. When a request hits the blocking conditions in precise protection, WAF terminates
               checks and blocks the request immediately.
               + **true**: Full detection. If a request hits the blocking conditions in precise protection, WAF does not block the
               request immediately. Instead, it blocks the requests until other checks are finished.
        :param pulumi.Input[_builtins.bool] header_inspection: Specifies the header inspection in basic web protection. Defaults to **false**.
        :param pulumi.Input[_builtins.int] level: Specifies the protection level. Defaults to `2`. Valid values are:
        :param pulumi.Input[_builtins.str] name: Specifies the policy name. The maximum length is `256` characters. Only digits, letters,
               underscores (_), and hyphens (-) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PolicyOptionArgs', 'PolicyOptionArgsDict']]]] options: Specifies the switch options of the protection item in the policy.
               The options structure is documented below.
               
               <a name="Policy_Options"></a>
               The `options` block supports:
        :param pulumi.Input[_builtins.str] protection_mode: Specifies the protective action after a rule is matched. Defaults to **log**.
               Valid values are:
               + **block**: WAF blocks and logs detected attacks.
               + **log**: WAF logs detected attacks only.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the WAF policy resource. If omitted, the
               provider-level region will be used. Changing this setting will push a new certificate.
        :param pulumi.Input[_builtins.str] robot_action: Specifies the protective actions for each rule in anti-crawler protection.
               Defaults to **log**. Valid values are:
               + **block**: WAF blocks discovered attacks.
               + **log**: WAF only logs discovered attacks.
        :param pulumi.Input[_builtins.bool] shiro_decryption_check: Specifies the shiro decryption check in basic web protection.
               Defaults to **false**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a WAF policy resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The policy resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.waf.Policy("test",
            name="test_policy",
            protection_mode="log",
            robot_action="block",
            level=2,
            deep_inspection=True,
            header_inspection=True,
            shiro_decryption_check=True,
            enterprise_project_id=enterprise_project_id,
            options=[{
                "crawler_scanner": True,
                "crawler_script": True,
                "false_alarm_masking": True,
                "general_check": True,
                "geolocation_access_control": True,
                "information_leakage_prevention": True,
                "known_attack_source": True,
                "precise_protection": True,
                "web_tamper_protection": True,
                "webshell": True,
            }])
        ```

        ## Import

        There are two ways to import WAF policy state.

        * Using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/policy:Policy test <id>
        ```

        * Using `id` and `enterprise_project_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/policy:Policy test <id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param PolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deep_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 full_detection: Optional[pulumi.Input[_builtins.bool]] = None,
                 header_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
                 level: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyOptionArgs', 'PolicyOptionArgsDict']]]]] = None,
                 protection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 robot_action: Optional[pulumi.Input[_builtins.str]] = None,
                 shiro_decryption_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyArgs.__new__(PolicyArgs)

            __props__.__dict__["deep_inspection"] = deep_inspection
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["full_detection"] = full_detection
            __props__.__dict__["header_inspection"] = header_inspection
            __props__.__dict__["level"] = level
            __props__.__dict__["name"] = name
            __props__.__dict__["options"] = options
            __props__.__dict__["protection_mode"] = protection_mode
            __props__.__dict__["region"] = region
            __props__.__dict__["robot_action"] = robot_action
            __props__.__dict__["shiro_decryption_check"] = shiro_decryption_check
            __props__.__dict__["bind_hosts"] = None
        super(Policy, __self__).__init__(
            'huaweicloud:Waf/policy:Policy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bind_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyBindHostArgs', 'PolicyBindHostArgsDict']]]]] = None,
            deep_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            full_detection: Optional[pulumi.Input[_builtins.bool]] = None,
            header_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
            level: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyOptionArgs', 'PolicyOptionArgsDict']]]]] = None,
            protection_mode: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            robot_action: Optional[pulumi.Input[_builtins.str]] = None,
            shiro_decryption_check: Optional[pulumi.Input[_builtins.bool]] = None) -> 'Policy':
        """
        Get an existing Policy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PolicyBindHostArgs', 'PolicyBindHostArgsDict']]]] bind_hosts: The protection switches. The options object structure is documented below.
        :param pulumi.Input[_builtins.bool] deep_inspection: Specifies the deep inspection in basic web protection. Defaults to **false**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF policy.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] full_detection: Specifies the detection mode in precise protection. Defaults to **false**.
               + **false**: Instant detection. When a request hits the blocking conditions in precise protection, WAF terminates
               checks and blocks the request immediately.
               + **true**: Full detection. If a request hits the blocking conditions in precise protection, WAF does not block the
               request immediately. Instead, it blocks the requests until other checks are finished.
        :param pulumi.Input[_builtins.bool] header_inspection: Specifies the header inspection in basic web protection. Defaults to **false**.
        :param pulumi.Input[_builtins.int] level: Specifies the protection level. Defaults to `2`. Valid values are:
        :param pulumi.Input[_builtins.str] name: Specifies the policy name. The maximum length is `256` characters. Only digits, letters,
               underscores (_), and hyphens (-) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PolicyOptionArgs', 'PolicyOptionArgsDict']]]] options: Specifies the switch options of the protection item in the policy.
               The options structure is documented below.
               
               <a name="Policy_Options"></a>
               The `options` block supports:
        :param pulumi.Input[_builtins.str] protection_mode: Specifies the protective action after a rule is matched. Defaults to **log**.
               Valid values are:
               + **block**: WAF blocks and logs detected attacks.
               + **log**: WAF logs detected attacks only.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the WAF policy resource. If omitted, the
               provider-level region will be used. Changing this setting will push a new certificate.
        :param pulumi.Input[_builtins.str] robot_action: Specifies the protective actions for each rule in anti-crawler protection.
               Defaults to **log**. Valid values are:
               + **block**: WAF blocks discovered attacks.
               + **log**: WAF only logs discovered attacks.
        :param pulumi.Input[_builtins.bool] shiro_decryption_check: Specifies the shiro decryption check in basic web protection.
               Defaults to **false**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyState.__new__(_PolicyState)

        __props__.__dict__["bind_hosts"] = bind_hosts
        __props__.__dict__["deep_inspection"] = deep_inspection
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["full_detection"] = full_detection
        __props__.__dict__["header_inspection"] = header_inspection
        __props__.__dict__["level"] = level
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["protection_mode"] = protection_mode
        __props__.__dict__["region"] = region
        __props__.__dict__["robot_action"] = robot_action
        __props__.__dict__["shiro_decryption_check"] = shiro_decryption_check
        return Policy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bindHosts")
    def bind_hosts(self) -> pulumi.Output[Sequence['outputs.PolicyBindHost']]:
        """
        The protection switches. The options object structure is documented below.
        """
        return pulumi.get(self, "bind_hosts")

    @_builtins.property
    @pulumi.getter(name="deepInspection")
    def deep_inspection(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies the deep inspection in basic web protection. Defaults to **false**.
        """
        return pulumi.get(self, "deep_inspection")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF policy.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="fullDetection")
    def full_detection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies the detection mode in precise protection. Defaults to **false**.
        + **false**: Instant detection. When a request hits the blocking conditions in precise protection, WAF terminates
        checks and blocks the request immediately.
        + **true**: Full detection. If a request hits the blocking conditions in precise protection, WAF does not block the
        request immediately. Instead, it blocks the requests until other checks are finished.
        """
        return pulumi.get(self, "full_detection")

    @_builtins.property
    @pulumi.getter(name="headerInspection")
    def header_inspection(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies the header inspection in basic web protection. Defaults to **false**.
        """
        return pulumi.get(self, "header_inspection")

    @_builtins.property
    @pulumi.getter
    def level(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the protection level. Defaults to `2`. Valid values are:
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy name. The maximum length is `256` characters. Only digits, letters,
        underscores (_), and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def options(self) -> pulumi.Output[Sequence['outputs.PolicyOption']]:
        """
        Specifies the switch options of the protection item in the policy.
        The options structure is documented below.

        <a name="Policy_Options"></a>
        The `options` block supports:
        """
        return pulumi.get(self, "options")

    @_builtins.property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the protective action after a rule is matched. Defaults to **log**.
        Valid values are:
        + **block**: WAF blocks and logs detected attacks.
        + **log**: WAF logs detected attacks only.
        """
        return pulumi.get(self, "protection_mode")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the WAF policy resource. If omitted, the
        provider-level region will be used. Changing this setting will push a new certificate.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="robotAction")
    def robot_action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the protective actions for each rule in anti-crawler protection.
        Defaults to **log**. Valid values are:
        + **block**: WAF blocks discovered attacks.
        + **log**: WAF only logs discovered attacks.
        """
        return pulumi.get(self, "robot_action")

    @_builtins.property
    @pulumi.getter(name="shiroDecryptionCheck")
    def shiro_decryption_check(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies the shiro decryption check in basic web protection.
        Defaults to **false**.
        """
        return pulumi.get(self, "shiro_decryption_check")

