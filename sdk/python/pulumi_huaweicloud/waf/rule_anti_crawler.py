# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RuleAntiCrawlerArgs', 'RuleAntiCrawler']

@pulumi.input_type
class RuleAntiCrawlerArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['RuleAntiCrawlerConditionArgs']]],
                 policy_id: pulumi.Input[_builtins.str],
                 priority: pulumi.Input[_builtins.int],
                 protection_mode: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RuleAntiCrawler resource.
        :param pulumi.Input[Sequence[pulumi.Input['RuleAntiCrawlerConditionArgs']]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] priority: Specifies the priority. A smaller value indicates a higher priority. If the value is
               the same, the rule is created earlier and the priority is higher. Value ranges from `0` to `65,535`.
        :param pulumi.Input[_builtins.str] protection_mode: Specifies the protection mode of WAF anti crawler rule.
               Changing this parameter will create a new resource. Valid values are as follows:
               + **anticrawler_specific_url**: Used to protect a specific path specified by the rule.
               + **anticrawler_except_url**: Used to protect all paths except the one specified by the rule.
               
               > All rules in the current mode will take effect, while rules in another mode will become invalid.
        :param pulumi.Input[_builtins.str] description: Specifies the rule description.
               
               <a name="RuleAntiCrawler_conditions"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF anti crawler rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name. The value should be a maximum of `128` characters. Only letters,
               digits, hyphens (-), underscores (_), colons (:) and periods (.) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protection_mode", protection_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['RuleAntiCrawlerConditionArgs']]]:
        """
        Specifies the match condition list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['RuleAntiCrawlerConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the priority. A smaller value indicates a higher priority. If the value is
        the same, the rule is created earlier and the priority is higher. Value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protection mode of WAF anti crawler rule.
        Changing this parameter will create a new resource. Valid values are as follows:
        + **anticrawler_specific_url**: Used to protect a specific path specified by the rule.
        + **anticrawler_except_url**: Used to protect all paths except the one specified by the rule.

        > All rules in the current mode will take effect, while rules in another mode will become invalid.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protection_mode", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule description.

        <a name="RuleAntiCrawler_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF anti crawler rule.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule name. The value should be a maximum of `128` characters. Only letters,
        digits, hyphens (-), underscores (_), colons (:) and periods (.) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RuleAntiCrawlerState:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleAntiCrawlerConditionArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 protection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering RuleAntiCrawler resources.
        :param pulumi.Input[Sequence[pulumi.Input['RuleAntiCrawlerConditionArgs']]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the rule description.
               
               <a name="RuleAntiCrawler_conditions"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF anti crawler rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name. The value should be a maximum of `128` characters. Only letters,
               digits, hyphens (-), underscores (_), colons (:) and periods (.) are allowed.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] priority: Specifies the priority. A smaller value indicates a higher priority. If the value is
               the same, the rule is created earlier and the priority is higher. Value ranges from `0` to `65,535`.
        :param pulumi.Input[_builtins.str] protection_mode: Specifies the protection mode of WAF anti crawler rule.
               Changing this parameter will create a new resource. Valid values are as follows:
               + **anticrawler_specific_url**: Used to protect a specific path specified by the rule.
               + **anticrawler_except_url**: Used to protect all paths except the one specified by the rule.
               
               > All rules in the current mode will take effect, while rules in another mode will become invalid.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: The rule status.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleAntiCrawlerConditionArgs']]]]:
        """
        Specifies the match condition list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleAntiCrawlerConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule description.

        <a name="RuleAntiCrawler_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF anti crawler rule.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule name. The value should be a maximum of `128` characters. Only letters,
        digits, hyphens (-), underscores (_), colons (:) and periods (.) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the priority. A smaller value indicates a higher priority. If the value is
        the same, the rule is created earlier and the priority is higher. Value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protection mode of WAF anti crawler rule.
        Changing this parameter will create a new resource. Valid values are as follows:
        + **anticrawler_specific_url**: Used to protect a specific path specified by the rule.
        + **anticrawler_except_url**: Used to protect all paths except the one specified by the rule.

        > All rules in the current mode will take effect, while rules in another mode will become invalid.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protection_mode", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The rule status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Waf/ruleAntiCrawler:RuleAntiCrawler")
class RuleAntiCrawler(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RuleAntiCrawlerConditionArgs', 'RuleAntiCrawlerConditionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 protection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a WAF rule anti crawler resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The anti crawler rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.waf.RuleAntiCrawler("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            name="test_name",
            protection_mode="anticrawler_specific_url",
            priority=100,
            description="test description",
            conditions=[
                {
                    "field": "user-agent",
                    "logic": "contain",
                    "content": "TR",
                },
                {
                    "field": "url",
                    "logic": "equal",
                    "content": "/test/path",
                },
            ])
        ```

        ## Import

        There are two ways to import WAF rule anti crawler state.

        * Using `policy_id` and `rule_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleAntiCrawler:RuleAntiCrawler test <policy_id>/<rule_id>
        ```

        * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleAntiCrawler:RuleAntiCrawler test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RuleAntiCrawlerConditionArgs', 'RuleAntiCrawlerConditionArgsDict']]]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the rule description.
               
               <a name="RuleAntiCrawler_conditions"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF anti crawler rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name. The value should be a maximum of `128` characters. Only letters,
               digits, hyphens (-), underscores (_), colons (:) and periods (.) are allowed.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] priority: Specifies the priority. A smaller value indicates a higher priority. If the value is
               the same, the rule is created earlier and the priority is higher. Value ranges from `0` to `65,535`.
        :param pulumi.Input[_builtins.str] protection_mode: Specifies the protection mode of WAF anti crawler rule.
               Changing this parameter will create a new resource. Valid values are as follows:
               + **anticrawler_specific_url**: Used to protect a specific path specified by the rule.
               + **anticrawler_except_url**: Used to protect all paths except the one specified by the rule.
               
               > All rules in the current mode will take effect, while rules in another mode will become invalid.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuleAntiCrawlerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a WAF rule anti crawler resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The anti crawler rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.waf.RuleAntiCrawler("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            name="test_name",
            protection_mode="anticrawler_specific_url",
            priority=100,
            description="test description",
            conditions=[
                {
                    "field": "user-agent",
                    "logic": "contain",
                    "content": "TR",
                },
                {
                    "field": "url",
                    "logic": "equal",
                    "content": "/test/path",
                },
            ])
        ```

        ## Import

        There are two ways to import WAF rule anti crawler state.

        * Using `policy_id` and `rule_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleAntiCrawler:RuleAntiCrawler test <policy_id>/<rule_id>
        ```

        * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleAntiCrawler:RuleAntiCrawler test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param RuleAntiCrawlerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuleAntiCrawlerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RuleAntiCrawlerConditionArgs', 'RuleAntiCrawlerConditionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 protection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuleAntiCrawlerArgs.__new__(RuleAntiCrawlerArgs)

            if conditions is None and not opts.urn:
                raise TypeError("Missing required property 'conditions'")
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            if priority is None and not opts.urn:
                raise TypeError("Missing required property 'priority'")
            __props__.__dict__["priority"] = priority
            if protection_mode is None and not opts.urn:
                raise TypeError("Missing required property 'protection_mode'")
            __props__.__dict__["protection_mode"] = protection_mode
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = None
        super(RuleAntiCrawler, __self__).__init__(
            'huaweicloud:Waf/ruleAntiCrawler:RuleAntiCrawler',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RuleAntiCrawlerConditionArgs', 'RuleAntiCrawlerConditionArgsDict']]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            priority: Optional[pulumi.Input[_builtins.int]] = None,
            protection_mode: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.int]] = None) -> 'RuleAntiCrawler':
        """
        Get an existing RuleAntiCrawler resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RuleAntiCrawlerConditionArgs', 'RuleAntiCrawlerConditionArgsDict']]]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the rule description.
               
               <a name="RuleAntiCrawler_conditions"></a>
               The `conditions` block supports:
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF anti crawler rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name. The value should be a maximum of `128` characters. Only letters,
               digits, hyphens (-), underscores (_), colons (:) and periods (.) are allowed.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] priority: Specifies the priority. A smaller value indicates a higher priority. If the value is
               the same, the rule is created earlier and the priority is higher. Value ranges from `0` to `65,535`.
        :param pulumi.Input[_builtins.str] protection_mode: Specifies the protection mode of WAF anti crawler rule.
               Changing this parameter will create a new resource. Valid values are as follows:
               + **anticrawler_specific_url**: Used to protect a specific path specified by the rule.
               + **anticrawler_except_url**: Used to protect all paths except the one specified by the rule.
               
               > All rules in the current mode will take effect, while rules in another mode will become invalid.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: The rule status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RuleAntiCrawlerState.__new__(_RuleAntiCrawlerState)

        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["priority"] = priority
        __props__.__dict__["protection_mode"] = protection_mode
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return RuleAntiCrawler(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.RuleAntiCrawlerCondition']]:
        """
        Specifies the match condition list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the rule description.

        <a name="RuleAntiCrawler_conditions"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF anti crawler rule.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the rule name. The value should be a maximum of `128` characters. Only letters,
        digits, hyphens (-), underscores (_), colons (:) and periods (.) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the priority. A smaller value indicates a higher priority. If the value is
        the same, the rule is created earlier and the priority is higher. Value ranges from `0` to `65,535`.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the protection mode of WAF anti crawler rule.
        Changing this parameter will create a new resource. Valid values are as follows:
        + **anticrawler_specific_url**: Used to protect a specific path specified by the rule.
        + **anticrawler_except_url**: Used to protect all paths except the one specified by the rule.

        > All rules in the current mode will take effect, while rules in another mode will become invalid.
        """
        return pulumi.get(self, "protection_mode")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.int]:
        """
        The rule status.
        """
        return pulumi.get(self, "status")

