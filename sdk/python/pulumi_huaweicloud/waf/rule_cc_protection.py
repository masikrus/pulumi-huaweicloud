# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RuleCcProtectionArgs', 'RuleCcProtection']

@pulumi.input_type
class RuleCcProtectionArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['RuleCcProtectionConditionArgs']]],
                 limit_num: pulumi.Input[_builtins.int],
                 limit_period: pulumi.Input[_builtins.int],
                 policy_id: pulumi.Input[_builtins.str],
                 protective_action: pulumi.Input[_builtins.str],
                 rate_limit_mode: pulumi.Input[_builtins.str],
                 all_waf_instances: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_page_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lock_time: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 other_user_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 page_content: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 request_aggregation: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 unlock_num: Optional[pulumi.Input[_builtins.int]] = None,
                 user_identifier: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RuleCcProtection resource.
        :param pulumi.Input[Sequence[pulumi.Input['RuleCcProtectionConditionArgs']]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.int] limit_num: Specifies the number of requests allowed from a web visitor in a rate limiting period.
               The value ranges from `1` to `2,147,483,647`.
        :param pulumi.Input[_builtins.int] limit_period: Specifies the rate limiting period. The value ranges from `1` to `3,600` in seconds.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID of WAF cc protection rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protective_action: Specifies the protective action taken when the number of requests reaches
               the upper limit. Valid values are as follows:
               + **captcha**: Verification code. The user needs to enter the correct verification code after blocking to restore the
               correct access page.
               + **block**: Block the requests.
               + **log**: Record only.
               + **dynamic_block**: Dynamic block the requests. If the request frequency exceeds the "speed limit frequency" during
               the previous speed limit cycle. In the next speed limit cycle, if the request frequency exceeds the
               "release frequency", it will be blocked.
        :param pulumi.Input[_builtins.str] rate_limit_mode: Specifies the rate limit mode. Valid values are as follows:
               + **ip**: A web visitor is identified by the IP address.
               + **cookie**: A web visitor is identified by the cookie key value.
               + **header**: A web visitor is identified by the header key value.
               + **other**: A web visitor is identified by the Referer field (user-defined request source).
               + **policy**: A web visitor is identified by rule.
               + **domain**: A web visitor is identified by domain name.
               + **url**: A web visitor is identified by url.
        :param pulumi.Input[_builtins.bool] all_waf_instances: Specifies whether to enable global counting. Default to **false**.
        :param pulumi.Input[_builtins.str] block_page_type: Specifies the type of the returned page. The options are **application/json**,
               **text/html** and **text/xml**. This parameter is valid when `protective_action` is set to **block** or **dynamic_block**.
               If not specified the system default block page will be used.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF cc protection rule.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF cc protection rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] lock_time: Specifies the lock time for resuming normal page access after blocking can be set.
               The value ranges from `0` to `65,535` in seconds. This parameter is valid when `protective_action` is set to **block**.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name of WAF cc protection rule.
        :param pulumi.Input[_builtins.str] other_user_identifier: Specifies the other user identifier.
               This parameter is required when `rate_limit_mode` is set to **other**, indicates the user-defined request field.
        :param pulumi.Input[_builtins.str] page_content: Specifies the content of the returned page.
               This parameter is required when `block_page_type` has value.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] request_aggregation: Specifies whether to enable domain aggregation statistics.
               This parameter is valid when `rate_limit_mode` is not set to **policy**. Default to **false**.
        :param pulumi.Input[_builtins.int] status: Specifies the status of WAF cc protection rule.
               Valid values are as follows:
        :param pulumi.Input[_builtins.int] unlock_num: Specifies the allowable frequency. The value ranges from `0` to `2,147,483,647`.
               This parameter is valid when `protective_action` is set to **dynamic_block**.
        :param pulumi.Input[_builtins.str] user_identifier: Specifies the user identifier.
               This parameter is required when `rate_limit_mode` is set to **cookie** or **header**.
               + If `rate_limit_mode` is set to **cookie**, this parameter indicates cookie name.
               + If `rate_limit_mode` is set to **header**, this parameter indicates header name.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "limit_num", limit_num)
        pulumi.set(__self__, "limit_period", limit_period)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "protective_action", protective_action)
        pulumi.set(__self__, "rate_limit_mode", rate_limit_mode)
        if all_waf_instances is not None:
            pulumi.set(__self__, "all_waf_instances", all_waf_instances)
        if block_page_type is not None:
            pulumi.set(__self__, "block_page_type", block_page_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if lock_time is not None:
            pulumi.set(__self__, "lock_time", lock_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if other_user_identifier is not None:
            pulumi.set(__self__, "other_user_identifier", other_user_identifier)
        if page_content is not None:
            pulumi.set(__self__, "page_content", page_content)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if request_aggregation is not None:
            pulumi.set(__self__, "request_aggregation", request_aggregation)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unlock_num is not None:
            pulumi.set(__self__, "unlock_num", unlock_num)
        if user_identifier is not None:
            pulumi.set(__self__, "user_identifier", user_identifier)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['RuleCcProtectionConditionArgs']]]:
        """
        Specifies the match condition list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['RuleCcProtectionConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter(name="limitNum")
    def limit_num(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of requests allowed from a web visitor in a rate limiting period.
        The value ranges from `1` to `2,147,483,647`.
        """
        return pulumi.get(self, "limit_num")

    @limit_num.setter
    def limit_num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "limit_num", value)

    @_builtins.property
    @pulumi.getter(name="limitPeriod")
    def limit_period(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the rate limiting period. The value ranges from `1` to `3,600` in seconds.
        """
        return pulumi.get(self, "limit_period")

    @limit_period.setter
    def limit_period(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "limit_period", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy ID of WAF cc protection rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="protectiveAction")
    def protective_action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protective action taken when the number of requests reaches
        the upper limit. Valid values are as follows:
        + **captcha**: Verification code. The user needs to enter the correct verification code after blocking to restore the
        correct access page.
        + **block**: Block the requests.
        + **log**: Record only.
        + **dynamic_block**: Dynamic block the requests. If the request frequency exceeds the "speed limit frequency" during
        the previous speed limit cycle. In the next speed limit cycle, if the request frequency exceeds the
        "release frequency", it will be blocked.
        """
        return pulumi.get(self, "protective_action")

    @protective_action.setter
    def protective_action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protective_action", value)

    @_builtins.property
    @pulumi.getter(name="rateLimitMode")
    def rate_limit_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the rate limit mode. Valid values are as follows:
        + **ip**: A web visitor is identified by the IP address.
        + **cookie**: A web visitor is identified by the cookie key value.
        + **header**: A web visitor is identified by the header key value.
        + **other**: A web visitor is identified by the Referer field (user-defined request source).
        + **policy**: A web visitor is identified by rule.
        + **domain**: A web visitor is identified by domain name.
        + **url**: A web visitor is identified by url.
        """
        return pulumi.get(self, "rate_limit_mode")

    @rate_limit_mode.setter
    def rate_limit_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "rate_limit_mode", value)

    @_builtins.property
    @pulumi.getter(name="allWafInstances")
    def all_waf_instances(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable global counting. Default to **false**.
        """
        return pulumi.get(self, "all_waf_instances")

    @all_waf_instances.setter
    def all_waf_instances(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "all_waf_instances", value)

    @_builtins.property
    @pulumi.getter(name="blockPageType")
    def block_page_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the returned page. The options are **application/json**,
        **text/html** and **text/xml**. This parameter is valid when `protective_action` is set to **block** or **dynamic_block**.
        If not specified the system default block page will be used.
        """
        return pulumi.get(self, "block_page_type")

    @block_page_type.setter
    def block_page_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_page_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of WAF cc protection rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF cc protection rule.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the lock time for resuming normal page access after blocking can be set.
        The value ranges from `0` to `65,535` in seconds. This parameter is valid when `protective_action` is set to **block**.
        """
        return pulumi.get(self, "lock_time")

    @lock_time.setter
    def lock_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lock_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule name of WAF cc protection rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="otherUserIdentifier")
    def other_user_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the other user identifier.
        This parameter is required when `rate_limit_mode` is set to **other**, indicates the user-defined request field.
        """
        return pulumi.get(self, "other_user_identifier")

    @other_user_identifier.setter
    def other_user_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "other_user_identifier", value)

    @_builtins.property
    @pulumi.getter(name="pageContent")
    def page_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the content of the returned page.
        This parameter is required when `block_page_type` has value.
        """
        return pulumi.get(self, "page_content")

    @page_content.setter
    def page_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "page_content", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="requestAggregation")
    def request_aggregation(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable domain aggregation statistics.
        This parameter is valid when `rate_limit_mode` is not set to **policy**. Default to **false**.
        """
        return pulumi.get(self, "request_aggregation")

    @request_aggregation.setter
    def request_aggregation(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "request_aggregation", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the status of WAF cc protection rule.
        Valid values are as follows:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="unlockNum")
    def unlock_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the allowable frequency. The value ranges from `0` to `2,147,483,647`.
        This parameter is valid when `protective_action` is set to **dynamic_block**.
        """
        return pulumi.get(self, "unlock_num")

    @unlock_num.setter
    def unlock_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "unlock_num", value)

    @_builtins.property
    @pulumi.getter(name="userIdentifier")
    def user_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user identifier.
        This parameter is required when `rate_limit_mode` is set to **cookie** or **header**.
        + If `rate_limit_mode` is set to **cookie**, this parameter indicates cookie name.
        + If `rate_limit_mode` is set to **header**, this parameter indicates header name.
        """
        return pulumi.get(self, "user_identifier")

    @user_identifier.setter
    def user_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_identifier", value)


@pulumi.input_type
class _RuleCcProtectionState:
    def __init__(__self__, *,
                 all_waf_instances: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_page_type: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleCcProtectionConditionArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_num: Optional[pulumi.Input[_builtins.int]] = None,
                 limit_period: Optional[pulumi.Input[_builtins.int]] = None,
                 lock_time: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 other_user_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 page_content: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protective_action: Optional[pulumi.Input[_builtins.str]] = None,
                 rate_limit_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 request_aggregation: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 unlock_num: Optional[pulumi.Input[_builtins.int]] = None,
                 user_identifier: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RuleCcProtection resources.
        :param pulumi.Input[_builtins.bool] all_waf_instances: Specifies whether to enable global counting. Default to **false**.
        :param pulumi.Input[_builtins.str] block_page_type: Specifies the type of the returned page. The options are **application/json**,
               **text/html** and **text/xml**. This parameter is valid when `protective_action` is set to **block** or **dynamic_block**.
               If not specified the system default block page will be used.
        :param pulumi.Input[Sequence[pulumi.Input['RuleCcProtectionConditionArgs']]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF cc protection rule.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF cc protection rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] limit_num: Specifies the number of requests allowed from a web visitor in a rate limiting period.
               The value ranges from `1` to `2,147,483,647`.
        :param pulumi.Input[_builtins.int] limit_period: Specifies the rate limiting period. The value ranges from `1` to `3,600` in seconds.
        :param pulumi.Input[_builtins.int] lock_time: Specifies the lock time for resuming normal page access after blocking can be set.
               The value ranges from `0` to `65,535` in seconds. This parameter is valid when `protective_action` is set to **block**.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name of WAF cc protection rule.
        :param pulumi.Input[_builtins.str] other_user_identifier: Specifies the other user identifier.
               This parameter is required when `rate_limit_mode` is set to **other**, indicates the user-defined request field.
        :param pulumi.Input[_builtins.str] page_content: Specifies the content of the returned page.
               This parameter is required when `block_page_type` has value.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID of WAF cc protection rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protective_action: Specifies the protective action taken when the number of requests reaches
               the upper limit. Valid values are as follows:
               + **captcha**: Verification code. The user needs to enter the correct verification code after blocking to restore the
               correct access page.
               + **block**: Block the requests.
               + **log**: Record only.
               + **dynamic_block**: Dynamic block the requests. If the request frequency exceeds the "speed limit frequency" during
               the previous speed limit cycle. In the next speed limit cycle, if the request frequency exceeds the
               "release frequency", it will be blocked.
        :param pulumi.Input[_builtins.str] rate_limit_mode: Specifies the rate limit mode. Valid values are as follows:
               + **ip**: A web visitor is identified by the IP address.
               + **cookie**: A web visitor is identified by the cookie key value.
               + **header**: A web visitor is identified by the header key value.
               + **other**: A web visitor is identified by the Referer field (user-defined request source).
               + **policy**: A web visitor is identified by rule.
               + **domain**: A web visitor is identified by domain name.
               + **url**: A web visitor is identified by url.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] request_aggregation: Specifies whether to enable domain aggregation statistics.
               This parameter is valid when `rate_limit_mode` is not set to **policy**. Default to **false**.
        :param pulumi.Input[_builtins.int] status: Specifies the status of WAF cc protection rule.
               Valid values are as follows:
        :param pulumi.Input[_builtins.int] unlock_num: Specifies the allowable frequency. The value ranges from `0` to `2,147,483,647`.
               This parameter is valid when `protective_action` is set to **dynamic_block**.
        :param pulumi.Input[_builtins.str] user_identifier: Specifies the user identifier.
               This parameter is required when `rate_limit_mode` is set to **cookie** or **header**.
               + If `rate_limit_mode` is set to **cookie**, this parameter indicates cookie name.
               + If `rate_limit_mode` is set to **header**, this parameter indicates header name.
        """
        if all_waf_instances is not None:
            pulumi.set(__self__, "all_waf_instances", all_waf_instances)
        if block_page_type is not None:
            pulumi.set(__self__, "block_page_type", block_page_type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if limit_num is not None:
            pulumi.set(__self__, "limit_num", limit_num)
        if limit_period is not None:
            pulumi.set(__self__, "limit_period", limit_period)
        if lock_time is not None:
            pulumi.set(__self__, "lock_time", lock_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if other_user_identifier is not None:
            pulumi.set(__self__, "other_user_identifier", other_user_identifier)
        if page_content is not None:
            pulumi.set(__self__, "page_content", page_content)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protective_action is not None:
            pulumi.set(__self__, "protective_action", protective_action)
        if rate_limit_mode is not None:
            pulumi.set(__self__, "rate_limit_mode", rate_limit_mode)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if request_aggregation is not None:
            pulumi.set(__self__, "request_aggregation", request_aggregation)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unlock_num is not None:
            pulumi.set(__self__, "unlock_num", unlock_num)
        if user_identifier is not None:
            pulumi.set(__self__, "user_identifier", user_identifier)

    @_builtins.property
    @pulumi.getter(name="allWafInstances")
    def all_waf_instances(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable global counting. Default to **false**.
        """
        return pulumi.get(self, "all_waf_instances")

    @all_waf_instances.setter
    def all_waf_instances(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "all_waf_instances", value)

    @_builtins.property
    @pulumi.getter(name="blockPageType")
    def block_page_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the returned page. The options are **application/json**,
        **text/html** and **text/xml**. This parameter is valid when `protective_action` is set to **block** or **dynamic_block**.
        If not specified the system default block page will be used.
        """
        return pulumi.get(self, "block_page_type")

    @block_page_type.setter
    def block_page_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_page_type", value)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleCcProtectionConditionArgs']]]]:
        """
        Specifies the match condition list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleCcProtectionConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of WAF cc protection rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF cc protection rule.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="limitNum")
    def limit_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of requests allowed from a web visitor in a rate limiting period.
        The value ranges from `1` to `2,147,483,647`.
        """
        return pulumi.get(self, "limit_num")

    @limit_num.setter
    def limit_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "limit_num", value)

    @_builtins.property
    @pulumi.getter(name="limitPeriod")
    def limit_period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the rate limiting period. The value ranges from `1` to `3,600` in seconds.
        """
        return pulumi.get(self, "limit_period")

    @limit_period.setter
    def limit_period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "limit_period", value)

    @_builtins.property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the lock time for resuming normal page access after blocking can be set.
        The value ranges from `0` to `65,535` in seconds. This parameter is valid when `protective_action` is set to **block**.
        """
        return pulumi.get(self, "lock_time")

    @lock_time.setter
    def lock_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lock_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule name of WAF cc protection rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="otherUserIdentifier")
    def other_user_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the other user identifier.
        This parameter is required when `rate_limit_mode` is set to **other**, indicates the user-defined request field.
        """
        return pulumi.get(self, "other_user_identifier")

    @other_user_identifier.setter
    def other_user_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "other_user_identifier", value)

    @_builtins.property
    @pulumi.getter(name="pageContent")
    def page_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the content of the returned page.
        This parameter is required when `block_page_type` has value.
        """
        return pulumi.get(self, "page_content")

    @page_content.setter
    def page_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "page_content", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy ID of WAF cc protection rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="protectiveAction")
    def protective_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protective action taken when the number of requests reaches
        the upper limit. Valid values are as follows:
        + **captcha**: Verification code. The user needs to enter the correct verification code after blocking to restore the
        correct access page.
        + **block**: Block the requests.
        + **log**: Record only.
        + **dynamic_block**: Dynamic block the requests. If the request frequency exceeds the "speed limit frequency" during
        the previous speed limit cycle. In the next speed limit cycle, if the request frequency exceeds the
        "release frequency", it will be blocked.
        """
        return pulumi.get(self, "protective_action")

    @protective_action.setter
    def protective_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protective_action", value)

    @_builtins.property
    @pulumi.getter(name="rateLimitMode")
    def rate_limit_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rate limit mode. Valid values are as follows:
        + **ip**: A web visitor is identified by the IP address.
        + **cookie**: A web visitor is identified by the cookie key value.
        + **header**: A web visitor is identified by the header key value.
        + **other**: A web visitor is identified by the Referer field (user-defined request source).
        + **policy**: A web visitor is identified by rule.
        + **domain**: A web visitor is identified by domain name.
        + **url**: A web visitor is identified by url.
        """
        return pulumi.get(self, "rate_limit_mode")

    @rate_limit_mode.setter
    def rate_limit_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rate_limit_mode", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="requestAggregation")
    def request_aggregation(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable domain aggregation statistics.
        This parameter is valid when `rate_limit_mode` is not set to **policy**. Default to **false**.
        """
        return pulumi.get(self, "request_aggregation")

    @request_aggregation.setter
    def request_aggregation(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "request_aggregation", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the status of WAF cc protection rule.
        Valid values are as follows:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="unlockNum")
    def unlock_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the allowable frequency. The value ranges from `0` to `2,147,483,647`.
        This parameter is valid when `protective_action` is set to **dynamic_block**.
        """
        return pulumi.get(self, "unlock_num")

    @unlock_num.setter
    def unlock_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "unlock_num", value)

    @_builtins.property
    @pulumi.getter(name="userIdentifier")
    def user_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user identifier.
        This parameter is required when `rate_limit_mode` is set to **cookie** or **header**.
        + If `rate_limit_mode` is set to **cookie**, this parameter indicates cookie name.
        + If `rate_limit_mode` is set to **header**, this parameter indicates header name.
        """
        return pulumi.get(self, "user_identifier")

    @user_identifier.setter
    def user_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_identifier", value)


@pulumi.type_token("huaweicloud:Waf/ruleCcProtection:RuleCcProtection")
class RuleCcProtection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_waf_instances: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_page_type: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RuleCcProtectionConditionArgs', 'RuleCcProtectionConditionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_num: Optional[pulumi.Input[_builtins.int]] = None,
                 limit_period: Optional[pulumi.Input[_builtins.int]] = None,
                 lock_time: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 other_user_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 page_content: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protective_action: Optional[pulumi.Input[_builtins.str]] = None,
                 rate_limit_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 request_aggregation: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 unlock_num: Optional[pulumi.Input[_builtins.int]] = None,
                 user_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a WAF cc protection rule resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The cc protection rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        reference_table_id = config.require_object("referenceTableId")
        test = huaweicloud.waf.RuleCcProtection("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            name="test_rule",
            protective_action="block",
            rate_limit_mode="cookie",
            block_page_type="application/json",
            page_content="test page content",
            user_identifier="test_identifier",
            limit_num=10,
            limit_period=60,
            lock_time=5,
            request_aggregation=True,
            all_waf_instances=True,
            description="test description",
            conditions=[
                {
                    "field": "params",
                    "logic": "contain",
                    "content": "test content",
                    "subfield": "test_subfield",
                },
                {
                    "field": "header",
                    "logic": "prefix_any",
                    "subfield": "test_subfield",
                    "reference_table_id": reference_table_id,
                },
            ])
        ```

        ## Import

        There are two ways to import WAF rule cc protection state.

        * Using `policy_id` and `rule_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleCcProtection:RuleCcProtection test <policy_id>/<rule_id>
        ```

        * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleCcProtection:RuleCcProtection test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] all_waf_instances: Specifies whether to enable global counting. Default to **false**.
        :param pulumi.Input[_builtins.str] block_page_type: Specifies the type of the returned page. The options are **application/json**,
               **text/html** and **text/xml**. This parameter is valid when `protective_action` is set to **block** or **dynamic_block**.
               If not specified the system default block page will be used.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RuleCcProtectionConditionArgs', 'RuleCcProtectionConditionArgsDict']]]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF cc protection rule.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF cc protection rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] limit_num: Specifies the number of requests allowed from a web visitor in a rate limiting period.
               The value ranges from `1` to `2,147,483,647`.
        :param pulumi.Input[_builtins.int] limit_period: Specifies the rate limiting period. The value ranges from `1` to `3,600` in seconds.
        :param pulumi.Input[_builtins.int] lock_time: Specifies the lock time for resuming normal page access after blocking can be set.
               The value ranges from `0` to `65,535` in seconds. This parameter is valid when `protective_action` is set to **block**.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name of WAF cc protection rule.
        :param pulumi.Input[_builtins.str] other_user_identifier: Specifies the other user identifier.
               This parameter is required when `rate_limit_mode` is set to **other**, indicates the user-defined request field.
        :param pulumi.Input[_builtins.str] page_content: Specifies the content of the returned page.
               This parameter is required when `block_page_type` has value.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID of WAF cc protection rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protective_action: Specifies the protective action taken when the number of requests reaches
               the upper limit. Valid values are as follows:
               + **captcha**: Verification code. The user needs to enter the correct verification code after blocking to restore the
               correct access page.
               + **block**: Block the requests.
               + **log**: Record only.
               + **dynamic_block**: Dynamic block the requests. If the request frequency exceeds the "speed limit frequency" during
               the previous speed limit cycle. In the next speed limit cycle, if the request frequency exceeds the
               "release frequency", it will be blocked.
        :param pulumi.Input[_builtins.str] rate_limit_mode: Specifies the rate limit mode. Valid values are as follows:
               + **ip**: A web visitor is identified by the IP address.
               + **cookie**: A web visitor is identified by the cookie key value.
               + **header**: A web visitor is identified by the header key value.
               + **other**: A web visitor is identified by the Referer field (user-defined request source).
               + **policy**: A web visitor is identified by rule.
               + **domain**: A web visitor is identified by domain name.
               + **url**: A web visitor is identified by url.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] request_aggregation: Specifies whether to enable domain aggregation statistics.
               This parameter is valid when `rate_limit_mode` is not set to **policy**. Default to **false**.
        :param pulumi.Input[_builtins.int] status: Specifies the status of WAF cc protection rule.
               Valid values are as follows:
        :param pulumi.Input[_builtins.int] unlock_num: Specifies the allowable frequency. The value ranges from `0` to `2,147,483,647`.
               This parameter is valid when `protective_action` is set to **dynamic_block**.
        :param pulumi.Input[_builtins.str] user_identifier: Specifies the user identifier.
               This parameter is required when `rate_limit_mode` is set to **cookie** or **header**.
               + If `rate_limit_mode` is set to **cookie**, this parameter indicates cookie name.
               + If `rate_limit_mode` is set to **header**, this parameter indicates header name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuleCcProtectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a WAF cc protection rule resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The cc protection rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        reference_table_id = config.require_object("referenceTableId")
        test = huaweicloud.waf.RuleCcProtection("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            name="test_rule",
            protective_action="block",
            rate_limit_mode="cookie",
            block_page_type="application/json",
            page_content="test page content",
            user_identifier="test_identifier",
            limit_num=10,
            limit_period=60,
            lock_time=5,
            request_aggregation=True,
            all_waf_instances=True,
            description="test description",
            conditions=[
                {
                    "field": "params",
                    "logic": "contain",
                    "content": "test content",
                    "subfield": "test_subfield",
                },
                {
                    "field": "header",
                    "logic": "prefix_any",
                    "subfield": "test_subfield",
                    "reference_table_id": reference_table_id,
                },
            ])
        ```

        ## Import

        There are two ways to import WAF rule cc protection state.

        * Using `policy_id` and `rule_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleCcProtection:RuleCcProtection test <policy_id>/<rule_id>
        ```

        * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleCcProtection:RuleCcProtection test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param RuleCcProtectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuleCcProtectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_waf_instances: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_page_type: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RuleCcProtectionConditionArgs', 'RuleCcProtectionConditionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_num: Optional[pulumi.Input[_builtins.int]] = None,
                 limit_period: Optional[pulumi.Input[_builtins.int]] = None,
                 lock_time: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 other_user_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 page_content: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protective_action: Optional[pulumi.Input[_builtins.str]] = None,
                 rate_limit_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 request_aggregation: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 unlock_num: Optional[pulumi.Input[_builtins.int]] = None,
                 user_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuleCcProtectionArgs.__new__(RuleCcProtectionArgs)

            __props__.__dict__["all_waf_instances"] = all_waf_instances
            __props__.__dict__["block_page_type"] = block_page_type
            if conditions is None and not opts.urn:
                raise TypeError("Missing required property 'conditions'")
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if limit_num is None and not opts.urn:
                raise TypeError("Missing required property 'limit_num'")
            __props__.__dict__["limit_num"] = limit_num
            if limit_period is None and not opts.urn:
                raise TypeError("Missing required property 'limit_period'")
            __props__.__dict__["limit_period"] = limit_period
            __props__.__dict__["lock_time"] = lock_time
            __props__.__dict__["name"] = name
            __props__.__dict__["other_user_identifier"] = other_user_identifier
            __props__.__dict__["page_content"] = page_content
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            if protective_action is None and not opts.urn:
                raise TypeError("Missing required property 'protective_action'")
            __props__.__dict__["protective_action"] = protective_action
            if rate_limit_mode is None and not opts.urn:
                raise TypeError("Missing required property 'rate_limit_mode'")
            __props__.__dict__["rate_limit_mode"] = rate_limit_mode
            __props__.__dict__["region"] = region
            __props__.__dict__["request_aggregation"] = request_aggregation
            __props__.__dict__["status"] = status
            __props__.__dict__["unlock_num"] = unlock_num
            __props__.__dict__["user_identifier"] = user_identifier
        super(RuleCcProtection, __self__).__init__(
            'huaweicloud:Waf/ruleCcProtection:RuleCcProtection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            all_waf_instances: Optional[pulumi.Input[_builtins.bool]] = None,
            block_page_type: Optional[pulumi.Input[_builtins.str]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RuleCcProtectionConditionArgs', 'RuleCcProtectionConditionArgsDict']]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            limit_num: Optional[pulumi.Input[_builtins.int]] = None,
            limit_period: Optional[pulumi.Input[_builtins.int]] = None,
            lock_time: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            other_user_identifier: Optional[pulumi.Input[_builtins.str]] = None,
            page_content: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            protective_action: Optional[pulumi.Input[_builtins.str]] = None,
            rate_limit_mode: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            request_aggregation: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.int]] = None,
            unlock_num: Optional[pulumi.Input[_builtins.int]] = None,
            user_identifier: Optional[pulumi.Input[_builtins.str]] = None) -> 'RuleCcProtection':
        """
        Get an existing RuleCcProtection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] all_waf_instances: Specifies whether to enable global counting. Default to **false**.
        :param pulumi.Input[_builtins.str] block_page_type: Specifies the type of the returned page. The options are **application/json**,
               **text/html** and **text/xml**. This parameter is valid when `protective_action` is set to **block** or **dynamic_block**.
               If not specified the system default block page will be used.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RuleCcProtectionConditionArgs', 'RuleCcProtectionConditionArgsDict']]]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF cc protection rule.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF cc protection rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] limit_num: Specifies the number of requests allowed from a web visitor in a rate limiting period.
               The value ranges from `1` to `2,147,483,647`.
        :param pulumi.Input[_builtins.int] limit_period: Specifies the rate limiting period. The value ranges from `1` to `3,600` in seconds.
        :param pulumi.Input[_builtins.int] lock_time: Specifies the lock time for resuming normal page access after blocking can be set.
               The value ranges from `0` to `65,535` in seconds. This parameter is valid when `protective_action` is set to **block**.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name of WAF cc protection rule.
        :param pulumi.Input[_builtins.str] other_user_identifier: Specifies the other user identifier.
               This parameter is required when `rate_limit_mode` is set to **other**, indicates the user-defined request field.
        :param pulumi.Input[_builtins.str] page_content: Specifies the content of the returned page.
               This parameter is required when `block_page_type` has value.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID of WAF cc protection rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] protective_action: Specifies the protective action taken when the number of requests reaches
               the upper limit. Valid values are as follows:
               + **captcha**: Verification code. The user needs to enter the correct verification code after blocking to restore the
               correct access page.
               + **block**: Block the requests.
               + **log**: Record only.
               + **dynamic_block**: Dynamic block the requests. If the request frequency exceeds the "speed limit frequency" during
               the previous speed limit cycle. In the next speed limit cycle, if the request frequency exceeds the
               "release frequency", it will be blocked.
        :param pulumi.Input[_builtins.str] rate_limit_mode: Specifies the rate limit mode. Valid values are as follows:
               + **ip**: A web visitor is identified by the IP address.
               + **cookie**: A web visitor is identified by the cookie key value.
               + **header**: A web visitor is identified by the header key value.
               + **other**: A web visitor is identified by the Referer field (user-defined request source).
               + **policy**: A web visitor is identified by rule.
               + **domain**: A web visitor is identified by domain name.
               + **url**: A web visitor is identified by url.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] request_aggregation: Specifies whether to enable domain aggregation statistics.
               This parameter is valid when `rate_limit_mode` is not set to **policy**. Default to **false**.
        :param pulumi.Input[_builtins.int] status: Specifies the status of WAF cc protection rule.
               Valid values are as follows:
        :param pulumi.Input[_builtins.int] unlock_num: Specifies the allowable frequency. The value ranges from `0` to `2,147,483,647`.
               This parameter is valid when `protective_action` is set to **dynamic_block**.
        :param pulumi.Input[_builtins.str] user_identifier: Specifies the user identifier.
               This parameter is required when `rate_limit_mode` is set to **cookie** or **header**.
               + If `rate_limit_mode` is set to **cookie**, this parameter indicates cookie name.
               + If `rate_limit_mode` is set to **header**, this parameter indicates header name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RuleCcProtectionState.__new__(_RuleCcProtectionState)

        __props__.__dict__["all_waf_instances"] = all_waf_instances
        __props__.__dict__["block_page_type"] = block_page_type
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["limit_num"] = limit_num
        __props__.__dict__["limit_period"] = limit_period
        __props__.__dict__["lock_time"] = lock_time
        __props__.__dict__["name"] = name
        __props__.__dict__["other_user_identifier"] = other_user_identifier
        __props__.__dict__["page_content"] = page_content
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["protective_action"] = protective_action
        __props__.__dict__["rate_limit_mode"] = rate_limit_mode
        __props__.__dict__["region"] = region
        __props__.__dict__["request_aggregation"] = request_aggregation
        __props__.__dict__["status"] = status
        __props__.__dict__["unlock_num"] = unlock_num
        __props__.__dict__["user_identifier"] = user_identifier
        return RuleCcProtection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allWafInstances")
    def all_waf_instances(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable global counting. Default to **false**.
        """
        return pulumi.get(self, "all_waf_instances")

    @_builtins.property
    @pulumi.getter(name="blockPageType")
    def block_page_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of the returned page. The options are **application/json**,
        **text/html** and **text/xml**. This parameter is valid when `protective_action` is set to **block** or **dynamic_block**.
        If not specified the system default block page will be used.
        """
        return pulumi.get(self, "block_page_type")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.RuleCcProtectionCondition']]:
        """
        Specifies the match condition list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of WAF cc protection rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF cc protection rule.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="limitNum")
    def limit_num(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of requests allowed from a web visitor in a rate limiting period.
        The value ranges from `1` to `2,147,483,647`.
        """
        return pulumi.get(self, "limit_num")

    @_builtins.property
    @pulumi.getter(name="limitPeriod")
    def limit_period(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the rate limiting period. The value ranges from `1` to `3,600` in seconds.
        """
        return pulumi.get(self, "limit_period")

    @_builtins.property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the lock time for resuming normal page access after blocking can be set.
        The value ranges from `0` to `65,535` in seconds. This parameter is valid when `protective_action` is set to **block**.
        """
        return pulumi.get(self, "lock_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the rule name of WAF cc protection rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="otherUserIdentifier")
    def other_user_identifier(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the other user identifier.
        This parameter is required when `rate_limit_mode` is set to **other**, indicates the user-defined request field.
        """
        return pulumi.get(self, "other_user_identifier")

    @_builtins.property
    @pulumi.getter(name="pageContent")
    def page_content(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the content of the returned page.
        This parameter is required when `block_page_type` has value.
        """
        return pulumi.get(self, "page_content")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy ID of WAF cc protection rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="protectiveAction")
    def protective_action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the protective action taken when the number of requests reaches
        the upper limit. Valid values are as follows:
        + **captcha**: Verification code. The user needs to enter the correct verification code after blocking to restore the
        correct access page.
        + **block**: Block the requests.
        + **log**: Record only.
        + **dynamic_block**: Dynamic block the requests. If the request frequency exceeds the "speed limit frequency" during
        the previous speed limit cycle. In the next speed limit cycle, if the request frequency exceeds the
        "release frequency", it will be blocked.
        """
        return pulumi.get(self, "protective_action")

    @_builtins.property
    @pulumi.getter(name="rateLimitMode")
    def rate_limit_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the rate limit mode. Valid values are as follows:
        + **ip**: A web visitor is identified by the IP address.
        + **cookie**: A web visitor is identified by the cookie key value.
        + **header**: A web visitor is identified by the header key value.
        + **other**: A web visitor is identified by the Referer field (user-defined request source).
        + **policy**: A web visitor is identified by rule.
        + **domain**: A web visitor is identified by domain name.
        + **url**: A web visitor is identified by url.
        """
        return pulumi.get(self, "rate_limit_mode")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="requestAggregation")
    def request_aggregation(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable domain aggregation statistics.
        This parameter is valid when `rate_limit_mode` is not set to **policy**. Default to **false**.
        """
        return pulumi.get(self, "request_aggregation")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the status of WAF cc protection rule.
        Valid values are as follows:
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="unlockNum")
    def unlock_num(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the allowable frequency. The value ranges from `0` to `2,147,483,647`.
        This parameter is valid when `protective_action` is set to **dynamic_block**.
        """
        return pulumi.get(self, "unlock_num")

    @_builtins.property
    @pulumi.getter(name="userIdentifier")
    def user_identifier(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the user identifier.
        This parameter is required when `rate_limit_mode` is set to **cookie** or **header**.
        + If `rate_limit_mode` is set to **cookie**, this parameter indicates cookie name.
        + If `rate_limit_mode` is set to **header**, this parameter indicates header name.
        """
        return pulumi.get(self, "user_identifier")

