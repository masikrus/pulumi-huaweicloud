# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAddressGroupsResult',
    'AwaitableGetAddressGroupsResult',
    'get_address_groups',
    'get_address_groups_output',
]

@pulumi.output_type
class GetAddressGroupsResult:
    """
    A collection of values returned by getAddressGroups.
    """
    def __init__(__self__, enterprise_project_id=None, groups=None, id=None, ip_address=None, name=None, region=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetAddressGroupsGroupResult']:
        """
        The list of WAF address groups.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the address group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAddressGroupsResult(GetAddressGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAddressGroupsResult(
            enterprise_project_id=self.enterprise_project_id,
            groups=self.groups,
            id=self.id,
            ip_address=self.ip_address,
            name=self.name,
            region=self.region)


def get_address_groups(enterprise_project_id: Optional[_builtins.str] = None,
                       ip_address: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAddressGroupsResult:
    """
    Use this data source to get a list of WAF address groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    enterprise_project_id = config.require_object("enterpriseProjectId")
    test = huaweicloud.Waf.get_address_groups(name="test-name",
        enterprise_project_id=enterprise_project_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           For enterprise users, if omitted, default enterprise project will be used.
    :param _builtins.str ip_address: Specifies the IP address or IP address ranges. If this parameter is specified,
           the address group that contains the specified IP address or IP address ranges are queried.
    :param _builtins.str name: Specifies the name of the address group. Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ipAddress'] = ip_address
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Waf/getAddressGroups:getAddressGroups', __args__, opts=opts, typ=GetAddressGroupsResult).value

    return AwaitableGetAddressGroupsResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'))
def get_address_groups_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              ip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAddressGroupsResult]:
    """
    Use this data source to get a list of WAF address groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    enterprise_project_id = config.require_object("enterpriseProjectId")
    test = huaweicloud.Waf.get_address_groups(name="test-name",
        enterprise_project_id=enterprise_project_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           For enterprise users, if omitted, default enterprise project will be used.
    :param _builtins.str ip_address: Specifies the IP address or IP address ranges. If this parameter is specified,
           the address group that contains the specified IP address or IP address ranges are queried.
    :param _builtins.str name: Specifies the name of the address group. Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ipAddress'] = ip_address
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Waf/getAddressGroups:getAddressGroups', __args__, opts=opts, typ=GetAddressGroupsResult)
    return __ret__.apply(lambda __response__: GetAddressGroupsResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region')))
