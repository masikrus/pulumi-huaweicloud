# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCertificatesResult',
    'AwaitableGetCertificatesResult',
    'get_certificates',
    'get_certificates_output',
]

@pulumi.output_type
class GetCertificatesResult:
    """
    A collection of values returned by getCertificates.
    """
    def __init__(__self__, certificates=None, enterprise_project_id=None, expiration_status=None, host=None, id=None, name=None, region=None):
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if expiration_status and not isinstance(expiration_status, str):
            raise TypeError("Expected argument 'expiration_status' to be a str")
        pulumi.set(__self__, "expiration_status", expiration_status)
        if host and not isinstance(host, bool):
            raise TypeError("Expected argument 'host' to be a bool")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetCertificatesCertificateResult']:
        """
        The certificate list.
        The certificates structure is documented below.
        """
        return pulumi.get(self, "certificates")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expirationStatus")
    def expiration_status(self) -> Optional[_builtins.str]:
        """
        The certificate expiration status.
        """
        return pulumi.get(self, "expiration_status")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The certificate name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetCertificatesResult(GetCertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificatesResult(
            certificates=self.certificates,
            enterprise_project_id=self.enterprise_project_id,
            expiration_status=self.expiration_status,
            host=self.host,
            id=self.id,
            name=self.name,
            region=self.region)


def get_certificates(enterprise_project_id: Optional[_builtins.str] = None,
                     expiration_status: Optional[_builtins.str] = None,
                     host: Optional[_builtins.bool] = None,
                     name: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificatesResult:
    """
    Use this data source to get a list of WAF certificates within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    enterprise_project_id = config.require_object("enterpriseProjectId")
    test = huaweicloud.Waf.get_certificates(enterprise_project_id=enterprise_project_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of WAF certificate.
           For enterprise users, if omitted, default enterprise project will be used.
    :param _builtins.str expiration_status: Specifies the certificate expiration status. The options are as follows:
    :param _builtins.bool host: Specifies whether to obtain the domain name for which the certificate is used.
           + **true**: Obtain the certificates that have been used for domain names.
           + **false**: Obtain the certificates that have not been used for any domain names.
           
           Defaults to **false**.
    :param _builtins.str name: Specifies the name of certificate. The value is case-sensitive and supports fuzzy matching.
    :param _builtins.str region: Specifies the region in which to query the data source. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['expirationStatus'] = expiration_status
    __args__['host'] = host
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Waf/getCertificates:getCertificates', __args__, opts=opts, typ=GetCertificatesResult).value

    return AwaitableGetCertificatesResult(
        certificates=pulumi.get(__ret__, 'certificates'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        expiration_status=pulumi.get(__ret__, 'expiration_status'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'))
def get_certificates_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            expiration_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            host: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCertificatesResult]:
    """
    Use this data source to get a list of WAF certificates within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    enterprise_project_id = config.require_object("enterpriseProjectId")
    test = huaweicloud.Waf.get_certificates(enterprise_project_id=enterprise_project_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of WAF certificate.
           For enterprise users, if omitted, default enterprise project will be used.
    :param _builtins.str expiration_status: Specifies the certificate expiration status. The options are as follows:
    :param _builtins.bool host: Specifies whether to obtain the domain name for which the certificate is used.
           + **true**: Obtain the certificates that have been used for domain names.
           + **false**: Obtain the certificates that have not been used for any domain names.
           
           Defaults to **false**.
    :param _builtins.str name: Specifies the name of certificate. The value is case-sensitive and supports fuzzy matching.
    :param _builtins.str region: Specifies the region in which to query the data source. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['expirationStatus'] = expiration_status
    __args__['host'] = host
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Waf/getCertificates:getCertificates', __args__, opts=opts, typ=GetCertificatesResult)
    return __ret__.apply(lambda __response__: GetCertificatesResult(
        certificates=pulumi.get(__response__, 'certificates'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        expiration_status=pulumi.get(__response__, 'expiration_status'),
        host=pulumi.get(__response__, 'host'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region')))
