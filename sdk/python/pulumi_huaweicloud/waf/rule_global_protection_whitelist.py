# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RuleGlobalProtectionWhitelistArgs', 'RuleGlobalProtectionWhitelist']

@pulumi.input_type
class RuleGlobalProtectionWhitelistArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['RuleGlobalProtectionWhitelistConditionArgs']]],
                 domains: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 ignore_waf_protection: pulumi.Input[_builtins.str],
                 policy_id: pulumi.Input[_builtins.str],
                 advanced_content: Optional[pulumi.Input[_builtins.str]] = None,
                 advanced_field: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a RuleGlobalProtectionWhitelist resource.
        :param pulumi.Input[Sequence[pulumi.Input['RuleGlobalProtectionWhitelistConditionArgs']]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] domains: Specifies the protected domain name bound with the policy or manually enter a single
               domain name corresponding to the wildcard domain name.
               If the array length is `0`, the rule takes effect for all domain names or websites.
        :param pulumi.Input[_builtins.str] ignore_waf_protection: Specifies the rules that need to be ignored. You can provide multiple
               items and separate them with semicolons (;).
               
               + If you want to block a specific built-in rule, the value of this parameter is the rule ID.
               To query the rule ID, go to the WAF console, choose **Policies** and click the target policy name. On the displayed
               page, in the **Basic Web Protection** area, select the **Protection Rules** tab, and view the ID of the specific rule.
               You can also query the rule ID in the event details.
               
               + If you want to mask a type of basic web protection rules, set this parameter to the name of the type of basic web
               protection rules. Valid values are: **xss**(XSS attacks), **webshell**(Web shells), **vuln**(Other types of attacks),
               **sqli**(SQL injection attack), **robot**(Malicious crawlers), **rfi**(Remote file inclusion),
               **lfi**(Local file inclusion), **cmdi**(Command injection attack).
               
               + To bypass the basic web protection, set this parameter to **all**.
               
               + To bypass all WAF protection, set this parameter to **bypass**.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID of WAF global protection whitelist rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] advanced_content: Specifies the advanced content value to ignore. This parameter is valid only
               when `advanced_field` is set to **params**, **cookie** or **header**.
               If not specified, WAF will ignore all attack events of the specific field.
        :param pulumi.Input[_builtins.str] advanced_field: Specifies the advanced field to ignore attacks of a specific field.
               After you add the rule, WAF will stop intercepting attack events of the specified field.
               The following fields are supported: **params**, **cookie**, **header**, **body** and **multipart**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF global protection whitelist rule.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF global protection
               whitelist rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: Specifies the status of WAF global protection whitelist rule.
               Valid values are as follows:
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "ignore_waf_protection", ignore_waf_protection)
        pulumi.set(__self__, "policy_id", policy_id)
        if advanced_content is not None:
            pulumi.set(__self__, "advanced_content", advanced_content)
        if advanced_field is not None:
            pulumi.set(__self__, "advanced_field", advanced_field)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGlobalProtectionWhitelistConditionArgs']]]:
        """
        Specifies the match condition list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGlobalProtectionWhitelistConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def domains(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the protected domain name bound with the policy or manually enter a single
        domain name corresponding to the wildcard domain name.
        If the array length is `0`, the rule takes effect for all domain names or websites.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "domains", value)

    @_builtins.property
    @pulumi.getter(name="ignoreWafProtection")
    def ignore_waf_protection(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the rules that need to be ignored. You can provide multiple
        items and separate them with semicolons (;).

        + If you want to block a specific built-in rule, the value of this parameter is the rule ID.
        To query the rule ID, go to the WAF console, choose **Policies** and click the target policy name. On the displayed
        page, in the **Basic Web Protection** area, select the **Protection Rules** tab, and view the ID of the specific rule.
        You can also query the rule ID in the event details.

        + If you want to mask a type of basic web protection rules, set this parameter to the name of the type of basic web
        protection rules. Valid values are: **xss**(XSS attacks), **webshell**(Web shells), **vuln**(Other types of attacks),
        **sqli**(SQL injection attack), **robot**(Malicious crawlers), **rfi**(Remote file inclusion),
        **lfi**(Local file inclusion), **cmdi**(Command injection attack).

        + To bypass the basic web protection, set this parameter to **all**.

        + To bypass all WAF protection, set this parameter to **bypass**.
        """
        return pulumi.get(self, "ignore_waf_protection")

    @ignore_waf_protection.setter
    def ignore_waf_protection(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ignore_waf_protection", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy ID of WAF global protection whitelist rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="advancedContent")
    def advanced_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced content value to ignore. This parameter is valid only
        when `advanced_field` is set to **params**, **cookie** or **header**.
        If not specified, WAF will ignore all attack events of the specific field.
        """
        return pulumi.get(self, "advanced_content")

    @advanced_content.setter
    def advanced_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "advanced_content", value)

    @_builtins.property
    @pulumi.getter(name="advancedField")
    def advanced_field(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced field to ignore attacks of a specific field.
        After you add the rule, WAF will stop intercepting attack events of the specified field.
        The following fields are supported: **params**, **cookie**, **header**, **body** and **multipart**.
        """
        return pulumi.get(self, "advanced_field")

    @advanced_field.setter
    def advanced_field(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "advanced_field", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of WAF global protection whitelist rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF global protection
        whitelist rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the status of WAF global protection whitelist rule.
        Valid values are as follows:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _RuleGlobalProtectionWhitelistState:
    def __init__(__self__, *,
                 advanced_content: Optional[pulumi.Input[_builtins.str]] = None,
                 advanced_field: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGlobalProtectionWhitelistConditionArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ignore_waf_protection: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering RuleGlobalProtectionWhitelist resources.
        :param pulumi.Input[_builtins.str] advanced_content: Specifies the advanced content value to ignore. This parameter is valid only
               when `advanced_field` is set to **params**, **cookie** or **header**.
               If not specified, WAF will ignore all attack events of the specific field.
        :param pulumi.Input[_builtins.str] advanced_field: Specifies the advanced field to ignore attacks of a specific field.
               After you add the rule, WAF will stop intercepting attack events of the specified field.
               The following fields are supported: **params**, **cookie**, **header**, **body** and **multipart**.
        :param pulumi.Input[Sequence[pulumi.Input['RuleGlobalProtectionWhitelistConditionArgs']]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF global protection whitelist rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] domains: Specifies the protected domain name bound with the policy or manually enter a single
               domain name corresponding to the wildcard domain name.
               If the array length is `0`, the rule takes effect for all domain names or websites.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF global protection
               whitelist rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ignore_waf_protection: Specifies the rules that need to be ignored. You can provide multiple
               items and separate them with semicolons (;).
               
               + If you want to block a specific built-in rule, the value of this parameter is the rule ID.
               To query the rule ID, go to the WAF console, choose **Policies** and click the target policy name. On the displayed
               page, in the **Basic Web Protection** area, select the **Protection Rules** tab, and view the ID of the specific rule.
               You can also query the rule ID in the event details.
               
               + If you want to mask a type of basic web protection rules, set this parameter to the name of the type of basic web
               protection rules. Valid values are: **xss**(XSS attacks), **webshell**(Web shells), **vuln**(Other types of attacks),
               **sqli**(SQL injection attack), **robot**(Malicious crawlers), **rfi**(Remote file inclusion),
               **lfi**(Local file inclusion), **cmdi**(Command injection attack).
               
               + To bypass the basic web protection, set this parameter to **all**.
               
               + To bypass all WAF protection, set this parameter to **bypass**.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID of WAF global protection whitelist rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: Specifies the status of WAF global protection whitelist rule.
               Valid values are as follows:
        """
        if advanced_content is not None:
            pulumi.set(__self__, "advanced_content", advanced_content)
        if advanced_field is not None:
            pulumi.set(__self__, "advanced_field", advanced_field)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if ignore_waf_protection is not None:
            pulumi.set(__self__, "ignore_waf_protection", ignore_waf_protection)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="advancedContent")
    def advanced_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced content value to ignore. This parameter is valid only
        when `advanced_field` is set to **params**, **cookie** or **header**.
        If not specified, WAF will ignore all attack events of the specific field.
        """
        return pulumi.get(self, "advanced_content")

    @advanced_content.setter
    def advanced_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "advanced_content", value)

    @_builtins.property
    @pulumi.getter(name="advancedField")
    def advanced_field(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced field to ignore attacks of a specific field.
        After you add the rule, WAF will stop intercepting attack events of the specified field.
        The following fields are supported: **params**, **cookie**, **header**, **body** and **multipart**.
        """
        return pulumi.get(self, "advanced_field")

    @advanced_field.setter
    def advanced_field(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "advanced_field", value)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGlobalProtectionWhitelistConditionArgs']]]]:
        """
        Specifies the match condition list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGlobalProtectionWhitelistConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of WAF global protection whitelist rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the protected domain name bound with the policy or manually enter a single
        domain name corresponding to the wildcard domain name.
        If the array length is `0`, the rule takes effect for all domain names or websites.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "domains", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF global protection
        whitelist rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="ignoreWafProtection")
    def ignore_waf_protection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rules that need to be ignored. You can provide multiple
        items and separate them with semicolons (;).

        + If you want to block a specific built-in rule, the value of this parameter is the rule ID.
        To query the rule ID, go to the WAF console, choose **Policies** and click the target policy name. On the displayed
        page, in the **Basic Web Protection** area, select the **Protection Rules** tab, and view the ID of the specific rule.
        You can also query the rule ID in the event details.

        + If you want to mask a type of basic web protection rules, set this parameter to the name of the type of basic web
        protection rules. Valid values are: **xss**(XSS attacks), **webshell**(Web shells), **vuln**(Other types of attacks),
        **sqli**(SQL injection attack), **robot**(Malicious crawlers), **rfi**(Remote file inclusion),
        **lfi**(Local file inclusion), **cmdi**(Command injection attack).

        + To bypass the basic web protection, set this parameter to **all**.

        + To bypass all WAF protection, set this parameter to **bypass**.
        """
        return pulumi.get(self, "ignore_waf_protection")

    @ignore_waf_protection.setter
    def ignore_waf_protection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ignore_waf_protection", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy ID of WAF global protection whitelist rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the status of WAF global protection whitelist rule.
        Valid values are as follows:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Waf/ruleGlobalProtectionWhitelist:RuleGlobalProtectionWhitelist")
class RuleGlobalProtectionWhitelist(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced_content: Optional[pulumi.Input[_builtins.str]] = None,
                 advanced_field: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RuleGlobalProtectionWhitelistConditionArgs', 'RuleGlobalProtectionWhitelistConditionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ignore_waf_protection: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages a WAF global protection whitelist rule resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The global protection whitelist rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ### WAF Global Protection Whitelist Rule with specified domain names

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        domains = config.require_object("domains")
        test = huaweicloud.waf.RuleGlobalProtectionWhitelist("test",
            policy_id=policy_id,
            domains=domains,
            enterprise_project_id=enterprise_project_id,
            ignore_waf_protection="xss;webshell",
            advanced_field="params",
            advanced_content="test_content",
            description="test description",
            conditions=[{
                "field": "ip",
                "logic": "equal",
                "content": "192.168.0.2",
                "subfield": "x-forwarded-for",
            }])
        ```

        ### WAF Global Protection Whitelist Rule with all domain names

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.waf.RuleGlobalProtectionWhitelist("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            domains=[],
            ignore_waf_protection="xss;webshell",
            advanced_field="params",
            advanced_content="test_content",
            description="test description",
            conditions=[{
                "field": "params",
                "logic": "contain",
                "content": "test content",
                "subfield": "test_subfield",
            }])
        ```

        ## Import

        There are two ways to import WAF rule global protection whitelist state.

        * Using `policy_id` and `rule_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleGlobalProtectionWhitelist:RuleGlobalProtectionWhitelist test <policy_id>/<rule_id>
        ```

        * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleGlobalProtectionWhitelist:RuleGlobalProtectionWhitelist test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] advanced_content: Specifies the advanced content value to ignore. This parameter is valid only
               when `advanced_field` is set to **params**, **cookie** or **header**.
               If not specified, WAF will ignore all attack events of the specific field.
        :param pulumi.Input[_builtins.str] advanced_field: Specifies the advanced field to ignore attacks of a specific field.
               After you add the rule, WAF will stop intercepting attack events of the specified field.
               The following fields are supported: **params**, **cookie**, **header**, **body** and **multipart**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RuleGlobalProtectionWhitelistConditionArgs', 'RuleGlobalProtectionWhitelistConditionArgsDict']]]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF global protection whitelist rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] domains: Specifies the protected domain name bound with the policy or manually enter a single
               domain name corresponding to the wildcard domain name.
               If the array length is `0`, the rule takes effect for all domain names or websites.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF global protection
               whitelist rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ignore_waf_protection: Specifies the rules that need to be ignored. You can provide multiple
               items and separate them with semicolons (;).
               
               + If you want to block a specific built-in rule, the value of this parameter is the rule ID.
               To query the rule ID, go to the WAF console, choose **Policies** and click the target policy name. On the displayed
               page, in the **Basic Web Protection** area, select the **Protection Rules** tab, and view the ID of the specific rule.
               You can also query the rule ID in the event details.
               
               + If you want to mask a type of basic web protection rules, set this parameter to the name of the type of basic web
               protection rules. Valid values are: **xss**(XSS attacks), **webshell**(Web shells), **vuln**(Other types of attacks),
               **sqli**(SQL injection attack), **robot**(Malicious crawlers), **rfi**(Remote file inclusion),
               **lfi**(Local file inclusion), **cmdi**(Command injection attack).
               
               + To bypass the basic web protection, set this parameter to **all**.
               
               + To bypass all WAF protection, set this parameter to **bypass**.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID of WAF global protection whitelist rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: Specifies the status of WAF global protection whitelist rule.
               Valid values are as follows:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuleGlobalProtectionWhitelistArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a WAF global protection whitelist rule resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The global protection whitelist rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ### WAF Global Protection Whitelist Rule with specified domain names

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        domains = config.require_object("domains")
        test = huaweicloud.waf.RuleGlobalProtectionWhitelist("test",
            policy_id=policy_id,
            domains=domains,
            enterprise_project_id=enterprise_project_id,
            ignore_waf_protection="xss;webshell",
            advanced_field="params",
            advanced_content="test_content",
            description="test description",
            conditions=[{
                "field": "ip",
                "logic": "equal",
                "content": "192.168.0.2",
                "subfield": "x-forwarded-for",
            }])
        ```

        ### WAF Global Protection Whitelist Rule with all domain names

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_id = config.require_object("policyId")
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test = huaweicloud.waf.RuleGlobalProtectionWhitelist("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            domains=[],
            ignore_waf_protection="xss;webshell",
            advanced_field="params",
            advanced_content="test_content",
            description="test description",
            conditions=[{
                "field": "params",
                "logic": "contain",
                "content": "test content",
                "subfield": "test_subfield",
            }])
        ```

        ## Import

        There are two ways to import WAF rule global protection whitelist state.

        * Using `policy_id` and `rule_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleGlobalProtectionWhitelist:RuleGlobalProtectionWhitelist test <policy_id>/<rule_id>
        ```

        * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Waf/ruleGlobalProtectionWhitelist:RuleGlobalProtectionWhitelist test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param RuleGlobalProtectionWhitelistArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuleGlobalProtectionWhitelistArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced_content: Optional[pulumi.Input[_builtins.str]] = None,
                 advanced_field: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RuleGlobalProtectionWhitelistConditionArgs', 'RuleGlobalProtectionWhitelistConditionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ignore_waf_protection: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuleGlobalProtectionWhitelistArgs.__new__(RuleGlobalProtectionWhitelistArgs)

            __props__.__dict__["advanced_content"] = advanced_content
            __props__.__dict__["advanced_field"] = advanced_field
            if conditions is None and not opts.urn:
                raise TypeError("Missing required property 'conditions'")
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["description"] = description
            if domains is None and not opts.urn:
                raise TypeError("Missing required property 'domains'")
            __props__.__dict__["domains"] = domains
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if ignore_waf_protection is None and not opts.urn:
                raise TypeError("Missing required property 'ignore_waf_protection'")
            __props__.__dict__["ignore_waf_protection"] = ignore_waf_protection
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = status
        super(RuleGlobalProtectionWhitelist, __self__).__init__(
            'huaweicloud:Waf/ruleGlobalProtectionWhitelist:RuleGlobalProtectionWhitelist',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            advanced_content: Optional[pulumi.Input[_builtins.str]] = None,
            advanced_field: Optional[pulumi.Input[_builtins.str]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RuleGlobalProtectionWhitelistConditionArgs', 'RuleGlobalProtectionWhitelistConditionArgsDict']]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            ignore_waf_protection: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.int]] = None) -> 'RuleGlobalProtectionWhitelist':
        """
        Get an existing RuleGlobalProtectionWhitelist resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] advanced_content: Specifies the advanced content value to ignore. This parameter is valid only
               when `advanced_field` is set to **params**, **cookie** or **header**.
               If not specified, WAF will ignore all attack events of the specific field.
        :param pulumi.Input[_builtins.str] advanced_field: Specifies the advanced field to ignore attacks of a specific field.
               After you add the rule, WAF will stop intercepting attack events of the specified field.
               The following fields are supported: **params**, **cookie**, **header**, **body** and **multipart**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RuleGlobalProtectionWhitelistConditionArgs', 'RuleGlobalProtectionWhitelistConditionArgsDict']]]] conditions: Specifies the match condition list.
               The conditions structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of WAF global protection whitelist rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] domains: Specifies the protected domain name bound with the policy or manually enter a single
               domain name corresponding to the wildcard domain name.
               If the array length is `0`, the rule takes effect for all domain names or websites.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of WAF global protection
               whitelist rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] ignore_waf_protection: Specifies the rules that need to be ignored. You can provide multiple
               items and separate them with semicolons (;).
               
               + If you want to block a specific built-in rule, the value of this parameter is the rule ID.
               To query the rule ID, go to the WAF console, choose **Policies** and click the target policy name. On the displayed
               page, in the **Basic Web Protection** area, select the **Protection Rules** tab, and view the ID of the specific rule.
               You can also query the rule ID in the event details.
               
               + If you want to mask a type of basic web protection rules, set this parameter to the name of the type of basic web
               protection rules. Valid values are: **xss**(XSS attacks), **webshell**(Web shells), **vuln**(Other types of attacks),
               **sqli**(SQL injection attack), **robot**(Malicious crawlers), **rfi**(Remote file inclusion),
               **lfi**(Local file inclusion), **cmdi**(Command injection attack).
               
               + To bypass the basic web protection, set this parameter to **all**.
               
               + To bypass all WAF protection, set this parameter to **bypass**.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the policy ID of WAF global protection whitelist rule.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] status: Specifies the status of WAF global protection whitelist rule.
               Valid values are as follows:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RuleGlobalProtectionWhitelistState.__new__(_RuleGlobalProtectionWhitelistState)

        __props__.__dict__["advanced_content"] = advanced_content
        __props__.__dict__["advanced_field"] = advanced_field
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["description"] = description
        __props__.__dict__["domains"] = domains
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["ignore_waf_protection"] = ignore_waf_protection
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return RuleGlobalProtectionWhitelist(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="advancedContent")
    def advanced_content(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the advanced content value to ignore. This parameter is valid only
        when `advanced_field` is set to **params**, **cookie** or **header**.
        If not specified, WAF will ignore all attack events of the specific field.
        """
        return pulumi.get(self, "advanced_content")

    @_builtins.property
    @pulumi.getter(name="advancedField")
    def advanced_field(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the advanced field to ignore attacks of a specific field.
        After you add the rule, WAF will stop intercepting attack events of the specified field.
        The following fields are supported: **params**, **cookie**, **header**, **body** and **multipart**.
        """
        return pulumi.get(self, "advanced_field")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.RuleGlobalProtectionWhitelistCondition']]:
        """
        Specifies the match condition list.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of WAF global protection whitelist rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the protected domain name bound with the policy or manually enter a single
        domain name corresponding to the wildcard domain name.
        If the array length is `0`, the rule takes effect for all domain names or websites.
        """
        return pulumi.get(self, "domains")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the enterprise project ID of WAF global protection
        whitelist rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="ignoreWafProtection")
    def ignore_waf_protection(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the rules that need to be ignored. You can provide multiple
        items and separate them with semicolons (;).

        + If you want to block a specific built-in rule, the value of this parameter is the rule ID.
        To query the rule ID, go to the WAF console, choose **Policies** and click the target policy name. On the displayed
        page, in the **Basic Web Protection** area, select the **Protection Rules** tab, and view the ID of the specific rule.
        You can also query the rule ID in the event details.

        + If you want to mask a type of basic web protection rules, set this parameter to the name of the type of basic web
        protection rules. Valid values are: **xss**(XSS attacks), **webshell**(Web shells), **vuln**(Other types of attacks),
        **sqli**(SQL injection attack), **robot**(Malicious crawlers), **rfi**(Remote file inclusion),
        **lfi**(Local file inclusion), **cmdi**(Command injection attack).

        + To bypass the basic web protection, set this parameter to **all**.

        + To bypass all WAF protection, set this parameter to **bypass**.
        """
        return pulumi.get(self, "ignore_waf_protection")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy ID of WAF global protection whitelist rule.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the status of WAF global protection whitelist rule.
        Valid values are as follows:
        """
        return pulumi.get(self, "status")

