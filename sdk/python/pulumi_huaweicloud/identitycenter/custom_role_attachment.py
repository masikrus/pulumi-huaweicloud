# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CustomRoleAttachmentArgs', 'CustomRoleAttachment']

@pulumi.input_type
class CustomRoleAttachmentArgs:
    def __init__(__self__, *,
                 custom_role: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 permission_set_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a CustomRoleAttachment resource.
        :param pulumi.Input[_builtins.str] custom_role: Specifies the custom role to attach to a permission set.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the IAM Identity Center instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the IAM Identity Center permission set.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "custom_role", custom_role)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "permission_set_id", permission_set_id)

    @_builtins.property
    @pulumi.getter(name="customRole")
    def custom_role(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the custom role to attach to a permission set.
        """
        return pulumi.get(self, "custom_role")

    @custom_role.setter
    def custom_role(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "custom_role", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the IAM Identity Center instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the IAM Identity Center permission set.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "permission_set_id", value)


@pulumi.input_type
class _CustomRoleAttachmentState:
    def __init__(__self__, *,
                 custom_role: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CustomRoleAttachment resources.
        :param pulumi.Input[_builtins.str] custom_role: Specifies the custom role to attach to a permission set.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the IAM Identity Center instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the IAM Identity Center permission set.
               
               Changing this parameter will create a new resource.
        """
        if custom_role is not None:
            pulumi.set(__self__, "custom_role", custom_role)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if permission_set_id is not None:
            pulumi.set(__self__, "permission_set_id", permission_set_id)

    @_builtins.property
    @pulumi.getter(name="customRole")
    def custom_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom role to attach to a permission set.
        """
        return pulumi.get(self, "custom_role")

    @custom_role.setter
    def custom_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_role", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the IAM Identity Center instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the IAM Identity Center permission set.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_set_id", value)


@pulumi.type_token("huaweicloud:identitycenter/customRoleAttachment:CustomRoleAttachment")
class CustomRoleAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_role: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an Identity Center custom role attachment resource within HuaweiCloud.

        > **NOTE:** Only one custom role can be attached for a permission set, and it will be covered if another custom role
        is attached.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        permission_set_id = config.require_object("permissionSetId")
        system = huaweicloud.identitycenter.get_instance()
        test = huaweicloud.identitycenter.CustomRoleAttachment("test",
            instance_id=system.id,
            permission_set_id=permission_set_id,
            custom_role=json.dumps({
                "Version": "1.1",
                "Statement": [{
                    "Effect": "Allow",
                    "Action": [
                        "iam:users:listUsers",
                        "iam:users:getUser",
                    ],
                }],
            }))
        ```

        ## Import

        The Identity Center custom role attachment can be imported using the `instance_id` and `permission_set_id` separated by

        a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:identitycenter/customRoleAttachment:CustomRoleAttachment test <instance_id>/<permission_set_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] custom_role: Specifies the custom role to attach to a permission set.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the IAM Identity Center instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the IAM Identity Center permission set.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomRoleAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Identity Center custom role attachment resource within HuaweiCloud.

        > **NOTE:** Only one custom role can be attached for a permission set, and it will be covered if another custom role
        is attached.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        permission_set_id = config.require_object("permissionSetId")
        system = huaweicloud.identitycenter.get_instance()
        test = huaweicloud.identitycenter.CustomRoleAttachment("test",
            instance_id=system.id,
            permission_set_id=permission_set_id,
            custom_role=json.dumps({
                "Version": "1.1",
                "Statement": [{
                    "Effect": "Allow",
                    "Action": [
                        "iam:users:listUsers",
                        "iam:users:getUser",
                    ],
                }],
            }))
        ```

        ## Import

        The Identity Center custom role attachment can be imported using the `instance_id` and `permission_set_id` separated by

        a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:identitycenter/customRoleAttachment:CustomRoleAttachment test <instance_id>/<permission_set_id>
        ```

        :param str resource_name: The name of the resource.
        :param CustomRoleAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomRoleAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_role: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomRoleAttachmentArgs.__new__(CustomRoleAttachmentArgs)

            if custom_role is None and not opts.urn:
                raise TypeError("Missing required property 'custom_role'")
            __props__.__dict__["custom_role"] = custom_role
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if permission_set_id is None and not opts.urn:
                raise TypeError("Missing required property 'permission_set_id'")
            __props__.__dict__["permission_set_id"] = permission_set_id
        super(CustomRoleAttachment, __self__).__init__(
            'huaweicloud:identitycenter/customRoleAttachment:CustomRoleAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_role: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            permission_set_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'CustomRoleAttachment':
        """
        Get an existing CustomRoleAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] custom_role: Specifies the custom role to attach to a permission set.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the IAM Identity Center instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the IAM Identity Center permission set.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomRoleAttachmentState.__new__(_CustomRoleAttachmentState)

        __props__.__dict__["custom_role"] = custom_role
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["permission_set_id"] = permission_set_id
        return CustomRoleAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="customRole")
    def custom_role(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the custom role to attach to a permission set.
        """
        return pulumi.get(self, "custom_role")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the IAM Identity Center instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the IAM Identity Center permission set.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "permission_set_id")

