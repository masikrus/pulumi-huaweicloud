# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AccountAssignmentArgs', 'AccountAssignment']

@pulumi.input_type
class AccountAssignmentArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 permission_set_id: pulumi.Input[_builtins.str],
                 principal_id: pulumi.Input[_builtins.str],
                 principal_type: pulumi.Input[_builtins.str],
                 target_id: pulumi.Input[_builtins.str],
                 target_type: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a AccountAssignment resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the Identity Center instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the permission set.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] principal_id: Specifies the ID of the user or user group that belongs to IAM
               Identity Center.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] principal_type: Specifies the type of the user or user group.
               Value options: **USER**, **GROUP**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of the target to be bound.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_type: Specifies the type of the target to be bound. Value options: **ACCOUNT**.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "principal_type", principal_type)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the Identity Center instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the permission set.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "permission_set_id", value)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the user or user group that belongs to IAM
        Identity Center.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "principal_id", value)

    @_builtins.property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the user or user group.
        Value options: **USER**, **GROUP**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "principal_type")

    @principal_type.setter
    def principal_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "principal_type", value)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the target to be bound.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_id", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the target to be bound. Value options: **ACCOUNT**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_type", value)


@pulumi.input_type
class _AccountAssignmentState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 principal_id: Optional[pulumi.Input[_builtins.str]] = None,
                 principal_type: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AccountAssignment resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the Identity Center instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the permission set.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] principal_id: Specifies the ID of the user or user group that belongs to IAM
               Identity Center.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] principal_type: Specifies the type of the user or user group.
               Value options: **USER**, **GROUP**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of the target to be bound.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_type: Specifies the type of the target to be bound. Value options: **ACCOUNT**.
               
               Changing this parameter will create a new resource.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if permission_set_id is not None:
            pulumi.set(__self__, "permission_set_id", permission_set_id)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if principal_type is not None:
            pulumi.set(__self__, "principal_type", principal_type)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the Identity Center instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the permission set.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_set_id", value)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the user or user group that belongs to IAM
        Identity Center.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "principal_id", value)

    @_builtins.property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the user or user group.
        Value options: **USER**, **GROUP**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "principal_type")

    @principal_type.setter
    def principal_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "principal_type", value)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the target to be bound.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_id", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the target to be bound. Value options: **ACCOUNT**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_type", value)


@pulumi.type_token("huaweicloud:identitycenter/accountAssignment:AccountAssignment")
class AccountAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 principal_id: Optional[pulumi.Input[_builtins.str]] = None,
                 principal_type: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an Identity Center account assignment resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        permission_set_id = config.require_object("permissionSetId")
        principal_id = config.require_object("principalId")
        target_id = config.require_object("targetId")
        test = huaweicloud.identitycenter.AccountAssignment("test",
            instance_id=instance_id,
            permission_set_id=permission_set_id,
            principal_id=principal_id,
            principal_type="USER",
            target_id=target_id,
            target_type="ACCOUNT")
        ```

        ## Import

        The Identity Center account permission can be imported using the `instance_id`, `permission_set_id`,`target_id`

        and `principal_id` separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:identitycenter/accountAssignment:AccountAssignment test <instance_id>/<permission_set_id>/<target_id>/<principal_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the Identity Center instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the permission set.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] principal_id: Specifies the ID of the user or user group that belongs to IAM
               Identity Center.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] principal_type: Specifies the type of the user or user group.
               Value options: **USER**, **GROUP**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of the target to be bound.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_type: Specifies the type of the target to be bound. Value options: **ACCOUNT**.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Identity Center account assignment resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        permission_set_id = config.require_object("permissionSetId")
        principal_id = config.require_object("principalId")
        target_id = config.require_object("targetId")
        test = huaweicloud.identitycenter.AccountAssignment("test",
            instance_id=instance_id,
            permission_set_id=permission_set_id,
            principal_id=principal_id,
            principal_type="USER",
            target_id=target_id,
            target_type="ACCOUNT")
        ```

        ## Import

        The Identity Center account permission can be imported using the `instance_id`, `permission_set_id`,`target_id`

        and `principal_id` separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:identitycenter/accountAssignment:AccountAssignment test <instance_id>/<permission_set_id>/<target_id>/<principal_id>
        ```

        :param str resource_name: The name of the resource.
        :param AccountAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 principal_id: Optional[pulumi.Input[_builtins.str]] = None,
                 principal_type: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountAssignmentArgs.__new__(AccountAssignmentArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if permission_set_id is None and not opts.urn:
                raise TypeError("Missing required property 'permission_set_id'")
            __props__.__dict__["permission_set_id"] = permission_set_id
            if principal_id is None and not opts.urn:
                raise TypeError("Missing required property 'principal_id'")
            __props__.__dict__["principal_id"] = principal_id
            if principal_type is None and not opts.urn:
                raise TypeError("Missing required property 'principal_type'")
            __props__.__dict__["principal_type"] = principal_type
            if target_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_id'")
            __props__.__dict__["target_id"] = target_id
            if target_type is None and not opts.urn:
                raise TypeError("Missing required property 'target_type'")
            __props__.__dict__["target_type"] = target_type
        super(AccountAssignment, __self__).__init__(
            'huaweicloud:identitycenter/accountAssignment:AccountAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
            principal_id: Optional[pulumi.Input[_builtins.str]] = None,
            principal_type: Optional[pulumi.Input[_builtins.str]] = None,
            target_id: Optional[pulumi.Input[_builtins.str]] = None,
            target_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'AccountAssignment':
        """
        Get an existing AccountAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the Identity Center instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the permission set.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] principal_id: Specifies the ID of the user or user group that belongs to IAM
               Identity Center.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] principal_type: Specifies the type of the user or user group.
               Value options: **USER**, **GROUP**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of the target to be bound.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_type: Specifies the type of the target to be bound. Value options: **ACCOUNT**.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountAssignmentState.__new__(_AccountAssignmentState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["permission_set_id"] = permission_set_id
        __props__.__dict__["principal_id"] = principal_id
        __props__.__dict__["principal_type"] = principal_type
        __props__.__dict__["target_id"] = target_id
        __props__.__dict__["target_type"] = target_type
        return AccountAssignment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the Identity Center instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the permission set.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the user or user group that belongs to IAM
        Identity Center.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the user or user group.
        Value options: **USER**, **GROUP**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "principal_type")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the target to be bound.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the target to be bound. Value options: **ACCOUNT**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_type")

