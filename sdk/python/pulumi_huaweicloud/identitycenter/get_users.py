# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetUsersResult',
    'AwaitableGetUsersResult',
    'get_users',
    'get_users_output',
]

@pulumi.output_type
class GetUsersResult:
    """
    A collection of values returned by getUsers.
    """
    def __init__(__self__, display_name=None, email=None, family_name=None, given_name=None, id=None, identity_store_id=None, region=None, user_name=None, users=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if family_name and not isinstance(family_name, str):
            raise TypeError("Expected argument 'family_name' to be a str")
        pulumi.set(__self__, "family_name", family_name)
        if given_name and not isinstance(given_name, str):
            raise TypeError("Expected argument 'given_name' to be a str")
        pulumi.set(__self__, "given_name", given_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_store_id and not isinstance(identity_store_id, str):
            raise TypeError("Expected argument 'identity_store_id' to be a str")
        pulumi.set(__self__, "identity_store_id", identity_store_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        Indicates the display name of the user.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.str]:
        """
        Indicates the email of the user.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="familyName")
    def family_name(self) -> Optional[_builtins.str]:
        """
        Indicates the family name of the user.
        """
        return pulumi.get(self, "family_name")

    @_builtins.property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[_builtins.str]:
        """
        Indicates the given name of the user.
        """
        return pulumi.get(self, "given_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="identityStoreId")
    def identity_store_id(self) -> _builtins.str:
        return pulumi.get(self, "identity_store_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region of the user.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the user.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetUsersUserResult']:
        """
        Indicates the list of IdentityCenter user.
        The users structure is documented below.
        """
        return pulumi.get(self, "users")


class AwaitableGetUsersResult(GetUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUsersResult(
            display_name=self.display_name,
            email=self.email,
            family_name=self.family_name,
            given_name=self.given_name,
            id=self.id,
            identity_store_id=self.identity_store_id,
            region=self.region,
            user_name=self.user_name,
            users=self.users)


def get_users(display_name: Optional[_builtins.str] = None,
              email: Optional[_builtins.str] = None,
              family_name: Optional[_builtins.str] = None,
              given_name: Optional[_builtins.str] = None,
              identity_store_id: Optional[_builtins.str] = None,
              region: Optional[_builtins.str] = None,
              user_name: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUsersResult:
    """
    Use this data source to get the Identity Center users.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    system = huaweicloud.identitycenter.get_instance()
    test = huaweicloud.identitycenter.get_users(identity_store_id=system.identity_store_id)
    ```


    :param _builtins.str display_name: Specifies the display name of the user.
    :param _builtins.str email: Specifies the email of the user.
    :param _builtins.str family_name: Specifies the family name of the user.
    :param _builtins.str given_name: Specifies the given name of the user.
    :param _builtins.str identity_store_id: Specifies the ID of the identity store that associated with IAM Identity
           Center.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str user_name: Specifies the name of the user.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['email'] = email
    __args__['familyName'] = family_name
    __args__['givenName'] = given_name
    __args__['identityStoreId'] = identity_store_id
    __args__['region'] = region
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:identitycenter/getUsers:getUsers', __args__, opts=opts, typ=GetUsersResult).value

    return AwaitableGetUsersResult(
        display_name=pulumi.get(__ret__, 'display_name'),
        email=pulumi.get(__ret__, 'email'),
        family_name=pulumi.get(__ret__, 'family_name'),
        given_name=pulumi.get(__ret__, 'given_name'),
        id=pulumi.get(__ret__, 'id'),
        identity_store_id=pulumi.get(__ret__, 'identity_store_id'),
        region=pulumi.get(__ret__, 'region'),
        user_name=pulumi.get(__ret__, 'user_name'),
        users=pulumi.get(__ret__, 'users'))
def get_users_output(display_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     email: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     family_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     given_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     identity_store_id: Optional[pulumi.Input[_builtins.str]] = None,
                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     user_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUsersResult]:
    """
    Use this data source to get the Identity Center users.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    system = huaweicloud.identitycenter.get_instance()
    test = huaweicloud.identitycenter.get_users(identity_store_id=system.identity_store_id)
    ```


    :param _builtins.str display_name: Specifies the display name of the user.
    :param _builtins.str email: Specifies the email of the user.
    :param _builtins.str family_name: Specifies the family name of the user.
    :param _builtins.str given_name: Specifies the given name of the user.
    :param _builtins.str identity_store_id: Specifies the ID of the identity store that associated with IAM Identity
           Center.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str user_name: Specifies the name of the user.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['email'] = email
    __args__['familyName'] = family_name
    __args__['givenName'] = given_name
    __args__['identityStoreId'] = identity_store_id
    __args__['region'] = region
    __args__['userName'] = user_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:identitycenter/getUsers:getUsers', __args__, opts=opts, typ=GetUsersResult)
    return __ret__.apply(lambda __response__: GetUsersResult(
        display_name=pulumi.get(__response__, 'display_name'),
        email=pulumi.get(__response__, 'email'),
        family_name=pulumi.get(__response__, 'family_name'),
        given_name=pulumi.get(__response__, 'given_name'),
        id=pulumi.get(__response__, 'id'),
        identity_store_id=pulumi.get(__response__, 'identity_store_id'),
        region=pulumi.get(__response__, 'region'),
        user_name=pulumi.get(__response__, 'user_name'),
        users=pulumi.get(__response__, 'users')))
