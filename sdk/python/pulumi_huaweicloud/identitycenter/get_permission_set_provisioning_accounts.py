# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPermissionSetProvisioningAccountsResult',
    'AwaitableGetPermissionSetProvisioningAccountsResult',
    'get_permission_set_provisioning_accounts',
    'get_permission_set_provisioning_accounts_output',
]

@pulumi.output_type
class GetPermissionSetProvisioningAccountsResult:
    """
    A collection of values returned by getPermissionSetProvisioningAccounts.
    """
    def __init__(__self__, account_ids=None, id=None, instance_id=None, permission_set_id=None, provisioning_status=None, region=None):
        if account_ids and not isinstance(account_ids, list):
            raise TypeError("Expected argument 'account_ids' to be a list")
        pulumi.set(__self__, "account_ids", account_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if permission_set_id and not isinstance(permission_set_id, str):
            raise TypeError("Expected argument 'permission_set_id' to be a str")
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        if provisioning_status and not isinstance(provisioning_status, str):
            raise TypeError("Expected argument 'provisioning_status' to be a str")
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Sequence[_builtins.str]:
        """
        The account ID list.
        """
        return pulumi.get(self, "account_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> _builtins.str:
        return pulumi.get(self, "permission_set_id")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetPermissionSetProvisioningAccountsResult(GetPermissionSetProvisioningAccountsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPermissionSetProvisioningAccountsResult(
            account_ids=self.account_ids,
            id=self.id,
            instance_id=self.instance_id,
            permission_set_id=self.permission_set_id,
            provisioning_status=self.provisioning_status,
            region=self.region)


def get_permission_set_provisioning_accounts(instance_id: Optional[_builtins.str] = None,
                                             permission_set_id: Optional[_builtins.str] = None,
                                             provisioning_status: Optional[_builtins.str] = None,
                                             region: Optional[_builtins.str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPermissionSetProvisioningAccountsResult:
    """
    Use this data source to get the Identity Center permission set provisioning accounts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    permission_set_id = config.require_object("permissionSetId")
    test = huaweicloud.identitycenter.get_permission_set_provisioning_accounts(instance_id=instance_id,
        permission_set_id=permission_set_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of an IAM Identity Center instance.
    :param _builtins.str permission_set_id: Specifies the ID of a permission set.
    :param _builtins.str provisioning_status: Specifies the provisioning status of a permission set.
           The valid values are as follows:
           + **LATEST_PERMISSION_SET_PROVISIONED**
           + **LATEST_PERMISSION_SET_NOT_PROVISIONED**
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['permissionSetId'] = permission_set_id
    __args__['provisioningStatus'] = provisioning_status
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:identitycenter/getPermissionSetProvisioningAccounts:getPermissionSetProvisioningAccounts', __args__, opts=opts, typ=GetPermissionSetProvisioningAccountsResult).value

    return AwaitableGetPermissionSetProvisioningAccountsResult(
        account_ids=pulumi.get(__ret__, 'account_ids'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        permission_set_id=pulumi.get(__ret__, 'permission_set_id'),
        provisioning_status=pulumi.get(__ret__, 'provisioning_status'),
        region=pulumi.get(__ret__, 'region'))
def get_permission_set_provisioning_accounts_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                    permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                    provisioning_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPermissionSetProvisioningAccountsResult]:
    """
    Use this data source to get the Identity Center permission set provisioning accounts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    permission_set_id = config.require_object("permissionSetId")
    test = huaweicloud.identitycenter.get_permission_set_provisioning_accounts(instance_id=instance_id,
        permission_set_id=permission_set_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of an IAM Identity Center instance.
    :param _builtins.str permission_set_id: Specifies the ID of a permission set.
    :param _builtins.str provisioning_status: Specifies the provisioning status of a permission set.
           The valid values are as follows:
           + **LATEST_PERMISSION_SET_PROVISIONED**
           + **LATEST_PERMISSION_SET_NOT_PROVISIONED**
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['permissionSetId'] = permission_set_id
    __args__['provisioningStatus'] = provisioning_status
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:identitycenter/getPermissionSetProvisioningAccounts:getPermissionSetProvisioningAccounts', __args__, opts=opts, typ=GetPermissionSetProvisioningAccountsResult)
    return __ret__.apply(lambda __response__: GetPermissionSetProvisioningAccountsResult(
        account_ids=pulumi.get(__response__, 'account_ids'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        permission_set_id=pulumi.get(__response__, 'permission_set_id'),
        provisioning_status=pulumi.get(__response__, 'provisioning_status'),
        region=pulumi.get(__response__, 'region')))
