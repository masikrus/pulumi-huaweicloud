# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ProvisionPermissionSetArgs', 'ProvisionPermissionSet']

@pulumi.input_type
class ProvisionPermissionSetArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 permission_set_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ProvisionPermissionSet resource.
        :param pulumi.Input[_builtins.str] account_id: Specifies the account ID.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of an IAM Identity Center instance.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of a permission set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of an IAM Identity Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "permission_set_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to query the resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ProvisionPermissionSetState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ProvisionPermissionSet resources.
        :param pulumi.Input[_builtins.str] account_id: Specifies the account ID.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of an IAM Identity Center instance.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of a permission set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used.
        :param pulumi.Input[_builtins.str] status: The authorization status of a permission set.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if permission_set_id is not None:
            pulumi.set(__self__, "permission_set_id", permission_set_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of an IAM Identity Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_set_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to query the resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authorization status of a permission set.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:identitycenter/provisionPermissionSet:ProvisionPermissionSet")
class ProvisionPermissionSet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an Identity Center provision permission set resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        permission_set_id = config.require_object("permissionSetId")
        account_id = config.require_object("accountId")
        test = huaweicloud.identitycenter.ProvisionPermissionSet("test",
            instance_id=instance_id,
            permission_set_id=permission_set_id,
            account_id=account_id)
        ```

        ## Import

        The Identity Center provision permission set can be imported using the `instance_id` and `id`(request ID)

        separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:identitycenter/provisionPermissionSet:ProvisionPermissionSet test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: Specifies the account ID.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of an IAM Identity Center instance.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of a permission set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProvisionPermissionSetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Identity Center provision permission set resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        permission_set_id = config.require_object("permissionSetId")
        account_id = config.require_object("accountId")
        test = huaweicloud.identitycenter.ProvisionPermissionSet("test",
            instance_id=instance_id,
            permission_set_id=permission_set_id,
            account_id=account_id)
        ```

        ## Import

        The Identity Center provision permission set can be imported using the `instance_id` and `id`(request ID)

        separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:identitycenter/provisionPermissionSet:ProvisionPermissionSet test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param ProvisionPermissionSetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProvisionPermissionSetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProvisionPermissionSetArgs.__new__(ProvisionPermissionSetArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if permission_set_id is None and not opts.urn:
                raise TypeError("Missing required property 'permission_set_id'")
            __props__.__dict__["permission_set_id"] = permission_set_id
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = None
        super(ProvisionPermissionSet, __self__).__init__(
            'huaweicloud:identitycenter/provisionPermissionSet:ProvisionPermissionSet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'ProvisionPermissionSet':
        """
        Get an existing ProvisionPermissionSet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: Specifies the account ID.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of an IAM Identity Center instance.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of a permission set.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used.
        :param pulumi.Input[_builtins.str] status: The authorization status of a permission set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProvisionPermissionSetState.__new__(_ProvisionPermissionSetState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["permission_set_id"] = permission_set_id
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return ProvisionPermissionSet(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the account ID.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of an IAM Identity Center instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to query the resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The authorization status of a permission set.
        """
        return pulumi.get(self, "status")

