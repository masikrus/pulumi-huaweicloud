# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[_builtins.str],
                 email: pulumi.Input[_builtins.str],
                 family_name: pulumi.Input[_builtins.str],
                 given_name: pulumi.Input[_builtins.str],
                 identity_store_id: pulumi.Input[_builtins.str],
                 password_mode: pulumi.Input[_builtins.str],
                 user_name: pulumi.Input[_builtins.str],
                 addresses: Optional[pulumi.Input['UserAddressesArgs']] = None,
                 enterprise: Optional[pulumi.Input['UserEnterpriseArgs']] = None,
                 phone_number: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 user_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[_builtins.str] display_name: Specifies the display name of the user.
        :param pulumi.Input[_builtins.str] email: Specifies the email of the user.
        :param pulumi.Input[_builtins.str] family_name: Specifies the family name of the user.
        :param pulumi.Input[_builtins.str] given_name: Specifies the given name of the user.
        :param pulumi.Input[_builtins.str] identity_store_id: Specifies the ID of the identity store.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] password_mode: Specifies the initialized password mode. Value options:
               + **OTP**: Generate random One-time password.
               + **EMAIL**: Sending an email to user which include password setting instructions.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_name: Specifies the username of the user.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['UserAddressesArgs'] addresses: Specifies the addresses information of the user.
               The addresses structure is documented below.
        :param pulumi.Input['UserEnterpriseArgs'] enterprise: Specifies the enterprise information of the user.
               The enterprise structure is documented below.
               
               <a name="addresses_struct"></a>
               The `addresses` block supports:
        :param pulumi.Input[_builtins.str] phone_number: Specifies the phone number of the user.
        :param pulumi.Input[_builtins.str] region: Specifies the region of the user.
        :param pulumi.Input[_builtins.str] title: Specifies the title of the user.
        :param pulumi.Input[_builtins.str] user_type: Specifies the type of the user.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "identity_store_id", identity_store_id)
        pulumi.set(__self__, "password_mode", password_mode)
        pulumi.set(__self__, "user_name", user_name)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if enterprise is not None:
            pulumi.set(__self__, "enterprise", enterprise)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the display name of the user.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the email of the user.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="familyName")
    def family_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the family name of the user.
        """
        return pulumi.get(self, "family_name")

    @family_name.setter
    def family_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "family_name", value)

    @_builtins.property
    @pulumi.getter(name="givenName")
    def given_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the given name of the user.
        """
        return pulumi.get(self, "given_name")

    @given_name.setter
    def given_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "given_name", value)

    @_builtins.property
    @pulumi.getter(name="identityStoreId")
    def identity_store_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the identity store.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "identity_store_id")

    @identity_store_id.setter
    def identity_store_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "identity_store_id", value)

    @_builtins.property
    @pulumi.getter(name="passwordMode")
    def password_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the initialized password mode. Value options:
        + **OTP**: Generate random One-time password.
        + **EMAIL**: Sending an email to user which include password setting instructions.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "password_mode")

    @password_mode.setter
    def password_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password_mode", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the username of the user.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input['UserAddressesArgs']]:
        """
        Specifies the addresses information of the user.
        The addresses structure is documented below.
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input['UserAddressesArgs']]):
        pulumi.set(self, "addresses", value)

    @_builtins.property
    @pulumi.getter
    def enterprise(self) -> Optional[pulumi.Input['UserEnterpriseArgs']]:
        """
        Specifies the enterprise information of the user.
        The enterprise structure is documented below.

        <a name="addresses_struct"></a>
        The `addresses` block supports:
        """
        return pulumi.get(self, "enterprise")

    @enterprise.setter
    def enterprise(self, value: Optional[pulumi.Input['UserEnterpriseArgs']]):
        pulumi.set(self, "enterprise", value)

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the phone number of the user.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "phone_number", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region of the user.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the title of the user.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the user.
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_type", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input['UserAddressesArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 email_verified: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 enterprise: Optional[pulumi.Input['UserEnterpriseArgs']] = None,
                 family_name: Optional[pulumi.Input[_builtins.str]] = None,
                 given_name: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_store_id: Optional[pulumi.Input[_builtins.str]] = None,
                 password_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 phone_number: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input['UserAddressesArgs'] addresses: Specifies the addresses information of the user.
               The addresses structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the user.
        :param pulumi.Input[_builtins.str] created_by: The creator of the user.
        :param pulumi.Input[_builtins.str] display_name: Specifies the display name of the user.
        :param pulumi.Input[_builtins.str] email: Specifies the email of the user.
        :param pulumi.Input[_builtins.bool] email_verified: Whether the email is verified.
        :param pulumi.Input[_builtins.bool] enabled: Whether the user is enabled.
        :param pulumi.Input['UserEnterpriseArgs'] enterprise: Specifies the enterprise information of the user.
               The enterprise structure is documented below.
               
               <a name="addresses_struct"></a>
               The `addresses` block supports:
        :param pulumi.Input[_builtins.str] family_name: Specifies the family name of the user.
        :param pulumi.Input[_builtins.str] given_name: Specifies the given name of the user.
        :param pulumi.Input[_builtins.str] identity_store_id: Specifies the ID of the identity store.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] password_mode: Specifies the initialized password mode. Value options:
               + **OTP**: Generate random One-time password.
               + **EMAIL**: Sending an email to user which include password setting instructions.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] phone_number: Specifies the phone number of the user.
        :param pulumi.Input[_builtins.str] region: Specifies the region of the user.
        :param pulumi.Input[_builtins.str] title: Specifies the title of the user.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the user.
        :param pulumi.Input[_builtins.str] updated_by: The updater of the user.
        :param pulumi.Input[_builtins.str] user_name: Specifies the username of the user.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_type: Specifies the type of the user.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if email_verified is not None:
            pulumi.set(__self__, "email_verified", email_verified)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enterprise is not None:
            pulumi.set(__self__, "enterprise", enterprise)
        if family_name is not None:
            pulumi.set(__self__, "family_name", family_name)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if identity_store_id is not None:
            pulumi.set(__self__, "identity_store_id", identity_store_id)
        if password_mode is not None:
            pulumi.set(__self__, "password_mode", password_mode)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input['UserAddressesArgs']]:
        """
        Specifies the addresses information of the user.
        The addresses structure is documented below.
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input['UserAddressesArgs']]):
        pulumi.set(self, "addresses", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the user.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creator of the user.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the display name of the user.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the email of the user.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="emailVerified")
    def email_verified(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the email is verified.
        """
        return pulumi.get(self, "email_verified")

    @email_verified.setter
    def email_verified(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "email_verified", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the user is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def enterprise(self) -> Optional[pulumi.Input['UserEnterpriseArgs']]:
        """
        Specifies the enterprise information of the user.
        The enterprise structure is documented below.

        <a name="addresses_struct"></a>
        The `addresses` block supports:
        """
        return pulumi.get(self, "enterprise")

    @enterprise.setter
    def enterprise(self, value: Optional[pulumi.Input['UserEnterpriseArgs']]):
        pulumi.set(self, "enterprise", value)

    @_builtins.property
    @pulumi.getter(name="familyName")
    def family_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the family name of the user.
        """
        return pulumi.get(self, "family_name")

    @family_name.setter
    def family_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "family_name", value)

    @_builtins.property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the given name of the user.
        """
        return pulumi.get(self, "given_name")

    @given_name.setter
    def given_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "given_name", value)

    @_builtins.property
    @pulumi.getter(name="identityStoreId")
    def identity_store_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the identity store.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "identity_store_id")

    @identity_store_id.setter
    def identity_store_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identity_store_id", value)

    @_builtins.property
    @pulumi.getter(name="passwordMode")
    def password_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the initialized password mode. Value options:
        + **OTP**: Generate random One-time password.
        + **EMAIL**: Sending an email to user which include password setting instructions.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "password_mode")

    @password_mode.setter
    def password_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password_mode", value)

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the phone number of the user.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "phone_number", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region of the user.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the title of the user.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the user.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updater of the user.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the username of the user.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the user.
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_type", value)


@pulumi.type_token("huaweicloud:identitycenter/user:User")
class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addresses: Optional[pulumi.Input[Union['UserAddressesArgs', 'UserAddressesArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise: Optional[pulumi.Input[Union['UserEnterpriseArgs', 'UserEnterpriseArgsDict']]] = None,
                 family_name: Optional[pulumi.Input[_builtins.str]] = None,
                 given_name: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_store_id: Optional[pulumi.Input[_builtins.str]] = None,
                 password_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 phone_number: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an Identity Center user resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        identity_store_id = config.require_object("identityStoreId")
        test = huaweicloud.identitycenter.User("test",
            identity_store_id=identity_store_id,
            user_name="test_user",
            password_mode="OTP",
            display_name="test_display_name",
            family_name="test_family_name",
            given_name="test_given_name",
            email="email@example.com")
        ```

        ## Import

        The IdentityCenter user can be imported using the `identity_store_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:identitycenter/user:User test <identity_store_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `password_mode`. It is generally

        recommended running `pulumi preview` after importing an IdentityCenter user. You can then decide if changes should be

        applied to the IdentityCenter user, or the resource definition should be updated to align with the instance. Also, you

        can ignore changes as below.

        hcl

        resource "huaweicloud_identitycenter_user" "user" {

          ...

          lifecycle {

            ignore_changes = [
            
              password_mode,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['UserAddressesArgs', 'UserAddressesArgsDict']] addresses: Specifies the addresses information of the user.
               The addresses structure is documented below.
        :param pulumi.Input[_builtins.str] display_name: Specifies the display name of the user.
        :param pulumi.Input[_builtins.str] email: Specifies the email of the user.
        :param pulumi.Input[Union['UserEnterpriseArgs', 'UserEnterpriseArgsDict']] enterprise: Specifies the enterprise information of the user.
               The enterprise structure is documented below.
               
               <a name="addresses_struct"></a>
               The `addresses` block supports:
        :param pulumi.Input[_builtins.str] family_name: Specifies the family name of the user.
        :param pulumi.Input[_builtins.str] given_name: Specifies the given name of the user.
        :param pulumi.Input[_builtins.str] identity_store_id: Specifies the ID of the identity store.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] password_mode: Specifies the initialized password mode. Value options:
               + **OTP**: Generate random One-time password.
               + **EMAIL**: Sending an email to user which include password setting instructions.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] phone_number: Specifies the phone number of the user.
        :param pulumi.Input[_builtins.str] region: Specifies the region of the user.
        :param pulumi.Input[_builtins.str] title: Specifies the title of the user.
        :param pulumi.Input[_builtins.str] user_name: Specifies the username of the user.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_type: Specifies the type of the user.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Identity Center user resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        identity_store_id = config.require_object("identityStoreId")
        test = huaweicloud.identitycenter.User("test",
            identity_store_id=identity_store_id,
            user_name="test_user",
            password_mode="OTP",
            display_name="test_display_name",
            family_name="test_family_name",
            given_name="test_given_name",
            email="email@example.com")
        ```

        ## Import

        The IdentityCenter user can be imported using the `identity_store_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:identitycenter/user:User test <identity_store_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `password_mode`. It is generally

        recommended running `pulumi preview` after importing an IdentityCenter user. You can then decide if changes should be

        applied to the IdentityCenter user, or the resource definition should be updated to align with the instance. Also, you

        can ignore changes as below.

        hcl

        resource "huaweicloud_identitycenter_user" "user" {

          ...

          lifecycle {

            ignore_changes = [
            
              password_mode,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addresses: Optional[pulumi.Input[Union['UserAddressesArgs', 'UserAddressesArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise: Optional[pulumi.Input[Union['UserEnterpriseArgs', 'UserEnterpriseArgsDict']]] = None,
                 family_name: Optional[pulumi.Input[_builtins.str]] = None,
                 given_name: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_store_id: Optional[pulumi.Input[_builtins.str]] = None,
                 password_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 phone_number: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["addresses"] = addresses
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["enterprise"] = enterprise
            if family_name is None and not opts.urn:
                raise TypeError("Missing required property 'family_name'")
            __props__.__dict__["family_name"] = family_name
            if given_name is None and not opts.urn:
                raise TypeError("Missing required property 'given_name'")
            __props__.__dict__["given_name"] = given_name
            if identity_store_id is None and not opts.urn:
                raise TypeError("Missing required property 'identity_store_id'")
            __props__.__dict__["identity_store_id"] = identity_store_id
            if password_mode is None and not opts.urn:
                raise TypeError("Missing required property 'password_mode'")
            __props__.__dict__["password_mode"] = password_mode
            __props__.__dict__["phone_number"] = phone_number
            __props__.__dict__["region"] = region
            __props__.__dict__["title"] = title
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["user_type"] = user_type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["email_verified"] = None
            __props__.__dict__["enabled"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(User, __self__).__init__(
            'huaweicloud:identitycenter/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addresses: Optional[pulumi.Input[Union['UserAddressesArgs', 'UserAddressesArgsDict']]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            display_name: Optional[pulumi.Input[_builtins.str]] = None,
            email: Optional[pulumi.Input[_builtins.str]] = None,
            email_verified: Optional[pulumi.Input[_builtins.bool]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            enterprise: Optional[pulumi.Input[Union['UserEnterpriseArgs', 'UserEnterpriseArgsDict']]] = None,
            family_name: Optional[pulumi.Input[_builtins.str]] = None,
            given_name: Optional[pulumi.Input[_builtins.str]] = None,
            identity_store_id: Optional[pulumi.Input[_builtins.str]] = None,
            password_mode: Optional[pulumi.Input[_builtins.str]] = None,
            phone_number: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            title: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            user_name: Optional[pulumi.Input[_builtins.str]] = None,
            user_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['UserAddressesArgs', 'UserAddressesArgsDict']] addresses: Specifies the addresses information of the user.
               The addresses structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the user.
        :param pulumi.Input[_builtins.str] created_by: The creator of the user.
        :param pulumi.Input[_builtins.str] display_name: Specifies the display name of the user.
        :param pulumi.Input[_builtins.str] email: Specifies the email of the user.
        :param pulumi.Input[_builtins.bool] email_verified: Whether the email is verified.
        :param pulumi.Input[_builtins.bool] enabled: Whether the user is enabled.
        :param pulumi.Input[Union['UserEnterpriseArgs', 'UserEnterpriseArgsDict']] enterprise: Specifies the enterprise information of the user.
               The enterprise structure is documented below.
               
               <a name="addresses_struct"></a>
               The `addresses` block supports:
        :param pulumi.Input[_builtins.str] family_name: Specifies the family name of the user.
        :param pulumi.Input[_builtins.str] given_name: Specifies the given name of the user.
        :param pulumi.Input[_builtins.str] identity_store_id: Specifies the ID of the identity store.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] password_mode: Specifies the initialized password mode. Value options:
               + **OTP**: Generate random One-time password.
               + **EMAIL**: Sending an email to user which include password setting instructions.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] phone_number: Specifies the phone number of the user.
        :param pulumi.Input[_builtins.str] region: Specifies the region of the user.
        :param pulumi.Input[_builtins.str] title: Specifies the title of the user.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the user.
        :param pulumi.Input[_builtins.str] updated_by: The updater of the user.
        :param pulumi.Input[_builtins.str] user_name: Specifies the username of the user.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] user_type: Specifies the type of the user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["addresses"] = addresses
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["email"] = email
        __props__.__dict__["email_verified"] = email_verified
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["enterprise"] = enterprise
        __props__.__dict__["family_name"] = family_name
        __props__.__dict__["given_name"] = given_name
        __props__.__dict__["identity_store_id"] = identity_store_id
        __props__.__dict__["password_mode"] = password_mode
        __props__.__dict__["phone_number"] = phone_number
        __props__.__dict__["region"] = region
        __props__.__dict__["title"] = title
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["user_type"] = user_type
        return User(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> pulumi.Output[Optional['outputs.UserAddresses']]:
        """
        Specifies the addresses information of the user.
        The addresses structure is documented below.
        """
        return pulumi.get(self, "addresses")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the user.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The creator of the user.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the display name of the user.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the email of the user.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="emailVerified")
    def email_verified(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the email is verified.
        """
        return pulumi.get(self, "email_verified")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the user is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def enterprise(self) -> pulumi.Output[Optional['outputs.UserEnterprise']]:
        """
        Specifies the enterprise information of the user.
        The enterprise structure is documented below.

        <a name="addresses_struct"></a>
        The `addresses` block supports:
        """
        return pulumi.get(self, "enterprise")

    @_builtins.property
    @pulumi.getter(name="familyName")
    def family_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the family name of the user.
        """
        return pulumi.get(self, "family_name")

    @_builtins.property
    @pulumi.getter(name="givenName")
    def given_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the given name of the user.
        """
        return pulumi.get(self, "given_name")

    @_builtins.property
    @pulumi.getter(name="identityStoreId")
    def identity_store_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the identity store.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "identity_store_id")

    @_builtins.property
    @pulumi.getter(name="passwordMode")
    def password_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the initialized password mode. Value options:
        + **OTP**: Generate random One-time password.
        + **EMAIL**: Sending an email to user which include password setting instructions.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "password_mode")

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the phone number of the user.
        """
        return pulumi.get(self, "phone_number")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region of the user.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the title of the user.
        """
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time of the user.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The updater of the user.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the username of the user.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of the user.
        """
        return pulumi.get(self, "user_type")

