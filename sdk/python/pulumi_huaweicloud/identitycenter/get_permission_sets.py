# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPermissionSetsResult',
    'AwaitableGetPermissionSetsResult',
    'get_permission_sets',
    'get_permission_sets_output',
]

@pulumi.output_type
class GetPermissionSetsResult:
    """
    A collection of values returned by getPermissionSets.
    """
    def __init__(__self__, id=None, instance_id=None, name=None, permission_set_id=None, permission_sets=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permission_set_id and not isinstance(permission_set_id, str):
            raise TypeError("Expected argument 'permission_set_id' to be a str")
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        if permission_sets and not isinstance(permission_sets, list):
            raise TypeError("Expected argument 'permission_sets' to be a list")
        pulumi.set(__self__, "permission_sets", permission_sets)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of a permission set.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> Optional[_builtins.str]:
        """
        The ID of a permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @_builtins.property
    @pulumi.getter(name="permissionSets")
    def permission_sets(self) -> Sequence['outputs.GetPermissionSetsPermissionSetResult']:
        """
        The permission set list.
        """
        return pulumi.get(self, "permission_sets")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetPermissionSetsResult(GetPermissionSetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPermissionSetsResult(
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            permission_set_id=self.permission_set_id,
            permission_sets=self.permission_sets,
            region=self.region)


def get_permission_sets(instance_id: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        permission_set_id: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPermissionSetsResult:
    """
    Use this data source to get the Identity Center permission sets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.identitycenter.get_permission_sets(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of an IAM Identity Center instance.
    :param _builtins.str name: Specifies the name of a permission set.
    :param _builtins.str permission_set_id: Specifies the ID of a permission set.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['permissionSetId'] = permission_set_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:identitycenter/getPermissionSets:getPermissionSets', __args__, opts=opts, typ=GetPermissionSetsResult).value

    return AwaitableGetPermissionSetsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        permission_set_id=pulumi.get(__ret__, 'permission_set_id'),
        permission_sets=pulumi.get(__ret__, 'permission_sets'),
        region=pulumi.get(__ret__, 'region'))
def get_permission_sets_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               permission_set_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPermissionSetsResult]:
    """
    Use this data source to get the Identity Center permission sets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.identitycenter.get_permission_sets(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of an IAM Identity Center instance.
    :param _builtins.str name: Specifies the name of a permission set.
    :param _builtins.str permission_set_id: Specifies the ID of a permission set.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['permissionSetId'] = permission_set_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:identitycenter/getPermissionSets:getPermissionSets', __args__, opts=opts, typ=GetPermissionSetsResult)
    return __ret__.apply(lambda __response__: GetPermissionSetsResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        permission_set_id=pulumi.get(__response__, 'permission_set_id'),
        permission_sets=pulumi.get(__response__, 'permission_sets'),
        region=pulumi.get(__response__, 'region')))
