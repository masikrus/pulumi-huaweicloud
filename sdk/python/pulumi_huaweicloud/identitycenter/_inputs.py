# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccessControlAttributeConfigurationAccessControlAttributeArgs',
    'AccessControlAttributeConfigurationAccessControlAttributeArgsDict',
    'SystemIdentityPolicyAttachmentAttachedPolicyArgs',
    'SystemIdentityPolicyAttachmentAttachedPolicyArgsDict',
    'SystemPolicyAttachmentAttachedPolicyArgs',
    'SystemPolicyAttachmentAttachedPolicyArgsDict',
    'UserAddressesArgs',
    'UserAddressesArgsDict',
    'UserEnterpriseArgs',
    'UserEnterpriseArgsDict',
]

MYPY = False

if not MYPY:
    class AccessControlAttributeConfigurationAccessControlAttributeArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Specifies the name of the attribute associated with the identity in your identity source.
        """
        values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the value used to map the specified attribute to the identity source.
        """
elif False:
    AccessControlAttributeConfigurationAccessControlAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlAttributeConfigurationAccessControlAttributeArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the name of the attribute associated with the identity in your identity source.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] values: Specifies the value used to map the specified attribute to the identity source.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the attribute associated with the identity in your identity source.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the value used to map the specified attribute to the identity source.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class SystemIdentityPolicyAttachmentAttachedPolicyArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of an IAM system identity policy.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of an IAM system identity policy.
        """
elif False:
    SystemIdentityPolicyAttachmentAttachedPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemIdentityPolicyAttachmentAttachedPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: The ID of an IAM system identity policy.
        :param pulumi.Input[_builtins.str] name: The name of an IAM system identity policy.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of an IAM system identity policy.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of an IAM system identity policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class SystemPolicyAttachmentAttachedPolicyArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of an IAM system policy/role.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of an IAM system policy/role.
        """
elif False:
    SystemPolicyAttachmentAttachedPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemPolicyAttachmentAttachedPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: The ID of an IAM system policy/role.
        :param pulumi.Input[_builtins.str] name: The name of an IAM system policy/role.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of an IAM system policy/role.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of an IAM system policy/role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class UserAddressesArgsDict(TypedDict):
        country: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the country of the user.
        """
        formatted: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies a string containing a formatted version of the address to be displayed.
        """
        locality: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the locality of the user.
        """
        postal_code: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the postal code of the user.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the region of the user.
        """
        street_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the street address of the user.

        <a name="enterprise_struct"></a>
        The `enterprise` block supports:
        """
elif False:
    UserAddressesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserAddressesArgs:
    def __init__(__self__, *,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 formatted: Optional[pulumi.Input[_builtins.str]] = None,
                 locality: Optional[pulumi.Input[_builtins.str]] = None,
                 postal_code: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 street_address: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] country: Specifies the country of the user.
        :param pulumi.Input[_builtins.str] formatted: Specifies a string containing a formatted version of the address to be displayed.
        :param pulumi.Input[_builtins.str] locality: Specifies the locality of the user.
        :param pulumi.Input[_builtins.str] postal_code: Specifies the postal code of the user.
        :param pulumi.Input[_builtins.str] region: Specifies the region of the user.
        :param pulumi.Input[_builtins.str] street_address: Specifies the street address of the user.
               
               <a name="enterprise_struct"></a>
               The `enterprise` block supports:
        """
        if country is not None:
            pulumi.set(__self__, "country", country)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if street_address is not None:
            pulumi.set(__self__, "street_address", street_address)

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the country of the user.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "country", value)

    @_builtins.property
    @pulumi.getter
    def formatted(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a string containing a formatted version of the address to be displayed.
        """
        return pulumi.get(self, "formatted")

    @formatted.setter
    def formatted(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "formatted", value)

    @_builtins.property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the locality of the user.
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "locality", value)

    @_builtins.property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the postal code of the user.
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "postal_code", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region of the user.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the street address of the user.

        <a name="enterprise_struct"></a>
        The `enterprise` block supports:
        """
        return pulumi.get(self, "street_address")

    @street_address.setter
    def street_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "street_address", value)


if not MYPY:
    class UserEnterpriseArgsDict(TypedDict):
        cost_center: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the cost center of the enterprise.
        """
        department: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the department of the enterprise.
        """
        division: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the division of the enterprise.
        """
        employee_number: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the employee number of the enterprise.
        """
        manager: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the manager of the enterprise.
        """
        organization: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the organization of the enterprise.
        """
elif False:
    UserEnterpriseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserEnterpriseArgs:
    def __init__(__self__, *,
                 cost_center: Optional[pulumi.Input[_builtins.str]] = None,
                 department: Optional[pulumi.Input[_builtins.str]] = None,
                 division: Optional[pulumi.Input[_builtins.str]] = None,
                 employee_number: Optional[pulumi.Input[_builtins.str]] = None,
                 manager: Optional[pulumi.Input[_builtins.str]] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cost_center: Specifies the cost center of the enterprise.
        :param pulumi.Input[_builtins.str] department: Specifies the department of the enterprise.
        :param pulumi.Input[_builtins.str] division: Specifies the division of the enterprise.
        :param pulumi.Input[_builtins.str] employee_number: Specifies the employee number of the enterprise.
        :param pulumi.Input[_builtins.str] manager: Specifies the manager of the enterprise.
        :param pulumi.Input[_builtins.str] organization: Specifies the organization of the enterprise.
        """
        if cost_center is not None:
            pulumi.set(__self__, "cost_center", cost_center)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if division is not None:
            pulumi.set(__self__, "division", division)
        if employee_number is not None:
            pulumi.set(__self__, "employee_number", employee_number)
        if manager is not None:
            pulumi.set(__self__, "manager", manager)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @_builtins.property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cost center of the enterprise.
        """
        return pulumi.get(self, "cost_center")

    @cost_center.setter
    def cost_center(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_center", value)

    @_builtins.property
    @pulumi.getter
    def department(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the department of the enterprise.
        """
        return pulumi.get(self, "department")

    @department.setter
    def department(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "department", value)

    @_builtins.property
    @pulumi.getter
    def division(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the division of the enterprise.
        """
        return pulumi.get(self, "division")

    @division.setter
    def division(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "division", value)

    @_builtins.property
    @pulumi.getter(name="employeeNumber")
    def employee_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the employee number of the enterprise.
        """
        return pulumi.get(self, "employee_number")

    @employee_number.setter
    def employee_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "employee_number", value)

    @_builtins.property
    @pulumi.getter
    def manager(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the manager of the enterprise.
        """
        return pulumi.get(self, "manager")

    @manager.setter
    def manager(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "manager", value)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the organization of the enterprise.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization", value)


