# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AccessControlAttributeConfigurationAccessControlAttribute',
    'SystemIdentityPolicyAttachmentAttachedPolicy',
    'SystemPolicyAttachmentAttachedPolicy',
    'UserAddresses',
    'UserEnterprise',
    'GetAccessControlAttributeConfigurationsAccessControlAttributeResult',
    'GetGroupsGroupResult',
    'GetPermissionSetProvisioningsProvisioningResult',
    'GetPermissionSetsPermissionSetResult',
    'GetSystemIdentityPolicyAttachmentsPolicyResult',
    'GetSystemPolicyAttachmentsPolicyResult',
    'GetUsersUserResult',
    'GetUsersUserAddressResult',
    'GetUsersUserEnterpriseResult',
]

@pulumi.output_type
class AccessControlAttributeConfigurationAccessControlAttribute(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the name of the attribute associated with the identity in your identity source.
        :param Sequence[_builtins.str] values: Specifies the value used to map the specified attribute to the identity source.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the name of the attribute associated with the identity in your identity source.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the value used to map the specified attribute to the identity source.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class SystemIdentityPolicyAttachmentAttachedPolicy(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The ID of an IAM system identity policy.
        :param _builtins.str name: The name of an IAM system identity policy.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of an IAM system identity policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of an IAM system identity policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemPolicyAttachmentAttachedPolicy(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The ID of an IAM system policy/role.
        :param _builtins.str name: The name of an IAM system policy/role.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of an IAM system policy/role.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of an IAM system policy/role.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserAddresses(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postalCode":
            suggest = "postal_code"
        elif key == "streetAddress":
            suggest = "street_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAddresses. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAddresses.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAddresses.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country: Optional[_builtins.str] = None,
                 formatted: Optional[_builtins.str] = None,
                 locality: Optional[_builtins.str] = None,
                 postal_code: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 street_address: Optional[_builtins.str] = None):
        """
        :param _builtins.str country: Specifies the country of the user.
        :param _builtins.str formatted: Specifies a string containing a formatted version of the address to be displayed.
        :param _builtins.str locality: Specifies the locality of the user.
        :param _builtins.str postal_code: Specifies the postal code of the user.
        :param _builtins.str region: Specifies the region of the user.
        :param _builtins.str street_address: Specifies the street address of the user.
               
               <a name="enterprise_struct"></a>
               The `enterprise` block supports:
        """
        if country is not None:
            pulumi.set(__self__, "country", country)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if street_address is not None:
            pulumi.set(__self__, "street_address", street_address)

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[_builtins.str]:
        """
        Specifies the country of the user.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def formatted(self) -> Optional[_builtins.str]:
        """
        Specifies a string containing a formatted version of the address to be displayed.
        """
        return pulumi.get(self, "formatted")

    @_builtins.property
    @pulumi.getter
    def locality(self) -> Optional[_builtins.str]:
        """
        Specifies the locality of the user.
        """
        return pulumi.get(self, "locality")

    @_builtins.property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[_builtins.str]:
        """
        Specifies the postal code of the user.
        """
        return pulumi.get(self, "postal_code")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Specifies the region of the user.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[_builtins.str]:
        """
        Specifies the street address of the user.

        <a name="enterprise_struct"></a>
        The `enterprise` block supports:
        """
        return pulumi.get(self, "street_address")


@pulumi.output_type
class UserEnterprise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costCenter":
            suggest = "cost_center"
        elif key == "employeeNumber":
            suggest = "employee_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserEnterprise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserEnterprise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserEnterprise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost_center: Optional[_builtins.str] = None,
                 department: Optional[_builtins.str] = None,
                 division: Optional[_builtins.str] = None,
                 employee_number: Optional[_builtins.str] = None,
                 manager: Optional[_builtins.str] = None,
                 organization: Optional[_builtins.str] = None):
        """
        :param _builtins.str cost_center: Specifies the cost center of the enterprise.
        :param _builtins.str department: Specifies the department of the enterprise.
        :param _builtins.str division: Specifies the division of the enterprise.
        :param _builtins.str employee_number: Specifies the employee number of the enterprise.
        :param _builtins.str manager: Specifies the manager of the enterprise.
        :param _builtins.str organization: Specifies the organization of the enterprise.
        """
        if cost_center is not None:
            pulumi.set(__self__, "cost_center", cost_center)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if division is not None:
            pulumi.set(__self__, "division", division)
        if employee_number is not None:
            pulumi.set(__self__, "employee_number", employee_number)
        if manager is not None:
            pulumi.set(__self__, "manager", manager)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @_builtins.property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> Optional[_builtins.str]:
        """
        Specifies the cost center of the enterprise.
        """
        return pulumi.get(self, "cost_center")

    @_builtins.property
    @pulumi.getter
    def department(self) -> Optional[_builtins.str]:
        """
        Specifies the department of the enterprise.
        """
        return pulumi.get(self, "department")

    @_builtins.property
    @pulumi.getter
    def division(self) -> Optional[_builtins.str]:
        """
        Specifies the division of the enterprise.
        """
        return pulumi.get(self, "division")

    @_builtins.property
    @pulumi.getter(name="employeeNumber")
    def employee_number(self) -> Optional[_builtins.str]:
        """
        Specifies the employee number of the enterprise.
        """
        return pulumi.get(self, "employee_number")

    @_builtins.property
    @pulumi.getter
    def manager(self) -> Optional[_builtins.str]:
        """
        Specifies the manager of the enterprise.
        """
        return pulumi.get(self, "manager")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> Optional[_builtins.str]:
        """
        Specifies the organization of the enterprise.
        """
        return pulumi.get(self, "organization")


@pulumi.output_type
class GetAccessControlAttributeConfigurationsAccessControlAttributeResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The name of the attribute associated with the identity in the identity source.
        :param Sequence[_builtins.str] values: The value mapped to identity source from the specified attribute.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The name of the attribute associated with the identity in the identity source.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The value mapped to identity source from the specified attribute.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: Indicates the creation time.
        :param _builtins.str description: Indicates the description of the group.
        :param _builtins.str id: Indicates the ID of the group.
        :param _builtins.str name: Specifies the name of the group.
        :param _builtins.str updated_at: Indicates the last update time.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the last update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetPermissionSetProvisioningsProvisioningResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 request_id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str created_at: The date when a permission set was created.
        :param _builtins.str request_id: The unique ID of a request.
        :param _builtins.str status: Specifies the status of the permission set provisioning process.
               The valid values are as follows:
               + **IN_PROGRESS**
               + **SUCCEEDED**
               + **FAILED**
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The date when a permission set was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The unique ID of a request.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the permission set provisioning process.
        The valid values are as follows:
        + **IN_PROGRESS**
        + **SUCCEEDED**
        + **FAILED**
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetPermissionSetsPermissionSetResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 name: _builtins.str,
                 permission_set_id: _builtins.str,
                 permission_urn: _builtins.str,
                 relay_state: _builtins.str,
                 session_duration: _builtins.str):
        """
        :param _builtins.str created_at: The time when a permission set is created.
        :param _builtins.str description: The description of a permission set.
        :param _builtins.str name: Specifies the name of a permission set.
        :param _builtins.str permission_set_id: Specifies the ID of a permission set.
        :param _builtins.str permission_urn: The URN of a permission set.
        :param _builtins.str relay_state: The redirection of users within an application during the federated authentication.
        :param _builtins.str session_duration: The length of time that the application user sessions are valid.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        pulumi.set(__self__, "permission_urn", permission_urn)
        pulumi.set(__self__, "relay_state", relay_state)
        pulumi.set(__self__, "session_duration", session_duration)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when a permission set is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of a permission set.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of a permission set.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> _builtins.str:
        """
        Specifies the ID of a permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @_builtins.property
    @pulumi.getter(name="permissionUrn")
    def permission_urn(self) -> _builtins.str:
        """
        The URN of a permission set.
        """
        return pulumi.get(self, "permission_urn")

    @_builtins.property
    @pulumi.getter(name="relayState")
    def relay_state(self) -> _builtins.str:
        """
        The redirection of users within an application during the federated authentication.
        """
        return pulumi.get(self, "relay_state")

    @_builtins.property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> _builtins.str:
        """
        The length of time that the application user sessions are valid.
        """
        return pulumi.get(self, "session_duration")


@pulumi.output_type
class GetSystemIdentityPolicyAttachmentsPolicyResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: The ID of the IAM system-defined identity policy.
        :param _builtins.str name: The name of the IAM system-defined identity policy.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the IAM system-defined identity policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the IAM system-defined identity policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemPolicyAttachmentsPolicyResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: The ID of the IAM system-defined policy.
        :param _builtins.str name: The name of the IAM system-defined policy.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the IAM system-defined policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the IAM system-defined policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.GetUsersUserAddressResult'],
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 display_name: _builtins.str,
                 email: _builtins.str,
                 email_verified: _builtins.bool,
                 enabled: _builtins.bool,
                 enterprises: Sequence['outputs.GetUsersUserEnterpriseResult'],
                 family_name: _builtins.str,
                 given_name: _builtins.str,
                 id: _builtins.str,
                 phone_number: _builtins.str,
                 title: _builtins.str,
                 updated_at: _builtins.str,
                 updated_by: _builtins.str,
                 user_name: _builtins.str,
                 user_type: _builtins.str):
        """
        :param Sequence['GetUsersUserAddressArgs'] addresses: The addresses information of the user.
               The addresses structure is documented below.
        :param _builtins.str created_at: The creation time of the user.
        :param _builtins.str created_by: The creator of the user.
        :param _builtins.str display_name: Specifies the display name of the user.
        :param _builtins.str email: Specifies the email of the user.
        :param _builtins.bool email_verified: Whether the email is verified.
        :param _builtins.bool enabled: Whether the user is enabled.
        :param Sequence['GetUsersUserEnterpriseArgs'] enterprises: The enterprise information of the user.
               The enterprise structure is documented below.
        :param _builtins.str family_name: Specifies the family name of the user.
        :param _builtins.str given_name: Specifies the given name of the user.
        :param _builtins.str id: Indicates the ID of the user.
        :param _builtins.str phone_number: The phone number of the user.
        :param _builtins.str title: The title of the user.
        :param _builtins.str updated_at: The update time of the user.
        :param _builtins.str updated_by: The updater of the user.
        :param _builtins.str user_name: Specifies the name of the user.
        :param _builtins.str user_type: The type of the user.
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "email_verified", email_verified)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "enterprises", enterprises)
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "phone_number", phone_number)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "user_type", user_type)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetUsersUserAddressResult']:
        """
        The addresses information of the user.
        The addresses structure is documented below.
        """
        return pulumi.get(self, "addresses")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the user.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The creator of the user.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Specifies the display name of the user.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        Specifies the email of the user.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="emailVerified")
    def email_verified(self) -> _builtins.bool:
        """
        Whether the email is verified.
        """
        return pulumi.get(self, "email_verified")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether the user is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def enterprises(self) -> Sequence['outputs.GetUsersUserEnterpriseResult']:
        """
        The enterprise information of the user.
        The enterprise structure is documented below.
        """
        return pulumi.get(self, "enterprises")

    @_builtins.property
    @pulumi.getter(name="familyName")
    def family_name(self) -> _builtins.str:
        """
        Specifies the family name of the user.
        """
        return pulumi.get(self, "family_name")

    @_builtins.property
    @pulumi.getter(name="givenName")
    def given_name(self) -> _builtins.str:
        """
        Specifies the given name of the user.
        """
        return pulumi.get(self, "given_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the user.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> _builtins.str:
        """
        The phone number of the user.
        """
        return pulumi.get(self, "phone_number")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The title of the user.
        """
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the user.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The updater of the user.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Specifies the name of the user.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> _builtins.str:
        """
        The type of the user.
        """
        return pulumi.get(self, "user_type")


@pulumi.output_type
class GetUsersUserAddressResult(dict):
    def __init__(__self__, *,
                 country: _builtins.str,
                 formatted: _builtins.str,
                 locality: _builtins.str,
                 postal_code: _builtins.str,
                 region: _builtins.str,
                 street_address: _builtins.str):
        """
        :param _builtins.str country: The country of the user.
        :param _builtins.str formatted: A string containing a formatted version of the address to be displayed.
        :param _builtins.str locality: The locality of the user.
        :param _builtins.str postal_code: The postal code of the user.
        :param _builtins.str region: Specifies the region in which to query the data source.
               If omitted, the provider-level region will be used.
        :param _builtins.str street_address: The street address of the user.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "formatted", formatted)
        pulumi.set(__self__, "locality", locality)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "street_address", street_address)

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        The country of the user.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def formatted(self) -> _builtins.str:
        """
        A string containing a formatted version of the address to be displayed.
        """
        return pulumi.get(self, "formatted")

    @_builtins.property
    @pulumi.getter
    def locality(self) -> _builtins.str:
        """
        The locality of the user.
        """
        return pulumi.get(self, "locality")

    @_builtins.property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> _builtins.str:
        """
        The postal code of the user.
        """
        return pulumi.get(self, "postal_code")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region in which to query the data source.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> _builtins.str:
        """
        The street address of the user.
        """
        return pulumi.get(self, "street_address")


@pulumi.output_type
class GetUsersUserEnterpriseResult(dict):
    def __init__(__self__, *,
                 cost_center: _builtins.str,
                 department: _builtins.str,
                 division: _builtins.str,
                 employee_number: _builtins.str,
                 manager: _builtins.str,
                 organization: _builtins.str):
        """
        :param _builtins.str cost_center: The cost center of the enterprise.
        :param _builtins.str department: The department of the enterprise.
        :param _builtins.str division: The division of the enterprise.
        :param _builtins.str employee_number: The employee number of the enterprise.
        :param _builtins.str manager: The manager of the enterprise.
        :param _builtins.str organization: The organization of the enterprise.
        """
        pulumi.set(__self__, "cost_center", cost_center)
        pulumi.set(__self__, "department", department)
        pulumi.set(__self__, "division", division)
        pulumi.set(__self__, "employee_number", employee_number)
        pulumi.set(__self__, "manager", manager)
        pulumi.set(__self__, "organization", organization)

    @_builtins.property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> _builtins.str:
        """
        The cost center of the enterprise.
        """
        return pulumi.get(self, "cost_center")

    @_builtins.property
    @pulumi.getter
    def department(self) -> _builtins.str:
        """
        The department of the enterprise.
        """
        return pulumi.get(self, "department")

    @_builtins.property
    @pulumi.getter
    def division(self) -> _builtins.str:
        """
        The division of the enterprise.
        """
        return pulumi.get(self, "division")

    @_builtins.property
    @pulumi.getter(name="employeeNumber")
    def employee_number(self) -> _builtins.str:
        """
        The employee number of the enterprise.
        """
        return pulumi.get(self, "employee_number")

    @_builtins.property
    @pulumi.getter
    def manager(self) -> _builtins.str:
        """
        The manager of the enterprise.
        """
        return pulumi.get(self, "manager")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        """
        The organization of the enterprise.
        """
        return pulumi.get(self, "organization")


