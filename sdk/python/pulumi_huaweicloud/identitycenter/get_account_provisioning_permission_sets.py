# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAccountProvisioningPermissionSetsResult',
    'AwaitableGetAccountProvisioningPermissionSetsResult',
    'get_account_provisioning_permission_sets',
    'get_account_provisioning_permission_sets_output',
]

@pulumi.output_type
class GetAccountProvisioningPermissionSetsResult:
    """
    A collection of values returned by getAccountProvisioningPermissionSets.
    """
    def __init__(__self__, account_id=None, id=None, instance_id=None, permission_sets=None, provisioning_status=None, region=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if permission_sets and not isinstance(permission_sets, list):
            raise TypeError("Expected argument 'permission_sets' to be a list")
        pulumi.set(__self__, "permission_sets", permission_sets)
        if provisioning_status and not isinstance(provisioning_status, str):
            raise TypeError("Expected argument 'provisioning_status' to be a str")
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="permissionSets")
    def permission_sets(self) -> Sequence[_builtins.str]:
        """
        The permission set ID list.
        """
        return pulumi.get(self, "permission_sets")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAccountProvisioningPermissionSetsResult(GetAccountProvisioningPermissionSetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountProvisioningPermissionSetsResult(
            account_id=self.account_id,
            id=self.id,
            instance_id=self.instance_id,
            permission_sets=self.permission_sets,
            provisioning_status=self.provisioning_status,
            region=self.region)


def get_account_provisioning_permission_sets(account_id: Optional[_builtins.str] = None,
                                             instance_id: Optional[_builtins.str] = None,
                                             provisioning_status: Optional[_builtins.str] = None,
                                             region: Optional[_builtins.str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountProvisioningPermissionSetsResult:
    """
    Use this data source to get the Identity Center account provisioning permission sets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    account_id = config.require_object("accountId")
    test = huaweicloud.identitycenter.get_account_provisioning_permission_sets(instance_id=instance_id,
        account_id=account_id)
    ```


    :param _builtins.str account_id: Specifies the ID of a specified account.
    :param _builtins.str instance_id: Specifies the ID of an IAM Identity Center instance.
    :param _builtins.str provisioning_status: Specifies the authorization status of a permission set.
           The valid values are as follows:
           + **LATEST_PERMISSION_SET_PROVISIONED**
           + **LATEST_PERMISSION_SET_NOT_PROVISIONED**
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['instanceId'] = instance_id
    __args__['provisioningStatus'] = provisioning_status
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:identitycenter/getAccountProvisioningPermissionSets:getAccountProvisioningPermissionSets', __args__, opts=opts, typ=GetAccountProvisioningPermissionSetsResult).value

    return AwaitableGetAccountProvisioningPermissionSetsResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        permission_sets=pulumi.get(__ret__, 'permission_sets'),
        provisioning_status=pulumi.get(__ret__, 'provisioning_status'),
        region=pulumi.get(__ret__, 'region'))
def get_account_provisioning_permission_sets_output(account_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                    instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                    provisioning_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAccountProvisioningPermissionSetsResult]:
    """
    Use this data source to get the Identity Center account provisioning permission sets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    account_id = config.require_object("accountId")
    test = huaweicloud.identitycenter.get_account_provisioning_permission_sets(instance_id=instance_id,
        account_id=account_id)
    ```


    :param _builtins.str account_id: Specifies the ID of a specified account.
    :param _builtins.str instance_id: Specifies the ID of an IAM Identity Center instance.
    :param _builtins.str provisioning_status: Specifies the authorization status of a permission set.
           The valid values are as follows:
           + **LATEST_PERMISSION_SET_PROVISIONED**
           + **LATEST_PERMISSION_SET_NOT_PROVISIONED**
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['instanceId'] = instance_id
    __args__['provisioningStatus'] = provisioning_status
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:identitycenter/getAccountProvisioningPermissionSets:getAccountProvisioningPermissionSets', __args__, opts=opts, typ=GetAccountProvisioningPermissionSetsResult)
    return __ret__.apply(lambda __response__: GetAccountProvisioningPermissionSetsResult(
        account_id=pulumi.get(__response__, 'account_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        permission_sets=pulumi.get(__response__, 'permission_sets'),
        provisioning_status=pulumi.get(__response__, 'provisioning_status'),
        region=pulumi.get(__response__, 'region')))
