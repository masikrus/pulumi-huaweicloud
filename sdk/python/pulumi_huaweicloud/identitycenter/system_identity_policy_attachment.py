# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemIdentityPolicyAttachmentArgs', 'SystemIdentityPolicyAttachment']

@pulumi.input_type
class SystemIdentityPolicyAttachmentArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 permission_set_id: pulumi.Input[_builtins.str],
                 policy_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        The set of arguments for constructing a SystemIdentityPolicyAttachment resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the IAM Identity Center instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the IAM Identity Center permission set.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policy_ids: Specifies an array of IAM managed system identity policies to be attached to
               the permission set.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        pulumi.set(__self__, "policy_ids", policy_ids)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the IAM Identity Center instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the IAM Identity Center permission set.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "permission_set_id", value)

    @_builtins.property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies an array of IAM managed system identity policies to be attached to
        the permission set.
        """
        return pulumi.get(self, "policy_ids")

    @policy_ids.setter
    def policy_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "policy_ids", value)


@pulumi.input_type
class _SystemIdentityPolicyAttachmentState:
    def __init__(__self__, *,
                 attached_policies: Optional[pulumi.Input[Sequence[pulumi.Input['SystemIdentityPolicyAttachmentAttachedPolicyArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering SystemIdentityPolicyAttachment resources.
        :param pulumi.Input[Sequence[pulumi.Input['SystemIdentityPolicyAttachmentAttachedPolicyArgs']]] attached_policies: All IAM managed system identity policies attached to the permission set.
               The attached_policies structure is documented below.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the IAM Identity Center instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the IAM Identity Center permission set.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policy_ids: Specifies an array of IAM managed system identity policies to be attached to
               the permission set.
        """
        if attached_policies is not None:
            pulumi.set(__self__, "attached_policies", attached_policies)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if permission_set_id is not None:
            pulumi.set(__self__, "permission_set_id", permission_set_id)
        if policy_ids is not None:
            pulumi.set(__self__, "policy_ids", policy_ids)

    @_builtins.property
    @pulumi.getter(name="attachedPolicies")
    def attached_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemIdentityPolicyAttachmentAttachedPolicyArgs']]]]:
        """
        All IAM managed system identity policies attached to the permission set.
        The attached_policies structure is documented below.
        """
        return pulumi.get(self, "attached_policies")

    @attached_policies.setter
    def attached_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemIdentityPolicyAttachmentAttachedPolicyArgs']]]]):
        pulumi.set(self, "attached_policies", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the IAM Identity Center instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the IAM Identity Center permission set.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_set_id", value)

    @_builtins.property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies an array of IAM managed system identity policies to be attached to
        the permission set.
        """
        return pulumi.get(self, "policy_ids")

    @policy_ids.setter
    def policy_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "policy_ids", value)


@pulumi.type_token("huaweicloud:identitycenter/systemIdentityPolicyAttachment:SystemIdentityPolicyAttachment")
class SystemIdentityPolicyAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages an Identity Center system identity policy attachment resource within HuaweiCloud.

        > **NOTE:** Creating this resource will automatically provision the Permission Set to apply the corresponding updates
          to all assigned accounts.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        permission_set_id = config.require_object("permissionSetId")
        iam_identity_policy_ids = config.require_object("iamIdentityPolicyIds")
        test = huaweicloud.identitycenter.SystemIdentityPolicyAttachment("test",
            instance_id=instance_id,
            permission_set_id=permission_set_id,
            policy_ids=iam_identity_policy_ids)
        ```

        ## Import

        The Identity Center system identity policy attachment can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:identitycenter/systemIdentityPolicyAttachment:SystemIdentityPolicyAttachment test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the IAM Identity Center instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the IAM Identity Center permission set.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policy_ids: Specifies an array of IAM managed system identity policies to be attached to
               the permission set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemIdentityPolicyAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Identity Center system identity policy attachment resource within HuaweiCloud.

        > **NOTE:** Creating this resource will automatically provision the Permission Set to apply the corresponding updates
          to all assigned accounts.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        permission_set_id = config.require_object("permissionSetId")
        iam_identity_policy_ids = config.require_object("iamIdentityPolicyIds")
        test = huaweicloud.identitycenter.SystemIdentityPolicyAttachment("test",
            instance_id=instance_id,
            permission_set_id=permission_set_id,
            policy_ids=iam_identity_policy_ids)
        ```

        ## Import

        The Identity Center system identity policy attachment can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:identitycenter/systemIdentityPolicyAttachment:SystemIdentityPolicyAttachment test <id>
        ```

        :param str resource_name: The name of the resource.
        :param SystemIdentityPolicyAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemIdentityPolicyAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemIdentityPolicyAttachmentArgs.__new__(SystemIdentityPolicyAttachmentArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if permission_set_id is None and not opts.urn:
                raise TypeError("Missing required property 'permission_set_id'")
            __props__.__dict__["permission_set_id"] = permission_set_id
            if policy_ids is None and not opts.urn:
                raise TypeError("Missing required property 'policy_ids'")
            __props__.__dict__["policy_ids"] = policy_ids
            __props__.__dict__["attached_policies"] = None
        super(SystemIdentityPolicyAttachment, __self__).__init__(
            'huaweicloud:identitycenter/systemIdentityPolicyAttachment:SystemIdentityPolicyAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attached_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SystemIdentityPolicyAttachmentAttachedPolicyArgs', 'SystemIdentityPolicyAttachmentAttachedPolicyArgsDict']]]]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
            policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'SystemIdentityPolicyAttachment':
        """
        Get an existing SystemIdentityPolicyAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SystemIdentityPolicyAttachmentAttachedPolicyArgs', 'SystemIdentityPolicyAttachmentAttachedPolicyArgsDict']]]] attached_policies: All IAM managed system identity policies attached to the permission set.
               The attached_policies structure is documented below.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the IAM Identity Center instance.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the IAM Identity Center permission set.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policy_ids: Specifies an array of IAM managed system identity policies to be attached to
               the permission set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemIdentityPolicyAttachmentState.__new__(_SystemIdentityPolicyAttachmentState)

        __props__.__dict__["attached_policies"] = attached_policies
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["permission_set_id"] = permission_set_id
        __props__.__dict__["policy_ids"] = policy_ids
        return SystemIdentityPolicyAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="attachedPolicies")
    def attached_policies(self) -> pulumi.Output[Sequence['outputs.SystemIdentityPolicyAttachmentAttachedPolicy']]:
        """
        All IAM managed system identity policies attached to the permission set.
        The attached_policies structure is documented below.
        """
        return pulumi.get(self, "attached_policies")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the IAM Identity Center instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the IAM Identity Center permission set.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @_builtins.property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies an array of IAM managed system identity policies to be attached to
        the permission set.
        """
        return pulumi.get(self, "policy_ids")

