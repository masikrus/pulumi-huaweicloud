# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetHostAccessesResult',
    'AwaitableGetHostAccessesResult',
    'get_host_accesses',
    'get_host_accesses_output',
]

@pulumi.output_type
class GetHostAccessesResult:
    """
    A collection of values returned by getHostAccesses.
    """
    def __init__(__self__, access_config_name_lists=None, accesses=None, host_group_name_lists=None, id=None, log_group_name_lists=None, log_stream_name_lists=None, region=None, tags=None):
        if access_config_name_lists and not isinstance(access_config_name_lists, list):
            raise TypeError("Expected argument 'access_config_name_lists' to be a list")
        pulumi.set(__self__, "access_config_name_lists", access_config_name_lists)
        if accesses and not isinstance(accesses, list):
            raise TypeError("Expected argument 'accesses' to be a list")
        pulumi.set(__self__, "accesses", accesses)
        if host_group_name_lists and not isinstance(host_group_name_lists, list):
            raise TypeError("Expected argument 'host_group_name_lists' to be a list")
        pulumi.set(__self__, "host_group_name_lists", host_group_name_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_group_name_lists and not isinstance(log_group_name_lists, list):
            raise TypeError("Expected argument 'log_group_name_lists' to be a list")
        pulumi.set(__self__, "log_group_name_lists", log_group_name_lists)
        if log_stream_name_lists and not isinstance(log_stream_name_lists, list):
            raise TypeError("Expected argument 'log_stream_name_lists' to be a list")
        pulumi.set(__self__, "log_stream_name_lists", log_stream_name_lists)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accessConfigNameLists")
    def access_config_name_lists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "access_config_name_lists")

    @_builtins.property
    @pulumi.getter
    def accesses(self) -> Sequence['outputs.GetHostAccessesAccessResult']:
        """
        All host accesses that match the filter parameters.
        """
        return pulumi.get(self, "accesses")

    @_builtins.property
    @pulumi.getter(name="hostGroupNameLists")
    def host_group_name_lists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "host_group_name_lists")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logGroupNameLists")
    def log_group_name_lists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "log_group_name_lists")

    @_builtins.property
    @pulumi.getter(name="logStreamNameLists")
    def log_stream_name_lists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "log_stream_name_lists")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The key/value pairs to associate with the host access.
        """
        return pulumi.get(self, "tags")


class AwaitableGetHostAccessesResult(GetHostAccessesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostAccessesResult(
            access_config_name_lists=self.access_config_name_lists,
            accesses=self.accesses,
            host_group_name_lists=self.host_group_name_lists,
            id=self.id,
            log_group_name_lists=self.log_group_name_lists,
            log_stream_name_lists=self.log_stream_name_lists,
            region=self.region,
            tags=self.tags)


def get_host_accesses(access_config_name_lists: Optional[Sequence[_builtins.str]] = None,
                      host_group_name_lists: Optional[Sequence[_builtins.str]] = None,
                      log_group_name_lists: Optional[Sequence[_builtins.str]] = None,
                      log_stream_name_lists: Optional[Sequence[_builtins.str]] = None,
                      region: Optional[_builtins.str] = None,
                      tags: Optional[Mapping[str, _builtins.str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostAccessesResult:
    """
    Use this data source to get the list of the host accesses with HuaweiCloud.

    ## Example Usage

    ### Query all host accesses

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Lts.get_host_accesses()
    ```

    ### Query the host accesses by the specified host access names

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    host_access_names = config.require_object("hostAccessNames")
    test = huaweicloud.Lts.get_host_accesses(access_config_name_lists=host_access_names)
    ```


    :param Sequence[_builtins.str] access_config_name_lists: Specifies the list of the host access names.
    :param Sequence[_builtins.str] host_group_name_lists: Specifies the list host of the group names associated with the host access.
    :param Sequence[_builtins.str] log_group_name_lists: Specifies the list of log group names.
    :param Sequence[_builtins.str] log_stream_name_lists: Specifies the list of log stream names.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the host access.
    """
    __args__ = dict()
    __args__['accessConfigNameLists'] = access_config_name_lists
    __args__['hostGroupNameLists'] = host_group_name_lists
    __args__['logGroupNameLists'] = log_group_name_lists
    __args__['logStreamNameLists'] = log_stream_name_lists
    __args__['region'] = region
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Lts/getHostAccesses:getHostAccesses', __args__, opts=opts, typ=GetHostAccessesResult).value

    return AwaitableGetHostAccessesResult(
        access_config_name_lists=pulumi.get(__ret__, 'access_config_name_lists'),
        accesses=pulumi.get(__ret__, 'accesses'),
        host_group_name_lists=pulumi.get(__ret__, 'host_group_name_lists'),
        id=pulumi.get(__ret__, 'id'),
        log_group_name_lists=pulumi.get(__ret__, 'log_group_name_lists'),
        log_stream_name_lists=pulumi.get(__ret__, 'log_stream_name_lists'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'))
def get_host_accesses_output(access_config_name_lists: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                             host_group_name_lists: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                             log_group_name_lists: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                             log_stream_name_lists: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHostAccessesResult]:
    """
    Use this data source to get the list of the host accesses with HuaweiCloud.

    ## Example Usage

    ### Query all host accesses

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Lts.get_host_accesses()
    ```

    ### Query the host accesses by the specified host access names

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    host_access_names = config.require_object("hostAccessNames")
    test = huaweicloud.Lts.get_host_accesses(access_config_name_lists=host_access_names)
    ```


    :param Sequence[_builtins.str] access_config_name_lists: Specifies the list of the host access names.
    :param Sequence[_builtins.str] host_group_name_lists: Specifies the list host of the group names associated with the host access.
    :param Sequence[_builtins.str] log_group_name_lists: Specifies the list of log group names.
    :param Sequence[_builtins.str] log_stream_name_lists: Specifies the list of log stream names.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the host access.
    """
    __args__ = dict()
    __args__['accessConfigNameLists'] = access_config_name_lists
    __args__['hostGroupNameLists'] = host_group_name_lists
    __args__['logGroupNameLists'] = log_group_name_lists
    __args__['logStreamNameLists'] = log_stream_name_lists
    __args__['region'] = region
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Lts/getHostAccesses:getHostAccesses', __args__, opts=opts, typ=GetHostAccessesResult)
    return __ret__.apply(lambda __response__: GetHostAccessesResult(
        access_config_name_lists=pulumi.get(__response__, 'access_config_name_lists'),
        accesses=pulumi.get(__response__, 'accesses'),
        host_group_name_lists=pulumi.get(__response__, 'host_group_name_lists'),
        id=pulumi.get(__response__, 'id'),
        log_group_name_lists=pulumi.get(__response__, 'log_group_name_lists'),
        log_stream_name_lists=pulumi.get(__response__, 'log_stream_name_lists'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags')))
