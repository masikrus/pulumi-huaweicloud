# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAomAccessesResult',
    'AwaitableGetAomAccessesResult',
    'get_aom_accesses',
    'get_aom_accesses_output',
]

@pulumi.output_type
class GetAomAccessesResult:
    """
    A collection of values returned by getAomAccesses.
    """
    def __init__(__self__, accesses=None, id=None, log_group_name=None, log_stream_name=None, region=None):
        if accesses and not isinstance(accesses, list):
            raise TypeError("Expected argument 'accesses' to be a list")
        pulumi.set(__self__, "accesses", accesses)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_group_name and not isinstance(log_group_name, str):
            raise TypeError("Expected argument 'log_group_name' to be a str")
        pulumi.set(__self__, "log_group_name", log_group_name)
        if log_stream_name and not isinstance(log_stream_name, str):
            raise TypeError("Expected argument 'log_stream_name' to be a str")
        pulumi.set(__self__, "log_stream_name", log_stream_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def accesses(self) -> Sequence['outputs.GetAomAccessesAccessResult']:
        """
        All AOM access rules that match the filter parameters.
        The accesses structure is documented below.
        """
        return pulumi.get(self, "accesses")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the log group.
        """
        return pulumi.get(self, "log_group_name")

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[_builtins.str]:
        """
        The name of the stream.
        """
        return pulumi.get(self, "log_stream_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetAomAccessesResult(GetAomAccessesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAomAccessesResult(
            accesses=self.accesses,
            id=self.id,
            log_group_name=self.log_group_name,
            log_stream_name=self.log_stream_name,
            region=self.region)


def get_aom_accesses(log_group_name: Optional[_builtins.str] = None,
                     log_stream_name: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAomAccessesResult:
    """
    Use this data source to get the list of AOM accesses.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Lts.get_aom_accesses()
    ```


    :param _builtins.str log_group_name: Specifies the ID of the log group name to be queried.
    :param _builtins.str log_stream_name: Specifies the log stream name to be queried.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['logGroupName'] = log_group_name
    __args__['logStreamName'] = log_stream_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Lts/getAomAccesses:getAomAccesses', __args__, opts=opts, typ=GetAomAccessesResult).value

    return AwaitableGetAomAccessesResult(
        accesses=pulumi.get(__ret__, 'accesses'),
        id=pulumi.get(__ret__, 'id'),
        log_group_name=pulumi.get(__ret__, 'log_group_name'),
        log_stream_name=pulumi.get(__ret__, 'log_stream_name'),
        region=pulumi.get(__ret__, 'region'))
def get_aom_accesses_output(log_group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            log_stream_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAomAccessesResult]:
    """
    Use this data source to get the list of AOM accesses.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Lts.get_aom_accesses()
    ```


    :param _builtins.str log_group_name: Specifies the ID of the log group name to be queried.
    :param _builtins.str log_stream_name: Specifies the log stream name to be queried.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['logGroupName'] = log_group_name
    __args__['logStreamName'] = log_stream_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Lts/getAomAccesses:getAomAccesses', __args__, opts=opts, typ=GetAomAccessesResult)
    return __ret__.apply(lambda __response__: GetAomAccessesResult(
        accesses=pulumi.get(__response__, 'accesses'),
        id=pulumi.get(__response__, 'id'),
        log_group_name=pulumi.get(__response__, 'log_group_name'),
        log_stream_name=pulumi.get(__response__, 'log_stream_name'),
        region=pulumi.get(__response__, 'region')))
