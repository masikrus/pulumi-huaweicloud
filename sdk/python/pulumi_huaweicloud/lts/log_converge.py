# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogConvergeArgs', 'LogConverge']

@pulumi.input_type
class LogConvergeArgs:
    def __init__(__self__, *,
                 log_mapping_configs: pulumi.Input[Sequence[pulumi.Input['LogConvergeLogMappingConfigArgs']]],
                 management_account_id: pulumi.Input[_builtins.str],
                 member_account_id: pulumi.Input[_builtins.str],
                 organization_id: pulumi.Input[_builtins.str],
                 management_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogConverge resource.
        :param pulumi.Input[Sequence[pulumi.Input['LogConvergeLogMappingConfigArgs']]] log_mapping_configs: Specifies the log converge configurations.  
               The log_mapping_config structure is documented below.
        :param pulumi.Input[_builtins.str] management_account_id: Specifies the administrator account ID used to manage log converge.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] member_account_id: Specifies the member account ID to which the converged logs belong.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization_id: Specifies the organization ID to which the converged logs belong.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] management_project_id: Specifies the administrator project ID that required for
               first-time use.
               
               <a name="converge_log_mapping_config"></a>
               The `log_mapping_config` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "log_mapping_configs", log_mapping_configs)
        pulumi.set(__self__, "management_account_id", management_account_id)
        pulumi.set(__self__, "member_account_id", member_account_id)
        pulumi.set(__self__, "organization_id", organization_id)
        if management_project_id is not None:
            pulumi.set(__self__, "management_project_id", management_project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="logMappingConfigs")
    def log_mapping_configs(self) -> pulumi.Input[Sequence[pulumi.Input['LogConvergeLogMappingConfigArgs']]]:
        """
        Specifies the log converge configurations.  
        The log_mapping_config structure is documented below.
        """
        return pulumi.get(self, "log_mapping_configs")

    @log_mapping_configs.setter
    def log_mapping_configs(self, value: pulumi.Input[Sequence[pulumi.Input['LogConvergeLogMappingConfigArgs']]]):
        pulumi.set(self, "log_mapping_configs", value)

    @_builtins.property
    @pulumi.getter(name="managementAccountId")
    def management_account_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the administrator account ID used to manage log converge.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "management_account_id")

    @management_account_id.setter
    def management_account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "management_account_id", value)

    @_builtins.property
    @pulumi.getter(name="memberAccountId")
    def member_account_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the member account ID to which the converged logs belong.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "member_account_id")

    @member_account_id.setter
    def member_account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "member_account_id", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the organization ID to which the converged logs belong.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter(name="managementProjectId")
    def management_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the administrator project ID that required for
        first-time use.

        <a name="converge_log_mapping_config"></a>
        The `log_mapping_config` block supports:
        """
        return pulumi.get(self, "management_project_id")

    @management_project_id.setter
    def management_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "management_project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogConvergeState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 log_mapping_configs: Optional[pulumi.Input[Sequence[pulumi.Input['LogConvergeLogMappingConfigArgs']]]] = None,
                 management_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 management_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 member_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogConverge resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the log converge configuration.
        :param pulumi.Input[Sequence[pulumi.Input['LogConvergeLogMappingConfigArgs']]] log_mapping_configs: Specifies the log converge configurations.  
               The log_mapping_config structure is documented below.
        :param pulumi.Input[_builtins.str] management_account_id: Specifies the administrator account ID used to manage log converge.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] management_project_id: Specifies the administrator project ID that required for
               first-time use.
               
               <a name="converge_log_mapping_config"></a>
               The `log_mapping_config` block supports:
        :param pulumi.Input[_builtins.str] member_account_id: Specifies the member account ID to which the converged logs belong.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization_id: Specifies the organization ID to which the converged logs belong.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the log converge configuration.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if log_mapping_configs is not None:
            pulumi.set(__self__, "log_mapping_configs", log_mapping_configs)
        if management_account_id is not None:
            pulumi.set(__self__, "management_account_id", management_account_id)
        if management_project_id is not None:
            pulumi.set(__self__, "management_project_id", management_project_id)
        if member_account_id is not None:
            pulumi.set(__self__, "member_account_id", member_account_id)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the log converge configuration.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="logMappingConfigs")
    def log_mapping_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogConvergeLogMappingConfigArgs']]]]:
        """
        Specifies the log converge configurations.  
        The log_mapping_config structure is documented below.
        """
        return pulumi.get(self, "log_mapping_configs")

    @log_mapping_configs.setter
    def log_mapping_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogConvergeLogMappingConfigArgs']]]]):
        pulumi.set(self, "log_mapping_configs", value)

    @_builtins.property
    @pulumi.getter(name="managementAccountId")
    def management_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the administrator account ID used to manage log converge.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "management_account_id")

    @management_account_id.setter
    def management_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "management_account_id", value)

    @_builtins.property
    @pulumi.getter(name="managementProjectId")
    def management_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the administrator project ID that required for
        first-time use.

        <a name="converge_log_mapping_config"></a>
        The `log_mapping_config` block supports:
        """
        return pulumi.get(self, "management_project_id")

    @management_project_id.setter
    def management_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "management_project_id", value)

    @_builtins.property
    @pulumi.getter(name="memberAccountId")
    def member_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the member account ID to which the converged logs belong.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "member_account_id")

    @member_account_id.setter
    def member_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "member_account_id", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the organization ID to which the converged logs belong.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the log converge configuration.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Lts/logConverge:LogConverge")
class LogConverge(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 log_mapping_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogConvergeLogMappingConfigArgs', 'LogConvergeLogMappingConfigArgsDict']]]]] = None,
                 management_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 management_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 member_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to converge logs cross accounts to centrally store and analyze logs within HuaweiCloud.

        > 1. Deleting the log groups or streams of the source account does not affect their target equivalents.
        >       <br>2. Deleting this resource will not delete the target log group and log stream synchronously, so you need to clean
        >       them up manually.
        >       <br>3. Aggregation cannot be configured for source log groups without log streams.

        ## Example Usage

        ### Use existing log group and log stream as target log group and target log stream

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_id = config.require_object("organizationId")
        administrator_account_id = config.require_object("administratorAccountId")
        administrator_project_id = config.require_object("administratorProjectId")
        member_account_id = config.require_object("memberAccountId")
        source_log_group_id = config.require_object("sourceLogGroupId")
        target_log_group_name = config.require_object("targetLogGroupName")
        target_log_group_id = config.require_object("targetLogGroupId")
        source_log_stream_id = config.require_object("sourceLogStreamId")
        target_log_stream_name = config.require_object("targetLogStreamName")
        target_log_stream_id = config.require_object("targetLogStreamId")
        target_log_stream_ttl = config.require_object("targetLogStreamTtl")
        test = huaweicloud.lts.LogConverge("test",
            organization_id=organization_id,
            management_account_id=administrator_account_id,
            management_project_id=administrator_project_id,
            member_account_id=member_account_id,
            log_mapping_configs=[{
                "source_log_group_id": source_log_group_id,
                "target_log_group_name": target_log_group_name,
                "target_log_group_id": target_log_group_id,
                "log_stream_configs": [{
                    "source_log_stream_id": source_log_stream_id,
                    "target_log_stream_name": target_log_stream_name,
                    "target_log_stream_id": target_log_stream_id,
                    "target_log_stream_ttl": target_log_stream_ttl,
                }],
            }])
        ```

        ### Use the log group and log stream automatically created by the service as the target log group and target log stream

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_id = config.require_object("organizationId")
        administrator_account_id = config.require_object("administratorAccountId")
        administrator_project_id = config.require_object("administratorProjectId")
        member_account_id = config.require_object("memberAccountId")
        source_log_group_id = config.require_object("sourceLogGroupId")
        target_log_group_name = config.require_object("targetLogGroupName")
        source_log_stream_id = config.require_object("sourceLogStreamId")
        target_log_stream_name = config.require_object("targetLogStreamName")
        target_log_stream_ttl = config.require_object("targetLogStreamTtl")
        test = huaweicloud.lts.LogConverge("test",
            organization_id=organization_id,
            management_account_id=administrator_account_id,
            management_project_id=administrator_project_id,
            member_account_id=member_account_id,
            log_mapping_configs=[{
                "source_log_group_id": source_log_group_id,
                "target_log_group_name": target_log_group_name,
                "log_stream_configs": [{
                    "source_log_stream_id": source_log_stream_id,
                    "target_log_stream_name": target_log_stream_name,
                    "target_log_stream_ttl": target_log_stream_ttl,
                }],
            }])
        ```

        ## Import

        The log converge can be imported using the `organization_id` and `member_account_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/logConverge:LogConverge test <organization_id>/<member_account_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogConvergeLogMappingConfigArgs', 'LogConvergeLogMappingConfigArgsDict']]]] log_mapping_configs: Specifies the log converge configurations.  
               The log_mapping_config structure is documented below.
        :param pulumi.Input[_builtins.str] management_account_id: Specifies the administrator account ID used to manage log converge.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] management_project_id: Specifies the administrator project ID that required for
               first-time use.
               
               <a name="converge_log_mapping_config"></a>
               The `log_mapping_config` block supports:
        :param pulumi.Input[_builtins.str] member_account_id: Specifies the member account ID to which the converged logs belong.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization_id: Specifies the organization ID to which the converged logs belong.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogConvergeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to converge logs cross accounts to centrally store and analyze logs within HuaweiCloud.

        > 1. Deleting the log groups or streams of the source account does not affect their target equivalents.
        >       <br>2. Deleting this resource will not delete the target log group and log stream synchronously, so you need to clean
        >       them up manually.
        >       <br>3. Aggregation cannot be configured for source log groups without log streams.

        ## Example Usage

        ### Use existing log group and log stream as target log group and target log stream

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_id = config.require_object("organizationId")
        administrator_account_id = config.require_object("administratorAccountId")
        administrator_project_id = config.require_object("administratorProjectId")
        member_account_id = config.require_object("memberAccountId")
        source_log_group_id = config.require_object("sourceLogGroupId")
        target_log_group_name = config.require_object("targetLogGroupName")
        target_log_group_id = config.require_object("targetLogGroupId")
        source_log_stream_id = config.require_object("sourceLogStreamId")
        target_log_stream_name = config.require_object("targetLogStreamName")
        target_log_stream_id = config.require_object("targetLogStreamId")
        target_log_stream_ttl = config.require_object("targetLogStreamTtl")
        test = huaweicloud.lts.LogConverge("test",
            organization_id=organization_id,
            management_account_id=administrator_account_id,
            management_project_id=administrator_project_id,
            member_account_id=member_account_id,
            log_mapping_configs=[{
                "source_log_group_id": source_log_group_id,
                "target_log_group_name": target_log_group_name,
                "target_log_group_id": target_log_group_id,
                "log_stream_configs": [{
                    "source_log_stream_id": source_log_stream_id,
                    "target_log_stream_name": target_log_stream_name,
                    "target_log_stream_id": target_log_stream_id,
                    "target_log_stream_ttl": target_log_stream_ttl,
                }],
            }])
        ```

        ### Use the log group and log stream automatically created by the service as the target log group and target log stream

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_id = config.require_object("organizationId")
        administrator_account_id = config.require_object("administratorAccountId")
        administrator_project_id = config.require_object("administratorProjectId")
        member_account_id = config.require_object("memberAccountId")
        source_log_group_id = config.require_object("sourceLogGroupId")
        target_log_group_name = config.require_object("targetLogGroupName")
        source_log_stream_id = config.require_object("sourceLogStreamId")
        target_log_stream_name = config.require_object("targetLogStreamName")
        target_log_stream_ttl = config.require_object("targetLogStreamTtl")
        test = huaweicloud.lts.LogConverge("test",
            organization_id=organization_id,
            management_account_id=administrator_account_id,
            management_project_id=administrator_project_id,
            member_account_id=member_account_id,
            log_mapping_configs=[{
                "source_log_group_id": source_log_group_id,
                "target_log_group_name": target_log_group_name,
                "log_stream_configs": [{
                    "source_log_stream_id": source_log_stream_id,
                    "target_log_stream_name": target_log_stream_name,
                    "target_log_stream_ttl": target_log_stream_ttl,
                }],
            }])
        ```

        ## Import

        The log converge can be imported using the `organization_id` and `member_account_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/logConverge:LogConverge test <organization_id>/<member_account_id>
        ```

        :param str resource_name: The name of the resource.
        :param LogConvergeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogConvergeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 log_mapping_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogConvergeLogMappingConfigArgs', 'LogConvergeLogMappingConfigArgsDict']]]]] = None,
                 management_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 management_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 member_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogConvergeArgs.__new__(LogConvergeArgs)

            if log_mapping_configs is None and not opts.urn:
                raise TypeError("Missing required property 'log_mapping_configs'")
            __props__.__dict__["log_mapping_configs"] = log_mapping_configs
            if management_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'management_account_id'")
            __props__.__dict__["management_account_id"] = management_account_id
            __props__.__dict__["management_project_id"] = management_project_id
            if member_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'member_account_id'")
            __props__.__dict__["member_account_id"] = member_account_id
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(LogConverge, __self__).__init__(
            'huaweicloud:Lts/logConverge:LogConverge',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            log_mapping_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogConvergeLogMappingConfigArgs', 'LogConvergeLogMappingConfigArgsDict']]]]] = None,
            management_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            management_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            member_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            organization_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogConverge':
        """
        Get an existing LogConverge resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the log converge configuration.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogConvergeLogMappingConfigArgs', 'LogConvergeLogMappingConfigArgsDict']]]] log_mapping_configs: Specifies the log converge configurations.  
               The log_mapping_config structure is documented below.
        :param pulumi.Input[_builtins.str] management_account_id: Specifies the administrator account ID used to manage log converge.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] management_project_id: Specifies the administrator project ID that required for
               first-time use.
               
               <a name="converge_log_mapping_config"></a>
               The `log_mapping_config` block supports:
        :param pulumi.Input[_builtins.str] member_account_id: Specifies the member account ID to which the converged logs belong.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization_id: Specifies the organization ID to which the converged logs belong.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the log converge configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogConvergeState.__new__(_LogConvergeState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["log_mapping_configs"] = log_mapping_configs
        __props__.__dict__["management_account_id"] = management_account_id
        __props__.__dict__["management_project_id"] = management_project_id
        __props__.__dict__["member_account_id"] = member_account_id
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["region"] = region
        __props__.__dict__["updated_at"] = updated_at
        return LogConverge(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the log converge configuration.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="logMappingConfigs")
    def log_mapping_configs(self) -> pulumi.Output[Sequence['outputs.LogConvergeLogMappingConfig']]:
        """
        Specifies the log converge configurations.  
        The log_mapping_config structure is documented below.
        """
        return pulumi.get(self, "log_mapping_configs")

    @_builtins.property
    @pulumi.getter(name="managementAccountId")
    def management_account_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the administrator account ID used to manage log converge.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "management_account_id")

    @_builtins.property
    @pulumi.getter(name="managementProjectId")
    def management_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the administrator project ID that required for
        first-time use.

        <a name="converge_log_mapping_config"></a>
        The `log_mapping_config` block supports:
        """
        return pulumi.get(self, "management_project_id")

    @_builtins.property
    @pulumi.getter(name="memberAccountId")
    def member_account_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the member account ID to which the converged logs belong.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "member_account_id")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the organization ID to which the converged logs belong.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the log converge configuration.
        """
        return pulumi.get(self, "updated_at")

