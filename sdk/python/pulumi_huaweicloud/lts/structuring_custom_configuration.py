# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StructuringCustomConfigurationArgs', 'StructuringCustomConfiguration']

@pulumi.input_type
class StructuringCustomConfigurationArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[_builtins.str],
                 demo_fields: pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationDemoFieldArgs']]],
                 log_group_id: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 layers: Optional[pulumi.Input[_builtins.int]] = None,
                 log_format: Optional[pulumi.Input[_builtins.str]] = None,
                 regex_rules: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationTagFieldArgs']]]] = None,
                 tokenizer: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a StructuringCustomConfiguration resource.
        :param pulumi.Input[_builtins.str] content: Specifies the field content.
        :param pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationDemoFieldArgs']]] demo_fields: Specifies the list of example fields. The maximum length is `200`. The field sequence
               in `demo_fields` must be the same as that in `content`. The listed fields will be used as log extraction fields.
               The demo_fields structure is documented below.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] layers: Specifies the maximum parsing layers. The maximum value is `3`.
               When this field is specified, the log body will be parsed in JSON format and split into key-value pairs.
        :param pulumi.Input[_builtins.str] log_format: Specifies the nginx configuration.
               When this field is specified, key-value pairs are extracted from Nginx log events.
               
               > The fields `regex_rules`, `layers`, `tokenizer` and `log_format` are mutually exclusive, and one of these fields
               must be specified. Refer to [document](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_0823.html) for more
               information.
        :param pulumi.Input[_builtins.str] regex_rules: Specifies the regular expression. The maximum length is `5000` characters.
               When this field is specified, regular analysis will be used to parse the logs.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationTagFieldArgs']]] tag_fields: Specifies the tag field array. This field is only needed when tag fields are used for
               parsing.
               The tag_fields structure is documented below.
               
               <a name="StructCustomConfig_demo_fields"></a>
               The `demo_fields` block supports:
        :param pulumi.Input[_builtins.str] tokenizer: Specifies the delimiter, such as spaces and colons.
               When this field is specified, the log body will be parsed by specifying separators.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "demo_fields", demo_fields)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        if layers is not None:
            pulumi.set(__self__, "layers", layers)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if regex_rules is not None:
            pulumi.set(__self__, "regex_rules", regex_rules)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tag_fields is not None:
            pulumi.set(__self__, "tag_fields", tag_fields)
        if tokenizer is not None:
            pulumi.set(__self__, "tokenizer", tokenizer)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the field content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationDemoFieldArgs']]]:
        """
        Specifies the list of example fields. The maximum length is `200`. The field sequence
        in `demo_fields` must be the same as that in `content`. The listed fields will be used as log extraction fields.
        The demo_fields structure is documented below.
        """
        return pulumi.get(self, "demo_fields")

    @demo_fields.setter
    def demo_fields(self, value: pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationDemoFieldArgs']]]):
        pulumi.set(self, "demo_fields", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log stream ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter
    def layers(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum parsing layers. The maximum value is `3`.
        When this field is specified, the log body will be parsed in JSON format and split into key-value pairs.
        """
        return pulumi.get(self, "layers")

    @layers.setter
    def layers(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "layers", value)

    @_builtins.property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the nginx configuration.
        When this field is specified, key-value pairs are extracted from Nginx log events.

        > The fields `regex_rules`, `layers`, `tokenizer` and `log_format` are mutually exclusive, and one of these fields
        must be specified. Refer to [document](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_0823.html) for more
        information.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_format", value)

    @_builtins.property
    @pulumi.getter(name="regexRules")
    def regex_rules(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression. The maximum length is `5000` characters.
        When this field is specified, regular analysis will be used to parse the logs.
        """
        return pulumi.get(self, "regex_rules")

    @regex_rules.setter
    def regex_rules(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "regex_rules", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationTagFieldArgs']]]]:
        """
        Specifies the tag field array. This field is only needed when tag fields are used for
        parsing.
        The tag_fields structure is documented below.

        <a name="StructCustomConfig_demo_fields"></a>
        The `demo_fields` block supports:
        """
        return pulumi.get(self, "tag_fields")

    @tag_fields.setter
    def tag_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationTagFieldArgs']]]]):
        pulumi.set(self, "tag_fields", value)

    @_builtins.property
    @pulumi.getter
    def tokenizer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the delimiter, such as spaces and colons.
        When this field is specified, the log body will be parsed by specifying separators.
        """
        return pulumi.get(self, "tokenizer")

    @tokenizer.setter
    def tokenizer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tokenizer", value)


@pulumi.input_type
class _StructuringCustomConfigurationState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationDemoFieldArgs']]]] = None,
                 layers: Optional[pulumi.Input[_builtins.int]] = None,
                 log_format: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 regex_rules: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationTagFieldArgs']]]] = None,
                 tokenizer: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering StructuringCustomConfiguration resources.
        :param pulumi.Input[_builtins.str] content: Specifies the field content.
        :param pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationDemoFieldArgs']]] demo_fields: Specifies the list of example fields. The maximum length is `200`. The field sequence
               in `demo_fields` must be the same as that in `content`. The listed fields will be used as log extraction fields.
               The demo_fields structure is documented below.
        :param pulumi.Input[_builtins.int] layers: Specifies the maximum parsing layers. The maximum value is `3`.
               When this field is specified, the log body will be parsed in JSON format and split into key-value pairs.
        :param pulumi.Input[_builtins.str] log_format: Specifies the nginx configuration.
               When this field is specified, key-value pairs are extracted from Nginx log events.
               
               > The fields `regex_rules`, `layers`, `tokenizer` and `log_format` are mutually exclusive, and one of these fields
               must be specified. Refer to [document](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_0823.html) for more
               information.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] regex_rules: Specifies the regular expression. The maximum length is `5000` characters.
               When this field is specified, regular analysis will be used to parse the logs.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationTagFieldArgs']]] tag_fields: Specifies the tag field array. This field is only needed when tag fields are used for
               parsing.
               The tag_fields structure is documented below.
               
               <a name="StructCustomConfig_demo_fields"></a>
               The `demo_fields` block supports:
        :param pulumi.Input[_builtins.str] tokenizer: Specifies the delimiter, such as spaces and colons.
               When this field is specified, the log body will be parsed by specifying separators.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if demo_fields is not None:
            pulumi.set(__self__, "demo_fields", demo_fields)
        if layers is not None:
            pulumi.set(__self__, "layers", layers)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if regex_rules is not None:
            pulumi.set(__self__, "regex_rules", regex_rules)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tag_fields is not None:
            pulumi.set(__self__, "tag_fields", tag_fields)
        if tokenizer is not None:
            pulumi.set(__self__, "tokenizer", tokenizer)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the field content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationDemoFieldArgs']]]]:
        """
        Specifies the list of example fields. The maximum length is `200`. The field sequence
        in `demo_fields` must be the same as that in `content`. The listed fields will be used as log extraction fields.
        The demo_fields structure is documented below.
        """
        return pulumi.get(self, "demo_fields")

    @demo_fields.setter
    def demo_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationDemoFieldArgs']]]]):
        pulumi.set(self, "demo_fields", value)

    @_builtins.property
    @pulumi.getter
    def layers(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum parsing layers. The maximum value is `3`.
        When this field is specified, the log body will be parsed in JSON format and split into key-value pairs.
        """
        return pulumi.get(self, "layers")

    @layers.setter
    def layers(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "layers", value)

    @_builtins.property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the nginx configuration.
        When this field is specified, key-value pairs are extracted from Nginx log events.

        > The fields `regex_rules`, `layers`, `tokenizer` and `log_format` are mutually exclusive, and one of these fields
        must be specified. Refer to [document](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_0823.html) for more
        information.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_format", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log stream ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="regexRules")
    def regex_rules(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression. The maximum length is `5000` characters.
        When this field is specified, regular analysis will be used to parse the logs.
        """
        return pulumi.get(self, "regex_rules")

    @regex_rules.setter
    def regex_rules(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "regex_rules", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationTagFieldArgs']]]]:
        """
        Specifies the tag field array. This field is only needed when tag fields are used for
        parsing.
        The tag_fields structure is documented below.

        <a name="StructCustomConfig_demo_fields"></a>
        The `demo_fields` block supports:
        """
        return pulumi.get(self, "tag_fields")

    @tag_fields.setter
    def tag_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringCustomConfigurationTagFieldArgs']]]]):
        pulumi.set(self, "tag_fields", value)

    @_builtins.property
    @pulumi.getter
    def tokenizer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the delimiter, such as spaces and colons.
        When this field is specified, the log body will be parsed by specifying separators.
        """
        return pulumi.get(self, "tokenizer")

    @tokenizer.setter
    def tokenizer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tokenizer", value)


@pulumi.type_token("huaweicloud:Lts/structuringCustomConfiguration:StructuringCustomConfiguration")
class StructuringCustomConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringCustomConfigurationDemoFieldArgs', 'StructuringCustomConfigurationDemoFieldArgsDict']]]]] = None,
                 layers: Optional[pulumi.Input[_builtins.int]] = None,
                 log_format: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 regex_rules: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringCustomConfigurationTagFieldArgs', 'StructuringCustomConfigurationTagFieldArgsDict']]]]] = None,
                 tokenizer: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an LTS structuring custom configuration resource within HuaweiCloud.

        ## Example Usage

        ### Creating with json structuring method

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.StructuringCustomConfiguration("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            content="{'code':38,'user':{'name':'testdemo'}}",
            layers=3,
            demo_fields=[
                {
                    "is_analysis": True,
                    "field_name": "code",
                    "content": "38",
                    "type": "long",
                },
                {
                    "is_analysis": True,
                    "field_name": "user.name",
                    "content": "testdemo",
                    "type": "string",
                },
            ],
            tag_fields=[{
                "is_analysis": True,
                "field_name": "hostIP",
                "content": "192.168.2.134",
                "type": "string",
            }])
        ```

        ### Creating with split structuring method

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.StructuringCustomConfiguration("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            content="2023-09-09/18:50:51 Error",
            tokenizer=" ",
            demo_fields=[
                {
                    "is_analysis": True,
                    "field_name": "b1",
                    "content": "2023-09-09/18:50:51",
                    "type": "string",
                },
                {
                    "is_analysis": True,
                    "field_name": "b2",
                    "content": "Error",
                    "type": "string",
                },
            ])
        ```

        ### Creating with nginx structuring method

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.StructuringCustomConfiguration("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            content="39.149.31.187 - - [12/Mar/2020:12:24:02 +0800] \\"GET / HTTP/1.1\\" 304 ",
            log_format=\"\"\"log_format  main   '$remote_addr - $remote_user [$time_local] "$request" '
        '$status ';\"\"\",
            demo_fields=[
                {
                    "is_analysis": True,
                    "field_name": "remote_addr",
                    "content": "39.149.31.187",
                    "type": "string",
                },
                {
                    "is_analysis": True,
                    "field_name": "remote_user",
                    "content": "-",
                    "type": "string",
                },
                {
                    "is_analysis": True,
                    "field_name": "request_method",
                    "content": "GET",
                    "type": "string",
                },
            ])
        ```

        ### Creating with custom regex structuring method

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.StructuringCustomConfiguration("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            content="2023-09-09/18:15:41 this log is Error NO 6323",
            regex_rules="^(?<a01>[^ ]+)(?:[^ ]* ){1}(?<a02>\\\\w+)(?:[^ ]* ){1}(?<a03>\\\\w+)(?:[^ ]* )",
            demo_fields=[
                {
                    "is_analysis": True,
                    "field_name": "a01",
                    "type": "string",
                },
                {
                    "is_analysis": True,
                    "field_name": "a02",
                    "type": "string",
                },
                {
                    "is_analysis": True,
                    "field_name": "a03",
                    "type": "string",
                },
            ])
        ```

        ## Import

        The LTS structuring custom configuration can be imported using `log_group_id` and `log_stream_id`, separated by a slash,

        e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/structuringCustomConfiguration:StructuringCustomConfiguration test <log_group_id>/<log_stream_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `demo_fields`, `regex_rules`, `layers`,

        `tokenizer`, `log_format`, `tag_fields`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_lts_structuring_custom_configuration" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              demo_fields,
            
              regex_rules,
            
              layers,
            
              tokenizer,
            
              log_format,
            
              tag_fields,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] content: Specifies the field content.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructuringCustomConfigurationDemoFieldArgs', 'StructuringCustomConfigurationDemoFieldArgsDict']]]] demo_fields: Specifies the list of example fields. The maximum length is `200`. The field sequence
               in `demo_fields` must be the same as that in `content`. The listed fields will be used as log extraction fields.
               The demo_fields structure is documented below.
        :param pulumi.Input[_builtins.int] layers: Specifies the maximum parsing layers. The maximum value is `3`.
               When this field is specified, the log body will be parsed in JSON format and split into key-value pairs.
        :param pulumi.Input[_builtins.str] log_format: Specifies the nginx configuration.
               When this field is specified, key-value pairs are extracted from Nginx log events.
               
               > The fields `regex_rules`, `layers`, `tokenizer` and `log_format` are mutually exclusive, and one of these fields
               must be specified. Refer to [document](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_0823.html) for more
               information.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] regex_rules: Specifies the regular expression. The maximum length is `5000` characters.
               When this field is specified, regular analysis will be used to parse the logs.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructuringCustomConfigurationTagFieldArgs', 'StructuringCustomConfigurationTagFieldArgsDict']]]] tag_fields: Specifies the tag field array. This field is only needed when tag fields are used for
               parsing.
               The tag_fields structure is documented below.
               
               <a name="StructCustomConfig_demo_fields"></a>
               The `demo_fields` block supports:
        :param pulumi.Input[_builtins.str] tokenizer: Specifies the delimiter, such as spaces and colons.
               When this field is specified, the log body will be parsed by specifying separators.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StructuringCustomConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an LTS structuring custom configuration resource within HuaweiCloud.

        ## Example Usage

        ### Creating with json structuring method

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.StructuringCustomConfiguration("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            content="{'code':38,'user':{'name':'testdemo'}}",
            layers=3,
            demo_fields=[
                {
                    "is_analysis": True,
                    "field_name": "code",
                    "content": "38",
                    "type": "long",
                },
                {
                    "is_analysis": True,
                    "field_name": "user.name",
                    "content": "testdemo",
                    "type": "string",
                },
            ],
            tag_fields=[{
                "is_analysis": True,
                "field_name": "hostIP",
                "content": "192.168.2.134",
                "type": "string",
            }])
        ```

        ### Creating with split structuring method

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.StructuringCustomConfiguration("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            content="2023-09-09/18:50:51 Error",
            tokenizer=" ",
            demo_fields=[
                {
                    "is_analysis": True,
                    "field_name": "b1",
                    "content": "2023-09-09/18:50:51",
                    "type": "string",
                },
                {
                    "is_analysis": True,
                    "field_name": "b2",
                    "content": "Error",
                    "type": "string",
                },
            ])
        ```

        ### Creating with nginx structuring method

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.StructuringCustomConfiguration("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            content="39.149.31.187 - - [12/Mar/2020:12:24:02 +0800] \\"GET / HTTP/1.1\\" 304 ",
            log_format=\"\"\"log_format  main   '$remote_addr - $remote_user [$time_local] "$request" '
        '$status ';\"\"\",
            demo_fields=[
                {
                    "is_analysis": True,
                    "field_name": "remote_addr",
                    "content": "39.149.31.187",
                    "type": "string",
                },
                {
                    "is_analysis": True,
                    "field_name": "remote_user",
                    "content": "-",
                    "type": "string",
                },
                {
                    "is_analysis": True,
                    "field_name": "request_method",
                    "content": "GET",
                    "type": "string",
                },
            ])
        ```

        ### Creating with custom regex structuring method

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.StructuringCustomConfiguration("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            content="2023-09-09/18:15:41 this log is Error NO 6323",
            regex_rules="^(?<a01>[^ ]+)(?:[^ ]* ){1}(?<a02>\\\\w+)(?:[^ ]* ){1}(?<a03>\\\\w+)(?:[^ ]* )",
            demo_fields=[
                {
                    "is_analysis": True,
                    "field_name": "a01",
                    "type": "string",
                },
                {
                    "is_analysis": True,
                    "field_name": "a02",
                    "type": "string",
                },
                {
                    "is_analysis": True,
                    "field_name": "a03",
                    "type": "string",
                },
            ])
        ```

        ## Import

        The LTS structuring custom configuration can be imported using `log_group_id` and `log_stream_id`, separated by a slash,

        e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/structuringCustomConfiguration:StructuringCustomConfiguration test <log_group_id>/<log_stream_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `demo_fields`, `regex_rules`, `layers`,

        `tokenizer`, `log_format`, `tag_fields`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_lts_structuring_custom_configuration" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              demo_fields,
            
              regex_rules,
            
              layers,
            
              tokenizer,
            
              log_format,
            
              tag_fields,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param StructuringCustomConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StructuringCustomConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringCustomConfigurationDemoFieldArgs', 'StructuringCustomConfigurationDemoFieldArgsDict']]]]] = None,
                 layers: Optional[pulumi.Input[_builtins.int]] = None,
                 log_format: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 regex_rules: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringCustomConfigurationTagFieldArgs', 'StructuringCustomConfigurationTagFieldArgsDict']]]]] = None,
                 tokenizer: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StructuringCustomConfigurationArgs.__new__(StructuringCustomConfigurationArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            if demo_fields is None and not opts.urn:
                raise TypeError("Missing required property 'demo_fields'")
            __props__.__dict__["demo_fields"] = demo_fields
            __props__.__dict__["layers"] = layers
            __props__.__dict__["log_format"] = log_format
            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            __props__.__dict__["regex_rules"] = regex_rules
            __props__.__dict__["region"] = region
            __props__.__dict__["tag_fields"] = tag_fields
            __props__.__dict__["tokenizer"] = tokenizer
        super(StructuringCustomConfiguration, __self__).__init__(
            'huaweicloud:Lts/structuringCustomConfiguration:StructuringCustomConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[_builtins.str]] = None,
            demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringCustomConfigurationDemoFieldArgs', 'StructuringCustomConfigurationDemoFieldArgsDict']]]]] = None,
            layers: Optional[pulumi.Input[_builtins.int]] = None,
            log_format: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            regex_rules: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringCustomConfigurationTagFieldArgs', 'StructuringCustomConfigurationTagFieldArgsDict']]]]] = None,
            tokenizer: Optional[pulumi.Input[_builtins.str]] = None) -> 'StructuringCustomConfiguration':
        """
        Get an existing StructuringCustomConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] content: Specifies the field content.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructuringCustomConfigurationDemoFieldArgs', 'StructuringCustomConfigurationDemoFieldArgsDict']]]] demo_fields: Specifies the list of example fields. The maximum length is `200`. The field sequence
               in `demo_fields` must be the same as that in `content`. The listed fields will be used as log extraction fields.
               The demo_fields structure is documented below.
        :param pulumi.Input[_builtins.int] layers: Specifies the maximum parsing layers. The maximum value is `3`.
               When this field is specified, the log body will be parsed in JSON format and split into key-value pairs.
        :param pulumi.Input[_builtins.str] log_format: Specifies the nginx configuration.
               When this field is specified, key-value pairs are extracted from Nginx log events.
               
               > The fields `regex_rules`, `layers`, `tokenizer` and `log_format` are mutually exclusive, and one of these fields
               must be specified. Refer to [document](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_0823.html) for more
               information.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] regex_rules: Specifies the regular expression. The maximum length is `5000` characters.
               When this field is specified, regular analysis will be used to parse the logs.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructuringCustomConfigurationTagFieldArgs', 'StructuringCustomConfigurationTagFieldArgsDict']]]] tag_fields: Specifies the tag field array. This field is only needed when tag fields are used for
               parsing.
               The tag_fields structure is documented below.
               
               <a name="StructCustomConfig_demo_fields"></a>
               The `demo_fields` block supports:
        :param pulumi.Input[_builtins.str] tokenizer: Specifies the delimiter, such as spaces and colons.
               When this field is specified, the log body will be parsed by specifying separators.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StructuringCustomConfigurationState.__new__(_StructuringCustomConfigurationState)

        __props__.__dict__["content"] = content
        __props__.__dict__["demo_fields"] = demo_fields
        __props__.__dict__["layers"] = layers
        __props__.__dict__["log_format"] = log_format
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["regex_rules"] = regex_rules
        __props__.__dict__["region"] = region
        __props__.__dict__["tag_fields"] = tag_fields
        __props__.__dict__["tokenizer"] = tokenizer
        return StructuringCustomConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the field content.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> pulumi.Output[Sequence['outputs.StructuringCustomConfigurationDemoField']]:
        """
        Specifies the list of example fields. The maximum length is `200`. The field sequence
        in `demo_fields` must be the same as that in `content`. The listed fields will be used as log extraction fields.
        The demo_fields structure is documented below.
        """
        return pulumi.get(self, "demo_fields")

    @_builtins.property
    @pulumi.getter
    def layers(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the maximum parsing layers. The maximum value is `3`.
        When this field is specified, the log body will be parsed in JSON format and split into key-value pairs.
        """
        return pulumi.get(self, "layers")

    @_builtins.property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the nginx configuration.
        When this field is specified, key-value pairs are extracted from Nginx log events.

        > The fields `regex_rules`, `layers`, `tokenizer` and `log_format` are mutually exclusive, and one of these fields
        must be specified. Refer to [document](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_0823.html) for more
        information.
        """
        return pulumi.get(self, "log_format")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log stream ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="regexRules")
    def regex_rules(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the regular expression. The maximum length is `5000` characters.
        When this field is specified, regular analysis will be used to parse the logs.
        """
        return pulumi.get(self, "regex_rules")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> pulumi.Output[Optional[Sequence['outputs.StructuringCustomConfigurationTagField']]]:
        """
        Specifies the tag field array. This field is only needed when tag fields are used for
        parsing.
        The tag_fields structure is documented below.

        <a name="StructCustomConfig_demo_fields"></a>
        The `demo_fields` block supports:
        """
        return pulumi.get(self, "tag_fields")

    @_builtins.property
    @pulumi.getter
    def tokenizer(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the delimiter, such as spaces and colons.
        When this field is specified, the log body will be parsed by specifying separators.
        """
        return pulumi.get(self, "tokenizer")

