# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTransfersResult',
    'AwaitableGetTransfersResult',
    'get_transfers',
    'get_transfers_output',
]

@pulumi.output_type
class GetTransfersResult:
    """
    A collection of values returned by getTransfers.
    """
    def __init__(__self__, id=None, log_group_name=None, log_stream_name=None, region=None, transfers=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_group_name and not isinstance(log_group_name, str):
            raise TypeError("Expected argument 'log_group_name' to be a str")
        pulumi.set(__self__, "log_group_name", log_group_name)
        if log_stream_name and not isinstance(log_stream_name, str):
            raise TypeError("Expected argument 'log_stream_name' to be a str")
        pulumi.set(__self__, "log_stream_name", log_stream_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if transfers and not isinstance(transfers, list):
            raise TypeError("Expected argument 'transfers' to be a list")
        pulumi.set(__self__, "transfers", transfers)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the log group to which the log transfer belongs.
        """
        return pulumi.get(self, "log_group_name")

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[_builtins.str]:
        """
        The name of the log stream.
        """
        return pulumi.get(self, "log_stream_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def transfers(self) -> Sequence['outputs.GetTransfersTransferResult']:
        """
        The list of log transfers.  
        The transfers structure is documented below.
        """
        return pulumi.get(self, "transfers")


class AwaitableGetTransfersResult(GetTransfersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTransfersResult(
            id=self.id,
            log_group_name=self.log_group_name,
            log_stream_name=self.log_stream_name,
            region=self.region,
            transfers=self.transfers)


def get_transfers(log_group_name: Optional[_builtins.str] = None,
                  log_stream_name: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTransfersResult:
    """
    Using this data source to query the list of log transfers within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    log_group_name = config.require_object("logGroupName")
    test = huaweicloud.Lts.get_transfers(log_group_name=log_group_name)
    ```


    :param _builtins.str log_group_name: Specifies the name of the log group to which the log transfers and log streams
           belong.
    :param _builtins.str log_stream_name: Specifies the name of the log stream to be transferred in the log transfer.
    :param _builtins.str region: Specifies the region in which to query log transfers.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['logGroupName'] = log_group_name
    __args__['logStreamName'] = log_stream_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Lts/getTransfers:getTransfers', __args__, opts=opts, typ=GetTransfersResult).value

    return AwaitableGetTransfersResult(
        id=pulumi.get(__ret__, 'id'),
        log_group_name=pulumi.get(__ret__, 'log_group_name'),
        log_stream_name=pulumi.get(__ret__, 'log_stream_name'),
        region=pulumi.get(__ret__, 'region'),
        transfers=pulumi.get(__ret__, 'transfers'))
def get_transfers_output(log_group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         log_stream_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTransfersResult]:
    """
    Using this data source to query the list of log transfers within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    log_group_name = config.require_object("logGroupName")
    test = huaweicloud.Lts.get_transfers(log_group_name=log_group_name)
    ```


    :param _builtins.str log_group_name: Specifies the name of the log group to which the log transfers and log streams
           belong.
    :param _builtins.str log_stream_name: Specifies the name of the log stream to be transferred in the log transfer.
    :param _builtins.str region: Specifies the region in which to query log transfers.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['logGroupName'] = log_group_name
    __args__['logStreamName'] = log_stream_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Lts/getTransfers:getTransfers', __args__, opts=opts, typ=GetTransfersResult)
    return __ret__.apply(lambda __response__: GetTransfersResult(
        id=pulumi.get(__response__, 'id'),
        log_group_name=pulumi.get(__response__, 'log_group_name'),
        log_stream_name=pulumi.get(__response__, 'log_stream_name'),
        region=pulumi.get(__response__, 'region'),
        transfers=pulumi.get(__response__, 'transfers')))
