# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AomAccessArgs', 'AomAccess']

@pulumi.input_type
class AomAccessArgs:
    def __init__(__self__, *,
                 access_rules: pulumi.Input[Sequence[pulumi.Input['AomAccessAccessRuleArgs']]],
                 cluster_id: pulumi.Input[_builtins.str],
                 cluster_name: pulumi.Input[_builtins.str],
                 namespace: pulumi.Input[_builtins.str],
                 workloads: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 container_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AomAccess resource.
        :param pulumi.Input[Sequence[pulumi.Input['AomAccessAccessRuleArgs']]] access_rules: Specifies the access log details.
               The access_rules structure is documented below.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the CCE or CCI cluster ID. It is fixed to **CCI-ClusterID** for CCI.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the CCE or CCI cluster name. It is fixed to **CCI-Cluster** for CCI.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] workloads: Specifies the workloads.
               + When creating with all workloads, this field should be `["__ALL_DEPLOYMENTS__"]`.
               + When creating with specify workloads, this field should be the list of workloads.
        :param pulumi.Input[_builtins.str] container_name: Specifies the container name.
               
               <a name="AOMAccess_access_rules"></a>
               The `access_rules` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the unique rule name. The name consists of `1` to `100` characters,
               including letters, digits, underscores (_), hyphens (-) and dots (.).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "access_rules", access_rules)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "workloads", workloads)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="accessRules")
    def access_rules(self) -> pulumi.Input[Sequence[pulumi.Input['AomAccessAccessRuleArgs']]]:
        """
        Specifies the access log details.
        The access_rules structure is documented below.
        """
        return pulumi.get(self, "access_rules")

    @access_rules.setter
    def access_rules(self, value: pulumi.Input[Sequence[pulumi.Input['AomAccessAccessRuleArgs']]]):
        pulumi.set(self, "access_rules", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CCE or CCI cluster ID. It is fixed to **CCI-ClusterID** for CCI.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the CCE or CCI cluster name. It is fixed to **CCI-Cluster** for CCI.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def workloads(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the workloads.
        + When creating with all workloads, this field should be `["__ALL_DEPLOYMENTS__"]`.
        + When creating with specify workloads, this field should be the list of workloads.
        """
        return pulumi.get(self, "workloads")

    @workloads.setter
    def workloads(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "workloads", value)

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the container name.

        <a name="AOMAccess_access_rules"></a>
        The `access_rules` block supports:
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unique rule name. The name consists of `1` to `100` characters,
        including letters, digits, underscores (_), hyphens (-) and dots (.).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AomAccessState:
    def __init__(__self__, *,
                 access_rules: Optional[pulumi.Input[Sequence[pulumi.Input['AomAccessAccessRuleArgs']]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 container_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workloads: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering AomAccess resources.
        :param pulumi.Input[Sequence[pulumi.Input['AomAccessAccessRuleArgs']]] access_rules: Specifies the access log details.
               The access_rules structure is documented below.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the CCE or CCI cluster ID. It is fixed to **CCI-ClusterID** for CCI.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the CCE or CCI cluster name. It is fixed to **CCI-Cluster** for CCI.
        :param pulumi.Input[_builtins.str] container_name: Specifies the container name.
               
               <a name="AOMAccess_access_rules"></a>
               The `access_rules` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the unique rule name. The name consists of `1` to `100` characters,
               including letters, digits, underscores (_), hyphens (-) and dots (.).
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] workloads: Specifies the workloads.
               + When creating with all workloads, this field should be `["__ALL_DEPLOYMENTS__"]`.
               + When creating with specify workloads, this field should be the list of workloads.
        """
        if access_rules is not None:
            pulumi.set(__self__, "access_rules", access_rules)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @_builtins.property
    @pulumi.getter(name="accessRules")
    def access_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AomAccessAccessRuleArgs']]]]:
        """
        Specifies the access log details.
        The access_rules structure is documented below.
        """
        return pulumi.get(self, "access_rules")

    @access_rules.setter
    def access_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AomAccessAccessRuleArgs']]]]):
        pulumi.set(self, "access_rules", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CCE or CCI cluster ID. It is fixed to **CCI-ClusterID** for CCI.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the CCE or CCI cluster name. It is fixed to **CCI-Cluster** for CCI.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the container name.

        <a name="AOMAccess_access_rules"></a>
        The `access_rules` block supports:
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unique rule name. The name consists of `1` to `100` characters,
        including letters, digits, underscores (_), hyphens (-) and dots (.).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the workloads.
        + When creating with all workloads, this field should be `["__ALL_DEPLOYMENTS__"]`.
        + When creating with specify workloads, this field should be the list of workloads.
        """
        return pulumi.get(self, "workloads")

    @workloads.setter
    def workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "workloads", value)


@pulumi.type_token("huaweicloud:Lts/aomAccess:AomAccess")
class AomAccess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AomAccessAccessRuleArgs', 'AomAccessAccessRuleArgsDict']]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 container_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workloads: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages an AOM to LTS log mapping rule resource within HuaweiCloud.

        > The resource of connecting AOM logs to LTS is currently restricted. Please submit a service ticket to open this
        feature for you. Refer to
        [How to submit a service ticket](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html).

        ## Example Usage

        ### Creating with all workloads

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        cluster_name = config.require_object("clusterName")
        log_group_id = config.require_object("logGroupId")
        log_group_name = config.require_object("logGroupName")
        log_stream_id = config.require_object("logStreamId")
        log_stream_name = config.require_object("logStreamName")
        test = huaweicloud.lts.AomAccess("test",
            name="test_name",
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            namespace="default",
            workloads=["__ALL_DEPLOYMENTS__"],
            access_rules=[
                {
                    "file_name": "/test/*",
                    "log_group_id": log_group_id,
                    "log_group_name": log_group_name,
                    "log_stream_id": log_stream_id,
                    "log_stream_name": log_stream_name,
                },
                {
                    "file_name": "/demo/demo.log",
                    "log_group_id": log_group_id,
                    "log_group_name": log_group_name,
                    "log_stream_id": log_stream_id,
                    "log_stream_name": log_stream_name,
                },
            ])
        ```

        ### Creating with specify workloads

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        cluster_name = config.require_object("clusterName")
        log_group_id = config.require_object("logGroupId")
        log_group_name = config.require_object("logGroupName")
        log_stream_id = config.require_object("logStreamId")
        log_stream_name = config.require_object("logStreamName")
        workload = config.require_object("workload")
        test = huaweicloud.lts.AomAccess("test",
            name="test_name",
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            namespace="default",
            workloads=[workload],
            access_rules=[{
                "file_name": "__ALL_FILES__",
                "log_group_id": log_group_id,
                "log_group_name": log_group_name,
                "log_stream_id": log_stream_id,
                "log_stream_name": log_stream_name,
            }])
        ```

        ### Creating with CCI cluster

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_group_name = config.require_object("logGroupName")
        log_stream_id = config.require_object("logStreamId")
        log_stream_name = config.require_object("logStreamName")
        test = huaweicloud.lts.AomAccess("test",
            name="test_name",
            cluster_id="CCI-ClusterID",
            cluster_name="CCI-Cluster",
            namespace="default",
            workloads=["__ALL_DEPLOYMENTS__"],
            access_rules=[{
                "file_name": "__ALL_FILES__",
                "log_group_id": log_group_id,
                "log_group_name": log_group_name,
                "log_stream_id": log_stream_id,
                "log_stream_name": log_stream_name,
            }])
        ```

        ## Import

        The AOM to LTS log mapping rule can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/aomAccess:AomAccess test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AomAccessAccessRuleArgs', 'AomAccessAccessRuleArgsDict']]]] access_rules: Specifies the access log details.
               The access_rules structure is documented below.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the CCE or CCI cluster ID. It is fixed to **CCI-ClusterID** for CCI.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the CCE or CCI cluster name. It is fixed to **CCI-Cluster** for CCI.
        :param pulumi.Input[_builtins.str] container_name: Specifies the container name.
               
               <a name="AOMAccess_access_rules"></a>
               The `access_rules` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the unique rule name. The name consists of `1` to `100` characters,
               including letters, digits, underscores (_), hyphens (-) and dots (.).
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] workloads: Specifies the workloads.
               + When creating with all workloads, this field should be `["__ALL_DEPLOYMENTS__"]`.
               + When creating with specify workloads, this field should be the list of workloads.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AomAccessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AOM to LTS log mapping rule resource within HuaweiCloud.

        > The resource of connecting AOM logs to LTS is currently restricted. Please submit a service ticket to open this
        feature for you. Refer to
        [How to submit a service ticket](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html).

        ## Example Usage

        ### Creating with all workloads

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        cluster_name = config.require_object("clusterName")
        log_group_id = config.require_object("logGroupId")
        log_group_name = config.require_object("logGroupName")
        log_stream_id = config.require_object("logStreamId")
        log_stream_name = config.require_object("logStreamName")
        test = huaweicloud.lts.AomAccess("test",
            name="test_name",
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            namespace="default",
            workloads=["__ALL_DEPLOYMENTS__"],
            access_rules=[
                {
                    "file_name": "/test/*",
                    "log_group_id": log_group_id,
                    "log_group_name": log_group_name,
                    "log_stream_id": log_stream_id,
                    "log_stream_name": log_stream_name,
                },
                {
                    "file_name": "/demo/demo.log",
                    "log_group_id": log_group_id,
                    "log_group_name": log_group_name,
                    "log_stream_id": log_stream_id,
                    "log_stream_name": log_stream_name,
                },
            ])
        ```

        ### Creating with specify workloads

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        cluster_name = config.require_object("clusterName")
        log_group_id = config.require_object("logGroupId")
        log_group_name = config.require_object("logGroupName")
        log_stream_id = config.require_object("logStreamId")
        log_stream_name = config.require_object("logStreamName")
        workload = config.require_object("workload")
        test = huaweicloud.lts.AomAccess("test",
            name="test_name",
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            namespace="default",
            workloads=[workload],
            access_rules=[{
                "file_name": "__ALL_FILES__",
                "log_group_id": log_group_id,
                "log_group_name": log_group_name,
                "log_stream_id": log_stream_id,
                "log_stream_name": log_stream_name,
            }])
        ```

        ### Creating with CCI cluster

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_group_name = config.require_object("logGroupName")
        log_stream_id = config.require_object("logStreamId")
        log_stream_name = config.require_object("logStreamName")
        test = huaweicloud.lts.AomAccess("test",
            name="test_name",
            cluster_id="CCI-ClusterID",
            cluster_name="CCI-Cluster",
            namespace="default",
            workloads=["__ALL_DEPLOYMENTS__"],
            access_rules=[{
                "file_name": "__ALL_FILES__",
                "log_group_id": log_group_id,
                "log_group_name": log_group_name,
                "log_stream_id": log_stream_id,
                "log_stream_name": log_stream_name,
            }])
        ```

        ## Import

        The AOM to LTS log mapping rule can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/aomAccess:AomAccess test <id>
        ```

        :param str resource_name: The name of the resource.
        :param AomAccessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AomAccessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AomAccessAccessRuleArgs', 'AomAccessAccessRuleArgsDict']]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 container_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workloads: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AomAccessArgs.__new__(AomAccessArgs)

            if access_rules is None and not opts.urn:
                raise TypeError("Missing required property 'access_rules'")
            __props__.__dict__["access_rules"] = access_rules
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["container_name"] = container_name
            __props__.__dict__["name"] = name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["region"] = region
            if workloads is None and not opts.urn:
                raise TypeError("Missing required property 'workloads'")
            __props__.__dict__["workloads"] = workloads
        super(AomAccess, __self__).__init__(
            'huaweicloud:Lts/aomAccess:AomAccess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AomAccessAccessRuleArgs', 'AomAccessAccessRuleArgsDict']]]]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            container_name: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            workloads: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'AomAccess':
        """
        Get an existing AomAccess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AomAccessAccessRuleArgs', 'AomAccessAccessRuleArgsDict']]]] access_rules: Specifies the access log details.
               The access_rules structure is documented below.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the CCE or CCI cluster ID. It is fixed to **CCI-ClusterID** for CCI.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the CCE or CCI cluster name. It is fixed to **CCI-Cluster** for CCI.
        :param pulumi.Input[_builtins.str] container_name: Specifies the container name.
               
               <a name="AOMAccess_access_rules"></a>
               The `access_rules` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the unique rule name. The name consists of `1` to `100` characters,
               including letters, digits, underscores (_), hyphens (-) and dots (.).
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] workloads: Specifies the workloads.
               + When creating with all workloads, this field should be `["__ALL_DEPLOYMENTS__"]`.
               + When creating with specify workloads, this field should be the list of workloads.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AomAccessState.__new__(_AomAccessState)

        __props__.__dict__["access_rules"] = access_rules
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["container_name"] = container_name
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["region"] = region
        __props__.__dict__["workloads"] = workloads
        return AomAccess(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessRules")
    def access_rules(self) -> pulumi.Output[Sequence['outputs.AomAccessAccessRule']]:
        """
        Specifies the access log details.
        The access_rules structure is documented below.
        """
        return pulumi.get(self, "access_rules")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CCE or CCI cluster ID. It is fixed to **CCI-ClusterID** for CCI.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the CCE or CCI cluster name. It is fixed to **CCI-Cluster** for CCI.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the container name.

        <a name="AOMAccess_access_rules"></a>
        The `access_rules` block supports:
        """
        return pulumi.get(self, "container_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the unique rule name. The name consists of `1` to `100` characters,
        including letters, digits, underscores (_), hyphens (-) and dots (.).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def workloads(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the workloads.
        + When creating with all workloads, this field should be `["__ALL_DEPLOYMENTS__"]`.
        + When creating with specify workloads, this field should be the list of workloads.
        """
        return pulumi.get(self, "workloads")

