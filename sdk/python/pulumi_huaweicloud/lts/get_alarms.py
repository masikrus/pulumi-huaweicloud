# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAlarmsResult',
    'AwaitableGetAlarmsResult',
    'get_alarms',
    'get_alarms_output',
]

@pulumi.output_type
class GetAlarmsResult:
    """
    A collection of values returned by getAlarms.
    """
    def __init__(__self__, alarm_level_ids=None, alarms=None, end_time=None, id=None, region=None, search=None, sort=None, start_time=None, step=None, time_range=None, type=None, whether_custom_field=None):
        if alarm_level_ids and not isinstance(alarm_level_ids, list):
            raise TypeError("Expected argument 'alarm_level_ids' to be a list")
        pulumi.set(__self__, "alarm_level_ids", alarm_level_ids)
        if alarms and not isinstance(alarms, list):
            raise TypeError("Expected argument 'alarms' to be a list")
        pulumi.set(__self__, "alarms", alarms)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)
        if sort and not isinstance(sort, dict):
            raise TypeError("Expected argument 'sort' to be a dict")
        pulumi.set(__self__, "sort", sort)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)
        if step and not isinstance(step, int):
            raise TypeError("Expected argument 'step' to be a int")
        pulumi.set(__self__, "step", step)
        if time_range and not isinstance(time_range, str):
            raise TypeError("Expected argument 'time_range' to be a str")
        pulumi.set(__self__, "time_range", time_range)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if whether_custom_field and not isinstance(whether_custom_field, bool):
            raise TypeError("Expected argument 'whether_custom_field' to be a bool")
        pulumi.set(__self__, "whether_custom_field", whether_custom_field)

    @_builtins.property
    @pulumi.getter(name="alarmLevelIds")
    def alarm_level_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "alarm_level_ids")

    @_builtins.property
    @pulumi.getter
    def alarms(self) -> Sequence['outputs.GetAlarmsAlarmResult']:
        """
        The list of the queried alarms.  
        The alarms structure is documented below.
        """
        return pulumi.get(self, "alarms")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def search(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "search")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional['outputs.GetAlarmsSortResult']:
        return pulumi.get(self, "sort")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def step(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "step")

    @_builtins.property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "time_range")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the alarm rule.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="whetherCustomField")
    def whether_custom_field(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "whether_custom_field")


class AwaitableGetAlarmsResult(GetAlarmsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmsResult(
            alarm_level_ids=self.alarm_level_ids,
            alarms=self.alarms,
            end_time=self.end_time,
            id=self.id,
            region=self.region,
            search=self.search,
            sort=self.sort,
            start_time=self.start_time,
            step=self.step,
            time_range=self.time_range,
            type=self.type,
            whether_custom_field=self.whether_custom_field)


def get_alarms(alarm_level_ids: Optional[Sequence[_builtins.str]] = None,
               end_time: Optional[_builtins.int] = None,
               region: Optional[_builtins.str] = None,
               search: Optional[_builtins.str] = None,
               sort: Optional[Union['GetAlarmsSortArgs', 'GetAlarmsSortArgsDict']] = None,
               start_time: Optional[_builtins.int] = None,
               step: Optional[_builtins.int] = None,
               time_range: Optional[_builtins.str] = None,
               type: Optional[_builtins.str] = None,
               whether_custom_field: Optional[_builtins.bool] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmsResult:
    """
    Use this data source to get the alarm list within HuaweiCloud.

    ## Query active alarms in the last 30 minutes

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    filter_by_time_range = huaweicloud.Lts.get_alarms(type="active_alert",
        whether_custom_field=False,
        time_range="30")
    ```


    :param Sequence[_builtins.str] alarm_level_ids: Specifies the list of alarm levels.  
           The valid values are as follows:
           + **Critical**
           + **Major**
           + **Minor**
           + **Info**
    :param _builtins.int end_time: Specifies the end time of a customized time segment, in milliseconds.  
           This parameter is required when `whether_custom_field` set to **true**.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str search: Specifies the keyword search criteria.
    :param Union['GetAlarmsSortArgs', 'GetAlarmsSortArgsDict'] sort: Specifies the sort criteria of the queried alarms.  
           The sort structure is documented below.
    :param _builtins.int start_time: Specifies the start time of a customized time segment, in milliseconds.  
           This parameter is required when `whether_custom_field` set to **true**.
    :param _builtins.int step: Specifies the step of the query, in milliseconds.
           
           <a name="data_alarms_sort"></a>
           The `sort` block supports:
    :param _builtins.str time_range: Specifies the time range of the alarm to be queried, in minutes.  
           This parameter is required when `whether_custom_field` set to **false**.
    :param _builtins.str type: Specifies the type of the alarm to be queried.  
           The valid values are as follows:
           + **active_alert**: Query active alarms.
           + **history_alert**: Query historical alarms.
    :param _builtins.bool whether_custom_field: Specifies whether to customize the query time range, defaults to **false**.
    """
    __args__ = dict()
    __args__['alarmLevelIds'] = alarm_level_ids
    __args__['endTime'] = end_time
    __args__['region'] = region
    __args__['search'] = search
    __args__['sort'] = sort
    __args__['startTime'] = start_time
    __args__['step'] = step
    __args__['timeRange'] = time_range
    __args__['type'] = type
    __args__['whetherCustomField'] = whether_custom_field
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Lts/getAlarms:getAlarms', __args__, opts=opts, typ=GetAlarmsResult).value

    return AwaitableGetAlarmsResult(
        alarm_level_ids=pulumi.get(__ret__, 'alarm_level_ids'),
        alarms=pulumi.get(__ret__, 'alarms'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        search=pulumi.get(__ret__, 'search'),
        sort=pulumi.get(__ret__, 'sort'),
        start_time=pulumi.get(__ret__, 'start_time'),
        step=pulumi.get(__ret__, 'step'),
        time_range=pulumi.get(__ret__, 'time_range'),
        type=pulumi.get(__ret__, 'type'),
        whether_custom_field=pulumi.get(__ret__, 'whether_custom_field'))
def get_alarms_output(alarm_level_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                      end_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      search: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      sort: Optional[pulumi.Input[Optional[Union['GetAlarmsSortArgs', 'GetAlarmsSortArgsDict']]]] = None,
                      start_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                      step: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                      time_range: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      type: Optional[pulumi.Input[_builtins.str]] = None,
                      whether_custom_field: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAlarmsResult]:
    """
    Use this data source to get the alarm list within HuaweiCloud.

    ## Query active alarms in the last 30 minutes

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    filter_by_time_range = huaweicloud.Lts.get_alarms(type="active_alert",
        whether_custom_field=False,
        time_range="30")
    ```


    :param Sequence[_builtins.str] alarm_level_ids: Specifies the list of alarm levels.  
           The valid values are as follows:
           + **Critical**
           + **Major**
           + **Minor**
           + **Info**
    :param _builtins.int end_time: Specifies the end time of a customized time segment, in milliseconds.  
           This parameter is required when `whether_custom_field` set to **true**.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str search: Specifies the keyword search criteria.
    :param Union['GetAlarmsSortArgs', 'GetAlarmsSortArgsDict'] sort: Specifies the sort criteria of the queried alarms.  
           The sort structure is documented below.
    :param _builtins.int start_time: Specifies the start time of a customized time segment, in milliseconds.  
           This parameter is required when `whether_custom_field` set to **true**.
    :param _builtins.int step: Specifies the step of the query, in milliseconds.
           
           <a name="data_alarms_sort"></a>
           The `sort` block supports:
    :param _builtins.str time_range: Specifies the time range of the alarm to be queried, in minutes.  
           This parameter is required when `whether_custom_field` set to **false**.
    :param _builtins.str type: Specifies the type of the alarm to be queried.  
           The valid values are as follows:
           + **active_alert**: Query active alarms.
           + **history_alert**: Query historical alarms.
    :param _builtins.bool whether_custom_field: Specifies whether to customize the query time range, defaults to **false**.
    """
    __args__ = dict()
    __args__['alarmLevelIds'] = alarm_level_ids
    __args__['endTime'] = end_time
    __args__['region'] = region
    __args__['search'] = search
    __args__['sort'] = sort
    __args__['startTime'] = start_time
    __args__['step'] = step
    __args__['timeRange'] = time_range
    __args__['type'] = type
    __args__['whetherCustomField'] = whether_custom_field
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Lts/getAlarms:getAlarms', __args__, opts=opts, typ=GetAlarmsResult)
    return __ret__.apply(lambda __response__: GetAlarmsResult(
        alarm_level_ids=pulumi.get(__response__, 'alarm_level_ids'),
        alarms=pulumi.get(__response__, 'alarms'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        search=pulumi.get(__response__, 'search'),
        sort=pulumi.get(__response__, 'sort'),
        start_time=pulumi.get(__response__, 'start_time'),
        step=pulumi.get(__response__, 'step'),
        time_range=pulumi.get(__response__, 'time_range'),
        type=pulumi.get(__response__, 'type'),
        whether_custom_field=pulumi.get(__response__, 'whether_custom_field')))
