# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCceAccessesResult',
    'AwaitableGetCceAccessesResult',
    'get_cce_accesses',
    'get_cce_accesses_output',
]

@pulumi.output_type
class GetCceAccessesResult:
    """
    A collection of values returned by getCceAccesses.
    """
    def __init__(__self__, accesses=None, id=None, log_group_name=None, log_stream_name=None, name=None, region=None, tags=None):
        if accesses and not isinstance(accesses, list):
            raise TypeError("Expected argument 'accesses' to be a list")
        pulumi.set(__self__, "accesses", accesses)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_group_name and not isinstance(log_group_name, str):
            raise TypeError("Expected argument 'log_group_name' to be a str")
        pulumi.set(__self__, "log_group_name", log_group_name)
        if log_stream_name and not isinstance(log_stream_name, str):
            raise TypeError("Expected argument 'log_stream_name' to be a str")
        pulumi.set(__self__, "log_stream_name", log_stream_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def accesses(self) -> Sequence['outputs.GetCceAccessesAccessResult']:
        """
        The list of CCE access configurations.
        The accesses structure is documented below.
        """
        return pulumi.get(self, "accesses")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the log group.
        """
        return pulumi.get(self, "log_group_name")

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[_builtins.str]:
        """
        The name of the log stream.
        """
        return pulumi.get(self, "log_stream_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the CCE access.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the CCE access.
        """
        return pulumi.get(self, "tags")


class AwaitableGetCceAccessesResult(GetCceAccessesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCceAccessesResult(
            accesses=self.accesses,
            id=self.id,
            log_group_name=self.log_group_name,
            log_stream_name=self.log_stream_name,
            name=self.name,
            region=self.region,
            tags=self.tags)


def get_cce_accesses(log_group_name: Optional[_builtins.str] = None,
                     log_stream_name: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     tags: Optional[Mapping[str, _builtins.str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCceAccessesResult:
    """
    Using this data source to query the list of CCE access configurations within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    access_config_name = config.require_object("accessConfigName")
    test = huaweicloud.Lts.get_cce_accesses(name=access_config_name)
    ```


    :param _builtins.str log_group_name: Specifies the name of the log group to which the access configurations and log
           streams belong.
    :param _builtins.str log_stream_name: Specifies the name of the log stream to which the access configurations belong.
    :param _builtins.str name: Specifies the name of the CCE access to be queried.
    :param _builtins.str region: Specifies the region in which to query CCE access configurations.
           If omitted, the provider-level region will be used.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the CCE access.
    """
    __args__ = dict()
    __args__['logGroupName'] = log_group_name
    __args__['logStreamName'] = log_stream_name
    __args__['name'] = name
    __args__['region'] = region
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Lts/getCceAccesses:getCceAccesses', __args__, opts=opts, typ=GetCceAccessesResult).value

    return AwaitableGetCceAccessesResult(
        accesses=pulumi.get(__ret__, 'accesses'),
        id=pulumi.get(__ret__, 'id'),
        log_group_name=pulumi.get(__ret__, 'log_group_name'),
        log_stream_name=pulumi.get(__ret__, 'log_stream_name'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'))
def get_cce_accesses_output(log_group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            log_stream_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCceAccessesResult]:
    """
    Using this data source to query the list of CCE access configurations within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    access_config_name = config.require_object("accessConfigName")
    test = huaweicloud.Lts.get_cce_accesses(name=access_config_name)
    ```


    :param _builtins.str log_group_name: Specifies the name of the log group to which the access configurations and log
           streams belong.
    :param _builtins.str log_stream_name: Specifies the name of the log stream to which the access configurations belong.
    :param _builtins.str name: Specifies the name of the CCE access to be queried.
    :param _builtins.str region: Specifies the region in which to query CCE access configurations.
           If omitted, the provider-level region will be used.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the CCE access.
    """
    __args__ = dict()
    __args__['logGroupName'] = log_group_name
    __args__['logStreamName'] = log_stream_name
    __args__['name'] = name
    __args__['region'] = region
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Lts/getCceAccesses:getCceAccesses', __args__, opts=opts, typ=GetCceAccessesResult)
    return __ret__.apply(lambda __response__: GetCceAccessesResult(
        accesses=pulumi.get(__response__, 'accesses'),
        id=pulumi.get(__response__, 'id'),
        log_group_name=pulumi.get(__response__, 'log_group_name'),
        log_stream_name=pulumi.get(__response__, 'log_stream_name'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags')))
