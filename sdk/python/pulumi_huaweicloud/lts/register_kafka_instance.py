# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RegisterKafkaInstanceArgs', 'RegisterKafkaInstance']

@pulumi.input_type
class RegisterKafkaInstanceArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 kafka_name: pulumi.Input[_builtins.str],
                 connect_info: Optional[pulumi.Input['RegisterKafkaInstanceConnectInfoArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RegisterKafkaInstance resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the Kafka instance to be registered to the LTS.
        :param pulumi.Input[_builtins.str] kafka_name: Specifies the name of the Kafka instance to be registered to the LTS.
        :param pulumi.Input['RegisterKafkaInstanceConnectInfoArgs'] connect_info: Specifies the connection information of the Kafka instance to be
               registered to the LTS.
               The connect_info structure is documented below.
               This parameter is available and required only when the registered Kafka instance is encrypted access.
               
               <a name="register_kafka_to_lts_connect_info"></a>
               The `connect_info` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "kafka_name", kafka_name)
        if connect_info is not None:
            pulumi.set(__self__, "connect_info", connect_info)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the Kafka instance to be registered to the LTS.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="kafkaName")
    def kafka_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the Kafka instance to be registered to the LTS.
        """
        return pulumi.get(self, "kafka_name")

    @kafka_name.setter
    def kafka_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kafka_name", value)

    @_builtins.property
    @pulumi.getter(name="connectInfo")
    def connect_info(self) -> Optional[pulumi.Input['RegisterKafkaInstanceConnectInfoArgs']]:
        """
        Specifies the connection information of the Kafka instance to be
        registered to the LTS.
        The connect_info structure is documented below.
        This parameter is available and required only when the registered Kafka instance is encrypted access.

        <a name="register_kafka_to_lts_connect_info"></a>
        The `connect_info` block supports:
        """
        return pulumi.get(self, "connect_info")

    @connect_info.setter
    def connect_info(self, value: Optional[pulumi.Input['RegisterKafkaInstanceConnectInfoArgs']]):
        pulumi.set(self, "connect_info", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RegisterKafkaInstanceState:
    def __init__(__self__, *,
                 connect_info: Optional[pulumi.Input['RegisterKafkaInstanceConnectInfoArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kafka_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RegisterKafkaInstance resources.
        :param pulumi.Input['RegisterKafkaInstanceConnectInfoArgs'] connect_info: Specifies the connection information of the Kafka instance to be
               registered to the LTS.
               The connect_info structure is documented below.
               This parameter is available and required only when the registered Kafka instance is encrypted access.
               
               <a name="register_kafka_to_lts_connect_info"></a>
               The `connect_info` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the Kafka instance to be registered to the LTS.
        :param pulumi.Input[_builtins.str] kafka_name: Specifies the name of the Kafka instance to be registered to the LTS.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if connect_info is not None:
            pulumi.set(__self__, "connect_info", connect_info)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if kafka_name is not None:
            pulumi.set(__self__, "kafka_name", kafka_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="connectInfo")
    def connect_info(self) -> Optional[pulumi.Input['RegisterKafkaInstanceConnectInfoArgs']]:
        """
        Specifies the connection information of the Kafka instance to be
        registered to the LTS.
        The connect_info structure is documented below.
        This parameter is available and required only when the registered Kafka instance is encrypted access.

        <a name="register_kafka_to_lts_connect_info"></a>
        The `connect_info` block supports:
        """
        return pulumi.get(self, "connect_info")

    @connect_info.setter
    def connect_info(self, value: Optional[pulumi.Input['RegisterKafkaInstanceConnectInfoArgs']]):
        pulumi.set(self, "connect_info", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the Kafka instance to be registered to the LTS.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="kafkaName")
    def kafka_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the Kafka instance to be registered to the LTS.
        """
        return pulumi.get(self, "kafka_name")

    @kafka_name.setter
    def kafka_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kafka_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Lts/registerKafkaInstance:RegisterKafkaInstance")
class RegisterKafkaInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connect_info: Optional[pulumi.Input[Union['RegisterKafkaInstanceConnectInfoArgs', 'RegisterKafkaInstanceConnectInfoArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kafka_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to register the Kafka instance to LTS within HuaweiCloud.

        > 1. Before registering a Kafka instance, please configure the inbound rules of the security group to which the Kafka
        >      instance belongs. Please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_04_0043.html).
        >      <br>2. The same Kafka instance can only be registered once.
        >      <br>3. This resource is only a one-time action resource for registering the Kafka instance to LTS. Deleting this resource
        >      will not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        kafka_instance_id = config.require_object("kafkaInstanceId")
        kafka_instance_name = config.require_object("kafkaInstanceName")
        kafka_instance_access_user = config.require_object("kafkaInstanceAccessUser")
        kafka_instance_access_password = config.require_object("kafkaInstanceAccessPassword")
        test = huaweicloud.lts.RegisterKafkaInstance("test",
            instance_id=kafka_instance_id,
            kafka_name=kafka_instance_name,
            connect_info={
                "user_name": kafka_instance_access_user,
                "pwd": kafka_instance_access_password,
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['RegisterKafkaInstanceConnectInfoArgs', 'RegisterKafkaInstanceConnectInfoArgsDict']] connect_info: Specifies the connection information of the Kafka instance to be
               registered to the LTS.
               The connect_info structure is documented below.
               This parameter is available and required only when the registered Kafka instance is encrypted access.
               
               <a name="register_kafka_to_lts_connect_info"></a>
               The `connect_info` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the Kafka instance to be registered to the LTS.
        :param pulumi.Input[_builtins.str] kafka_name: Specifies the name of the Kafka instance to be registered to the LTS.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RegisterKafkaInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to register the Kafka instance to LTS within HuaweiCloud.

        > 1. Before registering a Kafka instance, please configure the inbound rules of the security group to which the Kafka
        >      instance belongs. Please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_04_0043.html).
        >      <br>2. The same Kafka instance can only be registered once.
        >      <br>3. This resource is only a one-time action resource for registering the Kafka instance to LTS. Deleting this resource
        >      will not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        kafka_instance_id = config.require_object("kafkaInstanceId")
        kafka_instance_name = config.require_object("kafkaInstanceName")
        kafka_instance_access_user = config.require_object("kafkaInstanceAccessUser")
        kafka_instance_access_password = config.require_object("kafkaInstanceAccessPassword")
        test = huaweicloud.lts.RegisterKafkaInstance("test",
            instance_id=kafka_instance_id,
            kafka_name=kafka_instance_name,
            connect_info={
                "user_name": kafka_instance_access_user,
                "pwd": kafka_instance_access_password,
            })
        ```

        :param str resource_name: The name of the resource.
        :param RegisterKafkaInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegisterKafkaInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connect_info: Optional[pulumi.Input[Union['RegisterKafkaInstanceConnectInfoArgs', 'RegisterKafkaInstanceConnectInfoArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kafka_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegisterKafkaInstanceArgs.__new__(RegisterKafkaInstanceArgs)

            __props__.__dict__["connect_info"] = connect_info
            __props__.__dict__["enable_force_new"] = enable_force_new
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if kafka_name is None and not opts.urn:
                raise TypeError("Missing required property 'kafka_name'")
            __props__.__dict__["kafka_name"] = kafka_name
            __props__.__dict__["region"] = region
        super(RegisterKafkaInstance, __self__).__init__(
            'huaweicloud:Lts/registerKafkaInstance:RegisterKafkaInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connect_info: Optional[pulumi.Input[Union['RegisterKafkaInstanceConnectInfoArgs', 'RegisterKafkaInstanceConnectInfoArgsDict']]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            kafka_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'RegisterKafkaInstance':
        """
        Get an existing RegisterKafkaInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['RegisterKafkaInstanceConnectInfoArgs', 'RegisterKafkaInstanceConnectInfoArgsDict']] connect_info: Specifies the connection information of the Kafka instance to be
               registered to the LTS.
               The connect_info structure is documented below.
               This parameter is available and required only when the registered Kafka instance is encrypted access.
               
               <a name="register_kafka_to_lts_connect_info"></a>
               The `connect_info` block supports:
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the Kafka instance to be registered to the LTS.
        :param pulumi.Input[_builtins.str] kafka_name: Specifies the name of the Kafka instance to be registered to the LTS.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegisterKafkaInstanceState.__new__(_RegisterKafkaInstanceState)

        __props__.__dict__["connect_info"] = connect_info
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["kafka_name"] = kafka_name
        __props__.__dict__["region"] = region
        return RegisterKafkaInstance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="connectInfo")
    def connect_info(self) -> pulumi.Output[Optional['outputs.RegisterKafkaInstanceConnectInfo']]:
        """
        Specifies the connection information of the Kafka instance to be
        registered to the LTS.
        The connect_info structure is documented below.
        This parameter is available and required only when the registered Kafka instance is encrypted access.

        <a name="register_kafka_to_lts_connect_info"></a>
        The `connect_info` block supports:
        """
        return pulumi.get(self, "connect_info")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the Kafka instance to be registered to the LTS.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="kafkaName")
    def kafka_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the Kafka instance to be registered to the LTS.
        """
        return pulumi.get(self, "kafka_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

