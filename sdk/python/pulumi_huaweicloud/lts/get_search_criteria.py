# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSearchCriteriaResult',
    'AwaitableGetSearchCriteriaResult',
    'get_search_criteria',
    'get_search_criteria_output',
]

@pulumi.output_type
class GetSearchCriteriaResult:
    """
    A collection of values returned by getSearchCriteria.
    """
    def __init__(__self__, id=None, log_group_id=None, region=None, search_criterias=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_group_id and not isinstance(log_group_id, str):
            raise TypeError("Expected argument 'log_group_id' to be a str")
        pulumi.set(__self__, "log_group_id", log_group_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if search_criterias and not isinstance(search_criterias, list):
            raise TypeError("Expected argument 'search_criterias' to be a list")
        pulumi.set(__self__, "search_criterias", search_criterias)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> _builtins.str:
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="searchCriterias")
    def search_criterias(self) -> Sequence['outputs.GetSearchCriteriaSearchCriteriaResult']:
        """
        All search criteria that match the filter parameters.
        """
        return pulumi.get(self, "search_criterias")


class AwaitableGetSearchCriteriaResult(GetSearchCriteriaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSearchCriteriaResult(
            id=self.id,
            log_group_id=self.log_group_id,
            region=self.region,
            search_criterias=self.search_criterias)


def get_search_criteria(log_group_id: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSearchCriteriaResult:
    """
    Use this data source to get the list of LTS search criteria.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    log_group_id = config.require_object("logGroupId")
    test = huaweicloud.Lts.get_search_criteria(log_group_id=log_group_id)
    ```


    :param _builtins.str log_group_id: Specifies the ID of the log group.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['logGroupId'] = log_group_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Lts/getSearchCriteria:getSearchCriteria', __args__, opts=opts, typ=GetSearchCriteriaResult).value

    return AwaitableGetSearchCriteriaResult(
        id=pulumi.get(__ret__, 'id'),
        log_group_id=pulumi.get(__ret__, 'log_group_id'),
        region=pulumi.get(__ret__, 'region'),
        search_criterias=pulumi.get(__ret__, 'search_criterias'))
def get_search_criteria_output(log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSearchCriteriaResult]:
    """
    Use this data source to get the list of LTS search criteria.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    log_group_id = config.require_object("logGroupId")
    test = huaweicloud.Lts.get_search_criteria(log_group_id=log_group_id)
    ```


    :param _builtins.str log_group_id: Specifies the ID of the log group.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['logGroupId'] = log_group_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Lts/getSearchCriteria:getSearchCriteria', __args__, opts=opts, typ=GetSearchCriteriaResult)
    return __ret__.apply(lambda __response__: GetSearchCriteriaResult(
        id=pulumi.get(__response__, 'id'),
        log_group_id=pulumi.get(__response__, 'log_group_id'),
        region=pulumi.get(__response__, 'region'),
        search_criterias=pulumi.get(__response__, 'search_criterias')))
