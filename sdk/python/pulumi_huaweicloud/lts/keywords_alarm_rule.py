# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KeywordsAlarmRuleArgs', 'KeywordsAlarmRule']

@pulumi.input_type
class KeywordsAlarmRuleArgs:
    def __init__(__self__, *,
                 alarm_level: pulumi.Input[_builtins.str],
                 frequency: pulumi.Input['KeywordsAlarmRuleFrequencyArgs'],
                 keywords_requests: pulumi.Input[Sequence[pulumi.Input['KeywordsAlarmRuleKeywordsRequestArgs']]],
                 alarm_action_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 notification_rule: Optional[pulumi.Input['KeywordsAlarmRuleNotificationRuleArgs']] = None,
                 notification_save_rule: Optional[pulumi.Input['KeywordsAlarmRuleNotificationSaveRuleArgs']] = None,
                 recovery_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 send_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_recovery_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_condition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 trigger_condition_frequency: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a KeywordsAlarmRule resource.
        :param pulumi.Input[_builtins.str] alarm_level: Specifies the alarm level.  
               The value can be: **INFO**, **MINOR**, **MAJOR** and **CRITICAL**.
        :param pulumi.Input['KeywordsAlarmRuleFrequencyArgs'] frequency: Specifies the alarm frequency configurations.
               The Frequency structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['KeywordsAlarmRuleKeywordsRequestArgs']]] keywords_requests: Specifies the keywords requests.
               The KeywordsRequests structure is documented below.
        :param pulumi.Input[_builtins.str] alarm_action_rule_name: Specifies the name of the alarm action rule associated with
               the keyword alarm rule.
               This parameter is available only when `send_notifications` parameter is set to **true**.
               
               > This parameter cannot be used together with `notification_save_rule` parameter.
        :param pulumi.Input[_builtins.str] alarm_rule_alias: Specifies the alias name of the keyword alarm rule.  
               The maximum lanegth is `128` characters, only Chinese characters, letters, digits, hyphens (-) and underscores (_)
               are allowed.
               The name cannot start with and end with a hyphen or a underscore.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the keywords alarm rule.
        :param pulumi.Input[_builtins.str] name: Specifies the topic name.
        :param pulumi.Input[_builtins.int] notification_frequency: Specifies the notification frequency of the keyword alarm rule,
               in minutes.
               Defaults to `0`, `0` means immediately notification.
               This parameter is available only when `send_notifications` parameter is set to **true**.
               The valid values are as follows:
               + **0**
               + **5**
               + **10**
               + **15**
               + **30**
               + **60**
               + **180**
               + **360**
        :param pulumi.Input['KeywordsAlarmRuleNotificationRuleArgs'] notification_rule: The notification rule of the keyword alarm rule.
        :param pulumi.Input['KeywordsAlarmRuleNotificationSaveRuleArgs'] notification_save_rule: Specifies the notification rule.
               The NotificationRule structure is documented below.
               This parameter is available only when `send_notifications` parameter is set to **true**.
        :param pulumi.Input[_builtins.int] recovery_frequency: Specifies the frequency to recover the alarm.
               Defaults to `3`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] send_notifications: Specifies whether to send notifications.  
               Defaults to **false**.
        :param pulumi.Input[_builtins.bool] send_recovery_notifications: Specifies whether to send recovery notifications.  
               Defaults to **false**
        :param pulumi.Input[_builtins.str] status: Specifies the status. The value can be: **RUNNING** and **STOPPING**.
               Defaults to **RUNNING**.
               
               <a name="KeywordsAlarmRule_KeywordsRequests"></a>
               The `KeywordsRequests` block supports:
        :param pulumi.Input[_builtins.int] trigger_condition_count: Specifies the count to trigger the alarm.
               Defaults to `1`.
        :param pulumi.Input[_builtins.int] trigger_condition_frequency: Specifies the frequency to trigger the alarm.
               Defaults to `1`.
        """
        pulumi.set(__self__, "alarm_level", alarm_level)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "keywords_requests", keywords_requests)
        if alarm_action_rule_name is not None:
            pulumi.set(__self__, "alarm_action_rule_name", alarm_action_rule_name)
        if alarm_rule_alias is not None:
            pulumi.set(__self__, "alarm_rule_alias", alarm_rule_alias)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_frequency is not None:
            pulumi.set(__self__, "notification_frequency", notification_frequency)
        if notification_rule is not None:
            pulumi.set(__self__, "notification_rule", notification_rule)
        if notification_save_rule is not None:
            pulumi.set(__self__, "notification_save_rule", notification_save_rule)
        if recovery_frequency is not None:
            pulumi.set(__self__, "recovery_frequency", recovery_frequency)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if send_notifications is not None:
            pulumi.set(__self__, "send_notifications", send_notifications)
        if send_recovery_notifications is not None:
            pulumi.set(__self__, "send_recovery_notifications", send_recovery_notifications)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trigger_condition_count is not None:
            pulumi.set(__self__, "trigger_condition_count", trigger_condition_count)
        if trigger_condition_frequency is not None:
            pulumi.set(__self__, "trigger_condition_frequency", trigger_condition_frequency)

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm level.  
        The value can be: **INFO**, **MINOR**, **MAJOR** and **CRITICAL**.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_level", value)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> pulumi.Input['KeywordsAlarmRuleFrequencyArgs']:
        """
        Specifies the alarm frequency configurations.
        The Frequency structure is documented below.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input['KeywordsAlarmRuleFrequencyArgs']):
        pulumi.set(self, "frequency", value)

    @_builtins.property
    @pulumi.getter(name="keywordsRequests")
    def keywords_requests(self) -> pulumi.Input[Sequence[pulumi.Input['KeywordsAlarmRuleKeywordsRequestArgs']]]:
        """
        Specifies the keywords requests.
        The KeywordsRequests structure is documented below.
        """
        return pulumi.get(self, "keywords_requests")

    @keywords_requests.setter
    def keywords_requests(self, value: pulumi.Input[Sequence[pulumi.Input['KeywordsAlarmRuleKeywordsRequestArgs']]]):
        pulumi.set(self, "keywords_requests", value)

    @_builtins.property
    @pulumi.getter(name="alarmActionRuleName")
    def alarm_action_rule_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the alarm action rule associated with
        the keyword alarm rule.
        This parameter is available only when `send_notifications` parameter is set to **true**.

        > This parameter cannot be used together with `notification_save_rule` parameter.
        """
        return pulumi.get(self, "alarm_action_rule_name")

    @alarm_action_rule_name.setter
    def alarm_action_rule_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_action_rule_name", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleAlias")
    def alarm_rule_alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alias name of the keyword alarm rule.  
        The maximum lanegth is `128` characters, only Chinese characters, letters, digits, hyphens (-) and underscores (_)
        are allowed.
        The name cannot start with and end with a hyphen or a underscore.
        """
        return pulumi.get(self, "alarm_rule_alias")

    @alarm_rule_alias.setter
    def alarm_rule_alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_rule_alias", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the keywords alarm rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationFrequency")
    def notification_frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the notification frequency of the keyword alarm rule,
        in minutes.
        Defaults to `0`, `0` means immediately notification.
        This parameter is available only when `send_notifications` parameter is set to **true**.
        The valid values are as follows:
        + **0**
        + **5**
        + **10**
        + **15**
        + **30**
        + **60**
        + **180**
        + **360**
        """
        return pulumi.get(self, "notification_frequency")

    @notification_frequency.setter
    def notification_frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "notification_frequency", value)

    @_builtins.property
    @pulumi.getter(name="notificationRule")
    def notification_rule(self) -> Optional[pulumi.Input['KeywordsAlarmRuleNotificationRuleArgs']]:
        """
        The notification rule of the keyword alarm rule.
        """
        return pulumi.get(self, "notification_rule")

    @notification_rule.setter
    def notification_rule(self, value: Optional[pulumi.Input['KeywordsAlarmRuleNotificationRuleArgs']]):
        pulumi.set(self, "notification_rule", value)

    @_builtins.property
    @pulumi.getter(name="notificationSaveRule")
    def notification_save_rule(self) -> Optional[pulumi.Input['KeywordsAlarmRuleNotificationSaveRuleArgs']]:
        """
        Specifies the notification rule.
        The NotificationRule structure is documented below.
        This parameter is available only when `send_notifications` parameter is set to **true**.
        """
        return pulumi.get(self, "notification_save_rule")

    @notification_save_rule.setter
    def notification_save_rule(self, value: Optional[pulumi.Input['KeywordsAlarmRuleNotificationSaveRuleArgs']]):
        pulumi.set(self, "notification_save_rule", value)

    @_builtins.property
    @pulumi.getter(name="recoveryFrequency")
    def recovery_frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the frequency to recover the alarm.
        Defaults to `3`.
        """
        return pulumi.get(self, "recovery_frequency")

    @recovery_frequency.setter
    def recovery_frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "recovery_frequency", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sendNotifications")
    def send_notifications(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to send notifications.  
        Defaults to **false**.
        """
        return pulumi.get(self, "send_notifications")

    @send_notifications.setter
    def send_notifications(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_notifications", value)

    @_builtins.property
    @pulumi.getter(name="sendRecoveryNotifications")
    def send_recovery_notifications(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to send recovery notifications.  
        Defaults to **false**
        """
        return pulumi.get(self, "send_recovery_notifications")

    @send_recovery_notifications.setter
    def send_recovery_notifications(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_recovery_notifications", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the status. The value can be: **RUNNING** and **STOPPING**.
        Defaults to **RUNNING**.

        <a name="KeywordsAlarmRule_KeywordsRequests"></a>
        The `KeywordsRequests` block supports:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="triggerConditionCount")
    def trigger_condition_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the count to trigger the alarm.
        Defaults to `1`.
        """
        return pulumi.get(self, "trigger_condition_count")

    @trigger_condition_count.setter
    def trigger_condition_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "trigger_condition_count", value)

    @_builtins.property
    @pulumi.getter(name="triggerConditionFrequency")
    def trigger_condition_frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the frequency to trigger the alarm.
        Defaults to `1`.
        """
        return pulumi.get(self, "trigger_condition_frequency")

    @trigger_condition_frequency.setter
    def trigger_condition_frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "trigger_condition_frequency", value)


@pulumi.input_type
class _KeywordsAlarmRuleState:
    def __init__(__self__, *,
                 alarm_action_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 condition_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 frequency: Optional[pulumi.Input['KeywordsAlarmRuleFrequencyArgs']] = None,
                 keywords_requests: Optional[pulumi.Input[Sequence[pulumi.Input['KeywordsAlarmRuleKeywordsRequestArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 notification_rule: Optional[pulumi.Input['KeywordsAlarmRuleNotificationRuleArgs']] = None,
                 notification_save_rule: Optional[pulumi.Input['KeywordsAlarmRuleNotificationSaveRuleArgs']] = None,
                 recovery_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 send_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_recovery_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_condition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 trigger_condition_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KeywordsAlarmRule resources.
        :param pulumi.Input[_builtins.str] alarm_action_rule_name: Specifies the name of the alarm action rule associated with
               the keyword alarm rule.
               This parameter is available only when `send_notifications` parameter is set to **true**.
               
               > This parameter cannot be used together with `notification_save_rule` parameter.
        :param pulumi.Input[_builtins.str] alarm_level: Specifies the alarm level.  
               The value can be: **INFO**, **MINOR**, **MAJOR** and **CRITICAL**.
        :param pulumi.Input[_builtins.str] alarm_rule_alias: Specifies the alias name of the keyword alarm rule.  
               The maximum lanegth is `128` characters, only Chinese characters, letters, digits, hyphens (-) and underscores (_)
               are allowed.
               The name cannot start with and end with a hyphen or a underscore.
        :param pulumi.Input[_builtins.str] condition_expression: The condition expression of the keyword alarm rule.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the alarm rule.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the keywords alarm rule.
        :param pulumi.Input[_builtins.str] domain_id: The domain ID.
        :param pulumi.Input['KeywordsAlarmRuleFrequencyArgs'] frequency: Specifies the alarm frequency configurations.
               The Frequency structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['KeywordsAlarmRuleKeywordsRequestArgs']]] keywords_requests: Specifies the keywords requests.
               The KeywordsRequests structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the topic name.
        :param pulumi.Input[_builtins.int] notification_frequency: Specifies the notification frequency of the keyword alarm rule,
               in minutes.
               Defaults to `0`, `0` means immediately notification.
               This parameter is available only when `send_notifications` parameter is set to **true**.
               The valid values are as follows:
               + **0**
               + **5**
               + **10**
               + **15**
               + **30**
               + **60**
               + **180**
               + **360**
        :param pulumi.Input['KeywordsAlarmRuleNotificationRuleArgs'] notification_rule: The notification rule of the keyword alarm rule.
        :param pulumi.Input['KeywordsAlarmRuleNotificationSaveRuleArgs'] notification_save_rule: Specifies the notification rule.
               The NotificationRule structure is documented below.
               This parameter is available only when `send_notifications` parameter is set to **true**.
        :param pulumi.Input[_builtins.int] recovery_frequency: Specifies the frequency to recover the alarm.
               Defaults to `3`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] send_notifications: Specifies whether to send notifications.  
               Defaults to **false**.
        :param pulumi.Input[_builtins.bool] send_recovery_notifications: Specifies whether to send recovery notifications.  
               Defaults to **false**
        :param pulumi.Input[_builtins.str] status: Specifies the status. The value can be: **RUNNING** and **STOPPING**.
               Defaults to **RUNNING**.
               
               <a name="KeywordsAlarmRule_KeywordsRequests"></a>
               The `KeywordsRequests` block supports:
        :param pulumi.Input[_builtins.int] trigger_condition_count: Specifies the count to trigger the alarm.
               Defaults to `1`.
        :param pulumi.Input[_builtins.int] trigger_condition_frequency: Specifies the frequency to trigger the alarm.
               Defaults to `1`.
        :param pulumi.Input[_builtins.str] updated_at: The last update time of the alarm rule.
        """
        if alarm_action_rule_name is not None:
            pulumi.set(__self__, "alarm_action_rule_name", alarm_action_rule_name)
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if alarm_rule_alias is not None:
            pulumi.set(__self__, "alarm_rule_alias", alarm_rule_alias)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if keywords_requests is not None:
            pulumi.set(__self__, "keywords_requests", keywords_requests)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_frequency is not None:
            pulumi.set(__self__, "notification_frequency", notification_frequency)
        if notification_rule is not None:
            pulumi.set(__self__, "notification_rule", notification_rule)
        if notification_save_rule is not None:
            pulumi.set(__self__, "notification_save_rule", notification_save_rule)
        if recovery_frequency is not None:
            pulumi.set(__self__, "recovery_frequency", recovery_frequency)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if send_notifications is not None:
            pulumi.set(__self__, "send_notifications", send_notifications)
        if send_recovery_notifications is not None:
            pulumi.set(__self__, "send_recovery_notifications", send_recovery_notifications)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trigger_condition_count is not None:
            pulumi.set(__self__, "trigger_condition_count", trigger_condition_count)
        if trigger_condition_frequency is not None:
            pulumi.set(__self__, "trigger_condition_frequency", trigger_condition_frequency)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="alarmActionRuleName")
    def alarm_action_rule_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the alarm action rule associated with
        the keyword alarm rule.
        This parameter is available only when `send_notifications` parameter is set to **true**.

        > This parameter cannot be used together with `notification_save_rule` parameter.
        """
        return pulumi.get(self, "alarm_action_rule_name")

    @alarm_action_rule_name.setter
    def alarm_action_rule_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_action_rule_name", value)

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm level.  
        The value can be: **INFO**, **MINOR**, **MAJOR** and **CRITICAL**.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_level", value)

    @_builtins.property
    @pulumi.getter(name="alarmRuleAlias")
    def alarm_rule_alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alias name of the keyword alarm rule.  
        The maximum lanegth is `128` characters, only Chinese characters, letters, digits, hyphens (-) and underscores (_)
        are allowed.
        The name cannot start with and end with a hyphen or a underscore.
        """
        return pulumi.get(self, "alarm_rule_alias")

    @alarm_rule_alias.setter
    def alarm_rule_alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_rule_alias", value)

    @_builtins.property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The condition expression of the keyword alarm rule.
        """
        return pulumi.get(self, "condition_expression")

    @condition_expression.setter
    def condition_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "condition_expression", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the alarm rule.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the keywords alarm rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input['KeywordsAlarmRuleFrequencyArgs']]:
        """
        Specifies the alarm frequency configurations.
        The Frequency structure is documented below.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input['KeywordsAlarmRuleFrequencyArgs']]):
        pulumi.set(self, "frequency", value)

    @_builtins.property
    @pulumi.getter(name="keywordsRequests")
    def keywords_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeywordsAlarmRuleKeywordsRequestArgs']]]]:
        """
        Specifies the keywords requests.
        The KeywordsRequests structure is documented below.
        """
        return pulumi.get(self, "keywords_requests")

    @keywords_requests.setter
    def keywords_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeywordsAlarmRuleKeywordsRequestArgs']]]]):
        pulumi.set(self, "keywords_requests", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationFrequency")
    def notification_frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the notification frequency of the keyword alarm rule,
        in minutes.
        Defaults to `0`, `0` means immediately notification.
        This parameter is available only when `send_notifications` parameter is set to **true**.
        The valid values are as follows:
        + **0**
        + **5**
        + **10**
        + **15**
        + **30**
        + **60**
        + **180**
        + **360**
        """
        return pulumi.get(self, "notification_frequency")

    @notification_frequency.setter
    def notification_frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "notification_frequency", value)

    @_builtins.property
    @pulumi.getter(name="notificationRule")
    def notification_rule(self) -> Optional[pulumi.Input['KeywordsAlarmRuleNotificationRuleArgs']]:
        """
        The notification rule of the keyword alarm rule.
        """
        return pulumi.get(self, "notification_rule")

    @notification_rule.setter
    def notification_rule(self, value: Optional[pulumi.Input['KeywordsAlarmRuleNotificationRuleArgs']]):
        pulumi.set(self, "notification_rule", value)

    @_builtins.property
    @pulumi.getter(name="notificationSaveRule")
    def notification_save_rule(self) -> Optional[pulumi.Input['KeywordsAlarmRuleNotificationSaveRuleArgs']]:
        """
        Specifies the notification rule.
        The NotificationRule structure is documented below.
        This parameter is available only when `send_notifications` parameter is set to **true**.
        """
        return pulumi.get(self, "notification_save_rule")

    @notification_save_rule.setter
    def notification_save_rule(self, value: Optional[pulumi.Input['KeywordsAlarmRuleNotificationSaveRuleArgs']]):
        pulumi.set(self, "notification_save_rule", value)

    @_builtins.property
    @pulumi.getter(name="recoveryFrequency")
    def recovery_frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the frequency to recover the alarm.
        Defaults to `3`.
        """
        return pulumi.get(self, "recovery_frequency")

    @recovery_frequency.setter
    def recovery_frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "recovery_frequency", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sendNotifications")
    def send_notifications(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to send notifications.  
        Defaults to **false**.
        """
        return pulumi.get(self, "send_notifications")

    @send_notifications.setter
    def send_notifications(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_notifications", value)

    @_builtins.property
    @pulumi.getter(name="sendRecoveryNotifications")
    def send_recovery_notifications(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to send recovery notifications.  
        Defaults to **false**
        """
        return pulumi.get(self, "send_recovery_notifications")

    @send_recovery_notifications.setter
    def send_recovery_notifications(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_recovery_notifications", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the status. The value can be: **RUNNING** and **STOPPING**.
        Defaults to **RUNNING**.

        <a name="KeywordsAlarmRule_KeywordsRequests"></a>
        The `KeywordsRequests` block supports:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="triggerConditionCount")
    def trigger_condition_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the count to trigger the alarm.
        Defaults to `1`.
        """
        return pulumi.get(self, "trigger_condition_count")

    @trigger_condition_count.setter
    def trigger_condition_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "trigger_condition_count", value)

    @_builtins.property
    @pulumi.getter(name="triggerConditionFrequency")
    def trigger_condition_frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the frequency to trigger the alarm.
        Defaults to `1`.
        """
        return pulumi.get(self, "trigger_condition_frequency")

    @trigger_condition_frequency.setter
    def trigger_condition_frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "trigger_condition_frequency", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The last update time of the alarm rule.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Lts/keywordsAlarmRule:KeywordsAlarmRule")
class KeywordsAlarmRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_action_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 frequency: Optional[pulumi.Input[Union['KeywordsAlarmRuleFrequencyArgs', 'KeywordsAlarmRuleFrequencyArgsDict']]] = None,
                 keywords_requests: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KeywordsAlarmRuleKeywordsRequestArgs', 'KeywordsAlarmRuleKeywordsRequestArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 notification_rule: Optional[pulumi.Input[Union['KeywordsAlarmRuleNotificationRuleArgs', 'KeywordsAlarmRuleNotificationRuleArgsDict']]] = None,
                 notification_save_rule: Optional[pulumi.Input[Union['KeywordsAlarmRuleNotificationSaveRuleArgs', 'KeywordsAlarmRuleNotificationSaveRuleArgsDict']]] = None,
                 recovery_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 send_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_recovery_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_condition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 trigger_condition_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages an LTS keywords alarm rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.KeywordsAlarmRule("test",
            name="terraform_test",
            description="created by terraform",
            alarm_level="CRITICAL",
            keywords_requests=[{
                "keywords": "terraform_test_keywords",
                "condition": ">",
                "number": 100,
                "log_group_id": log_group_id,
                "log_stream_id": log_stream_id,
                "search_time_range_unit": "minute",
                "search_time_range": 5,
            }],
            frequency={
                "type": "HOURLY",
            })
        ```

        ## Import

        The keywords alarm rule can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/keywordsAlarmRule:KeywordsAlarmRule test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `notification_save_rule.0.user_name`, `notification_save_rule.0.timezone,`.

        It is generally recommended running `pulumi preview` after importing a certificate.

        You can then decide if changes should be applied to the certificate, or the resource definition should be updated to

        align with the certificate. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_lts_keywords_alarm_rule" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              notification_save_rule.0.user_name, notification_save_rule.0.timezone,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alarm_action_rule_name: Specifies the name of the alarm action rule associated with
               the keyword alarm rule.
               This parameter is available only when `send_notifications` parameter is set to **true**.
               
               > This parameter cannot be used together with `notification_save_rule` parameter.
        :param pulumi.Input[_builtins.str] alarm_level: Specifies the alarm level.  
               The value can be: **INFO**, **MINOR**, **MAJOR** and **CRITICAL**.
        :param pulumi.Input[_builtins.str] alarm_rule_alias: Specifies the alias name of the keyword alarm rule.  
               The maximum lanegth is `128` characters, only Chinese characters, letters, digits, hyphens (-) and underscores (_)
               are allowed.
               The name cannot start with and end with a hyphen or a underscore.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the keywords alarm rule.
        :param pulumi.Input[Union['KeywordsAlarmRuleFrequencyArgs', 'KeywordsAlarmRuleFrequencyArgsDict']] frequency: Specifies the alarm frequency configurations.
               The Frequency structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KeywordsAlarmRuleKeywordsRequestArgs', 'KeywordsAlarmRuleKeywordsRequestArgsDict']]]] keywords_requests: Specifies the keywords requests.
               The KeywordsRequests structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the topic name.
        :param pulumi.Input[_builtins.int] notification_frequency: Specifies the notification frequency of the keyword alarm rule,
               in minutes.
               Defaults to `0`, `0` means immediately notification.
               This parameter is available only when `send_notifications` parameter is set to **true**.
               The valid values are as follows:
               + **0**
               + **5**
               + **10**
               + **15**
               + **30**
               + **60**
               + **180**
               + **360**
        :param pulumi.Input[Union['KeywordsAlarmRuleNotificationRuleArgs', 'KeywordsAlarmRuleNotificationRuleArgsDict']] notification_rule: The notification rule of the keyword alarm rule.
        :param pulumi.Input[Union['KeywordsAlarmRuleNotificationSaveRuleArgs', 'KeywordsAlarmRuleNotificationSaveRuleArgsDict']] notification_save_rule: Specifies the notification rule.
               The NotificationRule structure is documented below.
               This parameter is available only when `send_notifications` parameter is set to **true**.
        :param pulumi.Input[_builtins.int] recovery_frequency: Specifies the frequency to recover the alarm.
               Defaults to `3`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] send_notifications: Specifies whether to send notifications.  
               Defaults to **false**.
        :param pulumi.Input[_builtins.bool] send_recovery_notifications: Specifies whether to send recovery notifications.  
               Defaults to **false**
        :param pulumi.Input[_builtins.str] status: Specifies the status. The value can be: **RUNNING** and **STOPPING**.
               Defaults to **RUNNING**.
               
               <a name="KeywordsAlarmRule_KeywordsRequests"></a>
               The `KeywordsRequests` block supports:
        :param pulumi.Input[_builtins.int] trigger_condition_count: Specifies the count to trigger the alarm.
               Defaults to `1`.
        :param pulumi.Input[_builtins.int] trigger_condition_frequency: Specifies the frequency to trigger the alarm.
               Defaults to `1`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeywordsAlarmRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an LTS keywords alarm rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.KeywordsAlarmRule("test",
            name="terraform_test",
            description="created by terraform",
            alarm_level="CRITICAL",
            keywords_requests=[{
                "keywords": "terraform_test_keywords",
                "condition": ">",
                "number": 100,
                "log_group_id": log_group_id,
                "log_stream_id": log_stream_id,
                "search_time_range_unit": "minute",
                "search_time_range": 5,
            }],
            frequency={
                "type": "HOURLY",
            })
        ```

        ## Import

        The keywords alarm rule can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/keywordsAlarmRule:KeywordsAlarmRule test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `notification_save_rule.0.user_name`, `notification_save_rule.0.timezone,`.

        It is generally recommended running `pulumi preview` after importing a certificate.

        You can then decide if changes should be applied to the certificate, or the resource definition should be updated to

        align with the certificate. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_lts_keywords_alarm_rule" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              notification_save_rule.0.user_name, notification_save_rule.0.timezone,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param KeywordsAlarmRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeywordsAlarmRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_action_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_rule_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 frequency: Optional[pulumi.Input[Union['KeywordsAlarmRuleFrequencyArgs', 'KeywordsAlarmRuleFrequencyArgsDict']]] = None,
                 keywords_requests: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KeywordsAlarmRuleKeywordsRequestArgs', 'KeywordsAlarmRuleKeywordsRequestArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 notification_rule: Optional[pulumi.Input[Union['KeywordsAlarmRuleNotificationRuleArgs', 'KeywordsAlarmRuleNotificationRuleArgsDict']]] = None,
                 notification_save_rule: Optional[pulumi.Input[Union['KeywordsAlarmRuleNotificationSaveRuleArgs', 'KeywordsAlarmRuleNotificationSaveRuleArgsDict']]] = None,
                 recovery_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 send_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_recovery_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_condition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 trigger_condition_frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeywordsAlarmRuleArgs.__new__(KeywordsAlarmRuleArgs)

            __props__.__dict__["alarm_action_rule_name"] = alarm_action_rule_name
            if alarm_level is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_level'")
            __props__.__dict__["alarm_level"] = alarm_level
            __props__.__dict__["alarm_rule_alias"] = alarm_rule_alias
            __props__.__dict__["description"] = description
            if frequency is None and not opts.urn:
                raise TypeError("Missing required property 'frequency'")
            __props__.__dict__["frequency"] = frequency
            if keywords_requests is None and not opts.urn:
                raise TypeError("Missing required property 'keywords_requests'")
            __props__.__dict__["keywords_requests"] = keywords_requests
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_frequency"] = notification_frequency
            __props__.__dict__["notification_rule"] = notification_rule
            __props__.__dict__["notification_save_rule"] = notification_save_rule
            __props__.__dict__["recovery_frequency"] = recovery_frequency
            __props__.__dict__["region"] = region
            __props__.__dict__["send_notifications"] = send_notifications
            __props__.__dict__["send_recovery_notifications"] = send_recovery_notifications
            __props__.__dict__["status"] = status
            __props__.__dict__["trigger_condition_count"] = trigger_condition_count
            __props__.__dict__["trigger_condition_frequency"] = trigger_condition_frequency
            __props__.__dict__["condition_expression"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["domain_id"] = None
            __props__.__dict__["updated_at"] = None
        super(KeywordsAlarmRule, __self__).__init__(
            'huaweicloud:Lts/keywordsAlarmRule:KeywordsAlarmRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_action_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_rule_alias: Optional[pulumi.Input[_builtins.str]] = None,
            condition_expression: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            frequency: Optional[pulumi.Input[Union['KeywordsAlarmRuleFrequencyArgs', 'KeywordsAlarmRuleFrequencyArgsDict']]] = None,
            keywords_requests: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KeywordsAlarmRuleKeywordsRequestArgs', 'KeywordsAlarmRuleKeywordsRequestArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notification_frequency: Optional[pulumi.Input[_builtins.int]] = None,
            notification_rule: Optional[pulumi.Input[Union['KeywordsAlarmRuleNotificationRuleArgs', 'KeywordsAlarmRuleNotificationRuleArgsDict']]] = None,
            notification_save_rule: Optional[pulumi.Input[Union['KeywordsAlarmRuleNotificationSaveRuleArgs', 'KeywordsAlarmRuleNotificationSaveRuleArgsDict']]] = None,
            recovery_frequency: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            send_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
            send_recovery_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            trigger_condition_count: Optional[pulumi.Input[_builtins.int]] = None,
            trigger_condition_frequency: Optional[pulumi.Input[_builtins.int]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'KeywordsAlarmRule':
        """
        Get an existing KeywordsAlarmRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alarm_action_rule_name: Specifies the name of the alarm action rule associated with
               the keyword alarm rule.
               This parameter is available only when `send_notifications` parameter is set to **true**.
               
               > This parameter cannot be used together with `notification_save_rule` parameter.
        :param pulumi.Input[_builtins.str] alarm_level: Specifies the alarm level.  
               The value can be: **INFO**, **MINOR**, **MAJOR** and **CRITICAL**.
        :param pulumi.Input[_builtins.str] alarm_rule_alias: Specifies the alias name of the keyword alarm rule.  
               The maximum lanegth is `128` characters, only Chinese characters, letters, digits, hyphens (-) and underscores (_)
               are allowed.
               The name cannot start with and end with a hyphen or a underscore.
        :param pulumi.Input[_builtins.str] condition_expression: The condition expression of the keyword alarm rule.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the alarm rule.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the keywords alarm rule.
        :param pulumi.Input[_builtins.str] domain_id: The domain ID.
        :param pulumi.Input[Union['KeywordsAlarmRuleFrequencyArgs', 'KeywordsAlarmRuleFrequencyArgsDict']] frequency: Specifies the alarm frequency configurations.
               The Frequency structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KeywordsAlarmRuleKeywordsRequestArgs', 'KeywordsAlarmRuleKeywordsRequestArgsDict']]]] keywords_requests: Specifies the keywords requests.
               The KeywordsRequests structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the topic name.
        :param pulumi.Input[_builtins.int] notification_frequency: Specifies the notification frequency of the keyword alarm rule,
               in minutes.
               Defaults to `0`, `0` means immediately notification.
               This parameter is available only when `send_notifications` parameter is set to **true**.
               The valid values are as follows:
               + **0**
               + **5**
               + **10**
               + **15**
               + **30**
               + **60**
               + **180**
               + **360**
        :param pulumi.Input[Union['KeywordsAlarmRuleNotificationRuleArgs', 'KeywordsAlarmRuleNotificationRuleArgsDict']] notification_rule: The notification rule of the keyword alarm rule.
        :param pulumi.Input[Union['KeywordsAlarmRuleNotificationSaveRuleArgs', 'KeywordsAlarmRuleNotificationSaveRuleArgsDict']] notification_save_rule: Specifies the notification rule.
               The NotificationRule structure is documented below.
               This parameter is available only when `send_notifications` parameter is set to **true**.
        :param pulumi.Input[_builtins.int] recovery_frequency: Specifies the frequency to recover the alarm.
               Defaults to `3`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] send_notifications: Specifies whether to send notifications.  
               Defaults to **false**.
        :param pulumi.Input[_builtins.bool] send_recovery_notifications: Specifies whether to send recovery notifications.  
               Defaults to **false**
        :param pulumi.Input[_builtins.str] status: Specifies the status. The value can be: **RUNNING** and **STOPPING**.
               Defaults to **RUNNING**.
               
               <a name="KeywordsAlarmRule_KeywordsRequests"></a>
               The `KeywordsRequests` block supports:
        :param pulumi.Input[_builtins.int] trigger_condition_count: Specifies the count to trigger the alarm.
               Defaults to `1`.
        :param pulumi.Input[_builtins.int] trigger_condition_frequency: Specifies the frequency to trigger the alarm.
               Defaults to `1`.
        :param pulumi.Input[_builtins.str] updated_at: The last update time of the alarm rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeywordsAlarmRuleState.__new__(_KeywordsAlarmRuleState)

        __props__.__dict__["alarm_action_rule_name"] = alarm_action_rule_name
        __props__.__dict__["alarm_level"] = alarm_level
        __props__.__dict__["alarm_rule_alias"] = alarm_rule_alias
        __props__.__dict__["condition_expression"] = condition_expression
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["keywords_requests"] = keywords_requests
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_frequency"] = notification_frequency
        __props__.__dict__["notification_rule"] = notification_rule
        __props__.__dict__["notification_save_rule"] = notification_save_rule
        __props__.__dict__["recovery_frequency"] = recovery_frequency
        __props__.__dict__["region"] = region
        __props__.__dict__["send_notifications"] = send_notifications
        __props__.__dict__["send_recovery_notifications"] = send_recovery_notifications
        __props__.__dict__["status"] = status
        __props__.__dict__["trigger_condition_count"] = trigger_condition_count
        __props__.__dict__["trigger_condition_frequency"] = trigger_condition_frequency
        __props__.__dict__["updated_at"] = updated_at
        return KeywordsAlarmRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alarmActionRuleName")
    def alarm_action_rule_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the alarm action rule associated with
        the keyword alarm rule.
        This parameter is available only when `send_notifications` parameter is set to **true**.

        > This parameter cannot be used together with `notification_save_rule` parameter.
        """
        return pulumi.get(self, "alarm_action_rule_name")

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm level.  
        The value can be: **INFO**, **MINOR**, **MAJOR** and **CRITICAL**.
        """
        return pulumi.get(self, "alarm_level")

    @_builtins.property
    @pulumi.getter(name="alarmRuleAlias")
    def alarm_rule_alias(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alias name of the keyword alarm rule.  
        The maximum lanegth is `128` characters, only Chinese characters, letters, digits, hyphens (-) and underscores (_)
        are allowed.
        The name cannot start with and end with a hyphen or a underscore.
        """
        return pulumi.get(self, "alarm_rule_alias")

    @_builtins.property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> pulumi.Output[_builtins.str]:
        """
        The condition expression of the keyword alarm rule.
        """
        return pulumi.get(self, "condition_expression")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the alarm rule.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the keywords alarm rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> pulumi.Output['outputs.KeywordsAlarmRuleFrequency']:
        """
        Specifies the alarm frequency configurations.
        The Frequency structure is documented below.
        """
        return pulumi.get(self, "frequency")

    @_builtins.property
    @pulumi.getter(name="keywordsRequests")
    def keywords_requests(self) -> pulumi.Output[Sequence['outputs.KeywordsAlarmRuleKeywordsRequest']]:
        """
        Specifies the keywords requests.
        The KeywordsRequests structure is documented below.
        """
        return pulumi.get(self, "keywords_requests")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the topic name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationFrequency")
    def notification_frequency(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the notification frequency of the keyword alarm rule,
        in minutes.
        Defaults to `0`, `0` means immediately notification.
        This parameter is available only when `send_notifications` parameter is set to **true**.
        The valid values are as follows:
        + **0**
        + **5**
        + **10**
        + **15**
        + **30**
        + **60**
        + **180**
        + **360**
        """
        return pulumi.get(self, "notification_frequency")

    @_builtins.property
    @pulumi.getter(name="notificationRule")
    def notification_rule(self) -> pulumi.Output['outputs.KeywordsAlarmRuleNotificationRule']:
        """
        The notification rule of the keyword alarm rule.
        """
        return pulumi.get(self, "notification_rule")

    @_builtins.property
    @pulumi.getter(name="notificationSaveRule")
    def notification_save_rule(self) -> pulumi.Output[Optional['outputs.KeywordsAlarmRuleNotificationSaveRule']]:
        """
        Specifies the notification rule.
        The NotificationRule structure is documented below.
        This parameter is available only when `send_notifications` parameter is set to **true**.
        """
        return pulumi.get(self, "notification_save_rule")

    @_builtins.property
    @pulumi.getter(name="recoveryFrequency")
    def recovery_frequency(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the frequency to recover the alarm.
        Defaults to `3`.
        """
        return pulumi.get(self, "recovery_frequency")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sendNotifications")
    def send_notifications(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to send notifications.  
        Defaults to **false**.
        """
        return pulumi.get(self, "send_notifications")

    @_builtins.property
    @pulumi.getter(name="sendRecoveryNotifications")
    def send_recovery_notifications(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to send recovery notifications.  
        Defaults to **false**
        """
        return pulumi.get(self, "send_recovery_notifications")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the status. The value can be: **RUNNING** and **STOPPING**.
        Defaults to **RUNNING**.

        <a name="KeywordsAlarmRule_KeywordsRequests"></a>
        The `KeywordsRequests` block supports:
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerConditionCount")
    def trigger_condition_count(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the count to trigger the alarm.
        Defaults to `1`.
        """
        return pulumi.get(self, "trigger_condition_count")

    @_builtins.property
    @pulumi.getter(name="triggerConditionFrequency")
    def trigger_condition_frequency(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the frequency to trigger the alarm.
        Defaults to `1`.
        """
        return pulumi.get(self, "trigger_condition_frequency")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The last update time of the alarm rule.
        """
        return pulumi.get(self, "updated_at")

