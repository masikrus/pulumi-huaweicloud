# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CrossAccountAccessArgs', 'CrossAccountAccess']

@pulumi.input_type
class CrossAccountAccessArgs:
    def __init__(__self__, *,
                 agency_domain_name: pulumi.Input[_builtins.str],
                 agency_name: pulumi.Input[_builtins.str],
                 agency_project_id: pulumi.Input[_builtins.str],
                 log_agencygroup_id: pulumi.Input[_builtins.str],
                 log_agencygroup_name: pulumi.Input[_builtins.str],
                 log_agencystream_id: pulumi.Input[_builtins.str],
                 log_agencystream_name: pulumi.Input[_builtins.str],
                 log_group_id: pulumi.Input[_builtins.str],
                 log_group_name: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 log_stream_name: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a CrossAccountAccess resource.
        :param pulumi.Input[_builtins.str] agency_domain_name: Specifies the name of the delegator account to verify
               the delegation. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the name of the agency created in IAM by the delegator.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] agency_project_id: Specifies the delegator project ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencygroup_id: Specify the log group ID that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencygroup_name: Specify the log group name that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencystream_id: Specifies the log stream ID that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencystream_name: Specifies the log stream name that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specify the log group ID that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_group_name: Specify the log group name that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_stream_name: Specifies the log stream name that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the cross account access.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the cross account access.
        """
        pulumi.set(__self__, "agency_domain_name", agency_domain_name)
        pulumi.set(__self__, "agency_name", agency_name)
        pulumi.set(__self__, "agency_project_id", agency_project_id)
        pulumi.set(__self__, "log_agencygroup_id", log_agencygroup_id)
        pulumi.set(__self__, "log_agencygroup_name", log_agencygroup_name)
        pulumi.set(__self__, "log_agencystream_id", log_agencystream_id)
        pulumi.set(__self__, "log_agencystream_name", log_agencystream_name)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_group_name", log_group_name)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "log_stream_name", log_stream_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="agencyDomainName")
    def agency_domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the delegator account to verify
        the delegation. Changing this creates a new resource.
        """
        return pulumi.get(self, "agency_domain_name")

    @agency_domain_name.setter
    def agency_domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agency_domain_name", value)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the agency created in IAM by the delegator.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter(name="agencyProjectId")
    def agency_project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the delegator project ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "agency_project_id")

    @agency_project_id.setter
    def agency_project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agency_project_id", value)

    @_builtins.property
    @pulumi.getter(name="logAgencygroupId")
    def log_agencygroup_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specify the log group ID that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencygroup_id")

    @log_agencygroup_id.setter
    def log_agencygroup_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_agencygroup_id", value)

    @_builtins.property
    @pulumi.getter(name="logAgencygroupName")
    def log_agencygroup_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specify the log group name that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencygroup_name")

    @log_agencygroup_name.setter
    def log_agencygroup_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_agencygroup_name", value)

    @_builtins.property
    @pulumi.getter(name="logAgencystreamId")
    def log_agencystream_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log stream ID that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencystream_id")

    @log_agencystream_id.setter
    def log_agencystream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_agencystream_id", value)

    @_builtins.property
    @pulumi.getter(name="logAgencystreamName")
    def log_agencystream_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log stream name that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencystream_name")

    @log_agencystream_name.setter
    def log_agencystream_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_agencystream_name", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specify the log group ID that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specify the log group name that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_group_name")

    @log_group_name.setter
    def log_group_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_name", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log stream ID that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log stream name that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_stream_name")

    @log_stream_name.setter
    def log_stream_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cross account access.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the cross account access.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CrossAccountAccessState:
    def __init__(__self__, *,
                 access_config_type: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencygroup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencygroup_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencystream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencystream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering CrossAccountAccess resources.
        :param pulumi.Input[_builtins.str] access_config_type: The log access configuration type.
        :param pulumi.Input[_builtins.str] agency_domain_name: Specifies the name of the delegator account to verify
               the delegation. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the name of the agency created in IAM by the delegator.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] agency_project_id: Specifies the delegator project ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the cross account access, in RFC3339 format.
        :param pulumi.Input[_builtins.str] log_agencygroup_id: Specify the log group ID that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencygroup_name: Specify the log group name that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencystream_id: Specifies the log stream ID that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencystream_name: Specifies the log stream name that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specify the log group ID that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_group_name: Specify the log group name that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_stream_name: Specifies the log stream name that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the cross account access.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the cross account access.
        """
        if access_config_type is not None:
            pulumi.set(__self__, "access_config_type", access_config_type)
        if agency_domain_name is not None:
            pulumi.set(__self__, "agency_domain_name", agency_domain_name)
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if agency_project_id is not None:
            pulumi.set(__self__, "agency_project_id", agency_project_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if log_agencygroup_id is not None:
            pulumi.set(__self__, "log_agencygroup_id", log_agencygroup_id)
        if log_agencygroup_name is not None:
            pulumi.set(__self__, "log_agencygroup_name", log_agencygroup_name)
        if log_agencystream_id is not None:
            pulumi.set(__self__, "log_agencystream_id", log_agencystream_id)
        if log_agencystream_name is not None:
            pulumi.set(__self__, "log_agencystream_name", log_agencystream_name)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_group_name is not None:
            pulumi.set(__self__, "log_group_name", log_group_name)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if log_stream_name is not None:
            pulumi.set(__self__, "log_stream_name", log_stream_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accessConfigType")
    def access_config_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The log access configuration type.
        """
        return pulumi.get(self, "access_config_type")

    @access_config_type.setter
    def access_config_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_config_type", value)

    @_builtins.property
    @pulumi.getter(name="agencyDomainName")
    def agency_domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the delegator account to verify
        the delegation. Changing this creates a new resource.
        """
        return pulumi.get(self, "agency_domain_name")

    @agency_domain_name.setter
    def agency_domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_domain_name", value)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the agency created in IAM by the delegator.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter(name="agencyProjectId")
    def agency_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the delegator project ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "agency_project_id")

    @agency_project_id.setter
    def agency_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_project_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the cross account access, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="logAgencygroupId")
    def log_agencygroup_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the log group ID that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencygroup_id")

    @log_agencygroup_id.setter
    def log_agencygroup_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_agencygroup_id", value)

    @_builtins.property
    @pulumi.getter(name="logAgencygroupName")
    def log_agencygroup_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the log group name that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencygroup_name")

    @log_agencygroup_name.setter
    def log_agencygroup_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_agencygroup_name", value)

    @_builtins.property
    @pulumi.getter(name="logAgencystreamId")
    def log_agencystream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log stream ID that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencystream_id")

    @log_agencystream_id.setter
    def log_agencystream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_agencystream_id", value)

    @_builtins.property
    @pulumi.getter(name="logAgencystreamName")
    def log_agencystream_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log stream name that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencystream_name")

    @log_agencystream_name.setter
    def log_agencystream_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_agencystream_name", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the log group ID that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the log group name that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_group_name")

    @log_group_name.setter
    def log_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_name", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log stream ID that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log stream name that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_stream_name")

    @log_stream_name.setter
    def log_stream_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the cross account access.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the cross account access.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("huaweicloud:Lts/crossAccountAccess:CrossAccountAccess")
class CrossAccountAccess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencygroup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencygroup_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencystream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencystream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages an LTS cross account access resource within HuaweiCloud.

        > **NOTE:** Somethings you should know before using this resource.
        <br/> 1. Before creating this resource, you need to prepare an agency relationship.
        <br/> 2. Before data synchronization is complete, data in the target and source log streams may be different.
                 Check back later in one hour.
        <br/> 3. After you configure cross-account access, if account A deletes the agency from IAM, LTS cannot detect the
                 deletion and the cross-account ingestion still takes effect. If the cross-account access configuration is
                 no longer used, notify account B to delete it.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        agency_group_id = config.require_object("agencyGroupId")
        agency_stream_id = config.require_object("agencyStreamId")
        agency_group_name = config.require_object("agencyGroupName")
        agency_stream_name = config.require_object("agencyStreamName")
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        log_group_name = config.require_object("logGroupName")
        log_stream_name = config.require_object("logStreamName")
        agency_name = config.require_object("agencyName")
        agency_domain_name = config.require_object("agencyDomainName")
        agency_project_id = config.require_object("agencyProjectId")
        test = huaweicloud.lts.CrossAccountAccess("test",
            name=name,
            agency_project_id=agency_project_id,
            agency_domain_name=agency_domain_name,
            agency_name=agency_name,
            log_agencystream_name=agency_stream_name,
            log_agencystream_id=agency_stream_id,
            log_agencygroup_name=agency_group_name,
            log_agencygroup_id=agency_group_id,
            log_stream_name=log_stream_name,
            log_stream_id=log_stream_id,
            log_group_name=log_group_name,
            log_group_id=log_group_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency_domain_name: Specifies the name of the delegator account to verify
               the delegation. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the name of the agency created in IAM by the delegator.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] agency_project_id: Specifies the delegator project ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencygroup_id: Specify the log group ID that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencygroup_name: Specify the log group name that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencystream_id: Specifies the log stream ID that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencystream_name: Specifies the log stream name that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specify the log group ID that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_group_name: Specify the log group name that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_stream_name: Specifies the log stream name that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the cross account access.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the cross account access.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CrossAccountAccessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an LTS cross account access resource within HuaweiCloud.

        > **NOTE:** Somethings you should know before using this resource.
        <br/> 1. Before creating this resource, you need to prepare an agency relationship.
        <br/> 2. Before data synchronization is complete, data in the target and source log streams may be different.
                 Check back later in one hour.
        <br/> 3. After you configure cross-account access, if account A deletes the agency from IAM, LTS cannot detect the
                 deletion and the cross-account ingestion still takes effect. If the cross-account access configuration is
                 no longer used, notify account B to delete it.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        agency_group_id = config.require_object("agencyGroupId")
        agency_stream_id = config.require_object("agencyStreamId")
        agency_group_name = config.require_object("agencyGroupName")
        agency_stream_name = config.require_object("agencyStreamName")
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        log_group_name = config.require_object("logGroupName")
        log_stream_name = config.require_object("logStreamName")
        agency_name = config.require_object("agencyName")
        agency_domain_name = config.require_object("agencyDomainName")
        agency_project_id = config.require_object("agencyProjectId")
        test = huaweicloud.lts.CrossAccountAccess("test",
            name=name,
            agency_project_id=agency_project_id,
            agency_domain_name=agency_domain_name,
            agency_name=agency_name,
            log_agencystream_name=agency_stream_name,
            log_agencystream_id=agency_stream_id,
            log_agencygroup_name=agency_group_name,
            log_agencygroup_id=agency_group_id,
            log_stream_name=log_stream_name,
            log_stream_id=log_stream_id,
            log_group_name=log_group_name,
            log_group_id=log_group_id)
        ```

        :param str resource_name: The name of the resource.
        :param CrossAccountAccessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CrossAccountAccessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencygroup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencygroup_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencystream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_agencystream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CrossAccountAccessArgs.__new__(CrossAccountAccessArgs)

            if agency_domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'agency_domain_name'")
            __props__.__dict__["agency_domain_name"] = agency_domain_name
            if agency_name is None and not opts.urn:
                raise TypeError("Missing required property 'agency_name'")
            __props__.__dict__["agency_name"] = agency_name
            if agency_project_id is None and not opts.urn:
                raise TypeError("Missing required property 'agency_project_id'")
            __props__.__dict__["agency_project_id"] = agency_project_id
            if log_agencygroup_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_agencygroup_id'")
            __props__.__dict__["log_agencygroup_id"] = log_agencygroup_id
            if log_agencygroup_name is None and not opts.urn:
                raise TypeError("Missing required property 'log_agencygroup_name'")
            __props__.__dict__["log_agencygroup_name"] = log_agencygroup_name
            if log_agencystream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_agencystream_id'")
            __props__.__dict__["log_agencystream_id"] = log_agencystream_id
            if log_agencystream_name is None and not opts.urn:
                raise TypeError("Missing required property 'log_agencystream_name'")
            __props__.__dict__["log_agencystream_name"] = log_agencystream_name
            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_name'")
            __props__.__dict__["log_group_name"] = log_group_name
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            if log_stream_name is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_name'")
            __props__.__dict__["log_stream_name"] = log_stream_name
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            __props__.__dict__["access_config_type"] = None
            __props__.__dict__["created_at"] = None
        super(CrossAccountAccess, __self__).__init__(
            'huaweicloud:Lts/crossAccountAccess:CrossAccountAccess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_config_type: Optional[pulumi.Input[_builtins.str]] = None,
            agency_domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            agency_name: Optional[pulumi.Input[_builtins.str]] = None,
            agency_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            log_agencygroup_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_agencygroup_name: Optional[pulumi.Input[_builtins.str]] = None,
            log_agencystream_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_agencystream_name: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_name: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'CrossAccountAccess':
        """
        Get an existing CrossAccountAccess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_config_type: The log access configuration type.
        :param pulumi.Input[_builtins.str] agency_domain_name: Specifies the name of the delegator account to verify
               the delegation. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the name of the agency created in IAM by the delegator.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] agency_project_id: Specifies the delegator project ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the cross account access, in RFC3339 format.
        :param pulumi.Input[_builtins.str] log_agencygroup_id: Specify the log group ID that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencygroup_name: Specify the log group name that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencystream_id: Specifies the log stream ID that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_agencystream_name: Specifies the log stream name that already exists in the
               delegated account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specify the log group ID that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_group_name: Specify the log group name that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] log_stream_name: Specifies the log stream name that already exists in the
               delegatee account. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the cross account access.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the cross account access.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CrossAccountAccessState.__new__(_CrossAccountAccessState)

        __props__.__dict__["access_config_type"] = access_config_type
        __props__.__dict__["agency_domain_name"] = agency_domain_name
        __props__.__dict__["agency_name"] = agency_name
        __props__.__dict__["agency_project_id"] = agency_project_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["log_agencygroup_id"] = log_agencygroup_id
        __props__.__dict__["log_agencygroup_name"] = log_agencygroup_name
        __props__.__dict__["log_agencystream_id"] = log_agencystream_id
        __props__.__dict__["log_agencystream_name"] = log_agencystream_name
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_group_name"] = log_group_name
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["log_stream_name"] = log_stream_name
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["tags"] = tags
        return CrossAccountAccess(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessConfigType")
    def access_config_type(self) -> pulumi.Output[_builtins.str]:
        """
        The log access configuration type.
        """
        return pulumi.get(self, "access_config_type")

    @_builtins.property
    @pulumi.getter(name="agencyDomainName")
    def agency_domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the delegator account to verify
        the delegation. Changing this creates a new resource.
        """
        return pulumi.get(self, "agency_domain_name")

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the agency created in IAM by the delegator.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "agency_name")

    @_builtins.property
    @pulumi.getter(name="agencyProjectId")
    def agency_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the delegator project ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "agency_project_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the cross account access, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="logAgencygroupId")
    def log_agencygroup_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specify the log group ID that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencygroup_id")

    @_builtins.property
    @pulumi.getter(name="logAgencygroupName")
    def log_agencygroup_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specify the log group name that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencygroup_name")

    @_builtins.property
    @pulumi.getter(name="logAgencystreamId")
    def log_agencystream_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log stream ID that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencystream_id")

    @_builtins.property
    @pulumi.getter(name="logAgencystreamName")
    def log_agencystream_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log stream name that already exists in the
        delegated account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_agencystream_name")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specify the log group ID that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specify the log group name that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_group_name")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log stream ID that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log stream name that already exists in the
        delegatee account. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_stream_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the cross account access.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the cross account access.
        """
        return pulumi.get(self, "tags")

