# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StructTemplateArgs', 'StructTemplate']

@pulumi.input_type
class StructTemplateArgs:
    def __init__(__self__, *,
                 log_group_id: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 template_type: pulumi.Input[_builtins.str],
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateDemoFieldArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateTagFieldArgs']]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tokenizer: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a StructTemplate resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of a log group. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of a log stream. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template. The value can be
               **built_in** (system templates) or **custom** (custom templates).
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the log structuring template resource.
               If omitted, the provider-level region will be used. Changing this creates a new log stream resource.
        :param pulumi.Input[_builtins.str] template_name: Specifies the system template name. The value can be **ELB**, **VPC**, **CTS**,
               **APIG**, **DDS_AUDIT**, **CDN**, and **SMN**. This parameter is mandatory when using system templates.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "template_type", template_type)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if demo_fields is not None:
            pulumi.set(__self__, "demo_fields", demo_fields)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tag_fields is not None:
            pulumi.set(__self__, "tag_fields", tag_fields)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if tokenizer is not None:
            pulumi.set(__self__, "tokenizer", tokenizer)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a log group. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a log stream. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the template. The value can be
        **built_in** (system templates) or **custom** (custom templates).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_type", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateDemoFieldArgs']]]]:
        return pulumi.get(self, "demo_fields")

    @demo_fields.setter
    def demo_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateDemoFieldArgs']]]]):
        pulumi.set(self, "demo_fields", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the log structuring template resource.
        If omitted, the provider-level region will be used. Changing this creates a new log stream resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateTagFieldArgs']]]]:
        return pulumi.get(self, "tag_fields")

    @tag_fields.setter
    def tag_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateTagFieldArgs']]]]):
        pulumi.set(self, "tag_fields", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the system template name. The value can be **ELB**, **VPC**, **CTS**,
        **APIG**, **DDS_AUDIT**, **CDN**, and **SMN**. This parameter is mandatory when using system templates.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_name", value)

    @_builtins.property
    @pulumi.getter
    def tokenizer(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tokenizer")

    @tokenizer.setter
    def tokenizer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tokenizer", value)


@pulumi.input_type
class _StructTemplateState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateDemoFieldArgs']]]] = None,
                 demo_log: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateTagFieldArgs']]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tokenizer: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering StructTemplate resources.
        :param pulumi.Input[_builtins.str] demo_log: The sample log event.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of a log group. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of a log stream. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the log structuring template resource.
               If omitted, the provider-level region will be used. Changing this creates a new log stream resource.
        :param pulumi.Input[_builtins.str] template_name: Specifies the system template name. The value can be **ELB**, **VPC**, **CTS**,
               **APIG**, **DDS_AUDIT**, **CDN**, and **SMN**. This parameter is mandatory when using system templates.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template. The value can be
               **built_in** (system templates) or **custom** (custom templates).
               Changing this parameter will create a new resource.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if demo_fields is not None:
            pulumi.set(__self__, "demo_fields", demo_fields)
        if demo_log is not None:
            pulumi.set(__self__, "demo_log", demo_log)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tag_fields is not None:
            pulumi.set(__self__, "tag_fields", tag_fields)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if template_type is not None:
            pulumi.set(__self__, "template_type", template_type)
        if tokenizer is not None:
            pulumi.set(__self__, "tokenizer", tokenizer)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateDemoFieldArgs']]]]:
        return pulumi.get(self, "demo_fields")

    @demo_fields.setter
    def demo_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateDemoFieldArgs']]]]):
        pulumi.set(self, "demo_fields", value)

    @_builtins.property
    @pulumi.getter(name="demoLog")
    def demo_log(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The sample log event.
        """
        return pulumi.get(self, "demo_log")

    @demo_log.setter
    def demo_log(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "demo_log", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a log group. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a log stream. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the log structuring template resource.
        If omitted, the provider-level region will be used. Changing this creates a new log stream resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateTagFieldArgs']]]]:
        return pulumi.get(self, "tag_fields")

    @tag_fields.setter
    def tag_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructTemplateTagFieldArgs']]]]):
        pulumi.set(self, "tag_fields", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the system template name. The value can be **ELB**, **VPC**, **CTS**,
        **APIG**, **DDS_AUDIT**, **CDN**, and **SMN**. This parameter is mandatory when using system templates.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_name", value)

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the template. The value can be
        **built_in** (system templates) or **custom** (custom templates).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_type", value)

    @_builtins.property
    @pulumi.getter
    def tokenizer(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tokenizer")

    @tokenizer.setter
    def tokenizer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tokenizer", value)


@pulumi.type_token("huaweicloud:Lts/structTemplate:StructTemplate")
class StructTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructTemplateDemoFieldArgs', 'StructTemplateDemoFieldArgsDict']]]]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructTemplateTagFieldArgs', 'StructTemplateTagFieldArgsDict']]]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tokenizer: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage a log structuring template resource within HuaweiCloud.

        !> **WARNING:** It has been deprecated, use `Lts.StructuringConfiguration` instead.

        ## Example Usage

        ### create with system template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        group_id = config.require_object("groupId")
        stream_id = config.require_object("streamId")
        test = huaweicloud.lts.StructTemplate("test",
            log_group_id=group_id,
            log_stream_id=stream_id,
            template_type="built_in",
            template_name="ELB")
        ```

        ### create with custom template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        group_id = config.require_object("groupId")
        stream_id = config.require_object("streamId")
        test = huaweicloud.lts.StructTemplate("test",
            log_group_id=group_id,
            log_stream_id=stream_id,
            template_type="custom")
        ```

        ## Import

        The structuring templates can be imported using the template ID, lts group ID and stream ID separated by the slashes,

        e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/structTemplate:StructTemplate test <id>/<log_group_id>/<log_stream_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of a log group. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of a log stream. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the log structuring template resource.
               If omitted, the provider-level region will be used. Changing this creates a new log stream resource.
        :param pulumi.Input[_builtins.str] template_name: Specifies the system template name. The value can be **ELB**, **VPC**, **CTS**,
               **APIG**, **DDS_AUDIT**, **CDN**, and **SMN**. This parameter is mandatory when using system templates.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template. The value can be
               **built_in** (system templates) or **custom** (custom templates).
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StructTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a log structuring template resource within HuaweiCloud.

        !> **WARNING:** It has been deprecated, use `Lts.StructuringConfiguration` instead.

        ## Example Usage

        ### create with system template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        group_id = config.require_object("groupId")
        stream_id = config.require_object("streamId")
        test = huaweicloud.lts.StructTemplate("test",
            log_group_id=group_id,
            log_stream_id=stream_id,
            template_type="built_in",
            template_name="ELB")
        ```

        ### create with custom template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        group_id = config.require_object("groupId")
        stream_id = config.require_object("streamId")
        test = huaweicloud.lts.StructTemplate("test",
            log_group_id=group_id,
            log_stream_id=stream_id,
            template_type="custom")
        ```

        ## Import

        The structuring templates can be imported using the template ID, lts group ID and stream ID separated by the slashes,

        e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/structTemplate:StructTemplate test <id>/<log_group_id>/<log_stream_id>
        ```

        :param str resource_name: The name of the resource.
        :param StructTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StructTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructTemplateDemoFieldArgs', 'StructTemplateDemoFieldArgsDict']]]]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructTemplateTagFieldArgs', 'StructTemplateTagFieldArgsDict']]]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tokenizer: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StructTemplateArgs.__new__(StructTemplateArgs)

            __props__.__dict__["content"] = content
            __props__.__dict__["demo_fields"] = demo_fields
            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            __props__.__dict__["region"] = region
            __props__.__dict__["tag_fields"] = tag_fields
            __props__.__dict__["template_id"] = template_id
            __props__.__dict__["template_name"] = template_name
            if template_type is None and not opts.urn:
                raise TypeError("Missing required property 'template_type'")
            __props__.__dict__["template_type"] = template_type
            __props__.__dict__["tokenizer"] = tokenizer
            __props__.__dict__["demo_log"] = None
        super(StructTemplate, __self__).__init__(
            'huaweicloud:Lts/structTemplate:StructTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[_builtins.str]] = None,
            demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructTemplateDemoFieldArgs', 'StructTemplateDemoFieldArgsDict']]]]] = None,
            demo_log: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructTemplateTagFieldArgs', 'StructTemplateTagFieldArgsDict']]]]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None,
            template_name: Optional[pulumi.Input[_builtins.str]] = None,
            template_type: Optional[pulumi.Input[_builtins.str]] = None,
            tokenizer: Optional[pulumi.Input[_builtins.str]] = None) -> 'StructTemplate':
        """
        Get an existing StructTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] demo_log: The sample log event.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of a log group. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of a log stream. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the log structuring template resource.
               If omitted, the provider-level region will be used. Changing this creates a new log stream resource.
        :param pulumi.Input[_builtins.str] template_name: Specifies the system template name. The value can be **ELB**, **VPC**, **CTS**,
               **APIG**, **DDS_AUDIT**, **CDN**, and **SMN**. This parameter is mandatory when using system templates.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template. The value can be
               **built_in** (system templates) or **custom** (custom templates).
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StructTemplateState.__new__(_StructTemplateState)

        __props__.__dict__["content"] = content
        __props__.__dict__["demo_fields"] = demo_fields
        __props__.__dict__["demo_log"] = demo_log
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["region"] = region
        __props__.__dict__["tag_fields"] = tag_fields
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["template_type"] = template_type
        __props__.__dict__["tokenizer"] = tokenizer
        return StructTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> pulumi.Output[Optional[Sequence['outputs.StructTemplateDemoField']]]:
        return pulumi.get(self, "demo_fields")

    @_builtins.property
    @pulumi.getter(name="demoLog")
    def demo_log(self) -> pulumi.Output[_builtins.str]:
        """
        The sample log event.
        """
        return pulumi.get(self, "demo_log")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a log group. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a log stream. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the log structuring template resource.
        If omitted, the provider-level region will be used. Changing this creates a new log stream resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> pulumi.Output[Optional[Sequence['outputs.StructTemplateTagField']]]:
        return pulumi.get(self, "tag_fields")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the system template name. The value can be **ELB**, **VPC**, **CTS**,
        **APIG**, **DDS_AUDIT**, **CDN**, and **SMN**. This parameter is mandatory when using system templates.
        """
        return pulumi.get(self, "template_name")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the template. The value can be
        **built_in** (system templates) or **custom** (custom templates).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter
    def tokenizer(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "tokenizer")

