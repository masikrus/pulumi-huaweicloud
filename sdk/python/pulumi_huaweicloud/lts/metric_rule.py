# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MetricRuleArgs', 'MetricRule']

@pulumi.input_type
class MetricRuleArgs:
    def __init__(__self__, *,
                 aggregator: pulumi.Input['MetricRuleAggregatorArgs'],
                 log_group_id: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 sampler: pulumi.Input['MetricRuleSamplerArgs'],
                 sinks: pulumi.Input[Sequence[pulumi.Input['MetricRuleSinkArgs']]],
                 status: pulumi.Input[_builtins.str],
                 window_size: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 filter: Optional[pulumi.Input['MetricRuleFilterArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 report: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a MetricRule resource.
        :param pulumi.Input['MetricRuleAggregatorArgs'] aggregator: Specifies the configuration of log statistics mode.
               The aggregator structure is documented below.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID to which the log metric rule belongs.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID to which the log metric rule belongs.
        :param pulumi.Input['MetricRuleSamplerArgs'] sampler: Specifies the sampling configuration of the log.
               The sampler structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['MetricRuleSinkArgs']]] sinks: Specifies the storage location of the generated metrics.
               The sinks structure is documented below.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the log metric rule.  
               The valid values are as follows:
               + **enable**
               + **disable**
        :param pulumi.Input[_builtins.str] window_size: Specifies the interval time for processing data windows.  
               The valid values are as follows:
               + **PT5S**: Indicates `5` seconds.
               + **PT1M**: Indicates `1` minute.
               + **PT5M**: Indicates `5` minute.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the log metric rule.
               
               <a name="metric_rule_sampler"></a>
               The `sampler` block supports:
        :param pulumi.Input['MetricRuleFilterArgs'] filter: Specifies the configuration of log filtering rule.
               The filter structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the AOM Prometheus common instance.  
               This parameter is required and available only when the `sinks.type` parameter is set to **aom**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] report: Specifies whether to report data to sinks, defaults to **false**.
        """
        pulumi.set(__self__, "aggregator", aggregator)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "sampler", sampler)
        pulumi.set(__self__, "sinks", sinks)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "window_size", window_size)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if report is not None:
            pulumi.set(__self__, "report", report)

    @_builtins.property
    @pulumi.getter
    def aggregator(self) -> pulumi.Input['MetricRuleAggregatorArgs']:
        """
        Specifies the configuration of log statistics mode.
        The aggregator structure is documented below.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: pulumi.Input['MetricRuleAggregatorArgs']):
        pulumi.set(self, "aggregator", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log group ID to which the log metric rule belongs.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log stream ID to which the log metric rule belongs.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter
    def sampler(self) -> pulumi.Input['MetricRuleSamplerArgs']:
        """
        Specifies the sampling configuration of the log.
        The sampler structure is documented below.
        """
        return pulumi.get(self, "sampler")

    @sampler.setter
    def sampler(self, value: pulumi.Input['MetricRuleSamplerArgs']):
        pulumi.set(self, "sampler", value)

    @_builtins.property
    @pulumi.getter
    def sinks(self) -> pulumi.Input[Sequence[pulumi.Input['MetricRuleSinkArgs']]]:
        """
        Specifies the storage location of the generated metrics.
        The sinks structure is documented below.
        """
        return pulumi.get(self, "sinks")

    @sinks.setter
    def sinks(self, value: pulumi.Input[Sequence[pulumi.Input['MetricRuleSinkArgs']]]):
        pulumi.set(self, "sinks", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the status of the log metric rule.  
        The valid values are as follows:
        + **enable**
        + **disable**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the interval time for processing data windows.  
        The valid values are as follows:
        + **PT5S**: Indicates `5` seconds.
        + **PT1M**: Indicates `1` minute.
        + **PT5M**: Indicates `5` minute.
        """
        return pulumi.get(self, "window_size")

    @window_size.setter
    def window_size(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "window_size", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the log metric rule.

        <a name="metric_rule_sampler"></a>
        The `sampler` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['MetricRuleFilterArgs']]:
        """
        Specifies the configuration of log filtering rule.
        The filter structure is documented below.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['MetricRuleFilterArgs']]):
        pulumi.set(self, "filter", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the AOM Prometheus common instance.  
        This parameter is required and available only when the `sinks.type` parameter is set to **aom**.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def report(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to report data to sinks, defaults to **false**.
        """
        return pulumi.get(self, "report")

    @report.setter
    def report(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "report", value)


@pulumi.input_type
class _MetricRuleState:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input['MetricRuleAggregatorArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 filter: Optional[pulumi.Input['MetricRuleFilterArgs']] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 report: Optional[pulumi.Input[_builtins.bool]] = None,
                 sampler: Optional[pulumi.Input['MetricRuleSamplerArgs']] = None,
                 sinks: Optional[pulumi.Input[Sequence[pulumi.Input['MetricRuleSinkArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 window_size: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MetricRule resources.
        :param pulumi.Input['MetricRuleAggregatorArgs'] aggregator: Specifies the configuration of log statistics mode.
               The aggregator structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the log metric rule, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the log metric rule.
               
               <a name="metric_rule_sampler"></a>
               The `sampler` block supports:
        :param pulumi.Input['MetricRuleFilterArgs'] filter: Specifies the configuration of log filtering rule.
               The filter structure is documented below.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID to which the log metric rule belongs.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID to which the log metric rule belongs.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the AOM Prometheus common instance.  
               This parameter is required and available only when the `sinks.type` parameter is set to **aom**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] report: Specifies whether to report data to sinks, defaults to **false**.
        :param pulumi.Input['MetricRuleSamplerArgs'] sampler: Specifies the sampling configuration of the log.
               The sampler structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['MetricRuleSinkArgs']]] sinks: Specifies the storage location of the generated metrics.
               The sinks structure is documented below.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the log metric rule.  
               The valid values are as follows:
               + **enable**
               + **disable**
        :param pulumi.Input[_builtins.str] window_size: Specifies the interval time for processing data windows.  
               The valid values are as follows:
               + **PT5S**: Indicates `5` seconds.
               + **PT1M**: Indicates `1` minute.
               + **PT5M**: Indicates `5` minute.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if report is not None:
            pulumi.set(__self__, "report", report)
        if sampler is not None:
            pulumi.set(__self__, "sampler", sampler)
        if sinks is not None:
            pulumi.set(__self__, "sinks", sinks)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @_builtins.property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input['MetricRuleAggregatorArgs']]:
        """
        Specifies the configuration of log statistics mode.
        The aggregator structure is documented below.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input['MetricRuleAggregatorArgs']]):
        pulumi.set(self, "aggregator", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the log metric rule, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the log metric rule.

        <a name="metric_rule_sampler"></a>
        The `sampler` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['MetricRuleFilterArgs']]:
        """
        Specifies the configuration of log filtering rule.
        The filter structure is documented below.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['MetricRuleFilterArgs']]):
        pulumi.set(self, "filter", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log group ID to which the log metric rule belongs.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log stream ID to which the log metric rule belongs.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the AOM Prometheus common instance.  
        This parameter is required and available only when the `sinks.type` parameter is set to **aom**.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def report(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to report data to sinks, defaults to **false**.
        """
        return pulumi.get(self, "report")

    @report.setter
    def report(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "report", value)

    @_builtins.property
    @pulumi.getter
    def sampler(self) -> Optional[pulumi.Input['MetricRuleSamplerArgs']]:
        """
        Specifies the sampling configuration of the log.
        The sampler structure is documented below.
        """
        return pulumi.get(self, "sampler")

    @sampler.setter
    def sampler(self, value: Optional[pulumi.Input['MetricRuleSamplerArgs']]):
        pulumi.set(self, "sampler", value)

    @_builtins.property
    @pulumi.getter
    def sinks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricRuleSinkArgs']]]]:
        """
        Specifies the storage location of the generated metrics.
        The sinks structure is documented below.
        """
        return pulumi.get(self, "sinks")

    @sinks.setter
    def sinks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricRuleSinkArgs']]]]):
        pulumi.set(self, "sinks", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the status of the log metric rule.  
        The valid values are as follows:
        + **enable**
        + **disable**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the interval time for processing data windows.  
        The valid values are as follows:
        + **PT5S**: Indicates `5` seconds.
        + **PT1M**: Indicates `1` minute.
        + **PT5M**: Indicates `5` minute.
        """
        return pulumi.get(self, "window_size")

    @window_size.setter
    def window_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "window_size", value)


@pulumi.type_token("huaweicloud:Lts/metricRule:MetricRule")
class MetricRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregator: Optional[pulumi.Input[Union['MetricRuleAggregatorArgs', 'MetricRuleAggregatorArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 filter: Optional[pulumi.Input[Union['MetricRuleFilterArgs', 'MetricRuleFilterArgsDict']]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 report: Optional[pulumi.Input[_builtins.bool]] = None,
                 sampler: Optional[pulumi.Input[Union['MetricRuleSamplerArgs', 'MetricRuleSamplerArgsDict']]] = None,
                 sinks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricRuleSinkArgs', 'MetricRuleSinkArgsDict']]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 window_size: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an LTS log metric rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        metric_rule_name = config.require_object("metricRuleName")
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        sinks_metric_name = config.require_object("sinksMetricName")
        prometheus_instance_name = config.require_object("prometheusInstanceName")
        prometheus_instance_id = config.require_object("prometheusInstanceId")
        aggregator_field = config.require_object("aggregatorField")
        log_filters = config.require_object("logFilters")
        test = huaweicloud.lts.MetricRule("test",
            name=metric_rule_name,
            status="enable",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            sampler={
                "type": "random",
                "ratio": "0.5",
            },
            sinks=[{
                "type": "aom",
                "metric_name": sinks_metric_name,
                "name": prometheus_instance_name,
                "instance_id": prometheus_instance_id,
            }],
            aggregator={
                "type": "count",
                "field": aggregator_field,
            },
            window_size="PT1M",
            filter={
                "filters": [{
                    "filters": [{
                        "type": entry["value"]["type"],
                        "key": entry["value"]["key"],
                        "value": entry["value"]["value"],
                    } for entry in [{"key": k, "value": v} for k, v in entry["value"]["filters"]]],
                    "type": entry["value"]["type"],
                } for entry in [{"key": k, "value": v} for k, v in log_filters]],
                "type": "and",
            })
        ```

        ## Import

        The log metric rule resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/metricRule:MetricRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['MetricRuleAggregatorArgs', 'MetricRuleAggregatorArgsDict']] aggregator: Specifies the configuration of log statistics mode.
               The aggregator structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the log metric rule.
               
               <a name="metric_rule_sampler"></a>
               The `sampler` block supports:
        :param pulumi.Input[Union['MetricRuleFilterArgs', 'MetricRuleFilterArgsDict']] filter: Specifies the configuration of log filtering rule.
               The filter structure is documented below.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID to which the log metric rule belongs.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID to which the log metric rule belongs.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the AOM Prometheus common instance.  
               This parameter is required and available only when the `sinks.type` parameter is set to **aom**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] report: Specifies whether to report data to sinks, defaults to **false**.
        :param pulumi.Input[Union['MetricRuleSamplerArgs', 'MetricRuleSamplerArgsDict']] sampler: Specifies the sampling configuration of the log.
               The sampler structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricRuleSinkArgs', 'MetricRuleSinkArgsDict']]]] sinks: Specifies the storage location of the generated metrics.
               The sinks structure is documented below.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the log metric rule.  
               The valid values are as follows:
               + **enable**
               + **disable**
        :param pulumi.Input[_builtins.str] window_size: Specifies the interval time for processing data windows.  
               The valid values are as follows:
               + **PT5S**: Indicates `5` seconds.
               + **PT1M**: Indicates `1` minute.
               + **PT5M**: Indicates `5` minute.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetricRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an LTS log metric rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        metric_rule_name = config.require_object("metricRuleName")
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        sinks_metric_name = config.require_object("sinksMetricName")
        prometheus_instance_name = config.require_object("prometheusInstanceName")
        prometheus_instance_id = config.require_object("prometheusInstanceId")
        aggregator_field = config.require_object("aggregatorField")
        log_filters = config.require_object("logFilters")
        test = huaweicloud.lts.MetricRule("test",
            name=metric_rule_name,
            status="enable",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            sampler={
                "type": "random",
                "ratio": "0.5",
            },
            sinks=[{
                "type": "aom",
                "metric_name": sinks_metric_name,
                "name": prometheus_instance_name,
                "instance_id": prometheus_instance_id,
            }],
            aggregator={
                "type": "count",
                "field": aggregator_field,
            },
            window_size="PT1M",
            filter={
                "filters": [{
                    "filters": [{
                        "type": entry["value"]["type"],
                        "key": entry["value"]["key"],
                        "value": entry["value"]["value"],
                    } for entry in [{"key": k, "value": v} for k, v in entry["value"]["filters"]]],
                    "type": entry["value"]["type"],
                } for entry in [{"key": k, "value": v} for k, v in log_filters]],
                "type": "and",
            })
        ```

        ## Import

        The log metric rule resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/metricRule:MetricRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param MetricRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetricRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregator: Optional[pulumi.Input[Union['MetricRuleAggregatorArgs', 'MetricRuleAggregatorArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 filter: Optional[pulumi.Input[Union['MetricRuleFilterArgs', 'MetricRuleFilterArgsDict']]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 report: Optional[pulumi.Input[_builtins.bool]] = None,
                 sampler: Optional[pulumi.Input[Union['MetricRuleSamplerArgs', 'MetricRuleSamplerArgsDict']]] = None,
                 sinks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricRuleSinkArgs', 'MetricRuleSinkArgsDict']]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 window_size: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetricRuleArgs.__new__(MetricRuleArgs)

            if aggregator is None and not opts.urn:
                raise TypeError("Missing required property 'aggregator'")
            __props__.__dict__["aggregator"] = aggregator
            __props__.__dict__["description"] = description
            __props__.__dict__["filter"] = filter
            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["report"] = report
            if sampler is None and not opts.urn:
                raise TypeError("Missing required property 'sampler'")
            __props__.__dict__["sampler"] = sampler
            if sinks is None and not opts.urn:
                raise TypeError("Missing required property 'sinks'")
            __props__.__dict__["sinks"] = sinks
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if window_size is None and not opts.urn:
                raise TypeError("Missing required property 'window_size'")
            __props__.__dict__["window_size"] = window_size
            __props__.__dict__["created_at"] = None
        super(MetricRule, __self__).__init__(
            'huaweicloud:Lts/metricRule:MetricRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aggregator: Optional[pulumi.Input[Union['MetricRuleAggregatorArgs', 'MetricRuleAggregatorArgsDict']]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            filter: Optional[pulumi.Input[Union['MetricRuleFilterArgs', 'MetricRuleFilterArgsDict']]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            report: Optional[pulumi.Input[_builtins.bool]] = None,
            sampler: Optional[pulumi.Input[Union['MetricRuleSamplerArgs', 'MetricRuleSamplerArgsDict']]] = None,
            sinks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricRuleSinkArgs', 'MetricRuleSinkArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            window_size: Optional[pulumi.Input[_builtins.str]] = None) -> 'MetricRule':
        """
        Get an existing MetricRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['MetricRuleAggregatorArgs', 'MetricRuleAggregatorArgsDict']] aggregator: Specifies the configuration of log statistics mode.
               The aggregator structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the log metric rule, in RFC3339 format.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the log metric rule.
               
               <a name="metric_rule_sampler"></a>
               The `sampler` block supports:
        :param pulumi.Input[Union['MetricRuleFilterArgs', 'MetricRuleFilterArgsDict']] filter: Specifies the configuration of log filtering rule.
               The filter structure is documented below.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID to which the log metric rule belongs.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID to which the log metric rule belongs.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the AOM Prometheus common instance.  
               This parameter is required and available only when the `sinks.type` parameter is set to **aom**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] report: Specifies whether to report data to sinks, defaults to **false**.
        :param pulumi.Input[Union['MetricRuleSamplerArgs', 'MetricRuleSamplerArgsDict']] sampler: Specifies the sampling configuration of the log.
               The sampler structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricRuleSinkArgs', 'MetricRuleSinkArgsDict']]]] sinks: Specifies the storage location of the generated metrics.
               The sinks structure is documented below.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the log metric rule.  
               The valid values are as follows:
               + **enable**
               + **disable**
        :param pulumi.Input[_builtins.str] window_size: Specifies the interval time for processing data windows.  
               The valid values are as follows:
               + **PT5S**: Indicates `5` seconds.
               + **PT1M**: Indicates `1` minute.
               + **PT5M**: Indicates `5` minute.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetricRuleState.__new__(_MetricRuleState)

        __props__.__dict__["aggregator"] = aggregator
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["filter"] = filter
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["report"] = report
        __props__.__dict__["sampler"] = sampler
        __props__.__dict__["sinks"] = sinks
        __props__.__dict__["status"] = status
        __props__.__dict__["window_size"] = window_size
        return MetricRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def aggregator(self) -> pulumi.Output['outputs.MetricRuleAggregator']:
        """
        Specifies the configuration of log statistics mode.
        The aggregator structure is documented below.
        """
        return pulumi.get(self, "aggregator")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the log metric rule, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the log metric rule.

        <a name="metric_rule_sampler"></a>
        The `sampler` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional['outputs.MetricRuleFilter']]:
        """
        Specifies the configuration of log filtering rule.
        The filter structure is documented below.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log group ID to which the log metric rule belongs.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log stream ID to which the log metric rule belongs.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the AOM Prometheus common instance.  
        This parameter is required and available only when the `sinks.type` parameter is set to **aom**.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def report(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to report data to sinks, defaults to **false**.
        """
        return pulumi.get(self, "report")

    @_builtins.property
    @pulumi.getter
    def sampler(self) -> pulumi.Output['outputs.MetricRuleSampler']:
        """
        Specifies the sampling configuration of the log.
        The sampler structure is documented below.
        """
        return pulumi.get(self, "sampler")

    @_builtins.property
    @pulumi.getter
    def sinks(self) -> pulumi.Output[Sequence['outputs.MetricRuleSink']]:
        """
        Specifies the storage location of the generated metrics.
        The sinks structure is documented below.
        """
        return pulumi.get(self, "sinks")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the status of the log metric rule.  
        The valid values are as follows:
        + **enable**
        + **disable**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the interval time for processing data windows.  
        The valid values are as follows:
        + **PT5S**: Indicates `5` seconds.
        + **PT1M**: Indicates `1` minute.
        + **PT5M**: Indicates `5` minute.
        """
        return pulumi.get(self, "window_size")

