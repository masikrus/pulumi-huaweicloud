# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TransferArgs', 'Transfer']

@pulumi.input_type
class TransferArgs:
    def __init__(__self__, *,
                 log_group_id: pulumi.Input[_builtins.str],
                 log_streams: pulumi.Input[Sequence[pulumi.Input['TransferLogStreamArgs']]],
                 log_transfer_info: pulumi.Input['TransferLogTransferInfoArgs'],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Transfer resource.
        :param pulumi.Input[_builtins.str] log_group_id: Log group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['TransferLogStreamArgs']]] log_streams: The list of log streams.
               
               Changing this parameter will create a new resource.
               The log_streams structure is documented below.
        :param pulumi.Input['TransferLogTransferInfoArgs'] log_transfer_info: Log transfer information.
               The log_transfer_info structure is documented below.
               
               <a name="LtsTransfer_LogStreams"></a>
               The `log_streams` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_streams", log_streams)
        pulumi.set(__self__, "log_transfer_info", log_transfer_info)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Log group ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreams")
    def log_streams(self) -> pulumi.Input[Sequence[pulumi.Input['TransferLogStreamArgs']]]:
        """
        The list of log streams.

        Changing this parameter will create a new resource.
        The log_streams structure is documented below.
        """
        return pulumi.get(self, "log_streams")

    @log_streams.setter
    def log_streams(self, value: pulumi.Input[Sequence[pulumi.Input['TransferLogStreamArgs']]]):
        pulumi.set(self, "log_streams", value)

    @_builtins.property
    @pulumi.getter(name="logTransferInfo")
    def log_transfer_info(self) -> pulumi.Input['TransferLogTransferInfoArgs']:
        """
        Log transfer information.
        The log_transfer_info structure is documented below.

        <a name="LtsTransfer_LogStreams"></a>
        The `log_streams` block supports:
        """
        return pulumi.get(self, "log_transfer_info")

    @log_transfer_info.setter
    def log_transfer_info(self, value: pulumi.Input['TransferLogTransferInfoArgs']):
        pulumi.set(self, "log_transfer_info", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _TransferState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_streams: Optional[pulumi.Input[Sequence[pulumi.Input['TransferLogStreamArgs']]]] = None,
                 log_transfer_info: Optional[pulumi.Input['TransferLogTransferInfoArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Transfer resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the log transfer, in RFC3339 format.
        :param pulumi.Input[_builtins.str] log_group_id: Log group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_group_name: Log group name.
        :param pulumi.Input[Sequence[pulumi.Input['TransferLogStreamArgs']]] log_streams: The list of log streams.
               
               Changing this parameter will create a new resource.
               The log_streams structure is documented below.
        :param pulumi.Input['TransferLogTransferInfoArgs'] log_transfer_info: Log transfer information.
               The log_transfer_info structure is documented below.
               
               <a name="LtsTransfer_LogStreams"></a>
               The `log_streams` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_group_name is not None:
            pulumi.set(__self__, "log_group_name", log_group_name)
        if log_streams is not None:
            pulumi.set(__self__, "log_streams", log_streams)
        if log_transfer_info is not None:
            pulumi.set(__self__, "log_transfer_info", log_transfer_info)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the log transfer, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Log group ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Log group name.
        """
        return pulumi.get(self, "log_group_name")

    @log_group_name.setter
    def log_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_name", value)

    @_builtins.property
    @pulumi.getter(name="logStreams")
    def log_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransferLogStreamArgs']]]]:
        """
        The list of log streams.

        Changing this parameter will create a new resource.
        The log_streams structure is documented below.
        """
        return pulumi.get(self, "log_streams")

    @log_streams.setter
    def log_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransferLogStreamArgs']]]]):
        pulumi.set(self, "log_streams", value)

    @_builtins.property
    @pulumi.getter(name="logTransferInfo")
    def log_transfer_info(self) -> Optional[pulumi.Input['TransferLogTransferInfoArgs']]:
        """
        Log transfer information.
        The log_transfer_info structure is documented below.

        <a name="LtsTransfer_LogStreams"></a>
        The `log_streams` block supports:
        """
        return pulumi.get(self, "log_transfer_info")

    @log_transfer_info.setter
    def log_transfer_info(self, value: Optional[pulumi.Input['TransferLogTransferInfoArgs']]):
        pulumi.set(self, "log_transfer_info", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Lts/transfer:Transfer")
class Transfer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_streams: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransferLogStreamArgs', 'TransferLogStreamArgsDict']]]]] = None,
                 log_transfer_info: Optional[pulumi.Input[Union['TransferLogTransferInfoArgs', 'TransferLogTransferInfoArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an LTS transfer task resource within HuaweiCloud.

        ## Example Usage

        ### Create an OBS transfer task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        obs_buket = config.require_object("obsBuket")
        test = huaweicloud.lts.Transfer("test",
            log_group_id=lts_group_id,
            log_streams=[{
                "log_stream_id": lts_stream_id,
            }],
            log_transfer_info={
                "log_transfer_type": "OBS",
                "log_transfer_mode": "cycle",
                "log_storage_format": "RAW",
                "log_transfer_status": "ENABLE",
                "log_transfer_detail": {
                    "obs_period": 3,
                    "obs_period_unit": "hour",
                    "obs_bucket_name": obs_buket,
                    "obs_dir_prefix_name": "dir_prefix_",
                    "obs_prefix_name": "prefix_",
                    "obs_time_zone": "UTC",
                    "obs_time_zone_id": "Etc/GMT",
                },
            })
        ```

        ### Create a DIS transfer task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        dis_stream_id = config.require_object("disStreamId")
        dis_stream_name = config.require_object("disStreamName")
        test = huaweicloud.lts.Transfer("test",
            log_group_id=lts_group_id,
            log_streams=[{
                "log_stream_id": lts_stream_id,
            }],
            log_transfer_info={
                "log_transfer_type": "DIS",
                "log_transfer_mode": "realTime",
                "log_storage_format": "RAW",
                "log_transfer_status": "ENABLE",
                "log_transfer_detail": {
                    "dis_id": dis_stream_id,
                    "dis_name": dis_stream_name,
                },
            })
        ```

        ### Create a DMS transfer task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        kafaka_instance_id = config.require_object("kafakaInstanceId")
        kafaka_topic = config.require_object("kafakaTopic")
        test = huaweicloud.lts.Transfer("test",
            log_group_id=lts_group_id,
            log_streams=[{
                "log_stream_id": lts_stream_id,
            }],
            log_transfer_info={
                "log_transfer_type": "DMS",
                "log_transfer_mode": "realTime",
                "log_storage_format": "RAW",
                "log_transfer_status": "ENABLE",
                "log_transfer_detail": {
                    "kafka_id": kafaka_instance_id,
                    "kafka_topic": kafaka_topic,
                },
            })
        ```

        ### Create a delegated OBS transfer task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        obs_buket = config.require_object("obsBuket")
        agency_domain_id = config.require_object("agencyDomainId")
        agency_domain_name = config.require_object("agencyDomainName")
        agency_name = config.require_object("agencyName")
        agency_project_id = config.require_object("agencyProjectId")
        obs_agency = huaweicloud.lts.Transfer("obs_agency",
            log_group_id=lts_group_id,
            log_streams=[{
                "log_stream_id": lts_stream_id,
            }],
            log_transfer_info={
                "log_transfer_type": "OBS",
                "log_transfer_mode": "cycle",
                "log_storage_format": "RAW",
                "log_transfer_status": "ENABLE",
                "log_transfer_detail": {
                    "obs_period": 3,
                    "obs_period_unit": "hour",
                    "obs_bucket_name": obs_buket,
                    "obs_dir_prefix_name": "dir_prefix_",
                    "obs_prefix_name": "prefix_",
                    "obs_time_zone": "UTC",
                    "obs_time_zone_id": "Etc/GMT",
                },
                "log_agency_transfer": {
                    "agency_domain_id": agency_domain_id,
                    "agency_domain_name": agency_domain_name,
                    "agency_name": agency_name,
                    "agency_project_id": agency_project_id,
                },
            })
        ```

        ### Create a DMS transfer in JSON format

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        registered_kafka_instance_id = config.require_object("registeredKafkaInstanceId")
        kafka_topic = config.require_object("kafkaTopic")
        test = huaweicloud.lts.Transfer("test",
            log_group_id=lts_group_id,
            log_streams=[{
                "log_stream_id": lts_stream_id,
            }],
            log_transfer_info={
                "log_transfer_type": "DMS",
                "log_transfer_mode": "realTime",
                "log_storage_format": "JSON",
                "log_transfer_status": "ENABLE",
                "log_transfer_detail": {
                    "kafka_id": registered_kafka_instance_id,
                    "kafka_topic": kafka_topic,
                    "lts_tags": [
                        "hostName",
                        "collectTime",
                    ],
                    "stream_tags": ["all"],
                    "struct_fields": ["all"],
                },
            })
        ```

        ## Import

        The LTS transfer task can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/transfer:Transfer test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response.

        The missing attributes include: `log_transfer_info.0.log_transfer_detail.0.invalid_field_value`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_lts_transfer" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              log_transfer_info.0.log_transfer_detail.0.invalid_field_value
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] log_group_id: Log group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransferLogStreamArgs', 'TransferLogStreamArgsDict']]]] log_streams: The list of log streams.
               
               Changing this parameter will create a new resource.
               The log_streams structure is documented below.
        :param pulumi.Input[Union['TransferLogTransferInfoArgs', 'TransferLogTransferInfoArgsDict']] log_transfer_info: Log transfer information.
               The log_transfer_info structure is documented below.
               
               <a name="LtsTransfer_LogStreams"></a>
               The `log_streams` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TransferArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an LTS transfer task resource within HuaweiCloud.

        ## Example Usage

        ### Create an OBS transfer task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        obs_buket = config.require_object("obsBuket")
        test = huaweicloud.lts.Transfer("test",
            log_group_id=lts_group_id,
            log_streams=[{
                "log_stream_id": lts_stream_id,
            }],
            log_transfer_info={
                "log_transfer_type": "OBS",
                "log_transfer_mode": "cycle",
                "log_storage_format": "RAW",
                "log_transfer_status": "ENABLE",
                "log_transfer_detail": {
                    "obs_period": 3,
                    "obs_period_unit": "hour",
                    "obs_bucket_name": obs_buket,
                    "obs_dir_prefix_name": "dir_prefix_",
                    "obs_prefix_name": "prefix_",
                    "obs_time_zone": "UTC",
                    "obs_time_zone_id": "Etc/GMT",
                },
            })
        ```

        ### Create a DIS transfer task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        dis_stream_id = config.require_object("disStreamId")
        dis_stream_name = config.require_object("disStreamName")
        test = huaweicloud.lts.Transfer("test",
            log_group_id=lts_group_id,
            log_streams=[{
                "log_stream_id": lts_stream_id,
            }],
            log_transfer_info={
                "log_transfer_type": "DIS",
                "log_transfer_mode": "realTime",
                "log_storage_format": "RAW",
                "log_transfer_status": "ENABLE",
                "log_transfer_detail": {
                    "dis_id": dis_stream_id,
                    "dis_name": dis_stream_name,
                },
            })
        ```

        ### Create a DMS transfer task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        kafaka_instance_id = config.require_object("kafakaInstanceId")
        kafaka_topic = config.require_object("kafakaTopic")
        test = huaweicloud.lts.Transfer("test",
            log_group_id=lts_group_id,
            log_streams=[{
                "log_stream_id": lts_stream_id,
            }],
            log_transfer_info={
                "log_transfer_type": "DMS",
                "log_transfer_mode": "realTime",
                "log_storage_format": "RAW",
                "log_transfer_status": "ENABLE",
                "log_transfer_detail": {
                    "kafka_id": kafaka_instance_id,
                    "kafka_topic": kafaka_topic,
                },
            })
        ```

        ### Create a delegated OBS transfer task

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        obs_buket = config.require_object("obsBuket")
        agency_domain_id = config.require_object("agencyDomainId")
        agency_domain_name = config.require_object("agencyDomainName")
        agency_name = config.require_object("agencyName")
        agency_project_id = config.require_object("agencyProjectId")
        obs_agency = huaweicloud.lts.Transfer("obs_agency",
            log_group_id=lts_group_id,
            log_streams=[{
                "log_stream_id": lts_stream_id,
            }],
            log_transfer_info={
                "log_transfer_type": "OBS",
                "log_transfer_mode": "cycle",
                "log_storage_format": "RAW",
                "log_transfer_status": "ENABLE",
                "log_transfer_detail": {
                    "obs_period": 3,
                    "obs_period_unit": "hour",
                    "obs_bucket_name": obs_buket,
                    "obs_dir_prefix_name": "dir_prefix_",
                    "obs_prefix_name": "prefix_",
                    "obs_time_zone": "UTC",
                    "obs_time_zone_id": "Etc/GMT",
                },
                "log_agency_transfer": {
                    "agency_domain_id": agency_domain_id,
                    "agency_domain_name": agency_domain_name,
                    "agency_name": agency_name,
                    "agency_project_id": agency_project_id,
                },
            })
        ```

        ### Create a DMS transfer in JSON format

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        registered_kafka_instance_id = config.require_object("registeredKafkaInstanceId")
        kafka_topic = config.require_object("kafkaTopic")
        test = huaweicloud.lts.Transfer("test",
            log_group_id=lts_group_id,
            log_streams=[{
                "log_stream_id": lts_stream_id,
            }],
            log_transfer_info={
                "log_transfer_type": "DMS",
                "log_transfer_mode": "realTime",
                "log_storage_format": "JSON",
                "log_transfer_status": "ENABLE",
                "log_transfer_detail": {
                    "kafka_id": registered_kafka_instance_id,
                    "kafka_topic": kafka_topic,
                    "lts_tags": [
                        "hostName",
                        "collectTime",
                    ],
                    "stream_tags": ["all"],
                    "struct_fields": ["all"],
                },
            })
        ```

        ## Import

        The LTS transfer task can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/transfer:Transfer test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response.

        The missing attributes include: `log_transfer_info.0.log_transfer_detail.0.invalid_field_value`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_lts_transfer" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              log_transfer_info.0.log_transfer_detail.0.invalid_field_value
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param TransferArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransferArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_streams: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransferLogStreamArgs', 'TransferLogStreamArgsDict']]]]] = None,
                 log_transfer_info: Optional[pulumi.Input[Union['TransferLogTransferInfoArgs', 'TransferLogTransferInfoArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransferArgs.__new__(TransferArgs)

            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_streams is None and not opts.urn:
                raise TypeError("Missing required property 'log_streams'")
            __props__.__dict__["log_streams"] = log_streams
            if log_transfer_info is None and not opts.urn:
                raise TypeError("Missing required property 'log_transfer_info'")
            __props__.__dict__["log_transfer_info"] = log_transfer_info
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["log_group_name"] = None
        super(Transfer, __self__).__init__(
            'huaweicloud:Lts/transfer:Transfer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            log_streams: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransferLogStreamArgs', 'TransferLogStreamArgsDict']]]]] = None,
            log_transfer_info: Optional[pulumi.Input[Union['TransferLogTransferInfoArgs', 'TransferLogTransferInfoArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'Transfer':
        """
        Get an existing Transfer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the log transfer, in RFC3339 format.
        :param pulumi.Input[_builtins.str] log_group_id: Log group ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_group_name: Log group name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransferLogStreamArgs', 'TransferLogStreamArgsDict']]]] log_streams: The list of log streams.
               
               Changing this parameter will create a new resource.
               The log_streams structure is documented below.
        :param pulumi.Input[Union['TransferLogTransferInfoArgs', 'TransferLogTransferInfoArgsDict']] log_transfer_info: Log transfer information.
               The log_transfer_info structure is documented below.
               
               <a name="LtsTransfer_LogStreams"></a>
               The `log_streams` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TransferState.__new__(_TransferState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_group_name"] = log_group_name
        __props__.__dict__["log_streams"] = log_streams
        __props__.__dict__["log_transfer_info"] = log_transfer_info
        __props__.__dict__["region"] = region
        return Transfer(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the log transfer, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Log group ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        Log group name.
        """
        return pulumi.get(self, "log_group_name")

    @_builtins.property
    @pulumi.getter(name="logStreams")
    def log_streams(self) -> pulumi.Output[Sequence['outputs.TransferLogStream']]:
        """
        The list of log streams.

        Changing this parameter will create a new resource.
        The log_streams structure is documented below.
        """
        return pulumi.get(self, "log_streams")

    @_builtins.property
    @pulumi.getter(name="logTransferInfo")
    def log_transfer_info(self) -> pulumi.Output['outputs.TransferLogTransferInfo']:
        """
        Log transfer information.
        The log_transfer_info structure is documented below.

        <a name="LtsTransfer_LogStreams"></a>
        The `log_streams` block supports:
        """
        return pulumi.get(self, "log_transfer_info")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

