# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StructingTemplateArgs', 'StructingTemplate']

@pulumi.input_type
class StructingTemplateArgs:
    def __init__(__self__, *,
                 log_group_id: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 template_name: pulumi.Input[_builtins.str],
                 template_type: pulumi.Input[_builtins.str],
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateDemoFieldArgs']]]] = None,
                 quick_analysis: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateTagFieldArgs']]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a StructingTemplate resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_name: Specifies the template name. When `template_type` is set to **built_in**,
               valid values are:
               + **ELB**
               + **VPC**
               + **CTS**
               + **APIG**
               + **DCS_AUDIT**: DCS audit log.
               + **TOMCAT**
               + **NGINX**
               + **GAUSSDB_OPENGAUSS_AUDIT**: GAUSSV5 audit log.
               + **DDS_AUDIT**: DDS audit log.
               + **MONGODB_ERROR**: DDS error log.
               + **MONGODB_SLOW**: DDS slow log.
               + **CFW_ACCESS**: CFW access control log.
               + **CFW_ATTACK**: CFW attack log.
               + **CFW_FLOW**: CFW traffic log.
               + **MYSQL_ERROR**: MYSQL error log.
               + **MYSQL_SLOW**: MYSQL slow log:
               + **POSTGRESQL_SLOW**: POSTGRESQL slow log.
               + **POSTGRESQL_ERROR**: POSTGRESQL error log.
               + **SQLSERVER_ERROR**: SQLSERVER error log.
               + **GAUSSDB_REDIS_SLOW**: GAUSSDB_REDIS slow log.
               + **CDN**
               + **SMN**
               + **GAUSSDB_MYSQL_ERROR**: GAUSSDB_MYSQL error log.
               + **GAUSSDB_MYSQL_SLOW**: GAUSSDB_MYSQL slow log.
               + **ER**: ER Enterprise Router.
               + **MYSQL_AUDIT**: MYSQL audit log.
               + **GAUSSDB_CASSANDRA_SLOW**: GaussDBforCassandra slow log.
               + **GAUSSDB_MONGO_SLOW**: GaussDBforMongo slow log.
               + **GAUSSDB_MONGO_ERROR**: GaussDBforMongo error log.
               + **WAF_ACCESS**: WAF access log.
               + **WAF_ATTACK**: WAF attack log.
               + **DMS_REBALANCED**:DMS rebalancing log.
               + **CCE_AUDIT**: CCE audit log.
               + **CCE_EVENT**: CCE event log.
               + **GAUSSDB_REDIS_AUDIT**: GaussDBforRedis audit log.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template. The valid values are as follows:
               + **built_in**: System templates.
               + **custom**:   Custom templates.
        :param pulumi.Input[Sequence[pulumi.Input['StructingTemplateDemoFieldArgs']]] demo_fields: Specifies the example fields. Use to set quick analysis configurations for fields.
               Only need to enter the fields whose status is different from that of `is_analysis` in the template.
               The demo_fields structure is documented below.
        :param pulumi.Input[_builtins.bool] quick_analysis: Specifies whether to enable `demo_fields` and `tag_fields` quick analysis.
               + If this parameter is set to **true**, quick analysis is enabled for all `demo_fields` and `tag_fields`.
               + If this parameter is set to **false**, `is_analysis` in `demo_fields` and `tag_fields` in the template determines
               whether to enable quick analysis.
               
               Defaults to **false**.
               
               <a name="StructConfig_fields"></a>
               The `demo_fields` and `tag_fields` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['StructingTemplateTagFieldArgs']]] tag_fields: Specifies the tag fields. Use to set quick analysis configurations for fields.
               Only need to enter the fields whose status is different from that of `is_analysis` in the template.
               The tag_fields structure is documented below.
        :param pulumi.Input[_builtins.str] template_id: Specifies the template ID. The field is valid and required only when
               `template_type` is set to **custom**.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "template_name", template_name)
        pulumi.set(__self__, "template_type", template_type)
        if demo_fields is not None:
            pulumi.set(__self__, "demo_fields", demo_fields)
        if quick_analysis is not None:
            pulumi.set(__self__, "quick_analysis", quick_analysis)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tag_fields is not None:
            pulumi.set(__self__, "tag_fields", tag_fields)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log stream ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the template name. When `template_type` is set to **built_in**,
        valid values are:
        + **ELB**
        + **VPC**
        + **CTS**
        + **APIG**
        + **DCS_AUDIT**: DCS audit log.
        + **TOMCAT**
        + **NGINX**
        + **GAUSSDB_OPENGAUSS_AUDIT**: GAUSSV5 audit log.
        + **DDS_AUDIT**: DDS audit log.
        + **MONGODB_ERROR**: DDS error log.
        + **MONGODB_SLOW**: DDS slow log.
        + **CFW_ACCESS**: CFW access control log.
        + **CFW_ATTACK**: CFW attack log.
        + **CFW_FLOW**: CFW traffic log.
        + **MYSQL_ERROR**: MYSQL error log.
        + **MYSQL_SLOW**: MYSQL slow log:
        + **POSTGRESQL_SLOW**: POSTGRESQL slow log.
        + **POSTGRESQL_ERROR**: POSTGRESQL error log.
        + **SQLSERVER_ERROR**: SQLSERVER error log.
        + **GAUSSDB_REDIS_SLOW**: GAUSSDB_REDIS slow log.
        + **CDN**
        + **SMN**
        + **GAUSSDB_MYSQL_ERROR**: GAUSSDB_MYSQL error log.
        + **GAUSSDB_MYSQL_SLOW**: GAUSSDB_MYSQL slow log.
        + **ER**: ER Enterprise Router.
        + **MYSQL_AUDIT**: MYSQL audit log.
        + **GAUSSDB_CASSANDRA_SLOW**: GaussDBforCassandra slow log.
        + **GAUSSDB_MONGO_SLOW**: GaussDBforMongo slow log.
        + **GAUSSDB_MONGO_ERROR**: GaussDBforMongo error log.
        + **WAF_ACCESS**: WAF access log.
        + **WAF_ATTACK**: WAF attack log.
        + **DMS_REBALANCED**:DMS rebalancing log.
        + **CCE_AUDIT**: CCE audit log.
        + **CCE_EVENT**: CCE event log.
        + **GAUSSDB_REDIS_AUDIT**: GaussDBforRedis audit log.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_name", value)

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the template. The valid values are as follows:
        + **built_in**: System templates.
        + **custom**:   Custom templates.
        """
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_type", value)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateDemoFieldArgs']]]]:
        """
        Specifies the example fields. Use to set quick analysis configurations for fields.
        Only need to enter the fields whose status is different from that of `is_analysis` in the template.
        The demo_fields structure is documented below.
        """
        return pulumi.get(self, "demo_fields")

    @demo_fields.setter
    def demo_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateDemoFieldArgs']]]]):
        pulumi.set(self, "demo_fields", value)

    @_builtins.property
    @pulumi.getter(name="quickAnalysis")
    def quick_analysis(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable `demo_fields` and `tag_fields` quick analysis.
        + If this parameter is set to **true**, quick analysis is enabled for all `demo_fields` and `tag_fields`.
        + If this parameter is set to **false**, `is_analysis` in `demo_fields` and `tag_fields` in the template determines
        whether to enable quick analysis.

        Defaults to **false**.

        <a name="StructConfig_fields"></a>
        The `demo_fields` and `tag_fields` block supports:
        """
        return pulumi.get(self, "quick_analysis")

    @quick_analysis.setter
    def quick_analysis(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "quick_analysis", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateTagFieldArgs']]]]:
        """
        Specifies the tag fields. Use to set quick analysis configurations for fields.
        Only need to enter the fields whose status is different from that of `is_analysis` in the template.
        The tag_fields structure is documented below.
        """
        return pulumi.get(self, "tag_fields")

    @tag_fields.setter
    def tag_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateTagFieldArgs']]]]):
        pulumi.set(self, "tag_fields", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template ID. The field is valid and required only when
        `template_type` is set to **custom**.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)


@pulumi.input_type
class _StructingTemplateState:
    def __init__(__self__, *,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateDemoFieldArgs']]]] = None,
                 demo_log: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 quick_analysis: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateTagFieldArgs']]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering StructingTemplate resources.
        :param pulumi.Input[Sequence[pulumi.Input['StructingTemplateDemoFieldArgs']]] demo_fields: Specifies the example fields. Use to set quick analysis configurations for fields.
               Only need to enter the fields whose status is different from that of `is_analysis` in the template.
               The demo_fields structure is documented below.
        :param pulumi.Input[_builtins.str] demo_log: The sample log event.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] quick_analysis: Specifies whether to enable `demo_fields` and `tag_fields` quick analysis.
               + If this parameter is set to **true**, quick analysis is enabled for all `demo_fields` and `tag_fields`.
               + If this parameter is set to **false**, `is_analysis` in `demo_fields` and `tag_fields` in the template determines
               whether to enable quick analysis.
               
               Defaults to **false**.
               
               <a name="StructConfig_fields"></a>
               The `demo_fields` and `tag_fields` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['StructingTemplateTagFieldArgs']]] tag_fields: Specifies the tag fields. Use to set quick analysis configurations for fields.
               Only need to enter the fields whose status is different from that of `is_analysis` in the template.
               The tag_fields structure is documented below.
        :param pulumi.Input[_builtins.str] template_id: Specifies the template ID. The field is valid and required only when
               `template_type` is set to **custom**.
        :param pulumi.Input[_builtins.str] template_name: Specifies the template name. When `template_type` is set to **built_in**,
               valid values are:
               + **ELB**
               + **VPC**
               + **CTS**
               + **APIG**
               + **DCS_AUDIT**: DCS audit log.
               + **TOMCAT**
               + **NGINX**
               + **GAUSSDB_OPENGAUSS_AUDIT**: GAUSSV5 audit log.
               + **DDS_AUDIT**: DDS audit log.
               + **MONGODB_ERROR**: DDS error log.
               + **MONGODB_SLOW**: DDS slow log.
               + **CFW_ACCESS**: CFW access control log.
               + **CFW_ATTACK**: CFW attack log.
               + **CFW_FLOW**: CFW traffic log.
               + **MYSQL_ERROR**: MYSQL error log.
               + **MYSQL_SLOW**: MYSQL slow log:
               + **POSTGRESQL_SLOW**: POSTGRESQL slow log.
               + **POSTGRESQL_ERROR**: POSTGRESQL error log.
               + **SQLSERVER_ERROR**: SQLSERVER error log.
               + **GAUSSDB_REDIS_SLOW**: GAUSSDB_REDIS slow log.
               + **CDN**
               + **SMN**
               + **GAUSSDB_MYSQL_ERROR**: GAUSSDB_MYSQL error log.
               + **GAUSSDB_MYSQL_SLOW**: GAUSSDB_MYSQL slow log.
               + **ER**: ER Enterprise Router.
               + **MYSQL_AUDIT**: MYSQL audit log.
               + **GAUSSDB_CASSANDRA_SLOW**: GaussDBforCassandra slow log.
               + **GAUSSDB_MONGO_SLOW**: GaussDBforMongo slow log.
               + **GAUSSDB_MONGO_ERROR**: GaussDBforMongo error log.
               + **WAF_ACCESS**: WAF access log.
               + **WAF_ATTACK**: WAF attack log.
               + **DMS_REBALANCED**:DMS rebalancing log.
               + **CCE_AUDIT**: CCE audit log.
               + **CCE_EVENT**: CCE event log.
               + **GAUSSDB_REDIS_AUDIT**: GaussDBforRedis audit log.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template. The valid values are as follows:
               + **built_in**: System templates.
               + **custom**:   Custom templates.
        """
        if demo_fields is not None:
            pulumi.set(__self__, "demo_fields", demo_fields)
        if demo_log is not None:
            pulumi.set(__self__, "demo_log", demo_log)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if quick_analysis is not None:
            pulumi.set(__self__, "quick_analysis", quick_analysis)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tag_fields is not None:
            pulumi.set(__self__, "tag_fields", tag_fields)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if template_type is not None:
            pulumi.set(__self__, "template_type", template_type)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateDemoFieldArgs']]]]:
        """
        Specifies the example fields. Use to set quick analysis configurations for fields.
        Only need to enter the fields whose status is different from that of `is_analysis` in the template.
        The demo_fields structure is documented below.
        """
        return pulumi.get(self, "demo_fields")

    @demo_fields.setter
    def demo_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateDemoFieldArgs']]]]):
        pulumi.set(self, "demo_fields", value)

    @_builtins.property
    @pulumi.getter(name="demoLog")
    def demo_log(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The sample log event.
        """
        return pulumi.get(self, "demo_log")

    @demo_log.setter
    def demo_log(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "demo_log", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log stream ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="quickAnalysis")
    def quick_analysis(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable `demo_fields` and `tag_fields` quick analysis.
        + If this parameter is set to **true**, quick analysis is enabled for all `demo_fields` and `tag_fields`.
        + If this parameter is set to **false**, `is_analysis` in `demo_fields` and `tag_fields` in the template determines
        whether to enable quick analysis.

        Defaults to **false**.

        <a name="StructConfig_fields"></a>
        The `demo_fields` and `tag_fields` block supports:
        """
        return pulumi.get(self, "quick_analysis")

    @quick_analysis.setter
    def quick_analysis(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "quick_analysis", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateTagFieldArgs']]]]:
        """
        Specifies the tag fields. Use to set quick analysis configurations for fields.
        Only need to enter the fields whose status is different from that of `is_analysis` in the template.
        The tag_fields structure is documented below.
        """
        return pulumi.get(self, "tag_fields")

    @tag_fields.setter
    def tag_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructingTemplateTagFieldArgs']]]]):
        pulumi.set(self, "tag_fields", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template ID. The field is valid and required only when
        `template_type` is set to **custom**.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template name. When `template_type` is set to **built_in**,
        valid values are:
        + **ELB**
        + **VPC**
        + **CTS**
        + **APIG**
        + **DCS_AUDIT**: DCS audit log.
        + **TOMCAT**
        + **NGINX**
        + **GAUSSDB_OPENGAUSS_AUDIT**: GAUSSV5 audit log.
        + **DDS_AUDIT**: DDS audit log.
        + **MONGODB_ERROR**: DDS error log.
        + **MONGODB_SLOW**: DDS slow log.
        + **CFW_ACCESS**: CFW access control log.
        + **CFW_ATTACK**: CFW attack log.
        + **CFW_FLOW**: CFW traffic log.
        + **MYSQL_ERROR**: MYSQL error log.
        + **MYSQL_SLOW**: MYSQL slow log:
        + **POSTGRESQL_SLOW**: POSTGRESQL slow log.
        + **POSTGRESQL_ERROR**: POSTGRESQL error log.
        + **SQLSERVER_ERROR**: SQLSERVER error log.
        + **GAUSSDB_REDIS_SLOW**: GAUSSDB_REDIS slow log.
        + **CDN**
        + **SMN**
        + **GAUSSDB_MYSQL_ERROR**: GAUSSDB_MYSQL error log.
        + **GAUSSDB_MYSQL_SLOW**: GAUSSDB_MYSQL slow log.
        + **ER**: ER Enterprise Router.
        + **MYSQL_AUDIT**: MYSQL audit log.
        + **GAUSSDB_CASSANDRA_SLOW**: GaussDBforCassandra slow log.
        + **GAUSSDB_MONGO_SLOW**: GaussDBforMongo slow log.
        + **GAUSSDB_MONGO_ERROR**: GaussDBforMongo error log.
        + **WAF_ACCESS**: WAF access log.
        + **WAF_ATTACK**: WAF attack log.
        + **DMS_REBALANCED**:DMS rebalancing log.
        + **CCE_AUDIT**: CCE audit log.
        + **CCE_EVENT**: CCE event log.
        + **GAUSSDB_REDIS_AUDIT**: GaussDBforRedis audit log.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_name", value)

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the template. The valid values are as follows:
        + **built_in**: System templates.
        + **custom**:   Custom templates.
        """
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_type", value)


@pulumi.type_token("huaweicloud:Lts/structingTemplate:StructingTemplate")
class StructingTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructingTemplateDemoFieldArgs', 'StructingTemplateDemoFieldArgsDict']]]]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 quick_analysis: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructingTemplateTagFieldArgs', 'StructingTemplateTagFieldArgsDict']]]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an LTS structuring configuration resource within HuaweiCloud.

        ## Example Usage

        ### Creating with system template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.StructingTemplate("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            template_name="CTS",
            template_type="built_in")
        ```

        ### Creating with custom template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        template_name = config.require_object("templateName")
        template_id = config.require_object("templateId")
        test = huaweicloud.lts.StructingTemplate("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            template_name=template_name,
            template_id=template_id,
            template_type="custom")
        ```

        ## Import

        The LTS structuring configuration can be imported using `log_group_id` and `log_stream_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/structingTemplate:StructingTemplate test <log_group_id>/<log_stream_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `template_type`, `template_id`,

        `demo_fields`, `tag_fields`, `quick_analysis`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_lts_structing_template" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              template_type,
            
              template_id,
            
              demo_fields,
            
              tag_fields,
            
              quick_analysis,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructingTemplateDemoFieldArgs', 'StructingTemplateDemoFieldArgsDict']]]] demo_fields: Specifies the example fields. Use to set quick analysis configurations for fields.
               Only need to enter the fields whose status is different from that of `is_analysis` in the template.
               The demo_fields structure is documented below.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] quick_analysis: Specifies whether to enable `demo_fields` and `tag_fields` quick analysis.
               + If this parameter is set to **true**, quick analysis is enabled for all `demo_fields` and `tag_fields`.
               + If this parameter is set to **false**, `is_analysis` in `demo_fields` and `tag_fields` in the template determines
               whether to enable quick analysis.
               
               Defaults to **false**.
               
               <a name="StructConfig_fields"></a>
               The `demo_fields` and `tag_fields` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructingTemplateTagFieldArgs', 'StructingTemplateTagFieldArgsDict']]]] tag_fields: Specifies the tag fields. Use to set quick analysis configurations for fields.
               Only need to enter the fields whose status is different from that of `is_analysis` in the template.
               The tag_fields structure is documented below.
        :param pulumi.Input[_builtins.str] template_id: Specifies the template ID. The field is valid and required only when
               `template_type` is set to **custom**.
        :param pulumi.Input[_builtins.str] template_name: Specifies the template name. When `template_type` is set to **built_in**,
               valid values are:
               + **ELB**
               + **VPC**
               + **CTS**
               + **APIG**
               + **DCS_AUDIT**: DCS audit log.
               + **TOMCAT**
               + **NGINX**
               + **GAUSSDB_OPENGAUSS_AUDIT**: GAUSSV5 audit log.
               + **DDS_AUDIT**: DDS audit log.
               + **MONGODB_ERROR**: DDS error log.
               + **MONGODB_SLOW**: DDS slow log.
               + **CFW_ACCESS**: CFW access control log.
               + **CFW_ATTACK**: CFW attack log.
               + **CFW_FLOW**: CFW traffic log.
               + **MYSQL_ERROR**: MYSQL error log.
               + **MYSQL_SLOW**: MYSQL slow log:
               + **POSTGRESQL_SLOW**: POSTGRESQL slow log.
               + **POSTGRESQL_ERROR**: POSTGRESQL error log.
               + **SQLSERVER_ERROR**: SQLSERVER error log.
               + **GAUSSDB_REDIS_SLOW**: GAUSSDB_REDIS slow log.
               + **CDN**
               + **SMN**
               + **GAUSSDB_MYSQL_ERROR**: GAUSSDB_MYSQL error log.
               + **GAUSSDB_MYSQL_SLOW**: GAUSSDB_MYSQL slow log.
               + **ER**: ER Enterprise Router.
               + **MYSQL_AUDIT**: MYSQL audit log.
               + **GAUSSDB_CASSANDRA_SLOW**: GaussDBforCassandra slow log.
               + **GAUSSDB_MONGO_SLOW**: GaussDBforMongo slow log.
               + **GAUSSDB_MONGO_ERROR**: GaussDBforMongo error log.
               + **WAF_ACCESS**: WAF access log.
               + **WAF_ATTACK**: WAF attack log.
               + **DMS_REBALANCED**:DMS rebalancing log.
               + **CCE_AUDIT**: CCE audit log.
               + **CCE_EVENT**: CCE event log.
               + **GAUSSDB_REDIS_AUDIT**: GaussDBforRedis audit log.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template. The valid values are as follows:
               + **built_in**: System templates.
               + **custom**:   Custom templates.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StructingTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an LTS structuring configuration resource within HuaweiCloud.

        ## Example Usage

        ### Creating with system template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.StructingTemplate("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            template_name="CTS",
            template_type="built_in")
        ```

        ### Creating with custom template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        template_name = config.require_object("templateName")
        template_id = config.require_object("templateId")
        test = huaweicloud.lts.StructingTemplate("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            template_name=template_name,
            template_id=template_id,
            template_type="custom")
        ```

        ## Import

        The LTS structuring configuration can be imported using `log_group_id` and `log_stream_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/structingTemplate:StructingTemplate test <log_group_id>/<log_stream_id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `template_type`, `template_id`,

        `demo_fields`, `tag_fields`, `quick_analysis`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_lts_structing_template" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              template_type,
            
              template_id,
            
              demo_fields,
            
              tag_fields,
            
              quick_analysis,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param StructingTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StructingTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructingTemplateDemoFieldArgs', 'StructingTemplateDemoFieldArgsDict']]]]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 quick_analysis: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructingTemplateTagFieldArgs', 'StructingTemplateTagFieldArgsDict']]]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StructingTemplateArgs.__new__(StructingTemplateArgs)

            __props__.__dict__["demo_fields"] = demo_fields
            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            __props__.__dict__["quick_analysis"] = quick_analysis
            __props__.__dict__["region"] = region
            __props__.__dict__["tag_fields"] = tag_fields
            __props__.__dict__["template_id"] = template_id
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
            if template_type is None and not opts.urn:
                raise TypeError("Missing required property 'template_type'")
            __props__.__dict__["template_type"] = template_type
            __props__.__dict__["demo_log"] = None
        super(StructingTemplate, __self__).__init__(
            'huaweicloud:Lts/structingTemplate:StructingTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructingTemplateDemoFieldArgs', 'StructingTemplateDemoFieldArgsDict']]]]] = None,
            demo_log: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            quick_analysis: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructingTemplateTagFieldArgs', 'StructingTemplateTagFieldArgsDict']]]]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None,
            template_name: Optional[pulumi.Input[_builtins.str]] = None,
            template_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'StructingTemplate':
        """
        Get an existing StructingTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructingTemplateDemoFieldArgs', 'StructingTemplateDemoFieldArgsDict']]]] demo_fields: Specifies the example fields. Use to set quick analysis configurations for fields.
               Only need to enter the fields whose status is different from that of `is_analysis` in the template.
               The demo_fields structure is documented below.
        :param pulumi.Input[_builtins.str] demo_log: The sample log event.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] quick_analysis: Specifies whether to enable `demo_fields` and `tag_fields` quick analysis.
               + If this parameter is set to **true**, quick analysis is enabled for all `demo_fields` and `tag_fields`.
               + If this parameter is set to **false**, `is_analysis` in `demo_fields` and `tag_fields` in the template determines
               whether to enable quick analysis.
               
               Defaults to **false**.
               
               <a name="StructConfig_fields"></a>
               The `demo_fields` and `tag_fields` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructingTemplateTagFieldArgs', 'StructingTemplateTagFieldArgsDict']]]] tag_fields: Specifies the tag fields. Use to set quick analysis configurations for fields.
               Only need to enter the fields whose status is different from that of `is_analysis` in the template.
               The tag_fields structure is documented below.
        :param pulumi.Input[_builtins.str] template_id: Specifies the template ID. The field is valid and required only when
               `template_type` is set to **custom**.
        :param pulumi.Input[_builtins.str] template_name: Specifies the template name. When `template_type` is set to **built_in**,
               valid values are:
               + **ELB**
               + **VPC**
               + **CTS**
               + **APIG**
               + **DCS_AUDIT**: DCS audit log.
               + **TOMCAT**
               + **NGINX**
               + **GAUSSDB_OPENGAUSS_AUDIT**: GAUSSV5 audit log.
               + **DDS_AUDIT**: DDS audit log.
               + **MONGODB_ERROR**: DDS error log.
               + **MONGODB_SLOW**: DDS slow log.
               + **CFW_ACCESS**: CFW access control log.
               + **CFW_ATTACK**: CFW attack log.
               + **CFW_FLOW**: CFW traffic log.
               + **MYSQL_ERROR**: MYSQL error log.
               + **MYSQL_SLOW**: MYSQL slow log:
               + **POSTGRESQL_SLOW**: POSTGRESQL slow log.
               + **POSTGRESQL_ERROR**: POSTGRESQL error log.
               + **SQLSERVER_ERROR**: SQLSERVER error log.
               + **GAUSSDB_REDIS_SLOW**: GAUSSDB_REDIS slow log.
               + **CDN**
               + **SMN**
               + **GAUSSDB_MYSQL_ERROR**: GAUSSDB_MYSQL error log.
               + **GAUSSDB_MYSQL_SLOW**: GAUSSDB_MYSQL slow log.
               + **ER**: ER Enterprise Router.
               + **MYSQL_AUDIT**: MYSQL audit log.
               + **GAUSSDB_CASSANDRA_SLOW**: GaussDBforCassandra slow log.
               + **GAUSSDB_MONGO_SLOW**: GaussDBforMongo slow log.
               + **GAUSSDB_MONGO_ERROR**: GaussDBforMongo error log.
               + **WAF_ACCESS**: WAF access log.
               + **WAF_ATTACK**: WAF attack log.
               + **DMS_REBALANCED**:DMS rebalancing log.
               + **CCE_AUDIT**: CCE audit log.
               + **CCE_EVENT**: CCE event log.
               + **GAUSSDB_REDIS_AUDIT**: GaussDBforRedis audit log.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template. The valid values are as follows:
               + **built_in**: System templates.
               + **custom**:   Custom templates.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StructingTemplateState.__new__(_StructingTemplateState)

        __props__.__dict__["demo_fields"] = demo_fields
        __props__.__dict__["demo_log"] = demo_log
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["quick_analysis"] = quick_analysis
        __props__.__dict__["region"] = region
        __props__.__dict__["tag_fields"] = tag_fields
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["template_type"] = template_type
        return StructingTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> pulumi.Output[Optional[Sequence['outputs.StructingTemplateDemoField']]]:
        """
        Specifies the example fields. Use to set quick analysis configurations for fields.
        Only need to enter the fields whose status is different from that of `is_analysis` in the template.
        The demo_fields structure is documented below.
        """
        return pulumi.get(self, "demo_fields")

    @_builtins.property
    @pulumi.getter(name="demoLog")
    def demo_log(self) -> pulumi.Output[_builtins.str]:
        """
        The sample log event.
        """
        return pulumi.get(self, "demo_log")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log stream ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="quickAnalysis")
    def quick_analysis(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable `demo_fields` and `tag_fields` quick analysis.
        + If this parameter is set to **true**, quick analysis is enabled for all `demo_fields` and `tag_fields`.
        + If this parameter is set to **false**, `is_analysis` in `demo_fields` and `tag_fields` in the template determines
        whether to enable quick analysis.

        Defaults to **false**.

        <a name="StructConfig_fields"></a>
        The `demo_fields` and `tag_fields` block supports:
        """
        return pulumi.get(self, "quick_analysis")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> pulumi.Output[Optional[Sequence['outputs.StructingTemplateTagField']]]:
        """
        Specifies the tag fields. Use to set quick analysis configurations for fields.
        Only need to enter the fields whose status is different from that of `is_analysis` in the template.
        The tag_fields structure is documented below.
        """
        return pulumi.get(self, "tag_fields")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the template ID. The field is valid and required only when
        `template_type` is set to **custom**.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the template name. When `template_type` is set to **built_in**,
        valid values are:
        + **ELB**
        + **VPC**
        + **CTS**
        + **APIG**
        + **DCS_AUDIT**: DCS audit log.
        + **TOMCAT**
        + **NGINX**
        + **GAUSSDB_OPENGAUSS_AUDIT**: GAUSSV5 audit log.
        + **DDS_AUDIT**: DDS audit log.
        + **MONGODB_ERROR**: DDS error log.
        + **MONGODB_SLOW**: DDS slow log.
        + **CFW_ACCESS**: CFW access control log.
        + **CFW_ATTACK**: CFW attack log.
        + **CFW_FLOW**: CFW traffic log.
        + **MYSQL_ERROR**: MYSQL error log.
        + **MYSQL_SLOW**: MYSQL slow log:
        + **POSTGRESQL_SLOW**: POSTGRESQL slow log.
        + **POSTGRESQL_ERROR**: POSTGRESQL error log.
        + **SQLSERVER_ERROR**: SQLSERVER error log.
        + **GAUSSDB_REDIS_SLOW**: GAUSSDB_REDIS slow log.
        + **CDN**
        + **SMN**
        + **GAUSSDB_MYSQL_ERROR**: GAUSSDB_MYSQL error log.
        + **GAUSSDB_MYSQL_SLOW**: GAUSSDB_MYSQL slow log.
        + **ER**: ER Enterprise Router.
        + **MYSQL_AUDIT**: MYSQL audit log.
        + **GAUSSDB_CASSANDRA_SLOW**: GaussDBforCassandra slow log.
        + **GAUSSDB_MONGO_SLOW**: GaussDBforMongo slow log.
        + **GAUSSDB_MONGO_ERROR**: GaussDBforMongo error log.
        + **WAF_ACCESS**: WAF access log.
        + **WAF_ATTACK**: WAF attack log.
        + **DMS_REBALANCED**:DMS rebalancing log.
        + **CCE_AUDIT**: CCE audit log.
        + **CCE_EVENT**: CCE event log.
        + **GAUSSDB_REDIS_AUDIT**: GaussDBforRedis audit log.
        """
        return pulumi.get(self, "template_name")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the template. The valid values are as follows:
        + **built_in**: System templates.
        + **custom**:   Custom templates.
        """
        return pulumi.get(self, "template_type")

