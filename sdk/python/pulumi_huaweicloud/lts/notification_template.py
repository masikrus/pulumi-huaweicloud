# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NotificationTemplateArgs', 'NotificationTemplate']

@pulumi.input_type
class NotificationTemplateArgs:
    def __init__(__self__, *,
                 locale: pulumi.Input[_builtins.str],
                 source: pulumi.Input[_builtins.str],
                 templates: pulumi.Input[Sequence[pulumi.Input['NotificationTemplateTemplateArgs']]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a NotificationTemplate resource.
        :param pulumi.Input[_builtins.str] locale: Language.  
               Currently, the value can be **zh-cn** or **en-us**.
        :param pulumi.Input[_builtins.str] source: The source of the notification template.  
               Currently, this parameter is mandatory to **LTS**..
        :param pulumi.Input[Sequence[pulumi.Input['NotificationTemplateTemplateArgs']]] templates: The list of notification template body.  
               The templates structure is documented below.
        :param pulumi.Input[_builtins.str] description: The description of the notification template.  
               The value can contain 1 to 1024 characters, only chinese characters, digits, letters, and underscores (\\_),
               and can not start or end with an underscore (\\_).
               
               <a name="NotificationTemplate_SubTemplate"></a>
               The `templates` block supports:
        :param pulumi.Input[_builtins.str] name: The name of the notification template.  
               The value can contain 1 to 100 characters, only chinese characters, digits, letters, and underscores (\\_).
               and can not start or end with an underscore (\\_).
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "locale", locale)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "templates", templates)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def locale(self) -> pulumi.Input[_builtins.str]:
        """
        Language.  
        Currently, the value can be **zh-cn** or **en-us**.
        """
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "locale", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input[_builtins.str]:
        """
        The source of the notification template.  
        Currently, this parameter is mandatory to **LTS**..
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def templates(self) -> pulumi.Input[Sequence[pulumi.Input['NotificationTemplateTemplateArgs']]]:
        """
        The list of notification template body.  
        The templates structure is documented below.
        """
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: pulumi.Input[Sequence[pulumi.Input['NotificationTemplateTemplateArgs']]]):
        pulumi.set(self, "templates", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the notification template.  
        The value can contain 1 to 1024 characters, only chinese characters, digits, letters, and underscores (\\_),
        and can not start or end with an underscore (\\_).

        <a name="NotificationTemplate_SubTemplate"></a>
        The `templates` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the notification template.  
        The value can contain 1 to 100 characters, only chinese characters, digits, letters, and underscores (\\_).
        and can not start or end with an underscore (\\_).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _NotificationTemplateState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 locale: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationTemplateTemplateArgs']]]] = None):
        """
        Input properties used for looking up and filtering NotificationTemplate resources.
        :param pulumi.Input[_builtins.str] description: The description of the notification template.  
               The value can contain 1 to 1024 characters, only chinese characters, digits, letters, and underscores (\\_),
               and can not start or end with an underscore (\\_).
               
               <a name="NotificationTemplate_SubTemplate"></a>
               The `templates` block supports:
        :param pulumi.Input[_builtins.str] locale: Language.  
               Currently, the value can be **zh-cn** or **en-us**.
        :param pulumi.Input[_builtins.str] name: The name of the notification template.  
               The value can contain 1 to 100 characters, only chinese characters, digits, letters, and underscores (\\_).
               and can not start or end with an underscore (\\_).
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source: The source of the notification template.  
               Currently, this parameter is mandatory to **LTS**..
        :param pulumi.Input[Sequence[pulumi.Input['NotificationTemplateTemplateArgs']]] templates: The list of notification template body.  
               The templates structure is documented below.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if templates is not None:
            pulumi.set(__self__, "templates", templates)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the notification template.  
        The value can contain 1 to 1024 characters, only chinese characters, digits, letters, and underscores (\\_),
        and can not start or end with an underscore (\\_).

        <a name="NotificationTemplate_SubTemplate"></a>
        The `templates` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def locale(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Language.  
        Currently, the value can be **zh-cn** or **en-us**.
        """
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "locale", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the notification template.  
        The value can contain 1 to 100 characters, only chinese characters, digits, letters, and underscores (\\_).
        and can not start or end with an underscore (\\_).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source of the notification template.  
        Currently, this parameter is mandatory to **LTS**..
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotificationTemplateTemplateArgs']]]]:
        """
        The list of notification template body.  
        The templates structure is documented below.
        """
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationTemplateTemplateArgs']]]]):
        pulumi.set(self, "templates", value)


@pulumi.type_token("huaweicloud:Lts/notificationTemplate:NotificationTemplate")
class NotificationTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 locale: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NotificationTemplateTemplateArgs', 'NotificationTemplateTemplateArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages an LTS notification template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.lts.NotificationTemplate("test",
            name="keywords_alarm_demo",
            description="keywords alarm demo",
            source="LTS",
            locale="en-us",
            templates=[{
                "sub_type": "sms",
                "content": \"\"\"Account:${domain_name};
        Alarm Rules:<a href="$event.annotations.alarm_rule_url">${event_name}</a>;
        Alarm Status:$event.annotations.alarm_status;
        Severity:<span style="color: red">${event_severity}</span>;
        Occurred:${starts_at};
        Type:Keywords;
        Condition Expression:$event.annotations.condition_expression;
        Current Value:$event.annotations.current_value;
        Frequency:$event.annotations.frequency;
        Log Group/Stream Name:$event.annotations.results[0].resource_id;
        Query Time:$event.annotations.results[0].time;
        Query URL:<a href="$event.annotations.results[0].url">details</a>;
        \"\"\",
            }])
        ```

        ## Import

        The LTS notification template can be imported using the `id` which equals `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/notificationTemplate:NotificationTemplate test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The description of the notification template.  
               The value can contain 1 to 1024 characters, only chinese characters, digits, letters, and underscores (\\_),
               and can not start or end with an underscore (\\_).
               
               <a name="NotificationTemplate_SubTemplate"></a>
               The `templates` block supports:
        :param pulumi.Input[_builtins.str] locale: Language.  
               Currently, the value can be **zh-cn** or **en-us**.
        :param pulumi.Input[_builtins.str] name: The name of the notification template.  
               The value can contain 1 to 100 characters, only chinese characters, digits, letters, and underscores (\\_).
               and can not start or end with an underscore (\\_).
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source: The source of the notification template.  
               Currently, this parameter is mandatory to **LTS**..
        :param pulumi.Input[Sequence[pulumi.Input[Union['NotificationTemplateTemplateArgs', 'NotificationTemplateTemplateArgsDict']]]] templates: The list of notification template body.  
               The templates structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotificationTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an LTS notification template resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.lts.NotificationTemplate("test",
            name="keywords_alarm_demo",
            description="keywords alarm demo",
            source="LTS",
            locale="en-us",
            templates=[{
                "sub_type": "sms",
                "content": \"\"\"Account:${domain_name};
        Alarm Rules:<a href="$event.annotations.alarm_rule_url">${event_name}</a>;
        Alarm Status:$event.annotations.alarm_status;
        Severity:<span style="color: red">${event_severity}</span>;
        Occurred:${starts_at};
        Type:Keywords;
        Condition Expression:$event.annotations.condition_expression;
        Current Value:$event.annotations.current_value;
        Frequency:$event.annotations.frequency;
        Log Group/Stream Name:$event.annotations.results[0].resource_id;
        Query Time:$event.annotations.results[0].time;
        Query URL:<a href="$event.annotations.results[0].url">details</a>;
        \"\"\",
            }])
        ```

        ## Import

        The LTS notification template can be imported using the `id` which equals `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/notificationTemplate:NotificationTemplate test <id>
        ```

        :param str resource_name: The name of the resource.
        :param NotificationTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotificationTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 locale: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NotificationTemplateTemplateArgs', 'NotificationTemplateTemplateArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotificationTemplateArgs.__new__(NotificationTemplateArgs)

            __props__.__dict__["description"] = description
            if locale is None and not opts.urn:
                raise TypeError("Missing required property 'locale'")
            __props__.__dict__["locale"] = locale
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if templates is None and not opts.urn:
                raise TypeError("Missing required property 'templates'")
            __props__.__dict__["templates"] = templates
        super(NotificationTemplate, __self__).__init__(
            'huaweicloud:Lts/notificationTemplate:NotificationTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            locale: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source: Optional[pulumi.Input[_builtins.str]] = None,
            templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NotificationTemplateTemplateArgs', 'NotificationTemplateTemplateArgsDict']]]]] = None) -> 'NotificationTemplate':
        """
        Get an existing NotificationTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The description of the notification template.  
               The value can contain 1 to 1024 characters, only chinese characters, digits, letters, and underscores (\\_),
               and can not start or end with an underscore (\\_).
               
               <a name="NotificationTemplate_SubTemplate"></a>
               The `templates` block supports:
        :param pulumi.Input[_builtins.str] locale: Language.  
               Currently, the value can be **zh-cn** or **en-us**.
        :param pulumi.Input[_builtins.str] name: The name of the notification template.  
               The value can contain 1 to 100 characters, only chinese characters, digits, letters, and underscores (\\_).
               and can not start or end with an underscore (\\_).
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source: The source of the notification template.  
               Currently, this parameter is mandatory to **LTS**..
        :param pulumi.Input[Sequence[pulumi.Input[Union['NotificationTemplateTemplateArgs', 'NotificationTemplateTemplateArgsDict']]]] templates: The list of notification template body.  
               The templates structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotificationTemplateState.__new__(_NotificationTemplateState)

        __props__.__dict__["description"] = description
        __props__.__dict__["locale"] = locale
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["source"] = source
        __props__.__dict__["templates"] = templates
        return NotificationTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The description of the notification template.  
        The value can contain 1 to 1024 characters, only chinese characters, digits, letters, and underscores (\\_),
        and can not start or end with an underscore (\\_).

        <a name="NotificationTemplate_SubTemplate"></a>
        The `templates` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def locale(self) -> pulumi.Output[_builtins.str]:
        """
        Language.  
        Currently, the value can be **zh-cn** or **en-us**.
        """
        return pulumi.get(self, "locale")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the notification template.  
        The value can contain 1 to 100 characters, only chinese characters, digits, letters, and underscores (\\_).
        and can not start or end with an underscore (\\_).
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output[_builtins.str]:
        """
        The source of the notification template.  
        Currently, this parameter is mandatory to **LTS**..
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> pulumi.Output[Sequence['outputs.NotificationTemplateTemplate']]:
        """
        The list of notification template body.  
        The templates structure is documented below.
        """
        return pulumi.get(self, "templates")

