# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetHostsResult',
    'AwaitableGetHostsResult',
    'get_hosts',
    'get_hosts_output',
]

@pulumi.output_type
class GetHostsResult:
    """
    A collection of values returned by getHosts.
    """
    def __init__(__self__, filter=None, host_id_lists=None, hosts=None, id=None, region=None):
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if host_id_lists and not isinstance(host_id_lists, list):
            raise TypeError("Expected argument 'host_id_lists' to be a list")
        pulumi.set(__self__, "host_id_lists", host_id_lists)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetHostsFilterResult']:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="hostIdLists")
    def host_id_lists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "host_id_lists")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetHostsHostResult']:
        """
        All hosts that match the filter parameters.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetHostsResult(GetHostsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostsResult(
            filter=self.filter,
            host_id_lists=self.host_id_lists,
            hosts=self.hosts,
            id=self.id,
            region=self.region)


def get_hosts(filter: Optional[Union['GetHostsFilterArgs', 'GetHostsFilterArgsDict']] = None,
              host_id_lists: Optional[Sequence[_builtins.str]] = None,
              region: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostsResult:
    """
    Use this data source to get the list of the hosts within HuaweiCloud.

    ## Example Usage

    ### Query all hosts

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Lts.get_hosts()
    ```


    :param Union['GetHostsFilterArgs', 'GetHostsFilterArgsDict'] filter: Specifies filtering parameter to query hosts.
           
           The filter structure is documented below.
           
           <a name="host_filter_struct"></a>
           The `filter` block supports:
    :param Sequence[_builtins.str] host_id_lists: Specifies the list of the host IDs.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['hostIdLists'] = host_id_lists
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Lts/getHosts:getHosts', __args__, opts=opts, typ=GetHostsResult).value

    return AwaitableGetHostsResult(
        filter=pulumi.get(__ret__, 'filter'),
        host_id_lists=pulumi.get(__ret__, 'host_id_lists'),
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_hosts_output(filter: Optional[pulumi.Input[Optional[Union['GetHostsFilterArgs', 'GetHostsFilterArgsDict']]]] = None,
                     host_id_lists: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHostsResult]:
    """
    Use this data source to get the list of the hosts within HuaweiCloud.

    ## Example Usage

    ### Query all hosts

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Lts.get_hosts()
    ```


    :param Union['GetHostsFilterArgs', 'GetHostsFilterArgsDict'] filter: Specifies filtering parameter to query hosts.
           
           The filter structure is documented below.
           
           <a name="host_filter_struct"></a>
           The `filter` block supports:
    :param Sequence[_builtins.str] host_id_lists: Specifies the list of the host IDs.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['hostIdLists'] = host_id_lists
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Lts/getHosts:getHosts', __args__, opts=opts, typ=GetHostsResult)
    return __ret__.apply(lambda __response__: GetHostsResult(
        filter=pulumi.get(__response__, 'filter'),
        host_id_lists=pulumi.get(__response__, 'host_id_lists'),
        hosts=pulumi.get(__response__, 'hosts'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
