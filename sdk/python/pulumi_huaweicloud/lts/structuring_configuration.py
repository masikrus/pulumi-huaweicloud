# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StructuringConfigurationArgs', 'StructuringConfiguration']

@pulumi.input_type
class StructuringConfigurationArgs:
    def __init__(__self__, *,
                 log_group_id: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 template_name: pulumi.Input[_builtins.str],
                 template_type: pulumi.Input[_builtins.str],
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationDemoFieldArgs']]]] = None,
                 quick_analysis: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationTagFieldArgs']]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a StructuringConfiguration resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
        :param pulumi.Input[_builtins.str] template_name: Specifies the template name.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template.
        :param pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationDemoFieldArgs']]] demo_fields: Specifies the example field array.
        :param pulumi.Input[_builtins.bool] quick_analysis: Specifies whether to enable demo_fields and tag_fields quick analysis.
        :param pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationTagFieldArgs']]] tag_fields: Specifies the tag field array.
        :param pulumi.Input[_builtins.str] template_id: Specifies the template ID.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "template_name", template_name)
        pulumi.set(__self__, "template_type", template_type)
        if demo_fields is not None:
            pulumi.set(__self__, "demo_fields", demo_fields)
        if quick_analysis is not None:
            pulumi.set(__self__, "quick_analysis", quick_analysis)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tag_fields is not None:
            pulumi.set(__self__, "tag_fields", tag_fields)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log stream ID.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the template name.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_name", value)

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the template.
        """
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_type", value)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationDemoFieldArgs']]]]:
        """
        Specifies the example field array.
        """
        return pulumi.get(self, "demo_fields")

    @demo_fields.setter
    def demo_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationDemoFieldArgs']]]]):
        pulumi.set(self, "demo_fields", value)

    @_builtins.property
    @pulumi.getter(name="quickAnalysis")
    def quick_analysis(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable demo_fields and tag_fields quick analysis.
        """
        return pulumi.get(self, "quick_analysis")

    @quick_analysis.setter
    def quick_analysis(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "quick_analysis", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationTagFieldArgs']]]]:
        """
        Specifies the tag field array.
        """
        return pulumi.get(self, "tag_fields")

    @tag_fields.setter
    def tag_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationTagFieldArgs']]]]):
        pulumi.set(self, "tag_fields", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template ID.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)


@pulumi.input_type
class _StructuringConfigurationState:
    def __init__(__self__, *,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationDemoFieldArgs']]]] = None,
                 demo_log: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 quick_analysis: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationTagFieldArgs']]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering StructuringConfiguration resources.
        :param pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationDemoFieldArgs']]] demo_fields: Specifies the example field array.
        :param pulumi.Input[_builtins.str] demo_log: The sample log event.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
        :param pulumi.Input[_builtins.bool] quick_analysis: Specifies whether to enable demo_fields and tag_fields quick analysis.
        :param pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationTagFieldArgs']]] tag_fields: Specifies the tag field array.
        :param pulumi.Input[_builtins.str] template_id: Specifies the template ID.
        :param pulumi.Input[_builtins.str] template_name: Specifies the template name.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template.
        """
        if demo_fields is not None:
            pulumi.set(__self__, "demo_fields", demo_fields)
        if demo_log is not None:
            pulumi.set(__self__, "demo_log", demo_log)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if quick_analysis is not None:
            pulumi.set(__self__, "quick_analysis", quick_analysis)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tag_fields is not None:
            pulumi.set(__self__, "tag_fields", tag_fields)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if template_type is not None:
            pulumi.set(__self__, "template_type", template_type)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationDemoFieldArgs']]]]:
        """
        Specifies the example field array.
        """
        return pulumi.get(self, "demo_fields")

    @demo_fields.setter
    def demo_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationDemoFieldArgs']]]]):
        pulumi.set(self, "demo_fields", value)

    @_builtins.property
    @pulumi.getter(name="demoLog")
    def demo_log(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The sample log event.
        """
        return pulumi.get(self, "demo_log")

    @demo_log.setter
    def demo_log(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "demo_log", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log stream ID.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="quickAnalysis")
    def quick_analysis(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable demo_fields and tag_fields quick analysis.
        """
        return pulumi.get(self, "quick_analysis")

    @quick_analysis.setter
    def quick_analysis(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "quick_analysis", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationTagFieldArgs']]]]:
        """
        Specifies the tag field array.
        """
        return pulumi.get(self, "tag_fields")

    @tag_fields.setter
    def tag_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StructuringConfigurationTagFieldArgs']]]]):
        pulumi.set(self, "tag_fields", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template ID.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template name.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_name", value)

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the template.
        """
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_type", value)


@pulumi.type_token("huaweicloud:Lts/structuringConfiguration:StructuringConfiguration")
class StructuringConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringConfigurationDemoFieldArgs', 'StructuringConfigurationDemoFieldArgsDict']]]]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 quick_analysis: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringConfigurationTagFieldArgs', 'StructuringConfigurationTagFieldArgsDict']]]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a StructuringConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructuringConfigurationDemoFieldArgs', 'StructuringConfigurationDemoFieldArgsDict']]]] demo_fields: Specifies the example field array.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
        :param pulumi.Input[_builtins.bool] quick_analysis: Specifies whether to enable demo_fields and tag_fields quick analysis.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructuringConfigurationTagFieldArgs', 'StructuringConfigurationTagFieldArgsDict']]]] tag_fields: Specifies the tag field array.
        :param pulumi.Input[_builtins.str] template_id: Specifies the template ID.
        :param pulumi.Input[_builtins.str] template_name: Specifies the template name.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StructuringConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StructuringConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StructuringConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StructuringConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringConfigurationDemoFieldArgs', 'StructuringConfigurationDemoFieldArgsDict']]]]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 quick_analysis: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringConfigurationTagFieldArgs', 'StructuringConfigurationTagFieldArgsDict']]]]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StructuringConfigurationArgs.__new__(StructuringConfigurationArgs)

            __props__.__dict__["demo_fields"] = demo_fields
            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            __props__.__dict__["quick_analysis"] = quick_analysis
            __props__.__dict__["region"] = region
            __props__.__dict__["tag_fields"] = tag_fields
            __props__.__dict__["template_id"] = template_id
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
            if template_type is None and not opts.urn:
                raise TypeError("Missing required property 'template_type'")
            __props__.__dict__["template_type"] = template_type
            __props__.__dict__["demo_log"] = None
        super(StructuringConfiguration, __self__).__init__(
            'huaweicloud:Lts/structuringConfiguration:StructuringConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringConfigurationDemoFieldArgs', 'StructuringConfigurationDemoFieldArgsDict']]]]] = None,
            demo_log: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            quick_analysis: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tag_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StructuringConfigurationTagFieldArgs', 'StructuringConfigurationTagFieldArgsDict']]]]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None,
            template_name: Optional[pulumi.Input[_builtins.str]] = None,
            template_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'StructuringConfiguration':
        """
        Get an existing StructuringConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructuringConfigurationDemoFieldArgs', 'StructuringConfigurationDemoFieldArgsDict']]]] demo_fields: Specifies the example field array.
        :param pulumi.Input[_builtins.str] demo_log: The sample log event.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
        :param pulumi.Input[_builtins.bool] quick_analysis: Specifies whether to enable demo_fields and tag_fields quick analysis.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StructuringConfigurationTagFieldArgs', 'StructuringConfigurationTagFieldArgsDict']]]] tag_fields: Specifies the tag field array.
        :param pulumi.Input[_builtins.str] template_id: Specifies the template ID.
        :param pulumi.Input[_builtins.str] template_name: Specifies the template name.
        :param pulumi.Input[_builtins.str] template_type: Specifies the type of the template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StructuringConfigurationState.__new__(_StructuringConfigurationState)

        __props__.__dict__["demo_fields"] = demo_fields
        __props__.__dict__["demo_log"] = demo_log
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["quick_analysis"] = quick_analysis
        __props__.__dict__["region"] = region
        __props__.__dict__["tag_fields"] = tag_fields
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["template_type"] = template_type
        return StructuringConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> pulumi.Output[Optional[Sequence['outputs.StructuringConfigurationDemoField']]]:
        """
        Specifies the example field array.
        """
        return pulumi.get(self, "demo_fields")

    @_builtins.property
    @pulumi.getter(name="demoLog")
    def demo_log(self) -> pulumi.Output[_builtins.str]:
        """
        The sample log event.
        """
        return pulumi.get(self, "demo_log")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log stream ID.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="quickAnalysis")
    def quick_analysis(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable demo_fields and tag_fields quick analysis.
        """
        return pulumi.get(self, "quick_analysis")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tagFields")
    def tag_fields(self) -> pulumi.Output[Optional[Sequence['outputs.StructuringConfigurationTagField']]]:
        """
        Specifies the tag field array.
        """
        return pulumi.get(self, "tag_fields")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the template ID.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the template name.
        """
        return pulumi.get(self, "template_name")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the template.
        """
        return pulumi.get(self, "template_type")

