# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DashboardArgs', 'Dashboard']

@pulumi.input_type
class DashboardArgs:
    def __init__(__self__, *,
                 log_group_id: pulumi.Input[_builtins.str],
                 log_group_name: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 log_stream_name: pulumi.Input[_builtins.str],
                 template_titles: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 is_delete_charts: Optional[pulumi.Input[_builtins.str]] = None,
                 last_update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 template_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Dashboard resource.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_group_name", log_group_name)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "log_stream_name", log_stream_name)
        pulumi.set(__self__, "template_titles", template_titles)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if is_delete_charts is not None:
            pulumi.set(__self__, "is_delete_charts", is_delete_charts)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if template_types is not None:
            pulumi.set(__self__, "template_types", template_types)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "log_group_name")

    @log_group_name.setter
    def log_group_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_name", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "log_stream_name")

    @log_stream_name.setter
    def log_stream_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_name", value)

    @_builtins.property
    @pulumi.getter(name="templateTitles")
    def template_titles(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "template_titles")

    @template_titles.setter
    def template_titles(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "template_titles", value)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter(name="isDeleteCharts")
    def is_delete_charts(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_delete_charts")

    @is_delete_charts.setter
    def is_delete_charts(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_delete_charts", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "last_update_time", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="templateTypes")
    def template_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "template_types")

    @template_types.setter
    def template_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "template_types", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class _DashboardState:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 is_delete_charts: Optional[pulumi.Input[_builtins.str]] = None,
                 last_update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 template_titles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 template_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Dashboard resources.
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if is_delete_charts is not None:
            pulumi.set(__self__, "is_delete_charts", is_delete_charts)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_group_name is not None:
            pulumi.set(__self__, "log_group_name", log_group_name)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if log_stream_name is not None:
            pulumi.set(__self__, "log_stream_name", log_stream_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if template_titles is not None:
            pulumi.set(__self__, "template_titles", template_titles)
        if template_types is not None:
            pulumi.set(__self__, "template_types", template_types)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter(name="isDeleteCharts")
    def is_delete_charts(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_delete_charts")

    @is_delete_charts.setter
    def is_delete_charts(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_delete_charts", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "last_update_time", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "log_group_name")

    @log_group_name.setter
    def log_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_name", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "log_stream_name")

    @log_stream_name.setter
    def log_stream_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="templateTitles")
    def template_titles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "template_titles")

    @template_titles.setter
    def template_titles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "template_titles", value)

    @_builtins.property
    @pulumi.getter(name="templateTypes")
    def template_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "template_types")

    @template_types.setter
    def template_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "template_types", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)


@pulumi.type_token("huaweicloud:Lts/dashboard:Dashboard")
class Dashboard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 is_delete_charts: Optional[pulumi.Input[_builtins.str]] = None,
                 last_update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 template_titles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 template_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Dashboard resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Dashboard resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DashboardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 is_delete_charts: Optional[pulumi.Input[_builtins.str]] = None,
                 last_update_time: Optional[pulumi.Input[_builtins.int]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 template_titles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 template_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardArgs.__new__(DashboardArgs)

            __props__.__dict__["filters"] = filters
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["is_delete_charts"] = is_delete_charts
            __props__.__dict__["last_update_time"] = last_update_time
            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_name'")
            __props__.__dict__["log_group_name"] = log_group_name
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            if log_stream_name is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_name'")
            __props__.__dict__["log_stream_name"] = log_stream_name
            __props__.__dict__["region"] = region
            if template_titles is None and not opts.urn:
                raise TypeError("Missing required property 'template_titles'")
            __props__.__dict__["template_titles"] = template_titles
            __props__.__dict__["template_types"] = template_types
            __props__.__dict__["title"] = title
        super(Dashboard, __self__).__init__(
            'huaweicloud:Lts/dashboard:Dashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            group_name: Optional[pulumi.Input[_builtins.str]] = None,
            is_delete_charts: Optional[pulumi.Input[_builtins.str]] = None,
            last_update_time: Optional[pulumi.Input[_builtins.int]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            template_titles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            template_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            title: Optional[pulumi.Input[_builtins.str]] = None) -> 'Dashboard':
        """
        Get an existing Dashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardState.__new__(_DashboardState)

        __props__.__dict__["filters"] = filters
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["is_delete_charts"] = is_delete_charts
        __props__.__dict__["last_update_time"] = last_update_time
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_group_name"] = log_group_name
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["log_stream_name"] = log_stream_name
        __props__.__dict__["region"] = region
        __props__.__dict__["template_titles"] = template_titles
        __props__.__dict__["template_types"] = template_types
        __props__.__dict__["title"] = title
        return Dashboard(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="isDeleteCharts")
    def is_delete_charts(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "is_delete_charts")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "log_group_name")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "log_stream_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="templateTitles")
    def template_titles(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "template_titles")

    @_builtins.property
    @pulumi.getter(name="templateTypes")
    def template_types(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "template_types")

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "title")

