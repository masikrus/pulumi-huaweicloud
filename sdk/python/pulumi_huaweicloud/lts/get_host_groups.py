# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetHostGroupsResult',
    'AwaitableGetHostGroupsResult',
    'get_host_groups',
    'get_host_groups_output',
]

@pulumi.output_type
class GetHostGroupsResult:
    """
    A collection of values returned by getHostGroups.
    """
    def __init__(__self__, groups=None, host_group_id=None, id=None, name=None, region=None, tags=None, type=None):
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if host_group_id and not isinstance(host_group_id, str):
            raise TypeError("Expected argument 'host_group_id' to be a str")
        pulumi.set(__self__, "host_group_id", host_group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetHostGroupsGroupResult']:
        """
        All host groups that match the filter parameters.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the host group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The key/value pairs to associate with the host group.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the host group.
        """
        return pulumi.get(self, "type")


class AwaitableGetHostGroupsResult(GetHostGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostGroupsResult(
            groups=self.groups,
            host_group_id=self.host_group_id,
            id=self.id,
            name=self.name,
            region=self.region,
            tags=self.tags,
            type=self.type)


def get_host_groups(host_group_id: Optional[_builtins.str] = None,
                    name: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    tags: Optional[Mapping[str, _builtins.str]] = None,
                    type: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostGroupsResult:
    """
    Use this data source to get the list of LTS host groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Lts.get_host_groups()
    ```


    :param _builtins.str host_group_id: Speicifies the ID of the host group.
    :param _builtins.str name: Speicifies the name of the host group.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the host group.
    :param _builtins.str type: Speicifies the type of the host group.  
           The valid values are as follows:
           + **windows**
           + **linux**
    """
    __args__ = dict()
    __args__['hostGroupId'] = host_group_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Lts/getHostGroups:getHostGroups', __args__, opts=opts, typ=GetHostGroupsResult).value

    return AwaitableGetHostGroupsResult(
        groups=pulumi.get(__ret__, 'groups'),
        host_group_id=pulumi.get(__ret__, 'host_group_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_host_groups_output(host_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                           type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHostGroupsResult]:
    """
    Use this data source to get the list of LTS host groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Lts.get_host_groups()
    ```


    :param _builtins.str host_group_id: Speicifies the ID of the host group.
    :param _builtins.str name: Speicifies the name of the host group.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the host group.
    :param _builtins.str type: Speicifies the type of the host group.  
           The valid values are as follows:
           + **windows**
           + **linux**
    """
    __args__ = dict()
    __args__['hostGroupId'] = host_group_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Lts/getHostGroups:getHostGroups', __args__, opts=opts, typ=GetHostGroupsResult)
    return __ret__.apply(lambda __response__: GetHostGroupsResult(
        groups=pulumi.get(__response__, 'groups'),
        host_group_id=pulumi.get(__response__, 'host_group_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
