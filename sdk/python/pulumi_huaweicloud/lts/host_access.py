# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HostAccessArgs', 'HostAccess']

@pulumi.input_type
class HostAccessArgs:
    def __init__(__self__, *,
                 access_config: pulumi.Input['HostAccessAccessConfigArgs'],
                 log_group_id: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 binary_collect: Optional[pulumi.Input[_builtins.bool]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessDemoFieldArgs']]]] = None,
                 demo_log: Optional[pulumi.Input[_builtins.str]] = None,
                 encoding_format: Optional[pulumi.Input[_builtins.str]] = None,
                 host_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 incremental_collect: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_split: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 processor_type: Optional[pulumi.Input[_builtins.str]] = None,
                 processors: Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessProcessorArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a HostAccess resource.
        :param pulumi.Input['HostAccessAccessConfigArgs'] access_config: Specifies the configurations of host access.
               The access_config structure is documented below.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] binary_collect: Specifies whether to allow collection of binary log files.  
               Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['HostAccessDemoFieldArgs']]] demo_fields: Specifies the list of the parsed fields of the example log.  
               The demo_fields structure is documented below.
               This parameter must be set together with the `demo_log` parameter.
               This parameter is available when the `processor_type` parameter is specified.
        :param pulumi.Input[_builtins.str] demo_log: Specifies the example log of the ICAgent structuring parsing.  
               This parameter is available when the `processor_type` parameter is specified.
        :param pulumi.Input[_builtins.str] encoding_format: Specifies the encoding format log file.  
               Defaults to **UTF-8**.
               The valid values are as follows:
               + **UTF-8**
               + **GBK**
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_group_ids: Specifies the log access host group ID list.
        :param pulumi.Input[_builtins.bool] incremental_collect: Specifies whether to collect incrementally.  
               Defaults to **true**.
               When incremental collection a new file, ICAgent reads the file from the end of the file.
               When full collection a new file, ICAgent reads the file from the beginning of the file.
        :param pulumi.Input[_builtins.bool] log_split: Specifies whether to enable log splitting.  
               Defaults to **false**.
               
               <a name="HostAccessConfigDeatil"></a>
               The `access_config` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parsed field.
        :param pulumi.Input[_builtins.str] processor_type: Specifies the type of the ICAgent structuring parsing.  
               This parameter must be set together with the `processors` parameter.
               The valid values are as follows:
               + **SINGLE_LINE**
               + **MULTI_LINE**
               + **REGEX**
               + **MULTI_REGEX**
               + **SPLIT**
               + **JSON**
               + **NGINX**
               + **COMPOSE**
        :param pulumi.Input[Sequence[pulumi.Input['HostAccessProcessorArgs']]] processors: Specifies the list of the ICAgent structuring parsing rules.  
               The processors structure is documented below.
               This parameter must be set together with the `processor_type` parameter.
               Please refer to the [Setting ICAgent Structuring Parsing Rules](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_07_0072.html).
               
               > For the same log stream, If you have configured cloud structuring parsing, delete its configurations before configuring
               ICAgent structuring parsing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to attach to the host access.
        """
        pulumi.set(__self__, "access_config", access_config)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        if binary_collect is not None:
            pulumi.set(__self__, "binary_collect", binary_collect)
        if demo_fields is not None:
            pulumi.set(__self__, "demo_fields", demo_fields)
        if demo_log is not None:
            pulumi.set(__self__, "demo_log", demo_log)
        if encoding_format is not None:
            pulumi.set(__self__, "encoding_format", encoding_format)
        if host_group_ids is not None:
            pulumi.set(__self__, "host_group_ids", host_group_ids)
        if incremental_collect is not None:
            pulumi.set(__self__, "incremental_collect", incremental_collect)
        if log_split is not None:
            pulumi.set(__self__, "log_split", log_split)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if processor_type is not None:
            pulumi.set(__self__, "processor_type", processor_type)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> pulumi.Input['HostAccessAccessConfigArgs']:
        """
        Specifies the configurations of host access.
        The access_config structure is documented below.
        """
        return pulumi.get(self, "access_config")

    @access_config.setter
    def access_config(self, value: pulumi.Input['HostAccessAccessConfigArgs']):
        pulumi.set(self, "access_config", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the log stream ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="binaryCollect")
    def binary_collect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to allow collection of binary log files.  
        Defaults to **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "binary_collect")

    @binary_collect.setter
    def binary_collect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "binary_collect", value)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessDemoFieldArgs']]]]:
        """
        Specifies the list of the parsed fields of the example log.  
        The demo_fields structure is documented below.
        This parameter must be set together with the `demo_log` parameter.
        This parameter is available when the `processor_type` parameter is specified.
        """
        return pulumi.get(self, "demo_fields")

    @demo_fields.setter
    def demo_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessDemoFieldArgs']]]]):
        pulumi.set(self, "demo_fields", value)

    @_builtins.property
    @pulumi.getter(name="demoLog")
    def demo_log(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the example log of the ICAgent structuring parsing.  
        This parameter is available when the `processor_type` parameter is specified.
        """
        return pulumi.get(self, "demo_log")

    @demo_log.setter
    def demo_log(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "demo_log", value)

    @_builtins.property
    @pulumi.getter(name="encodingFormat")
    def encoding_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the encoding format log file.  
        Defaults to **UTF-8**.
        The valid values are as follows:
        + **UTF-8**
        + **GBK**
        """
        return pulumi.get(self, "encoding_format")

    @encoding_format.setter
    def encoding_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encoding_format", value)

    @_builtins.property
    @pulumi.getter(name="hostGroupIds")
    def host_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the log access host group ID list.
        """
        return pulumi.get(self, "host_group_ids")

    @host_group_ids.setter
    def host_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="incrementalCollect")
    def incremental_collect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to collect incrementally.  
        Defaults to **true**.
        When incremental collection a new file, ICAgent reads the file from the end of the file.
        When full collection a new file, ICAgent reads the file from the beginning of the file.
        """
        return pulumi.get(self, "incremental_collect")

    @incremental_collect.setter
    def incremental_collect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "incremental_collect", value)

    @_builtins.property
    @pulumi.getter(name="logSplit")
    def log_split(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable log splitting.  
        Defaults to **false**.

        <a name="HostAccessConfigDeatil"></a>
        The `access_config` block supports:
        """
        return pulumi.get(self, "log_split")

    @log_split.setter
    def log_split(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log_split", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the parsed field.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="processorType")
    def processor_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the ICAgent structuring parsing.  
        This parameter must be set together with the `processors` parameter.
        The valid values are as follows:
        + **SINGLE_LINE**
        + **MULTI_LINE**
        + **REGEX**
        + **MULTI_REGEX**
        + **SPLIT**
        + **JSON**
        + **NGINX**
        + **COMPOSE**
        """
        return pulumi.get(self, "processor_type")

    @processor_type.setter
    def processor_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "processor_type", value)

    @_builtins.property
    @pulumi.getter
    def processors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessProcessorArgs']]]]:
        """
        Specifies the list of the ICAgent structuring parsing rules.  
        The processors structure is documented below.
        This parameter must be set together with the `processor_type` parameter.
        Please refer to the [Setting ICAgent Structuring Parsing Rules](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_07_0072.html).

        > For the same log stream, If you have configured cloud structuring parsing, delete its configurations before configuring
        ICAgent structuring parsing.
        """
        return pulumi.get(self, "processors")

    @processors.setter
    def processors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessProcessorArgs']]]]):
        pulumi.set(self, "processors", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value to attach to the host access.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _HostAccessState:
    def __init__(__self__, *,
                 access_config: Optional[pulumi.Input['HostAccessAccessConfigArgs']] = None,
                 access_type: Optional[pulumi.Input[_builtins.str]] = None,
                 binary_collect: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessDemoFieldArgs']]]] = None,
                 demo_log: Optional[pulumi.Input[_builtins.str]] = None,
                 encoding_format: Optional[pulumi.Input[_builtins.str]] = None,
                 host_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 incremental_collect: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log_split: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 processor_type: Optional[pulumi.Input[_builtins.str]] = None,
                 processors: Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessProcessorArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering HostAccess resources.
        :param pulumi.Input['HostAccessAccessConfigArgs'] access_config: Specifies the configurations of host access.
               The access_config structure is documented below.
        :param pulumi.Input[_builtins.str] access_type: The log access type.
        :param pulumi.Input[_builtins.bool] binary_collect: Specifies whether to allow collection of binary log files.  
               Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the host access, in RFC3339 format.
        :param pulumi.Input[Sequence[pulumi.Input['HostAccessDemoFieldArgs']]] demo_fields: Specifies the list of the parsed fields of the example log.  
               The demo_fields structure is documented below.
               This parameter must be set together with the `demo_log` parameter.
               This parameter is available when the `processor_type` parameter is specified.
        :param pulumi.Input[_builtins.str] demo_log: Specifies the example log of the ICAgent structuring parsing.  
               This parameter is available when the `processor_type` parameter is specified.
        :param pulumi.Input[_builtins.str] encoding_format: Specifies the encoding format log file.  
               Defaults to **UTF-8**.
               The valid values are as follows:
               + **UTF-8**
               + **GBK**
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_group_ids: Specifies the log access host group ID list.
        :param pulumi.Input[_builtins.bool] incremental_collect: Specifies whether to collect incrementally.  
               Defaults to **true**.
               When incremental collection a new file, ICAgent reads the file from the end of the file.
               When full collection a new file, ICAgent reads the file from the beginning of the file.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_group_name: The log group name.
        :param pulumi.Input[_builtins.bool] log_split: Specifies whether to enable log splitting.  
               Defaults to **false**.
               
               <a name="HostAccessConfigDeatil"></a>
               The `access_config` block supports:
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_name: The log stream name.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parsed field.
        :param pulumi.Input[_builtins.str] processor_type: Specifies the type of the ICAgent structuring parsing.  
               This parameter must be set together with the `processors` parameter.
               The valid values are as follows:
               + **SINGLE_LINE**
               + **MULTI_LINE**
               + **REGEX**
               + **MULTI_REGEX**
               + **SPLIT**
               + **JSON**
               + **NGINX**
               + **COMPOSE**
        :param pulumi.Input[Sequence[pulumi.Input['HostAccessProcessorArgs']]] processors: Specifies the list of the ICAgent structuring parsing rules.  
               The processors structure is documented below.
               This parameter must be set together with the `processor_type` parameter.
               Please refer to the [Setting ICAgent Structuring Parsing Rules](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_07_0072.html).
               
               > For the same log stream, If you have configured cloud structuring parsing, delete its configurations before configuring
               ICAgent structuring parsing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to attach to the host access.
        """
        if access_config is not None:
            pulumi.set(__self__, "access_config", access_config)
        if access_type is not None:
            pulumi.set(__self__, "access_type", access_type)
        if binary_collect is not None:
            pulumi.set(__self__, "binary_collect", binary_collect)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if demo_fields is not None:
            pulumi.set(__self__, "demo_fields", demo_fields)
        if demo_log is not None:
            pulumi.set(__self__, "demo_log", demo_log)
        if encoding_format is not None:
            pulumi.set(__self__, "encoding_format", encoding_format)
        if host_group_ids is not None:
            pulumi.set(__self__, "host_group_ids", host_group_ids)
        if incremental_collect is not None:
            pulumi.set(__self__, "incremental_collect", incremental_collect)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_group_name is not None:
            pulumi.set(__self__, "log_group_name", log_group_name)
        if log_split is not None:
            pulumi.set(__self__, "log_split", log_split)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if log_stream_name is not None:
            pulumi.set(__self__, "log_stream_name", log_stream_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if processor_type is not None:
            pulumi.set(__self__, "processor_type", processor_type)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> Optional[pulumi.Input['HostAccessAccessConfigArgs']]:
        """
        Specifies the configurations of host access.
        The access_config structure is documented below.
        """
        return pulumi.get(self, "access_config")

    @access_config.setter
    def access_config(self, value: Optional[pulumi.Input['HostAccessAccessConfigArgs']]):
        pulumi.set(self, "access_config", value)

    @_builtins.property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The log access type.
        """
        return pulumi.get(self, "access_type")

    @access_type.setter
    def access_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_type", value)

    @_builtins.property
    @pulumi.getter(name="binaryCollect")
    def binary_collect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to allow collection of binary log files.  
        Defaults to **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "binary_collect")

    @binary_collect.setter
    def binary_collect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "binary_collect", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the host access, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessDemoFieldArgs']]]]:
        """
        Specifies the list of the parsed fields of the example log.  
        The demo_fields structure is documented below.
        This parameter must be set together with the `demo_log` parameter.
        This parameter is available when the `processor_type` parameter is specified.
        """
        return pulumi.get(self, "demo_fields")

    @demo_fields.setter
    def demo_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessDemoFieldArgs']]]]):
        pulumi.set(self, "demo_fields", value)

    @_builtins.property
    @pulumi.getter(name="demoLog")
    def demo_log(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the example log of the ICAgent structuring parsing.  
        This parameter is available when the `processor_type` parameter is specified.
        """
        return pulumi.get(self, "demo_log")

    @demo_log.setter
    def demo_log(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "demo_log", value)

    @_builtins.property
    @pulumi.getter(name="encodingFormat")
    def encoding_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the encoding format log file.  
        Defaults to **UTF-8**.
        The valid values are as follows:
        + **UTF-8**
        + **GBK**
        """
        return pulumi.get(self, "encoding_format")

    @encoding_format.setter
    def encoding_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encoding_format", value)

    @_builtins.property
    @pulumi.getter(name="hostGroupIds")
    def host_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the log access host group ID list.
        """
        return pulumi.get(self, "host_group_ids")

    @host_group_ids.setter
    def host_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="incrementalCollect")
    def incremental_collect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to collect incrementally.  
        Defaults to **true**.
        When incremental collection a new file, ICAgent reads the file from the end of the file.
        When full collection a new file, ICAgent reads the file from the beginning of the file.
        """
        return pulumi.get(self, "incremental_collect")

    @incremental_collect.setter
    def incremental_collect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "incremental_collect", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The log group name.
        """
        return pulumi.get(self, "log_group_name")

    @log_group_name.setter
    def log_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_name", value)

    @_builtins.property
    @pulumi.getter(name="logSplit")
    def log_split(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable log splitting.  
        Defaults to **false**.

        <a name="HostAccessConfigDeatil"></a>
        The `access_config` block supports:
        """
        return pulumi.get(self, "log_split")

    @log_split.setter
    def log_split(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log_split", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the log stream ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The log stream name.
        """
        return pulumi.get(self, "log_stream_name")

    @log_stream_name.setter
    def log_stream_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the parsed field.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="processorType")
    def processor_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the ICAgent structuring parsing.  
        This parameter must be set together with the `processors` parameter.
        The valid values are as follows:
        + **SINGLE_LINE**
        + **MULTI_LINE**
        + **REGEX**
        + **MULTI_REGEX**
        + **SPLIT**
        + **JSON**
        + **NGINX**
        + **COMPOSE**
        """
        return pulumi.get(self, "processor_type")

    @processor_type.setter
    def processor_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "processor_type", value)

    @_builtins.property
    @pulumi.getter
    def processors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessProcessorArgs']]]]:
        """
        Specifies the list of the ICAgent structuring parsing rules.  
        The processors structure is documented below.
        This parameter must be set together with the `processor_type` parameter.
        Please refer to the [Setting ICAgent Structuring Parsing Rules](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_07_0072.html).

        > For the same log stream, If you have configured cloud structuring parsing, delete its configurations before configuring
        ICAgent structuring parsing.
        """
        return pulumi.get(self, "processors")

    @processors.setter
    def processors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostAccessProcessorArgs']]]]):
        pulumi.set(self, "processors", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value to attach to the host access.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("huaweicloud:Lts/hostAccess:HostAccess")
class HostAccess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_config: Optional[pulumi.Input[Union['HostAccessAccessConfigArgs', 'HostAccessAccessConfigArgsDict']]] = None,
                 binary_collect: Optional[pulumi.Input[_builtins.bool]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HostAccessDemoFieldArgs', 'HostAccessDemoFieldArgsDict']]]]] = None,
                 demo_log: Optional[pulumi.Input[_builtins.str]] = None,
                 encoding_format: Optional[pulumi.Input[_builtins.str]] = None,
                 host_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 incremental_collect: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_split: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 processor_type: Optional[pulumi.Input[_builtins.str]] = None,
                 processors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HostAccessProcessorArgs', 'HostAccessProcessorArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages an LTS host access resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        group_id = config.require_object("groupId")
        stream_id = config.require_object("streamId")
        host_group_id = config.require_object("hostGroupId")
        test = huaweicloud.lts.HostAccess("test",
            name="access-demo",
            log_group_id=group_id,
            log_stream_id=stream_id,
            host_group_ids=[host_group_id],
            access_config={
                "paths": ["/var/log/*"],
                "black_paths": ["/var/log/*/a.log"],
                "single_log_format": {
                    "mode": "system",
                },
            })
        ```

        ## Import

        The host access can be imported using the `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/hostAccess:HostAccess test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `processors`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_lts_host_access" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              processors,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['HostAccessAccessConfigArgs', 'HostAccessAccessConfigArgsDict']] access_config: Specifies the configurations of host access.
               The access_config structure is documented below.
        :param pulumi.Input[_builtins.bool] binary_collect: Specifies whether to allow collection of binary log files.  
               Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HostAccessDemoFieldArgs', 'HostAccessDemoFieldArgsDict']]]] demo_fields: Specifies the list of the parsed fields of the example log.  
               The demo_fields structure is documented below.
               This parameter must be set together with the `demo_log` parameter.
               This parameter is available when the `processor_type` parameter is specified.
        :param pulumi.Input[_builtins.str] demo_log: Specifies the example log of the ICAgent structuring parsing.  
               This parameter is available when the `processor_type` parameter is specified.
        :param pulumi.Input[_builtins.str] encoding_format: Specifies the encoding format log file.  
               Defaults to **UTF-8**.
               The valid values are as follows:
               + **UTF-8**
               + **GBK**
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_group_ids: Specifies the log access host group ID list.
        :param pulumi.Input[_builtins.bool] incremental_collect: Specifies whether to collect incrementally.  
               Defaults to **true**.
               When incremental collection a new file, ICAgent reads the file from the end of the file.
               When full collection a new file, ICAgent reads the file from the beginning of the file.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] log_split: Specifies whether to enable log splitting.  
               Defaults to **false**.
               
               <a name="HostAccessConfigDeatil"></a>
               The `access_config` block supports:
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parsed field.
        :param pulumi.Input[_builtins.str] processor_type: Specifies the type of the ICAgent structuring parsing.  
               This parameter must be set together with the `processors` parameter.
               The valid values are as follows:
               + **SINGLE_LINE**
               + **MULTI_LINE**
               + **REGEX**
               + **MULTI_REGEX**
               + **SPLIT**
               + **JSON**
               + **NGINX**
               + **COMPOSE**
        :param pulumi.Input[Sequence[pulumi.Input[Union['HostAccessProcessorArgs', 'HostAccessProcessorArgsDict']]]] processors: Specifies the list of the ICAgent structuring parsing rules.  
               The processors structure is documented below.
               This parameter must be set together with the `processor_type` parameter.
               Please refer to the [Setting ICAgent Structuring Parsing Rules](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_07_0072.html).
               
               > For the same log stream, If you have configured cloud structuring parsing, delete its configurations before configuring
               ICAgent structuring parsing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to attach to the host access.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HostAccessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an LTS host access resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        group_id = config.require_object("groupId")
        stream_id = config.require_object("streamId")
        host_group_id = config.require_object("hostGroupId")
        test = huaweicloud.lts.HostAccess("test",
            name="access-demo",
            log_group_id=group_id,
            log_stream_id=stream_id,
            host_group_ids=[host_group_id],
            access_config={
                "paths": ["/var/log/*"],
                "black_paths": ["/var/log/*/a.log"],
                "single_log_format": {
                    "mode": "system",
                },
            })
        ```

        ## Import

        The host access can be imported using the `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/hostAccess:HostAccess test <name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `processors`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the instance. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_lts_host_access" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              processors,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param HostAccessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HostAccessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_config: Optional[pulumi.Input[Union['HostAccessAccessConfigArgs', 'HostAccessAccessConfigArgsDict']]] = None,
                 binary_collect: Optional[pulumi.Input[_builtins.bool]] = None,
                 demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HostAccessDemoFieldArgs', 'HostAccessDemoFieldArgsDict']]]]] = None,
                 demo_log: Optional[pulumi.Input[_builtins.str]] = None,
                 encoding_format: Optional[pulumi.Input[_builtins.str]] = None,
                 host_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 incremental_collect: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_split: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 processor_type: Optional[pulumi.Input[_builtins.str]] = None,
                 processors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HostAccessProcessorArgs', 'HostAccessProcessorArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HostAccessArgs.__new__(HostAccessArgs)

            if access_config is None and not opts.urn:
                raise TypeError("Missing required property 'access_config'")
            __props__.__dict__["access_config"] = access_config
            __props__.__dict__["binary_collect"] = binary_collect
            __props__.__dict__["demo_fields"] = demo_fields
            __props__.__dict__["demo_log"] = demo_log
            __props__.__dict__["encoding_format"] = encoding_format
            __props__.__dict__["host_group_ids"] = host_group_ids
            __props__.__dict__["incremental_collect"] = incremental_collect
            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            __props__.__dict__["log_split"] = log_split
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            __props__.__dict__["name"] = name
            __props__.__dict__["processor_type"] = processor_type
            __props__.__dict__["processors"] = processors
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            __props__.__dict__["access_type"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["log_group_name"] = None
            __props__.__dict__["log_stream_name"] = None
        super(HostAccess, __self__).__init__(
            'huaweicloud:Lts/hostAccess:HostAccess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_config: Optional[pulumi.Input[Union['HostAccessAccessConfigArgs', 'HostAccessAccessConfigArgsDict']]] = None,
            access_type: Optional[pulumi.Input[_builtins.str]] = None,
            binary_collect: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            demo_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HostAccessDemoFieldArgs', 'HostAccessDemoFieldArgsDict']]]]] = None,
            demo_log: Optional[pulumi.Input[_builtins.str]] = None,
            encoding_format: Optional[pulumi.Input[_builtins.str]] = None,
            host_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            incremental_collect: Optional[pulumi.Input[_builtins.bool]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            log_split: Optional[pulumi.Input[_builtins.bool]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_name: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            processor_type: Optional[pulumi.Input[_builtins.str]] = None,
            processors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HostAccessProcessorArgs', 'HostAccessProcessorArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'HostAccess':
        """
        Get an existing HostAccess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['HostAccessAccessConfigArgs', 'HostAccessAccessConfigArgsDict']] access_config: Specifies the configurations of host access.
               The access_config structure is documented below.
        :param pulumi.Input[_builtins.str] access_type: The log access type.
        :param pulumi.Input[_builtins.bool] binary_collect: Specifies whether to allow collection of binary log files.  
               Defaults to **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the host access, in RFC3339 format.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HostAccessDemoFieldArgs', 'HostAccessDemoFieldArgsDict']]]] demo_fields: Specifies the list of the parsed fields of the example log.  
               The demo_fields structure is documented below.
               This parameter must be set together with the `demo_log` parameter.
               This parameter is available when the `processor_type` parameter is specified.
        :param pulumi.Input[_builtins.str] demo_log: Specifies the example log of the ICAgent structuring parsing.  
               This parameter is available when the `processor_type` parameter is specified.
        :param pulumi.Input[_builtins.str] encoding_format: Specifies the encoding format log file.  
               Defaults to **UTF-8**.
               The valid values are as follows:
               + **UTF-8**
               + **GBK**
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_group_ids: Specifies the log access host group ID list.
        :param pulumi.Input[_builtins.bool] incremental_collect: Specifies whether to collect incrementally.  
               Defaults to **true**.
               When incremental collection a new file, ICAgent reads the file from the end of the file.
               When full collection a new file, ICAgent reads the file from the beginning of the file.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the log group ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_group_name: The log group name.
        :param pulumi.Input[_builtins.bool] log_split: Specifies whether to enable log splitting.  
               Defaults to **false**.
               
               <a name="HostAccessConfigDeatil"></a>
               The `access_config` block supports:
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the log stream ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] log_stream_name: The log stream name.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parsed field.
        :param pulumi.Input[_builtins.str] processor_type: Specifies the type of the ICAgent structuring parsing.  
               This parameter must be set together with the `processors` parameter.
               The valid values are as follows:
               + **SINGLE_LINE**
               + **MULTI_LINE**
               + **REGEX**
               + **MULTI_REGEX**
               + **SPLIT**
               + **JSON**
               + **NGINX**
               + **COMPOSE**
        :param pulumi.Input[Sequence[pulumi.Input[Union['HostAccessProcessorArgs', 'HostAccessProcessorArgsDict']]]] processors: Specifies the list of the ICAgent structuring parsing rules.  
               The processors structure is documented below.
               This parameter must be set together with the `processor_type` parameter.
               Please refer to the [Setting ICAgent Structuring Parsing Rules](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_07_0072.html).
               
               > For the same log stream, If you have configured cloud structuring parsing, delete its configurations before configuring
               ICAgent structuring parsing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value to attach to the host access.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HostAccessState.__new__(_HostAccessState)

        __props__.__dict__["access_config"] = access_config
        __props__.__dict__["access_type"] = access_type
        __props__.__dict__["binary_collect"] = binary_collect
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["demo_fields"] = demo_fields
        __props__.__dict__["demo_log"] = demo_log
        __props__.__dict__["encoding_format"] = encoding_format
        __props__.__dict__["host_group_ids"] = host_group_ids
        __props__.__dict__["incremental_collect"] = incremental_collect
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_group_name"] = log_group_name
        __props__.__dict__["log_split"] = log_split
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["log_stream_name"] = log_stream_name
        __props__.__dict__["name"] = name
        __props__.__dict__["processor_type"] = processor_type
        __props__.__dict__["processors"] = processors
        __props__.__dict__["region"] = region
        __props__.__dict__["tags"] = tags
        return HostAccess(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> pulumi.Output['outputs.HostAccessAccessConfig']:
        """
        Specifies the configurations of host access.
        The access_config structure is documented below.
        """
        return pulumi.get(self, "access_config")

    @_builtins.property
    @pulumi.getter(name="accessType")
    def access_type(self) -> pulumi.Output[_builtins.str]:
        """
        The log access type.
        """
        return pulumi.get(self, "access_type")

    @_builtins.property
    @pulumi.getter(name="binaryCollect")
    def binary_collect(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to allow collection of binary log files.  
        Defaults to **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "binary_collect")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the host access, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="demoFields")
    def demo_fields(self) -> pulumi.Output[Optional[Sequence['outputs.HostAccessDemoField']]]:
        """
        Specifies the list of the parsed fields of the example log.  
        The demo_fields structure is documented below.
        This parameter must be set together with the `demo_log` parameter.
        This parameter is available when the `processor_type` parameter is specified.
        """
        return pulumi.get(self, "demo_fields")

    @_builtins.property
    @pulumi.getter(name="demoLog")
    def demo_log(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the example log of the ICAgent structuring parsing.  
        This parameter is available when the `processor_type` parameter is specified.
        """
        return pulumi.get(self, "demo_log")

    @_builtins.property
    @pulumi.getter(name="encodingFormat")
    def encoding_format(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the encoding format log file.  
        Defaults to **UTF-8**.
        The valid values are as follows:
        + **UTF-8**
        + **GBK**
        """
        return pulumi.get(self, "encoding_format")

    @_builtins.property
    @pulumi.getter(name="hostGroupIds")
    def host_group_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the log access host group ID list.
        """
        return pulumi.get(self, "host_group_ids")

    @_builtins.property
    @pulumi.getter(name="incrementalCollect")
    def incremental_collect(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to collect incrementally.  
        Defaults to **true**.
        When incremental collection a new file, ICAgent reads the file from the end of the file.
        When full collection a new file, ICAgent reads the file from the beginning of the file.
        """
        return pulumi.get(self, "incremental_collect")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log group ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The log group name.
        """
        return pulumi.get(self, "log_group_name")

    @_builtins.property
    @pulumi.getter(name="logSplit")
    def log_split(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable log splitting.  
        Defaults to **false**.

        <a name="HostAccessConfigDeatil"></a>
        The `access_config` block supports:
        """
        return pulumi.get(self, "log_split")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the log stream ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> pulumi.Output[_builtins.str]:
        """
        The log stream name.
        """
        return pulumi.get(self, "log_stream_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the parsed field.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="processorType")
    def processor_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of the ICAgent structuring parsing.  
        This parameter must be set together with the `processors` parameter.
        The valid values are as follows:
        + **SINGLE_LINE**
        + **MULTI_LINE**
        + **REGEX**
        + **MULTI_REGEX**
        + **SPLIT**
        + **JSON**
        + **NGINX**
        + **COMPOSE**
        """
        return pulumi.get(self, "processor_type")

    @_builtins.property
    @pulumi.getter
    def processors(self) -> pulumi.Output[Optional[Sequence['outputs.HostAccessProcessor']]]:
        """
        Specifies the list of the ICAgent structuring parsing rules.  
        The processors structure is documented below.
        This parameter must be set together with the `processor_type` parameter.
        Please refer to the [Setting ICAgent Structuring Parsing Rules](https://support.huaweicloud.com/intl/en-us/usermanual-lts/lts_07_0072.html).

        > For the same log stream, If you have configured cloud structuring parsing, delete its configurations before configuring
        ICAgent structuring parsing.
        """
        return pulumi.get(self, "processors")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value to attach to the host access.
        """
        return pulumi.get(self, "tags")

