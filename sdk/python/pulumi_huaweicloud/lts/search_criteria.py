# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SearchCriteriaArgs', 'SearchCriteria']

@pulumi.input_type
class SearchCriteriaArgs:
    def __init__(__self__, *,
                 criteria: pulumi.Input[_builtins.str],
                 log_group_id: pulumi.Input[_builtins.str],
                 log_stream_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SearchCriteria resource.
        :param pulumi.Input[_builtins.str] criteria: Specifies the content of search criteria. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of a log group. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of a log stream. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the search criteria. Available types are
               **ORIGINALLOG** (for raw logs) and **VISUALIZATION** (for visualized logs). Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project ID.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the search criteria. The name can only contain English
               letters, numbers, Chinese characters, hyphens, underscores, and periods. It cannot start with a period or underscore
               or end with a period.Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "type", type)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the content of search criteria. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "criteria", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a log group. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a log stream. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the search criteria. Available types are
        **ORIGINALLOG** (for raw logs) and **VISUALIZATION** (for visualized logs). Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the search criteria. The name can only contain English
        letters, numbers, Chinese characters, hyphens, underscores, and periods. It cannot start with a period or underscore
        or end with a period.Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SearchCriteriaState:
    def __init__(__self__, *,
                 criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SearchCriteria resources.
        :param pulumi.Input[_builtins.str] criteria: Specifies the content of search criteria. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project ID.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of a log group. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of a log stream. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the search criteria. The name can only contain English
               letters, numbers, Chinese characters, hyphens, underscores, and periods. It cannot start with a period or underscore
               or end with a period.Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the search criteria. Available types are
               **ORIGINALLOG** (for raw logs) and **VISUALIZATION** (for visualized logs). Changing this parameter will create a new
               resource.
        """
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_stream_id is not None:
            pulumi.set(__self__, "log_stream_id", log_stream_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the content of search criteria. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "criteria", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a log group. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @log_group_id.setter
    def log_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group_id", value)

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a log stream. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @log_stream_id.setter
    def log_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_stream_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the search criteria. The name can only contain English
        letters, numbers, Chinese characters, hyphens, underscores, and periods. It cannot start with a period or underscore
        or end with a period.Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the search criteria. Available types are
        **ORIGINALLOG** (for raw logs) and **VISUALIZATION** (for visualized logs). Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Lts/searchCriteria:SearchCriteria")
class SearchCriteria(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an LTS search criteria resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.SearchCriteria("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            criteria="content:test",
            name="search_criteria_test",
            type="ORIGINALLOG")
        ```

        ## Import

        The search criteria can be imported using the group ID, stream ID, and resource ID separated by the slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/searchCriteria:SearchCriteria test <log_group_id>/<log_stream_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] criteria: Specifies the content of search criteria. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project ID.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of a log group. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of a log stream. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the search criteria. The name can only contain English
               letters, numbers, Chinese characters, hyphens, underscores, and periods. It cannot start with a period or underscore
               or end with a period.Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the search criteria. Available types are
               **ORIGINALLOG** (for raw logs) and **VISUALIZATION** (for visualized logs). Changing this parameter will create a new
               resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SearchCriteriaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an LTS search criteria resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        log_group_id = config.require_object("logGroupId")
        log_stream_id = config.require_object("logStreamId")
        test = huaweicloud.lts.SearchCriteria("test",
            log_group_id=log_group_id,
            log_stream_id=log_stream_id,
            criteria="content:test",
            name="search_criteria_test",
            type="ORIGINALLOG")
        ```

        ## Import

        The search criteria can be imported using the group ID, stream ID, and resource ID separated by the slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Lts/searchCriteria:SearchCriteria test <log_group_id>/<log_stream_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param SearchCriteriaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SearchCriteriaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SearchCriteriaArgs.__new__(SearchCriteriaArgs)

            if criteria is None and not opts.urn:
                raise TypeError("Missing required property 'criteria'")
            __props__.__dict__["criteria"] = criteria
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if log_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_id'")
            __props__.__dict__["log_group_id"] = log_group_id
            if log_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_stream_id'")
            __props__.__dict__["log_stream_id"] = log_stream_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(SearchCriteria, __self__).__init__(
            'huaweicloud:Lts/searchCriteria:SearchCriteria',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            criteria: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'SearchCriteria':
        """
        Get an existing SearchCriteria resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] criteria: Specifies the content of search criteria. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] enterprise_project_id: The enterprise project ID.
        :param pulumi.Input[_builtins.str] log_group_id: Specifies the ID of a log group. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] log_stream_id: Specifies the ID of a log stream. Changing this parameter will create
               a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the search criteria. The name can only contain English
               letters, numbers, Chinese characters, hyphens, underscores, and periods. It cannot start with a period or underscore
               or end with a period.Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the search criteria. Available types are
               **ORIGINALLOG** (for raw logs) and **VISUALIZATION** (for visualized logs). Changing this parameter will create a new
               resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SearchCriteriaState.__new__(_SearchCriteriaState)

        __props__.__dict__["criteria"] = criteria
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["log_group_id"] = log_group_id
        __props__.__dict__["log_stream_id"] = log_stream_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        return SearchCriteria(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the content of search criteria. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "criteria")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a log group. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a log stream. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the search criteria. The name can only contain English
        letters, numbers, Chinese characters, hyphens, underscores, and periods. It cannot start with a period or underscore
        or end with a period.Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the search criteria. Available types are
        **ORIGINALLOG** (for raw logs) and **VISUALIZATION** (for visualized logs). Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "type")

