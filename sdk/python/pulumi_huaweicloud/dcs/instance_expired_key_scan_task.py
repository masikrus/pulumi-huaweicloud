# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['InstanceExpiredKeyScanTaskArgs', 'InstanceExpiredKeyScanTask']

@pulumi.input_type
class InstanceExpiredKeyScanTaskArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a InstanceExpiredKeyScanTask resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the DCS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _InstanceExpiredKeyScanTaskState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 finished_at: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 num: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scan_type: Optional[pulumi.Input[_builtins.str]] = None,
                 started_at: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering InstanceExpiredKeyScanTask resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when a scan task is created.
        :param pulumi.Input[_builtins.str] finished_at: Indicates the time when a scan task is complete.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
        :param pulumi.Input[_builtins.int] num: Indicates the number of expired keys scanned at a time.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scan_type: Indicates the scan mode.
        :param pulumi.Input[_builtins.str] started_at: Indicates the time when a scan task started.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the expired key scan task.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if num is not None:
            pulumi.set(__self__, "num", num)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scan_type is not None:
            pulumi.set(__self__, "scan_type", scan_type)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when a scan task is created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when a scan task is complete.
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "finished_at", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the DCS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the number of expired keys scanned at a time.
        """
        return pulumi.get(self, "num")

    @num.setter
    def num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "num", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="scanType")
    def scan_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the scan mode.
        """
        return pulumi.get(self, "scan_type")

    @scan_type.setter
    def scan_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scan_type", value)

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when a scan task started.
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "started_at", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the expired key scan task.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Dcs/instanceExpiredKeyScanTask:InstanceExpiredKeyScanTask")
class InstanceExpiredKeyScanTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DCS instance expired key scan task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dcs.InstanceExpiredKeyScanTask("test", instance_id=instance_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceExpiredKeyScanTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DCS instance expired key scan task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dcs.InstanceExpiredKeyScanTask("test", instance_id=instance_id)
        ```

        :param str resource_name: The name of the resource.
        :param InstanceExpiredKeyScanTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceExpiredKeyScanTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceExpiredKeyScanTaskArgs.__new__(InstanceExpiredKeyScanTaskArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["finished_at"] = None
            __props__.__dict__["num"] = None
            __props__.__dict__["scan_type"] = None
            __props__.__dict__["started_at"] = None
            __props__.__dict__["status"] = None
        super(InstanceExpiredKeyScanTask, __self__).__init__(
            'huaweicloud:Dcs/instanceExpiredKeyScanTask:InstanceExpiredKeyScanTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            finished_at: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            num: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scan_type: Optional[pulumi.Input[_builtins.str]] = None,
            started_at: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'InstanceExpiredKeyScanTask':
        """
        Get an existing InstanceExpiredKeyScanTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when a scan task is created.
        :param pulumi.Input[_builtins.str] finished_at: Indicates the time when a scan task is complete.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
        :param pulumi.Input[_builtins.int] num: Indicates the number of expired keys scanned at a time.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] scan_type: Indicates the scan mode.
        :param pulumi.Input[_builtins.str] started_at: Indicates the time when a scan task started.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the expired key scan task.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceExpiredKeyScanTaskState.__new__(_InstanceExpiredKeyScanTaskState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["finished_at"] = finished_at
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["num"] = num
        __props__.__dict__["region"] = region
        __props__.__dict__["scan_type"] = scan_type
        __props__.__dict__["started_at"] = started_at
        __props__.__dict__["status"] = status
        return InstanceExpiredKeyScanTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when a scan task is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when a scan task is complete.
        """
        return pulumi.get(self, "finished_at")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the DCS instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def num(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the number of expired keys scanned at a time.
        """
        return pulumi.get(self, "num")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scanType")
    def scan_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the scan mode.
        """
        return pulumi.get(self, "scan_type")

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when a scan task started.
        """
        return pulumi.get(self, "started_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the expired key scan task.
        """
        return pulumi.get(self, "status")

