# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstancesResult',
    'AwaitableGetInstancesResult',
    'get_instances',
    'get_instances_output',
]

@pulumi.output_type
class GetInstancesResult:
    """
    A collection of values returned by getInstances.
    """
    def __init__(__self__, capacity=None, id=None, instances=None, name=None, private_ip=None, region=None, status=None):
        if capacity and not isinstance(capacity, float):
            raise TypeError("Expected argument 'capacity' to be a float")
        pulumi.set(__self__, "capacity", capacity)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[_builtins.float]:
        """
        Indicates the cache capacity. Unit: GB.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetInstancesInstanceResult']:
        """
        Indicates the list of DCS instances.
        The Instance structure is documented below.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of an instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the IP address of the DCS instance.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the cache instance status.
        """
        return pulumi.get(self, "status")


class AwaitableGetInstancesResult(GetInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstancesResult(
            capacity=self.capacity,
            id=self.id,
            instances=self.instances,
            name=self.name,
            private_ip=self.private_ip,
            region=self.region,
            status=self.status)


def get_instances(capacity: Optional[_builtins.float] = None,
                  name: Optional[_builtins.str] = None,
                  private_ip: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  status: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstancesResult:
    """
    Use this data source to get the list of DCS instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dcs.get_instances(name="test_name",
        status="RUNNING")
    ```


    :param _builtins.float capacity: Specifies the cache capacity. Unit: GB.
    :param _builtins.str name: Specifies the name of an instance.
    :param _builtins.str private_ip: Specifies the subnet Network ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the cache instance status. The valid values are **RUNNING**, **ERROR**,
           **RESTARTING**, **FROZEN**, **EXTENDING**, **RESTORING**, **FLUSHING**.
    """
    __args__ = dict()
    __args__['capacity'] = capacity
    __args__['name'] = name
    __args__['privateIp'] = private_ip
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dcs/getInstances:getInstances', __args__, opts=opts, typ=GetInstancesResult).value

    return AwaitableGetInstancesResult(
        capacity=pulumi.get(__ret__, 'capacity'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        name=pulumi.get(__ret__, 'name'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_instances_output(capacity: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         private_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstancesResult]:
    """
    Use this data source to get the list of DCS instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dcs.get_instances(name="test_name",
        status="RUNNING")
    ```


    :param _builtins.float capacity: Specifies the cache capacity. Unit: GB.
    :param _builtins.str name: Specifies the name of an instance.
    :param _builtins.str private_ip: Specifies the subnet Network ID.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the cache instance status. The valid values are **RUNNING**, **ERROR**,
           **RESTARTING**, **FROZEN**, **EXTENDING**, **RESTORING**, **FLUSHING**.
    """
    __args__ = dict()
    __args__['capacity'] = capacity
    __args__['name'] = name
    __args__['privateIp'] = private_ip
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dcs/getInstances:getInstances', __args__, opts=opts, typ=GetInstancesResult)
    return __ret__.apply(lambda __response__: GetInstancesResult(
        capacity=pulumi.get(__response__, 'capacity'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        name=pulumi.get(__response__, 'name'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
