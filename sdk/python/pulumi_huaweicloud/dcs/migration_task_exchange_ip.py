# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MigrationTaskExchangeIpArgs', 'MigrationTaskExchangeIp']

@pulumi.input_type
class MigrationTaskExchangeIpArgs:
    def __init__(__self__, *,
                 task_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 exchanged_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_exchange_domain: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MigrationTaskExchangeIp resource.
        :param pulumi.Input[_builtins.str] task_id: Specifies the ID of the migration task.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exchanged_ips: Specifies the list of IP address to be switched during data migration.
        :param pulumi.Input[_builtins.bool] is_exchange_domain: Specifies whether to switch the domain name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "task_id", task_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if exchanged_ips is not None:
            pulumi.set(__self__, "exchanged_ips", exchanged_ips)
        if is_exchange_domain is not None:
            pulumi.set(__self__, "is_exchange_domain", is_exchange_domain)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the migration task.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="exchangedIps")
    def exchanged_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of IP address to be switched during data migration.
        """
        return pulumi.get(self, "exchanged_ips")

    @exchanged_ips.setter
    def exchanged_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exchanged_ips", value)

    @_builtins.property
    @pulumi.getter(name="isExchangeDomain")
    def is_exchange_domain(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to switch the domain name.
        """
        return pulumi.get(self, "is_exchange_domain")

    @is_exchange_domain.setter
    def is_exchange_domain(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_exchange_domain", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _MigrationTaskExchangeIpState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 exchanged_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_exchange_domain: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MigrationTaskExchangeIp resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exchanged_ips: Specifies the list of IP address to be switched during data migration.
        :param pulumi.Input[_builtins.bool] is_exchange_domain: Specifies whether to switch the domain name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] task_id: Specifies the ID of the migration task.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if exchanged_ips is not None:
            pulumi.set(__self__, "exchanged_ips", exchanged_ips)
        if is_exchange_domain is not None:
            pulumi.set(__self__, "is_exchange_domain", is_exchange_domain)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="exchangedIps")
    def exchanged_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of IP address to be switched during data migration.
        """
        return pulumi.get(self, "exchanged_ips")

    @exchanged_ips.setter
    def exchanged_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exchanged_ips", value)

    @_builtins.property
    @pulumi.getter(name="isExchangeDomain")
    def is_exchange_domain(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to switch the domain name.
        """
        return pulumi.get(self, "is_exchange_domain")

    @is_exchange_domain.setter
    def is_exchange_domain(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_exchange_domain", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the migration task.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_id", value)


@pulumi.type_token("huaweicloud:Dcs/migrationTaskExchangeIp:MigrationTaskExchangeIp")
class MigrationTaskExchangeIp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 exchanged_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_exchange_domain: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DCS IP addresses exchange of the source and target instances during incremental data migration resource within
        HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_id = config.require_object("taskId")
        test = huaweicloud.dcs.MigrationTaskExchangeIp("test", task_id=task_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exchanged_ips: Specifies the list of IP address to be switched during data migration.
        :param pulumi.Input[_builtins.bool] is_exchange_domain: Specifies whether to switch the domain name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] task_id: Specifies the ID of the migration task.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MigrationTaskExchangeIpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DCS IP addresses exchange of the source and target instances during incremental data migration resource within
        HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_id = config.require_object("taskId")
        test = huaweicloud.dcs.MigrationTaskExchangeIp("test", task_id=task_id)
        ```

        :param str resource_name: The name of the resource.
        :param MigrationTaskExchangeIpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MigrationTaskExchangeIpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 exchanged_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_exchange_domain: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MigrationTaskExchangeIpArgs.__new__(MigrationTaskExchangeIpArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["exchanged_ips"] = exchanged_ips
            __props__.__dict__["is_exchange_domain"] = is_exchange_domain
            __props__.__dict__["region"] = region
            if task_id is None and not opts.urn:
                raise TypeError("Missing required property 'task_id'")
            __props__.__dict__["task_id"] = task_id
        super(MigrationTaskExchangeIp, __self__).__init__(
            'huaweicloud:Dcs/migrationTaskExchangeIp:MigrationTaskExchangeIp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            exchanged_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            is_exchange_domain: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            task_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'MigrationTaskExchangeIp':
        """
        Get an existing MigrationTaskExchangeIp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exchanged_ips: Specifies the list of IP address to be switched during data migration.
        :param pulumi.Input[_builtins.bool] is_exchange_domain: Specifies whether to switch the domain name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] task_id: Specifies the ID of the migration task.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MigrationTaskExchangeIpState.__new__(_MigrationTaskExchangeIpState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["exchanged_ips"] = exchanged_ips
        __props__.__dict__["is_exchange_domain"] = is_exchange_domain
        __props__.__dict__["region"] = region
        __props__.__dict__["task_id"] = task_id
        return MigrationTaskExchangeIp(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="exchangedIps")
    def exchanged_ips(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of IP address to be switched during data migration.
        """
        return pulumi.get(self, "exchanged_ips")

    @_builtins.property
    @pulumi.getter(name="isExchangeDomain")
    def is_exchange_domain(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to switch the domain name.
        """
        return pulumi.get(self, "is_exchange_domain")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the migration task.
        """
        return pulumi.get(self, "task_id")

