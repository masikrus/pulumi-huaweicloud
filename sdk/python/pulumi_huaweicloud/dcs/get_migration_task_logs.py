# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMigrationTaskLogsResult',
    'AwaitableGetMigrationTaskLogsResult',
    'get_migration_task_logs',
    'get_migration_task_logs_output',
]

@pulumi.output_type
class GetMigrationTaskLogsResult:
    """
    A collection of values returned by getMigrationTaskLogs.
    """
    def __init__(__self__, id=None, log_level=None, migration_logs=None, region=None, task_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_level and not isinstance(log_level, str):
            raise TypeError("Expected argument 'log_level' to be a str")
        pulumi.set(__self__, "log_level", log_level)
        if migration_logs and not isinstance(migration_logs, list):
            raise TypeError("Expected argument 'migration_logs' to be a list")
        pulumi.set(__self__, "migration_logs", migration_logs)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[_builtins.str]:
        """
        Indicates the log level.
        """
        return pulumi.get(self, "log_level")

    @_builtins.property
    @pulumi.getter(name="migrationLogs")
    def migration_logs(self) -> Sequence['outputs.GetMigrationTaskLogsMigrationLogResult']:
        """
        Indicates the log list.
        """
        return pulumi.get(self, "migration_logs")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        return pulumi.get(self, "task_id")


class AwaitableGetMigrationTaskLogsResult(GetMigrationTaskLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMigrationTaskLogsResult(
            id=self.id,
            log_level=self.log_level,
            migration_logs=self.migration_logs,
            region=self.region,
            task_id=self.task_id)


def get_migration_task_logs(log_level: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            task_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMigrationTaskLogsResult:
    """
    Use this data source to get the list of the logs of a migration task.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    task_id = config.require_object("taskId")
    test = huaweicloud.Dcs.get_migration_task_logs(task_id=task_id)
    ```


    :param _builtins.str log_level: Indicates the log level.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str task_id: Indicates the ID of the data migration task.
    """
    __args__ = dict()
    __args__['logLevel'] = log_level
    __args__['region'] = region
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dcs/getMigrationTaskLogs:getMigrationTaskLogs', __args__, opts=opts, typ=GetMigrationTaskLogsResult).value

    return AwaitableGetMigrationTaskLogsResult(
        id=pulumi.get(__ret__, 'id'),
        log_level=pulumi.get(__ret__, 'log_level'),
        migration_logs=pulumi.get(__ret__, 'migration_logs'),
        region=pulumi.get(__ret__, 'region'),
        task_id=pulumi.get(__ret__, 'task_id'))
def get_migration_task_logs_output(log_level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   task_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMigrationTaskLogsResult]:
    """
    Use this data source to get the list of the logs of a migration task.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    task_id = config.require_object("taskId")
    test = huaweicloud.Dcs.get_migration_task_logs(task_id=task_id)
    ```


    :param _builtins.str log_level: Indicates the log level.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str task_id: Indicates the ID of the data migration task.
    """
    __args__ = dict()
    __args__['logLevel'] = log_level
    __args__['region'] = region
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dcs/getMigrationTaskLogs:getMigrationTaskLogs', __args__, opts=opts, typ=GetMigrationTaskLogsResult)
    return __ret__.apply(lambda __response__: GetMigrationTaskLogsResult(
        id=pulumi.get(__response__, 'id'),
        log_level=pulumi.get(__response__, 'log_level'),
        migration_logs=pulumi.get(__response__, 'migration_logs'),
        region=pulumi.get(__response__, 'region'),
        task_id=pulumi.get(__response__, 'task_id')))
