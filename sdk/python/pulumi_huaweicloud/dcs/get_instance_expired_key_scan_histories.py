# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceExpiredKeyScanHistoriesResult',
    'AwaitableGetInstanceExpiredKeyScanHistoriesResult',
    'get_instance_expired_key_scan_histories',
    'get_instance_expired_key_scan_histories_output',
]

@pulumi.output_type
class GetInstanceExpiredKeyScanHistoriesResult:
    """
    A collection of values returned by getInstanceExpiredKeyScanHistories.
    """
    def __init__(__self__, id=None, instance_id=None, records=None, region=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetInstanceExpiredKeyScanHistoriesRecordResult']:
        """
        Indicates the expired key record.
        """
        return pulumi.get(self, "records")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the expired key scan task.
        The value can be:
        + **waiting**: The task is to be processed.
        + **running**: The task is being processed.
        + **success**: The task is successful.
        + **failed**: The task fails.
        """
        return pulumi.get(self, "status")


class AwaitableGetInstanceExpiredKeyScanHistoriesResult(GetInstanceExpiredKeyScanHistoriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceExpiredKeyScanHistoriesResult(
            id=self.id,
            instance_id=self.instance_id,
            records=self.records,
            region=self.region,
            status=self.status)


def get_instance_expired_key_scan_histories(instance_id: Optional[_builtins.str] = None,
                                            region: Optional[_builtins.str] = None,
                                            status: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceExpiredKeyScanHistoriesResult:
    """
    Use this data source to get the list of expired key scan records.


    :param _builtins.str instance_id: Specifies the ID of the DCS instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the expired key scan task.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dcs/getInstanceExpiredKeyScanHistories:getInstanceExpiredKeyScanHistories', __args__, opts=opts, typ=GetInstanceExpiredKeyScanHistoriesResult).value

    return AwaitableGetInstanceExpiredKeyScanHistoriesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        records=pulumi.get(__ret__, 'records'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_instance_expired_key_scan_histories_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstanceExpiredKeyScanHistoriesResult]:
    """
    Use this data source to get the list of expired key scan records.


    :param _builtins.str instance_id: Specifies the ID of the DCS instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the expired key scan task.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dcs/getInstanceExpiredKeyScanHistories:getInstanceExpiredKeyScanHistories', __args__, opts=opts, typ=GetInstanceExpiredKeyScanHistoriesResult)
    return __ret__.apply(lambda __response__: GetInstanceExpiredKeyScanHistoriesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        records=pulumi.get(__response__, 'records'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
