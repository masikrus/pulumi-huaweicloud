# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DiagnosisTaskArgs', 'DiagnosisTask']

@pulumi.input_type
class DiagnosisTaskArgs:
    def __init__(__self__, *,
                 begin_time: pulumi.Input[_builtins.str],
                 end_time: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 node_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DiagnosisTask resource.
        :param pulumi.Input[_builtins.str] begin_time: Specifies the start time of the diagnosis task, in RFC3339 format.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] end_time: Specifies the end time of the diagnosis task, in RFC3339 format.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] node_ip_lists: Specifies the IP addresses of diagnosed nodes.
               By default, all nodes are diagnosed. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        if node_ip_lists is not None:
            pulumi.set(__self__, "node_ip_lists", node_ip_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the start time of the diagnosis task, in RFC3339 format.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "begin_time")

    @begin_time.setter
    def begin_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "begin_time", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the end time of the diagnosis task, in RFC3339 format.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the DCS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="nodeIpLists")
    def node_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IP addresses of diagnosed nodes.
        By default, all nodes are diagnosed. Changing this creates a new resource.
        """
        return pulumi.get(self, "node_ip_lists")

    @node_ip_lists.setter
    def node_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_ip_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DiagnosisTaskState:
    def __init__(__self__, *,
                 abnormal_item_sum: Optional[pulumi.Input[_builtins.int]] = None,
                 begin_time: Optional[pulumi.Input[_builtins.str]] = None,
                 diagnosis_node_report_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DiagnosisTaskDiagnosisNodeReportListArgs']]]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 failed_item_sum: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DiagnosisTask resources.
        :param pulumi.Input[_builtins.int] abnormal_item_sum: Indicates the total number of abnormal diagnosis items.
        :param pulumi.Input[_builtins.str] begin_time: Specifies the start time of the diagnosis task, in RFC3339 format.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DiagnosisTaskDiagnosisNodeReportListArgs']]] diagnosis_node_report_lists: Indicates the list of node diagnosis report
               The diagnosis_node_report_list structure is documented below.
        :param pulumi.Input[_builtins.str] end_time: Specifies the end time of the diagnosis task, in RFC3339 format.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] failed_item_sum: Indicates the total number of failed diagnosis items.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] node_ip_lists: Specifies the IP addresses of diagnosed nodes.
               By default, all nodes are diagnosed. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        if abnormal_item_sum is not None:
            pulumi.set(__self__, "abnormal_item_sum", abnormal_item_sum)
        if begin_time is not None:
            pulumi.set(__self__, "begin_time", begin_time)
        if diagnosis_node_report_lists is not None:
            pulumi.set(__self__, "diagnosis_node_report_lists", diagnosis_node_report_lists)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if failed_item_sum is not None:
            pulumi.set(__self__, "failed_item_sum", failed_item_sum)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if node_ip_lists is not None:
            pulumi.set(__self__, "node_ip_lists", node_ip_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="abnormalItemSum")
    def abnormal_item_sum(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the total number of abnormal diagnosis items.
        """
        return pulumi.get(self, "abnormal_item_sum")

    @abnormal_item_sum.setter
    def abnormal_item_sum(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "abnormal_item_sum", value)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the start time of the diagnosis task, in RFC3339 format.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "begin_time")

    @begin_time.setter
    def begin_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "begin_time", value)

    @_builtins.property
    @pulumi.getter(name="diagnosisNodeReportLists")
    def diagnosis_node_report_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DiagnosisTaskDiagnosisNodeReportListArgs']]]]:
        """
        Indicates the list of node diagnosis report
        The diagnosis_node_report_list structure is documented below.
        """
        return pulumi.get(self, "diagnosis_node_report_lists")

    @diagnosis_node_report_lists.setter
    def diagnosis_node_report_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DiagnosisTaskDiagnosisNodeReportListArgs']]]]):
        pulumi.set(self, "diagnosis_node_report_lists", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the end time of the diagnosis task, in RFC3339 format.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="failedItemSum")
    def failed_item_sum(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the total number of failed diagnosis items.
        """
        return pulumi.get(self, "failed_item_sum")

    @failed_item_sum.setter
    def failed_item_sum(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "failed_item_sum", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the DCS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="nodeIpLists")
    def node_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IP addresses of diagnosed nodes.
        By default, all nodes are diagnosed. Changing this creates a new resource.
        """
        return pulumi.get(self, "node_ip_lists")

    @node_ip_lists.setter
    def node_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_ip_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dcs/diagnosisTask:DiagnosisTask")
class DiagnosisTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 begin_time: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DCS diagnosis task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dcs.DiagnosisTask("test",
            instance_id=instance_id,
            begin_time="2024-03-11T01:17:48.998Z",
            end_time="2024-03-11T01:27:48.998Z",
            node_ip_lists=["10.168.179.171"])
        ```

        ## Import

        The DCS diagnosis task can be imported using `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dcs/diagnosisTask:DiagnosisTask test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] begin_time: Specifies the start time of the diagnosis task, in RFC3339 format.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] end_time: Specifies the end time of the diagnosis task, in RFC3339 format.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] node_ip_lists: Specifies the IP addresses of diagnosed nodes.
               By default, all nodes are diagnosed. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DiagnosisTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DCS diagnosis task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.dcs.DiagnosisTask("test",
            instance_id=instance_id,
            begin_time="2024-03-11T01:17:48.998Z",
            end_time="2024-03-11T01:27:48.998Z",
            node_ip_lists=["10.168.179.171"])
        ```

        ## Import

        The DCS diagnosis task can be imported using `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dcs/diagnosisTask:DiagnosisTask test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param DiagnosisTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DiagnosisTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 begin_time: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DiagnosisTaskArgs.__new__(DiagnosisTaskArgs)

            if begin_time is None and not opts.urn:
                raise TypeError("Missing required property 'begin_time'")
            __props__.__dict__["begin_time"] = begin_time
            if end_time is None and not opts.urn:
                raise TypeError("Missing required property 'end_time'")
            __props__.__dict__["end_time"] = end_time
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["node_ip_lists"] = node_ip_lists
            __props__.__dict__["region"] = region
            __props__.__dict__["abnormal_item_sum"] = None
            __props__.__dict__["diagnosis_node_report_lists"] = None
            __props__.__dict__["failed_item_sum"] = None
        super(DiagnosisTask, __self__).__init__(
            'huaweicloud:Dcs/diagnosisTask:DiagnosisTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abnormal_item_sum: Optional[pulumi.Input[_builtins.int]] = None,
            begin_time: Optional[pulumi.Input[_builtins.str]] = None,
            diagnosis_node_report_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DiagnosisTaskDiagnosisNodeReportListArgs', 'DiagnosisTaskDiagnosisNodeReportListArgsDict']]]]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            failed_item_sum: Optional[pulumi.Input[_builtins.int]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            node_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'DiagnosisTask':
        """
        Get an existing DiagnosisTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] abnormal_item_sum: Indicates the total number of abnormal diagnosis items.
        :param pulumi.Input[_builtins.str] begin_time: Specifies the start time of the diagnosis task, in RFC3339 format.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DiagnosisTaskDiagnosisNodeReportListArgs', 'DiagnosisTaskDiagnosisNodeReportListArgsDict']]]] diagnosis_node_report_lists: Indicates the list of node diagnosis report
               The diagnosis_node_report_list structure is documented below.
        :param pulumi.Input[_builtins.str] end_time: Specifies the end time of the diagnosis task, in RFC3339 format.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] failed_item_sum: Indicates the total number of failed diagnosis items.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] node_ip_lists: Specifies the IP addresses of diagnosed nodes.
               By default, all nodes are diagnosed. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DiagnosisTaskState.__new__(_DiagnosisTaskState)

        __props__.__dict__["abnormal_item_sum"] = abnormal_item_sum
        __props__.__dict__["begin_time"] = begin_time
        __props__.__dict__["diagnosis_node_report_lists"] = diagnosis_node_report_lists
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["failed_item_sum"] = failed_item_sum
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["node_ip_lists"] = node_ip_lists
        __props__.__dict__["region"] = region
        return DiagnosisTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="abnormalItemSum")
    def abnormal_item_sum(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the total number of abnormal diagnosis items.
        """
        return pulumi.get(self, "abnormal_item_sum")

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the start time of the diagnosis task, in RFC3339 format.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="diagnosisNodeReportLists")
    def diagnosis_node_report_lists(self) -> pulumi.Output[Sequence['outputs.DiagnosisTaskDiagnosisNodeReportList']]:
        """
        Indicates the list of node diagnosis report
        The diagnosis_node_report_list structure is documented below.
        """
        return pulumi.get(self, "diagnosis_node_report_lists")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the end time of the diagnosis task, in RFC3339 format.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="failedItemSum")
    def failed_item_sum(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the total number of failed diagnosis items.
        """
        return pulumi.get(self, "failed_item_sum")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the DCS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="nodeIpLists")
    def node_ip_lists(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the IP addresses of diagnosed nodes.
        By default, all nodes are diagnosed. Changing this creates a new resource.
        """
        return pulumi.get(self, "node_ip_lists")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

