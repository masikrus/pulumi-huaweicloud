# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAccountsResult',
    'AwaitableGetAccountsResult',
    'get_accounts',
    'get_accounts_output',
]

@pulumi.output_type
class GetAccountsResult:
    """
    A collection of values returned by getAccounts.
    """
    def __init__(__self__, account_name=None, account_role=None, account_type=None, accounts=None, description=None, id=None, instance_id=None, region=None, status=None):
        if account_name and not isinstance(account_name, str):
            raise TypeError("Expected argument 'account_name' to be a str")
        pulumi.set(__self__, "account_name", account_name)
        if account_role and not isinstance(account_role, str):
            raise TypeError("Expected argument 'account_role' to be a str")
        pulumi.set(__self__, "account_role", account_role)
        if account_type and not isinstance(account_type, str):
            raise TypeError("Expected argument 'account_type' to be a str")
        pulumi.set(__self__, "account_type", account_type)
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[_builtins.str]:
        """
        Account name.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[_builtins.str]:
        """
        Account permissions.
        """
        return pulumi.get(self, "account_role")

    @_builtins.property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[_builtins.str]:
        """
        Account type.
        """
        return pulumi.get(self, "account_type")

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetAccountsAccountResult']:
        """
        ACL account list.
        """
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Account description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Account status.
        The value can be:
        + **CREATING**: The account is being created.
        + **AVAILABLE**: The account is available.
        + **CREATEFAILED**: The account fails to be created.
        + **DELETED**: The account has been deleted.
        + **DELETEFAILED**: The account fails to be deleted.
        + **DELETING**: The account is being deleted.
        + **UPDATING**: The account is being updated.
        + **ERROR**: The account is abnormal.
        """
        return pulumi.get(self, "status")


class AwaitableGetAccountsResult(GetAccountsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountsResult(
            account_name=self.account_name,
            account_role=self.account_role,
            account_type=self.account_type,
            accounts=self.accounts,
            description=self.description,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            status=self.status)


def get_accounts(account_name: Optional[_builtins.str] = None,
                 account_role: Optional[_builtins.str] = None,
                 account_type: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountsResult:
    """
    Use this data source to get the list of DCS accounts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Dcs.get_accounts(instance_id=instance_id)
    ```


    :param _builtins.str account_name: Specifies the account name.
    :param _builtins.str account_role: Specifies the account role. The value can be **read** or **write**.
    :param _builtins.str account_type: Specifies the account type. The value can be **normal** or **default**.
    :param _builtins.str description: Specifies the account description.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the account status.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['accountRole'] = account_role
    __args__['accountType'] = account_type
    __args__['description'] = description
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dcs/getAccounts:getAccounts', __args__, opts=opts, typ=GetAccountsResult).value

    return AwaitableGetAccountsResult(
        account_name=pulumi.get(__ret__, 'account_name'),
        account_role=pulumi.get(__ret__, 'account_role'),
        account_type=pulumi.get(__ret__, 'account_type'),
        accounts=pulumi.get(__ret__, 'accounts'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_accounts_output(account_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        account_role: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        account_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAccountsResult]:
    """
    Use this data source to get the list of DCS accounts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Dcs.get_accounts(instance_id=instance_id)
    ```


    :param _builtins.str account_name: Specifies the account name.
    :param _builtins.str account_role: Specifies the account role. The value can be **read** or **write**.
    :param _builtins.str account_type: Specifies the account type. The value can be **normal** or **default**.
    :param _builtins.str description: Specifies the account description.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the account status.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['accountRole'] = account_role
    __args__['accountType'] = account_type
    __args__['description'] = description
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dcs/getAccounts:getAccounts', __args__, opts=opts, typ=GetAccountsResult)
    return __ret__.apply(lambda __response__: GetAccountsResult(
        account_name=pulumi.get(__response__, 'account_name'),
        account_role=pulumi.get(__response__, 'account_role'),
        account_type=pulumi.get(__response__, 'account_type'),
        accounts=pulumi.get(__response__, 'accounts'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
