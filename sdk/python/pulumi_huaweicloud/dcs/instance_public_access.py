# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstancePublicAccessArgs', 'InstancePublicAccess']

@pulumi.input_type
class InstancePublicAccessArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 elb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_ssl: Optional[pulumi.Input[_builtins.bool]] = None,
                 publicip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a InstancePublicAccess resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
        :param pulumi.Input[_builtins.str] elb_id: Specifies the ID of the load balancer bound for public access. This
               parameter is mandatory when **Redis 4.0** or later is used.
        :param pulumi.Input[_builtins.bool] enable_ssl: Specifies whether to enable SSL. This parameter has a value only when SSL
               is enabled. This parameter is mandatory for **Redis 3.0**.
        :param pulumi.Input[_builtins.str] publicip_id: Specifies the ID of the public IP address. This parameter is mandatory
               when **Redis 3.0** is used.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if elb_id is not None:
            pulumi.set(__self__, "elb_id", elb_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enable_ssl is not None:
            pulumi.set(__self__, "enable_ssl", enable_ssl)
        if publicip_id is not None:
            pulumi.set(__self__, "publicip_id", publicip_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the DCS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="elbId")
    def elb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the load balancer bound for public access. This
        parameter is mandatory when **Redis 4.0** or later is used.
        """
        return pulumi.get(self, "elb_id")

    @elb_id.setter
    def elb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "elb_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enableSsl")
    def enable_ssl(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable SSL. This parameter has a value only when SSL
        is enabled. This parameter is mandatory for **Redis 3.0**.
        """
        return pulumi.get(self, "enable_ssl")

    @enable_ssl.setter
    def enable_ssl(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_ssl", value)

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the public IP address. This parameter is mandatory
        when **Redis 3.0** is used.
        """
        return pulumi.get(self, "publicip_id")

    @publicip_id.setter
    def publicip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publicip_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _InstancePublicAccessState:
    def __init__(__self__, *,
                 eip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 elb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 elb_listeners: Optional[pulumi.Input[Sequence[pulumi.Input['InstancePublicAccessElbListenerArgs']]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_ssl: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 publicip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering InstancePublicAccess resources.
        :param pulumi.Input[_builtins.str] eip_address: Indicates the address of the EIP.
        :param pulumi.Input[_builtins.str] eip_id: Indicates the ID of the EIP.
        :param pulumi.Input[_builtins.str] elb_id: Specifies the ID of the load balancer bound for public access. This
               parameter is mandatory when **Redis 4.0** or later is used.
        :param pulumi.Input[Sequence[pulumi.Input['InstancePublicAccessElbListenerArgs']]] elb_listeners: Indicates the list of the ELB listeners.
               The elb_listeners structure is documented below.
        :param pulumi.Input[_builtins.bool] enable_ssl: Specifies whether to enable SSL. This parameter has a value only when SSL
               is enabled. This parameter is mandatory for **Redis 3.0**.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
        :param pulumi.Input[_builtins.str] publicip_id: Specifies the ID of the public IP address. This parameter is mandatory
               when **Redis 3.0** is used.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if eip_address is not None:
            pulumi.set(__self__, "eip_address", eip_address)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if elb_id is not None:
            pulumi.set(__self__, "elb_id", elb_id)
        if elb_listeners is not None:
            pulumi.set(__self__, "elb_listeners", elb_listeners)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enable_ssl is not None:
            pulumi.set(__self__, "enable_ssl", enable_ssl)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if publicip_id is not None:
            pulumi.set(__self__, "publicip_id", publicip_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="eipAddress")
    def eip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the address of the EIP.
        """
        return pulumi.get(self, "eip_address")

    @eip_address.setter
    def eip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip_address", value)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the EIP.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip_id", value)

    @_builtins.property
    @pulumi.getter(name="elbId")
    def elb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the load balancer bound for public access. This
        parameter is mandatory when **Redis 4.0** or later is used.
        """
        return pulumi.get(self, "elb_id")

    @elb_id.setter
    def elb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "elb_id", value)

    @_builtins.property
    @pulumi.getter(name="elbListeners")
    def elb_listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstancePublicAccessElbListenerArgs']]]]:
        """
        Indicates the list of the ELB listeners.
        The elb_listeners structure is documented below.
        """
        return pulumi.get(self, "elb_listeners")

    @elb_listeners.setter
    def elb_listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstancePublicAccessElbListenerArgs']]]]):
        pulumi.set(self, "elb_listeners", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enableSsl")
    def enable_ssl(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable SSL. This parameter has a value only when SSL
        is enabled. This parameter is mandatory for **Redis 3.0**.
        """
        return pulumi.get(self, "enable_ssl")

    @enable_ssl.setter
    def enable_ssl(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_ssl", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the DCS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the public IP address. This parameter is mandatory
        when **Redis 3.0** is used.
        """
        return pulumi.get(self, "publicip_id")

    @publicip_id.setter
    def publicip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publicip_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Dcs/instancePublicAccess:InstancePublicAccess")
class InstancePublicAccess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 elb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_ssl: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 publicip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DCS instance public access resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        elb_id = config.require_object("elbId")
        test = huaweicloud.dcs.InstancePublicAccess("test",
            instance_id=instance_id,
            elb_id=elb_id)
        ```

        ## Import

        The DCS instance public access can be imported using the `id`, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Dcs/instancePublicAccess:InstancePublicAccess test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `publicip_id` and `enable_ssl`. It is

        generally recommended running `pulumi preview` after importing a resource. You can then decide if changes should be

        applied to the resource, or the resource definition should be updated to align with the resource. Also, you can ignore

        changes as below.

        bash

        resource "huaweicloud_dcs_instance_public_access" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              publicip_id, enable_ssl,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] elb_id: Specifies the ID of the load balancer bound for public access. This
               parameter is mandatory when **Redis 4.0** or later is used.
        :param pulumi.Input[_builtins.bool] enable_ssl: Specifies whether to enable SSL. This parameter has a value only when SSL
               is enabled. This parameter is mandatory for **Redis 3.0**.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
        :param pulumi.Input[_builtins.str] publicip_id: Specifies the ID of the public IP address. This parameter is mandatory
               when **Redis 3.0** is used.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstancePublicAccessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DCS instance public access resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        elb_id = config.require_object("elbId")
        test = huaweicloud.dcs.InstancePublicAccess("test",
            instance_id=instance_id,
            elb_id=elb_id)
        ```

        ## Import

        The DCS instance public access can be imported using the `id`, e.g.:

        bash

        ```sh
        $ pulumi import huaweicloud:Dcs/instancePublicAccess:InstancePublicAccess test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `publicip_id` and `enable_ssl`. It is

        generally recommended running `pulumi preview` after importing a resource. You can then decide if changes should be

        applied to the resource, or the resource definition should be updated to align with the resource. Also, you can ignore

        changes as below.

        bash

        resource "huaweicloud_dcs_instance_public_access" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              publicip_id, enable_ssl,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param InstancePublicAccessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstancePublicAccessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 elb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_ssl: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 publicip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstancePublicAccessArgs.__new__(InstancePublicAccessArgs)

            __props__.__dict__["elb_id"] = elb_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["enable_ssl"] = enable_ssl
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["publicip_id"] = publicip_id
            __props__.__dict__["region"] = region
            __props__.__dict__["eip_address"] = None
            __props__.__dict__["eip_id"] = None
            __props__.__dict__["elb_listeners"] = None
        super(InstancePublicAccess, __self__).__init__(
            'huaweicloud:Dcs/instancePublicAccess:InstancePublicAccess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            eip_address: Optional[pulumi.Input[_builtins.str]] = None,
            eip_id: Optional[pulumi.Input[_builtins.str]] = None,
            elb_id: Optional[pulumi.Input[_builtins.str]] = None,
            elb_listeners: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstancePublicAccessElbListenerArgs', 'InstancePublicAccessElbListenerArgsDict']]]]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enable_ssl: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            publicip_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'InstancePublicAccess':
        """
        Get an existing InstancePublicAccess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] eip_address: Indicates the address of the EIP.
        :param pulumi.Input[_builtins.str] eip_id: Indicates the ID of the EIP.
        :param pulumi.Input[_builtins.str] elb_id: Specifies the ID of the load balancer bound for public access. This
               parameter is mandatory when **Redis 4.0** or later is used.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InstancePublicAccessElbListenerArgs', 'InstancePublicAccessElbListenerArgsDict']]]] elb_listeners: Indicates the list of the ELB listeners.
               The elb_listeners structure is documented below.
        :param pulumi.Input[_builtins.bool] enable_ssl: Specifies whether to enable SSL. This parameter has a value only when SSL
               is enabled. This parameter is mandatory for **Redis 3.0**.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the DCS instance.
        :param pulumi.Input[_builtins.str] publicip_id: Specifies the ID of the public IP address. This parameter is mandatory
               when **Redis 3.0** is used.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstancePublicAccessState.__new__(_InstancePublicAccessState)

        __props__.__dict__["eip_address"] = eip_address
        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["elb_id"] = elb_id
        __props__.__dict__["elb_listeners"] = elb_listeners
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enable_ssl"] = enable_ssl
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["publicip_id"] = publicip_id
        __props__.__dict__["region"] = region
        return InstancePublicAccess(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="eipAddress")
    def eip_address(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the address of the EIP.
        """
        return pulumi.get(self, "eip_address")

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the ID of the EIP.
        """
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter(name="elbId")
    def elb_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the load balancer bound for public access. This
        parameter is mandatory when **Redis 4.0** or later is used.
        """
        return pulumi.get(self, "elb_id")

    @_builtins.property
    @pulumi.getter(name="elbListeners")
    def elb_listeners(self) -> pulumi.Output[Sequence['outputs.InstancePublicAccessElbListener']]:
        """
        Indicates the list of the ELB listeners.
        The elb_listeners structure is documented below.
        """
        return pulumi.get(self, "elb_listeners")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enableSsl")
    def enable_ssl(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable SSL. This parameter has a value only when SSL
        is enabled. This parameter is mandatory for **Redis 3.0**.
        """
        return pulumi.get(self, "enable_ssl")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the DCS instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the public IP address. This parameter is mandatory
        when **Redis 3.0** is used.
        """
        return pulumi.get(self, "publicip_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

