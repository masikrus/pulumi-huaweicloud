# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTemplateDetailResult',
    'AwaitableGetTemplateDetailResult',
    'get_template_detail',
    'get_template_detail_output',
]

@pulumi.output_type
class GetTemplateDetailResult:
    """
    A collection of values returned by getTemplateDetail.
    """
    def __init__(__self__, cache_mode=None, description=None, engine=None, engine_version=None, id=None, name=None, params=None, product_type=None, region=None, storage_type=None, template_id=None, type=None):
        if cache_mode and not isinstance(cache_mode, str):
            raise TypeError("Expected argument 'cache_mode' to be a str")
        pulumi.set(__self__, "cache_mode", cache_mode)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if params and not isinstance(params, list):
            raise TypeError("Expected argument 'params' to be a list")
        pulumi.set(__self__, "params", params)
        if product_type and not isinstance(product_type, str):
            raise TypeError("Expected argument 'product_type' to be a str")
        pulumi.set(__self__, "product_type", product_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if storage_type and not isinstance(storage_type, str):
            raise TypeError("Expected argument 'storage_type' to be a str")
        pulumi.set(__self__, "storage_type", storage_type)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cacheMode")
    def cache_mode(self) -> _builtins.str:
        """
        Indicates the DCS instance type. The value can be **single**, **ha**, **cluster**, **proxy**,
        **ha_rw_split**.
        """
        return pulumi.get(self, "cache_mode")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the param.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Indicates the cache engine. Currently, only **Redis** is supported.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Indicates the cache engine version. The value can be **4.0**, **5.0**, **6.0**.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the template.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[Sequence['outputs.GetTemplateDetailParamResult']]:
        """
        Indicates the list of the template params.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> _builtins.str:
        """
        Indicates the product edition. The value can be **generic**, **enterprise**.
        """
        return pulumi.get(self, "product_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> _builtins.str:
        """
        Indicates the storage type. The value can be **DRAM**, **SSD**.
        """
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> _builtins.str:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type of the template. The value can be **sys**, **user**.
        """
        return pulumi.get(self, "type")


class AwaitableGetTemplateDetailResult(GetTemplateDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTemplateDetailResult(
            cache_mode=self.cache_mode,
            description=self.description,
            engine=self.engine,
            engine_version=self.engine_version,
            id=self.id,
            name=self.name,
            params=self.params,
            product_type=self.product_type,
            region=self.region,
            storage_type=self.storage_type,
            template_id=self.template_id,
            type=self.type)


def get_template_detail(params: Optional[Sequence[Union['GetTemplateDetailParamArgs', 'GetTemplateDetailParamArgsDict']]] = None,
                        region: Optional[_builtins.str] = None,
                        template_id: Optional[_builtins.str] = None,
                        type: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTemplateDetailResult:
    """
    Use this data source to get the detail of DCS template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    template_id = config.require_object("templateId")
    test = huaweicloud.Dcs.get_template_detail(template_id=template_id,
        type="sys")
    ```


    :param Sequence[Union['GetTemplateDetailParamArgs', 'GetTemplateDetailParamArgsDict']] params: Specifies the list of the template params.
           The params structure is documented below.
           
           <a name="TemplateDetail_Param"></a>
           The `params` block supports:
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str template_id: Specifies the ID of the template.
    :param _builtins.str type: Specifies the type of the template. Value options:
           + **sys**: system template.
           + **user**: custom template.
    """
    __args__ = dict()
    __args__['params'] = params
    __args__['region'] = region
    __args__['templateId'] = template_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dcs/getTemplateDetail:getTemplateDetail', __args__, opts=opts, typ=GetTemplateDetailResult).value

    return AwaitableGetTemplateDetailResult(
        cache_mode=pulumi.get(__ret__, 'cache_mode'),
        description=pulumi.get(__ret__, 'description'),
        engine=pulumi.get(__ret__, 'engine'),
        engine_version=pulumi.get(__ret__, 'engine_version'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        params=pulumi.get(__ret__, 'params'),
        product_type=pulumi.get(__ret__, 'product_type'),
        region=pulumi.get(__ret__, 'region'),
        storage_type=pulumi.get(__ret__, 'storage_type'),
        template_id=pulumi.get(__ret__, 'template_id'),
        type=pulumi.get(__ret__, 'type'))
def get_template_detail_output(params: Optional[pulumi.Input[Optional[Sequence[Union['GetTemplateDetailParamArgs', 'GetTemplateDetailParamArgsDict']]]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               template_id: Optional[pulumi.Input[_builtins.str]] = None,
                               type: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTemplateDetailResult]:
    """
    Use this data source to get the detail of DCS template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    template_id = config.require_object("templateId")
    test = huaweicloud.Dcs.get_template_detail(template_id=template_id,
        type="sys")
    ```


    :param Sequence[Union['GetTemplateDetailParamArgs', 'GetTemplateDetailParamArgsDict']] params: Specifies the list of the template params.
           The params structure is documented below.
           
           <a name="TemplateDetail_Param"></a>
           The `params` block supports:
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str template_id: Specifies the ID of the template.
    :param _builtins.str type: Specifies the type of the template. Value options:
           + **sys**: system template.
           + **user**: custom template.
    """
    __args__ = dict()
    __args__['params'] = params
    __args__['region'] = region
    __args__['templateId'] = template_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dcs/getTemplateDetail:getTemplateDetail', __args__, opts=opts, typ=GetTemplateDetailResult)
    return __ret__.apply(lambda __response__: GetTemplateDetailResult(
        cache_mode=pulumi.get(__response__, 'cache_mode'),
        description=pulumi.get(__response__, 'description'),
        engine=pulumi.get(__response__, 'engine'),
        engine_version=pulumi.get(__response__, 'engine_version'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        params=pulumi.get(__response__, 'params'),
        product_type=pulumi.get(__response__, 'product_type'),
        region=pulumi.get(__response__, 'region'),
        storage_type=pulumi.get(__response__, 'storage_type'),
        template_id=pulumi.get(__response__, 'template_id'),
        type=pulumi.get(__response__, 'type')))
