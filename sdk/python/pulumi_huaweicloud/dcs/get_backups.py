# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBackupsResult',
    'AwaitableGetBackupsResult',
    'get_backups',
    'get_backups_output',
]

@pulumi.output_type
class GetBackupsResult:
    """
    A collection of values returned by getBackups.
    """
    def __init__(__self__, backup_format=None, backup_id=None, backups=None, begin_time=None, end_time=None, id=None, instance_id=None, is_support_restore=None, name=None, region=None, status=None, type=None):
        if backup_format and not isinstance(backup_format, str):
            raise TypeError("Expected argument 'backup_format' to be a str")
        pulumi.set(__self__, "backup_format", backup_format)
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if backups and not isinstance(backups, list):
            raise TypeError("Expected argument 'backups' to be a list")
        pulumi.set(__self__, "backups", backups)
        if begin_time and not isinstance(begin_time, str):
            raise TypeError("Expected argument 'begin_time' to be a str")
        pulumi.set(__self__, "begin_time", begin_time)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if is_support_restore and not isinstance(is_support_restore, str):
            raise TypeError("Expected argument 'is_support_restore' to be a str")
        pulumi.set(__self__, "is_support_restore", is_support_restore)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="backupFormat")
    def backup_format(self) -> Optional[_builtins.str]:
        """
        Indicates the format of the DCS instance backup.
        """
        return pulumi.get(self, "backup_format")

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetBackupsBackupResult']:
        """
        The list of backups.
        The backups structure is documented below.
        """
        return pulumi.get(self, "backups")

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[_builtins.str]:
        """
        Indicates the time when the backup task is created. The format is yyyy-mm-dd hh:mm:ss.
        The value is in UTC format.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Indicates the time at which DCS instance backup is completed. The format is yyyy-mm-dd hh:mm:ss.
        The value is in UTC format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the ID of the DCS instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isSupportRestore")
    def is_support_restore(self) -> Optional[_builtins.str]:
        """
        Indicates whether restoration is supported.
        """
        return pulumi.get(self, "is_support_restore")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the backup name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the backup status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the backup type.
        """
        return pulumi.get(self, "type")


class AwaitableGetBackupsResult(GetBackupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupsResult(
            backup_format=self.backup_format,
            backup_id=self.backup_id,
            backups=self.backups,
            begin_time=self.begin_time,
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            is_support_restore=self.is_support_restore,
            name=self.name,
            region=self.region,
            status=self.status,
            type=self.type)


def get_backups(backup_format: Optional[_builtins.str] = None,
                backup_id: Optional[_builtins.str] = None,
                begin_time: Optional[_builtins.str] = None,
                end_time: Optional[_builtins.str] = None,
                instance_id: Optional[_builtins.str] = None,
                is_support_restore: Optional[_builtins.str] = None,
                name: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                status: Optional[_builtins.str] = None,
                type: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupsResult:
    """
    Use this data source to get the list of DCS backups.


    :param _builtins.str backup_format: Specifies the format of the DCS instance backup.
           Value options: **aof**, **rdb**.
    :param _builtins.str backup_id: Specifies the ID of the DCS instance backup.
    :param _builtins.str begin_time: Specifies the start time (UTC) of DCS backups.
           The format is **yyyymmddhhmmss**, for example, 20231201000000.
    :param _builtins.str end_time: Specifies the end time (UTC) of DCS backups.
           The format is **yyyymmddhhmmss**, for example, 20231201000000.
    :param _builtins.str instance_id: Specifies the ID of the DCS instance.
    :param _builtins.str is_support_restore: Specifies whether restoration is supported.
           Value Options: **TRUE**, **FALSE**.
    :param _builtins.str name: Specifies the backup name.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the backup status.
           Value options: **waiting**, **backuping**, **succeed**, **failed**, **expired**, **deleted**.
    :param _builtins.str type: Specifies the backup type.
           Value options: **manual**, **auto**.
    """
    __args__ = dict()
    __args__['backupFormat'] = backup_format
    __args__['backupId'] = backup_id
    __args__['beginTime'] = begin_time
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['isSupportRestore'] = is_support_restore
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dcs/getBackups:getBackups', __args__, opts=opts, typ=GetBackupsResult).value

    return AwaitableGetBackupsResult(
        backup_format=pulumi.get(__ret__, 'backup_format'),
        backup_id=pulumi.get(__ret__, 'backup_id'),
        backups=pulumi.get(__ret__, 'backups'),
        begin_time=pulumi.get(__ret__, 'begin_time'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        is_support_restore=pulumi.get(__ret__, 'is_support_restore'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_backups_output(backup_format: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       backup_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       begin_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                       is_support_restore: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupsResult]:
    """
    Use this data source to get the list of DCS backups.


    :param _builtins.str backup_format: Specifies the format of the DCS instance backup.
           Value options: **aof**, **rdb**.
    :param _builtins.str backup_id: Specifies the ID of the DCS instance backup.
    :param _builtins.str begin_time: Specifies the start time (UTC) of DCS backups.
           The format is **yyyymmddhhmmss**, for example, 20231201000000.
    :param _builtins.str end_time: Specifies the end time (UTC) of DCS backups.
           The format is **yyyymmddhhmmss**, for example, 20231201000000.
    :param _builtins.str instance_id: Specifies the ID of the DCS instance.
    :param _builtins.str is_support_restore: Specifies whether restoration is supported.
           Value Options: **TRUE**, **FALSE**.
    :param _builtins.str name: Specifies the backup name.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the backup status.
           Value options: **waiting**, **backuping**, **succeed**, **failed**, **expired**, **deleted**.
    :param _builtins.str type: Specifies the backup type.
           Value options: **manual**, **auto**.
    """
    __args__ = dict()
    __args__['backupFormat'] = backup_format
    __args__['backupId'] = backup_id
    __args__['beginTime'] = begin_time
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['isSupportRestore'] = is_support_restore
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dcs/getBackups:getBackups', __args__, opts=opts, typ=GetBackupsResult)
    return __ret__.apply(lambda __response__: GetBackupsResult(
        backup_format=pulumi.get(__response__, 'backup_format'),
        backup_id=pulumi.get(__response__, 'backup_id'),
        backups=pulumi.get(__response__, 'backups'),
        begin_time=pulumi.get(__response__, 'begin_time'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        is_support_restore=pulumi.get(__response__, 'is_support_restore'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
