# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDiagnosisTasksResult',
    'AwaitableGetDiagnosisTasksResult',
    'get_diagnosis_tasks',
    'get_diagnosis_tasks_output',
]

@pulumi.output_type
class GetDiagnosisTasksResult:
    """
    A collection of values returned by getDiagnosisTasks.
    """
    def __init__(__self__, begin_time=None, diagnosis_tasks=None, end_time=None, id=None, instance_id=None, node_num=None, region=None, status=None, task_id=None):
        if begin_time and not isinstance(begin_time, str):
            raise TypeError("Expected argument 'begin_time' to be a str")
        pulumi.set(__self__, "begin_time", begin_time)
        if diagnosis_tasks and not isinstance(diagnosis_tasks, list):
            raise TypeError("Expected argument 'diagnosis_tasks' to be a list")
        pulumi.set(__self__, "diagnosis_tasks", diagnosis_tasks)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if node_num and not isinstance(node_num, str):
            raise TypeError("Expected argument 'node_num' to be a str")
        pulumi.set(__self__, "node_num", node_num)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[_builtins.str]:
        """
        Indicates the start time of the diagnosis task, in RFC3339 format.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="diagnosisTasks")
    def diagnosis_tasks(self) -> Sequence['outputs.GetDiagnosisTasksDiagnosisTaskResult']:
        """
        Indicates the list of diagnosis reports.
        """
        return pulumi.get(self, "diagnosis_tasks")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Indicates the end time of the diagnosis task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> Optional[_builtins.str]:
        """
        Indicates the number of diagnosed nodes.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the diagnosis task status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "task_id")


class AwaitableGetDiagnosisTasksResult(GetDiagnosisTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiagnosisTasksResult(
            begin_time=self.begin_time,
            diagnosis_tasks=self.diagnosis_tasks,
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            node_num=self.node_num,
            region=self.region,
            status=self.status,
            task_id=self.task_id)


def get_diagnosis_tasks(begin_time: Optional[_builtins.str] = None,
                        end_time: Optional[_builtins.str] = None,
                        instance_id: Optional[_builtins.str] = None,
                        node_num: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        status: Optional[_builtins.str] = None,
                        task_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiagnosisTasksResult:
    """
    Use this data source to get the list of DCS diagnosis tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Dcs.get_diagnosis_tasks(instance_id=instance_id)
    ```


    :param _builtins.str begin_time: Specifies the start time of the diagnosis task, in RFC3339 format.
    :param _builtins.str end_time: Specifies the end time of the diagnosis task, in RFC3339 format.
    :param _builtins.str instance_id: Specifies the ID of the DCS instance.
    :param _builtins.str node_num: Specifies the number of diagnosed nodes.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the diagnosis task.
           Value options: **diagnosing**, **finished**.
    :param _builtins.str task_id: Specifies the ID of the diagnosis task.
    """
    __args__ = dict()
    __args__['beginTime'] = begin_time
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['nodeNum'] = node_num
    __args__['region'] = region
    __args__['status'] = status
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dcs/getDiagnosisTasks:getDiagnosisTasks', __args__, opts=opts, typ=GetDiagnosisTasksResult).value

    return AwaitableGetDiagnosisTasksResult(
        begin_time=pulumi.get(__ret__, 'begin_time'),
        diagnosis_tasks=pulumi.get(__ret__, 'diagnosis_tasks'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        node_num=pulumi.get(__ret__, 'node_num'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        task_id=pulumi.get(__ret__, 'task_id'))
def get_diagnosis_tasks_output(begin_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                               node_num: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               task_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDiagnosisTasksResult]:
    """
    Use this data source to get the list of DCS diagnosis tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Dcs.get_diagnosis_tasks(instance_id=instance_id)
    ```


    :param _builtins.str begin_time: Specifies the start time of the diagnosis task, in RFC3339 format.
    :param _builtins.str end_time: Specifies the end time of the diagnosis task, in RFC3339 format.
    :param _builtins.str instance_id: Specifies the ID of the DCS instance.
    :param _builtins.str node_num: Specifies the number of diagnosed nodes.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the diagnosis task.
           Value options: **diagnosing**, **finished**.
    :param _builtins.str task_id: Specifies the ID of the diagnosis task.
    """
    __args__ = dict()
    __args__['beginTime'] = begin_time
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['nodeNum'] = node_num
    __args__['region'] = region
    __args__['status'] = status
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dcs/getDiagnosisTasks:getDiagnosisTasks', __args__, opts=opts, typ=GetDiagnosisTasksResult)
    return __ret__.apply(lambda __response__: GetDiagnosisTasksResult(
        begin_time=pulumi.get(__response__, 'begin_time'),
        diagnosis_tasks=pulumi.get(__response__, 'diagnosis_tasks'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        node_num=pulumi.get(__response__, 'node_num'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        task_id=pulumi.get(__response__, 'task_id')))
