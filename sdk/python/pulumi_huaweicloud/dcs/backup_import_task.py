# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupImportTaskArgs', 'BackupImportTask']

@pulumi.input_type
class BackupImportTaskArgs:
    def __init__(__self__, *,
                 backup_files: pulumi.Input['BackupImportTaskBackupFilesArgs'],
                 migration_method: pulumi.Input[_builtins.str],
                 migration_type: pulumi.Input[_builtins.str],
                 target_instance: pulumi.Input['BackupImportTaskTargetInstanceArgs'],
                 task_name: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BackupImportTask resource.
        :param pulumi.Input['BackupImportTaskBackupFilesArgs'] backup_files: Specifies the backup files to be imported when the migration mode is
               backup file import.
               The backup_files structure is documented below.
        :param pulumi.Input[_builtins.str] migration_method: Specifies the type of the migration. Value options:
               + **full_amount_migration**: full migration
               + **incremental_migration**: incremental migration
        :param pulumi.Input[_builtins.str] migration_type: Specifies the migration mode. Value options:
               + **backupfile_import**: importing backup files
        :param pulumi.Input['BackupImportTaskTargetInstanceArgs'] target_instance: Specifies the target Redis information.
               The target_instance structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the backup import task name.
        :param pulumi.Input[_builtins.str] description: Specifies the backup import task description.
               
               <a name="backup_files_struct"></a>
               The `backup_files` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "backup_files", backup_files)
        pulumi.set(__self__, "migration_method", migration_method)
        pulumi.set(__self__, "migration_type", migration_type)
        pulumi.set(__self__, "target_instance", target_instance)
        pulumi.set(__self__, "task_name", task_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="backupFiles")
    def backup_files(self) -> pulumi.Input['BackupImportTaskBackupFilesArgs']:
        """
        Specifies the backup files to be imported when the migration mode is
        backup file import.
        The backup_files structure is documented below.
        """
        return pulumi.get(self, "backup_files")

    @backup_files.setter
    def backup_files(self, value: pulumi.Input['BackupImportTaskBackupFilesArgs']):
        pulumi.set(self, "backup_files", value)

    @_builtins.property
    @pulumi.getter(name="migrationMethod")
    def migration_method(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the migration. Value options:
        + **full_amount_migration**: full migration
        + **incremental_migration**: incremental migration
        """
        return pulumi.get(self, "migration_method")

    @migration_method.setter
    def migration_method(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "migration_method", value)

    @_builtins.property
    @pulumi.getter(name="migrationType")
    def migration_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the migration mode. Value options:
        + **backupfile_import**: importing backup files
        """
        return pulumi.get(self, "migration_type")

    @migration_type.setter
    def migration_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "migration_type", value)

    @_builtins.property
    @pulumi.getter(name="targetInstance")
    def target_instance(self) -> pulumi.Input['BackupImportTaskTargetInstanceArgs']:
        """
        Specifies the target Redis information.
        The target_instance structure is documented below.
        """
        return pulumi.get(self, "target_instance")

    @target_instance.setter
    def target_instance(self, value: pulumi.Input['BackupImportTaskTargetInstanceArgs']):
        pulumi.set(self, "target_instance", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backup import task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup import task description.

        <a name="backup_files_struct"></a>
        The `backup_files` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _BackupImportTaskState:
    def __init__(__self__, *,
                 backup_files: Optional[pulumi.Input['BackupImportTaskBackupFilesArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_method: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 released_at: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 target_instance: Optional[pulumi.Input['BackupImportTaskTargetInstanceArgs']] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupImportTask resources.
        :param pulumi.Input['BackupImportTaskBackupFilesArgs'] backup_files: Specifies the backup files to be imported when the migration mode is
               backup file import.
               The backup_files structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the migration task is created.
        :param pulumi.Input[_builtins.str] description: Specifies the backup import task description.
               
               <a name="backup_files_struct"></a>
               The `backup_files` block supports:
        :param pulumi.Input[_builtins.str] migration_method: Specifies the type of the migration. Value options:
               + **full_amount_migration**: full migration
               + **incremental_migration**: incremental migration
        :param pulumi.Input[_builtins.str] migration_type: Specifies the migration mode. Value options:
               + **backupfile_import**: importing backup files
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] released_at: Indicates the time when the migration ECS is released.
        :param pulumi.Input[_builtins.str] status: Indicates the migration task status.
        :param pulumi.Input['BackupImportTaskTargetInstanceArgs'] target_instance: Specifies the target Redis information.
               The target_instance structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the backup import task name.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the time when the migration task is complete.
        """
        if backup_files is not None:
            pulumi.set(__self__, "backup_files", backup_files)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if migration_method is not None:
            pulumi.set(__self__, "migration_method", migration_method)
        if migration_type is not None:
            pulumi.set(__self__, "migration_type", migration_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if released_at is not None:
            pulumi.set(__self__, "released_at", released_at)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target_instance is not None:
            pulumi.set(__self__, "target_instance", target_instance)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="backupFiles")
    def backup_files(self) -> Optional[pulumi.Input['BackupImportTaskBackupFilesArgs']]:
        """
        Specifies the backup files to be imported when the migration mode is
        backup file import.
        The backup_files structure is documented below.
        """
        return pulumi.get(self, "backup_files")

    @backup_files.setter
    def backup_files(self, value: Optional[pulumi.Input['BackupImportTaskBackupFilesArgs']]):
        pulumi.set(self, "backup_files", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the migration task is created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup import task description.

        <a name="backup_files_struct"></a>
        The `backup_files` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="migrationMethod")
    def migration_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the migration. Value options:
        + **full_amount_migration**: full migration
        + **incremental_migration**: incremental migration
        """
        return pulumi.get(self, "migration_method")

    @migration_method.setter
    def migration_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migration_method", value)

    @_builtins.property
    @pulumi.getter(name="migrationType")
    def migration_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the migration mode. Value options:
        + **backupfile_import**: importing backup files
        """
        return pulumi.get(self, "migration_type")

    @migration_type.setter
    def migration_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migration_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="releasedAt")
    def released_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the migration ECS is released.
        """
        return pulumi.get(self, "released_at")

    @released_at.setter
    def released_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "released_at", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the migration task status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="targetInstance")
    def target_instance(self) -> Optional[pulumi.Input['BackupImportTaskTargetInstanceArgs']]:
        """
        Specifies the target Redis information.
        The target_instance structure is documented below.
        """
        return pulumi.get(self, "target_instance")

    @target_instance.setter
    def target_instance(self, value: Optional[pulumi.Input['BackupImportTaskTargetInstanceArgs']]):
        pulumi.set(self, "target_instance", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup import task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the migration task is complete.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:Dcs/backupImportTask:BackupImportTask")
class BackupImportTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_files: Optional[pulumi.Input[Union['BackupImportTaskBackupFilesArgs', 'BackupImportTaskBackupFilesArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_method: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_instance: Optional[pulumi.Input[Union['BackupImportTaskTargetInstanceArgs', 'BackupImportTaskTargetInstanceArgsDict']]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DCS backup import task resource within HuaweiCloud.

        ## Example Usage

        ### create backup import task by OBS bucket

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_dcs_instance_id = config.require_object("targetDcsInstanceId")
        test = huaweicloud.dcs.BackupImportTask("test",
            task_name="test_task_name",
            migration_type="backupfile_import",
            migration_method="full_amount_migration",
            description="terraform test",
            backup_files={
                "file_source": "self_build_obs",
                "bucket_name": "test-dcs",
                "files": [
                    {
                        "file_name": "appendonly.aof",
                    },
                    {
                        "file_name": "test_redis_backup.rdb",
                    },
                ],
            },
            target_instance={
                "id": target_dcs_instance_id,
                "password": "test_1234",
            })
        ```

        ### create backup import task by backup ID

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        backup_id = config.require_object("backupId")
        target_dcs_instance_id = config.require_object("targetDcsInstanceId")
        test = huaweicloud.dcs.BackupImportTask("test",
            task_name="test_task_name",
            migration_type="backupfile_import",
            migration_method="full_amount_migration",
            description="terraform test",
            backup_files={
                "file_source": "backup_record",
                "backup_id": backup_id,
            },
            target_instance={
                "id": target_dcs_instance_id,
                "password": "test_1234",
            })
        ```

        ## Import

        The DCS backup import task can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dcs/backupImportTask:BackupImportTask test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `target_instance.0.password`. It is generally

        recommended running `pulumi preview` after importing the resource. You can then decide if changes should be applied to

        the resource, or the resource definition should be updated to align with the task. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_dcs_backup_import_task" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              target_instance.0.password,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BackupImportTaskBackupFilesArgs', 'BackupImportTaskBackupFilesArgsDict']] backup_files: Specifies the backup files to be imported when the migration mode is
               backup file import.
               The backup_files structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the backup import task description.
               
               <a name="backup_files_struct"></a>
               The `backup_files` block supports:
        :param pulumi.Input[_builtins.str] migration_method: Specifies the type of the migration. Value options:
               + **full_amount_migration**: full migration
               + **incremental_migration**: incremental migration
        :param pulumi.Input[_builtins.str] migration_type: Specifies the migration mode. Value options:
               + **backupfile_import**: importing backup files
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[Union['BackupImportTaskTargetInstanceArgs', 'BackupImportTaskTargetInstanceArgsDict']] target_instance: Specifies the target Redis information.
               The target_instance structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the backup import task name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupImportTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DCS backup import task resource within HuaweiCloud.

        ## Example Usage

        ### create backup import task by OBS bucket

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_dcs_instance_id = config.require_object("targetDcsInstanceId")
        test = huaweicloud.dcs.BackupImportTask("test",
            task_name="test_task_name",
            migration_type="backupfile_import",
            migration_method="full_amount_migration",
            description="terraform test",
            backup_files={
                "file_source": "self_build_obs",
                "bucket_name": "test-dcs",
                "files": [
                    {
                        "file_name": "appendonly.aof",
                    },
                    {
                        "file_name": "test_redis_backup.rdb",
                    },
                ],
            },
            target_instance={
                "id": target_dcs_instance_id,
                "password": "test_1234",
            })
        ```

        ### create backup import task by backup ID

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        backup_id = config.require_object("backupId")
        target_dcs_instance_id = config.require_object("targetDcsInstanceId")
        test = huaweicloud.dcs.BackupImportTask("test",
            task_name="test_task_name",
            migration_type="backupfile_import",
            migration_method="full_amount_migration",
            description="terraform test",
            backup_files={
                "file_source": "backup_record",
                "backup_id": backup_id,
            },
            target_instance={
                "id": target_dcs_instance_id,
                "password": "test_1234",
            })
        ```

        ## Import

        The DCS backup import task can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dcs/backupImportTask:BackupImportTask test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `target_instance.0.password`. It is generally

        recommended running `pulumi preview` after importing the resource. You can then decide if changes should be applied to

        the resource, or the resource definition should be updated to align with the task. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_dcs_backup_import_task" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              target_instance.0.password,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param BackupImportTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupImportTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_files: Optional[pulumi.Input[Union['BackupImportTaskBackupFilesArgs', 'BackupImportTaskBackupFilesArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_method: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_instance: Optional[pulumi.Input[Union['BackupImportTaskTargetInstanceArgs', 'BackupImportTaskTargetInstanceArgsDict']]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupImportTaskArgs.__new__(BackupImportTaskArgs)

            if backup_files is None and not opts.urn:
                raise TypeError("Missing required property 'backup_files'")
            __props__.__dict__["backup_files"] = backup_files
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            if migration_method is None and not opts.urn:
                raise TypeError("Missing required property 'migration_method'")
            __props__.__dict__["migration_method"] = migration_method
            if migration_type is None and not opts.urn:
                raise TypeError("Missing required property 'migration_type'")
            __props__.__dict__["migration_type"] = migration_type
            __props__.__dict__["region"] = region
            if target_instance is None and not opts.urn:
                raise TypeError("Missing required property 'target_instance'")
            __props__.__dict__["target_instance"] = target_instance
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            __props__.__dict__["created_at"] = None
            __props__.__dict__["released_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(BackupImportTask, __self__).__init__(
            'huaweicloud:Dcs/backupImportTask:BackupImportTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_files: Optional[pulumi.Input[Union['BackupImportTaskBackupFilesArgs', 'BackupImportTaskBackupFilesArgsDict']]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            migration_method: Optional[pulumi.Input[_builtins.str]] = None,
            migration_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            released_at: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            target_instance: Optional[pulumi.Input[Union['BackupImportTaskTargetInstanceArgs', 'BackupImportTaskTargetInstanceArgsDict']]] = None,
            task_name: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupImportTask':
        """
        Get an existing BackupImportTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BackupImportTaskBackupFilesArgs', 'BackupImportTaskBackupFilesArgsDict']] backup_files: Specifies the backup files to be imported when the migration mode is
               backup file import.
               The backup_files structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the migration task is created.
        :param pulumi.Input[_builtins.str] description: Specifies the backup import task description.
               
               <a name="backup_files_struct"></a>
               The `backup_files` block supports:
        :param pulumi.Input[_builtins.str] migration_method: Specifies the type of the migration. Value options:
               + **full_amount_migration**: full migration
               + **incremental_migration**: incremental migration
        :param pulumi.Input[_builtins.str] migration_type: Specifies the migration mode. Value options:
               + **backupfile_import**: importing backup files
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] released_at: Indicates the time when the migration ECS is released.
        :param pulumi.Input[_builtins.str] status: Indicates the migration task status.
        :param pulumi.Input[Union['BackupImportTaskTargetInstanceArgs', 'BackupImportTaskTargetInstanceArgsDict']] target_instance: Specifies the target Redis information.
               The target_instance structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the backup import task name.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the time when the migration task is complete.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupImportTaskState.__new__(_BackupImportTaskState)

        __props__.__dict__["backup_files"] = backup_files
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["migration_method"] = migration_method
        __props__.__dict__["migration_type"] = migration_type
        __props__.__dict__["region"] = region
        __props__.__dict__["released_at"] = released_at
        __props__.__dict__["status"] = status
        __props__.__dict__["target_instance"] = target_instance
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["updated_at"] = updated_at
        return BackupImportTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupFiles")
    def backup_files(self) -> pulumi.Output['outputs.BackupImportTaskBackupFiles']:
        """
        Specifies the backup files to be imported when the migration mode is
        backup file import.
        The backup_files structure is documented below.
        """
        return pulumi.get(self, "backup_files")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the migration task is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the backup import task description.

        <a name="backup_files_struct"></a>
        The `backup_files` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="migrationMethod")
    def migration_method(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the migration. Value options:
        + **full_amount_migration**: full migration
        + **incremental_migration**: incremental migration
        """
        return pulumi.get(self, "migration_method")

    @_builtins.property
    @pulumi.getter(name="migrationType")
    def migration_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the migration mode. Value options:
        + **backupfile_import**: importing backup files
        """
        return pulumi.get(self, "migration_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="releasedAt")
    def released_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the migration ECS is released.
        """
        return pulumi.get(self, "released_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the migration task status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="targetInstance")
    def target_instance(self) -> pulumi.Output['outputs.BackupImportTaskTargetInstance']:
        """
        Specifies the target Redis information.
        The target_instance structure is documented below.
        """
        return pulumi.get(self, "target_instance")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the backup import task name.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the migration task is complete.
        """
        return pulumi.get(self, "updated_at")

