# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTemplatesResult',
    'AwaitableGetTemplatesResult',
    'get_templates',
    'get_templates_output',
]

@pulumi.output_type
class GetTemplatesResult:
    """
    A collection of values returned by getTemplates.
    """
    def __init__(__self__, cache_mode=None, engine=None, engine_version=None, id=None, name=None, product_type=None, region=None, storage_type=None, template_id=None, templates=None, type=None):
        if cache_mode and not isinstance(cache_mode, str):
            raise TypeError("Expected argument 'cache_mode' to be a str")
        pulumi.set(__self__, "cache_mode", cache_mode)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if product_type and not isinstance(product_type, str):
            raise TypeError("Expected argument 'product_type' to be a str")
        pulumi.set(__self__, "product_type", product_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if storage_type and not isinstance(storage_type, str):
            raise TypeError("Expected argument 'storage_type' to be a str")
        pulumi.set(__self__, "storage_type", storage_type)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cacheMode")
    def cache_mode(self) -> Optional[_builtins.str]:
        """
        Indicates the DCS instance type.
        """
        return pulumi.get(self, "cache_mode")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> Optional[_builtins.str]:
        """
        Indicates the cache engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[_builtins.str]:
        """
        Indicates the cache engine version.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the template.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[_builtins.str]:
        """
        Indicates the product edition.
        """
        return pulumi.get(self, "product_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[_builtins.str]:
        """
        Indicates the storage type.
        """
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the template.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetTemplatesTemplateResult']:
        """
        Indicates the list of DCS templates.
        The templates structure is documented below.
        """
        return pulumi.get(self, "templates")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type of the template.
        """
        return pulumi.get(self, "type")


class AwaitableGetTemplatesResult(GetTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTemplatesResult(
            cache_mode=self.cache_mode,
            engine=self.engine,
            engine_version=self.engine_version,
            id=self.id,
            name=self.name,
            product_type=self.product_type,
            region=self.region,
            storage_type=self.storage_type,
            template_id=self.template_id,
            templates=self.templates,
            type=self.type)


def get_templates(cache_mode: Optional[_builtins.str] = None,
                  engine: Optional[_builtins.str] = None,
                  engine_version: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  product_type: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  storage_type: Optional[_builtins.str] = None,
                  template_id: Optional[_builtins.str] = None,
                  type: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTemplatesResult:
    """
    Use this data source to get the list of DCS templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dcs.get_templates(type="sys",
        name="test_template_name")
    ```


    :param _builtins.str cache_mode: Specifies the DCS instance type. Value options:
           + **single**: single-node.
           + **ha**: master/standby.
           + **cluster**: Redis Cluster.
           + **proxy**: Proxy Cluster.
           + **ha_rw_split**: read/write splitting.
    :param _builtins.str engine: Specifies the cache engine. Value options: **Redis**.
    :param _builtins.str engine_version: Specifies the cache engine version. Value options: **4.0**, **5.0**, **6.0**.
    :param _builtins.str name: Specifies the name of the template.
    :param _builtins.str product_type: Specifies the product edition. Value options:
           + **generic**: standard edition.
           + **enterprise**: professional edition.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str storage_type: Specifies the storage type. Value options: **DRAM**, **SSD**.
    :param _builtins.str template_id: Specifies the ID of the template.
    :param _builtins.str type: Specifies the type of the template. Value options:
           + **sys**: system template.
           + **user**: custom template.
    """
    __args__ = dict()
    __args__['cacheMode'] = cache_mode
    __args__['engine'] = engine
    __args__['engineVersion'] = engine_version
    __args__['name'] = name
    __args__['productType'] = product_type
    __args__['region'] = region
    __args__['storageType'] = storage_type
    __args__['templateId'] = template_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dcs/getTemplates:getTemplates', __args__, opts=opts, typ=GetTemplatesResult).value

    return AwaitableGetTemplatesResult(
        cache_mode=pulumi.get(__ret__, 'cache_mode'),
        engine=pulumi.get(__ret__, 'engine'),
        engine_version=pulumi.get(__ret__, 'engine_version'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        product_type=pulumi.get(__ret__, 'product_type'),
        region=pulumi.get(__ret__, 'region'),
        storage_type=pulumi.get(__ret__, 'storage_type'),
        template_id=pulumi.get(__ret__, 'template_id'),
        templates=pulumi.get(__ret__, 'templates'),
        type=pulumi.get(__ret__, 'type'))
def get_templates_output(cache_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         engine: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         engine_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         product_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         storage_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         template_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         type: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTemplatesResult]:
    """
    Use this data source to get the list of DCS templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dcs.get_templates(type="sys",
        name="test_template_name")
    ```


    :param _builtins.str cache_mode: Specifies the DCS instance type. Value options:
           + **single**: single-node.
           + **ha**: master/standby.
           + **cluster**: Redis Cluster.
           + **proxy**: Proxy Cluster.
           + **ha_rw_split**: read/write splitting.
    :param _builtins.str engine: Specifies the cache engine. Value options: **Redis**.
    :param _builtins.str engine_version: Specifies the cache engine version. Value options: **4.0**, **5.0**, **6.0**.
    :param _builtins.str name: Specifies the name of the template.
    :param _builtins.str product_type: Specifies the product edition. Value options:
           + **generic**: standard edition.
           + **enterprise**: professional edition.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str storage_type: Specifies the storage type. Value options: **DRAM**, **SSD**.
    :param _builtins.str template_id: Specifies the ID of the template.
    :param _builtins.str type: Specifies the type of the template. Value options:
           + **sys**: system template.
           + **user**: custom template.
    """
    __args__ = dict()
    __args__['cacheMode'] = cache_mode
    __args__['engine'] = engine
    __args__['engineVersion'] = engine_version
    __args__['name'] = name
    __args__['productType'] = product_type
    __args__['region'] = region
    __args__['storageType'] = storage_type
    __args__['templateId'] = template_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dcs/getTemplates:getTemplates', __args__, opts=opts, typ=GetTemplatesResult)
    return __ret__.apply(lambda __response__: GetTemplatesResult(
        cache_mode=pulumi.get(__response__, 'cache_mode'),
        engine=pulumi.get(__response__, 'engine'),
        engine_version=pulumi.get(__response__, 'engine_version'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        product_type=pulumi.get(__response__, 'product_type'),
        region=pulumi.get(__response__, 'region'),
        storage_type=pulumi.get(__response__, 'storage_type'),
        template_id=pulumi.get(__response__, 'template_id'),
        templates=pulumi.get(__response__, 'templates'),
        type=pulumi.get(__response__, 'type')))
