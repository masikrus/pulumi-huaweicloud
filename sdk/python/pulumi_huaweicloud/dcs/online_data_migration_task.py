# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OnlineDataMigrationTaskArgs', 'OnlineDataMigrationTask']

@pulumi.input_type
class OnlineDataMigrationTaskArgs:
    def __init__(__self__, *,
                 security_group_id: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 task_name: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 bandwidth_limit_mb: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_method: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resume_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 source_instances: Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskSourceInstanceArgs']]]] = None,
                 target_instances: Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskTargetInstanceArgs']]]] = None):
        """
        The set of arguments for constructing a OnlineDataMigrationTask resource.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the security group which the instance belongs to.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of the subnet.
        :param pulumi.Input[_builtins.str] task_name: Specifies the backup import task name.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID.
        :param pulumi.Input[_builtins.str] bandwidth_limit_mb: Specifies the bandwidth limit. For incremental migration, you
               can limit the bandwidth to ensure smooth service running. When the data synchronization speed reaches the limit, it
               can no longer increase. Unit: **MB/s**. Value range: **1–10,240** (an integer greater than 0 and less than 10,241).
               
               <a name="instance_struct"></a>
               The `source_instance` and `target_instance` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the online migration task.
        :param pulumi.Input[_builtins.str] migration_method: Specifies the type of the migration. Value options:
               + **full_amount_migration**: full migration. It is suitable for scenarios where services can be interrupted. Data is
               migrated at one time. Source instance data updated during the migration will not be migrated to the target instance.
               + **incremental_migration**: incremental migration. It is suitable for scenarios requiring minimal service downtime.
               The incremental migration parses logs to ensure data consistency between the source and target instances. After the
               full migration is complete, incremental migration starts.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] resume_mode: Specifies the reconnection mode. Value options:
               + **auto**: automatically reconnect. In this mode, if the source and target instances are disconnected due to network
               exceptions, automatic reconnections will be performed indefinitely. Full synchronization will be triggered and requires
               more bandwidth if incremental synchronization becomes unavailable. Exercise caution when enabling this option.
               + **manual**: manually reconnect.
        :param pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskSourceInstanceArgs']]] source_instances: Specifies the source Redis information.
               The source_instance structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskTargetInstanceArgs']]] target_instances: Specifies the target Redis information.
               The target_instance structure is documented below.
        """
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if bandwidth_limit_mb is not None:
            pulumi.set(__self__, "bandwidth_limit_mb", bandwidth_limit_mb)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if migration_method is not None:
            pulumi.set(__self__, "migration_method", migration_method)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resume_mode is not None:
            pulumi.set(__self__, "resume_mode", resume_mode)
        if source_instances is not None:
            pulumi.set(__self__, "source_instances", source_instances)
        if target_instances is not None:
            pulumi.set(__self__, "target_instances", target_instances)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the security group which the instance belongs to.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the network ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backup import task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthLimitMb")
    def bandwidth_limit_mb(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the bandwidth limit. For incremental migration, you
        can limit the bandwidth to ensure smooth service running. When the data synchronization speed reaches the limit, it
        can no longer increase. Unit: **MB/s**. Value range: **1–10,240** (an integer greater than 0 and less than 10,241).

        <a name="instance_struct"></a>
        The `source_instance` and `target_instance` block supports:
        """
        return pulumi.get(self, "bandwidth_limit_mb")

    @bandwidth_limit_mb.setter
    def bandwidth_limit_mb(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_limit_mb", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the online migration task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="migrationMethod")
    def migration_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the migration. Value options:
        + **full_amount_migration**: full migration. It is suitable for scenarios where services can be interrupted. Data is
        migrated at one time. Source instance data updated during the migration will not be migrated to the target instance.
        + **incremental_migration**: incremental migration. It is suitable for scenarios requiring minimal service downtime.
        The incremental migration parses logs to ensure data consistency between the source and target instances. After the
        full migration is complete, incremental migration starts.
        """
        return pulumi.get(self, "migration_method")

    @migration_method.setter
    def migration_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migration_method", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resumeMode")
    def resume_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the reconnection mode. Value options:
        + **auto**: automatically reconnect. In this mode, if the source and target instances are disconnected due to network
        exceptions, automatic reconnections will be performed indefinitely. Full synchronization will be triggered and requires
        more bandwidth if incremental synchronization becomes unavailable. Exercise caution when enabling this option.
        + **manual**: manually reconnect.
        """
        return pulumi.get(self, "resume_mode")

    @resume_mode.setter
    def resume_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resume_mode", value)

    @_builtins.property
    @pulumi.getter(name="sourceInstances")
    def source_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskSourceInstanceArgs']]]]:
        """
        Specifies the source Redis information.
        The source_instance structure is documented below.
        """
        return pulumi.get(self, "source_instances")

    @source_instances.setter
    def source_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskSourceInstanceArgs']]]]):
        pulumi.set(self, "source_instances", value)

    @_builtins.property
    @pulumi.getter(name="targetInstances")
    def target_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskTargetInstanceArgs']]]]:
        """
        Specifies the target Redis information.
        The target_instance structure is documented below.
        """
        return pulumi.get(self, "target_instances")

    @target_instances.setter
    def target_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskTargetInstanceArgs']]]]):
        pulumi.set(self, "target_instances", value)


@pulumi.input_type
class _OnlineDataMigrationTaskState:
    def __init__(__self__, *,
                 bandwidth_limit_mb: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 ecs_tenant_private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_method: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 released_at: Optional[pulumi.Input[_builtins.str]] = None,
                 resume_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_instances: Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskSourceInstanceArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 supported_features: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_instances: Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskTargetInstanceArgs']]]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering OnlineDataMigrationTask resources.
        :param pulumi.Input[_builtins.str] bandwidth_limit_mb: Specifies the bandwidth limit. For incremental migration, you
               can limit the bandwidth to ensure smooth service running. When the data synchronization speed reaches the limit, it
               can no longer increase. Unit: **MB/s**. Value range: **1–10,240** (an integer greater than 0 and less than 10,241).
               
               <a name="instance_struct"></a>
               The `source_instance` and `target_instance` block supports:
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the migration task is created.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the online migration task.
        :param pulumi.Input[_builtins.str] ecs_tenant_private_ip: Indicates the private IP address of the migration ECS on the tenant side. This IP address can
               be added to the whitelist if it is in the same VPC as the private IP address of the target or source Redis.
        :param pulumi.Input[_builtins.str] migration_method: Specifies the type of the migration. Value options:
               + **full_amount_migration**: full migration. It is suitable for scenarios where services can be interrupted. Data is
               migrated at one time. Source instance data updated during the migration will not be migrated to the target instance.
               + **incremental_migration**: incremental migration. It is suitable for scenarios requiring minimal service downtime.
               The incremental migration parses logs to ensure data consistency between the source and target instances. After the
               full migration is complete, incremental migration starts.
        :param pulumi.Input[_builtins.str] network_type: Indicates the network type, which can be **VPC** or **VPN**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] released_at: Indicates the time when the migration ECS is released.
        :param pulumi.Input[_builtins.str] resume_mode: Specifies the reconnection mode. Value options:
               + **auto**: automatically reconnect. In this mode, if the source and target instances are disconnected due to network
               exceptions, automatic reconnections will be performed indefinitely. Full synchronization will be triggered and requires
               more bandwidth if incremental synchronization becomes unavailable. Exercise caution when enabling this option.
               + **manual**: manually reconnect.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the security group which the instance belongs to.
        :param pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskSourceInstanceArgs']]] source_instances: Specifies the source Redis information.
               The source_instance structure is documented below.
        :param pulumi.Input[_builtins.str] status: Indicates the migration task status.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of the subnet.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] supported_features: Indicates the supported features.
        :param pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskTargetInstanceArgs']]] target_instances: Specifies the target Redis information.
               The target_instance structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the backup import task name.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the time when the migration task is complete.
        :param pulumi.Input[_builtins.str] version: Indicates the version of migration ECS.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID.
        """
        if bandwidth_limit_mb is not None:
            pulumi.set(__self__, "bandwidth_limit_mb", bandwidth_limit_mb)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ecs_tenant_private_ip is not None:
            pulumi.set(__self__, "ecs_tenant_private_ip", ecs_tenant_private_ip)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if migration_method is not None:
            pulumi.set(__self__, "migration_method", migration_method)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if released_at is not None:
            pulumi.set(__self__, "released_at", released_at)
        if resume_mode is not None:
            pulumi.set(__self__, "resume_mode", resume_mode)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if source_instances is not None:
            pulumi.set(__self__, "source_instances", source_instances)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if supported_features is not None:
            pulumi.set(__self__, "supported_features", supported_features)
        if target_instances is not None:
            pulumi.set(__self__, "target_instances", target_instances)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="bandwidthLimitMb")
    def bandwidth_limit_mb(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the bandwidth limit. For incremental migration, you
        can limit the bandwidth to ensure smooth service running. When the data synchronization speed reaches the limit, it
        can no longer increase. Unit: **MB/s**. Value range: **1–10,240** (an integer greater than 0 and less than 10,241).

        <a name="instance_struct"></a>
        The `source_instance` and `target_instance` block supports:
        """
        return pulumi.get(self, "bandwidth_limit_mb")

    @bandwidth_limit_mb.setter
    def bandwidth_limit_mb(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_limit_mb", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the migration task is created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the online migration task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="ecsTenantPrivateIp")
    def ecs_tenant_private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the private IP address of the migration ECS on the tenant side. This IP address can
        be added to the whitelist if it is in the same VPC as the private IP address of the target or source Redis.
        """
        return pulumi.get(self, "ecs_tenant_private_ip")

    @ecs_tenant_private_ip.setter
    def ecs_tenant_private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ecs_tenant_private_ip", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="migrationMethod")
    def migration_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the migration. Value options:
        + **full_amount_migration**: full migration. It is suitable for scenarios where services can be interrupted. Data is
        migrated at one time. Source instance data updated during the migration will not be migrated to the target instance.
        + **incremental_migration**: incremental migration. It is suitable for scenarios requiring minimal service downtime.
        The incremental migration parses logs to ensure data consistency between the source and target instances. After the
        full migration is complete, incremental migration starts.
        """
        return pulumi.get(self, "migration_method")

    @migration_method.setter
    def migration_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migration_method", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the network type, which can be **VPC** or **VPN**.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="releasedAt")
    def released_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the migration ECS is released.
        """
        return pulumi.get(self, "released_at")

    @released_at.setter
    def released_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "released_at", value)

    @_builtins.property
    @pulumi.getter(name="resumeMode")
    def resume_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the reconnection mode. Value options:
        + **auto**: automatically reconnect. In this mode, if the source and target instances are disconnected due to network
        exceptions, automatic reconnections will be performed indefinitely. Full synchronization will be triggered and requires
        more bandwidth if incremental synchronization becomes unavailable. Exercise caution when enabling this option.
        + **manual**: manually reconnect.
        """
        return pulumi.get(self, "resume_mode")

    @resume_mode.setter
    def resume_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resume_mode", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the security group which the instance belongs to.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceInstances")
    def source_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskSourceInstanceArgs']]]]:
        """
        Specifies the source Redis information.
        The source_instance structure is documented below.
        """
        return pulumi.get(self, "source_instances")

    @source_instances.setter
    def source_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskSourceInstanceArgs']]]]):
        pulumi.set(self, "source_instances", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the migration task status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="supportedFeatures")
    def supported_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the supported features.
        """
        return pulumi.get(self, "supported_features")

    @supported_features.setter
    def supported_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "supported_features", value)

    @_builtins.property
    @pulumi.getter(name="targetInstances")
    def target_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskTargetInstanceArgs']]]]:
        """
        Specifies the target Redis information.
        The target_instance structure is documented below.
        """
        return pulumi.get(self, "target_instances")

    @target_instances.setter
    def target_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnlineDataMigrationTaskTargetInstanceArgs']]]]):
        pulumi.set(self, "target_instances", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup import task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the migration task is complete.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the version of migration ECS.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:Dcs/onlineDataMigrationTask:OnlineDataMigrationTask")
class OnlineDataMigrationTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_limit_mb: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_method: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resume_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnlineDataMigrationTaskSourceInstanceArgs', 'OnlineDataMigrationTaskSourceInstanceArgsDict']]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnlineDataMigrationTaskTargetInstanceArgs', 'OnlineDataMigrationTaskTargetInstanceArgsDict']]]]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DCS online data migration task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        security_group_id = config.require_object("securityGroupId")
        source_instance_id = config.require_object("sourceInstanceId")
        target_instance_id = config.require_object("targetInstanceId")
        test = huaweicloud.dcs.OnlineDataMigrationTask("test",
            task_name="test_task_name",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            security_group_id=security_group_id,
            description="terraform test",
            migration_method="full_amount_migration",
            resume_mode="auto",
            source_instances=[{
                "id": source_instance_id,
                "password": "test_1234",
            }],
            target_instances=[{
                "id": target_instance_id,
                "password": "test_1234",
            }])
        ```

        ## Import

        The DCS backup import task can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dcs/onlineDataMigrationTask:OnlineDataMigrationTask test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `source_instance.0.password` and

        `target_instance.0.password`. It is generally recommended running `pulumi preview` after importing the resource. You can

        then decide if changes should be applied to the resource, or the resource definition should be updated to align with the

        task. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_dcs_online_data_migration_task" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              source_instance.0.password, target_instance.0.password,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bandwidth_limit_mb: Specifies the bandwidth limit. For incremental migration, you
               can limit the bandwidth to ensure smooth service running. When the data synchronization speed reaches the limit, it
               can no longer increase. Unit: **MB/s**. Value range: **1–10,240** (an integer greater than 0 and less than 10,241).
               
               <a name="instance_struct"></a>
               The `source_instance` and `target_instance` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the online migration task.
        :param pulumi.Input[_builtins.str] migration_method: Specifies the type of the migration. Value options:
               + **full_amount_migration**: full migration. It is suitable for scenarios where services can be interrupted. Data is
               migrated at one time. Source instance data updated during the migration will not be migrated to the target instance.
               + **incremental_migration**: incremental migration. It is suitable for scenarios requiring minimal service downtime.
               The incremental migration parses logs to ensure data consistency between the source and target instances. After the
               full migration is complete, incremental migration starts.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] resume_mode: Specifies the reconnection mode. Value options:
               + **auto**: automatically reconnect. In this mode, if the source and target instances are disconnected due to network
               exceptions, automatic reconnections will be performed indefinitely. Full synchronization will be triggered and requires
               more bandwidth if incremental synchronization becomes unavailable. Exercise caution when enabling this option.
               + **manual**: manually reconnect.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the security group which the instance belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnlineDataMigrationTaskSourceInstanceArgs', 'OnlineDataMigrationTaskSourceInstanceArgsDict']]]] source_instances: Specifies the source Redis information.
               The source_instance structure is documented below.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of the subnet.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnlineDataMigrationTaskTargetInstanceArgs', 'OnlineDataMigrationTaskTargetInstanceArgsDict']]]] target_instances: Specifies the target Redis information.
               The target_instance structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the backup import task name.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OnlineDataMigrationTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DCS online data migration task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        security_group_id = config.require_object("securityGroupId")
        source_instance_id = config.require_object("sourceInstanceId")
        target_instance_id = config.require_object("targetInstanceId")
        test = huaweicloud.dcs.OnlineDataMigrationTask("test",
            task_name="test_task_name",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            security_group_id=security_group_id,
            description="terraform test",
            migration_method="full_amount_migration",
            resume_mode="auto",
            source_instances=[{
                "id": source_instance_id,
                "password": "test_1234",
            }],
            target_instances=[{
                "id": target_instance_id,
                "password": "test_1234",
            }])
        ```

        ## Import

        The DCS backup import task can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dcs/onlineDataMigrationTask:OnlineDataMigrationTask test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `source_instance.0.password` and

        `target_instance.0.password`. It is generally recommended running `pulumi preview` after importing the resource. You can

        then decide if changes should be applied to the resource, or the resource definition should be updated to align with the

        task. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_dcs_online_data_migration_task" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              source_instance.0.password, target_instance.0.password,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param OnlineDataMigrationTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OnlineDataMigrationTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_limit_mb: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_method: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resume_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnlineDataMigrationTaskSourceInstanceArgs', 'OnlineDataMigrationTaskSourceInstanceArgsDict']]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnlineDataMigrationTaskTargetInstanceArgs', 'OnlineDataMigrationTaskTargetInstanceArgsDict']]]]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OnlineDataMigrationTaskArgs.__new__(OnlineDataMigrationTaskArgs)

            __props__.__dict__["bandwidth_limit_mb"] = bandwidth_limit_mb
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["migration_method"] = migration_method
            __props__.__dict__["region"] = region
            __props__.__dict__["resume_mode"] = resume_mode
            if security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id'")
            __props__.__dict__["security_group_id"] = security_group_id
            __props__.__dict__["source_instances"] = source_instances
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["target_instances"] = target_instances
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["ecs_tenant_private_ip"] = None
            __props__.__dict__["network_type"] = None
            __props__.__dict__["released_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["supported_features"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["version"] = None
        super(OnlineDataMigrationTask, __self__).__init__(
            'huaweicloud:Dcs/onlineDataMigrationTask:OnlineDataMigrationTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth_limit_mb: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            ecs_tenant_private_ip: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            migration_method: Optional[pulumi.Input[_builtins.str]] = None,
            network_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            released_at: Optional[pulumi.Input[_builtins.str]] = None,
            resume_mode: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnlineDataMigrationTaskSourceInstanceArgs', 'OnlineDataMigrationTaskSourceInstanceArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            supported_features: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            target_instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnlineDataMigrationTaskTargetInstanceArgs', 'OnlineDataMigrationTaskTargetInstanceArgsDict']]]]] = None,
            task_name: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'OnlineDataMigrationTask':
        """
        Get an existing OnlineDataMigrationTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bandwidth_limit_mb: Specifies the bandwidth limit. For incremental migration, you
               can limit the bandwidth to ensure smooth service running. When the data synchronization speed reaches the limit, it
               can no longer increase. Unit: **MB/s**. Value range: **1–10,240** (an integer greater than 0 and less than 10,241).
               
               <a name="instance_struct"></a>
               The `source_instance` and `target_instance` block supports:
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the migration task is created.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the online migration task.
        :param pulumi.Input[_builtins.str] ecs_tenant_private_ip: Indicates the private IP address of the migration ECS on the tenant side. This IP address can
               be added to the whitelist if it is in the same VPC as the private IP address of the target or source Redis.
        :param pulumi.Input[_builtins.str] migration_method: Specifies the type of the migration. Value options:
               + **full_amount_migration**: full migration. It is suitable for scenarios where services can be interrupted. Data is
               migrated at one time. Source instance data updated during the migration will not be migrated to the target instance.
               + **incremental_migration**: incremental migration. It is suitable for scenarios requiring minimal service downtime.
               The incremental migration parses logs to ensure data consistency between the source and target instances. After the
               full migration is complete, incremental migration starts.
        :param pulumi.Input[_builtins.str] network_type: Indicates the network type, which can be **VPC** or **VPN**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] released_at: Indicates the time when the migration ECS is released.
        :param pulumi.Input[_builtins.str] resume_mode: Specifies the reconnection mode. Value options:
               + **auto**: automatically reconnect. In this mode, if the source and target instances are disconnected due to network
               exceptions, automatic reconnections will be performed indefinitely. Full synchronization will be triggered and requires
               more bandwidth if incremental synchronization becomes unavailable. Exercise caution when enabling this option.
               + **manual**: manually reconnect.
        :param pulumi.Input[_builtins.str] security_group_id: Specifies the security group which the instance belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnlineDataMigrationTaskSourceInstanceArgs', 'OnlineDataMigrationTaskSourceInstanceArgsDict']]]] source_instances: Specifies the source Redis information.
               The source_instance structure is documented below.
        :param pulumi.Input[_builtins.str] status: Indicates the migration task status.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of the subnet.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] supported_features: Indicates the supported features.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnlineDataMigrationTaskTargetInstanceArgs', 'OnlineDataMigrationTaskTargetInstanceArgsDict']]]] target_instances: Specifies the target Redis information.
               The target_instance structure is documented below.
        :param pulumi.Input[_builtins.str] task_name: Specifies the backup import task name.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the time when the migration task is complete.
        :param pulumi.Input[_builtins.str] version: Indicates the version of migration ECS.
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the VPC ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OnlineDataMigrationTaskState.__new__(_OnlineDataMigrationTaskState)

        __props__.__dict__["bandwidth_limit_mb"] = bandwidth_limit_mb
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["ecs_tenant_private_ip"] = ecs_tenant_private_ip
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["migration_method"] = migration_method
        __props__.__dict__["network_type"] = network_type
        __props__.__dict__["region"] = region
        __props__.__dict__["released_at"] = released_at
        __props__.__dict__["resume_mode"] = resume_mode
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["source_instances"] = source_instances
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["supported_features"] = supported_features
        __props__.__dict__["target_instances"] = target_instances
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version"] = version
        __props__.__dict__["vpc_id"] = vpc_id
        return OnlineDataMigrationTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bandwidthLimitMb")
    def bandwidth_limit_mb(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the bandwidth limit. For incremental migration, you
        can limit the bandwidth to ensure smooth service running. When the data synchronization speed reaches the limit, it
        can no longer increase. Unit: **MB/s**. Value range: **1–10,240** (an integer greater than 0 and less than 10,241).

        <a name="instance_struct"></a>
        The `source_instance` and `target_instance` block supports:
        """
        return pulumi.get(self, "bandwidth_limit_mb")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the migration task is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the online migration task.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="ecsTenantPrivateIp")
    def ecs_tenant_private_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the private IP address of the migration ECS on the tenant side. This IP address can
        be added to the whitelist if it is in the same VPC as the private IP address of the target or source Redis.
        """
        return pulumi.get(self, "ecs_tenant_private_ip")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="migrationMethod")
    def migration_method(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the migration. Value options:
        + **full_amount_migration**: full migration. It is suitable for scenarios where services can be interrupted. Data is
        migrated at one time. Source instance data updated during the migration will not be migrated to the target instance.
        + **incremental_migration**: incremental migration. It is suitable for scenarios requiring minimal service downtime.
        The incremental migration parses logs to ensure data consistency between the source and target instances. After the
        full migration is complete, incremental migration starts.
        """
        return pulumi.get(self, "migration_method")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the network type, which can be **VPC** or **VPN**.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="releasedAt")
    def released_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the migration ECS is released.
        """
        return pulumi.get(self, "released_at")

    @_builtins.property
    @pulumi.getter(name="resumeMode")
    def resume_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the reconnection mode. Value options:
        + **auto**: automatically reconnect. In this mode, if the source and target instances are disconnected due to network
        exceptions, automatic reconnections will be performed indefinitely. Full synchronization will be triggered and requires
        more bandwidth if incremental synchronization becomes unavailable. Exercise caution when enabling this option.
        + **manual**: manually reconnect.
        """
        return pulumi.get(self, "resume_mode")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the security group which the instance belongs to.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="sourceInstances")
    def source_instances(self) -> pulumi.Output[Sequence['outputs.OnlineDataMigrationTaskSourceInstance']]:
        """
        Specifies the source Redis information.
        The source_instance structure is documented below.
        """
        return pulumi.get(self, "source_instances")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the migration task status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the network ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="supportedFeatures")
    def supported_features(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the supported features.
        """
        return pulumi.get(self, "supported_features")

    @_builtins.property
    @pulumi.getter(name="targetInstances")
    def target_instances(self) -> pulumi.Output[Sequence['outputs.OnlineDataMigrationTaskTargetInstance']]:
        """
        Specifies the target Redis information.
        The target_instance structure is documented below.
        """
        return pulumi.get(self, "target_instances")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the backup import task name.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the migration task is complete.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the version of migration ECS.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")

