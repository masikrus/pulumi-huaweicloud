# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomTemplateArgs', 'CustomTemplate']

@pulumi.input_type
class CustomTemplateArgs:
    def __init__(__self__, *,
                 params: pulumi.Input[Sequence[pulumi.Input['CustomTemplateParamArgs']]],
                 source_type: pulumi.Input[_builtins.str],
                 template_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CustomTemplate resource.
        :param pulumi.Input[Sequence[pulumi.Input['CustomTemplateParamArgs']]] params: Specifies the list of the template params.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of the source template. Value options:
               + **sys**: system template.
               + **user**: custom template.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_id: Specifies the ID of the source template.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the template.
               
               <a name="CustomTemplate_Param"></a>
               The `params` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the template.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "template_id", template_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def params(self) -> pulumi.Input[Sequence[pulumi.Input['CustomTemplateParamArgs']]]:
        """
        Specifies the list of the template params.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: pulumi.Input[Sequence[pulumi.Input['CustomTemplateParamArgs']]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the source template. Value options:
        + **sys**: system template.
        + **user**: custom template.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the source template.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the template.

        <a name="CustomTemplate_Param"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CustomTemplateState:
    def __init__(__self__, *,
                 cache_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input['CustomTemplateParamArgs']]]] = None,
                 product_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CustomTemplate resources.
        :param pulumi.Input[_builtins.str] cache_mode: Indicates the DCS instance type. The value can be **single**, **ha**, **cluster**, **proxy**,
               **ha_rw_split**.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the custom template is created.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the template.
               
               <a name="CustomTemplate_Param"></a>
               The `params` block supports:
        :param pulumi.Input[_builtins.str] engine: Indicates the cache engine. Currently, only **Redis** is supported.
        :param pulumi.Input[_builtins.str] engine_version: Indicates the cache engine version. The value can be **4.0**, **5.0.**, **6.0.**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the template.
        :param pulumi.Input[Sequence[pulumi.Input['CustomTemplateParamArgs']]] params: Specifies the list of the template params.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] product_type: Indicates the product edition. The value can be **generic**, **enterprise**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of the source template. Value options:
               + **sys**: system template.
               + **user**: custom template.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_type: Indicates the storage type. The value can be **DRAM**, **SSD**.
        :param pulumi.Input[_builtins.str] template_id: Specifies the ID of the source template.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Indicates the type of the template. The value can be **sys**, **user**.
        """
        if cache_mode is not None:
            pulumi.set(__self__, "cache_mode", cache_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cacheMode")
    def cache_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the DCS instance type. The value can be **single**, **ha**, **cluster**, **proxy**,
        **ha_rw_split**.
        """
        return pulumi.get(self, "cache_mode")

    @cache_mode.setter
    def cache_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cache_mode", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the custom template is created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the template.

        <a name="CustomTemplate_Param"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the cache engine. Currently, only **Redis** is supported.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine", value)

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the cache engine version. The value can be **4.0**, **5.0.**, **6.0.**.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomTemplateParamArgs']]]]:
        """
        Specifies the list of the template params.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomTemplateParamArgs']]]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the product edition. The value can be **generic**, **enterprise**.
        """
        return pulumi.get(self, "product_type")

    @product_type.setter
    def product_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the source template. Value options:
        + **sys**: system template.
        + **user**: custom template.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the storage type. The value can be **DRAM**, **SSD**.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the source template.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the type of the template. The value can be **sys**, **user**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:Dcs/customTemplate:CustomTemplate")
class CustomTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CustomTemplateParamArgs', 'CustomTemplateParamArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DCS custom template resource within HuaweiCloud.

        ## Import

        The dcs custom template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dcs/customTemplate:CustomTemplate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `template_id`, `source_type`, `params`. It

        is generally recommended running `pulumi preview` after importing a custom template. You can then decide if changes

        should be applied to the custom template, or the resource definition should be updated to align with the DCS custom

        template. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dcs_custom_template" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              template_id, source_type, params,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the template.
               
               <a name="CustomTemplate_Param"></a>
               The `params` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the template.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CustomTemplateParamArgs', 'CustomTemplateParamArgsDict']]]] params: Specifies the list of the template params.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of the source template. Value options:
               + **sys**: system template.
               + **user**: custom template.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_id: Specifies the ID of the source template.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DCS custom template resource within HuaweiCloud.

        ## Import

        The dcs custom template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dcs/customTemplate:CustomTemplate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `template_id`, `source_type`, `params`. It

        is generally recommended running `pulumi preview` after importing a custom template. You can then decide if changes

        should be applied to the custom template, or the resource definition should be updated to align with the DCS custom

        template. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dcs_custom_template" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              template_id, source_type, params,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param CustomTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CustomTemplateParamArgs', 'CustomTemplateParamArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomTemplateArgs.__new__(CustomTemplateArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if params is None and not opts.urn:
                raise TypeError("Missing required property 'params'")
            __props__.__dict__["params"] = params
            __props__.__dict__["region"] = region
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            if template_id is None and not opts.urn:
                raise TypeError("Missing required property 'template_id'")
            __props__.__dict__["template_id"] = template_id
            __props__.__dict__["cache_mode"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["engine"] = None
            __props__.__dict__["engine_version"] = None
            __props__.__dict__["product_type"] = None
            __props__.__dict__["storage_type"] = None
            __props__.__dict__["type"] = None
        super(CustomTemplate, __self__).__init__(
            'huaweicloud:Dcs/customTemplate:CustomTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cache_mode: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            engine: Optional[pulumi.Input[_builtins.str]] = None,
            engine_version: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CustomTemplateParamArgs', 'CustomTemplateParamArgsDict']]]]] = None,
            product_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source_type: Optional[pulumi.Input[_builtins.str]] = None,
            storage_type: Optional[pulumi.Input[_builtins.str]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'CustomTemplate':
        """
        Get an existing CustomTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cache_mode: Indicates the DCS instance type. The value can be **single**, **ha**, **cluster**, **proxy**,
               **ha_rw_split**.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the custom template is created.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the template.
               
               <a name="CustomTemplate_Param"></a>
               The `params` block supports:
        :param pulumi.Input[_builtins.str] engine: Indicates the cache engine. Currently, only **Redis** is supported.
        :param pulumi.Input[_builtins.str] engine_version: Indicates the cache engine version. The value can be **4.0**, **5.0.**, **6.0.**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the template.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CustomTemplateParamArgs', 'CustomTemplateParamArgsDict']]]] params: Specifies the list of the template params.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] product_type: Indicates the product edition. The value can be **generic**, **enterprise**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of the source template. Value options:
               + **sys**: system template.
               + **user**: custom template.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] storage_type: Indicates the storage type. The value can be **DRAM**, **SSD**.
        :param pulumi.Input[_builtins.str] template_id: Specifies the ID of the source template.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Indicates the type of the template. The value can be **sys**, **user**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomTemplateState.__new__(_CustomTemplateState)

        __props__.__dict__["cache_mode"] = cache_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["engine"] = engine
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["name"] = name
        __props__.__dict__["params"] = params
        __props__.__dict__["product_type"] = product_type
        __props__.__dict__["region"] = region
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["type"] = type
        return CustomTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cacheMode")
    def cache_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the DCS instance type. The value can be **single**, **ha**, **cluster**, **proxy**,
        **ha_rw_split**.
        """
        return pulumi.get(self, "cache_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the custom template is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the template.

        <a name="CustomTemplate_Param"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the cache engine. Currently, only **Redis** is supported.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the cache engine version. The value can be **4.0**, **5.0.**, **6.0.**.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the template.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def params(self) -> pulumi.Output[Sequence['outputs.CustomTemplateParam']]:
        """
        Specifies the list of the template params.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the product edition. The value can be **generic**, **enterprise**.
        """
        return pulumi.get(self, "product_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the source template. Value options:
        + **sys**: system template.
        + **user**: custom template.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the storage type. The value can be **DRAM**, **SSD**.
        """
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the source template.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the type of the template. The value can be **sys**, **user**.
        """
        return pulumi.get(self, "type")

