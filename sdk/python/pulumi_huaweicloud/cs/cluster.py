# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 max_spu_num: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_cidr: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[_builtins.str] description: cluster description.
        :param pulumi.Input[_builtins.int] max_spu_num: Cluster maximum SPU number.
        :param pulumi.Input[_builtins.str] name: Cluster name.
        :param pulumi.Input[_builtins.str] region: The region in which to create the cloud stream service cluster resource. If
               omitted, the provider-level region will be used. Changing this creates a new cloud stream service cluster resource.
        :param pulumi.Input[_builtins.str] subnet_cidr: Cluster sub segment. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_gateway: Cluster subnet gateway. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] vpc_cidr: Cluster VPC network segment. Changing this parameter will create a new
               resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if max_spu_num is not None:
            pulumi.set(__self__, "max_spu_num", max_spu_num)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_cidr is not None:
            pulumi.set(__self__, "subnet_cidr", subnet_cidr)
        if subnet_gateway is not None:
            pulumi.set(__self__, "subnet_gateway", subnet_gateway)
        if vpc_cidr is not None:
            pulumi.set(__self__, "vpc_cidr", vpc_cidr)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        cluster description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="maxSpuNum")
    def max_spu_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Cluster maximum SPU number.
        """
        return pulumi.get(self, "max_spu_num")

    @max_spu_num.setter
    def max_spu_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_spu_num", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the cloud stream service cluster resource. If
        omitted, the provider-level region will be used. Changing this creates a new cloud stream service cluster resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster sub segment. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_cidr")

    @subnet_cidr.setter
    def subnet_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_cidr", value)

    @_builtins.property
    @pulumi.getter(name="subnetGateway")
    def subnet_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster subnet gateway. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "subnet_gateway")

    @subnet_gateway.setter
    def subnet_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_gateway", value)

    @_builtins.property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster VPC network segment. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "vpc_cidr")

    @vpc_cidr.setter
    def vpc_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_cidr", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 manager_node_spu_num: Optional[pulumi.Input[_builtins.int]] = None,
                 max_spu_num: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 used_spu_num: Optional[pulumi.Input[_builtins.int]] = None,
                 vpc_cidr: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[_builtins.str] created_at: Cluster creation time.
        :param pulumi.Input[_builtins.str] description: cluster description.
        :param pulumi.Input[_builtins.int] manager_node_spu_num: Cluster management node SPU number.
        :param pulumi.Input[_builtins.int] max_spu_num: Cluster maximum SPU number.
        :param pulumi.Input[_builtins.str] name: Cluster name.
        :param pulumi.Input[_builtins.str] region: The region in which to create the cloud stream service cluster resource. If
               omitted, the provider-level region will be used. Changing this creates a new cloud stream service cluster resource.
        :param pulumi.Input[_builtins.str] subnet_cidr: Cluster sub segment. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_gateway: Cluster subnet gateway. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.int] used_spu_num: The used SPU number of Cluster.
        :param pulumi.Input[_builtins.str] vpc_cidr: Cluster VPC network segment. Changing this parameter will create a new
               resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if manager_node_spu_num is not None:
            pulumi.set(__self__, "manager_node_spu_num", manager_node_spu_num)
        if max_spu_num is not None:
            pulumi.set(__self__, "max_spu_num", max_spu_num)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_cidr is not None:
            pulumi.set(__self__, "subnet_cidr", subnet_cidr)
        if subnet_gateway is not None:
            pulumi.set(__self__, "subnet_gateway", subnet_gateway)
        if used_spu_num is not None:
            pulumi.set(__self__, "used_spu_num", used_spu_num)
        if vpc_cidr is not None:
            pulumi.set(__self__, "vpc_cidr", vpc_cidr)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        cluster description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="managerNodeSpuNum")
    def manager_node_spu_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Cluster management node SPU number.
        """
        return pulumi.get(self, "manager_node_spu_num")

    @manager_node_spu_num.setter
    def manager_node_spu_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "manager_node_spu_num", value)

    @_builtins.property
    @pulumi.getter(name="maxSpuNum")
    def max_spu_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Cluster maximum SPU number.
        """
        return pulumi.get(self, "max_spu_num")

    @max_spu_num.setter
    def max_spu_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_spu_num", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the cloud stream service cluster resource. If
        omitted, the provider-level region will be used. Changing this creates a new cloud stream service cluster resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster sub segment. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_cidr")

    @subnet_cidr.setter
    def subnet_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_cidr", value)

    @_builtins.property
    @pulumi.getter(name="subnetGateway")
    def subnet_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster subnet gateway. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "subnet_gateway")

    @subnet_gateway.setter
    def subnet_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_gateway", value)

    @_builtins.property
    @pulumi.getter(name="usedSpuNum")
    def used_spu_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The used SPU number of Cluster.
        """
        return pulumi.get(self, "used_spu_num")

    @used_spu_num.setter
    def used_spu_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "used_spu_num", value)

    @_builtins.property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster VPC network segment. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "vpc_cidr")

    @vpc_cidr.setter
    def vpc_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_cidr", value)


@pulumi.type_token("huaweicloud:cs/cluster:Cluster")
class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 max_spu_num: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Cloud Stream Service cluster management.

        !> **WARNING:** It has been deprecated, use `Dli.Queue` instead.

        ## Example Usage

        ### create a cluster

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        cluster = huaweicloud.cs.Cluster("cluster", name="terraform_cs_cluster_test")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: cluster description.
        :param pulumi.Input[_builtins.int] max_spu_num: Cluster maximum SPU number.
        :param pulumi.Input[_builtins.str] name: Cluster name.
        :param pulumi.Input[_builtins.str] region: The region in which to create the cloud stream service cluster resource. If
               omitted, the provider-level region will be used. Changing this creates a new cloud stream service cluster resource.
        :param pulumi.Input[_builtins.str] subnet_cidr: Cluster sub segment. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_gateway: Cluster subnet gateway. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] vpc_cidr: Cluster VPC network segment. Changing this parameter will create a new
               resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ClusterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Cloud Stream Service cluster management.

        !> **WARNING:** It has been deprecated, use `Dli.Queue` instead.

        ## Example Usage

        ### create a cluster

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        cluster = huaweicloud.cs.Cluster("cluster", name="terraform_cs_cluster_test")
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 max_spu_num: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["max_spu_num"] = max_spu_num
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["subnet_cidr"] = subnet_cidr
            __props__.__dict__["subnet_gateway"] = subnet_gateway
            __props__.__dict__["vpc_cidr"] = vpc_cidr
            __props__.__dict__["created_at"] = None
            __props__.__dict__["manager_node_spu_num"] = None
            __props__.__dict__["used_spu_num"] = None
        super(Cluster, __self__).__init__(
            'huaweicloud:cs/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            manager_node_spu_num: Optional[pulumi.Input[_builtins.int]] = None,
            max_spu_num: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_gateway: Optional[pulumi.Input[_builtins.str]] = None,
            used_spu_num: Optional[pulumi.Input[_builtins.int]] = None,
            vpc_cidr: Optional[pulumi.Input[_builtins.str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Cluster creation time.
        :param pulumi.Input[_builtins.str] description: cluster description.
        :param pulumi.Input[_builtins.int] manager_node_spu_num: Cluster management node SPU number.
        :param pulumi.Input[_builtins.int] max_spu_num: Cluster maximum SPU number.
        :param pulumi.Input[_builtins.str] name: Cluster name.
        :param pulumi.Input[_builtins.str] region: The region in which to create the cloud stream service cluster resource. If
               omitted, the provider-level region will be used. Changing this creates a new cloud stream service cluster resource.
        :param pulumi.Input[_builtins.str] subnet_cidr: Cluster sub segment. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] subnet_gateway: Cluster subnet gateway. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.int] used_spu_num: The used SPU number of Cluster.
        :param pulumi.Input[_builtins.str] vpc_cidr: Cluster VPC network segment. Changing this parameter will create a new
               resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["manager_node_spu_num"] = manager_node_spu_num
        __props__.__dict__["max_spu_num"] = max_spu_num
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["subnet_cidr"] = subnet_cidr
        __props__.__dict__["subnet_gateway"] = subnet_gateway
        __props__.__dict__["used_spu_num"] = used_spu_num
        __props__.__dict__["vpc_cidr"] = vpc_cidr
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        cluster description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="managerNodeSpuNum")
    def manager_node_spu_num(self) -> pulumi.Output[_builtins.int]:
        """
        Cluster management node SPU number.
        """
        return pulumi.get(self, "manager_node_spu_num")

    @_builtins.property
    @pulumi.getter(name="maxSpuNum")
    def max_spu_num(self) -> pulumi.Output[_builtins.int]:
        """
        Cluster maximum SPU number.
        """
        return pulumi.get(self, "max_spu_num")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the cloud stream service cluster resource. If
        omitted, the provider-level region will be used. Changing this creates a new cloud stream service cluster resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster sub segment. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "subnet_cidr")

    @_builtins.property
    @pulumi.getter(name="subnetGateway")
    def subnet_gateway(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster subnet gateway. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "subnet_gateway")

    @_builtins.property
    @pulumi.getter(name="usedSpuNum")
    def used_spu_num(self) -> pulumi.Output[_builtins.int]:
        """
        The used SPU number of Cluster.
        """
        return pulumi.get(self, "used_spu_num")

    @_builtins.property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster VPC network segment. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "vpc_cidr")

