# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'PeeringConnectTargetVpcInfoArgs',
    'PeeringConnectTargetVpcInfoArgsDict',
    'PeeringConnectV1TargetVpcInfoArgs',
    'PeeringConnectV1TargetVpcInfoArgsDict',
]

MYPY = False

if not MYPY:
    class PeeringConnectTargetVpcInfoArgsDict(TypedDict):
        vpc_id: pulumi.Input[_builtins.str]
        """
        The VPC ID. Changing this parameter will create a new resource.
        """
        project_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The project ID to which target vpc belongs. Changing this parameter will
        create a new resource.
        """
elif False:
    PeeringConnectTargetVpcInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PeeringConnectTargetVpcInfoArgs:
    def __init__(__self__, *,
                 vpc_id: pulumi.Input[_builtins.str],
                 project_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] project_id: The project ID to which target vpc belongs. Changing this parameter will
               create a new resource.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        The VPC ID. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The project ID to which target vpc belongs. Changing this parameter will
        create a new resource.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)


if not MYPY:
    class PeeringConnectV1TargetVpcInfoArgsDict(TypedDict):
        vpc_id: pulumi.Input[_builtins.str]
        project_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    PeeringConnectV1TargetVpcInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PeeringConnectV1TargetVpcInfoArgs:
    def __init__(__self__, *,
                 vpc_id: pulumi.Input[_builtins.str],
                 project_id: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "vpc_id", vpc_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)


