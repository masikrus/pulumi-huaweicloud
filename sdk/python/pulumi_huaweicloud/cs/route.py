# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['RouteArgs', 'Route']

@pulumi.input_type
class RouteArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 destination: pulumi.Input[_builtins.str],
                 peering_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Route resource.
        :param pulumi.Input[_builtins.str] cluster_id: The id of cloud stream cluster. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] destination: Routing destination CIDR. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] peering_id: The peering connection id of cloud stream cluster. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the cs peering connect route resource. If
               omitted, the provider-level region will be used. Changing this creates a new cs peering connect route resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "peering_id", peering_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        The id of cloud stream cluster. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Input[_builtins.str]:
        """
        Routing destination CIDR. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter(name="peeringId")
    def peering_id(self) -> pulumi.Input[_builtins.str]:
        """
        The peering connection id of cloud stream cluster. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "peering_id")

    @peering_id.setter
    def peering_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "peering_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the cs peering connect route resource. If
        omitted, the provider-level region will be used. Changing this creates a new cs peering connect route resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RouteState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 peering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Route resources.
        :param pulumi.Input[_builtins.str] cluster_id: The id of cloud stream cluster. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] destination: Routing destination CIDR. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] peering_id: The peering connection id of cloud stream cluster. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the cs peering connect route resource. If
               omitted, the provider-level region will be used. Changing this creates a new cs peering connect route resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if peering_id is not None:
            pulumi.set(__self__, "peering_id", peering_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of cloud stream cluster. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing destination CIDR. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter(name="peeringId")
    def peering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The peering connection id of cloud stream cluster. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "peering_id")

    @peering_id.setter
    def peering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peering_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the cs peering connect route resource. If
        omitted, the provider-level region will be used. Changing this creates a new cs peering connect route resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:cs/route:Route")
class Route(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 peering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Cloud Stream Service cluster peering connect route management.

        !> **WARNING:** It has been deprecated, use `Dli.Queue` instead.

        ## Example Usage

        ### create a cluster peering connect route

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        cluster = huaweicloud.cs.Cluster("cluster", name="terraform_cs_cluster_test")
        vpc = huaweicloud.vpc.Vpc("vpc",
            name="terraform_vpc_test",
            cidr="192.168.0.0/16")
        subnet = huaweicloud.vpc.Subnet("subnet",
            name="terraform_vpc_subnet_test",
            cidr="192.168.0.0/16",
            gateway_ip="192.168.0.1",
            vpc_id=vpc.id)
        peering = huaweicloud.cs.PeeringConnect("peering",
            name="terraform_cs_peering_connect_test",
            target_vpc_info={
                "vpc_id": vpc.id,
            },
            cluster_id=cluster.id)
        route = huaweicloud.cs.Route("route",
            cluster_id=cluster.id,
            peering_id=peering.id,
            destination=subnet.cidr)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: The id of cloud stream cluster. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] destination: Routing destination CIDR. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] peering_id: The peering connection id of cloud stream cluster. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the cs peering connect route resource. If
               omitted, the provider-level region will be used. Changing this creates a new cs peering connect route resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Cloud Stream Service cluster peering connect route management.

        !> **WARNING:** It has been deprecated, use `Dli.Queue` instead.

        ## Example Usage

        ### create a cluster peering connect route

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        cluster = huaweicloud.cs.Cluster("cluster", name="terraform_cs_cluster_test")
        vpc = huaweicloud.vpc.Vpc("vpc",
            name="terraform_vpc_test",
            cidr="192.168.0.0/16")
        subnet = huaweicloud.vpc.Subnet("subnet",
            name="terraform_vpc_subnet_test",
            cidr="192.168.0.0/16",
            gateway_ip="192.168.0.1",
            vpc_id=vpc.id)
        peering = huaweicloud.cs.PeeringConnect("peering",
            name="terraform_cs_peering_connect_test",
            target_vpc_info={
                "vpc_id": vpc.id,
            },
            cluster_id=cluster.id)
        route = huaweicloud.cs.Route("route",
            cluster_id=cluster.id,
            peering_id=peering.id,
            destination=subnet.cidr)
        ```

        :param str resource_name: The name of the resource.
        :param RouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 peering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteArgs.__new__(RouteArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            if peering_id is None and not opts.urn:
                raise TypeError("Missing required property 'peering_id'")
            __props__.__dict__["peering_id"] = peering_id
            __props__.__dict__["region"] = region
        super(Route, __self__).__init__(
            'huaweicloud:cs/route:Route',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            destination: Optional[pulumi.Input[_builtins.str]] = None,
            peering_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'Route':
        """
        Get an existing Route resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: The id of cloud stream cluster. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] destination: Routing destination CIDR. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] peering_id: The peering connection id of cloud stream cluster. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the cs peering connect route resource. If
               omitted, the provider-level region will be used. Changing this creates a new cs peering connect route resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteState.__new__(_RouteState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["destination"] = destination
        __props__.__dict__["peering_id"] = peering_id
        __props__.__dict__["region"] = region
        return Route(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        The id of cloud stream cluster. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Output[_builtins.str]:
        """
        Routing destination CIDR. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter(name="peeringId")
    def peering_id(self) -> pulumi.Output[_builtins.str]:
        """
        The peering connection id of cloud stream cluster. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "peering_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the cs peering connect route resource. If
        omitted, the provider-level region will be used. Changing this creates a new cs peering connect route resource.
        """
        return pulumi.get(self, "region")

