# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 assume_role: Optional[pulumi.Input['ProviderAssumeRoleArgs']] = None,
                 auth_url: Optional[pulumi.Input[_builtins.str]] = None,
                 cacert_file: Optional[pulumi.Input[_builtins.str]] = None,
                 cert: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud: Optional[pulumi.Input[_builtins.str]] = None,
                 default_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 delegated_project: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 insecure: Optional[pulumi.Input[_builtins.bool]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 regional: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 security_token: Optional[pulumi.Input[_builtins.str]] = None,
                 shared_config_file: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_check_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 skip_check_website_type: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_name: Optional[pulumi.Input[_builtins.str]] = None,
                 token: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[_builtins.str] access_key: The access key of the HuaweiCloud to use.
        :param pulumi.Input[_builtins.str] agency_domain_name: The name of domain who created the agency (Identity v3).
        :param pulumi.Input[_builtins.str] agency_name: The name of agency
        :param pulumi.Input[_builtins.str] auth_url: The Identity authentication URL.
        :param pulumi.Input[_builtins.str] cacert_file: A Custom CA certificate.
        :param pulumi.Input[_builtins.str] cert: A client certificate to authenticate with.
        :param pulumi.Input[_builtins.str] cloud: The endpoint of cloud provider, defaults to myhuaweicloud.com
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] default_tags: The default tags of resources managed by this provider
        :param pulumi.Input[_builtins.str] delegated_project: The name of delegated project (Identity v3).
        :param pulumi.Input[_builtins.str] domain_id: The ID of the Domain to scope to.
        :param pulumi.Input[_builtins.str] domain_name: The name of the Domain to scope to.
        :param pulumi.Input[_builtins.bool] enable_force_new: Whether to enable ForceNew
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] endpoints: The custom endpoints used to override the default endpoint URL.
        :param pulumi.Input[_builtins.str] enterprise_project_id: enterprise project id
        :param pulumi.Input[_builtins.bool] insecure: Trust self-signed certificates.
        :param pulumi.Input[_builtins.str] key: A client private key to authenticate with.
        :param pulumi.Input[_builtins.int] max_retries: How many times HTTP connection should be retried until giving up.
        :param pulumi.Input[_builtins.str] password: Password to login with.
        :param pulumi.Input[_builtins.str] profile: The profile name as set in the shared config file.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project to login with.
        :param pulumi.Input[_builtins.str] project_name: The name of the project to login with.
        :param pulumi.Input[_builtins.str] region: The HuaweiCloud region to connect to.
        :param pulumi.Input[_builtins.bool] regional: Whether the service endpoints are regional
        :param pulumi.Input[_builtins.str] secret_key: The secret key of the HuaweiCloud to use.
        :param pulumi.Input[_builtins.str] security_token: The security token to authenticate with a temporary security credential.
        :param pulumi.Input[_builtins.str] shared_config_file: The path to the shared config file. If not set, the default is ~/.hcloud/config.json.
        :param pulumi.Input[_builtins.str] signing_algorithm: The signing algorithm for authentication
        :param pulumi.Input[_builtins.bool] skip_check_upgrade: Whether to skip upgrade check
        :param pulumi.Input[_builtins.bool] skip_check_website_type: Whether to skip website type check
        :param pulumi.Input[_builtins.str] tenant_id: The ID of the Tenant (Identity v2) to login with.
        :param pulumi.Input[_builtins.str] tenant_name: The name of the Tenant (Identity v2) to login with.
        :param pulumi.Input[_builtins.str] token: Authentication token to use as an alternative to username/password.
        :param pulumi.Input[_builtins.str] user_id: User ID to login with.
        :param pulumi.Input[_builtins.str] user_name: Username to login with.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if agency_domain_name is not None:
            pulumi.set(__self__, "agency_domain_name", agency_domain_name)
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if cacert_file is not None:
            pulumi.set(__self__, "cacert_file", cacert_file)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if default_tags is not None:
            pulumi.set(__self__, "default_tags", default_tags)
        if delegated_project is not None:
            pulumi.set(__self__, "delegated_project", delegated_project)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if regional is not None:
            pulumi.set(__self__, "regional", regional)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if security_token is not None:
            pulumi.set(__self__, "security_token", security_token)
        if shared_config_file is not None:
            pulumi.set(__self__, "shared_config_file", shared_config_file)
        if signing_algorithm is not None:
            pulumi.set(__self__, "signing_algorithm", signing_algorithm)
        if skip_check_upgrade is not None:
            pulumi.set(__self__, "skip_check_upgrade", skip_check_upgrade)
        if skip_check_website_type is not None:
            pulumi.set(__self__, "skip_check_website_type", skip_check_website_type)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access key of the HuaweiCloud to use.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="agencyDomainName")
    def agency_domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of domain who created the agency (Identity v3).
        """
        return pulumi.get(self, "agency_domain_name")

    @agency_domain_name.setter
    def agency_domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_domain_name", value)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of agency
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input['ProviderAssumeRoleArgs']]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input['ProviderAssumeRoleArgs']]):
        pulumi.set(self, "assume_role", value)

    @_builtins.property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Identity authentication URL.
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_url", value)

    @_builtins.property
    @pulumi.getter(name="cacertFile")
    def cacert_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A Custom CA certificate.
        """
        return pulumi.get(self, "cacert_file")

    @cacert_file.setter
    def cacert_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cacert_file", value)

    @_builtins.property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A client certificate to authenticate with.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cert", value)

    @_builtins.property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The endpoint of cloud provider, defaults to myhuaweicloud.com
        """
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud", value)

    @_builtins.property
    @pulumi.getter(name="defaultTags")
    def default_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The default tags of resources managed by this provider
        """
        return pulumi.get(self, "default_tags")

    @default_tags.setter
    def default_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "default_tags", value)

    @_builtins.property
    @pulumi.getter(name="delegatedProject")
    def delegated_project(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of delegated project (Identity v3).
        """
        return pulumi.get(self, "delegated_project")

    @delegated_project.setter
    def delegated_project(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delegated_project", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Domain to scope to.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Domain to scope to.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable ForceNew
        """
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The custom endpoints used to override the default endpoint URL.
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "endpoints", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        enterprise project id
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Trust self-signed certificates.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "insecure", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A client private key to authenticate with.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        How many times HTTP connection should be retried until giving up.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_retries", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Password to login with.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The profile name as set in the shared config file.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the project to login with.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the project to login with.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The HuaweiCloud region to connect to.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def regional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the service endpoints are regional
        """
        return pulumi.get(self, "regional")

    @regional.setter
    def regional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "regional", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secret key of the HuaweiCloud to use.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter(name="securityToken")
    def security_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The security token to authenticate with a temporary security credential.
        """
        return pulumi.get(self, "security_token")

    @security_token.setter
    def security_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_token", value)

    @_builtins.property
    @pulumi.getter(name="sharedConfigFile")
    def shared_config_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path to the shared config file. If not set, the default is ~/.hcloud/config.json.
        """
        return pulumi.get(self, "shared_config_file")

    @shared_config_file.setter
    def shared_config_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shared_config_file", value)

    @_builtins.property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The signing algorithm for authentication
        """
        return pulumi.get(self, "signing_algorithm")

    @signing_algorithm.setter
    def signing_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signing_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="skipCheckUpgrade")
    def skip_check_upgrade(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to skip upgrade check
        """
        return pulumi.get(self, "skip_check_upgrade")

    @skip_check_upgrade.setter
    def skip_check_upgrade(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "skip_check_upgrade", value)

    @_builtins.property
    @pulumi.getter(name="skipCheckWebsiteType")
    def skip_check_website_type(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to skip website type check
        """
        return pulumi.get(self, "skip_check_website_type")

    @skip_check_website_type.setter
    def skip_check_website_type(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "skip_check_website_type", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Tenant (Identity v2) to login with.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Tenant (Identity v2) to login with.
        """
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_name", value)

    @_builtins.property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authentication token to use as an alternative to username/password.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "token", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User ID to login with.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Username to login with.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


@pulumi.type_token("pulumi:providers:huaweicloud")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 assume_role: Optional[pulumi.Input[Union['ProviderAssumeRoleArgs', 'ProviderAssumeRoleArgsDict']]] = None,
                 auth_url: Optional[pulumi.Input[_builtins.str]] = None,
                 cacert_file: Optional[pulumi.Input[_builtins.str]] = None,
                 cert: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud: Optional[pulumi.Input[_builtins.str]] = None,
                 default_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 delegated_project: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 insecure: Optional[pulumi.Input[_builtins.bool]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 regional: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 security_token: Optional[pulumi.Input[_builtins.str]] = None,
                 shared_config_file: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_check_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 skip_check_website_type: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_name: Optional[pulumi.Input[_builtins.str]] = None,
                 token: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        The provider type for the huaweicloud package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_key: The access key of the HuaweiCloud to use.
        :param pulumi.Input[_builtins.str] agency_domain_name: The name of domain who created the agency (Identity v3).
        :param pulumi.Input[_builtins.str] agency_name: The name of agency
        :param pulumi.Input[_builtins.str] auth_url: The Identity authentication URL.
        :param pulumi.Input[_builtins.str] cacert_file: A Custom CA certificate.
        :param pulumi.Input[_builtins.str] cert: A client certificate to authenticate with.
        :param pulumi.Input[_builtins.str] cloud: The endpoint of cloud provider, defaults to myhuaweicloud.com
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] default_tags: The default tags of resources managed by this provider
        :param pulumi.Input[_builtins.str] delegated_project: The name of delegated project (Identity v3).
        :param pulumi.Input[_builtins.str] domain_id: The ID of the Domain to scope to.
        :param pulumi.Input[_builtins.str] domain_name: The name of the Domain to scope to.
        :param pulumi.Input[_builtins.bool] enable_force_new: Whether to enable ForceNew
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] endpoints: The custom endpoints used to override the default endpoint URL.
        :param pulumi.Input[_builtins.str] enterprise_project_id: enterprise project id
        :param pulumi.Input[_builtins.bool] insecure: Trust self-signed certificates.
        :param pulumi.Input[_builtins.str] key: A client private key to authenticate with.
        :param pulumi.Input[_builtins.int] max_retries: How many times HTTP connection should be retried until giving up.
        :param pulumi.Input[_builtins.str] password: Password to login with.
        :param pulumi.Input[_builtins.str] profile: The profile name as set in the shared config file.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project to login with.
        :param pulumi.Input[_builtins.str] project_name: The name of the project to login with.
        :param pulumi.Input[_builtins.str] region: The HuaweiCloud region to connect to.
        :param pulumi.Input[_builtins.bool] regional: Whether the service endpoints are regional
        :param pulumi.Input[_builtins.str] secret_key: The secret key of the HuaweiCloud to use.
        :param pulumi.Input[_builtins.str] security_token: The security token to authenticate with a temporary security credential.
        :param pulumi.Input[_builtins.str] shared_config_file: The path to the shared config file. If not set, the default is ~/.hcloud/config.json.
        :param pulumi.Input[_builtins.str] signing_algorithm: The signing algorithm for authentication
        :param pulumi.Input[_builtins.bool] skip_check_upgrade: Whether to skip upgrade check
        :param pulumi.Input[_builtins.bool] skip_check_website_type: Whether to skip website type check
        :param pulumi.Input[_builtins.str] tenant_id: The ID of the Tenant (Identity v2) to login with.
        :param pulumi.Input[_builtins.str] tenant_name: The name of the Tenant (Identity v2) to login with.
        :param pulumi.Input[_builtins.str] token: Authentication token to use as an alternative to username/password.
        :param pulumi.Input[_builtins.str] user_id: User ID to login with.
        :param pulumi.Input[_builtins.str] user_name: Username to login with.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the huaweicloud package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 assume_role: Optional[pulumi.Input[Union['ProviderAssumeRoleArgs', 'ProviderAssumeRoleArgsDict']]] = None,
                 auth_url: Optional[pulumi.Input[_builtins.str]] = None,
                 cacert_file: Optional[pulumi.Input[_builtins.str]] = None,
                 cert: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud: Optional[pulumi.Input[_builtins.str]] = None,
                 default_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 delegated_project: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 insecure: Optional[pulumi.Input[_builtins.bool]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 regional: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 security_token: Optional[pulumi.Input[_builtins.str]] = None,
                 shared_config_file: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_check_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 skip_check_website_type: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_name: Optional[pulumi.Input[_builtins.str]] = None,
                 token: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["access_key"] = access_key
            __props__.__dict__["agency_domain_name"] = agency_domain_name
            __props__.__dict__["agency_name"] = agency_name
            __props__.__dict__["assume_role"] = pulumi.Output.from_input(assume_role).apply(pulumi.runtime.to_json) if assume_role is not None else None
            __props__.__dict__["auth_url"] = auth_url
            __props__.__dict__["cacert_file"] = cacert_file
            __props__.__dict__["cert"] = cert
            __props__.__dict__["cloud"] = cloud
            __props__.__dict__["default_tags"] = pulumi.Output.from_input(default_tags).apply(pulumi.runtime.to_json) if default_tags is not None else None
            __props__.__dict__["delegated_project"] = delegated_project
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["enable_force_new"] = pulumi.Output.from_input(enable_force_new).apply(pulumi.runtime.to_json) if enable_force_new is not None else None
            __props__.__dict__["endpoints"] = pulumi.Output.from_input(endpoints).apply(pulumi.runtime.to_json) if endpoints is not None else None
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["insecure"] = pulumi.Output.from_input(insecure).apply(pulumi.runtime.to_json) if insecure is not None else None
            __props__.__dict__["key"] = key
            __props__.__dict__["max_retries"] = pulumi.Output.from_input(max_retries).apply(pulumi.runtime.to_json) if max_retries is not None else None
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["profile"] = profile
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["region"] = region
            __props__.__dict__["regional"] = pulumi.Output.from_input(regional).apply(pulumi.runtime.to_json) if regional is not None else None
            __props__.__dict__["secret_key"] = secret_key
            __props__.__dict__["security_token"] = security_token
            __props__.__dict__["shared_config_file"] = shared_config_file
            __props__.__dict__["signing_algorithm"] = signing_algorithm
            __props__.__dict__["skip_check_upgrade"] = pulumi.Output.from_input(skip_check_upgrade).apply(pulumi.runtime.to_json) if skip_check_upgrade is not None else None
            __props__.__dict__["skip_check_website_type"] = pulumi.Output.from_input(skip_check_website_type).apply(pulumi.runtime.to_json) if skip_check_website_type is not None else None
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["tenant_name"] = tenant_name
            __props__.__dict__["token"] = token
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["user_name"] = user_name
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'huaweicloud',
            resource_name,
            __props__,
            opts)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The access key of the HuaweiCloud to use.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="agencyDomainName")
    def agency_domain_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of domain who created the agency (Identity v3).
        """
        return pulumi.get(self, "agency_domain_name")

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of agency
        """
        return pulumi.get(self, "agency_name")

    @_builtins.property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Identity authentication URL.
        """
        return pulumi.get(self, "auth_url")

    @_builtins.property
    @pulumi.getter(name="cacertFile")
    def cacert_file(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A Custom CA certificate.
        """
        return pulumi.get(self, "cacert_file")

    @_builtins.property
    @pulumi.getter
    def cert(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A client certificate to authenticate with.
        """
        return pulumi.get(self, "cert")

    @_builtins.property
    @pulumi.getter
    def cloud(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The endpoint of cloud provider, defaults to myhuaweicloud.com
        """
        return pulumi.get(self, "cloud")

    @_builtins.property
    @pulumi.getter(name="delegatedProject")
    def delegated_project(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of delegated project (Identity v3).
        """
        return pulumi.get(self, "delegated_project")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the Domain to scope to.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the Domain to scope to.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        enterprise project id
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A client private key to authenticate with.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Password to login with.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The profile name as set in the shared config file.
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the project to login with.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the project to login with.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The HuaweiCloud region to connect to.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The secret key of the HuaweiCloud to use.
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="securityToken")
    def security_token(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The security token to authenticate with a temporary security credential.
        """
        return pulumi.get(self, "security_token")

    @_builtins.property
    @pulumi.getter(name="sharedConfigFile")
    def shared_config_file(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The path to the shared config file. If not set, the default is ~/.hcloud/config.json.
        """
        return pulumi.get(self, "shared_config_file")

    @_builtins.property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The signing algorithm for authentication
        """
        return pulumi.get(self, "signing_algorithm")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the Tenant (Identity v2) to login with.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the Tenant (Identity v2) to login with.
        """
        return pulumi.get(self, "tenant_name")

    @_builtins.property
    @pulumi.getter
    def token(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Authentication token to use as an alternative to username/password.
        """
        return pulumi.get(self, "token")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        User ID to login with.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Username to login with.
        """
        return pulumi.get(self, "user_name")

    @pulumi.output_type
    class TerraformConfigResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @_builtins.property
        @pulumi.getter
        def result(self) -> Mapping[str, Any]:
            return pulumi.get(self, "result")

    def terraform_config(__self__) -> pulumi.Output['Provider.TerraformConfigResult']:
        """
        This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('pulumi:providers:huaweicloud/terraformConfig', __args__, res=__self__, typ=Provider.TerraformConfigResult)

