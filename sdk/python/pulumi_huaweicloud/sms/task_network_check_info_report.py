# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['TaskNetworkCheckInfoReportArgs', 'TaskNetworkCheckInfoReport']

@pulumi.input_type
class TaskNetworkCheckInfoReportArgs:
    def __init__(__self__, *,
                 cpu_usage: pulumi.Input[_builtins.float],
                 evaluation_result: pulumi.Input[_builtins.str],
                 loss_percentage: pulumi.Input[_builtins.float],
                 mem_usage: pulumi.Input[_builtins.float],
                 migration_speed: pulumi.Input[_builtins.float],
                 network_delay: pulumi.Input[_builtins.float],
                 network_jitter: pulumi.Input[_builtins.float],
                 task_id: pulumi.Input[_builtins.str],
                 destination_connectivity: Optional[pulumi.Input[_builtins.bool]] = None,
                 domain_connectivity: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TaskNetworkCheckInfoReport resource.
        :param pulumi.Input[_builtins.float] cpu_usage: Specifies the CPU usage.
        :param pulumi.Input[_builtins.str] evaluation_result: Specifies the network evaluation result.
        :param pulumi.Input[_builtins.float] loss_percentage: Specifies the packet loss rate.
        :param pulumi.Input[_builtins.float] mem_usage: Specifies the memory usage.
        :param pulumi.Input[_builtins.float] migration_speed: Specifies the bandwidth.
        :param pulumi.Input[_builtins.float] network_delay: Specifies the network latency.
        :param pulumi.Input[_builtins.float] network_jitter: Specifies the network jitter.
        :param pulumi.Input[_builtins.str] task_id: Specifies the task ID.
        :param pulumi.Input[_builtins.bool] destination_connectivity: Specifies the connectivity to the target server.
        :param pulumi.Input[_builtins.bool] domain_connectivity: Specifies the connectivity to domain names.
        """
        pulumi.set(__self__, "cpu_usage", cpu_usage)
        pulumi.set(__self__, "evaluation_result", evaluation_result)
        pulumi.set(__self__, "loss_percentage", loss_percentage)
        pulumi.set(__self__, "mem_usage", mem_usage)
        pulumi.set(__self__, "migration_speed", migration_speed)
        pulumi.set(__self__, "network_delay", network_delay)
        pulumi.set(__self__, "network_jitter", network_jitter)
        pulumi.set(__self__, "task_id", task_id)
        if destination_connectivity is not None:
            pulumi.set(__self__, "destination_connectivity", destination_connectivity)
        if domain_connectivity is not None:
            pulumi.set(__self__, "domain_connectivity", domain_connectivity)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)

    @_builtins.property
    @pulumi.getter(name="cpuUsage")
    def cpu_usage(self) -> pulumi.Input[_builtins.float]:
        """
        Specifies the CPU usage.
        """
        return pulumi.get(self, "cpu_usage")

    @cpu_usage.setter
    def cpu_usage(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "cpu_usage", value)

    @_builtins.property
    @pulumi.getter(name="evaluationResult")
    def evaluation_result(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the network evaluation result.
        """
        return pulumi.get(self, "evaluation_result")

    @evaluation_result.setter
    def evaluation_result(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "evaluation_result", value)

    @_builtins.property
    @pulumi.getter(name="lossPercentage")
    def loss_percentage(self) -> pulumi.Input[_builtins.float]:
        """
        Specifies the packet loss rate.
        """
        return pulumi.get(self, "loss_percentage")

    @loss_percentage.setter
    def loss_percentage(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "loss_percentage", value)

    @_builtins.property
    @pulumi.getter(name="memUsage")
    def mem_usage(self) -> pulumi.Input[_builtins.float]:
        """
        Specifies the memory usage.
        """
        return pulumi.get(self, "mem_usage")

    @mem_usage.setter
    def mem_usage(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "mem_usage", value)

    @_builtins.property
    @pulumi.getter(name="migrationSpeed")
    def migration_speed(self) -> pulumi.Input[_builtins.float]:
        """
        Specifies the bandwidth.
        """
        return pulumi.get(self, "migration_speed")

    @migration_speed.setter
    def migration_speed(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "migration_speed", value)

    @_builtins.property
    @pulumi.getter(name="networkDelay")
    def network_delay(self) -> pulumi.Input[_builtins.float]:
        """
        Specifies the network latency.
        """
        return pulumi.get(self, "network_delay")

    @network_delay.setter
    def network_delay(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "network_delay", value)

    @_builtins.property
    @pulumi.getter(name="networkJitter")
    def network_jitter(self) -> pulumi.Input[_builtins.float]:
        """
        Specifies the network jitter.
        """
        return pulumi.get(self, "network_jitter")

    @network_jitter.setter
    def network_jitter(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "network_jitter", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationConnectivity")
    def destination_connectivity(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the connectivity to the target server.
        """
        return pulumi.get(self, "destination_connectivity")

    @destination_connectivity.setter
    def destination_connectivity(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "destination_connectivity", value)

    @_builtins.property
    @pulumi.getter(name="domainConnectivity")
    def domain_connectivity(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the connectivity to domain names.
        """
        return pulumi.get(self, "domain_connectivity")

    @domain_connectivity.setter
    def domain_connectivity(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "domain_connectivity", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)


@pulumi.input_type
class _TaskNetworkCheckInfoReportState:
    def __init__(__self__, *,
                 cpu_usage: Optional[pulumi.Input[_builtins.float]] = None,
                 destination_connectivity: Optional[pulumi.Input[_builtins.bool]] = None,
                 domain_connectivity: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 evaluation_result: Optional[pulumi.Input[_builtins.str]] = None,
                 loss_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 mem_usage: Optional[pulumi.Input[_builtins.float]] = None,
                 migration_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 network_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 network_jitter: Optional[pulumi.Input[_builtins.float]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TaskNetworkCheckInfoReport resources.
        :param pulumi.Input[_builtins.float] cpu_usage: Specifies the CPU usage.
        :param pulumi.Input[_builtins.bool] destination_connectivity: Specifies the connectivity to the target server.
        :param pulumi.Input[_builtins.bool] domain_connectivity: Specifies the connectivity to domain names.
        :param pulumi.Input[_builtins.str] evaluation_result: Specifies the network evaluation result.
        :param pulumi.Input[_builtins.float] loss_percentage: Specifies the packet loss rate.
        :param pulumi.Input[_builtins.float] mem_usage: Specifies the memory usage.
        :param pulumi.Input[_builtins.float] migration_speed: Specifies the bandwidth.
        :param pulumi.Input[_builtins.float] network_delay: Specifies the network latency.
        :param pulumi.Input[_builtins.float] network_jitter: Specifies the network jitter.
        :param pulumi.Input[_builtins.str] task_id: Specifies the task ID.
        """
        if cpu_usage is not None:
            pulumi.set(__self__, "cpu_usage", cpu_usage)
        if destination_connectivity is not None:
            pulumi.set(__self__, "destination_connectivity", destination_connectivity)
        if domain_connectivity is not None:
            pulumi.set(__self__, "domain_connectivity", domain_connectivity)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if evaluation_result is not None:
            pulumi.set(__self__, "evaluation_result", evaluation_result)
        if loss_percentage is not None:
            pulumi.set(__self__, "loss_percentage", loss_percentage)
        if mem_usage is not None:
            pulumi.set(__self__, "mem_usage", mem_usage)
        if migration_speed is not None:
            pulumi.set(__self__, "migration_speed", migration_speed)
        if network_delay is not None:
            pulumi.set(__self__, "network_delay", network_delay)
        if network_jitter is not None:
            pulumi.set(__self__, "network_jitter", network_jitter)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter(name="cpuUsage")
    def cpu_usage(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the CPU usage.
        """
        return pulumi.get(self, "cpu_usage")

    @cpu_usage.setter
    def cpu_usage(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu_usage", value)

    @_builtins.property
    @pulumi.getter(name="destinationConnectivity")
    def destination_connectivity(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the connectivity to the target server.
        """
        return pulumi.get(self, "destination_connectivity")

    @destination_connectivity.setter
    def destination_connectivity(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "destination_connectivity", value)

    @_builtins.property
    @pulumi.getter(name="domainConnectivity")
    def domain_connectivity(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the connectivity to domain names.
        """
        return pulumi.get(self, "domain_connectivity")

    @domain_connectivity.setter
    def domain_connectivity(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "domain_connectivity", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="evaluationResult")
    def evaluation_result(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network evaluation result.
        """
        return pulumi.get(self, "evaluation_result")

    @evaluation_result.setter
    def evaluation_result(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "evaluation_result", value)

    @_builtins.property
    @pulumi.getter(name="lossPercentage")
    def loss_percentage(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the packet loss rate.
        """
        return pulumi.get(self, "loss_percentage")

    @loss_percentage.setter
    def loss_percentage(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "loss_percentage", value)

    @_builtins.property
    @pulumi.getter(name="memUsage")
    def mem_usage(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the memory usage.
        """
        return pulumi.get(self, "mem_usage")

    @mem_usage.setter
    def mem_usage(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "mem_usage", value)

    @_builtins.property
    @pulumi.getter(name="migrationSpeed")
    def migration_speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the bandwidth.
        """
        return pulumi.get(self, "migration_speed")

    @migration_speed.setter
    def migration_speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "migration_speed", value)

    @_builtins.property
    @pulumi.getter(name="networkDelay")
    def network_delay(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the network latency.
        """
        return pulumi.get(self, "network_delay")

    @network_delay.setter
    def network_delay(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "network_delay", value)

    @_builtins.property
    @pulumi.getter(name="networkJitter")
    def network_jitter(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the network jitter.
        """
        return pulumi.get(self, "network_jitter")

    @network_jitter.setter
    def network_jitter(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "network_jitter", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_id", value)


@pulumi.type_token("huaweicloud:Sms/taskNetworkCheckInfoReport:TaskNetworkCheckInfoReport")
class TaskNetworkCheckInfoReport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_usage: Optional[pulumi.Input[_builtins.float]] = None,
                 destination_connectivity: Optional[pulumi.Input[_builtins.bool]] = None,
                 domain_connectivity: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 evaluation_result: Optional[pulumi.Input[_builtins.str]] = None,
                 loss_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 mem_usage: Optional[pulumi.Input[_builtins.float]] = None,
                 migration_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 network_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 network_jitter: Optional[pulumi.Input[_builtins.float]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an SMS update task network check info resource within HuaweiCloud.

        > Deleting update task network check info resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_id = config.require_object("taskId")
        evaluation_result = config.require_object("evaluationResult")
        test = huaweicloud.sms.TaskNetworkCheckInfoReport("test",
            task_id=task_id,
            network_delay=20,
            network_jitter=2,
            migration_speed=100,
            loss_percentage=0,
            cpu_usage=20,
            mem_usage=20,
            evaluation_result=evaluation_result)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] cpu_usage: Specifies the CPU usage.
        :param pulumi.Input[_builtins.bool] destination_connectivity: Specifies the connectivity to the target server.
        :param pulumi.Input[_builtins.bool] domain_connectivity: Specifies the connectivity to domain names.
        :param pulumi.Input[_builtins.str] evaluation_result: Specifies the network evaluation result.
        :param pulumi.Input[_builtins.float] loss_percentage: Specifies the packet loss rate.
        :param pulumi.Input[_builtins.float] mem_usage: Specifies the memory usage.
        :param pulumi.Input[_builtins.float] migration_speed: Specifies the bandwidth.
        :param pulumi.Input[_builtins.float] network_delay: Specifies the network latency.
        :param pulumi.Input[_builtins.float] network_jitter: Specifies the network jitter.
        :param pulumi.Input[_builtins.str] task_id: Specifies the task ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TaskNetworkCheckInfoReportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an SMS update task network check info resource within HuaweiCloud.

        > Deleting update task network check info resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_id = config.require_object("taskId")
        evaluation_result = config.require_object("evaluationResult")
        test = huaweicloud.sms.TaskNetworkCheckInfoReport("test",
            task_id=task_id,
            network_delay=20,
            network_jitter=2,
            migration_speed=100,
            loss_percentage=0,
            cpu_usage=20,
            mem_usage=20,
            evaluation_result=evaluation_result)
        ```

        :param str resource_name: The name of the resource.
        :param TaskNetworkCheckInfoReportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TaskNetworkCheckInfoReportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_usage: Optional[pulumi.Input[_builtins.float]] = None,
                 destination_connectivity: Optional[pulumi.Input[_builtins.bool]] = None,
                 domain_connectivity: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 evaluation_result: Optional[pulumi.Input[_builtins.str]] = None,
                 loss_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 mem_usage: Optional[pulumi.Input[_builtins.float]] = None,
                 migration_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 network_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 network_jitter: Optional[pulumi.Input[_builtins.float]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TaskNetworkCheckInfoReportArgs.__new__(TaskNetworkCheckInfoReportArgs)

            if cpu_usage is None and not opts.urn:
                raise TypeError("Missing required property 'cpu_usage'")
            __props__.__dict__["cpu_usage"] = cpu_usage
            __props__.__dict__["destination_connectivity"] = destination_connectivity
            __props__.__dict__["domain_connectivity"] = domain_connectivity
            __props__.__dict__["enable_force_new"] = enable_force_new
            if evaluation_result is None and not opts.urn:
                raise TypeError("Missing required property 'evaluation_result'")
            __props__.__dict__["evaluation_result"] = evaluation_result
            if loss_percentage is None and not opts.urn:
                raise TypeError("Missing required property 'loss_percentage'")
            __props__.__dict__["loss_percentage"] = loss_percentage
            if mem_usage is None and not opts.urn:
                raise TypeError("Missing required property 'mem_usage'")
            __props__.__dict__["mem_usage"] = mem_usage
            if migration_speed is None and not opts.urn:
                raise TypeError("Missing required property 'migration_speed'")
            __props__.__dict__["migration_speed"] = migration_speed
            if network_delay is None and not opts.urn:
                raise TypeError("Missing required property 'network_delay'")
            __props__.__dict__["network_delay"] = network_delay
            if network_jitter is None and not opts.urn:
                raise TypeError("Missing required property 'network_jitter'")
            __props__.__dict__["network_jitter"] = network_jitter
            if task_id is None and not opts.urn:
                raise TypeError("Missing required property 'task_id'")
            __props__.__dict__["task_id"] = task_id
        super(TaskNetworkCheckInfoReport, __self__).__init__(
            'huaweicloud:Sms/taskNetworkCheckInfoReport:TaskNetworkCheckInfoReport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cpu_usage: Optional[pulumi.Input[_builtins.float]] = None,
            destination_connectivity: Optional[pulumi.Input[_builtins.bool]] = None,
            domain_connectivity: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            evaluation_result: Optional[pulumi.Input[_builtins.str]] = None,
            loss_percentage: Optional[pulumi.Input[_builtins.float]] = None,
            mem_usage: Optional[pulumi.Input[_builtins.float]] = None,
            migration_speed: Optional[pulumi.Input[_builtins.float]] = None,
            network_delay: Optional[pulumi.Input[_builtins.float]] = None,
            network_jitter: Optional[pulumi.Input[_builtins.float]] = None,
            task_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'TaskNetworkCheckInfoReport':
        """
        Get an existing TaskNetworkCheckInfoReport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] cpu_usage: Specifies the CPU usage.
        :param pulumi.Input[_builtins.bool] destination_connectivity: Specifies the connectivity to the target server.
        :param pulumi.Input[_builtins.bool] domain_connectivity: Specifies the connectivity to domain names.
        :param pulumi.Input[_builtins.str] evaluation_result: Specifies the network evaluation result.
        :param pulumi.Input[_builtins.float] loss_percentage: Specifies the packet loss rate.
        :param pulumi.Input[_builtins.float] mem_usage: Specifies the memory usage.
        :param pulumi.Input[_builtins.float] migration_speed: Specifies the bandwidth.
        :param pulumi.Input[_builtins.float] network_delay: Specifies the network latency.
        :param pulumi.Input[_builtins.float] network_jitter: Specifies the network jitter.
        :param pulumi.Input[_builtins.str] task_id: Specifies the task ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TaskNetworkCheckInfoReportState.__new__(_TaskNetworkCheckInfoReportState)

        __props__.__dict__["cpu_usage"] = cpu_usage
        __props__.__dict__["destination_connectivity"] = destination_connectivity
        __props__.__dict__["domain_connectivity"] = domain_connectivity
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["evaluation_result"] = evaluation_result
        __props__.__dict__["loss_percentage"] = loss_percentage
        __props__.__dict__["mem_usage"] = mem_usage
        __props__.__dict__["migration_speed"] = migration_speed
        __props__.__dict__["network_delay"] = network_delay
        __props__.__dict__["network_jitter"] = network_jitter
        __props__.__dict__["task_id"] = task_id
        return TaskNetworkCheckInfoReport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cpuUsage")
    def cpu_usage(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the CPU usage.
        """
        return pulumi.get(self, "cpu_usage")

    @_builtins.property
    @pulumi.getter(name="destinationConnectivity")
    def destination_connectivity(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies the connectivity to the target server.
        """
        return pulumi.get(self, "destination_connectivity")

    @_builtins.property
    @pulumi.getter(name="domainConnectivity")
    def domain_connectivity(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies the connectivity to domain names.
        """
        return pulumi.get(self, "domain_connectivity")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="evaluationResult")
    def evaluation_result(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the network evaluation result.
        """
        return pulumi.get(self, "evaluation_result")

    @_builtins.property
    @pulumi.getter(name="lossPercentage")
    def loss_percentage(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the packet loss rate.
        """
        return pulumi.get(self, "loss_percentage")

    @_builtins.property
    @pulumi.getter(name="memUsage")
    def mem_usage(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the memory usage.
        """
        return pulumi.get(self, "mem_usage")

    @_builtins.property
    @pulumi.getter(name="migrationSpeed")
    def migration_speed(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the bandwidth.
        """
        return pulumi.get(self, "migration_speed")

    @_builtins.property
    @pulumi.getter(name="networkDelay")
    def network_delay(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the network latency.
        """
        return pulumi.get(self, "network_delay")

    @_builtins.property
    @pulumi.getter(name="networkJitter")
    def network_jitter(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the network jitter.
        """
        return pulumi.get(self, "network_jitter")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "task_id")

