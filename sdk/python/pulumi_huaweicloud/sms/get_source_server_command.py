# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSourceServerCommandResult',
    'AwaitableGetSourceServerCommandResult',
    'get_source_server_command',
    'get_source_server_command_output',
]

@pulumi.output_type
class GetSourceServerCommandResult:
    """
    A collection of values returned by getSourceServerCommand.
    """
    def __init__(__self__, command_name=None, command_params=None, id=None, server_id=None):
        if command_name and not isinstance(command_name, str):
            raise TypeError("Expected argument 'command_name' to be a str")
        pulumi.set(__self__, "command_name", command_name)
        if command_params and not isinstance(command_params, list):
            raise TypeError("Expected argument 'command_params' to be a list")
        pulumi.set(__self__, "command_params", command_params)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)

    @_builtins.property
    @pulumi.getter(name="commandName")
    def command_name(self) -> _builtins.str:
        """
        Indicates the command name.
        Values can be **START**, **STOP**, **DELETE**, **SYNC** and **SKIP**.
        """
        return pulumi.get(self, "command_name")

    @_builtins.property
    @pulumi.getter(name="commandParams")
    def command_params(self) -> Sequence['outputs.GetSourceServerCommandCommandParamResult']:
        """
        Indicates the command response parameters.
        """
        return pulumi.get(self, "command_params")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        return pulumi.get(self, "server_id")


class AwaitableGetSourceServerCommandResult(GetSourceServerCommandResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSourceServerCommandResult(
            command_name=self.command_name,
            command_params=self.command_params,
            id=self.id,
            server_id=self.server_id)


def get_source_server_command(server_id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSourceServerCommandResult:
    """
    Use this data source to obtain commands from the SMS server.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_id = config.require_object("serverId")
    test = huaweicloud.Sms.get_source_server_command(server_id=server_id)
    ```


    :param _builtins.str server_id: Specifies the ID of the source server that the command is sent to.
    """
    __args__ = dict()
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Sms/getSourceServerCommand:getSourceServerCommand', __args__, opts=opts, typ=GetSourceServerCommandResult).value

    return AwaitableGetSourceServerCommandResult(
        command_name=pulumi.get(__ret__, 'command_name'),
        command_params=pulumi.get(__ret__, 'command_params'),
        id=pulumi.get(__ret__, 'id'),
        server_id=pulumi.get(__ret__, 'server_id'))
def get_source_server_command_output(server_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSourceServerCommandResult]:
    """
    Use this data source to obtain commands from the SMS server.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    server_id = config.require_object("serverId")
    test = huaweicloud.Sms.get_source_server_command(server_id=server_id)
    ```


    :param _builtins.str server_id: Specifies the ID of the source server that the command is sent to.
    """
    __args__ = dict()
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Sms/getSourceServerCommand:getSourceServerCommand', __args__, opts=opts, typ=GetSourceServerCommandResult)
    return __ret__.apply(lambda __response__: GetSourceServerCommandResult(
        command_name=pulumi.get(__response__, 'command_name'),
        command_params=pulumi.get(__response__, 'command_params'),
        id=pulumi.get(__response__, 'id'),
        server_id=pulumi.get(__response__, 'server_id')))
