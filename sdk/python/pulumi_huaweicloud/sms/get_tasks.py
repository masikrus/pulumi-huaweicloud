# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTasksResult',
    'AwaitableGetTasksResult',
    'get_tasks',
    'get_tasks_output',
]

@pulumi.output_type
class GetTasksResult:
    """
    A collection of values returned by getTasks.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, name=None, source_server_id=None, state=None, task_id=None, tasks=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if source_server_id and not isinstance(source_server_id, str):
            raise TypeError("Expected argument 'source_server_id' to be a str")
        pulumi.set(__self__, "source_server_id", source_server_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the migration project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the cloned server.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_server_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        Indicates the source server status.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetTasksTaskResult']:
        """
        Indicates the information about the queried tasks.
        """
        return pulumi.get(self, "tasks")


class AwaitableGetTasksResult(GetTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTasksResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            source_server_id=self.source_server_id,
            state=self.state,
            task_id=self.task_id,
            tasks=self.tasks)


def get_tasks(enterprise_project_id: Optional[_builtins.str] = None,
              name: Optional[_builtins.str] = None,
              source_server_id: Optional[_builtins.str] = None,
              state: Optional[_builtins.str] = None,
              task_id: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTasksResult:
    """
    Use this data source to get the list of SMS migration tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Sms.get_tasks()
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to be queried.
    :param _builtins.str name: Specifies the task name.
    :param _builtins.str source_server_id: Specifies the source server ID.
    :param _builtins.str state: Specifies the migration task status.
           Values can be as follows:
           + **READY**: The migration task is ready for execution.
           + **RUNNING**: The migration task is being executed.
           + **SYNCING**: The incremental data is being synchronized.
           + **MIGRATE_SUCCESS**: The migration succeeds.
           + **MIGRATE_FAIL**: The migration fails.
           + **ABORTING**: The migration task is being stopped.
           + **ABORT**: The migration task is stopped.
           + **DELETING**: The migration task is being deleted.
           + **SYNC_F_ROLLBACKING**: The synchronization fails and the task is being rolled back.
           + **SYNC_F_ROLLBACK_SUCCESS**: The synchronization fails and the rollback is successful.
    :param _builtins.str task_id: Specifies the task ID.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['sourceServerId'] = source_server_id
    __args__['state'] = state
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Sms/getTasks:getTasks', __args__, opts=opts, typ=GetTasksResult).value

    return AwaitableGetTasksResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        source_server_id=pulumi.get(__ret__, 'source_server_id'),
        state=pulumi.get(__ret__, 'state'),
        task_id=pulumi.get(__ret__, 'task_id'),
        tasks=pulumi.get(__ret__, 'tasks'))
def get_tasks_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     source_server_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     task_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTasksResult]:
    """
    Use this data source to get the list of SMS migration tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Sms.get_tasks()
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to be queried.
    :param _builtins.str name: Specifies the task name.
    :param _builtins.str source_server_id: Specifies the source server ID.
    :param _builtins.str state: Specifies the migration task status.
           Values can be as follows:
           + **READY**: The migration task is ready for execution.
           + **RUNNING**: The migration task is being executed.
           + **SYNCING**: The incremental data is being synchronized.
           + **MIGRATE_SUCCESS**: The migration succeeds.
           + **MIGRATE_FAIL**: The migration fails.
           + **ABORTING**: The migration task is being stopped.
           + **ABORT**: The migration task is stopped.
           + **DELETING**: The migration task is being deleted.
           + **SYNC_F_ROLLBACKING**: The synchronization fails and the task is being rolled back.
           + **SYNC_F_ROLLBACK_SUCCESS**: The synchronization fails and the rollback is successful.
    :param _builtins.str task_id: Specifies the task ID.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['sourceServerId'] = source_server_id
    __args__['state'] = state
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Sms/getTasks:getTasks', __args__, opts=opts, typ=GetTasksResult)
    return __ret__.apply(lambda __response__: GetTasksResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        source_server_id=pulumi.get(__response__, 'source_server_id'),
        state=pulumi.get(__response__, 'state'),
        task_id=pulumi.get(__response__, 'task_id'),
        tasks=pulumi.get(__response__, 'tasks')))
