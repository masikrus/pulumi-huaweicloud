# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetTaskSslCertificateAndPrivateKeyResult',
    'AwaitableGetTaskSslCertificateAndPrivateKeyResult',
    'get_task_ssl_certificate_and_private_key',
    'get_task_ssl_certificate_and_private_key_output',
]

@pulumi.output_type
class GetTaskSslCertificateAndPrivateKeyResult:
    """
    A collection of values returned by getTaskSslCertificateAndPrivateKey.
    """
    def __init__(__self__, ca=None, cert=None, enable_ca_cert=None, id=None, private_key=None, target_data_cert=None, target_data_private_key=None, target_mgmt_cert=None, target_mgmt_private_key=None, task_id=None):
        if ca and not isinstance(ca, str):
            raise TypeError("Expected argument 'ca' to be a str")
        pulumi.set(__self__, "ca", ca)
        if cert and not isinstance(cert, str):
            raise TypeError("Expected argument 'cert' to be a str")
        pulumi.set(__self__, "cert", cert)
        if enable_ca_cert and not isinstance(enable_ca_cert, bool):
            raise TypeError("Expected argument 'enable_ca_cert' to be a bool")
        pulumi.set(__self__, "enable_ca_cert", enable_ca_cert)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if private_key and not isinstance(private_key, str):
            raise TypeError("Expected argument 'private_key' to be a str")
        pulumi.set(__self__, "private_key", private_key)
        if target_data_cert and not isinstance(target_data_cert, str):
            raise TypeError("Expected argument 'target_data_cert' to be a str")
        pulumi.set(__self__, "target_data_cert", target_data_cert)
        if target_data_private_key and not isinstance(target_data_private_key, str):
            raise TypeError("Expected argument 'target_data_private_key' to be a str")
        pulumi.set(__self__, "target_data_private_key", target_data_private_key)
        if target_mgmt_cert and not isinstance(target_mgmt_cert, str):
            raise TypeError("Expected argument 'target_mgmt_cert' to be a str")
        pulumi.set(__self__, "target_mgmt_cert", target_mgmt_cert)
        if target_mgmt_private_key and not isinstance(target_mgmt_private_key, str):
            raise TypeError("Expected argument 'target_mgmt_private_key' to be a str")
        pulumi.set(__self__, "target_mgmt_private_key", target_mgmt_private_key)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter
    def ca(self) -> _builtins.str:
        """
        Indicates the CA certificate.
        """
        return pulumi.get(self, "ca")

    @_builtins.property
    @pulumi.getter
    def cert(self) -> _builtins.str:
        """
        Indicates the source certificate.
        """
        return pulumi.get(self, "cert")

    @_builtins.property
    @pulumi.getter(name="enableCaCert")
    def enable_ca_cert(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "enable_ca_cert")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> _builtins.str:
        """
        Indicates the source private key.
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter(name="targetDataCert")
    def target_data_cert(self) -> _builtins.str:
        """
        Indicates the certificate of the target server for data migration.
        """
        return pulumi.get(self, "target_data_cert")

    @_builtins.property
    @pulumi.getter(name="targetDataPrivateKey")
    def target_data_private_key(self) -> _builtins.str:
        """
        Indicates the private key of the target server for data migration.
        """
        return pulumi.get(self, "target_data_private_key")

    @_builtins.property
    @pulumi.getter(name="targetMgmtCert")
    def target_mgmt_cert(self) -> _builtins.str:
        """
        Indicates the certificate of the target server for migration task management.
        """
        return pulumi.get(self, "target_mgmt_cert")

    @_builtins.property
    @pulumi.getter(name="targetMgmtPrivateKey")
    def target_mgmt_private_key(self) -> _builtins.str:
        """
        Indicates the private key of the target server for migration task management.
        """
        return pulumi.get(self, "target_mgmt_private_key")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        return pulumi.get(self, "task_id")


class AwaitableGetTaskSslCertificateAndPrivateKeyResult(GetTaskSslCertificateAndPrivateKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTaskSslCertificateAndPrivateKeyResult(
            ca=self.ca,
            cert=self.cert,
            enable_ca_cert=self.enable_ca_cert,
            id=self.id,
            private_key=self.private_key,
            target_data_cert=self.target_data_cert,
            target_data_private_key=self.target_data_private_key,
            target_mgmt_cert=self.target_mgmt_cert,
            target_mgmt_private_key=self.target_mgmt_private_key,
            task_id=self.task_id)


def get_task_ssl_certificate_and_private_key(enable_ca_cert: Optional[_builtins.bool] = None,
                                             task_id: Optional[_builtins.str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTaskSslCertificateAndPrivateKeyResult:
    """
    Use this data source to download the certificate and private key (in PEM format) required for data migration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    task_id = config.require_object("taskId")
    test = huaweicloud.Sms.get_task_ssl_certificate_and_private_key(task_id=task_id)
    ```


    :param _builtins.bool enable_ca_cert: Specifies whether to generate a CA certificate. The default value is **false**.
    :param _builtins.str task_id: Specifies the migration task ID.
    """
    __args__ = dict()
    __args__['enableCaCert'] = enable_ca_cert
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Sms/getTaskSslCertificateAndPrivateKey:getTaskSslCertificateAndPrivateKey', __args__, opts=opts, typ=GetTaskSslCertificateAndPrivateKeyResult).value

    return AwaitableGetTaskSslCertificateAndPrivateKeyResult(
        ca=pulumi.get(__ret__, 'ca'),
        cert=pulumi.get(__ret__, 'cert'),
        enable_ca_cert=pulumi.get(__ret__, 'enable_ca_cert'),
        id=pulumi.get(__ret__, 'id'),
        private_key=pulumi.get(__ret__, 'private_key'),
        target_data_cert=pulumi.get(__ret__, 'target_data_cert'),
        target_data_private_key=pulumi.get(__ret__, 'target_data_private_key'),
        target_mgmt_cert=pulumi.get(__ret__, 'target_mgmt_cert'),
        target_mgmt_private_key=pulumi.get(__ret__, 'target_mgmt_private_key'),
        task_id=pulumi.get(__ret__, 'task_id'))
def get_task_ssl_certificate_and_private_key_output(enable_ca_cert: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                    task_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTaskSslCertificateAndPrivateKeyResult]:
    """
    Use this data source to download the certificate and private key (in PEM format) required for data migration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    task_id = config.require_object("taskId")
    test = huaweicloud.Sms.get_task_ssl_certificate_and_private_key(task_id=task_id)
    ```


    :param _builtins.bool enable_ca_cert: Specifies whether to generate a CA certificate. The default value is **false**.
    :param _builtins.str task_id: Specifies the migration task ID.
    """
    __args__ = dict()
    __args__['enableCaCert'] = enable_ca_cert
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Sms/getTaskSslCertificateAndPrivateKey:getTaskSslCertificateAndPrivateKey', __args__, opts=opts, typ=GetTaskSslCertificateAndPrivateKeyResult)
    return __ret__.apply(lambda __response__: GetTaskSslCertificateAndPrivateKeyResult(
        ca=pulumi.get(__response__, 'ca'),
        cert=pulumi.get(__response__, 'cert'),
        enable_ca_cert=pulumi.get(__response__, 'enable_ca_cert'),
        id=pulumi.get(__response__, 'id'),
        private_key=pulumi.get(__response__, 'private_key'),
        target_data_cert=pulumi.get(__response__, 'target_data_cert'),
        target_data_private_key=pulumi.get(__response__, 'target_data_private_key'),
        target_mgmt_cert=pulumi.get(__response__, 'target_mgmt_cert'),
        target_mgmt_private_key=pulumi.get(__response__, 'target_mgmt_private_key'),
        task_id=pulumi.get(__response__, 'task_id')))
