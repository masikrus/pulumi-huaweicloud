# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTaskConsistencyResultsResult',
    'AwaitableGetTaskConsistencyResultsResult',
    'get_task_consistency_results',
    'get_task_consistency_results_output',
]

@pulumi.output_type
class GetTaskConsistencyResultsResult:
    """
    A collection of values returned by getTaskConsistencyResults.
    """
    def __init__(__self__, id=None, result_lists=None, task_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_lists and not isinstance(result_lists, list):
            raise TypeError("Expected argument 'result_lists' to be a list")
        pulumi.set(__self__, "result_lists", result_lists)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resultLists")
    def result_lists(self) -> Sequence['outputs.GetTaskConsistencyResultsResultListResult']:
        """
        Indicates the consistency verification results.
        """
        return pulumi.get(self, "result_lists")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        return pulumi.get(self, "task_id")


class AwaitableGetTaskConsistencyResultsResult(GetTaskConsistencyResultsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTaskConsistencyResultsResult(
            id=self.id,
            result_lists=self.result_lists,
            task_id=self.task_id)


def get_task_consistency_results(task_id: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTaskConsistencyResultsResult:
    """
    Use this data source to get the list of SMS task consistency results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    task_id = config.require_object("taskId")
    test = huaweicloud.Sms.get_task_consistency_results(task_id=task_id)
    ```


    :param _builtins.str task_id: Specifies the task ID.
    """
    __args__ = dict()
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Sms/getTaskConsistencyResults:getTaskConsistencyResults', __args__, opts=opts, typ=GetTaskConsistencyResultsResult).value

    return AwaitableGetTaskConsistencyResultsResult(
        id=pulumi.get(__ret__, 'id'),
        result_lists=pulumi.get(__ret__, 'result_lists'),
        task_id=pulumi.get(__ret__, 'task_id'))
def get_task_consistency_results_output(task_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTaskConsistencyResultsResult]:
    """
    Use this data source to get the list of SMS task consistency results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    task_id = config.require_object("taskId")
    test = huaweicloud.Sms.get_task_consistency_results(task_id=task_id)
    ```


    :param _builtins.str task_id: Specifies the task ID.
    """
    __args__ = dict()
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Sms/getTaskConsistencyResults:getTaskConsistencyResults', __args__, opts=opts, typ=GetTaskConsistencyResultsResult)
    return __ret__.apply(lambda __response__: GetTaskConsistencyResultsResult(
        id=pulumi.get(__response__, 'id'),
        result_lists=pulumi.get(__response__, 'result_lists'),
        task_id=pulumi.get(__response__, 'task_id')))
