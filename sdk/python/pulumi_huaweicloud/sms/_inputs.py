# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'TaskConfigurationArgs',
    'TaskConfigurationArgsDict',
    'TaskConsistencyResultReportConsistencyResultArgs',
    'TaskConsistencyResultReportConsistencyResultArgsDict',
    'TaskSpeedLimitArgs',
    'TaskSpeedLimitArgsDict',
    'TaskTargetServerDiskArgs',
    'TaskTargetServerDiskArgsDict',
    'TaskTargetServerDiskPhysicalVolumeArgs',
    'TaskTargetServerDiskPhysicalVolumeArgsDict',
]

MYPY = False

if not MYPY:
    class TaskConfigurationArgsDict(TypedDict):
        config_key: pulumi.Input[_builtins.str]
        """
        Specifies the advanced migration option.
        The value can be **EXCLUDE_MIGRATE_PATH**, **SYNC_EXCLUDE_PATH**, **ONLY_SYNC_PATH** and so on.
        """
        config_value: pulumi.Input[_builtins.str]
        """
        Specifies the value specified for the advanced migration option.
        """
        config_status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the reserved field that describes the configuration status.

        <a name="target_server_disks_object"></a>
        The `target_server_disks` block supports:
        """
elif False:
    TaskConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskConfigurationArgs:
    def __init__(__self__, *,
                 config_key: pulumi.Input[_builtins.str],
                 config_value: pulumi.Input[_builtins.str],
                 config_status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] config_key: Specifies the advanced migration option.
               The value can be **EXCLUDE_MIGRATE_PATH**, **SYNC_EXCLUDE_PATH**, **ONLY_SYNC_PATH** and so on.
        :param pulumi.Input[_builtins.str] config_value: Specifies the value specified for the advanced migration option.
        :param pulumi.Input[_builtins.str] config_status: Specifies the reserved field that describes the configuration status.
               
               <a name="target_server_disks_object"></a>
               The `target_server_disks` block supports:
        """
        pulumi.set(__self__, "config_key", config_key)
        pulumi.set(__self__, "config_value", config_value)
        if config_status is not None:
            pulumi.set(__self__, "config_status", config_status)

    @_builtins.property
    @pulumi.getter(name="configKey")
    def config_key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the advanced migration option.
        The value can be **EXCLUDE_MIGRATE_PATH**, **SYNC_EXCLUDE_PATH**, **ONLY_SYNC_PATH** and so on.
        """
        return pulumi.get(self, "config_key")

    @config_key.setter
    def config_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "config_key", value)

    @_builtins.property
    @pulumi.getter(name="configValue")
    def config_value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value specified for the advanced migration option.
        """
        return pulumi.get(self, "config_value")

    @config_value.setter
    def config_value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "config_value", value)

    @_builtins.property
    @pulumi.getter(name="configStatus")
    def config_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the reserved field that describes the configuration status.

        <a name="target_server_disks_object"></a>
        The `target_server_disks` block supports:
        """
        return pulumi.get(self, "config_status")

    @config_status.setter
    def config_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_status", value)


if not MYPY:
    class TaskConsistencyResultReportConsistencyResultArgsDict(TypedDict):
        dir_check: pulumi.Input[_builtins.str]
        """
        Specifies the directory verified.
        """
        num_different_files: pulumi.Input[_builtins.int]
        """
        Specifies the number of files inconsistent.
        """
        num_target_miss_files: pulumi.Input[_builtins.int]
        """
        Specifies the number of files missing at the target.
        """
        num_target_more_files: pulumi.Input[_builtins.int]
        """
        Specifies the number of files redundant at the target.
        """
        num_total_files: pulumi.Input[_builtins.int]
        """
        Specifies the total number of files verified.
        """
elif False:
    TaskConsistencyResultReportConsistencyResultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskConsistencyResultReportConsistencyResultArgs:
    def __init__(__self__, *,
                 dir_check: pulumi.Input[_builtins.str],
                 num_different_files: pulumi.Input[_builtins.int],
                 num_target_miss_files: pulumi.Input[_builtins.int],
                 num_target_more_files: pulumi.Input[_builtins.int],
                 num_total_files: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.str] dir_check: Specifies the directory verified.
        :param pulumi.Input[_builtins.int] num_different_files: Specifies the number of files inconsistent.
        :param pulumi.Input[_builtins.int] num_target_miss_files: Specifies the number of files missing at the target.
        :param pulumi.Input[_builtins.int] num_target_more_files: Specifies the number of files redundant at the target.
        :param pulumi.Input[_builtins.int] num_total_files: Specifies the total number of files verified.
        """
        pulumi.set(__self__, "dir_check", dir_check)
        pulumi.set(__self__, "num_different_files", num_different_files)
        pulumi.set(__self__, "num_target_miss_files", num_target_miss_files)
        pulumi.set(__self__, "num_target_more_files", num_target_more_files)
        pulumi.set(__self__, "num_total_files", num_total_files)

    @_builtins.property
    @pulumi.getter(name="dirCheck")
    def dir_check(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the directory verified.
        """
        return pulumi.get(self, "dir_check")

    @dir_check.setter
    def dir_check(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dir_check", value)

    @_builtins.property
    @pulumi.getter(name="numDifferentFiles")
    def num_different_files(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of files inconsistent.
        """
        return pulumi.get(self, "num_different_files")

    @num_different_files.setter
    def num_different_files(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "num_different_files", value)

    @_builtins.property
    @pulumi.getter(name="numTargetMissFiles")
    def num_target_miss_files(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of files missing at the target.
        """
        return pulumi.get(self, "num_target_miss_files")

    @num_target_miss_files.setter
    def num_target_miss_files(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "num_target_miss_files", value)

    @_builtins.property
    @pulumi.getter(name="numTargetMoreFiles")
    def num_target_more_files(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of files redundant at the target.
        """
        return pulumi.get(self, "num_target_more_files")

    @num_target_more_files.setter
    def num_target_more_files(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "num_target_more_files", value)

    @_builtins.property
    @pulumi.getter(name="numTotalFiles")
    def num_total_files(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the total number of files verified.
        """
        return pulumi.get(self, "num_total_files")

    @num_total_files.setter
    def num_total_files(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "num_total_files", value)


if not MYPY:
    class TaskSpeedLimitArgsDict(TypedDict):
        end: pulumi.Input[_builtins.str]
        """
        Specifies the end time of a period. The format is **XX:XX**.
        """
        speed: pulumi.Input[_builtins.int]
        """
        Specifies the migration rate limit for the specified period, the unit is Mbit/s.
        """
        start: pulumi.Input[_builtins.str]
        """
        Specifies the start time of a period. The format is **XX:XX**.
        """
        over_speed_threshold: NotRequired[pulumi.Input[_builtins.float]]
        """
        Specifies the overspeed threshold for stopping migration, the unit is percentage.

        <a name="configurations_struct"></a>
        The `configurations` block supports:
        """
elif False:
    TaskSpeedLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskSpeedLimitArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[_builtins.str],
                 speed: pulumi.Input[_builtins.int],
                 start: pulumi.Input[_builtins.str],
                 over_speed_threshold: Optional[pulumi.Input[_builtins.float]] = None):
        """
        :param pulumi.Input[_builtins.str] end: Specifies the end time of a period. The format is **XX:XX**.
        :param pulumi.Input[_builtins.int] speed: Specifies the migration rate limit for the specified period, the unit is Mbit/s.
        :param pulumi.Input[_builtins.str] start: Specifies the start time of a period. The format is **XX:XX**.
        :param pulumi.Input[_builtins.float] over_speed_threshold: Specifies the overspeed threshold for stopping migration, the unit is percentage.
               
               <a name="configurations_struct"></a>
               The `configurations` block supports:
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "speed", speed)
        pulumi.set(__self__, "start", start)
        if over_speed_threshold is not None:
            pulumi.set(__self__, "over_speed_threshold", over_speed_threshold)

    @_builtins.property
    @pulumi.getter
    def end(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the end time of a period. The format is **XX:XX**.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "end", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the migration rate limit for the specified period, the unit is Mbit/s.
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter
    def start(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the start time of a period. The format is **XX:XX**.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start", value)

    @_builtins.property
    @pulumi.getter(name="overSpeedThreshold")
    def over_speed_threshold(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the overspeed threshold for stopping migration, the unit is percentage.

        <a name="configurations_struct"></a>
        The `configurations` block supports:
        """
        return pulumi.get(self, "over_speed_threshold")

    @over_speed_threshold.setter
    def over_speed_threshold(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "over_speed_threshold", value)


if not MYPY:
    class TaskTargetServerDiskArgsDict(TypedDict):
        device_type: pulumi.Input[_builtins.str]
        """
        Specifies the partition type. The value can be **NORMAL** and **OS**.
        Changing this parameter will create a new resource.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the volume name. In Windows, it indicates the drive letter,
        and in Linux, it indicates the device ID, e.g. "/dev/sda1".
        Changing this parameter will create a new resource.
        """
        size: pulumi.Input[_builtins.int]
        """
        Specifies the volume size in MB. Changing this parameter will create a new resource.
        """
        disk_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the disk index, e.g. "0".
        Changing this parameter will create a new resource.
        """
        physical_volumes: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskPhysicalVolumeArgsDict']]]]
        """
        Specifies an array of physical volume information.
        The object is documented below. Changing this parameter will create a new resource.

        <a name="physical_volumes_object"></a>
        The `physical_volumes` block supports:
        """
        used_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the used space in MB.
        Changing this parameter will create a new resource.
        """
elif False:
    TaskTargetServerDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskTargetServerDiskArgs:
    def __init__(__self__, *,
                 device_type: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 size: pulumi.Input[_builtins.int],
                 disk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskPhysicalVolumeArgs']]]] = None,
                 used_size: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] device_type: Specifies the partition type. The value can be **NORMAL** and **OS**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the volume name. In Windows, it indicates the drive letter,
               and in Linux, it indicates the device ID, e.g. "/dev/sda1".
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] size: Specifies the volume size in MB. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] disk_id: Specifies the disk index, e.g. "0".
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskPhysicalVolumeArgs']]] physical_volumes: Specifies an array of physical volume information.
               The object is documented below. Changing this parameter will create a new resource.
               
               <a name="physical_volumes_object"></a>
               The `physical_volumes` block supports:
        :param pulumi.Input[_builtins.int] used_size: Specifies the used space in MB.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if physical_volumes is not None:
            pulumi.set(__self__, "physical_volumes", physical_volumes)
        if used_size is not None:
            pulumi.set(__self__, "used_size", used_size)

    @_builtins.property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the partition type. The value can be **NORMAL** and **OS**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "device_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the volume name. In Windows, it indicates the drive letter,
        and in Linux, it indicates the device ID, e.g. "/dev/sda1".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the volume size in MB. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the disk index, e.g. "0".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disk_id", value)

    @_builtins.property
    @pulumi.getter(name="physicalVolumes")
    def physical_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskPhysicalVolumeArgs']]]]:
        """
        Specifies an array of physical volume information.
        The object is documented below. Changing this parameter will create a new resource.

        <a name="physical_volumes_object"></a>
        The `physical_volumes` block supports:
        """
        return pulumi.get(self, "physical_volumes")

    @physical_volumes.setter
    def physical_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskPhysicalVolumeArgs']]]]):
        pulumi.set(self, "physical_volumes", value)

    @_builtins.property
    @pulumi.getter(name="usedSize")
    def used_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the used space in MB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "used_size")

    @used_size.setter
    def used_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "used_size", value)


if not MYPY:
    class TaskTargetServerDiskPhysicalVolumeArgsDict(TypedDict):
        device_type: pulumi.Input[_builtins.str]
        """
        Specifies the partition type. The value can be **NORMAL** and **OS**.
        Changing this parameter will create a new resource.
        """
        file_system: pulumi.Input[_builtins.str]
        """
        Specifies the file system type, e.g. "ext4".
        Changing this parameter will create a new resource.
        """
        index: pulumi.Input[_builtins.int]
        """
        Specifies the serial number of the volume.
        Changing this parameter will create a new resource.
        """
        mount_point: pulumi.Input[_builtins.str]
        """
        Specifies the mount point, e.g. "/".
        Changing this parameter will create a new resource.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the volume name. In Windows, it indicates the drive letter,
        and in Linux, it indicates the device ID, e.g. "/dev/sda1".
        Changing this parameter will create a new resource.
        """
        size: pulumi.Input[_builtins.int]
        """
        Specifies the volume size in MB. Changing this parameter will create a new resource.
        """
        used_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the used space in MB.
        Changing this parameter will create a new resource.
        """
        uuid: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the GUID of the volume.
        Changing this parameter will create a new resource.
        """
elif False:
    TaskTargetServerDiskPhysicalVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskTargetServerDiskPhysicalVolumeArgs:
    def __init__(__self__, *,
                 device_type: pulumi.Input[_builtins.str],
                 file_system: pulumi.Input[_builtins.str],
                 index: pulumi.Input[_builtins.int],
                 mount_point: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 size: pulumi.Input[_builtins.int],
                 used_size: Optional[pulumi.Input[_builtins.int]] = None,
                 uuid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] device_type: Specifies the partition type. The value can be **NORMAL** and **OS**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] file_system: Specifies the file system type, e.g. "ext4".
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] index: Specifies the serial number of the volume.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] mount_point: Specifies the mount point, e.g. "/".
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the volume name. In Windows, it indicates the drive letter,
               and in Linux, it indicates the device ID, e.g. "/dev/sda1".
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] size: Specifies the volume size in MB. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] used_size: Specifies the used space in MB.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] uuid: Specifies the GUID of the volume.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "file_system", file_system)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "mount_point", mount_point)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if used_size is not None:
            pulumi.set(__self__, "used_size", used_size)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the partition type. The value can be **NORMAL** and **OS**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "device_type", value)

    @_builtins.property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the file system type, e.g. "ext4".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "file_system", value)

    @_builtins.property
    @pulumi.getter
    def index(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the serial number of the volume.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "index", value)

    @_builtins.property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the mount point, e.g. "/".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "mount_point")

    @mount_point.setter
    def mount_point(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mount_point", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the volume name. In Windows, it indicates the drive letter,
        and in Linux, it indicates the device ID, e.g. "/dev/sda1".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the volume size in MB. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="usedSize")
    def used_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the used space in MB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "used_size")

    @used_size.setter
    def used_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "used_size", value)

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the GUID of the volume.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uuid", value)


