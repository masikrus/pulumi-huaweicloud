# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'TaskConfiguration',
    'TaskConsistencyResultReportConsistencyResult',
    'TaskSpeedLimit',
    'TaskTargetServerDisk',
    'TaskTargetServerDiskPhysicalVolume',
    'GetMigrationProjectsMigprojectResult',
    'GetServerTemplatesTemplateResult',
    'GetServerTemplatesTemplateDiskResult',
    'GetServerTemplatesTemplateNicResult',
    'GetServerTemplatesTemplatePublicipResult',
    'GetServerTemplatesTemplateSecurityGroupResult',
    'GetServerTemplatesTemplateVpcResult',
    'GetSourceServerCommandCommandParamResult',
    'GetSourceServerErrorsMigrationErrorResult',
    'GetSourceServersServerResult',
    'GetSourceServersServerDiskResult',
    'GetTaskConsistencyResultsResultListResult',
    'GetTaskConsistencyResultsResultListConsistencyResultResult',
    'GetTasksTaskResult',
    'GetTasksTaskCloneServerResult',
    'GetTasksTaskNetworkCheckInfoResult',
    'GetTasksTaskSourceServerResult',
    'GetTasksTaskSpecialConfigResult',
    'GetTasksTaskSubTaskResult',
    'GetTasksTaskTargetServerResult',
]

@pulumi.output_type
class TaskConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configKey":
            suggest = "config_key"
        elif key == "configValue":
            suggest = "config_value"
        elif key == "configStatus":
            suggest = "config_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_key: _builtins.str,
                 config_value: _builtins.str,
                 config_status: Optional[_builtins.str] = None):
        """
        :param _builtins.str config_key: Specifies the advanced migration option.
               The value can be **EXCLUDE_MIGRATE_PATH**, **SYNC_EXCLUDE_PATH**, **ONLY_SYNC_PATH** and so on.
        :param _builtins.str config_value: Specifies the value specified for the advanced migration option.
        :param _builtins.str config_status: Specifies the reserved field that describes the configuration status.
               
               <a name="target_server_disks_object"></a>
               The `target_server_disks` block supports:
        """
        pulumi.set(__self__, "config_key", config_key)
        pulumi.set(__self__, "config_value", config_value)
        if config_status is not None:
            pulumi.set(__self__, "config_status", config_status)

    @_builtins.property
    @pulumi.getter(name="configKey")
    def config_key(self) -> _builtins.str:
        """
        Specifies the advanced migration option.
        The value can be **EXCLUDE_MIGRATE_PATH**, **SYNC_EXCLUDE_PATH**, **ONLY_SYNC_PATH** and so on.
        """
        return pulumi.get(self, "config_key")

    @_builtins.property
    @pulumi.getter(name="configValue")
    def config_value(self) -> _builtins.str:
        """
        Specifies the value specified for the advanced migration option.
        """
        return pulumi.get(self, "config_value")

    @_builtins.property
    @pulumi.getter(name="configStatus")
    def config_status(self) -> Optional[_builtins.str]:
        """
        Specifies the reserved field that describes the configuration status.

        <a name="target_server_disks_object"></a>
        The `target_server_disks` block supports:
        """
        return pulumi.get(self, "config_status")


@pulumi.output_type
class TaskConsistencyResultReportConsistencyResult(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dirCheck":
            suggest = "dir_check"
        elif key == "numDifferentFiles":
            suggest = "num_different_files"
        elif key == "numTargetMissFiles":
            suggest = "num_target_miss_files"
        elif key == "numTargetMoreFiles":
            suggest = "num_target_more_files"
        elif key == "numTotalFiles":
            suggest = "num_total_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskConsistencyResultReportConsistencyResult. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskConsistencyResultReportConsistencyResult.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskConsistencyResultReportConsistencyResult.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dir_check: _builtins.str,
                 num_different_files: _builtins.int,
                 num_target_miss_files: _builtins.int,
                 num_target_more_files: _builtins.int,
                 num_total_files: _builtins.int):
        """
        :param _builtins.str dir_check: Specifies the directory verified.
        :param _builtins.int num_different_files: Specifies the number of files inconsistent.
        :param _builtins.int num_target_miss_files: Specifies the number of files missing at the target.
        :param _builtins.int num_target_more_files: Specifies the number of files redundant at the target.
        :param _builtins.int num_total_files: Specifies the total number of files verified.
        """
        pulumi.set(__self__, "dir_check", dir_check)
        pulumi.set(__self__, "num_different_files", num_different_files)
        pulumi.set(__self__, "num_target_miss_files", num_target_miss_files)
        pulumi.set(__self__, "num_target_more_files", num_target_more_files)
        pulumi.set(__self__, "num_total_files", num_total_files)

    @_builtins.property
    @pulumi.getter(name="dirCheck")
    def dir_check(self) -> _builtins.str:
        """
        Specifies the directory verified.
        """
        return pulumi.get(self, "dir_check")

    @_builtins.property
    @pulumi.getter(name="numDifferentFiles")
    def num_different_files(self) -> _builtins.int:
        """
        Specifies the number of files inconsistent.
        """
        return pulumi.get(self, "num_different_files")

    @_builtins.property
    @pulumi.getter(name="numTargetMissFiles")
    def num_target_miss_files(self) -> _builtins.int:
        """
        Specifies the number of files missing at the target.
        """
        return pulumi.get(self, "num_target_miss_files")

    @_builtins.property
    @pulumi.getter(name="numTargetMoreFiles")
    def num_target_more_files(self) -> _builtins.int:
        """
        Specifies the number of files redundant at the target.
        """
        return pulumi.get(self, "num_target_more_files")

    @_builtins.property
    @pulumi.getter(name="numTotalFiles")
    def num_total_files(self) -> _builtins.int:
        """
        Specifies the total number of files verified.
        """
        return pulumi.get(self, "num_total_files")


@pulumi.output_type
class TaskSpeedLimit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overSpeedThreshold":
            suggest = "over_speed_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskSpeedLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskSpeedLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskSpeedLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end: _builtins.str,
                 speed: _builtins.int,
                 start: _builtins.str,
                 over_speed_threshold: Optional[_builtins.float] = None):
        """
        :param _builtins.str end: Specifies the end time of a period. The format is **XX:XX**.
        :param _builtins.int speed: Specifies the migration rate limit for the specified period, the unit is Mbit/s.
        :param _builtins.str start: Specifies the start time of a period. The format is **XX:XX**.
        :param _builtins.float over_speed_threshold: Specifies the overspeed threshold for stopping migration, the unit is percentage.
               
               <a name="configurations_struct"></a>
               The `configurations` block supports:
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "speed", speed)
        pulumi.set(__self__, "start", start)
        if over_speed_threshold is not None:
            pulumi.set(__self__, "over_speed_threshold", over_speed_threshold)

    @_builtins.property
    @pulumi.getter
    def end(self) -> _builtins.str:
        """
        Specifies the end time of a period. The format is **XX:XX**.
        """
        return pulumi.get(self, "end")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> _builtins.int:
        """
        Specifies the migration rate limit for the specified period, the unit is Mbit/s.
        """
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter
    def start(self) -> _builtins.str:
        """
        Specifies the start time of a period. The format is **XX:XX**.
        """
        return pulumi.get(self, "start")

    @_builtins.property
    @pulumi.getter(name="overSpeedThreshold")
    def over_speed_threshold(self) -> Optional[_builtins.float]:
        """
        Specifies the overspeed threshold for stopping migration, the unit is percentage.

        <a name="configurations_struct"></a>
        The `configurations` block supports:
        """
        return pulumi.get(self, "over_speed_threshold")


@pulumi.output_type
class TaskTargetServerDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceType":
            suggest = "device_type"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "physicalVolumes":
            suggest = "physical_volumes"
        elif key == "usedSize":
            suggest = "used_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskTargetServerDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskTargetServerDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskTargetServerDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_type: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int,
                 disk_id: Optional[_builtins.str] = None,
                 physical_volumes: Optional[Sequence['outputs.TaskTargetServerDiskPhysicalVolume']] = None,
                 used_size: Optional[_builtins.int] = None):
        """
        :param _builtins.str device_type: Specifies the partition type. The value can be **NORMAL** and **OS**.
               Changing this parameter will create a new resource.
        :param _builtins.str name: Specifies the volume name. In Windows, it indicates the drive letter,
               and in Linux, it indicates the device ID, e.g. "/dev/sda1".
               Changing this parameter will create a new resource.
        :param _builtins.int size: Specifies the volume size in MB. Changing this parameter will create a new resource.
        :param _builtins.str disk_id: Specifies the disk index, e.g. "0".
               Changing this parameter will create a new resource.
        :param Sequence['TaskTargetServerDiskPhysicalVolumeArgs'] physical_volumes: Specifies an array of physical volume information.
               The object is documented below. Changing this parameter will create a new resource.
               
               <a name="physical_volumes_object"></a>
               The `physical_volumes` block supports:
        :param _builtins.int used_size: Specifies the used space in MB.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if physical_volumes is not None:
            pulumi.set(__self__, "physical_volumes", physical_volumes)
        if used_size is not None:
            pulumi.set(__self__, "used_size", used_size)

    @_builtins.property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> _builtins.str:
        """
        Specifies the partition type. The value can be **NORMAL** and **OS**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the volume name. In Windows, it indicates the drive letter,
        and in Linux, it indicates the device ID, e.g. "/dev/sda1".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the volume size in MB. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[_builtins.str]:
        """
        Specifies the disk index, e.g. "0".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "disk_id")

    @_builtins.property
    @pulumi.getter(name="physicalVolumes")
    def physical_volumes(self) -> Optional[Sequence['outputs.TaskTargetServerDiskPhysicalVolume']]:
        """
        Specifies an array of physical volume information.
        The object is documented below. Changing this parameter will create a new resource.

        <a name="physical_volumes_object"></a>
        The `physical_volumes` block supports:
        """
        return pulumi.get(self, "physical_volumes")

    @_builtins.property
    @pulumi.getter(name="usedSize")
    def used_size(self) -> Optional[_builtins.int]:
        """
        Specifies the used space in MB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "used_size")


@pulumi.output_type
class TaskTargetServerDiskPhysicalVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceType":
            suggest = "device_type"
        elif key == "fileSystem":
            suggest = "file_system"
        elif key == "mountPoint":
            suggest = "mount_point"
        elif key == "usedSize":
            suggest = "used_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskTargetServerDiskPhysicalVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskTargetServerDiskPhysicalVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskTargetServerDiskPhysicalVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_type: _builtins.str,
                 file_system: _builtins.str,
                 index: _builtins.int,
                 mount_point: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int,
                 used_size: Optional[_builtins.int] = None,
                 uuid: Optional[_builtins.str] = None):
        """
        :param _builtins.str device_type: Specifies the partition type. The value can be **NORMAL** and **OS**.
               Changing this parameter will create a new resource.
        :param _builtins.str file_system: Specifies the file system type, e.g. "ext4".
               Changing this parameter will create a new resource.
        :param _builtins.int index: Specifies the serial number of the volume.
               Changing this parameter will create a new resource.
        :param _builtins.str mount_point: Specifies the mount point, e.g. "/".
               Changing this parameter will create a new resource.
        :param _builtins.str name: Specifies the volume name. In Windows, it indicates the drive letter,
               and in Linux, it indicates the device ID, e.g. "/dev/sda1".
               Changing this parameter will create a new resource.
        :param _builtins.int size: Specifies the volume size in MB. Changing this parameter will create a new resource.
        :param _builtins.int used_size: Specifies the used space in MB.
               Changing this parameter will create a new resource.
        :param _builtins.str uuid: Specifies the GUID of the volume.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "file_system", file_system)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "mount_point", mount_point)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if used_size is not None:
            pulumi.set(__self__, "used_size", used_size)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> _builtins.str:
        """
        Specifies the partition type. The value can be **NORMAL** and **OS**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_type")

    @_builtins.property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> _builtins.str:
        """
        Specifies the file system type, e.g. "ext4".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "file_system")

    @_builtins.property
    @pulumi.getter
    def index(self) -> _builtins.int:
        """
        Specifies the serial number of the volume.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "index")

    @_builtins.property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> _builtins.str:
        """
        Specifies the mount point, e.g. "/".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "mount_point")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the volume name. In Windows, it indicates the drive letter,
        and in Linux, it indicates the device ID, e.g. "/dev/sda1".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the volume size in MB. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="usedSize")
    def used_size(self) -> Optional[_builtins.int]:
        """
        Specifies the used space in MB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "used_size")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        """
        Specifies the GUID of the volume.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetMigrationProjectsMigprojectResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 enterprise_project: _builtins.str,
                 exist_server: _builtins.bool,
                 id: _builtins.str,
                 is_default: _builtins.bool,
                 name: _builtins.str,
                 region: _builtins.str,
                 speed_limit: _builtins.int,
                 start_network_check: _builtins.bool,
                 start_target_server: _builtins.bool,
                 syncing: _builtins.bool,
                 type: _builtins.str,
                 use_public_ip: _builtins.bool):
        """
        :param _builtins.str description: Indicates the migration project description.
        :param _builtins.str enterprise_project: Indicates the name of the enterprise project to which the migration project belongs.
        :param _builtins.bool exist_server: Indicates whether there are servers in the migration project.
        :param _builtins.str id: Indicates the migration project ID.
        :param _builtins.bool is_default: Indicates whether the migration project is the default project.
        :param _builtins.str name: Indicates the migration project name.
        :param _builtins.str region: Indicates the region name.
        :param _builtins.int speed_limit: Indicates the migration rate limit configured in the project.
        :param _builtins.bool start_network_check: Indicates whether to enable network performance measurement.
        :param _builtins.bool start_target_server: Indicates whether to start the target server after the migration.
        :param _builtins.bool syncing: Indicates whether to perform a continuous synchronization after the full replication is complete.
        :param _builtins.str type: Indicates the type of the migration project.
        :param _builtins.bool use_public_ip: Indicates whether to use a public IP address for migration.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project", enterprise_project)
        pulumi.set(__self__, "exist_server", exist_server)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "speed_limit", speed_limit)
        pulumi.set(__self__, "start_network_check", start_network_check)
        pulumi.set(__self__, "start_target_server", start_target_server)
        pulumi.set(__self__, "syncing", syncing)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "use_public_ip", use_public_ip)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the migration project description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProject")
    def enterprise_project(self) -> _builtins.str:
        """
        Indicates the name of the enterprise project to which the migration project belongs.
        """
        return pulumi.get(self, "enterprise_project")

    @_builtins.property
    @pulumi.getter(name="existServer")
    def exist_server(self) -> _builtins.bool:
        """
        Indicates whether there are servers in the migration project.
        """
        return pulumi.get(self, "exist_server")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the migration project ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        """
        Indicates whether the migration project is the default project.
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the migration project name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Indicates the region name.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="speedLimit")
    def speed_limit(self) -> _builtins.int:
        """
        Indicates the migration rate limit configured in the project.
        """
        return pulumi.get(self, "speed_limit")

    @_builtins.property
    @pulumi.getter(name="startNetworkCheck")
    def start_network_check(self) -> _builtins.bool:
        """
        Indicates whether to enable network performance measurement.
        """
        return pulumi.get(self, "start_network_check")

    @_builtins.property
    @pulumi.getter(name="startTargetServer")
    def start_target_server(self) -> _builtins.bool:
        """
        Indicates whether to start the target server after the migration.
        """
        return pulumi.get(self, "start_target_server")

    @_builtins.property
    @pulumi.getter
    def syncing(self) -> _builtins.bool:
        """
        Indicates whether to perform a continuous synchronization after the full replication is complete.
        """
        return pulumi.get(self, "syncing")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type of the migration project.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> _builtins.bool:
        """
        Indicates whether to use a public IP address for migration.
        """
        return pulumi.get(self, "use_public_ip")


@pulumi.output_type
class GetServerTemplatesTemplateResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 data_volume_type: _builtins.str,
                 disks: Sequence['outputs.GetServerTemplatesTemplateDiskResult'],
                 flavor: _builtins.str,
                 id: _builtins.str,
                 image_id: _builtins.str,
                 is_template: _builtins.str,
                 name: _builtins.str,
                 nics: Sequence['outputs.GetServerTemplatesTemplateNicResult'],
                 project_id: _builtins.str,
                 publicips: Sequence['outputs.GetServerTemplatesTemplatePublicipResult'],
                 region: _builtins.str,
                 security_groups: Sequence['outputs.GetServerTemplatesTemplateSecurityGroupResult'],
                 target_password: _builtins.str,
                 target_server_name: _builtins.str,
                 volume_type: _builtins.str,
                 vpcs: Sequence['outputs.GetServerTemplatesTemplateVpcResult']):
        """
        :param _builtins.str availability_zone: Specifies the availability zone.
        :param _builtins.str data_volume_type: Indicates the data disk type.
        :param Sequence['GetServerTemplatesTemplateDiskArgs'] disks: Indicates the disk information.
        :param _builtins.str flavor: Indicates the server flavor.
        :param _builtins.str id: Indicates the disk ID.
        :param _builtins.str image_id: Indicates the ID of the selected image.
        :param _builtins.str is_template: Indicates whether the template is general.
        :param _builtins.str name: Specifies the template name.
        :param Sequence['GetServerTemplatesTemplateNicArgs'] nics: Indicates the NIC information.
        :param _builtins.str project_id: Indicates the project ID.
        :param Sequence['GetServerTemplatesTemplatePublicipArgs'] publicips: Indicates the public IP address information.
        :param _builtins.str region: Specifies the region ID.
        :param Sequence['GetServerTemplatesTemplateSecurityGroupArgs'] security_groups: Indicates the security group information.
        :param _builtins.str target_password: Indicates the server login password.
        :param _builtins.str target_server_name: Indicates the name of the target server.
        :param _builtins.str volume_type: Indicates the disk type.
        :param Sequence['GetServerTemplatesTemplateVpcArgs'] vpcs: Indicates the VPC information.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "data_volume_type", data_volume_type)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "is_template", is_template)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nics", nics)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "publicips", publicips)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "target_password", target_password)
        pulumi.set(__self__, "target_server_name", target_server_name)
        pulumi.set(__self__, "volume_type", volume_type)
        pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Specifies the availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> _builtins.str:
        """
        Indicates the data disk type.
        """
        return pulumi.get(self, "data_volume_type")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetServerTemplatesTemplateDiskResult']:
        """
        Indicates the disk information.
        """
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        Indicates the server flavor.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the disk ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        Indicates the ID of the selected image.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="isTemplate")
    def is_template(self) -> _builtins.str:
        """
        Indicates whether the template is general.
        """
        return pulumi.get(self, "is_template")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nics(self) -> Sequence['outputs.GetServerTemplatesTemplateNicResult']:
        """
        Indicates the NIC information.
        """
        return pulumi.get(self, "nics")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def publicips(self) -> Sequence['outputs.GetServerTemplatesTemplatePublicipResult']:
        """
        Indicates the public IP address information.
        """
        return pulumi.get(self, "publicips")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region ID.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetServerTemplatesTemplateSecurityGroupResult']:
        """
        Indicates the security group information.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="targetPassword")
    def target_password(self) -> _builtins.str:
        """
        Indicates the server login password.
        """
        return pulumi.get(self, "target_password")

    @_builtins.property
    @pulumi.getter(name="targetServerName")
    def target_server_name(self) -> _builtins.str:
        """
        Indicates the name of the target server.
        """
        return pulumi.get(self, "target_server_name")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        Indicates the disk type.
        """
        return pulumi.get(self, "volume_type")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetServerTemplatesTemplateVpcResult']:
        """
        Indicates the VPC information.
        """
        return pulumi.get(self, "vpcs")


@pulumi.output_type
class GetServerTemplatesTemplateDiskResult(dict):
    def __init__(__self__, *,
                 device_use: _builtins.str,
                 disktype: _builtins.str,
                 id: _builtins.int,
                 index: _builtins.int,
                 name: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str device_use: Indicates the used disk space.
        :param _builtins.str disktype: Indicates the disk type.
        :param _builtins.int id: Indicates the disk ID.
        :param _builtins.int index: Indicates the disk serial number.
        :param _builtins.str name: Specifies the template name.
        :param _builtins.int size: Indicates the disk size, the unit is GB.
        """
        pulumi.set(__self__, "device_use", device_use)
        pulumi.set(__self__, "disktype", disktype)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="deviceUse")
    def device_use(self) -> _builtins.str:
        """
        Indicates the used disk space.
        """
        return pulumi.get(self, "device_use")

    @_builtins.property
    @pulumi.getter
    def disktype(self) -> _builtins.str:
        """
        Indicates the disk type.
        """
        return pulumi.get(self, "disktype")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Indicates the disk ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def index(self) -> _builtins.int:
        """
        Indicates the disk serial number.
        """
        return pulumi.get(self, "index")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the disk size, the unit is GB.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetServerTemplatesTemplateNicResult(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 id: _builtins.str,
                 ip: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str cidr: Indicates the subnet gateway/mask.
        :param _builtins.str id: Indicates the disk ID.
        :param _builtins.str ip: Indicates the server IP address.
        :param _builtins.str name: Specifies the template name.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Indicates the subnet gateway/mask.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the disk ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Indicates the server IP address.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the template name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServerTemplatesTemplatePublicipResult(dict):
    def __init__(__self__, *,
                 bandwidth_share_type: _builtins.str,
                 bandwidth_size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str bandwidth_share_type: Indicates the bandwidth type.
        :param _builtins.int bandwidth_size: Indicates the bandwidth size, the unit is Mbit/s.
        :param _builtins.str type: Indicates the EIP type.
        """
        pulumi.set(__self__, "bandwidth_share_type", bandwidth_share_type)
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthShareType")
    def bandwidth_share_type(self) -> _builtins.str:
        """
        Indicates the bandwidth type.
        """
        return pulumi.get(self, "bandwidth_share_type")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> _builtins.int:
        """
        Indicates the bandwidth size, the unit is Mbit/s.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the EIP type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServerTemplatesTemplateSecurityGroupResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: Indicates the disk ID.
        :param _builtins.str name: Specifies the template name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the disk ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the template name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServerTemplatesTemplateVpcResult(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str cidr: Indicates the subnet gateway/mask.
        :param _builtins.str id: Indicates the disk ID.
        :param _builtins.str name: Specifies the template name.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        Indicates the subnet gateway/mask.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the disk ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the template name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSourceServerCommandCommandParamResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 task_id: _builtins.str):
        """
        :param _builtins.str bucket: Indicates the bucket name.
        :param _builtins.str task_id: Indicates the task ID.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        Indicates the bucket name.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        """
        Indicates the task ID.
        """
        return pulumi.get(self, "task_id")


@pulumi.output_type
class GetSourceServerErrorsMigrationErrorResult(dict):
    def __init__(__self__, *,
                 error_json: _builtins.str,
                 host_name: _builtins.str,
                 name: _builtins.str,
                 source_id: _builtins.str,
                 source_ip: _builtins.str,
                 target_ip: _builtins.str):
        """
        :param _builtins.str error_json: Indicates the error message in JSON format.
        :param _builtins.str host_name: Indicates the host name of the source server.
        :param _builtins.str name: Indicates the source server name in SMS.
        :param _builtins.str source_id: Indicates the source server ID.
        :param _builtins.str source_ip: Indicates the IP address of the source server.
        :param _builtins.str target_ip: Indicates the IP address of the target server.
        """
        pulumi.set(__self__, "error_json", error_json)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "target_ip", target_ip)

    @_builtins.property
    @pulumi.getter(name="errorJson")
    def error_json(self) -> _builtins.str:
        """
        Indicates the error message in JSON format.
        """
        return pulumi.get(self, "error_json")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Indicates the host name of the source server.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the source server name in SMS.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> _builtins.str:
        """
        Indicates the source server ID.
        """
        return pulumi.get(self, "source_id")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Indicates the IP address of the source server.
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="targetIp")
    def target_ip(self) -> _builtins.str:
        """
        Indicates the IP address of the target server.
        """
        return pulumi.get(self, "target_ip")


@pulumi.output_type
class GetSourceServersServerResult(dict):
    def __init__(__self__, *,
                 agent_version: _builtins.str,
                 connected: _builtins.bool,
                 disks: Sequence['outputs.GetSourceServersServerDiskResult'],
                 id: _builtins.str,
                 ip: _builtins.str,
                 memory: _builtins.int,
                 name: _builtins.str,
                 os_type: _builtins.str,
                 os_version: _builtins.str,
                 registered_time: _builtins.str,
                 state: _builtins.str,
                 vcpus: _builtins.int):
        """
        :param _builtins.str agent_version: The version of Agent installed on the source server.
        :param _builtins.bool connected: Whether the source server is properly connected to SMS.
        :param Sequence['GetSourceServersServerDiskArgs'] disks: The disk information of the source server. Structure is documented below.
        :param _builtins.str id: Specifies the ID of the source server.
        :param _builtins.str ip: Specifies the IP address of the source server.
        :param _builtins.int memory: The memory size in MB.
        :param _builtins.str name: Specifies the name of the source server.
        :param _builtins.str os_type: The OS type of the source server. The value can be **WINDOWS** and **LINUX**.
        :param _builtins.str os_version: The OS version of the source server, for example, UBUNTU_20_4_64BIT.
        :param _builtins.str registered_time: The UTC time when the source server is registered.
        :param _builtins.str state: Specifies the status of the source server.
        :param _builtins.int vcpus: The vcpus count of the source server.
        """
        pulumi.set(__self__, "agent_version", agent_version)
        pulumi.set(__self__, "connected", connected)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "registered_time", registered_time)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> _builtins.str:
        """
        The version of Agent installed on the source server.
        """
        return pulumi.get(self, "agent_version")

    @_builtins.property
    @pulumi.getter
    def connected(self) -> _builtins.bool:
        """
        Whether the source server is properly connected to SMS.
        """
        return pulumi.get(self, "connected")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetSourceServersServerDiskResult']:
        """
        The disk information of the source server. Structure is documented below.
        """
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the source server.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Specifies the IP address of the source server.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        The memory size in MB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the source server.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The OS type of the source server. The value can be **WINDOWS** and **LINUX**.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> _builtins.str:
        """
        The OS version of the source server, for example, UBUNTU_20_4_64BIT.
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter(name="registeredTime")
    def registered_time(self) -> _builtins.str:
        """
        The UTC time when the source server is registered.
        """
        return pulumi.get(self, "registered_time")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the status of the source server.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        The vcpus count of the source server.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetSourceServersServerDiskResult(dict):
    def __init__(__self__, *,
                 device_type: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str device_type: The disk type. The value can be **BOOT**, **OS** and **NORMAL**.
        :param _builtins.str name: Specifies the name of the source server.
        :param _builtins.int size: The disk size in MB.
        """
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> _builtins.str:
        """
        The disk type. The value can be **BOOT**, **OS** and **NORMAL**.
        """
        return pulumi.get(self, "device_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the source server.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The disk size in MB.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetTaskConsistencyResultsResultListResult(dict):
    def __init__(__self__, *,
                 check_result: _builtins.str,
                 consistency_results: Sequence['outputs.GetTaskConsistencyResultsResultListConsistencyResultResult'],
                 finished_time: _builtins.int):
        """
        :param _builtins.str check_result: Indicates the verification execution result.
        :param Sequence['GetTaskConsistencyResultsResultListConsistencyResultArgs'] consistency_results: Indicates the verification results.
        :param _builtins.int finished_time: Indicates the verification completion time.
        """
        pulumi.set(__self__, "check_result", check_result)
        pulumi.set(__self__, "consistency_results", consistency_results)
        pulumi.set(__self__, "finished_time", finished_time)

    @_builtins.property
    @pulumi.getter(name="checkResult")
    def check_result(self) -> _builtins.str:
        """
        Indicates the verification execution result.
        """
        return pulumi.get(self, "check_result")

    @_builtins.property
    @pulumi.getter(name="consistencyResults")
    def consistency_results(self) -> Sequence['outputs.GetTaskConsistencyResultsResultListConsistencyResultResult']:
        """
        Indicates the verification results.
        """
        return pulumi.get(self, "consistency_results")

    @_builtins.property
    @pulumi.getter(name="finishedTime")
    def finished_time(self) -> _builtins.int:
        """
        Indicates the verification completion time.
        """
        return pulumi.get(self, "finished_time")


@pulumi.output_type
class GetTaskConsistencyResultsResultListConsistencyResultResult(dict):
    def __init__(__self__, *,
                 dir_check: _builtins.str,
                 num_different_files: _builtins.int,
                 num_target_miss_files: _builtins.int,
                 num_target_more_files: _builtins.int,
                 num_total_files: _builtins.int):
        """
        :param _builtins.str dir_check: Indicates the directory verified.
        :param _builtins.int num_different_files: Indicates the number of files inconsistent.
        :param _builtins.int num_target_miss_files: Indicates the number of files missing at the target.
        :param _builtins.int num_target_more_files: Indicates the number of files redundant at the target.
        :param _builtins.int num_total_files: Indicates the total number of files verified.
        """
        pulumi.set(__self__, "dir_check", dir_check)
        pulumi.set(__self__, "num_different_files", num_different_files)
        pulumi.set(__self__, "num_target_miss_files", num_target_miss_files)
        pulumi.set(__self__, "num_target_more_files", num_target_more_files)
        pulumi.set(__self__, "num_total_files", num_total_files)

    @_builtins.property
    @pulumi.getter(name="dirCheck")
    def dir_check(self) -> _builtins.str:
        """
        Indicates the directory verified.
        """
        return pulumi.get(self, "dir_check")

    @_builtins.property
    @pulumi.getter(name="numDifferentFiles")
    def num_different_files(self) -> _builtins.int:
        """
        Indicates the number of files inconsistent.
        """
        return pulumi.get(self, "num_different_files")

    @_builtins.property
    @pulumi.getter(name="numTargetMissFiles")
    def num_target_miss_files(self) -> _builtins.int:
        """
        Indicates the number of files missing at the target.
        """
        return pulumi.get(self, "num_target_miss_files")

    @_builtins.property
    @pulumi.getter(name="numTargetMoreFiles")
    def num_target_more_files(self) -> _builtins.int:
        """
        Indicates the number of files redundant at the target.
        """
        return pulumi.get(self, "num_target_more_files")

    @_builtins.property
    @pulumi.getter(name="numTotalFiles")
    def num_total_files(self) -> _builtins.int:
        """
        Indicates the total number of files verified.
        """
        return pulumi.get(self, "num_total_files")


@pulumi.output_type
class GetTasksTaskResult(dict):
    def __init__(__self__, *,
                 agent_cpu_usage: _builtins.float,
                 agent_disk_io: _builtins.float,
                 agent_mem_usage: _builtins.float,
                 clone_servers: Sequence['outputs.GetTasksTaskCloneServerResult'],
                 compress_rate: _builtins.float,
                 create_date: _builtins.int,
                 enterprise_project_id: _builtins.str,
                 error_json: _builtins.str,
                 estimate_complete_time: _builtins.int,
                 id: _builtins.str,
                 log_collect_status: _builtins.str,
                 migrate_speed: _builtins.float,
                 migration_ip: _builtins.str,
                 name: _builtins.str,
                 need_migration_test: _builtins.bool,
                 network_check_infos: Sequence['outputs.GetTasksTaskNetworkCheckInfoResult'],
                 os_type: _builtins.str,
                 priority: _builtins.int,
                 source_servers: Sequence['outputs.GetTasksTaskSourceServerResult'],
                 special_configs: Sequence['outputs.GetTasksTaskSpecialConfigResult'],
                 speed_limit: _builtins.int,
                 start_target_server: _builtins.bool,
                 state: _builtins.str,
                 sub_tasks: Sequence['outputs.GetTasksTaskSubTaskResult'],
                 syncing: _builtins.bool,
                 target_servers: Sequence['outputs.GetTasksTaskTargetServerResult'],
                 total_cpu_usage: _builtins.float,
                 total_disk_io: _builtins.float,
                 total_mem_usage: _builtins.float,
                 total_time: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.float agent_cpu_usage: Indicates the CPU usage of the agent, the unit is percentage.
        :param _builtins.float agent_disk_io: Indicates the disk I/O of the agent, the unit is MB/s.
        :param _builtins.float agent_mem_usage: Indicates the memory usage of the agent, the unit is MB.
        :param Sequence['GetTasksTaskCloneServerArgs'] clone_servers: Indicates the information about the cloned server.
        :param _builtins.float compress_rate: Indicates the compression rate.
        :param _builtins.int create_date: Indicates the task creation time.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to be queried.
        :param _builtins.str error_json: Indicates the error message.
        :param _builtins.int estimate_complete_time: Indicates the estimated completion time.
        :param _builtins.str id: Indicates the ID of the target server in the SMS database.
        :param _builtins.str log_collect_status: Indicates the log collection status.
        :param _builtins.float migrate_speed: Indicates the migration rate, the unit is MB/s.
        :param _builtins.str migration_ip: Indicates the IP address of the target server.
        :param _builtins.str name: Specifies the task name.
        :param _builtins.bool need_migration_test: Indicates whether migration drilling is enabled.
        :param Sequence['GetTasksTaskNetworkCheckInfoArgs'] network_check_infos: Indicates the network performance metrics and measurement results.
        :param _builtins.str os_type: Indicates the OS type of the target server.
        :param _builtins.int priority: Indicates the migration process priority.
        :param Sequence['GetTasksTaskSourceServerArgs'] source_servers: Indicates the information about the source server associated with the migration task.
        :param Sequence['GetTasksTaskSpecialConfigArgs'] special_configs: Indicates the configuration information of advanced migration options.
        :param _builtins.int speed_limit: Indicates the migration rate limit.
        :param _builtins.bool start_target_server: Indicates whether the target server is started after the migration is complete.
        :param _builtins.str state: Specifies the migration task status.
               Values can be as follows:
               + **READY**: The migration task is ready for execution.
               + **RUNNING**: The migration task is being executed.
               + **SYNCING**: The incremental data is being synchronized.
               + **MIGRATE_SUCCESS**: The migration succeeds.
               + **MIGRATE_FAIL**: The migration fails.
               + **ABORTING**: The migration task is being stopped.
               + **ABORT**: The migration task is stopped.
               + **DELETING**: The migration task is being deleted.
               + **SYNC_F_ROLLBACKING**: The synchronization fails and the task is being rolled back.
               + **SYNC_F_ROLLBACK_SUCCESS**: The synchronization fails and the rollback is successful.
        :param Sequence['GetTasksTaskSubTaskArgs'] sub_tasks: Indicates the information about subtasks associated with the migration task
        :param _builtins.bool syncing: Indicates whether synchronization is enabled.
        :param Sequence['GetTasksTaskTargetServerArgs'] target_servers: Indicates the information about the target server associated with the migration task.
        :param _builtins.float total_cpu_usage: Indicates the CPU usage of the server, the unit is percentage.
        :param _builtins.float total_disk_io: Indicates the disk I/O of the server, the unit is MB/s.
        :param _builtins.float total_mem_usage: Indicates the memory usage of the server, the unit is MB.
        :param _builtins.int total_time: Indicates the task duration.
        :param _builtins.str type: Indicates the task type.
        """
        pulumi.set(__self__, "agent_cpu_usage", agent_cpu_usage)
        pulumi.set(__self__, "agent_disk_io", agent_disk_io)
        pulumi.set(__self__, "agent_mem_usage", agent_mem_usage)
        pulumi.set(__self__, "clone_servers", clone_servers)
        pulumi.set(__self__, "compress_rate", compress_rate)
        pulumi.set(__self__, "create_date", create_date)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "error_json", error_json)
        pulumi.set(__self__, "estimate_complete_time", estimate_complete_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "log_collect_status", log_collect_status)
        pulumi.set(__self__, "migrate_speed", migrate_speed)
        pulumi.set(__self__, "migration_ip", migration_ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "need_migration_test", need_migration_test)
        pulumi.set(__self__, "network_check_infos", network_check_infos)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "source_servers", source_servers)
        pulumi.set(__self__, "special_configs", special_configs)
        pulumi.set(__self__, "speed_limit", speed_limit)
        pulumi.set(__self__, "start_target_server", start_target_server)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "sub_tasks", sub_tasks)
        pulumi.set(__self__, "syncing", syncing)
        pulumi.set(__self__, "target_servers", target_servers)
        pulumi.set(__self__, "total_cpu_usage", total_cpu_usage)
        pulumi.set(__self__, "total_disk_io", total_disk_io)
        pulumi.set(__self__, "total_mem_usage", total_mem_usage)
        pulumi.set(__self__, "total_time", total_time)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="agentCpuUsage")
    def agent_cpu_usage(self) -> _builtins.float:
        """
        Indicates the CPU usage of the agent, the unit is percentage.
        """
        return pulumi.get(self, "agent_cpu_usage")

    @_builtins.property
    @pulumi.getter(name="agentDiskIo")
    def agent_disk_io(self) -> _builtins.float:
        """
        Indicates the disk I/O of the agent, the unit is MB/s.
        """
        return pulumi.get(self, "agent_disk_io")

    @_builtins.property
    @pulumi.getter(name="agentMemUsage")
    def agent_mem_usage(self) -> _builtins.float:
        """
        Indicates the memory usage of the agent, the unit is MB.
        """
        return pulumi.get(self, "agent_mem_usage")

    @_builtins.property
    @pulumi.getter(name="cloneServers")
    def clone_servers(self) -> Sequence['outputs.GetTasksTaskCloneServerResult']:
        """
        Indicates the information about the cloned server.
        """
        return pulumi.get(self, "clone_servers")

    @_builtins.property
    @pulumi.getter(name="compressRate")
    def compress_rate(self) -> _builtins.float:
        """
        Indicates the compression rate.
        """
        return pulumi.get(self, "compress_rate")

    @_builtins.property
    @pulumi.getter(name="createDate")
    def create_date(self) -> _builtins.int:
        """
        Indicates the task creation time.
        """
        return pulumi.get(self, "create_date")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to be queried.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="errorJson")
    def error_json(self) -> _builtins.str:
        """
        Indicates the error message.
        """
        return pulumi.get(self, "error_json")

    @_builtins.property
    @pulumi.getter(name="estimateCompleteTime")
    def estimate_complete_time(self) -> _builtins.int:
        """
        Indicates the estimated completion time.
        """
        return pulumi.get(self, "estimate_complete_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the target server in the SMS database.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logCollectStatus")
    def log_collect_status(self) -> _builtins.str:
        """
        Indicates the log collection status.
        """
        return pulumi.get(self, "log_collect_status")

    @_builtins.property
    @pulumi.getter(name="migrateSpeed")
    def migrate_speed(self) -> _builtins.float:
        """
        Indicates the migration rate, the unit is MB/s.
        """
        return pulumi.get(self, "migrate_speed")

    @_builtins.property
    @pulumi.getter(name="migrationIp")
    def migration_ip(self) -> _builtins.str:
        """
        Indicates the IP address of the target server.
        """
        return pulumi.get(self, "migration_ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the task name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="needMigrationTest")
    def need_migration_test(self) -> _builtins.bool:
        """
        Indicates whether migration drilling is enabled.
        """
        return pulumi.get(self, "need_migration_test")

    @_builtins.property
    @pulumi.getter(name="networkCheckInfos")
    def network_check_infos(self) -> Sequence['outputs.GetTasksTaskNetworkCheckInfoResult']:
        """
        Indicates the network performance metrics and measurement results.
        """
        return pulumi.get(self, "network_check_infos")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Indicates the OS type of the target server.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Indicates the migration process priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="sourceServers")
    def source_servers(self) -> Sequence['outputs.GetTasksTaskSourceServerResult']:
        """
        Indicates the information about the source server associated with the migration task.
        """
        return pulumi.get(self, "source_servers")

    @_builtins.property
    @pulumi.getter(name="specialConfigs")
    def special_configs(self) -> Sequence['outputs.GetTasksTaskSpecialConfigResult']:
        """
        Indicates the configuration information of advanced migration options.
        """
        return pulumi.get(self, "special_configs")

    @_builtins.property
    @pulumi.getter(name="speedLimit")
    def speed_limit(self) -> _builtins.int:
        """
        Indicates the migration rate limit.
        """
        return pulumi.get(self, "speed_limit")

    @_builtins.property
    @pulumi.getter(name="startTargetServer")
    def start_target_server(self) -> _builtins.bool:
        """
        Indicates whether the target server is started after the migration is complete.
        """
        return pulumi.get(self, "start_target_server")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the migration task status.
        Values can be as follows:
        + **READY**: The migration task is ready for execution.
        + **RUNNING**: The migration task is being executed.
        + **SYNCING**: The incremental data is being synchronized.
        + **MIGRATE_SUCCESS**: The migration succeeds.
        + **MIGRATE_FAIL**: The migration fails.
        + **ABORTING**: The migration task is being stopped.
        + **ABORT**: The migration task is stopped.
        + **DELETING**: The migration task is being deleted.
        + **SYNC_F_ROLLBACKING**: The synchronization fails and the task is being rolled back.
        + **SYNC_F_ROLLBACK_SUCCESS**: The synchronization fails and the rollback is successful.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subTasks")
    def sub_tasks(self) -> Sequence['outputs.GetTasksTaskSubTaskResult']:
        """
        Indicates the information about subtasks associated with the migration task
        """
        return pulumi.get(self, "sub_tasks")

    @_builtins.property
    @pulumi.getter
    def syncing(self) -> _builtins.bool:
        """
        Indicates whether synchronization is enabled.
        """
        return pulumi.get(self, "syncing")

    @_builtins.property
    @pulumi.getter(name="targetServers")
    def target_servers(self) -> Sequence['outputs.GetTasksTaskTargetServerResult']:
        """
        Indicates the information about the target server associated with the migration task.
        """
        return pulumi.get(self, "target_servers")

    @_builtins.property
    @pulumi.getter(name="totalCpuUsage")
    def total_cpu_usage(self) -> _builtins.float:
        """
        Indicates the CPU usage of the server, the unit is percentage.
        """
        return pulumi.get(self, "total_cpu_usage")

    @_builtins.property
    @pulumi.getter(name="totalDiskIo")
    def total_disk_io(self) -> _builtins.float:
        """
        Indicates the disk I/O of the server, the unit is MB/s.
        """
        return pulumi.get(self, "total_disk_io")

    @_builtins.property
    @pulumi.getter(name="totalMemUsage")
    def total_mem_usage(self) -> _builtins.float:
        """
        Indicates the memory usage of the server, the unit is MB.
        """
        return pulumi.get(self, "total_mem_usage")

    @_builtins.property
    @pulumi.getter(name="totalTime")
    def total_time(self) -> _builtins.int:
        """
        Indicates the task duration.
        """
        return pulumi.get(self, "total_time")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the task type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTasksTaskCloneServerResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 vm_id: _builtins.str):
        """
        :param _builtins.str name: Specifies the task name.
        :param _builtins.str vm_id: Indicates the ID of the cloned server.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the task name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        Indicates the ID of the cloned server.
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetTasksTaskNetworkCheckInfoResult(dict):
    def __init__(__self__, *,
                 cpu_usage: _builtins.float,
                 destination_connectivity: _builtins.bool,
                 domain_connectivity: _builtins.bool,
                 evaluation_result: _builtins.str,
                 loss_percentage: _builtins.float,
                 mem_usage: _builtins.float,
                 migration_speed: _builtins.float,
                 network_delay: _builtins.float,
                 network_jitter: _builtins.float):
        """
        :param _builtins.float cpu_usage: Indicates the CPU usage.
        :param _builtins.bool destination_connectivity: Indicates the connectivity to the target server.
        :param _builtins.bool domain_connectivity: Indicates the connectivity to domain names.
        :param _builtins.str evaluation_result: Indicates the network evaluation result.
        :param _builtins.float loss_percentage: Indicates the packet loss rate.
        :param _builtins.float mem_usage: Indicates the memory usage.
        :param _builtins.float migration_speed: Indicates the bandwidth.
        :param _builtins.float network_delay: Indicates the network latency.
        :param _builtins.float network_jitter: Indicates the network jitter.
        """
        pulumi.set(__self__, "cpu_usage", cpu_usage)
        pulumi.set(__self__, "destination_connectivity", destination_connectivity)
        pulumi.set(__self__, "domain_connectivity", domain_connectivity)
        pulumi.set(__self__, "evaluation_result", evaluation_result)
        pulumi.set(__self__, "loss_percentage", loss_percentage)
        pulumi.set(__self__, "mem_usage", mem_usage)
        pulumi.set(__self__, "migration_speed", migration_speed)
        pulumi.set(__self__, "network_delay", network_delay)
        pulumi.set(__self__, "network_jitter", network_jitter)

    @_builtins.property
    @pulumi.getter(name="cpuUsage")
    def cpu_usage(self) -> _builtins.float:
        """
        Indicates the CPU usage.
        """
        return pulumi.get(self, "cpu_usage")

    @_builtins.property
    @pulumi.getter(name="destinationConnectivity")
    def destination_connectivity(self) -> _builtins.bool:
        """
        Indicates the connectivity to the target server.
        """
        return pulumi.get(self, "destination_connectivity")

    @_builtins.property
    @pulumi.getter(name="domainConnectivity")
    def domain_connectivity(self) -> _builtins.bool:
        """
        Indicates the connectivity to domain names.
        """
        return pulumi.get(self, "domain_connectivity")

    @_builtins.property
    @pulumi.getter(name="evaluationResult")
    def evaluation_result(self) -> _builtins.str:
        """
        Indicates the network evaluation result.
        """
        return pulumi.get(self, "evaluation_result")

    @_builtins.property
    @pulumi.getter(name="lossPercentage")
    def loss_percentage(self) -> _builtins.float:
        """
        Indicates the packet loss rate.
        """
        return pulumi.get(self, "loss_percentage")

    @_builtins.property
    @pulumi.getter(name="memUsage")
    def mem_usage(self) -> _builtins.float:
        """
        Indicates the memory usage.
        """
        return pulumi.get(self, "mem_usage")

    @_builtins.property
    @pulumi.getter(name="migrationSpeed")
    def migration_speed(self) -> _builtins.float:
        """
        Indicates the bandwidth.
        """
        return pulumi.get(self, "migration_speed")

    @_builtins.property
    @pulumi.getter(name="networkDelay")
    def network_delay(self) -> _builtins.float:
        """
        Indicates the network latency.
        """
        return pulumi.get(self, "network_delay")

    @_builtins.property
    @pulumi.getter(name="networkJitter")
    def network_jitter(self) -> _builtins.float:
        """
        Indicates the network jitter.
        """
        return pulumi.get(self, "network_jitter")


@pulumi.output_type
class GetTasksTaskSourceServerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 ip: _builtins.str,
                 name: _builtins.str,
                 oem_system: _builtins.bool,
                 os_type: _builtins.str,
                 os_version: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str id: Indicates the ID of the target server in the SMS database.
        :param _builtins.str ip: Indicates the IP address of the target server.
        :param _builtins.str name: Specifies the task name.
        :param _builtins.bool oem_system: Indicates whether the OS is an OEM version (Windows).
        :param _builtins.str os_type: Indicates the OS type of the target server.
        :param _builtins.str os_version: Indicates the OS version.
        :param _builtins.str state: Specifies the migration task status.
               Values can be as follows:
               + **READY**: The migration task is ready for execution.
               + **RUNNING**: The migration task is being executed.
               + **SYNCING**: The incremental data is being synchronized.
               + **MIGRATE_SUCCESS**: The migration succeeds.
               + **MIGRATE_FAIL**: The migration fails.
               + **ABORTING**: The migration task is being stopped.
               + **ABORT**: The migration task is stopped.
               + **DELETING**: The migration task is being deleted.
               + **SYNC_F_ROLLBACKING**: The synchronization fails and the task is being rolled back.
               + **SYNC_F_ROLLBACK_SUCCESS**: The synchronization fails and the rollback is successful.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "oem_system", oem_system)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the target server in the SMS database.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Indicates the IP address of the target server.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the task name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="oemSystem")
    def oem_system(self) -> _builtins.bool:
        """
        Indicates whether the OS is an OEM version (Windows).
        """
        return pulumi.get(self, "oem_system")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Indicates the OS type of the target server.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> _builtins.str:
        """
        Indicates the OS version.
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the migration task status.
        Values can be as follows:
        + **READY**: The migration task is ready for execution.
        + **RUNNING**: The migration task is being executed.
        + **SYNCING**: The incremental data is being synchronized.
        + **MIGRATE_SUCCESS**: The migration succeeds.
        + **MIGRATE_FAIL**: The migration fails.
        + **ABORTING**: The migration task is being stopped.
        + **ABORT**: The migration task is stopped.
        + **DELETING**: The migration task is being deleted.
        + **SYNC_F_ROLLBACKING**: The synchronization fails and the task is being rolled back.
        + **SYNC_F_ROLLBACK_SUCCESS**: The synchronization fails and the rollback is successful.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetTasksTaskSpecialConfigResult(dict):
    def __init__(__self__, *,
                 config_key: _builtins.str,
                 config_status: _builtins.str,
                 config_value: _builtins.str):
        """
        :param _builtins.str config_key: Indicates the advanced migration option.
        :param _builtins.str config_status: Indicates the reserved field that describes the configuration status.
        :param _builtins.str config_value: Indicates the value specified for the advanced migration option.
        """
        pulumi.set(__self__, "config_key", config_key)
        pulumi.set(__self__, "config_status", config_status)
        pulumi.set(__self__, "config_value", config_value)

    @_builtins.property
    @pulumi.getter(name="configKey")
    def config_key(self) -> _builtins.str:
        """
        Indicates the advanced migration option.
        """
        return pulumi.get(self, "config_key")

    @_builtins.property
    @pulumi.getter(name="configStatus")
    def config_status(self) -> _builtins.str:
        """
        Indicates the reserved field that describes the configuration status.
        """
        return pulumi.get(self, "config_status")

    @_builtins.property
    @pulumi.getter(name="configValue")
    def config_value(self) -> _builtins.str:
        """
        Indicates the value specified for the advanced migration option.
        """
        return pulumi.get(self, "config_value")


@pulumi.output_type
class GetTasksTaskSubTaskResult(dict):
    def __init__(__self__, *,
                 end_date: _builtins.int,
                 id: _builtins.int,
                 name: _builtins.str,
                 process_trace: _builtins.str,
                 progress: _builtins.int,
                 start_date: _builtins.int):
        """
        :param _builtins.int end_date: Indicates the end time of the subtask.
        :param _builtins.int id: Indicates the ID of the target server in the SMS database.
        :param _builtins.str name: Specifies the task name.
        :param _builtins.str process_trace: Indicates the detailed progress of the migration or synchronization.
        :param _builtins.int progress: Indicates the progress of the subtask.
        :param _builtins.int start_date: Indicates the start time of the subtask.
        """
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "process_trace", process_trace)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "start_date", start_date)

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> _builtins.int:
        """
        Indicates the end time of the subtask.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Indicates the ID of the target server in the SMS database.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the task name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="processTrace")
    def process_trace(self) -> _builtins.str:
        """
        Indicates the detailed progress of the migration or synchronization.
        """
        return pulumi.get(self, "process_trace")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        Indicates the progress of the subtask.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> _builtins.int:
        """
        Indicates the start time of the subtask.
        """
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetTasksTaskTargetServerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 ip: _builtins.str,
                 name: _builtins.str,
                 os_type: _builtins.str,
                 os_version: _builtins.str,
                 vm_id: _builtins.str):
        """
        :param _builtins.str id: Indicates the ID of the target server in the SMS database.
        :param _builtins.str ip: Indicates the IP address of the target server.
        :param _builtins.str name: Specifies the task name.
        :param _builtins.str os_type: Indicates the OS type of the target server.
        :param _builtins.str os_version: Indicates the OS version.
        :param _builtins.str vm_id: Indicates the ID of the cloned server.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the target server in the SMS database.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Indicates the IP address of the target server.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the task name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Indicates the OS type of the target server.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> _builtins.str:
        """
        Indicates the OS version.
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        Indicates the ID of the cloned server.
        """
        return pulumi.get(self, "vm_id")


