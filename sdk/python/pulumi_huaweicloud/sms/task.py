# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TaskArgs', 'Task']

@pulumi.input_type
class TaskArgs:
    def __init__(__self__, *,
                 os_type: pulumi.Input[_builtins.str],
                 source_server_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_start: Optional[pulumi.Input[_builtins.bool]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TaskConfigurationArgs']]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_need_consistency_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 migrate_speed_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 migration_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 need_migration_test: Optional[pulumi.Input[_builtins.bool]] = None,
                 over_speed_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_limits: Optional[pulumi.Input[Sequence[pulumi.Input['TaskSpeedLimitArgs']]]] = None,
                 start_network_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_target_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 syncing: Optional[pulumi.Input[_builtins.bool]] = None,
                 target_server_disks: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskArgs']]]] = None,
                 target_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 use_ipv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 use_public_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 vm_template_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Task resource.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_server_id: Specifies the ID of the source server.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the migration task. Available values are
               **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
               Changing this parameter will create a new resource.
               
               + For Linux servers, SMS supports block-level and file-level migrations. Block-level migration has
               high efficiency but poor compatibility while file-level migration has low efficiency but excellent compatibility.
               + For Windows servers, SMS only supports highly efficient block-level migration.
        :param pulumi.Input[_builtins.str] action: Specifies the operation after the task is created.
               The value can be **start**, **stop** and **restart**.
        :param pulumi.Input[_builtins.bool] auto_start: Specifies whether to automatically start the migration. Defaults to **false**.
        :param pulumi.Input[Sequence[pulumi.Input['TaskConfigurationArgs']]] configurations: Specifies the settings of advanced migration options.
               The configurations structure is documented below.
        :param pulumi.Input[_builtins.bool] is_need_consistency_check: Specifies whether consistency verification is enabled.
               Defaults to **false**.
        :param pulumi.Input[_builtins.int] migrate_speed_limit: Specifies the migration speed limit.
        :param pulumi.Input[_builtins.str] migration_ip: Specifies the IP address of the target server.
               Use the EIP of the target server if the migration network type is Internet.
               Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] need_migration_test: Specifies whether migration drilling is enabled. Defaults to
               **false**.
        :param pulumi.Input[_builtins.float] over_speed_threshold: Specifies the overspeed threshold for stopping migration, the unit is percentage.
               
               <a name="configurations_struct"></a>
               The `configurations` block supports:
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID where the target server is located.
               If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
               
               <a name="speed_limit_struct"></a>
               The `speed_limit` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the target server is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['TaskSpeedLimitArgs']]] speed_limits: Specifies the information about the time period-based rate limiting rules.
               The speed_limit structure is documented below.
        :param pulumi.Input[_builtins.bool] start_network_check: Specifies whether to measure the network performance. Defaults
               to **false**.
        :param pulumi.Input[_builtins.bool] start_target_server: Specifies whether to start the target server after the migration.
               The default value is `true`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] syncing: Specifies whether to perform a continuous synchronization after the first replication.
               The default value is `false`. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskArgs']]] target_server_disks: Specifies the disk configurations of the target server.
               If omitted, it will be obtained from the source server. The object
               is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_server_id: Specifies the existing server ID as the target server.
               This parameter and `vm_template_id` are alternative. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] use_ipv6: Specifies whether to use IPv6. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] use_public_ip: Specifies whether to use a public IP address for migration.
               The default value is `true`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vm_template_id: Specifies the template used to create the target server automatically.
               This parameter and `target_server_id` are alternative. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "source_server_id", source_server_id)
        pulumi.set(__self__, "type", type)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auto_start is not None:
            pulumi.set(__self__, "auto_start", auto_start)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_need_consistency_check is not None:
            pulumi.set(__self__, "is_need_consistency_check", is_need_consistency_check)
        if migrate_speed_limit is not None:
            pulumi.set(__self__, "migrate_speed_limit", migrate_speed_limit)
        if migration_ip is not None:
            pulumi.set(__self__, "migration_ip", migration_ip)
        if need_migration_test is not None:
            pulumi.set(__self__, "need_migration_test", need_migration_test)
        if over_speed_threshold is not None:
            pulumi.set(__self__, "over_speed_threshold", over_speed_threshold)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if speed_limits is not None:
            pulumi.set(__self__, "speed_limits", speed_limits)
        if start_network_check is not None:
            pulumi.set(__self__, "start_network_check", start_network_check)
        if start_target_server is not None:
            pulumi.set(__self__, "start_target_server", start_target_server)
        if syncing is not None:
            pulumi.set(__self__, "syncing", syncing)
        if target_server_disks is not None:
            pulumi.set(__self__, "target_server_disks", target_server_disks)
        if target_server_id is not None:
            pulumi.set(__self__, "target_server_id", target_server_id)
        if use_ipv6 is not None:
            pulumi.set(__self__, "use_ipv6", use_ipv6)
        if use_public_ip is not None:
            pulumi.set(__self__, "use_public_ip", use_public_ip)
        if vm_template_id is not None:
            pulumi.set(__self__, "vm_template_id", vm_template_id)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the source server.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_server_id")

    @source_server_id.setter
    def source_server_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_server_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the migration task. Available values are
        **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
        Changing this parameter will create a new resource.

        + For Linux servers, SMS supports block-level and file-level migrations. Block-level migration has
        high efficiency but poor compatibility while file-level migration has low efficiency but excellent compatibility.
        + For Windows servers, SMS only supports highly efficient block-level migration.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation after the task is created.
        The value can be **start**, **stop** and **restart**.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="autoStart")
    def auto_start(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically start the migration. Defaults to **false**.
        """
        return pulumi.get(self, "auto_start")

    @auto_start.setter
    def auto_start(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_start", value)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskConfigurationArgs']]]]:
        """
        Specifies the settings of advanced migration options.
        The configurations structure is documented below.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isNeedConsistencyCheck")
    def is_need_consistency_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether consistency verification is enabled.
        Defaults to **false**.
        """
        return pulumi.get(self, "is_need_consistency_check")

    @is_need_consistency_check.setter
    def is_need_consistency_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_need_consistency_check", value)

    @_builtins.property
    @pulumi.getter(name="migrateSpeedLimit")
    def migrate_speed_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the migration speed limit.
        """
        return pulumi.get(self, "migrate_speed_limit")

    @migrate_speed_limit.setter
    def migrate_speed_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "migrate_speed_limit", value)

    @_builtins.property
    @pulumi.getter(name="migrationIp")
    def migration_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address of the target server.
        Use the EIP of the target server if the migration network type is Internet.
        Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "migration_ip")

    @migration_ip.setter
    def migration_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migration_ip", value)

    @_builtins.property
    @pulumi.getter(name="needMigrationTest")
    def need_migration_test(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether migration drilling is enabled. Defaults to
        **false**.
        """
        return pulumi.get(self, "need_migration_test")

    @need_migration_test.setter
    def need_migration_test(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "need_migration_test", value)

    @_builtins.property
    @pulumi.getter(name="overSpeedThreshold")
    def over_speed_threshold(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the overspeed threshold for stopping migration, the unit is percentage.

        <a name="configurations_struct"></a>
        The `configurations` block supports:
        """
        return pulumi.get(self, "over_speed_threshold")

    @over_speed_threshold.setter
    def over_speed_threshold(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "over_speed_threshold", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project ID where the target server is located.
        If omitted, the default project in the region will be used. Changing this parameter will create a new resource.

        <a name="speed_limit_struct"></a>
        The `speed_limit` block supports:
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the target server is located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="speedLimits")
    def speed_limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskSpeedLimitArgs']]]]:
        """
        Specifies the information about the time period-based rate limiting rules.
        The speed_limit structure is documented below.
        """
        return pulumi.get(self, "speed_limits")

    @speed_limits.setter
    def speed_limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskSpeedLimitArgs']]]]):
        pulumi.set(self, "speed_limits", value)

    @_builtins.property
    @pulumi.getter(name="startNetworkCheck")
    def start_network_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to measure the network performance. Defaults
        to **false**.
        """
        return pulumi.get(self, "start_network_check")

    @start_network_check.setter
    def start_network_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_network_check", value)

    @_builtins.property
    @pulumi.getter(name="startTargetServer")
    def start_target_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to start the target server after the migration.
        The default value is `true`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "start_target_server")

    @start_target_server.setter
    def start_target_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_target_server", value)

    @_builtins.property
    @pulumi.getter
    def syncing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform a continuous synchronization after the first replication.
        The default value is `false`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "syncing")

    @syncing.setter
    def syncing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "syncing", value)

    @_builtins.property
    @pulumi.getter(name="targetServerDisks")
    def target_server_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskArgs']]]]:
        """
        Specifies the disk configurations of the target server.
        If omitted, it will be obtained from the source server. The object
        is documented below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_server_disks")

    @target_server_disks.setter
    def target_server_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskArgs']]]]):
        pulumi.set(self, "target_server_disks", value)

    @_builtins.property
    @pulumi.getter(name="targetServerId")
    def target_server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the existing server ID as the target server.
        This parameter and `vm_template_id` are alternative. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_server_id")

    @target_server_id.setter
    def target_server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_server_id", value)

    @_builtins.property
    @pulumi.getter(name="useIpv6")
    def use_ipv6(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use IPv6. Defaults to **false**.
        """
        return pulumi.get(self, "use_ipv6")

    @use_ipv6.setter
    def use_ipv6(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_ipv6", value)

    @_builtins.property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use a public IP address for migration.
        The default value is `true`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "use_public_ip")

    @use_public_ip.setter
    def use_public_ip(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_public_ip", value)

    @_builtins.property
    @pulumi.getter(name="vmTemplateId")
    def vm_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template used to create the target server automatically.
        This parameter and `target_server_id` are alternative. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vm_template_id")

    @vm_template_id.setter
    def vm_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_template_id", value)


@pulumi.input_type
class _TaskState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_start: Optional[pulumi.Input[_builtins.bool]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TaskConfigurationArgs']]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_need_consistency_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 migrate_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 migrate_speed_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 migrate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 need_migration_test: Optional[pulumi.Input[_builtins.bool]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 over_speed_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 passphrase: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_limits: Optional[pulumi.Input[Sequence[pulumi.Input['TaskSpeedLimitArgs']]]] = None,
                 start_network_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_target_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 syncing: Optional[pulumi.Input[_builtins.bool]] = None,
                 target_server_disks: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskArgs']]]] = None,
                 target_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_server_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_ipv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 use_public_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 vm_template_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Task resources.
        :param pulumi.Input[_builtins.str] action: Specifies the operation after the task is created.
               The value can be **start**, **stop** and **restart**.
        :param pulumi.Input[_builtins.bool] auto_start: Specifies whether to automatically start the migration. Defaults to **false**.
        :param pulumi.Input[Sequence[pulumi.Input['TaskConfigurationArgs']]] configurations: Specifies the settings of advanced migration options.
               The configurations structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Indicates the enterprise project id of the target server.
        :param pulumi.Input[_builtins.bool] is_need_consistency_check: Specifies whether consistency verification is enabled.
               Defaults to **false**.
        :param pulumi.Input[_builtins.float] migrate_speed: Indicates the migration rate, in MB/s.
        :param pulumi.Input[_builtins.int] migrate_speed_limit: Specifies the migration speed limit.
        :param pulumi.Input[_builtins.str] migrate_type: Indicates the migration method.
        :param pulumi.Input[_builtins.str] migration_ip: Specifies the IP address of the target server.
               Use the EIP of the target server if the migration network type is Internet.
               Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] need_migration_test: Specifies whether migration drilling is enabled. Defaults to
               **false**.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.float] over_speed_threshold: Specifies the overspeed threshold for stopping migration, the unit is percentage.
               
               <a name="configurations_struct"></a>
               The `configurations` block supports:
        :param pulumi.Input[_builtins.str] passphrase: Indicates the certificate passphrase of the secure transmission channel.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID where the target server is located.
               If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
               
               <a name="speed_limit_struct"></a>
               The `speed_limit` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the target server is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_server_id: Specifies the ID of the source server.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['TaskSpeedLimitArgs']]] speed_limits: Specifies the information about the time period-based rate limiting rules.
               The speed_limit structure is documented below.
        :param pulumi.Input[_builtins.bool] start_network_check: Specifies whether to measure the network performance. Defaults
               to **false**.
        :param pulumi.Input[_builtins.bool] start_target_server: Specifies whether to start the target server after the migration.
               The default value is `true`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] state: Indicates the status of the migration task.
        :param pulumi.Input[_builtins.bool] syncing: Specifies whether to perform a continuous synchronization after the first replication.
               The default value is `false`. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskArgs']]] target_server_disks: Specifies the disk configurations of the target server.
               If omitted, it will be obtained from the source server. The object
               is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_server_id: Specifies the existing server ID as the target server.
               This parameter and `vm_template_id` are alternative. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_server_name: Indicates the name of the target server.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the migration task. Available values are
               **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
               Changing this parameter will create a new resource.
               
               + For Linux servers, SMS supports block-level and file-level migrations. Block-level migration has
               high efficiency but poor compatibility while file-level migration has low efficiency but excellent compatibility.
               + For Windows servers, SMS only supports highly efficient block-level migration.
        :param pulumi.Input[_builtins.bool] use_ipv6: Specifies whether to use IPv6. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] use_public_ip: Specifies whether to use a public IP address for migration.
               The default value is `true`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vm_template_id: Specifies the template used to create the target server automatically.
               This parameter and `target_server_id` are alternative. Changing this parameter will create a new resource.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auto_start is not None:
            pulumi.set(__self__, "auto_start", auto_start)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if is_need_consistency_check is not None:
            pulumi.set(__self__, "is_need_consistency_check", is_need_consistency_check)
        if migrate_speed is not None:
            pulumi.set(__self__, "migrate_speed", migrate_speed)
        if migrate_speed_limit is not None:
            pulumi.set(__self__, "migrate_speed_limit", migrate_speed_limit)
        if migrate_type is not None:
            pulumi.set(__self__, "migrate_type", migrate_type)
        if migration_ip is not None:
            pulumi.set(__self__, "migration_ip", migration_ip)
        if need_migration_test is not None:
            pulumi.set(__self__, "need_migration_test", need_migration_test)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if over_speed_threshold is not None:
            pulumi.set(__self__, "over_speed_threshold", over_speed_threshold)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_server_id is not None:
            pulumi.set(__self__, "source_server_id", source_server_id)
        if speed_limits is not None:
            pulumi.set(__self__, "speed_limits", speed_limits)
        if start_network_check is not None:
            pulumi.set(__self__, "start_network_check", start_network_check)
        if start_target_server is not None:
            pulumi.set(__self__, "start_target_server", start_target_server)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if syncing is not None:
            pulumi.set(__self__, "syncing", syncing)
        if target_server_disks is not None:
            pulumi.set(__self__, "target_server_disks", target_server_disks)
        if target_server_id is not None:
            pulumi.set(__self__, "target_server_id", target_server_id)
        if target_server_name is not None:
            pulumi.set(__self__, "target_server_name", target_server_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_ipv6 is not None:
            pulumi.set(__self__, "use_ipv6", use_ipv6)
        if use_public_ip is not None:
            pulumi.set(__self__, "use_public_ip", use_public_ip)
        if vm_template_id is not None:
            pulumi.set(__self__, "vm_template_id", vm_template_id)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation after the task is created.
        The value can be **start**, **stop** and **restart**.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="autoStart")
    def auto_start(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically start the migration. Defaults to **false**.
        """
        return pulumi.get(self, "auto_start")

    @auto_start.setter
    def auto_start(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_start", value)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskConfigurationArgs']]]]:
        """
        Specifies the settings of advanced migration options.
        The configurations structure is documented below.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the enterprise project id of the target server.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="isNeedConsistencyCheck")
    def is_need_consistency_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether consistency verification is enabled.
        Defaults to **false**.
        """
        return pulumi.get(self, "is_need_consistency_check")

    @is_need_consistency_check.setter
    def is_need_consistency_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_need_consistency_check", value)

    @_builtins.property
    @pulumi.getter(name="migrateSpeed")
    def migrate_speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Indicates the migration rate, in MB/s.
        """
        return pulumi.get(self, "migrate_speed")

    @migrate_speed.setter
    def migrate_speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "migrate_speed", value)

    @_builtins.property
    @pulumi.getter(name="migrateSpeedLimit")
    def migrate_speed_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the migration speed limit.
        """
        return pulumi.get(self, "migrate_speed_limit")

    @migrate_speed_limit.setter
    def migrate_speed_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "migrate_speed_limit", value)

    @_builtins.property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the migration method.
        """
        return pulumi.get(self, "migrate_type")

    @migrate_type.setter
    def migrate_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migrate_type", value)

    @_builtins.property
    @pulumi.getter(name="migrationIp")
    def migration_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP address of the target server.
        Use the EIP of the target server if the migration network type is Internet.
        Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "migration_ip")

    @migration_ip.setter
    def migration_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migration_ip", value)

    @_builtins.property
    @pulumi.getter(name="needMigrationTest")
    def need_migration_test(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether migration drilling is enabled. Defaults to
        **false**.
        """
        return pulumi.get(self, "need_migration_test")

    @need_migration_test.setter
    def need_migration_test(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "need_migration_test", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="overSpeedThreshold")
    def over_speed_threshold(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the overspeed threshold for stopping migration, the unit is percentage.

        <a name="configurations_struct"></a>
        The `configurations` block supports:
        """
        return pulumi.get(self, "over_speed_threshold")

    @over_speed_threshold.setter
    def over_speed_threshold(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "over_speed_threshold", value)

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the certificate passphrase of the secure transmission channel.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passphrase", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project ID where the target server is located.
        If omitted, the default project in the region will be used. Changing this parameter will create a new resource.

        <a name="speed_limit_struct"></a>
        The `speed_limit` block supports:
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the target server is located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the source server.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_server_id")

    @source_server_id.setter
    def source_server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_server_id", value)

    @_builtins.property
    @pulumi.getter(name="speedLimits")
    def speed_limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskSpeedLimitArgs']]]]:
        """
        Specifies the information about the time period-based rate limiting rules.
        The speed_limit structure is documented below.
        """
        return pulumi.get(self, "speed_limits")

    @speed_limits.setter
    def speed_limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskSpeedLimitArgs']]]]):
        pulumi.set(self, "speed_limits", value)

    @_builtins.property
    @pulumi.getter(name="startNetworkCheck")
    def start_network_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to measure the network performance. Defaults
        to **false**.
        """
        return pulumi.get(self, "start_network_check")

    @start_network_check.setter
    def start_network_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_network_check", value)

    @_builtins.property
    @pulumi.getter(name="startTargetServer")
    def start_target_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to start the target server after the migration.
        The default value is `true`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "start_target_server")

    @start_target_server.setter
    def start_target_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_target_server", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the migration task.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def syncing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform a continuous synchronization after the first replication.
        The default value is `false`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "syncing")

    @syncing.setter
    def syncing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "syncing", value)

    @_builtins.property
    @pulumi.getter(name="targetServerDisks")
    def target_server_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskArgs']]]]:
        """
        Specifies the disk configurations of the target server.
        If omitted, it will be obtained from the source server. The object
        is documented below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_server_disks")

    @target_server_disks.setter
    def target_server_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskArgs']]]]):
        pulumi.set(self, "target_server_disks", value)

    @_builtins.property
    @pulumi.getter(name="targetServerId")
    def target_server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the existing server ID as the target server.
        This parameter and `vm_template_id` are alternative. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_server_id")

    @target_server_id.setter
    def target_server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_server_id", value)

    @_builtins.property
    @pulumi.getter(name="targetServerName")
    def target_server_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of the target server.
        """
        return pulumi.get(self, "target_server_name")

    @target_server_name.setter
    def target_server_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_server_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the migration task. Available values are
        **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
        Changing this parameter will create a new resource.

        + For Linux servers, SMS supports block-level and file-level migrations. Block-level migration has
        high efficiency but poor compatibility while file-level migration has low efficiency but excellent compatibility.
        + For Windows servers, SMS only supports highly efficient block-level migration.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="useIpv6")
    def use_ipv6(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use IPv6. Defaults to **false**.
        """
        return pulumi.get(self, "use_ipv6")

    @use_ipv6.setter
    def use_ipv6(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_ipv6", value)

    @_builtins.property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use a public IP address for migration.
        The default value is `true`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "use_public_ip")

    @use_public_ip.setter
    def use_public_ip(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_public_ip", value)

    @_builtins.property
    @pulumi.getter(name="vmTemplateId")
    def vm_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the template used to create the target server automatically.
        This parameter and `target_server_id` are alternative. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vm_template_id")

    @vm_template_id.setter
    def vm_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_template_id", value)


@pulumi.type_token("huaweicloud:Sms/task:Task")
class Task(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_start: Optional[pulumi.Input[_builtins.bool]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskConfigurationArgs', 'TaskConfigurationArgsDict']]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_need_consistency_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 migrate_speed_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 migration_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 need_migration_test: Optional[pulumi.Input[_builtins.bool]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 over_speed_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_limits: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskSpeedLimitArgs', 'TaskSpeedLimitArgsDict']]]]] = None,
                 start_network_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_target_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 syncing: Optional[pulumi.Input[_builtins.bool]] = None,
                 target_server_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskTargetServerDiskArgs', 'TaskTargetServerDiskArgsDict']]]]] = None,
                 target_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_ipv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 use_public_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 vm_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an SMS migration task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_server = config.require_object("sourceServer")
        template_id = config.require_object("templateId")
        migration = huaweicloud.sms.Task("migration",
            type="MIGRATE_FILE",
            os_type="LINUX",
            source_server_id=source_server,
            vm_template_id=template_id,
            action="start")
        ```

        ## Import

        SMS migration tasks can be imported by `id`, e.g.

        ```sh
        $ pulumi import huaweicloud:Sms/task:Task demo 6402c49b-7d9a-413e-8b5f-a7307f7d5679
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `action`, `auto_start`, `start_network_check`, `over_speed_threshold` and

        `is_need_consistency_check`.

        It is generally recommended running `pulumi preview` after importing a migration task.

        You can then decide if changes should be applied to the task, or the resource definition should be

        updated to align with the task. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_sms_task" "demo" {

            ...

          lifecycle {

            ignore_changes = [
            
              syncing, action, auto_start, start_network_check, over_speed_threshold, is_need_consistency_check,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation after the task is created.
               The value can be **start**, **stop** and **restart**.
        :param pulumi.Input[_builtins.bool] auto_start: Specifies whether to automatically start the migration. Defaults to **false**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskConfigurationArgs', 'TaskConfigurationArgsDict']]]] configurations: Specifies the settings of advanced migration options.
               The configurations structure is documented below.
        :param pulumi.Input[_builtins.bool] is_need_consistency_check: Specifies whether consistency verification is enabled.
               Defaults to **false**.
        :param pulumi.Input[_builtins.int] migrate_speed_limit: Specifies the migration speed limit.
        :param pulumi.Input[_builtins.str] migration_ip: Specifies the IP address of the target server.
               Use the EIP of the target server if the migration network type is Internet.
               Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] need_migration_test: Specifies whether migration drilling is enabled. Defaults to
               **false**.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.float] over_speed_threshold: Specifies the overspeed threshold for stopping migration, the unit is percentage.
               
               <a name="configurations_struct"></a>
               The `configurations` block supports:
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID where the target server is located.
               If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
               
               <a name="speed_limit_struct"></a>
               The `speed_limit` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the target server is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_server_id: Specifies the ID of the source server.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskSpeedLimitArgs', 'TaskSpeedLimitArgsDict']]]] speed_limits: Specifies the information about the time period-based rate limiting rules.
               The speed_limit structure is documented below.
        :param pulumi.Input[_builtins.bool] start_network_check: Specifies whether to measure the network performance. Defaults
               to **false**.
        :param pulumi.Input[_builtins.bool] start_target_server: Specifies whether to start the target server after the migration.
               The default value is `true`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] syncing: Specifies whether to perform a continuous synchronization after the first replication.
               The default value is `false`. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskTargetServerDiskArgs', 'TaskTargetServerDiskArgsDict']]]] target_server_disks: Specifies the disk configurations of the target server.
               If omitted, it will be obtained from the source server. The object
               is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_server_id: Specifies the existing server ID as the target server.
               This parameter and `vm_template_id` are alternative. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the migration task. Available values are
               **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
               Changing this parameter will create a new resource.
               
               + For Linux servers, SMS supports block-level and file-level migrations. Block-level migration has
               high efficiency but poor compatibility while file-level migration has low efficiency but excellent compatibility.
               + For Windows servers, SMS only supports highly efficient block-level migration.
        :param pulumi.Input[_builtins.bool] use_ipv6: Specifies whether to use IPv6. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] use_public_ip: Specifies whether to use a public IP address for migration.
               The default value is `true`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vm_template_id: Specifies the template used to create the target server automatically.
               This parameter and `target_server_id` are alternative. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an SMS migration task resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_server = config.require_object("sourceServer")
        template_id = config.require_object("templateId")
        migration = huaweicloud.sms.Task("migration",
            type="MIGRATE_FILE",
            os_type="LINUX",
            source_server_id=source_server,
            vm_template_id=template_id,
            action="start")
        ```

        ## Import

        SMS migration tasks can be imported by `id`, e.g.

        ```sh
        $ pulumi import huaweicloud:Sms/task:Task demo 6402c49b-7d9a-413e-8b5f-a7307f7d5679
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `action`, `auto_start`, `start_network_check`, `over_speed_threshold` and

        `is_need_consistency_check`.

        It is generally recommended running `pulumi preview` after importing a migration task.

        You can then decide if changes should be applied to the task, or the resource definition should be

        updated to align with the task. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_sms_task" "demo" {

            ...

          lifecycle {

            ignore_changes = [
            
              syncing, action, auto_start, start_network_check, over_speed_threshold, is_need_consistency_check,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param TaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_start: Optional[pulumi.Input[_builtins.bool]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskConfigurationArgs', 'TaskConfigurationArgsDict']]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_need_consistency_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 migrate_speed_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 migration_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 need_migration_test: Optional[pulumi.Input[_builtins.bool]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 over_speed_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_limits: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskSpeedLimitArgs', 'TaskSpeedLimitArgsDict']]]]] = None,
                 start_network_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_target_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 syncing: Optional[pulumi.Input[_builtins.bool]] = None,
                 target_server_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskTargetServerDiskArgs', 'TaskTargetServerDiskArgsDict']]]]] = None,
                 target_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_ipv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 use_public_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 vm_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TaskArgs.__new__(TaskArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["auto_start"] = auto_start
            __props__.__dict__["configurations"] = configurations
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["is_need_consistency_check"] = is_need_consistency_check
            __props__.__dict__["migrate_speed_limit"] = migrate_speed_limit
            __props__.__dict__["migration_ip"] = migration_ip
            __props__.__dict__["need_migration_test"] = need_migration_test
            if os_type is None and not opts.urn:
                raise TypeError("Missing required property 'os_type'")
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["over_speed_threshold"] = over_speed_threshold
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region"] = region
            if source_server_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_server_id'")
            __props__.__dict__["source_server_id"] = source_server_id
            __props__.__dict__["speed_limits"] = speed_limits
            __props__.__dict__["start_network_check"] = start_network_check
            __props__.__dict__["start_target_server"] = start_target_server
            __props__.__dict__["syncing"] = syncing
            __props__.__dict__["target_server_disks"] = target_server_disks
            __props__.__dict__["target_server_id"] = target_server_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["use_ipv6"] = use_ipv6
            __props__.__dict__["use_public_ip"] = use_public_ip
            __props__.__dict__["vm_template_id"] = vm_template_id
            __props__.__dict__["enterprise_project_id"] = None
            __props__.__dict__["migrate_speed"] = None
            __props__.__dict__["migrate_type"] = None
            __props__.__dict__["passphrase"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["target_server_name"] = None
        super(Task, __self__).__init__(
            'huaweicloud:Sms/task:Task',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            auto_start: Optional[pulumi.Input[_builtins.bool]] = None,
            configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskConfigurationArgs', 'TaskConfigurationArgsDict']]]]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_need_consistency_check: Optional[pulumi.Input[_builtins.bool]] = None,
            migrate_speed: Optional[pulumi.Input[_builtins.float]] = None,
            migrate_speed_limit: Optional[pulumi.Input[_builtins.int]] = None,
            migrate_type: Optional[pulumi.Input[_builtins.str]] = None,
            migration_ip: Optional[pulumi.Input[_builtins.str]] = None,
            need_migration_test: Optional[pulumi.Input[_builtins.bool]] = None,
            os_type: Optional[pulumi.Input[_builtins.str]] = None,
            over_speed_threshold: Optional[pulumi.Input[_builtins.float]] = None,
            passphrase: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source_server_id: Optional[pulumi.Input[_builtins.str]] = None,
            speed_limits: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskSpeedLimitArgs', 'TaskSpeedLimitArgsDict']]]]] = None,
            start_network_check: Optional[pulumi.Input[_builtins.bool]] = None,
            start_target_server: Optional[pulumi.Input[_builtins.bool]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            syncing: Optional[pulumi.Input[_builtins.bool]] = None,
            target_server_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskTargetServerDiskArgs', 'TaskTargetServerDiskArgsDict']]]]] = None,
            target_server_id: Optional[pulumi.Input[_builtins.str]] = None,
            target_server_name: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            use_ipv6: Optional[pulumi.Input[_builtins.bool]] = None,
            use_public_ip: Optional[pulumi.Input[_builtins.bool]] = None,
            vm_template_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Task':
        """
        Get an existing Task resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the operation after the task is created.
               The value can be **start**, **stop** and **restart**.
        :param pulumi.Input[_builtins.bool] auto_start: Specifies whether to automatically start the migration. Defaults to **false**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskConfigurationArgs', 'TaskConfigurationArgsDict']]]] configurations: Specifies the settings of advanced migration options.
               The configurations structure is documented below.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Indicates the enterprise project id of the target server.
        :param pulumi.Input[_builtins.bool] is_need_consistency_check: Specifies whether consistency verification is enabled.
               Defaults to **false**.
        :param pulumi.Input[_builtins.float] migrate_speed: Indicates the migration rate, in MB/s.
        :param pulumi.Input[_builtins.int] migrate_speed_limit: Specifies the migration speed limit.
        :param pulumi.Input[_builtins.str] migrate_type: Indicates the migration method.
        :param pulumi.Input[_builtins.str] migration_ip: Specifies the IP address of the target server.
               Use the EIP of the target server if the migration network type is Internet.
               Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] need_migration_test: Specifies whether migration drilling is enabled. Defaults to
               **false**.
        :param pulumi.Input[_builtins.str] os_type: Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.float] over_speed_threshold: Specifies the overspeed threshold for stopping migration, the unit is percentage.
               
               <a name="configurations_struct"></a>
               The `configurations` block supports:
        :param pulumi.Input[_builtins.str] passphrase: Indicates the certificate passphrase of the secure transmission channel.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID where the target server is located.
               If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
               
               <a name="speed_limit_struct"></a>
               The `speed_limit` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region where the target server is located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_server_id: Specifies the ID of the source server.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskSpeedLimitArgs', 'TaskSpeedLimitArgsDict']]]] speed_limits: Specifies the information about the time period-based rate limiting rules.
               The speed_limit structure is documented below.
        :param pulumi.Input[_builtins.bool] start_network_check: Specifies whether to measure the network performance. Defaults
               to **false**.
        :param pulumi.Input[_builtins.bool] start_target_server: Specifies whether to start the target server after the migration.
               The default value is `true`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] state: Indicates the status of the migration task.
        :param pulumi.Input[_builtins.bool] syncing: Specifies whether to perform a continuous synchronization after the first replication.
               The default value is `false`. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskTargetServerDiskArgs', 'TaskTargetServerDiskArgsDict']]]] target_server_disks: Specifies the disk configurations of the target server.
               If omitted, it will be obtained from the source server. The object
               is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_server_id: Specifies the existing server ID as the target server.
               This parameter and `vm_template_id` are alternative. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_server_name: Indicates the name of the target server.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the migration task. Available values are
               **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
               Changing this parameter will create a new resource.
               
               + For Linux servers, SMS supports block-level and file-level migrations. Block-level migration has
               high efficiency but poor compatibility while file-level migration has low efficiency but excellent compatibility.
               + For Windows servers, SMS only supports highly efficient block-level migration.
        :param pulumi.Input[_builtins.bool] use_ipv6: Specifies whether to use IPv6. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] use_public_ip: Specifies whether to use a public IP address for migration.
               The default value is `true`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] vm_template_id: Specifies the template used to create the target server automatically.
               This parameter and `target_server_id` are alternative. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TaskState.__new__(_TaskState)

        __props__.__dict__["action"] = action
        __props__.__dict__["auto_start"] = auto_start
        __props__.__dict__["configurations"] = configurations
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["is_need_consistency_check"] = is_need_consistency_check
        __props__.__dict__["migrate_speed"] = migrate_speed
        __props__.__dict__["migrate_speed_limit"] = migrate_speed_limit
        __props__.__dict__["migrate_type"] = migrate_type
        __props__.__dict__["migration_ip"] = migration_ip
        __props__.__dict__["need_migration_test"] = need_migration_test
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["over_speed_threshold"] = over_speed_threshold
        __props__.__dict__["passphrase"] = passphrase
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["source_server_id"] = source_server_id
        __props__.__dict__["speed_limits"] = speed_limits
        __props__.__dict__["start_network_check"] = start_network_check
        __props__.__dict__["start_target_server"] = start_target_server
        __props__.__dict__["state"] = state
        __props__.__dict__["syncing"] = syncing
        __props__.__dict__["target_server_disks"] = target_server_disks
        __props__.__dict__["target_server_id"] = target_server_id
        __props__.__dict__["target_server_name"] = target_server_name
        __props__.__dict__["type"] = type
        __props__.__dict__["use_ipv6"] = use_ipv6
        __props__.__dict__["use_public_ip"] = use_public_ip
        __props__.__dict__["vm_template_id"] = vm_template_id
        return Task(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the operation after the task is created.
        The value can be **start**, **stop** and **restart**.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="autoStart")
    def auto_start(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to automatically start the migration. Defaults to **false**.
        """
        return pulumi.get(self, "auto_start")

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> pulumi.Output[Optional[Sequence['outputs.TaskConfiguration']]]:
        """
        Specifies the settings of advanced migration options.
        The configurations structure is documented below.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the enterprise project id of the target server.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="isNeedConsistencyCheck")
    def is_need_consistency_check(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether consistency verification is enabled.
        Defaults to **false**.
        """
        return pulumi.get(self, "is_need_consistency_check")

    @_builtins.property
    @pulumi.getter(name="migrateSpeed")
    def migrate_speed(self) -> pulumi.Output[_builtins.float]:
        """
        Indicates the migration rate, in MB/s.
        """
        return pulumi.get(self, "migrate_speed")

    @_builtins.property
    @pulumi.getter(name="migrateSpeedLimit")
    def migrate_speed_limit(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the migration speed limit.
        """
        return pulumi.get(self, "migrate_speed_limit")

    @_builtins.property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the migration method.
        """
        return pulumi.get(self, "migrate_type")

    @_builtins.property
    @pulumi.getter(name="migrationIp")
    def migration_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the IP address of the target server.
        Use the EIP of the target server if the migration network type is Internet.
        Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "migration_ip")

    @_builtins.property
    @pulumi.getter(name="needMigrationTest")
    def need_migration_test(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether migration drilling is enabled. Defaults to
        **false**.
        """
        return pulumi.get(self, "need_migration_test")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="overSpeedThreshold")
    def over_speed_threshold(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Specifies the overspeed threshold for stopping migration, the unit is percentage.

        <a name="configurations_struct"></a>
        The `configurations` block supports:
        """
        return pulumi.get(self, "over_speed_threshold")

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the certificate passphrase of the secure transmission channel.
        """
        return pulumi.get(self, "passphrase")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the project ID where the target server is located.
        If omitted, the default project in the region will be used. Changing this parameter will create a new resource.

        <a name="speed_limit_struct"></a>
        The `speed_limit` block supports:
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the target server is located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the source server.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_server_id")

    @_builtins.property
    @pulumi.getter(name="speedLimits")
    def speed_limits(self) -> pulumi.Output[Optional[Sequence['outputs.TaskSpeedLimit']]]:
        """
        Specifies the information about the time period-based rate limiting rules.
        The speed_limit structure is documented below.
        """
        return pulumi.get(self, "speed_limits")

    @_builtins.property
    @pulumi.getter(name="startNetworkCheck")
    def start_network_check(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to measure the network performance. Defaults
        to **false**.
        """
        return pulumi.get(self, "start_network_check")

    @_builtins.property
    @pulumi.getter(name="startTargetServer")
    def start_target_server(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to start the target server after the migration.
        The default value is `true`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "start_target_server")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the migration task.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def syncing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to perform a continuous synchronization after the first replication.
        The default value is `false`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "syncing")

    @_builtins.property
    @pulumi.getter(name="targetServerDisks")
    def target_server_disks(self) -> pulumi.Output[Sequence['outputs.TaskTargetServerDisk']]:
        """
        Specifies the disk configurations of the target server.
        If omitted, it will be obtained from the source server. The object
        is documented below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_server_disks")

    @_builtins.property
    @pulumi.getter(name="targetServerId")
    def target_server_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the existing server ID as the target server.
        This parameter and `vm_template_id` are alternative. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_server_id")

    @_builtins.property
    @pulumi.getter(name="targetServerName")
    def target_server_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the name of the target server.
        """
        return pulumi.get(self, "target_server_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the migration task. Available values are
        **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
        Changing this parameter will create a new resource.

        + For Linux servers, SMS supports block-level and file-level migrations. Block-level migration has
        high efficiency but poor compatibility while file-level migration has low efficiency but excellent compatibility.
        + For Windows servers, SMS only supports highly efficient block-level migration.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="useIpv6")
    def use_ipv6(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to use IPv6. Defaults to **false**.
        """
        return pulumi.get(self, "use_ipv6")

    @_builtins.property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to use a public IP address for migration.
        The default value is `true`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "use_public_ip")

    @_builtins.property
    @pulumi.getter(name="vmTemplateId")
    def vm_template_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the template used to create the target server automatically.
        This parameter and `target_server_id` are alternative. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vm_template_id")

