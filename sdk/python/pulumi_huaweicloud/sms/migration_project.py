# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MigrationProjectArgs', 'MigrationProject']

@pulumi.input_type
class MigrationProjectArgs:
    def __init__(__self__, *,
                 exist_server: pulumi.Input[_builtins.bool],
                 region: pulumi.Input[_builtins.str],
                 syncing: pulumi.Input[_builtins.bool],
                 type: pulumi.Input[_builtins.str],
                 use_public_ip: pulumi.Input[_builtins.bool],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project: Optional[pulumi.Input[_builtins.str]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 start_network_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_target_server: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a MigrationProject resource.
        :param pulumi.Input[_builtins.bool] exist_server: Specifies whether the server already exists.
        :param pulumi.Input[_builtins.str] region: Specifies the region name.
        :param pulumi.Input[_builtins.bool] syncing: Specifies whether to continue syncing after the first copy or sync.
        :param pulumi.Input[_builtins.str] type: Specifies the migration project type.
               Values can be as follows:
               + **MIGRATE_BLOCK**: Block-level migration.
               + **MIGRATE_FILE**: File-level migration.
        :param pulumi.Input[_builtins.bool] use_public_ip: Specifies whether to use a public IP address for migration.
        :param pulumi.Input[_builtins.str] description: Specifies the migration project description.
        :param pulumi.Input[_builtins.str] enterprise_project: Specifies the name of the enterprise project. Defaults to **default**.
        :param pulumi.Input[_builtins.bool] is_default: Specifies whether to use the default template. Defaults to **false**.
               
               > Only support to update from **false** to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the migration project name.
        :param pulumi.Input[_builtins.int] speed_limit: Specifies the migration rate limit in Mbps. Defaults to **0**.
        :param pulumi.Input[_builtins.bool] start_network_check: Specifies whether to enable network quality detection. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] start_target_server: Specifies whether to start the destination virtual machine after migration.
               Defaults to **false**.
        """
        pulumi.set(__self__, "exist_server", exist_server)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "syncing", syncing)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "use_public_ip", use_public_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project is not None:
            pulumi.set(__self__, "enterprise_project", enterprise_project)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if speed_limit is not None:
            pulumi.set(__self__, "speed_limit", speed_limit)
        if start_network_check is not None:
            pulumi.set(__self__, "start_network_check", start_network_check)
        if start_target_server is not None:
            pulumi.set(__self__, "start_target_server", start_target_server)

    @_builtins.property
    @pulumi.getter(name="existServer")
    def exist_server(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the server already exists.
        """
        return pulumi.get(self, "exist_server")

    @exist_server.setter
    def exist_server(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "exist_server", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the region name.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def syncing(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to continue syncing after the first copy or sync.
        """
        return pulumi.get(self, "syncing")

    @syncing.setter
    def syncing(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "syncing", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the migration project type.
        Values can be as follows:
        + **MIGRATE_BLOCK**: Block-level migration.
        + **MIGRATE_FILE**: File-level migration.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to use a public IP address for migration.
        """
        return pulumi.get(self, "use_public_ip")

    @use_public_ip.setter
    def use_public_ip(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "use_public_ip", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the migration project description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProject")
    def enterprise_project(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the enterprise project. Defaults to **default**.
        """
        return pulumi.get(self, "enterprise_project")

    @enterprise_project.setter
    def enterprise_project(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use the default template. Defaults to **false**.

        > Only support to update from **false** to **true**.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the migration project name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="speedLimit")
    def speed_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the migration rate limit in Mbps. Defaults to **0**.
        """
        return pulumi.get(self, "speed_limit")

    @speed_limit.setter
    def speed_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "speed_limit", value)

    @_builtins.property
    @pulumi.getter(name="startNetworkCheck")
    def start_network_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable network quality detection. Defaults to **false**.
        """
        return pulumi.get(self, "start_network_check")

    @start_network_check.setter
    def start_network_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_network_check", value)

    @_builtins.property
    @pulumi.getter(name="startTargetServer")
    def start_target_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to start the destination virtual machine after migration.
        Defaults to **false**.
        """
        return pulumi.get(self, "start_target_server")

    @start_target_server.setter
    def start_target_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_target_server", value)


@pulumi.input_type
class _MigrationProjectState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project: Optional[pulumi.Input[_builtins.str]] = None,
                 exist_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 start_network_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_target_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 syncing: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_public_ip: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering MigrationProject resources.
        :param pulumi.Input[_builtins.str] description: Specifies the migration project description.
        :param pulumi.Input[_builtins.str] enterprise_project: Specifies the name of the enterprise project. Defaults to **default**.
        :param pulumi.Input[_builtins.bool] exist_server: Specifies whether the server already exists.
        :param pulumi.Input[_builtins.bool] is_default: Specifies whether to use the default template. Defaults to **false**.
               
               > Only support to update from **false** to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the migration project name.
        :param pulumi.Input[_builtins.str] region: Specifies the region name.
        :param pulumi.Input[_builtins.int] speed_limit: Specifies the migration rate limit in Mbps. Defaults to **0**.
        :param pulumi.Input[_builtins.bool] start_network_check: Specifies whether to enable network quality detection. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] start_target_server: Specifies whether to start the destination virtual machine after migration.
               Defaults to **false**.
        :param pulumi.Input[_builtins.bool] syncing: Specifies whether to continue syncing after the first copy or sync.
        :param pulumi.Input[_builtins.str] type: Specifies the migration project type.
               Values can be as follows:
               + **MIGRATE_BLOCK**: Block-level migration.
               + **MIGRATE_FILE**: File-level migration.
        :param pulumi.Input[_builtins.bool] use_public_ip: Specifies whether to use a public IP address for migration.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project is not None:
            pulumi.set(__self__, "enterprise_project", enterprise_project)
        if exist_server is not None:
            pulumi.set(__self__, "exist_server", exist_server)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if speed_limit is not None:
            pulumi.set(__self__, "speed_limit", speed_limit)
        if start_network_check is not None:
            pulumi.set(__self__, "start_network_check", start_network_check)
        if start_target_server is not None:
            pulumi.set(__self__, "start_target_server", start_target_server)
        if syncing is not None:
            pulumi.set(__self__, "syncing", syncing)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_public_ip is not None:
            pulumi.set(__self__, "use_public_ip", use_public_ip)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the migration project description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProject")
    def enterprise_project(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the enterprise project. Defaults to **default**.
        """
        return pulumi.get(self, "enterprise_project")

    @enterprise_project.setter
    def enterprise_project(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project", value)

    @_builtins.property
    @pulumi.getter(name="existServer")
    def exist_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the server already exists.
        """
        return pulumi.get(self, "exist_server")

    @exist_server.setter
    def exist_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exist_server", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use the default template. Defaults to **false**.

        > Only support to update from **false** to **true**.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the migration project name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region name.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="speedLimit")
    def speed_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the migration rate limit in Mbps. Defaults to **0**.
        """
        return pulumi.get(self, "speed_limit")

    @speed_limit.setter
    def speed_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "speed_limit", value)

    @_builtins.property
    @pulumi.getter(name="startNetworkCheck")
    def start_network_check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable network quality detection. Defaults to **false**.
        """
        return pulumi.get(self, "start_network_check")

    @start_network_check.setter
    def start_network_check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_network_check", value)

    @_builtins.property
    @pulumi.getter(name="startTargetServer")
    def start_target_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to start the destination virtual machine after migration.
        Defaults to **false**.
        """
        return pulumi.get(self, "start_target_server")

    @start_target_server.setter
    def start_target_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_target_server", value)

    @_builtins.property
    @pulumi.getter
    def syncing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to continue syncing after the first copy or sync.
        """
        return pulumi.get(self, "syncing")

    @syncing.setter
    def syncing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "syncing", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the migration project type.
        Values can be as follows:
        + **MIGRATE_BLOCK**: Block-level migration.
        + **MIGRATE_FILE**: File-level migration.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use a public IP address for migration.
        """
        return pulumi.get(self, "use_public_ip")

    @use_public_ip.setter
    def use_public_ip(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_public_ip", value)


@pulumi.type_token("huaweicloud:Sms/migrationProject:MigrationProject")
class MigrationProject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project: Optional[pulumi.Input[_builtins.str]] = None,
                 exist_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 start_network_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_target_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 syncing: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_public_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Manages an SMS migration project resource within HuaweiCloud.

        > Migration project can only be destroyed when it is not the default project.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_name = config.require_object("projectName")
        test = huaweicloud.sms.MigrationProject("test",
            name=project_name,
            region="cn-north-9",
            use_public_ip=True,
            exist_server=True,
            type="MIGRATE_BLOCK",
            syncing=True)
        ```

        ## Import

        SMS migration projects can be imported by `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Sms/migrationProject:MigrationProject demo <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the migration project description.
        :param pulumi.Input[_builtins.str] enterprise_project: Specifies the name of the enterprise project. Defaults to **default**.
        :param pulumi.Input[_builtins.bool] exist_server: Specifies whether the server already exists.
        :param pulumi.Input[_builtins.bool] is_default: Specifies whether to use the default template. Defaults to **false**.
               
               > Only support to update from **false** to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the migration project name.
        :param pulumi.Input[_builtins.str] region: Specifies the region name.
        :param pulumi.Input[_builtins.int] speed_limit: Specifies the migration rate limit in Mbps. Defaults to **0**.
        :param pulumi.Input[_builtins.bool] start_network_check: Specifies whether to enable network quality detection. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] start_target_server: Specifies whether to start the destination virtual machine after migration.
               Defaults to **false**.
        :param pulumi.Input[_builtins.bool] syncing: Specifies whether to continue syncing after the first copy or sync.
        :param pulumi.Input[_builtins.str] type: Specifies the migration project type.
               Values can be as follows:
               + **MIGRATE_BLOCK**: Block-level migration.
               + **MIGRATE_FILE**: File-level migration.
        :param pulumi.Input[_builtins.bool] use_public_ip: Specifies whether to use a public IP address for migration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MigrationProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an SMS migration project resource within HuaweiCloud.

        > Migration project can only be destroyed when it is not the default project.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_name = config.require_object("projectName")
        test = huaweicloud.sms.MigrationProject("test",
            name=project_name,
            region="cn-north-9",
            use_public_ip=True,
            exist_server=True,
            type="MIGRATE_BLOCK",
            syncing=True)
        ```

        ## Import

        SMS migration projects can be imported by `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Sms/migrationProject:MigrationProject demo <id>
        ```

        :param str resource_name: The name of the resource.
        :param MigrationProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MigrationProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project: Optional[pulumi.Input[_builtins.str]] = None,
                 exist_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 start_network_check: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_target_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 syncing: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_public_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MigrationProjectArgs.__new__(MigrationProjectArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project"] = enterprise_project
            if exist_server is None and not opts.urn:
                raise TypeError("Missing required property 'exist_server'")
            __props__.__dict__["exist_server"] = exist_server
            __props__.__dict__["is_default"] = is_default
            __props__.__dict__["name"] = name
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["speed_limit"] = speed_limit
            __props__.__dict__["start_network_check"] = start_network_check
            __props__.__dict__["start_target_server"] = start_target_server
            if syncing is None and not opts.urn:
                raise TypeError("Missing required property 'syncing'")
            __props__.__dict__["syncing"] = syncing
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if use_public_ip is None and not opts.urn:
                raise TypeError("Missing required property 'use_public_ip'")
            __props__.__dict__["use_public_ip"] = use_public_ip
        super(MigrationProject, __self__).__init__(
            'huaweicloud:Sms/migrationProject:MigrationProject',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project: Optional[pulumi.Input[_builtins.str]] = None,
            exist_server: Optional[pulumi.Input[_builtins.bool]] = None,
            is_default: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            speed_limit: Optional[pulumi.Input[_builtins.int]] = None,
            start_network_check: Optional[pulumi.Input[_builtins.bool]] = None,
            start_target_server: Optional[pulumi.Input[_builtins.bool]] = None,
            syncing: Optional[pulumi.Input[_builtins.bool]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            use_public_ip: Optional[pulumi.Input[_builtins.bool]] = None) -> 'MigrationProject':
        """
        Get an existing MigrationProject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the migration project description.
        :param pulumi.Input[_builtins.str] enterprise_project: Specifies the name of the enterprise project. Defaults to **default**.
        :param pulumi.Input[_builtins.bool] exist_server: Specifies whether the server already exists.
        :param pulumi.Input[_builtins.bool] is_default: Specifies whether to use the default template. Defaults to **false**.
               
               > Only support to update from **false** to **true**.
        :param pulumi.Input[_builtins.str] name: Specifies the migration project name.
        :param pulumi.Input[_builtins.str] region: Specifies the region name.
        :param pulumi.Input[_builtins.int] speed_limit: Specifies the migration rate limit in Mbps. Defaults to **0**.
        :param pulumi.Input[_builtins.bool] start_network_check: Specifies whether to enable network quality detection. Defaults to **false**.
        :param pulumi.Input[_builtins.bool] start_target_server: Specifies whether to start the destination virtual machine after migration.
               Defaults to **false**.
        :param pulumi.Input[_builtins.bool] syncing: Specifies whether to continue syncing after the first copy or sync.
        :param pulumi.Input[_builtins.str] type: Specifies the migration project type.
               Values can be as follows:
               + **MIGRATE_BLOCK**: Block-level migration.
               + **MIGRATE_FILE**: File-level migration.
        :param pulumi.Input[_builtins.bool] use_public_ip: Specifies whether to use a public IP address for migration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MigrationProjectState.__new__(_MigrationProjectState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project"] = enterprise_project
        __props__.__dict__["exist_server"] = exist_server
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["speed_limit"] = speed_limit
        __props__.__dict__["start_network_check"] = start_network_check
        __props__.__dict__["start_target_server"] = start_target_server
        __props__.__dict__["syncing"] = syncing
        __props__.__dict__["type"] = type
        __props__.__dict__["use_public_ip"] = use_public_ip
        return MigrationProject(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the migration project description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProject")
    def enterprise_project(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the enterprise project. Defaults to **default**.
        """
        return pulumi.get(self, "enterprise_project")

    @_builtins.property
    @pulumi.getter(name="existServer")
    def exist_server(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the server already exists.
        """
        return pulumi.get(self, "exist_server")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to use the default template. Defaults to **false**.

        > Only support to update from **false** to **true**.
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the migration project name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region name.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="speedLimit")
    def speed_limit(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the migration rate limit in Mbps. Defaults to **0**.
        """
        return pulumi.get(self, "speed_limit")

    @_builtins.property
    @pulumi.getter(name="startNetworkCheck")
    def start_network_check(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable network quality detection. Defaults to **false**.
        """
        return pulumi.get(self, "start_network_check")

    @_builtins.property
    @pulumi.getter(name="startTargetServer")
    def start_target_server(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to start the destination virtual machine after migration.
        Defaults to **false**.
        """
        return pulumi.get(self, "start_target_server")

    @_builtins.property
    @pulumi.getter
    def syncing(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to continue syncing after the first copy or sync.
        """
        return pulumi.get(self, "syncing")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the migration project type.
        Values can be as follows:
        + **MIGRATE_BLOCK**: Block-level migration.
        + **MIGRATE_FILE**: File-level migration.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to use a public IP address for migration.
        """
        return pulumi.get(self, "use_public_ip")

