# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TaskConsistencyResultReportArgs', 'TaskConsistencyResultReport']

@pulumi.input_type
class TaskConsistencyResultReportArgs:
    def __init__(__self__, *,
                 task_id: pulumi.Input[_builtins.str],
                 consistency_results: Optional[pulumi.Input[Sequence[pulumi.Input['TaskConsistencyResultReportConsistencyResultArgs']]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TaskConsistencyResultReport resource.
        :param pulumi.Input[_builtins.str] task_id: Specifies the task ID.
        :param pulumi.Input[Sequence[pulumi.Input['TaskConsistencyResultReportConsistencyResultArgs']]] consistency_results: Specifies the consistency verification results.
               The consistency_result structure is documented below.
               
               <a name="consistency_result_struct"></a>
               The `consistency_result` block supports:
        """
        pulumi.set(__self__, "task_id", task_id)
        if consistency_results is not None:
            pulumi.set(__self__, "consistency_results", consistency_results)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter(name="consistencyResults")
    def consistency_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskConsistencyResultReportConsistencyResultArgs']]]]:
        """
        Specifies the consistency verification results.
        The consistency_result structure is documented below.

        <a name="consistency_result_struct"></a>
        The `consistency_result` block supports:
        """
        return pulumi.get(self, "consistency_results")

    @consistency_results.setter
    def consistency_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskConsistencyResultReportConsistencyResultArgs']]]]):
        pulumi.set(self, "consistency_results", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)


@pulumi.input_type
class _TaskConsistencyResultReportState:
    def __init__(__self__, *,
                 consistency_results: Optional[pulumi.Input[Sequence[pulumi.Input['TaskConsistencyResultReportConsistencyResultArgs']]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TaskConsistencyResultReport resources.
        :param pulumi.Input[Sequence[pulumi.Input['TaskConsistencyResultReportConsistencyResultArgs']]] consistency_results: Specifies the consistency verification results.
               The consistency_result structure is documented below.
               
               <a name="consistency_result_struct"></a>
               The `consistency_result` block supports:
        :param pulumi.Input[_builtins.str] task_id: Specifies the task ID.
        """
        if consistency_results is not None:
            pulumi.set(__self__, "consistency_results", consistency_results)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter(name="consistencyResults")
    def consistency_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskConsistencyResultReportConsistencyResultArgs']]]]:
        """
        Specifies the consistency verification results.
        The consistency_result structure is documented below.

        <a name="consistency_result_struct"></a>
        The `consistency_result` block supports:
        """
        return pulumi.get(self, "consistency_results")

    @consistency_results.setter
    def consistency_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskConsistencyResultReportConsistencyResultArgs']]]]):
        pulumi.set(self, "consistency_results", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_id", value)


@pulumi.type_token("huaweicloud:Sms/taskConsistencyResultReport:TaskConsistencyResultReport")
class TaskConsistencyResultReport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consistency_results: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskConsistencyResultReportConsistencyResultArgs', 'TaskConsistencyResultReportConsistencyResultArgsDict']]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an SMS task consistency result report resource within HuaweiCloud.

        > Deleting task consistency result report resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_id = config.require_object("taskId")
        test = huaweicloud.sms.TaskConsistencyResultReport("test",
            task_id=task_id,
            consistency_results=[{
                "dir_check": "/root/dev",
                "num_total_files": 1,
                "num_different_files": 1,
                "num_target_miss_files": 1,
                "num_target_more_files": 1,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskConsistencyResultReportConsistencyResultArgs', 'TaskConsistencyResultReportConsistencyResultArgsDict']]]] consistency_results: Specifies the consistency verification results.
               The consistency_result structure is documented below.
               
               <a name="consistency_result_struct"></a>
               The `consistency_result` block supports:
        :param pulumi.Input[_builtins.str] task_id: Specifies the task ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TaskConsistencyResultReportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an SMS task consistency result report resource within HuaweiCloud.

        > Deleting task consistency result report resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_id = config.require_object("taskId")
        test = huaweicloud.sms.TaskConsistencyResultReport("test",
            task_id=task_id,
            consistency_results=[{
                "dir_check": "/root/dev",
                "num_total_files": 1,
                "num_different_files": 1,
                "num_target_miss_files": 1,
                "num_target_more_files": 1,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param TaskConsistencyResultReportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TaskConsistencyResultReportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consistency_results: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskConsistencyResultReportConsistencyResultArgs', 'TaskConsistencyResultReportConsistencyResultArgsDict']]]]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TaskConsistencyResultReportArgs.__new__(TaskConsistencyResultReportArgs)

            __props__.__dict__["consistency_results"] = consistency_results
            __props__.__dict__["enable_force_new"] = enable_force_new
            if task_id is None and not opts.urn:
                raise TypeError("Missing required property 'task_id'")
            __props__.__dict__["task_id"] = task_id
        super(TaskConsistencyResultReport, __self__).__init__(
            'huaweicloud:Sms/taskConsistencyResultReport:TaskConsistencyResultReport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            consistency_results: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskConsistencyResultReportConsistencyResultArgs', 'TaskConsistencyResultReportConsistencyResultArgsDict']]]]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            task_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'TaskConsistencyResultReport':
        """
        Get an existing TaskConsistencyResultReport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskConsistencyResultReportConsistencyResultArgs', 'TaskConsistencyResultReportConsistencyResultArgsDict']]]] consistency_results: Specifies the consistency verification results.
               The consistency_result structure is documented below.
               
               <a name="consistency_result_struct"></a>
               The `consistency_result` block supports:
        :param pulumi.Input[_builtins.str] task_id: Specifies the task ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TaskConsistencyResultReportState.__new__(_TaskConsistencyResultReportState)

        __props__.__dict__["consistency_results"] = consistency_results
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["task_id"] = task_id
        return TaskConsistencyResultReport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="consistencyResults")
    def consistency_results(self) -> pulumi.Output[Optional[Sequence['outputs.TaskConsistencyResultReportConsistencyResult']]]:
        """
        Specifies the consistency verification results.
        The consistency_result structure is documented below.

        <a name="consistency_result_struct"></a>
        The `consistency_result` block supports:
        """
        return pulumi.get(self, "consistency_results")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "task_id")

