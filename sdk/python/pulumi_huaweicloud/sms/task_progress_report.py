# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['TaskProgressReportArgs', 'TaskProgressReport']

@pulumi.input_type
class TaskProgressReportArgs:
    def __init__(__self__, *,
                 process_trace: pulumi.Input[_builtins.str],
                 progress: pulumi.Input[_builtins.int],
                 replicatesize: pulumi.Input[_builtins.int],
                 subtask_name: pulumi.Input[_builtins.str],
                 task_id: pulumi.Input[_builtins.str],
                 totalsize: pulumi.Input[_builtins.int],
                 agent_cpu_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_disk_io: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_mem_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_time: Optional[pulumi.Input[_builtins.str]] = None,
                 compress_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 need_migration_test: Optional[pulumi.Input[_builtins.bool]] = None,
                 remain_time: Optional[pulumi.Input[_builtins.int]] = None,
                 total_cpu_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 total_disk_io: Optional[pulumi.Input[_builtins.int]] = None,
                 total_mem_usage: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a TaskProgressReport resource.
        :param pulumi.Input[_builtins.str] process_trace: Specifies the detailed progress of the migration or synchronization.
        :param pulumi.Input[_builtins.int] progress: Specifies the progress of the subtask, the unit is percentage.
        :param pulumi.Input[_builtins.int] replicatesize: Specifies the amount of data that has been replicated in the subtask,
               the unit is bytes.
        :param pulumi.Input[_builtins.str] subtask_name: Specifies the name of the subtask whose progress is reported.
               Values can be as follows:
               + **CREATE_CLOUD_SERVER**: creating a new server.
               + **SSL_CONFIG**: configuring a secure channel.
               + **ATTACH_AGENT_IMAGE**: attaching the disk that hosts the agent image.
               + **DETTACH_AGENT_IMAGE**: detaching the disk that hosts the agent image.
               + **FORMAT_DISK_LINUX**: formatting partitions on Linux.
               + **FORMAT_DISK_LINUX_FILE**: formatting partitions on Linux for a file-level migration.
               + **FORMAT_DISK_LINUX_BLOCK**: formatting partitions on Linux for a block-level migration.
               + **FORMAT_DISK_WINDOWS**: formatting partitions on Windows.
               + **MIGRATE_LINUX_FILE**: replicating files on Linux.
               + **MIGRATE_LINUX_BLOCK**: replicating blocks on Linux.
               + **MIGRATE_WINDOWS_BLOCK**: replicating blocks on Windows.
               + **CLONE_VM**: cloning the target server.
               + **SYNC_LINUX_FILE**: synchronizing files on Linux.
               + **SYNC_LINUX_BLOCK**: synchronizing blocks on Linux.
               + **SYNC_WINDOWS_BLOCK**: synchronizing blocks on Windows.
               + **CONFIGURE_LINUX**: modifying system configurations on Linux.
               + **CONFIGURE_LINUX_BLOCK**: modifying system configurations on Linux for a block-level migration.
               + **CONFIGURE_LINUX_FILE**: modifying system configurations on Linux for a file-level migration.
               + **CONFIGURE_WINDOWS**: modifying system configurations on Windows.
        :param pulumi.Input[_builtins.str] task_id: Specifies the migration task ID.
        :param pulumi.Input[_builtins.int] totalsize: Specifies the total amount of data to be migrated in the subtask.
        :param pulumi.Input[_builtins.int] agent_cpu_usage: Specifies the CPU usage of the agent, the unit is percentage.
        :param pulumi.Input[_builtins.int] agent_disk_io: Specifies the disk I/O of the agent, the unit is MB/s.
        :param pulumi.Input[_builtins.int] agent_mem_usage: Specifies the memory usage of the agent, the unit is MB.
        :param pulumi.Input[_builtins.str] agent_time: Specifies the current local time of the source server, which is used
               for overspeed detection.
        :param pulumi.Input[_builtins.int] compress_rate: Specifies the file compression rate.
        :param pulumi.Input[_builtins.int] migrate_speed: Specifies the migration rate, the unit is Mbit/s.
        :param pulumi.Input[_builtins.bool] need_migration_test: Specifies whether migration drilling is enabled.
        :param pulumi.Input[_builtins.int] remain_time: Specifies the remaining time.
        :param pulumi.Input[_builtins.int] total_cpu_usage: Specifies the CPU usage of the server, the unit is percentage.
        :param pulumi.Input[_builtins.int] total_disk_io: Specifies the disk I/O of the server, the unit is MB/s.
        :param pulumi.Input[_builtins.int] total_mem_usage: Specifies the memory usage of the server, the unit is MB.
        """
        pulumi.set(__self__, "process_trace", process_trace)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "replicatesize", replicatesize)
        pulumi.set(__self__, "subtask_name", subtask_name)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "totalsize", totalsize)
        if agent_cpu_usage is not None:
            pulumi.set(__self__, "agent_cpu_usage", agent_cpu_usage)
        if agent_disk_io is not None:
            pulumi.set(__self__, "agent_disk_io", agent_disk_io)
        if agent_mem_usage is not None:
            pulumi.set(__self__, "agent_mem_usage", agent_mem_usage)
        if agent_time is not None:
            pulumi.set(__self__, "agent_time", agent_time)
        if compress_rate is not None:
            pulumi.set(__self__, "compress_rate", compress_rate)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if migrate_speed is not None:
            pulumi.set(__self__, "migrate_speed", migrate_speed)
        if need_migration_test is not None:
            pulumi.set(__self__, "need_migration_test", need_migration_test)
        if remain_time is not None:
            pulumi.set(__self__, "remain_time", remain_time)
        if total_cpu_usage is not None:
            pulumi.set(__self__, "total_cpu_usage", total_cpu_usage)
        if total_disk_io is not None:
            pulumi.set(__self__, "total_disk_io", total_disk_io)
        if total_mem_usage is not None:
            pulumi.set(__self__, "total_mem_usage", total_mem_usage)

    @_builtins.property
    @pulumi.getter(name="processTrace")
    def process_trace(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the detailed progress of the migration or synchronization.
        """
        return pulumi.get(self, "process_trace")

    @process_trace.setter
    def process_trace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "process_trace", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the progress of the subtask, the unit is percentage.
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter
    def replicatesize(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the amount of data that has been replicated in the subtask,
        the unit is bytes.
        """
        return pulumi.get(self, "replicatesize")

    @replicatesize.setter
    def replicatesize(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "replicatesize", value)

    @_builtins.property
    @pulumi.getter(name="subtaskName")
    def subtask_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the subtask whose progress is reported.
        Values can be as follows:
        + **CREATE_CLOUD_SERVER**: creating a new server.
        + **SSL_CONFIG**: configuring a secure channel.
        + **ATTACH_AGENT_IMAGE**: attaching the disk that hosts the agent image.
        + **DETTACH_AGENT_IMAGE**: detaching the disk that hosts the agent image.
        + **FORMAT_DISK_LINUX**: formatting partitions on Linux.
        + **FORMAT_DISK_LINUX_FILE**: formatting partitions on Linux for a file-level migration.
        + **FORMAT_DISK_LINUX_BLOCK**: formatting partitions on Linux for a block-level migration.
        + **FORMAT_DISK_WINDOWS**: formatting partitions on Windows.
        + **MIGRATE_LINUX_FILE**: replicating files on Linux.
        + **MIGRATE_LINUX_BLOCK**: replicating blocks on Linux.
        + **MIGRATE_WINDOWS_BLOCK**: replicating blocks on Windows.
        + **CLONE_VM**: cloning the target server.
        + **SYNC_LINUX_FILE**: synchronizing files on Linux.
        + **SYNC_LINUX_BLOCK**: synchronizing blocks on Linux.
        + **SYNC_WINDOWS_BLOCK**: synchronizing blocks on Windows.
        + **CONFIGURE_LINUX**: modifying system configurations on Linux.
        + **CONFIGURE_LINUX_BLOCK**: modifying system configurations on Linux for a block-level migration.
        + **CONFIGURE_LINUX_FILE**: modifying system configurations on Linux for a file-level migration.
        + **CONFIGURE_WINDOWS**: modifying system configurations on Windows.
        """
        return pulumi.get(self, "subtask_name")

    @subtask_name.setter
    def subtask_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subtask_name", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the migration task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter
    def totalsize(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the total amount of data to be migrated in the subtask.
        """
        return pulumi.get(self, "totalsize")

    @totalsize.setter
    def totalsize(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "totalsize", value)

    @_builtins.property
    @pulumi.getter(name="agentCpuUsage")
    def agent_cpu_usage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the CPU usage of the agent, the unit is percentage.
        """
        return pulumi.get(self, "agent_cpu_usage")

    @agent_cpu_usage.setter
    def agent_cpu_usage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "agent_cpu_usage", value)

    @_builtins.property
    @pulumi.getter(name="agentDiskIo")
    def agent_disk_io(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the disk I/O of the agent, the unit is MB/s.
        """
        return pulumi.get(self, "agent_disk_io")

    @agent_disk_io.setter
    def agent_disk_io(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "agent_disk_io", value)

    @_builtins.property
    @pulumi.getter(name="agentMemUsage")
    def agent_mem_usage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the memory usage of the agent, the unit is MB.
        """
        return pulumi.get(self, "agent_mem_usage")

    @agent_mem_usage.setter
    def agent_mem_usage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "agent_mem_usage", value)

    @_builtins.property
    @pulumi.getter(name="agentTime")
    def agent_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the current local time of the source server, which is used
        for overspeed detection.
        """
        return pulumi.get(self, "agent_time")

    @agent_time.setter
    def agent_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_time", value)

    @_builtins.property
    @pulumi.getter(name="compressRate")
    def compress_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the file compression rate.
        """
        return pulumi.get(self, "compress_rate")

    @compress_rate.setter
    def compress_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "compress_rate", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="migrateSpeed")
    def migrate_speed(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the migration rate, the unit is Mbit/s.
        """
        return pulumi.get(self, "migrate_speed")

    @migrate_speed.setter
    def migrate_speed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "migrate_speed", value)

    @_builtins.property
    @pulumi.getter(name="needMigrationTest")
    def need_migration_test(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether migration drilling is enabled.
        """
        return pulumi.get(self, "need_migration_test")

    @need_migration_test.setter
    def need_migration_test(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "need_migration_test", value)

    @_builtins.property
    @pulumi.getter(name="remainTime")
    def remain_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the remaining time.
        """
        return pulumi.get(self, "remain_time")

    @remain_time.setter
    def remain_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remain_time", value)

    @_builtins.property
    @pulumi.getter(name="totalCpuUsage")
    def total_cpu_usage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the CPU usage of the server, the unit is percentage.
        """
        return pulumi.get(self, "total_cpu_usage")

    @total_cpu_usage.setter
    def total_cpu_usage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "total_cpu_usage", value)

    @_builtins.property
    @pulumi.getter(name="totalDiskIo")
    def total_disk_io(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the disk I/O of the server, the unit is MB/s.
        """
        return pulumi.get(self, "total_disk_io")

    @total_disk_io.setter
    def total_disk_io(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "total_disk_io", value)

    @_builtins.property
    @pulumi.getter(name="totalMemUsage")
    def total_mem_usage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the memory usage of the server, the unit is MB.
        """
        return pulumi.get(self, "total_mem_usage")

    @total_mem_usage.setter
    def total_mem_usage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "total_mem_usage", value)


@pulumi.input_type
class _TaskProgressReportState:
    def __init__(__self__, *,
                 agent_cpu_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_disk_io: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_mem_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_time: Optional[pulumi.Input[_builtins.str]] = None,
                 compress_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 need_migration_test: Optional[pulumi.Input[_builtins.bool]] = None,
                 process_trace: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input[_builtins.int]] = None,
                 remain_time: Optional[pulumi.Input[_builtins.int]] = None,
                 replicatesize: Optional[pulumi.Input[_builtins.int]] = None,
                 subtask_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 total_cpu_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 total_disk_io: Optional[pulumi.Input[_builtins.int]] = None,
                 total_mem_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 totalsize: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering TaskProgressReport resources.
        :param pulumi.Input[_builtins.int] agent_cpu_usage: Specifies the CPU usage of the agent, the unit is percentage.
        :param pulumi.Input[_builtins.int] agent_disk_io: Specifies the disk I/O of the agent, the unit is MB/s.
        :param pulumi.Input[_builtins.int] agent_mem_usage: Specifies the memory usage of the agent, the unit is MB.
        :param pulumi.Input[_builtins.str] agent_time: Specifies the current local time of the source server, which is used
               for overspeed detection.
        :param pulumi.Input[_builtins.int] compress_rate: Specifies the file compression rate.
        :param pulumi.Input[_builtins.int] migrate_speed: Specifies the migration rate, the unit is Mbit/s.
        :param pulumi.Input[_builtins.bool] need_migration_test: Specifies whether migration drilling is enabled.
        :param pulumi.Input[_builtins.str] process_trace: Specifies the detailed progress of the migration or synchronization.
        :param pulumi.Input[_builtins.int] progress: Specifies the progress of the subtask, the unit is percentage.
        :param pulumi.Input[_builtins.int] remain_time: Specifies the remaining time.
        :param pulumi.Input[_builtins.int] replicatesize: Specifies the amount of data that has been replicated in the subtask,
               the unit is bytes.
        :param pulumi.Input[_builtins.str] subtask_name: Specifies the name of the subtask whose progress is reported.
               Values can be as follows:
               + **CREATE_CLOUD_SERVER**: creating a new server.
               + **SSL_CONFIG**: configuring a secure channel.
               + **ATTACH_AGENT_IMAGE**: attaching the disk that hosts the agent image.
               + **DETTACH_AGENT_IMAGE**: detaching the disk that hosts the agent image.
               + **FORMAT_DISK_LINUX**: formatting partitions on Linux.
               + **FORMAT_DISK_LINUX_FILE**: formatting partitions on Linux for a file-level migration.
               + **FORMAT_DISK_LINUX_BLOCK**: formatting partitions on Linux for a block-level migration.
               + **FORMAT_DISK_WINDOWS**: formatting partitions on Windows.
               + **MIGRATE_LINUX_FILE**: replicating files on Linux.
               + **MIGRATE_LINUX_BLOCK**: replicating blocks on Linux.
               + **MIGRATE_WINDOWS_BLOCK**: replicating blocks on Windows.
               + **CLONE_VM**: cloning the target server.
               + **SYNC_LINUX_FILE**: synchronizing files on Linux.
               + **SYNC_LINUX_BLOCK**: synchronizing blocks on Linux.
               + **SYNC_WINDOWS_BLOCK**: synchronizing blocks on Windows.
               + **CONFIGURE_LINUX**: modifying system configurations on Linux.
               + **CONFIGURE_LINUX_BLOCK**: modifying system configurations on Linux for a block-level migration.
               + **CONFIGURE_LINUX_FILE**: modifying system configurations on Linux for a file-level migration.
               + **CONFIGURE_WINDOWS**: modifying system configurations on Windows.
        :param pulumi.Input[_builtins.str] task_id: Specifies the migration task ID.
        :param pulumi.Input[_builtins.int] total_cpu_usage: Specifies the CPU usage of the server, the unit is percentage.
        :param pulumi.Input[_builtins.int] total_disk_io: Specifies the disk I/O of the server, the unit is MB/s.
        :param pulumi.Input[_builtins.int] total_mem_usage: Specifies the memory usage of the server, the unit is MB.
        :param pulumi.Input[_builtins.int] totalsize: Specifies the total amount of data to be migrated in the subtask.
        """
        if agent_cpu_usage is not None:
            pulumi.set(__self__, "agent_cpu_usage", agent_cpu_usage)
        if agent_disk_io is not None:
            pulumi.set(__self__, "agent_disk_io", agent_disk_io)
        if agent_mem_usage is not None:
            pulumi.set(__self__, "agent_mem_usage", agent_mem_usage)
        if agent_time is not None:
            pulumi.set(__self__, "agent_time", agent_time)
        if compress_rate is not None:
            pulumi.set(__self__, "compress_rate", compress_rate)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if migrate_speed is not None:
            pulumi.set(__self__, "migrate_speed", migrate_speed)
        if need_migration_test is not None:
            pulumi.set(__self__, "need_migration_test", need_migration_test)
        if process_trace is not None:
            pulumi.set(__self__, "process_trace", process_trace)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if remain_time is not None:
            pulumi.set(__self__, "remain_time", remain_time)
        if replicatesize is not None:
            pulumi.set(__self__, "replicatesize", replicatesize)
        if subtask_name is not None:
            pulumi.set(__self__, "subtask_name", subtask_name)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if total_cpu_usage is not None:
            pulumi.set(__self__, "total_cpu_usage", total_cpu_usage)
        if total_disk_io is not None:
            pulumi.set(__self__, "total_disk_io", total_disk_io)
        if total_mem_usage is not None:
            pulumi.set(__self__, "total_mem_usage", total_mem_usage)
        if totalsize is not None:
            pulumi.set(__self__, "totalsize", totalsize)

    @_builtins.property
    @pulumi.getter(name="agentCpuUsage")
    def agent_cpu_usage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the CPU usage of the agent, the unit is percentage.
        """
        return pulumi.get(self, "agent_cpu_usage")

    @agent_cpu_usage.setter
    def agent_cpu_usage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "agent_cpu_usage", value)

    @_builtins.property
    @pulumi.getter(name="agentDiskIo")
    def agent_disk_io(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the disk I/O of the agent, the unit is MB/s.
        """
        return pulumi.get(self, "agent_disk_io")

    @agent_disk_io.setter
    def agent_disk_io(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "agent_disk_io", value)

    @_builtins.property
    @pulumi.getter(name="agentMemUsage")
    def agent_mem_usage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the memory usage of the agent, the unit is MB.
        """
        return pulumi.get(self, "agent_mem_usage")

    @agent_mem_usage.setter
    def agent_mem_usage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "agent_mem_usage", value)

    @_builtins.property
    @pulumi.getter(name="agentTime")
    def agent_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the current local time of the source server, which is used
        for overspeed detection.
        """
        return pulumi.get(self, "agent_time")

    @agent_time.setter
    def agent_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_time", value)

    @_builtins.property
    @pulumi.getter(name="compressRate")
    def compress_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the file compression rate.
        """
        return pulumi.get(self, "compress_rate")

    @compress_rate.setter
    def compress_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "compress_rate", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="migrateSpeed")
    def migrate_speed(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the migration rate, the unit is Mbit/s.
        """
        return pulumi.get(self, "migrate_speed")

    @migrate_speed.setter
    def migrate_speed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "migrate_speed", value)

    @_builtins.property
    @pulumi.getter(name="needMigrationTest")
    def need_migration_test(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether migration drilling is enabled.
        """
        return pulumi.get(self, "need_migration_test")

    @need_migration_test.setter
    def need_migration_test(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "need_migration_test", value)

    @_builtins.property
    @pulumi.getter(name="processTrace")
    def process_trace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the detailed progress of the migration or synchronization.
        """
        return pulumi.get(self, "process_trace")

    @process_trace.setter
    def process_trace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "process_trace", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the progress of the subtask, the unit is percentage.
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter(name="remainTime")
    def remain_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the remaining time.
        """
        return pulumi.get(self, "remain_time")

    @remain_time.setter
    def remain_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remain_time", value)

    @_builtins.property
    @pulumi.getter
    def replicatesize(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the amount of data that has been replicated in the subtask,
        the unit is bytes.
        """
        return pulumi.get(self, "replicatesize")

    @replicatesize.setter
    def replicatesize(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replicatesize", value)

    @_builtins.property
    @pulumi.getter(name="subtaskName")
    def subtask_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the subtask whose progress is reported.
        Values can be as follows:
        + **CREATE_CLOUD_SERVER**: creating a new server.
        + **SSL_CONFIG**: configuring a secure channel.
        + **ATTACH_AGENT_IMAGE**: attaching the disk that hosts the agent image.
        + **DETTACH_AGENT_IMAGE**: detaching the disk that hosts the agent image.
        + **FORMAT_DISK_LINUX**: formatting partitions on Linux.
        + **FORMAT_DISK_LINUX_FILE**: formatting partitions on Linux for a file-level migration.
        + **FORMAT_DISK_LINUX_BLOCK**: formatting partitions on Linux for a block-level migration.
        + **FORMAT_DISK_WINDOWS**: formatting partitions on Windows.
        + **MIGRATE_LINUX_FILE**: replicating files on Linux.
        + **MIGRATE_LINUX_BLOCK**: replicating blocks on Linux.
        + **MIGRATE_WINDOWS_BLOCK**: replicating blocks on Windows.
        + **CLONE_VM**: cloning the target server.
        + **SYNC_LINUX_FILE**: synchronizing files on Linux.
        + **SYNC_LINUX_BLOCK**: synchronizing blocks on Linux.
        + **SYNC_WINDOWS_BLOCK**: synchronizing blocks on Windows.
        + **CONFIGURE_LINUX**: modifying system configurations on Linux.
        + **CONFIGURE_LINUX_BLOCK**: modifying system configurations on Linux for a block-level migration.
        + **CONFIGURE_LINUX_FILE**: modifying system configurations on Linux for a file-level migration.
        + **CONFIGURE_WINDOWS**: modifying system configurations on Windows.
        """
        return pulumi.get(self, "subtask_name")

    @subtask_name.setter
    def subtask_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subtask_name", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the migration task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter(name="totalCpuUsage")
    def total_cpu_usage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the CPU usage of the server, the unit is percentage.
        """
        return pulumi.get(self, "total_cpu_usage")

    @total_cpu_usage.setter
    def total_cpu_usage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "total_cpu_usage", value)

    @_builtins.property
    @pulumi.getter(name="totalDiskIo")
    def total_disk_io(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the disk I/O of the server, the unit is MB/s.
        """
        return pulumi.get(self, "total_disk_io")

    @total_disk_io.setter
    def total_disk_io(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "total_disk_io", value)

    @_builtins.property
    @pulumi.getter(name="totalMemUsage")
    def total_mem_usage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the memory usage of the server, the unit is MB.
        """
        return pulumi.get(self, "total_mem_usage")

    @total_mem_usage.setter
    def total_mem_usage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "total_mem_usage", value)

    @_builtins.property
    @pulumi.getter
    def totalsize(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the total amount of data to be migrated in the subtask.
        """
        return pulumi.get(self, "totalsize")

    @totalsize.setter
    def totalsize(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "totalsize", value)


@pulumi.type_token("huaweicloud:Sms/taskProgressReport:TaskProgressReport")
class TaskProgressReport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_cpu_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_disk_io: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_mem_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_time: Optional[pulumi.Input[_builtins.str]] = None,
                 compress_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 need_migration_test: Optional[pulumi.Input[_builtins.bool]] = None,
                 process_trace: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input[_builtins.int]] = None,
                 remain_time: Optional[pulumi.Input[_builtins.int]] = None,
                 replicatesize: Optional[pulumi.Input[_builtins.int]] = None,
                 subtask_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 total_cpu_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 total_disk_io: Optional[pulumi.Input[_builtins.int]] = None,
                 total_mem_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 totalsize: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages an SMS task progress report resource within HuaweiCloud.

        > Deleting task progress report resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_id = config.require_object("taskId")
        test = huaweicloud.sms.TaskProgressReport("test",
            task_id=task_id,
            subtask_name="DETTACH_AGENT_IMAGE",
            progress=100,
            replicatesize=1000,
            totalsize=100000,
            process_trace="migrate details")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] agent_cpu_usage: Specifies the CPU usage of the agent, the unit is percentage.
        :param pulumi.Input[_builtins.int] agent_disk_io: Specifies the disk I/O of the agent, the unit is MB/s.
        :param pulumi.Input[_builtins.int] agent_mem_usage: Specifies the memory usage of the agent, the unit is MB.
        :param pulumi.Input[_builtins.str] agent_time: Specifies the current local time of the source server, which is used
               for overspeed detection.
        :param pulumi.Input[_builtins.int] compress_rate: Specifies the file compression rate.
        :param pulumi.Input[_builtins.int] migrate_speed: Specifies the migration rate, the unit is Mbit/s.
        :param pulumi.Input[_builtins.bool] need_migration_test: Specifies whether migration drilling is enabled.
        :param pulumi.Input[_builtins.str] process_trace: Specifies the detailed progress of the migration or synchronization.
        :param pulumi.Input[_builtins.int] progress: Specifies the progress of the subtask, the unit is percentage.
        :param pulumi.Input[_builtins.int] remain_time: Specifies the remaining time.
        :param pulumi.Input[_builtins.int] replicatesize: Specifies the amount of data that has been replicated in the subtask,
               the unit is bytes.
        :param pulumi.Input[_builtins.str] subtask_name: Specifies the name of the subtask whose progress is reported.
               Values can be as follows:
               + **CREATE_CLOUD_SERVER**: creating a new server.
               + **SSL_CONFIG**: configuring a secure channel.
               + **ATTACH_AGENT_IMAGE**: attaching the disk that hosts the agent image.
               + **DETTACH_AGENT_IMAGE**: detaching the disk that hosts the agent image.
               + **FORMAT_DISK_LINUX**: formatting partitions on Linux.
               + **FORMAT_DISK_LINUX_FILE**: formatting partitions on Linux for a file-level migration.
               + **FORMAT_DISK_LINUX_BLOCK**: formatting partitions on Linux for a block-level migration.
               + **FORMAT_DISK_WINDOWS**: formatting partitions on Windows.
               + **MIGRATE_LINUX_FILE**: replicating files on Linux.
               + **MIGRATE_LINUX_BLOCK**: replicating blocks on Linux.
               + **MIGRATE_WINDOWS_BLOCK**: replicating blocks on Windows.
               + **CLONE_VM**: cloning the target server.
               + **SYNC_LINUX_FILE**: synchronizing files on Linux.
               + **SYNC_LINUX_BLOCK**: synchronizing blocks on Linux.
               + **SYNC_WINDOWS_BLOCK**: synchronizing blocks on Windows.
               + **CONFIGURE_LINUX**: modifying system configurations on Linux.
               + **CONFIGURE_LINUX_BLOCK**: modifying system configurations on Linux for a block-level migration.
               + **CONFIGURE_LINUX_FILE**: modifying system configurations on Linux for a file-level migration.
               + **CONFIGURE_WINDOWS**: modifying system configurations on Windows.
        :param pulumi.Input[_builtins.str] task_id: Specifies the migration task ID.
        :param pulumi.Input[_builtins.int] total_cpu_usage: Specifies the CPU usage of the server, the unit is percentage.
        :param pulumi.Input[_builtins.int] total_disk_io: Specifies the disk I/O of the server, the unit is MB/s.
        :param pulumi.Input[_builtins.int] total_mem_usage: Specifies the memory usage of the server, the unit is MB.
        :param pulumi.Input[_builtins.int] totalsize: Specifies the total amount of data to be migrated in the subtask.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TaskProgressReportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an SMS task progress report resource within HuaweiCloud.

        > Deleting task progress report resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        task_id = config.require_object("taskId")
        test = huaweicloud.sms.TaskProgressReport("test",
            task_id=task_id,
            subtask_name="DETTACH_AGENT_IMAGE",
            progress=100,
            replicatesize=1000,
            totalsize=100000,
            process_trace="migrate details")
        ```

        :param str resource_name: The name of the resource.
        :param TaskProgressReportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TaskProgressReportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_cpu_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_disk_io: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_mem_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 agent_time: Optional[pulumi.Input[_builtins.str]] = None,
                 compress_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 migrate_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 need_migration_test: Optional[pulumi.Input[_builtins.bool]] = None,
                 process_trace: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input[_builtins.int]] = None,
                 remain_time: Optional[pulumi.Input[_builtins.int]] = None,
                 replicatesize: Optional[pulumi.Input[_builtins.int]] = None,
                 subtask_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 total_cpu_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 total_disk_io: Optional[pulumi.Input[_builtins.int]] = None,
                 total_mem_usage: Optional[pulumi.Input[_builtins.int]] = None,
                 totalsize: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TaskProgressReportArgs.__new__(TaskProgressReportArgs)

            __props__.__dict__["agent_cpu_usage"] = agent_cpu_usage
            __props__.__dict__["agent_disk_io"] = agent_disk_io
            __props__.__dict__["agent_mem_usage"] = agent_mem_usage
            __props__.__dict__["agent_time"] = agent_time
            __props__.__dict__["compress_rate"] = compress_rate
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["migrate_speed"] = migrate_speed
            __props__.__dict__["need_migration_test"] = need_migration_test
            if process_trace is None and not opts.urn:
                raise TypeError("Missing required property 'process_trace'")
            __props__.__dict__["process_trace"] = process_trace
            if progress is None and not opts.urn:
                raise TypeError("Missing required property 'progress'")
            __props__.__dict__["progress"] = progress
            __props__.__dict__["remain_time"] = remain_time
            if replicatesize is None and not opts.urn:
                raise TypeError("Missing required property 'replicatesize'")
            __props__.__dict__["replicatesize"] = replicatesize
            if subtask_name is None and not opts.urn:
                raise TypeError("Missing required property 'subtask_name'")
            __props__.__dict__["subtask_name"] = subtask_name
            if task_id is None and not opts.urn:
                raise TypeError("Missing required property 'task_id'")
            __props__.__dict__["task_id"] = task_id
            __props__.__dict__["total_cpu_usage"] = total_cpu_usage
            __props__.__dict__["total_disk_io"] = total_disk_io
            __props__.__dict__["total_mem_usage"] = total_mem_usage
            if totalsize is None and not opts.urn:
                raise TypeError("Missing required property 'totalsize'")
            __props__.__dict__["totalsize"] = totalsize
        super(TaskProgressReport, __self__).__init__(
            'huaweicloud:Sms/taskProgressReport:TaskProgressReport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agent_cpu_usage: Optional[pulumi.Input[_builtins.int]] = None,
            agent_disk_io: Optional[pulumi.Input[_builtins.int]] = None,
            agent_mem_usage: Optional[pulumi.Input[_builtins.int]] = None,
            agent_time: Optional[pulumi.Input[_builtins.str]] = None,
            compress_rate: Optional[pulumi.Input[_builtins.int]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            migrate_speed: Optional[pulumi.Input[_builtins.int]] = None,
            need_migration_test: Optional[pulumi.Input[_builtins.bool]] = None,
            process_trace: Optional[pulumi.Input[_builtins.str]] = None,
            progress: Optional[pulumi.Input[_builtins.int]] = None,
            remain_time: Optional[pulumi.Input[_builtins.int]] = None,
            replicatesize: Optional[pulumi.Input[_builtins.int]] = None,
            subtask_name: Optional[pulumi.Input[_builtins.str]] = None,
            task_id: Optional[pulumi.Input[_builtins.str]] = None,
            total_cpu_usage: Optional[pulumi.Input[_builtins.int]] = None,
            total_disk_io: Optional[pulumi.Input[_builtins.int]] = None,
            total_mem_usage: Optional[pulumi.Input[_builtins.int]] = None,
            totalsize: Optional[pulumi.Input[_builtins.int]] = None) -> 'TaskProgressReport':
        """
        Get an existing TaskProgressReport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] agent_cpu_usage: Specifies the CPU usage of the agent, the unit is percentage.
        :param pulumi.Input[_builtins.int] agent_disk_io: Specifies the disk I/O of the agent, the unit is MB/s.
        :param pulumi.Input[_builtins.int] agent_mem_usage: Specifies the memory usage of the agent, the unit is MB.
        :param pulumi.Input[_builtins.str] agent_time: Specifies the current local time of the source server, which is used
               for overspeed detection.
        :param pulumi.Input[_builtins.int] compress_rate: Specifies the file compression rate.
        :param pulumi.Input[_builtins.int] migrate_speed: Specifies the migration rate, the unit is Mbit/s.
        :param pulumi.Input[_builtins.bool] need_migration_test: Specifies whether migration drilling is enabled.
        :param pulumi.Input[_builtins.str] process_trace: Specifies the detailed progress of the migration or synchronization.
        :param pulumi.Input[_builtins.int] progress: Specifies the progress of the subtask, the unit is percentage.
        :param pulumi.Input[_builtins.int] remain_time: Specifies the remaining time.
        :param pulumi.Input[_builtins.int] replicatesize: Specifies the amount of data that has been replicated in the subtask,
               the unit is bytes.
        :param pulumi.Input[_builtins.str] subtask_name: Specifies the name of the subtask whose progress is reported.
               Values can be as follows:
               + **CREATE_CLOUD_SERVER**: creating a new server.
               + **SSL_CONFIG**: configuring a secure channel.
               + **ATTACH_AGENT_IMAGE**: attaching the disk that hosts the agent image.
               + **DETTACH_AGENT_IMAGE**: detaching the disk that hosts the agent image.
               + **FORMAT_DISK_LINUX**: formatting partitions on Linux.
               + **FORMAT_DISK_LINUX_FILE**: formatting partitions on Linux for a file-level migration.
               + **FORMAT_DISK_LINUX_BLOCK**: formatting partitions on Linux for a block-level migration.
               + **FORMAT_DISK_WINDOWS**: formatting partitions on Windows.
               + **MIGRATE_LINUX_FILE**: replicating files on Linux.
               + **MIGRATE_LINUX_BLOCK**: replicating blocks on Linux.
               + **MIGRATE_WINDOWS_BLOCK**: replicating blocks on Windows.
               + **CLONE_VM**: cloning the target server.
               + **SYNC_LINUX_FILE**: synchronizing files on Linux.
               + **SYNC_LINUX_BLOCK**: synchronizing blocks on Linux.
               + **SYNC_WINDOWS_BLOCK**: synchronizing blocks on Windows.
               + **CONFIGURE_LINUX**: modifying system configurations on Linux.
               + **CONFIGURE_LINUX_BLOCK**: modifying system configurations on Linux for a block-level migration.
               + **CONFIGURE_LINUX_FILE**: modifying system configurations on Linux for a file-level migration.
               + **CONFIGURE_WINDOWS**: modifying system configurations on Windows.
        :param pulumi.Input[_builtins.str] task_id: Specifies the migration task ID.
        :param pulumi.Input[_builtins.int] total_cpu_usage: Specifies the CPU usage of the server, the unit is percentage.
        :param pulumi.Input[_builtins.int] total_disk_io: Specifies the disk I/O of the server, the unit is MB/s.
        :param pulumi.Input[_builtins.int] total_mem_usage: Specifies the memory usage of the server, the unit is MB.
        :param pulumi.Input[_builtins.int] totalsize: Specifies the total amount of data to be migrated in the subtask.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TaskProgressReportState.__new__(_TaskProgressReportState)

        __props__.__dict__["agent_cpu_usage"] = agent_cpu_usage
        __props__.__dict__["agent_disk_io"] = agent_disk_io
        __props__.__dict__["agent_mem_usage"] = agent_mem_usage
        __props__.__dict__["agent_time"] = agent_time
        __props__.__dict__["compress_rate"] = compress_rate
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["migrate_speed"] = migrate_speed
        __props__.__dict__["need_migration_test"] = need_migration_test
        __props__.__dict__["process_trace"] = process_trace
        __props__.__dict__["progress"] = progress
        __props__.__dict__["remain_time"] = remain_time
        __props__.__dict__["replicatesize"] = replicatesize
        __props__.__dict__["subtask_name"] = subtask_name
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["total_cpu_usage"] = total_cpu_usage
        __props__.__dict__["total_disk_io"] = total_disk_io
        __props__.__dict__["total_mem_usage"] = total_mem_usage
        __props__.__dict__["totalsize"] = totalsize
        return TaskProgressReport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agentCpuUsage")
    def agent_cpu_usage(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the CPU usage of the agent, the unit is percentage.
        """
        return pulumi.get(self, "agent_cpu_usage")

    @_builtins.property
    @pulumi.getter(name="agentDiskIo")
    def agent_disk_io(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the disk I/O of the agent, the unit is MB/s.
        """
        return pulumi.get(self, "agent_disk_io")

    @_builtins.property
    @pulumi.getter(name="agentMemUsage")
    def agent_mem_usage(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the memory usage of the agent, the unit is MB.
        """
        return pulumi.get(self, "agent_mem_usage")

    @_builtins.property
    @pulumi.getter(name="agentTime")
    def agent_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the current local time of the source server, which is used
        for overspeed detection.
        """
        return pulumi.get(self, "agent_time")

    @_builtins.property
    @pulumi.getter(name="compressRate")
    def compress_rate(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the file compression rate.
        """
        return pulumi.get(self, "compress_rate")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="migrateSpeed")
    def migrate_speed(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the migration rate, the unit is Mbit/s.
        """
        return pulumi.get(self, "migrate_speed")

    @_builtins.property
    @pulumi.getter(name="needMigrationTest")
    def need_migration_test(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether migration drilling is enabled.
        """
        return pulumi.get(self, "need_migration_test")

    @_builtins.property
    @pulumi.getter(name="processTrace")
    def process_trace(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the detailed progress of the migration or synchronization.
        """
        return pulumi.get(self, "process_trace")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the progress of the subtask, the unit is percentage.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="remainTime")
    def remain_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the remaining time.
        """
        return pulumi.get(self, "remain_time")

    @_builtins.property
    @pulumi.getter
    def replicatesize(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the amount of data that has been replicated in the subtask,
        the unit is bytes.
        """
        return pulumi.get(self, "replicatesize")

    @_builtins.property
    @pulumi.getter(name="subtaskName")
    def subtask_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the subtask whose progress is reported.
        Values can be as follows:
        + **CREATE_CLOUD_SERVER**: creating a new server.
        + **SSL_CONFIG**: configuring a secure channel.
        + **ATTACH_AGENT_IMAGE**: attaching the disk that hosts the agent image.
        + **DETTACH_AGENT_IMAGE**: detaching the disk that hosts the agent image.
        + **FORMAT_DISK_LINUX**: formatting partitions on Linux.
        + **FORMAT_DISK_LINUX_FILE**: formatting partitions on Linux for a file-level migration.
        + **FORMAT_DISK_LINUX_BLOCK**: formatting partitions on Linux for a block-level migration.
        + **FORMAT_DISK_WINDOWS**: formatting partitions on Windows.
        + **MIGRATE_LINUX_FILE**: replicating files on Linux.
        + **MIGRATE_LINUX_BLOCK**: replicating blocks on Linux.
        + **MIGRATE_WINDOWS_BLOCK**: replicating blocks on Windows.
        + **CLONE_VM**: cloning the target server.
        + **SYNC_LINUX_FILE**: synchronizing files on Linux.
        + **SYNC_LINUX_BLOCK**: synchronizing blocks on Linux.
        + **SYNC_WINDOWS_BLOCK**: synchronizing blocks on Windows.
        + **CONFIGURE_LINUX**: modifying system configurations on Linux.
        + **CONFIGURE_LINUX_BLOCK**: modifying system configurations on Linux for a block-level migration.
        + **CONFIGURE_LINUX_FILE**: modifying system configurations on Linux for a file-level migration.
        + **CONFIGURE_WINDOWS**: modifying system configurations on Windows.
        """
        return pulumi.get(self, "subtask_name")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the migration task ID.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="totalCpuUsage")
    def total_cpu_usage(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the CPU usage of the server, the unit is percentage.
        """
        return pulumi.get(self, "total_cpu_usage")

    @_builtins.property
    @pulumi.getter(name="totalDiskIo")
    def total_disk_io(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the disk I/O of the server, the unit is MB/s.
        """
        return pulumi.get(self, "total_disk_io")

    @_builtins.property
    @pulumi.getter(name="totalMemUsage")
    def total_mem_usage(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the memory usage of the server, the unit is MB.
        """
        return pulumi.get(self, "total_mem_usage")

    @_builtins.property
    @pulumi.getter
    def totalsize(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the total amount of data to be migrated in the subtask.
        """
        return pulumi.get(self, "totalsize")

