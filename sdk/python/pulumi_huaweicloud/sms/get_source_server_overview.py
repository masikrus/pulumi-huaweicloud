# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetSourceServerOverviewResult',
    'AwaitableGetSourceServerOverviewResult',
    'get_source_server_overview',
    'get_source_server_overview_output',
]

@pulumi.output_type
class GetSourceServerOverviewResult:
    """
    A collection of values returned by getSourceServerOverview.
    """
    def __init__(__self__, cloning=None, cutovering=None, deleting=None, error=None, finished=None, id=None, initialize=None, replicate=None, skipping=None, stopped=None, stopping=None, syncing=None, unavailable=None, unconfigured=None, waiting=None):
        if cloning and not isinstance(cloning, int):
            raise TypeError("Expected argument 'cloning' to be a int")
        pulumi.set(__self__, "cloning", cloning)
        if cutovering and not isinstance(cutovering, int):
            raise TypeError("Expected argument 'cutovering' to be a int")
        pulumi.set(__self__, "cutovering", cutovering)
        if deleting and not isinstance(deleting, int):
            raise TypeError("Expected argument 'deleting' to be a int")
        pulumi.set(__self__, "deleting", deleting)
        if error and not isinstance(error, int):
            raise TypeError("Expected argument 'error' to be a int")
        pulumi.set(__self__, "error", error)
        if finished and not isinstance(finished, int):
            raise TypeError("Expected argument 'finished' to be a int")
        pulumi.set(__self__, "finished", finished)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if initialize and not isinstance(initialize, int):
            raise TypeError("Expected argument 'initialize' to be a int")
        pulumi.set(__self__, "initialize", initialize)
        if replicate and not isinstance(replicate, int):
            raise TypeError("Expected argument 'replicate' to be a int")
        pulumi.set(__self__, "replicate", replicate)
        if skipping and not isinstance(skipping, int):
            raise TypeError("Expected argument 'skipping' to be a int")
        pulumi.set(__self__, "skipping", skipping)
        if stopped and not isinstance(stopped, int):
            raise TypeError("Expected argument 'stopped' to be a int")
        pulumi.set(__self__, "stopped", stopped)
        if stopping and not isinstance(stopping, int):
            raise TypeError("Expected argument 'stopping' to be a int")
        pulumi.set(__self__, "stopping", stopping)
        if syncing and not isinstance(syncing, int):
            raise TypeError("Expected argument 'syncing' to be a int")
        pulumi.set(__self__, "syncing", syncing)
        if unavailable and not isinstance(unavailable, int):
            raise TypeError("Expected argument 'unavailable' to be a int")
        pulumi.set(__self__, "unavailable", unavailable)
        if unconfigured and not isinstance(unconfigured, int):
            raise TypeError("Expected argument 'unconfigured' to be a int")
        pulumi.set(__self__, "unconfigured", unconfigured)
        if waiting and not isinstance(waiting, int):
            raise TypeError("Expected argument 'waiting' to be a int")
        pulumi.set(__self__, "waiting", waiting)

    @_builtins.property
    @pulumi.getter
    def cloning(self) -> _builtins.int:
        """
        Indicates the number of servers whose paired target servers are being cloned.
        """
        return pulumi.get(self, "cloning")

    @_builtins.property
    @pulumi.getter
    def cutovering(self) -> _builtins.int:
        """
        Indicates the number of servers whose paired target servers are being launched.
        """
        return pulumi.get(self, "cutovering")

    @_builtins.property
    @pulumi.getter
    def deleting(self) -> _builtins.int:
        """
        Indicates the number of servers that are in a deleting migration status.
        """
        return pulumi.get(self, "deleting")

    @_builtins.property
    @pulumi.getter
    def error(self) -> _builtins.int:
        """
        Indicates the number of servers that are in an error migration status.
        """
        return pulumi.get(self, "error")

    @_builtins.property
    @pulumi.getter
    def finished(self) -> _builtins.int:
        """
        Indicates the number of servers whose paired target servers have been launched.
        """
        return pulumi.get(self, "finished")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def initialize(self) -> _builtins.int:
        """
        Indicates the number of servers that are in an initializing migration status.
        """
        return pulumi.get(self, "initialize")

    @_builtins.property
    @pulumi.getter
    def replicate(self) -> _builtins.int:
        """
        Indicates the number of servers that are in a replicating migration status.
        """
        return pulumi.get(self, "replicate")

    @_builtins.property
    @pulumi.getter
    def skipping(self) -> _builtins.int:
        """
        Indicates the number of servers that are in a skipping migration status.
        """
        return pulumi.get(self, "skipping")

    @_builtins.property
    @pulumi.getter
    def stopped(self) -> _builtins.int:
        """
        Indicates the number of servers that are in a paused migration status.
        """
        return pulumi.get(self, "stopped")

    @_builtins.property
    @pulumi.getter
    def stopping(self) -> _builtins.int:
        """
        Indicates the number of servers that are in a stopping migration status.
        """
        return pulumi.get(self, "stopping")

    @_builtins.property
    @pulumi.getter
    def syncing(self) -> _builtins.int:
        """
        Indicates the number of servers that are in a synchronizing migration status.
        """
        return pulumi.get(self, "syncing")

    @_builtins.property
    @pulumi.getter
    def unavailable(self) -> _builtins.int:
        """
        Indicates the number of servers that fail the environment check.
        """
        return pulumi.get(self, "unavailable")

    @_builtins.property
    @pulumi.getter
    def unconfigured(self) -> _builtins.int:
        """
        Indicates the number of servers that do not have target server configurations.
        """
        return pulumi.get(self, "unconfigured")

    @_builtins.property
    @pulumi.getter
    def waiting(self) -> _builtins.int:
        """
        Indicates the number of servers that are in a waiting migration status.
        """
        return pulumi.get(self, "waiting")


class AwaitableGetSourceServerOverviewResult(GetSourceServerOverviewResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSourceServerOverviewResult(
            cloning=self.cloning,
            cutovering=self.cutovering,
            deleting=self.deleting,
            error=self.error,
            finished=self.finished,
            id=self.id,
            initialize=self.initialize,
            replicate=self.replicate,
            skipping=self.skipping,
            stopped=self.stopped,
            stopping=self.stopping,
            syncing=self.syncing,
            unavailable=self.unavailable,
            unconfigured=self.unconfigured,
            waiting=self.waiting)


def get_source_server_overview(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSourceServerOverviewResult:
    """
    Use this data source to obtain a summary of source servers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Sms.get_source_server_overview()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Sms/getSourceServerOverview:getSourceServerOverview', __args__, opts=opts, typ=GetSourceServerOverviewResult).value

    return AwaitableGetSourceServerOverviewResult(
        cloning=pulumi.get(__ret__, 'cloning'),
        cutovering=pulumi.get(__ret__, 'cutovering'),
        deleting=pulumi.get(__ret__, 'deleting'),
        error=pulumi.get(__ret__, 'error'),
        finished=pulumi.get(__ret__, 'finished'),
        id=pulumi.get(__ret__, 'id'),
        initialize=pulumi.get(__ret__, 'initialize'),
        replicate=pulumi.get(__ret__, 'replicate'),
        skipping=pulumi.get(__ret__, 'skipping'),
        stopped=pulumi.get(__ret__, 'stopped'),
        stopping=pulumi.get(__ret__, 'stopping'),
        syncing=pulumi.get(__ret__, 'syncing'),
        unavailable=pulumi.get(__ret__, 'unavailable'),
        unconfigured=pulumi.get(__ret__, 'unconfigured'),
        waiting=pulumi.get(__ret__, 'waiting'))
def get_source_server_overview_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSourceServerOverviewResult]:
    """
    Use this data source to obtain a summary of source servers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Sms.get_source_server_overview()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Sms/getSourceServerOverview:getSourceServerOverview', __args__, opts=opts, typ=GetSourceServerOverviewResult)
    return __ret__.apply(lambda __response__: GetSourceServerOverviewResult(
        cloning=pulumi.get(__response__, 'cloning'),
        cutovering=pulumi.get(__response__, 'cutovering'),
        deleting=pulumi.get(__response__, 'deleting'),
        error=pulumi.get(__response__, 'error'),
        finished=pulumi.get(__response__, 'finished'),
        id=pulumi.get(__response__, 'id'),
        initialize=pulumi.get(__response__, 'initialize'),
        replicate=pulumi.get(__response__, 'replicate'),
        skipping=pulumi.get(__response__, 'skipping'),
        stopped=pulumi.get(__response__, 'stopped'),
        stopping=pulumi.get(__response__, 'stopping'),
        syncing=pulumi.get(__response__, 'syncing'),
        unavailable=pulumi.get(__response__, 'unavailable'),
        unconfigured=pulumi.get(__response__, 'unconfigured'),
        waiting=pulumi.get(__response__, 'waiting')))
