# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SourceServerCommandResultReportArgs', 'SourceServerCommandResultReport']

@pulumi.input_type
class SourceServerCommandResultReportArgs:
    def __init__(__self__, *,
                 command_name: pulumi.Input[_builtins.str],
                 result: pulumi.Input[_builtins.str],
                 result_detail: pulumi.Input[_builtins.str],
                 server_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SourceServerCommandResultReport resource.
        :param pulumi.Input[_builtins.str] command_name: Specifies the command name.
               Values can be **START**, **STOP**, **DELETE**, **SYNC**, **UPLOAD_LOG** and **RSET_LOG_ACL**.
        :param pulumi.Input[_builtins.str] result: Specifies the command execution result.
               Values can be as follows:
               + **success**: The command is executed successfully.
               + **fail**: The command fails to be executed.
        :param pulumi.Input[_builtins.str] result_detail: Specifies the command execution results in JSON format.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the source server that the command is sent to.
        """
        pulumi.set(__self__, "command_name", command_name)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "result_detail", result_detail)
        pulumi.set(__self__, "server_id", server_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)

    @_builtins.property
    @pulumi.getter(name="commandName")
    def command_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the command name.
        Values can be **START**, **STOP**, **DELETE**, **SYNC**, **UPLOAD_LOG** and **RSET_LOG_ACL**.
        """
        return pulumi.get(self, "command_name")

    @command_name.setter
    def command_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "command_name", value)

    @_builtins.property
    @pulumi.getter
    def result(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the command execution result.
        Values can be as follows:
        + **success**: The command is executed successfully.
        + **fail**: The command fails to be executed.
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "result", value)

    @_builtins.property
    @pulumi.getter(name="resultDetail")
    def result_detail(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the command execution results in JSON format.
        """
        return pulumi.get(self, "result_detail")

    @result_detail.setter
    def result_detail(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "result_detail", value)

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the source server that the command is sent to.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "server_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)


@pulumi.input_type
class _SourceServerCommandResultReportState:
    def __init__(__self__, *,
                 command_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 result: Optional[pulumi.Input[_builtins.str]] = None,
                 result_detail: Optional[pulumi.Input[_builtins.str]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SourceServerCommandResultReport resources.
        :param pulumi.Input[_builtins.str] command_name: Specifies the command name.
               Values can be **START**, **STOP**, **DELETE**, **SYNC**, **UPLOAD_LOG** and **RSET_LOG_ACL**.
        :param pulumi.Input[_builtins.str] result: Specifies the command execution result.
               Values can be as follows:
               + **success**: The command is executed successfully.
               + **fail**: The command fails to be executed.
        :param pulumi.Input[_builtins.str] result_detail: Specifies the command execution results in JSON format.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the source server that the command is sent to.
        """
        if command_name is not None:
            pulumi.set(__self__, "command_name", command_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if result_detail is not None:
            pulumi.set(__self__, "result_detail", result_detail)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @_builtins.property
    @pulumi.getter(name="commandName")
    def command_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the command name.
        Values can be **START**, **STOP**, **DELETE**, **SYNC**, **UPLOAD_LOG** and **RSET_LOG_ACL**.
        """
        return pulumi.get(self, "command_name")

    @command_name.setter
    def command_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the command execution result.
        Values can be as follows:
        + **success**: The command is executed successfully.
        + **fail**: The command fails to be executed.
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "result", value)

    @_builtins.property
    @pulumi.getter(name="resultDetail")
    def result_detail(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the command execution results in JSON format.
        """
        return pulumi.get(self, "result_detail")

    @result_detail.setter
    def result_detail(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "result_detail", value)

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the source server that the command is sent to.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_id", value)


@pulumi.type_token("huaweicloud:Sms/sourceServerCommandResultReport:SourceServerCommandResultReport")
class SourceServerCommandResultReport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 result: Optional[pulumi.Input[_builtins.str]] = None,
                 result_detail: Optional[pulumi.Input[_builtins.str]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a SMS source server command result report resource within HuaweiCloud.

        > Deleting source server command result report resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_id = config.require_object("serverId")
        test = huaweicloud.sms.SourceServerCommandResultReport("test",
            server_id=server_id,
            command_name="START",
            result="success",
            result_detail=json.dumps({
                "msg": "test",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] command_name: Specifies the command name.
               Values can be **START**, **STOP**, **DELETE**, **SYNC**, **UPLOAD_LOG** and **RSET_LOG_ACL**.
        :param pulumi.Input[_builtins.str] result: Specifies the command execution result.
               Values can be as follows:
               + **success**: The command is executed successfully.
               + **fail**: The command fails to be executed.
        :param pulumi.Input[_builtins.str] result_detail: Specifies the command execution results in JSON format.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the source server that the command is sent to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SourceServerCommandResultReportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a SMS source server command result report resource within HuaweiCloud.

        > Deleting source server command result report resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        server_id = config.require_object("serverId")
        test = huaweicloud.sms.SourceServerCommandResultReport("test",
            server_id=server_id,
            command_name="START",
            result="success",
            result_detail=json.dumps({
                "msg": "test",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param SourceServerCommandResultReportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SourceServerCommandResultReportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 result: Optional[pulumi.Input[_builtins.str]] = None,
                 result_detail: Optional[pulumi.Input[_builtins.str]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SourceServerCommandResultReportArgs.__new__(SourceServerCommandResultReportArgs)

            if command_name is None and not opts.urn:
                raise TypeError("Missing required property 'command_name'")
            __props__.__dict__["command_name"] = command_name
            __props__.__dict__["enable_force_new"] = enable_force_new
            if result is None and not opts.urn:
                raise TypeError("Missing required property 'result'")
            __props__.__dict__["result"] = result
            if result_detail is None and not opts.urn:
                raise TypeError("Missing required property 'result_detail'")
            __props__.__dict__["result_detail"] = result_detail
            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
        super(SourceServerCommandResultReport, __self__).__init__(
            'huaweicloud:Sms/sourceServerCommandResultReport:SourceServerCommandResultReport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            command_name: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            result: Optional[pulumi.Input[_builtins.str]] = None,
            result_detail: Optional[pulumi.Input[_builtins.str]] = None,
            server_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SourceServerCommandResultReport':
        """
        Get an existing SourceServerCommandResultReport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] command_name: Specifies the command name.
               Values can be **START**, **STOP**, **DELETE**, **SYNC**, **UPLOAD_LOG** and **RSET_LOG_ACL**.
        :param pulumi.Input[_builtins.str] result: Specifies the command execution result.
               Values can be as follows:
               + **success**: The command is executed successfully.
               + **fail**: The command fails to be executed.
        :param pulumi.Input[_builtins.str] result_detail: Specifies the command execution results in JSON format.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the source server that the command is sent to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SourceServerCommandResultReportState.__new__(_SourceServerCommandResultReportState)

        __props__.__dict__["command_name"] = command_name
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["result"] = result
        __props__.__dict__["result_detail"] = result_detail
        __props__.__dict__["server_id"] = server_id
        return SourceServerCommandResultReport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="commandName")
    def command_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the command name.
        Values can be **START**, **STOP**, **DELETE**, **SYNC**, **UPLOAD_LOG** and **RSET_LOG_ACL**.
        """
        return pulumi.get(self, "command_name")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def result(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the command execution result.
        Values can be as follows:
        + **success**: The command is executed successfully.
        + **fail**: The command fails to be executed.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter(name="resultDetail")
    def result_detail(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the command execution results in JSON format.
        """
        return pulumi.get(self, "result_detail")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the source server that the command is sent to.
        """
        return pulumi.get(self, "server_id")

