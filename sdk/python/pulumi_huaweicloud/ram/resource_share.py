# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceShareArgs', 'ResourceShare']

@pulumi.input_type
class ResourceShareArgs:
    def __init__(__self__, *,
                 principals: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 resource_urns: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 allow_external_principals: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a ResourceShare resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] principals: Specifies one or more principals associated with the resource share.
               The principals could be account IDs and organization IDs. You can put account IDs and organization IDs to this
               field together.
               + If set to account IDs, please make sure the account ID is not your owner account ID.
               + If set to organization IDs, you first need to use the RAM console to enable sharing with Organizations. Please refer
               to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_urns: Specifies one or more resources urns associated with the
               resource share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
               Sharable cloud services and resource types refer to
               [document](https://support.huaweicloud.com/intl/en-us/productdesc-ram/ram_01_0007.html).
        :param pulumi.Input[_builtins.bool] allow_external_principals: Specifies whether resources can be shared with any accounts outside
               the organization. Defaults to **true**.
               
               > Configuring `allow_external_principals` to **false** may cause failure when the resource share contains one or more
               accounts outside the organization.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the resource share.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the resource share.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permission_ids: Specifies the list of RAM permissions associated with the resource
               share. A resource type can be associated with only one RAM permission. If you do not specify a permission ID,
               RAM automatically associates the default permission for each resource type.
               
               You can find permission IDs through data source `ram_get_resource_permissions`.
               
               > The field `permission_ids` does not support updating due to RAM API limitations. You can specify this field when
               creating a resource, and nothing will happen when you change this field after apply.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the resource share.
        """
        pulumi.set(__self__, "principals", principals)
        pulumi.set(__self__, "resource_urns", resource_urns)
        if allow_external_principals is not None:
            pulumi.set(__self__, "allow_external_principals", allow_external_principals)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permission_ids is not None:
            pulumi.set(__self__, "permission_ids", permission_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def principals(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies one or more principals associated with the resource share.
        The principals could be account IDs and organization IDs. You can put account IDs and organization IDs to this
        field together.
        + If set to account IDs, please make sure the account ID is not your owner account ID.
        + If set to organization IDs, you first need to use the RAM console to enable sharing with Organizations. Please refer
        to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
        """
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "principals", value)

    @_builtins.property
    @pulumi.getter(name="resourceUrns")
    def resource_urns(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies one or more resources urns associated with the
        resource share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
        Sharable cloud services and resource types refer to
        [document](https://support.huaweicloud.com/intl/en-us/productdesc-ram/ram_01_0007.html).
        """
        return pulumi.get(self, "resource_urns")

    @resource_urns.setter
    def resource_urns(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "resource_urns", value)

    @_builtins.property
    @pulumi.getter(name="allowExternalPrincipals")
    def allow_external_principals(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether resources can be shared with any accounts outside
        the organization. Defaults to **true**.

        > Configuring `allow_external_principals` to **false** may cause failure when the resource share contains one or more
        accounts outside the organization.
        """
        return pulumi.get(self, "allow_external_principals")

    @allow_external_principals.setter
    def allow_external_principals(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_external_principals", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the resource share.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the resource share.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="permissionIds")
    def permission_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of RAM permissions associated with the resource
        share. A resource type can be associated with only one RAM permission. If you do not specify a permission ID,
        RAM automatically associates the default permission for each resource type.

        You can find permission IDs through data source `ram_get_resource_permissions`.

        > The field `permission_ids` does not support updating due to RAM API limitations. You can specify this field when
        creating a resource, and nothing will happen when you change this field after apply.
        """
        return pulumi.get(self, "permission_ids")

    @permission_ids.setter
    def permission_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permission_ids", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the resource share.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ResourceShareState:
    def __init__(__self__, *,
                 allow_external_principals: Optional[pulumi.Input[_builtins.bool]] = None,
                 associated_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceShareAssociatedPermissionArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owning_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resource_urns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ResourceShare resources.
        :param pulumi.Input[_builtins.bool] allow_external_principals: Specifies whether resources can be shared with any accounts outside
               the organization. Defaults to **true**.
               
               > Configuring `allow_external_principals` to **false** may cause failure when the resource share contains one or more
               accounts outside the organization.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceShareAssociatedPermissionArgs']]] associated_permissions: The associated permissions of the RAM share.
               The associated_permissions structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the RAM share.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the resource share.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the resource share.
        :param pulumi.Input[_builtins.str] owning_account_id: The owning account ID of the RAM share.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permission_ids: Specifies the list of RAM permissions associated with the resource
               share. A resource type can be associated with only one RAM permission. If you do not specify a permission ID,
               RAM automatically associates the default permission for each resource type.
               
               You can find permission IDs through data source `ram_get_resource_permissions`.
               
               > The field `permission_ids` does not support updating due to RAM API limitations. You can specify this field when
               creating a resource, and nothing will happen when you change this field after apply.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] principals: Specifies one or more principals associated with the resource share.
               The principals could be account IDs and organization IDs. You can put account IDs and organization IDs to this
               field together.
               + If set to account IDs, please make sure the account ID is not your owner account ID.
               + If set to organization IDs, you first need to use the RAM console to enable sharing with Organizations. Please refer
               to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_urns: Specifies one or more resources urns associated with the
               resource share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
               Sharable cloud services and resource types refer to
               [document](https://support.huaweicloud.com/intl/en-us/productdesc-ram/ram_01_0007.html).
        :param pulumi.Input[_builtins.str] status: The status of the permission.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the resource share.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the RAM share.
        """
        if allow_external_principals is not None:
            pulumi.set(__self__, "allow_external_principals", allow_external_principals)
        if associated_permissions is not None:
            pulumi.set(__self__, "associated_permissions", associated_permissions)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owning_account_id is not None:
            pulumi.set(__self__, "owning_account_id", owning_account_id)
        if permission_ids is not None:
            pulumi.set(__self__, "permission_ids", permission_ids)
        if principals is not None:
            pulumi.set(__self__, "principals", principals)
        if resource_urns is not None:
            pulumi.set(__self__, "resource_urns", resource_urns)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="allowExternalPrincipals")
    def allow_external_principals(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether resources can be shared with any accounts outside
        the organization. Defaults to **true**.

        > Configuring `allow_external_principals` to **false** may cause failure when the resource share contains one or more
        accounts outside the organization.
        """
        return pulumi.get(self, "allow_external_principals")

    @allow_external_principals.setter
    def allow_external_principals(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_external_principals", value)

    @_builtins.property
    @pulumi.getter(name="associatedPermissions")
    def associated_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceShareAssociatedPermissionArgs']]]]:
        """
        The associated permissions of the RAM share.
        The associated_permissions structure is documented below.
        """
        return pulumi.get(self, "associated_permissions")

    @associated_permissions.setter
    def associated_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceShareAssociatedPermissionArgs']]]]):
        pulumi.set(self, "associated_permissions", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the RAM share.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the resource share.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the resource share.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="owningAccountId")
    def owning_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The owning account ID of the RAM share.
        """
        return pulumi.get(self, "owning_account_id")

    @owning_account_id.setter
    def owning_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owning_account_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionIds")
    def permission_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of RAM permissions associated with the resource
        share. A resource type can be associated with only one RAM permission. If you do not specify a permission ID,
        RAM automatically associates the default permission for each resource type.

        You can find permission IDs through data source `ram_get_resource_permissions`.

        > The field `permission_ids` does not support updating due to RAM API limitations. You can specify this field when
        creating a resource, and nothing will happen when you change this field after apply.
        """
        return pulumi.get(self, "permission_ids")

    @permission_ids.setter
    def permission_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permission_ids", value)

    @_builtins.property
    @pulumi.getter
    def principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies one or more principals associated with the resource share.
        The principals could be account IDs and organization IDs. You can put account IDs and organization IDs to this
        field together.
        + If set to account IDs, please make sure the account ID is not your owner account ID.
        + If set to organization IDs, you first need to use the RAM console to enable sharing with Organizations. Please refer
        to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
        """
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "principals", value)

    @_builtins.property
    @pulumi.getter(name="resourceUrns")
    def resource_urns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies one or more resources urns associated with the
        resource share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
        Sharable cloud services and resource types refer to
        [document](https://support.huaweicloud.com/intl/en-us/productdesc-ram/ram_01_0007.html).
        """
        return pulumi.get(self, "resource_urns")

    @resource_urns.setter
    def resource_urns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_urns", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the permission.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the resource share.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the RAM share.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:ram/resourceShare:ResourceShare")
class ResourceShare(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_external_principals: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resource_urns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a RAM resource share resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        account_id = config.require_object("accountId")
        resource_urn = config.require_object("resourceUrn")
        test = huaweicloud.ram.get_resource_permissions(resource_type="vpc:subnets")
        test_resource_share = huaweicloud.ram.ResourceShare("test",
            name="demo-share",
            description="test description information",
            resource_urns=[resource_urn],
            principals=[account_id],
            permission_ids=[test_huaweicloud_ram_resource_permissions["permissions"][0]["id"]],
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ## Import

        The ram share can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ram/resourceShare:ResourceShare test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `permission_ids`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_ram_resource_share" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              permission_ids,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_external_principals: Specifies whether resources can be shared with any accounts outside
               the organization. Defaults to **true**.
               
               > Configuring `allow_external_principals` to **false** may cause failure when the resource share contains one or more
               accounts outside the organization.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the resource share.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the resource share.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permission_ids: Specifies the list of RAM permissions associated with the resource
               share. A resource type can be associated with only one RAM permission. If you do not specify a permission ID,
               RAM automatically associates the default permission for each resource type.
               
               You can find permission IDs through data source `ram_get_resource_permissions`.
               
               > The field `permission_ids` does not support updating due to RAM API limitations. You can specify this field when
               creating a resource, and nothing will happen when you change this field after apply.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] principals: Specifies one or more principals associated with the resource share.
               The principals could be account IDs and organization IDs. You can put account IDs and organization IDs to this
               field together.
               + If set to account IDs, please make sure the account ID is not your owner account ID.
               + If set to organization IDs, you first need to use the RAM console to enable sharing with Organizations. Please refer
               to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_urns: Specifies one or more resources urns associated with the
               resource share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
               Sharable cloud services and resource types refer to
               [document](https://support.huaweicloud.com/intl/en-us/productdesc-ram/ram_01_0007.html).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the resource share.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceShareArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a RAM resource share resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        account_id = config.require_object("accountId")
        resource_urn = config.require_object("resourceUrn")
        test = huaweicloud.ram.get_resource_permissions(resource_type="vpc:subnets")
        test_resource_share = huaweicloud.ram.ResourceShare("test",
            name="demo-share",
            description="test description information",
            resource_urns=[resource_urn],
            principals=[account_id],
            permission_ids=[test_huaweicloud_ram_resource_permissions["permissions"][0]["id"]],
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ## Import

        The ram share can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:ram/resourceShare:ResourceShare test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `permission_ids`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_ram_resource_share" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              permission_ids,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ResourceShareArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceShareArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_external_principals: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resource_urns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceShareArgs.__new__(ResourceShareArgs)

            __props__.__dict__["allow_external_principals"] = allow_external_principals
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["permission_ids"] = permission_ids
            if principals is None and not opts.urn:
                raise TypeError("Missing required property 'principals'")
            __props__.__dict__["principals"] = principals
            if resource_urns is None and not opts.urn:
                raise TypeError("Missing required property 'resource_urns'")
            __props__.__dict__["resource_urns"] = resource_urns
            __props__.__dict__["tags"] = tags
            __props__.__dict__["associated_permissions"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["owning_account_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(ResourceShare, __self__).__init__(
            'huaweicloud:ram/resourceShare:ResourceShare',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_external_principals: Optional[pulumi.Input[_builtins.bool]] = None,
            associated_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourceShareAssociatedPermissionArgs', 'ResourceShareAssociatedPermissionArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owning_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            principals: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            resource_urns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'ResourceShare':
        """
        Get an existing ResourceShare resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_external_principals: Specifies whether resources can be shared with any accounts outside
               the organization. Defaults to **true**.
               
               > Configuring `allow_external_principals` to **false** may cause failure when the resource share contains one or more
               accounts outside the organization.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourceShareAssociatedPermissionArgs', 'ResourceShareAssociatedPermissionArgsDict']]]] associated_permissions: The associated permissions of the RAM share.
               The associated_permissions structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the RAM share.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the resource share.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the resource share.
        :param pulumi.Input[_builtins.str] owning_account_id: The owning account ID of the RAM share.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permission_ids: Specifies the list of RAM permissions associated with the resource
               share. A resource type can be associated with only one RAM permission. If you do not specify a permission ID,
               RAM automatically associates the default permission for each resource type.
               
               You can find permission IDs through data source `ram_get_resource_permissions`.
               
               > The field `permission_ids` does not support updating due to RAM API limitations. You can specify this field when
               creating a resource, and nothing will happen when you change this field after apply.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] principals: Specifies one or more principals associated with the resource share.
               The principals could be account IDs and organization IDs. You can put account IDs and organization IDs to this
               field together.
               + If set to account IDs, please make sure the account ID is not your owner account ID.
               + If set to organization IDs, you first need to use the RAM console to enable sharing with Organizations. Please refer
               to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_urns: Specifies one or more resources urns associated with the
               resource share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
               Sharable cloud services and resource types refer to
               [document](https://support.huaweicloud.com/intl/en-us/productdesc-ram/ram_01_0007.html).
        :param pulumi.Input[_builtins.str] status: The status of the permission.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the resource share.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the RAM share.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceShareState.__new__(_ResourceShareState)

        __props__.__dict__["allow_external_principals"] = allow_external_principals
        __props__.__dict__["associated_permissions"] = associated_permissions
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["owning_account_id"] = owning_account_id
        __props__.__dict__["permission_ids"] = permission_ids
        __props__.__dict__["principals"] = principals
        __props__.__dict__["resource_urns"] = resource_urns
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        return ResourceShare(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowExternalPrincipals")
    def allow_external_principals(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether resources can be shared with any accounts outside
        the organization. Defaults to **true**.

        > Configuring `allow_external_principals` to **false** may cause failure when the resource share contains one or more
        accounts outside the organization.
        """
        return pulumi.get(self, "allow_external_principals")

    @_builtins.property
    @pulumi.getter(name="associatedPermissions")
    def associated_permissions(self) -> pulumi.Output[Sequence['outputs.ResourceShareAssociatedPermission']]:
        """
        The associated permissions of the RAM share.
        The associated_permissions structure is documented below.
        """
        return pulumi.get(self, "associated_permissions")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the RAM share.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the resource share.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the resource share.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="owningAccountId")
    def owning_account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The owning account ID of the RAM share.
        """
        return pulumi.get(self, "owning_account_id")

    @_builtins.property
    @pulumi.getter(name="permissionIds")
    def permission_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of RAM permissions associated with the resource
        share. A resource type can be associated with only one RAM permission. If you do not specify a permission ID,
        RAM automatically associates the default permission for each resource type.

        You can find permission IDs through data source `ram_get_resource_permissions`.

        > The field `permission_ids` does not support updating due to RAM API limitations. You can specify this field when
        creating a resource, and nothing will happen when you change this field after apply.
        """
        return pulumi.get(self, "permission_ids")

    @_builtins.property
    @pulumi.getter
    def principals(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies one or more principals associated with the resource share.
        The principals could be account IDs and organization IDs. You can put account IDs and organization IDs to this
        field together.
        + If set to account IDs, please make sure the account ID is not your owner account ID.
        + If set to organization IDs, you first need to use the RAM console to enable sharing with Organizations. Please refer
        to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
        """
        return pulumi.get(self, "principals")

    @_builtins.property
    @pulumi.getter(name="resourceUrns")
    def resource_urns(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies one or more resources urns associated with the
        resource share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
        Sharable cloud services and resource types refer to
        [document](https://support.huaweicloud.com/intl/en-us/productdesc-ram/ram_01_0007.html).
        """
        return pulumi.get(self, "resource_urns")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the permission.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the resource share.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the RAM share.
        """
        return pulumi.get(self, "updated_at")

