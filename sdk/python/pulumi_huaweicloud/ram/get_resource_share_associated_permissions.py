# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceShareAssociatedPermissionsResult',
    'AwaitableGetResourceShareAssociatedPermissionsResult',
    'get_resource_share_associated_permissions',
    'get_resource_share_associated_permissions_output',
]

@pulumi.output_type
class GetResourceShareAssociatedPermissionsResult:
    """
    A collection of values returned by getResourceShareAssociatedPermissions.
    """
    def __init__(__self__, associated_permissions=None, id=None, permission_name=None, region=None, resource_share_id=None):
        if associated_permissions and not isinstance(associated_permissions, list):
            raise TypeError("Expected argument 'associated_permissions' to be a list")
        pulumi.set(__self__, "associated_permissions", associated_permissions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if permission_name and not isinstance(permission_name, str):
            raise TypeError("Expected argument 'permission_name' to be a str")
        pulumi.set(__self__, "permission_name", permission_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_share_id and not isinstance(resource_share_id, str):
            raise TypeError("Expected argument 'resource_share_id' to be a str")
        pulumi.set(__self__, "resource_share_id", resource_share_id)

    @_builtins.property
    @pulumi.getter(name="associatedPermissions")
    def associated_permissions(self) -> Sequence['outputs.GetResourceShareAssociatedPermissionsAssociatedPermissionResult']:
        """
        The list of RAM managed permissions associated with the resource share.
        """
        return pulumi.get(self, "associated_permissions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="permissionName")
    def permission_name(self) -> Optional[_builtins.str]:
        """
        The name of the RAM managed permission.
        """
        return pulumi.get(self, "permission_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceShareId")
    def resource_share_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_share_id")


class AwaitableGetResourceShareAssociatedPermissionsResult(GetResourceShareAssociatedPermissionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceShareAssociatedPermissionsResult(
            associated_permissions=self.associated_permissions,
            id=self.id,
            permission_name=self.permission_name,
            region=self.region,
            resource_share_id=self.resource_share_id)


def get_resource_share_associated_permissions(permission_name: Optional[_builtins.str] = None,
                                              region: Optional[_builtins.str] = None,
                                              resource_share_id: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceShareAssociatedPermissionsResult:
    """
    Use this data source to get the list of shared resource permissions associated with the RAM shared resources.


    :param _builtins.str permission_name: Specifies the name of the RAM managed permission.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_share_id: Specifies the ID of the resource share.
    """
    __args__ = dict()
    __args__['permissionName'] = permission_name
    __args__['region'] = region
    __args__['resourceShareId'] = resource_share_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ram/getResourceShareAssociatedPermissions:getResourceShareAssociatedPermissions', __args__, opts=opts, typ=GetResourceShareAssociatedPermissionsResult).value

    return AwaitableGetResourceShareAssociatedPermissionsResult(
        associated_permissions=pulumi.get(__ret__, 'associated_permissions'),
        id=pulumi.get(__ret__, 'id'),
        permission_name=pulumi.get(__ret__, 'permission_name'),
        region=pulumi.get(__ret__, 'region'),
        resource_share_id=pulumi.get(__ret__, 'resource_share_id'))
def get_resource_share_associated_permissions_output(permission_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     resource_share_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceShareAssociatedPermissionsResult]:
    """
    Use this data source to get the list of shared resource permissions associated with the RAM shared resources.


    :param _builtins.str permission_name: Specifies the name of the RAM managed permission.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_share_id: Specifies the ID of the resource share.
    """
    __args__ = dict()
    __args__['permissionName'] = permission_name
    __args__['region'] = region
    __args__['resourceShareId'] = resource_share_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ram/getResourceShareAssociatedPermissions:getResourceShareAssociatedPermissions', __args__, opts=opts, typ=GetResourceShareAssociatedPermissionsResult)
    return __ret__.apply(lambda __response__: GetResourceShareAssociatedPermissionsResult(
        associated_permissions=pulumi.get(__response__, 'associated_permissions'),
        id=pulumi.get(__response__, 'id'),
        permission_name=pulumi.get(__response__, 'permission_name'),
        region=pulumi.get(__response__, 'region'),
        resource_share_id=pulumi.get(__response__, 'resource_share_id')))
