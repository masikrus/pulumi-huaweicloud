# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetResourceSharesResult',
    'AwaitableGetResourceSharesResult',
    'get_resource_shares',
    'get_resource_shares_output',
]

@pulumi.output_type
class GetResourceSharesResult:
    """
    A collection of values returned by getResourceShares.
    """
    def __init__(__self__, id=None, name=None, permission_id=None, region=None, resource_owner=None, resource_share_ids=None, resource_shares=None, status=None, tag_filters=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permission_id and not isinstance(permission_id, str):
            raise TypeError("Expected argument 'permission_id' to be a str")
        pulumi.set(__self__, "permission_id", permission_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_owner and not isinstance(resource_owner, str):
            raise TypeError("Expected argument 'resource_owner' to be a str")
        pulumi.set(__self__, "resource_owner", resource_owner)
        if resource_share_ids and not isinstance(resource_share_ids, list):
            raise TypeError("Expected argument 'resource_share_ids' to be a list")
        pulumi.set(__self__, "resource_share_ids", resource_share_ids)
        if resource_shares and not isinstance(resource_shares, list):
            raise TypeError("Expected argument 'resource_shares' to be a list")
        pulumi.set(__self__, "resource_shares", resource_shares)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tag_filters and not isinstance(tag_filters, list):
            raise TypeError("Expected argument 'tag_filters' to be a list")
        pulumi.set(__self__, "tag_filters", tag_filters)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the resource share.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="permissionId")
    def permission_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "permission_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceOwner")
    def resource_owner(self) -> _builtins.str:
        return pulumi.get(self, "resource_owner")

    @_builtins.property
    @pulumi.getter(name="resourceShareIds")
    def resource_share_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "resource_share_ids")

    @_builtins.property
    @pulumi.getter(name="resourceShares")
    def resource_shares(self) -> Sequence['outputs.GetResourceSharesResourceShareResult']:
        """
        The list of details about resource shares.
        """
        return pulumi.get(self, "resource_shares")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The Status of the resource share.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.GetResourceSharesTagFilterResult']]:
        return pulumi.get(self, "tag_filters")


class AwaitableGetResourceSharesResult(GetResourceSharesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceSharesResult(
            id=self.id,
            name=self.name,
            permission_id=self.permission_id,
            region=self.region,
            resource_owner=self.resource_owner,
            resource_share_ids=self.resource_share_ids,
            resource_shares=self.resource_shares,
            status=self.status,
            tag_filters=self.tag_filters)


def get_resource_shares(name: Optional[_builtins.str] = None,
                        permission_id: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        resource_owner: Optional[_builtins.str] = None,
                        resource_share_ids: Optional[Sequence[_builtins.str]] = None,
                        status: Optional[_builtins.str] = None,
                        tag_filters: Optional[Sequence[Union['GetResourceSharesTagFilterArgs', 'GetResourceSharesTagFilterArgsDict']]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceSharesResult:
    """
    Use this data source to get a list of resource shares that you have created or shared with you.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_owner = config.require_object("resourceOwner")
    test = huaweicloud.ram.get_resource_shares(resource_owner=resource_owner)
    ```


    :param _builtins.str name: Specifies the name of the resource share.
    :param _builtins.str permission_id: Specifies the permission ID.
           
           <a name="tag_filters_struct"></a>
           The `tag_filters` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_owner: Specifies the owner type of resource sharing instance.
           Valid values are **self** and **other-accounts**.
    :param Sequence[_builtins.str] resource_share_ids: Specifies the list of resource share IDs.
    :param _builtins.str status: Specifies the status of the resource share.
    :param Sequence[Union['GetResourceSharesTagFilterArgs', 'GetResourceSharesTagFilterArgsDict']] tag_filters: Specifies the tags attached to the resource share.
           
           The tag_filters structure is documented below.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['permissionId'] = permission_id
    __args__['region'] = region
    __args__['resourceOwner'] = resource_owner
    __args__['resourceShareIds'] = resource_share_ids
    __args__['status'] = status
    __args__['tagFilters'] = tag_filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ram/getResourceShares:getResourceShares', __args__, opts=opts, typ=GetResourceSharesResult).value

    return AwaitableGetResourceSharesResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        permission_id=pulumi.get(__ret__, 'permission_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_owner=pulumi.get(__ret__, 'resource_owner'),
        resource_share_ids=pulumi.get(__ret__, 'resource_share_ids'),
        resource_shares=pulumi.get(__ret__, 'resource_shares'),
        status=pulumi.get(__ret__, 'status'),
        tag_filters=pulumi.get(__ret__, 'tag_filters'))
def get_resource_shares_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               permission_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               resource_owner: Optional[pulumi.Input[_builtins.str]] = None,
                               resource_share_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                               status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               tag_filters: Optional[pulumi.Input[Optional[Sequence[Union['GetResourceSharesTagFilterArgs', 'GetResourceSharesTagFilterArgsDict']]]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceSharesResult]:
    """
    Use this data source to get a list of resource shares that you have created or shared with you.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_owner = config.require_object("resourceOwner")
    test = huaweicloud.ram.get_resource_shares(resource_owner=resource_owner)
    ```


    :param _builtins.str name: Specifies the name of the resource share.
    :param _builtins.str permission_id: Specifies the permission ID.
           
           <a name="tag_filters_struct"></a>
           The `tag_filters` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_owner: Specifies the owner type of resource sharing instance.
           Valid values are **self** and **other-accounts**.
    :param Sequence[_builtins.str] resource_share_ids: Specifies the list of resource share IDs.
    :param _builtins.str status: Specifies the status of the resource share.
    :param Sequence[Union['GetResourceSharesTagFilterArgs', 'GetResourceSharesTagFilterArgsDict']] tag_filters: Specifies the tags attached to the resource share.
           
           The tag_filters structure is documented below.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['permissionId'] = permission_id
    __args__['region'] = region
    __args__['resourceOwner'] = resource_owner
    __args__['resourceShareIds'] = resource_share_ids
    __args__['status'] = status
    __args__['tagFilters'] = tag_filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ram/getResourceShares:getResourceShares', __args__, opts=opts, typ=GetResourceSharesResult)
    return __ret__.apply(lambda __response__: GetResourceSharesResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        permission_id=pulumi.get(__response__, 'permission_id'),
        region=pulumi.get(__response__, 'region'),
        resource_owner=pulumi.get(__response__, 'resource_owner'),
        resource_share_ids=pulumi.get(__response__, 'resource_share_ids'),
        resource_shares=pulumi.get(__response__, 'resource_shares'),
        status=pulumi.get(__response__, 'status'),
        tag_filters=pulumi.get(__response__, 'tag_filters')))
