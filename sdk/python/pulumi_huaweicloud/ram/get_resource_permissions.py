# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourcePermissionsResult',
    'AwaitableGetResourcePermissionsResult',
    'get_resource_permissions',
    'get_resource_permissions_output',
]

@pulumi.output_type
class GetResourcePermissionsResult:
    """
    A collection of values returned by getResourcePermissions.
    """
    def __init__(__self__, id=None, name=None, permission_type=None, permissions=None, resource_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permission_type and not isinstance(permission_type, str):
            raise TypeError("Expected argument 'permission_type' to be a str")
        pulumi.set(__self__, "permission_type", permission_type)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of RAM permission.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="permissionType")
    def permission_type(self) -> Optional[_builtins.str]:
        """
        Indicates the permission type.
        """
        return pulumi.get(self, "permission_type")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetResourcePermissionsPermissionResult']:
        """
        Indicates the list of the RAM permissions
        The permissions structure is documented below.
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        Indicates the resource type of RAM permission.
        """
        return pulumi.get(self, "resource_type")


class AwaitableGetResourcePermissionsResult(GetResourcePermissionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourcePermissionsResult(
            id=self.id,
            name=self.name,
            permission_type=self.permission_type,
            permissions=self.permissions,
            resource_type=self.resource_type)


def get_resource_permissions(name: Optional[_builtins.str] = None,
                             permission_type: Optional[_builtins.str] = None,
                             resource_type: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourcePermissionsResult:
    """
    Use this data source to get the list of RAM permissions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_type = config.require_object("resourceType")
    name = config.require_object("name")
    test = huaweicloud.ram.get_resource_permissions(resource_type=resource_type,
        name=name)
    ```


    :param _builtins.str name: Specifies the name of RAM permission in which to query the data source.
    :param _builtins.str permission_type: Specifies the type of the permission. Valid values are as follows:
           + **RAM_MANAGED**: Indicates RAM managed permissions.
           + **CUSTOMER_MANAGED**: Indicates permissions created by tenants.
           + **ALL**: Indicates both permission types.
           
           Defaults to **ALL**.
    :param _builtins.str resource_type: Specifies the resource type of RAM permission in which to query the data source.
           Valid values are **vpc:subnets**, **dns:zone** and **dns:resolverRule**.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['permissionType'] = permission_type
    __args__['resourceType'] = resource_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ram/getResourcePermissions:getResourcePermissions', __args__, opts=opts, typ=GetResourcePermissionsResult).value

    return AwaitableGetResourcePermissionsResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        permission_type=pulumi.get(__ret__, 'permission_type'),
        permissions=pulumi.get(__ret__, 'permissions'),
        resource_type=pulumi.get(__ret__, 'resource_type'))
def get_resource_permissions_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    permission_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourcePermissionsResult]:
    """
    Use this data source to get the list of RAM permissions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_type = config.require_object("resourceType")
    name = config.require_object("name")
    test = huaweicloud.ram.get_resource_permissions(resource_type=resource_type,
        name=name)
    ```


    :param _builtins.str name: Specifies the name of RAM permission in which to query the data source.
    :param _builtins.str permission_type: Specifies the type of the permission. Valid values are as follows:
           + **RAM_MANAGED**: Indicates RAM managed permissions.
           + **CUSTOMER_MANAGED**: Indicates permissions created by tenants.
           + **ALL**: Indicates both permission types.
           
           Defaults to **ALL**.
    :param _builtins.str resource_type: Specifies the resource type of RAM permission in which to query the data source.
           Valid values are **vpc:subnets**, **dns:zone** and **dns:resolverRule**.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['permissionType'] = permission_type
    __args__['resourceType'] = resource_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ram/getResourcePermissions:getResourcePermissions', __args__, opts=opts, typ=GetResourcePermissionsResult)
    return __ret__.apply(lambda __response__: GetResourcePermissionsResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        permission_type=pulumi.get(__response__, 'permission_type'),
        permissions=pulumi.get(__response__, 'permissions'),
        resource_type=pulumi.get(__response__, 'resource_type')))
