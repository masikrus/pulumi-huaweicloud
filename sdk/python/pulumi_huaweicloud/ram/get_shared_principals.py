# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSharedPrincipalsResult',
    'AwaitableGetSharedPrincipalsResult',
    'get_shared_principals',
    'get_shared_principals_output',
]

@pulumi.output_type
class GetSharedPrincipalsResult:
    """
    A collection of values returned by getSharedPrincipals.
    """
    def __init__(__self__, id=None, principal=None, resource_owner=None, resource_share_id=None, resource_urn=None, shared_principals=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if principal and not isinstance(principal, str):
            raise TypeError("Expected argument 'principal' to be a str")
        pulumi.set(__self__, "principal", principal)
        if resource_owner and not isinstance(resource_owner, str):
            raise TypeError("Expected argument 'resource_owner' to be a str")
        pulumi.set(__self__, "resource_owner", resource_owner)
        if resource_share_id and not isinstance(resource_share_id, str):
            raise TypeError("Expected argument 'resource_share_id' to be a str")
        pulumi.set(__self__, "resource_share_id", resource_share_id)
        if resource_urn and not isinstance(resource_urn, str):
            raise TypeError("Expected argument 'resource_urn' to be a str")
        pulumi.set(__self__, "resource_urn", resource_urn)
        if shared_principals and not isinstance(shared_principals, list):
            raise TypeError("Expected argument 'shared_principals' to be a list")
        pulumi.set(__self__, "shared_principals", shared_principals)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def principal(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "principal")

    @_builtins.property
    @pulumi.getter(name="resourceOwner")
    def resource_owner(self) -> _builtins.str:
        return pulumi.get(self, "resource_owner")

    @_builtins.property
    @pulumi.getter(name="resourceShareId")
    def resource_share_id(self) -> Optional[_builtins.str]:
        """
        The resource share ID.
        """
        return pulumi.get(self, "resource_share_id")

    @_builtins.property
    @pulumi.getter(name="resourceUrn")
    def resource_urn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_urn")

    @_builtins.property
    @pulumi.getter(name="sharedPrincipals")
    def shared_principals(self) -> Sequence['outputs.GetSharedPrincipalsSharedPrincipalResult']:
        """
        The list of shared principals.
        The shared_principals structure is documented below.
        """
        return pulumi.get(self, "shared_principals")


class AwaitableGetSharedPrincipalsResult(GetSharedPrincipalsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSharedPrincipalsResult(
            id=self.id,
            principal=self.principal,
            resource_owner=self.resource_owner,
            resource_share_id=self.resource_share_id,
            resource_urn=self.resource_urn,
            shared_principals=self.shared_principals)


def get_shared_principals(principal: Optional[_builtins.str] = None,
                          resource_owner: Optional[_builtins.str] = None,
                          resource_share_id: Optional[_builtins.str] = None,
                          resource_urn: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSharedPrincipalsResult:
    """
    Use this data source to get the list of RAM shared principals.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_urn = config.require_object("resourceUrn")
    test = huaweicloud.ram.get_shared_principals(resource_owner="self",
        resource_urn=resource_urn)
    ```


    :param _builtins.str principal: Specifies the principal associated with the RAM share.
           The principal could be account ID or organization ID.
           + If set to account ID, please make sure the account ID is not your owner account ID.
           + If set to organization ID, you first need to use the RAM console to enable sharing with Organization. Please refer
           to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
    :param _builtins.str resource_owner: Specifies the owner associated with the RAM share.
           Value options are as follows:
           + **self**: Shared to other users by myself.
           + **other-accounts**: Shared to me by other users.
    :param _builtins.str resource_share_id: Specifies the ID of resource share.
    :param _builtins.str resource_urn: Specifies the resources urn associated with the
           RAM share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
    """
    __args__ = dict()
    __args__['principal'] = principal
    __args__['resourceOwner'] = resource_owner
    __args__['resourceShareId'] = resource_share_id
    __args__['resourceUrn'] = resource_urn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ram/getSharedPrincipals:getSharedPrincipals', __args__, opts=opts, typ=GetSharedPrincipalsResult).value

    return AwaitableGetSharedPrincipalsResult(
        id=pulumi.get(__ret__, 'id'),
        principal=pulumi.get(__ret__, 'principal'),
        resource_owner=pulumi.get(__ret__, 'resource_owner'),
        resource_share_id=pulumi.get(__ret__, 'resource_share_id'),
        resource_urn=pulumi.get(__ret__, 'resource_urn'),
        shared_principals=pulumi.get(__ret__, 'shared_principals'))
def get_shared_principals_output(principal: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 resource_owner: Optional[pulumi.Input[_builtins.str]] = None,
                                 resource_share_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 resource_urn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSharedPrincipalsResult]:
    """
    Use this data source to get the list of RAM shared principals.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_urn = config.require_object("resourceUrn")
    test = huaweicloud.ram.get_shared_principals(resource_owner="self",
        resource_urn=resource_urn)
    ```


    :param _builtins.str principal: Specifies the principal associated with the RAM share.
           The principal could be account ID or organization ID.
           + If set to account ID, please make sure the account ID is not your owner account ID.
           + If set to organization ID, you first need to use the RAM console to enable sharing with Organization. Please refer
           to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
    :param _builtins.str resource_owner: Specifies the owner associated with the RAM share.
           Value options are as follows:
           + **self**: Shared to other users by myself.
           + **other-accounts**: Shared to me by other users.
    :param _builtins.str resource_share_id: Specifies the ID of resource share.
    :param _builtins.str resource_urn: Specifies the resources urn associated with the
           RAM share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
    """
    __args__ = dict()
    __args__['principal'] = principal
    __args__['resourceOwner'] = resource_owner
    __args__['resourceShareId'] = resource_share_id
    __args__['resourceUrn'] = resource_urn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ram/getSharedPrincipals:getSharedPrincipals', __args__, opts=opts, typ=GetSharedPrincipalsResult)
    return __ret__.apply(lambda __response__: GetSharedPrincipalsResult(
        id=pulumi.get(__response__, 'id'),
        principal=pulumi.get(__response__, 'principal'),
        resource_owner=pulumi.get(__response__, 'resource_owner'),
        resource_share_id=pulumi.get(__response__, 'resource_share_id'),
        resource_urn=pulumi.get(__response__, 'resource_urn'),
        shared_principals=pulumi.get(__response__, 'shared_principals')))
