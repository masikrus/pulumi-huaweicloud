# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceShareAssociationsResult',
    'AwaitableGetResourceShareAssociationsResult',
    'get_resource_share_associations',
    'get_resource_share_associations_output',
]

@pulumi.output_type
class GetResourceShareAssociationsResult:
    """
    A collection of values returned by getResourceShareAssociations.
    """
    def __init__(__self__, association_type=None, associations=None, id=None, principal=None, region=None, resource_ids=None, resource_share_ids=None, resource_urn=None, status=None):
        if association_type and not isinstance(association_type, str):
            raise TypeError("Expected argument 'association_type' to be a str")
        pulumi.set(__self__, "association_type", association_type)
        if associations and not isinstance(associations, list):
            raise TypeError("Expected argument 'associations' to be a list")
        pulumi.set(__self__, "associations", associations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if principal and not isinstance(principal, str):
            raise TypeError("Expected argument 'principal' to be a str")
        pulumi.set(__self__, "principal", principal)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_ids and not isinstance(resource_ids, list):
            raise TypeError("Expected argument 'resource_ids' to be a list")
        pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_share_ids and not isinstance(resource_share_ids, list):
            raise TypeError("Expected argument 'resource_share_ids' to be a list")
        pulumi.set(__self__, "resource_share_ids", resource_share_ids)
        if resource_urn and not isinstance(resource_urn, str):
            raise TypeError("Expected argument 'resource_urn' to be a str")
        pulumi.set(__self__, "resource_urn", resource_urn)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="associationType")
    def association_type(self) -> _builtins.str:
        """
        The entity type in the association.
        """
        return pulumi.get(self, "association_type")

    @_builtins.property
    @pulumi.getter
    def associations(self) -> Sequence['outputs.GetResourceShareAssociationsAssociationResult']:
        """
        The list of association details.
        """
        return pulumi.get(self, "associations")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def principal(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "principal")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "resource_ids")

    @_builtins.property
    @pulumi.getter(name="resourceShareIds")
    def resource_share_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "resource_share_ids")

    @_builtins.property
    @pulumi.getter(name="resourceUrn")
    def resource_urn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_urn")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the association.
        """
        return pulumi.get(self, "status")


class AwaitableGetResourceShareAssociationsResult(GetResourceShareAssociationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceShareAssociationsResult(
            association_type=self.association_type,
            associations=self.associations,
            id=self.id,
            principal=self.principal,
            region=self.region,
            resource_ids=self.resource_ids,
            resource_share_ids=self.resource_share_ids,
            resource_urn=self.resource_urn,
            status=self.status)


def get_resource_share_associations(association_type: Optional[_builtins.str] = None,
                                    principal: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    resource_ids: Optional[Sequence[_builtins.str]] = None,
                                    resource_share_ids: Optional[Sequence[_builtins.str]] = None,
                                    resource_urn: Optional[_builtins.str] = None,
                                    status: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceShareAssociationsResult:
    """
    Use this data source to get the list of principals and resources associated with the RAM shared resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    association_type = config.require_object("associationType")
    test = huaweicloud.ram.get_resource_share_associations(association_type=association_type)
    ```


    :param _builtins.str association_type: Specifies the association type. Valid values are **principal** and **resource**.
    :param _builtins.str principal: Specifies the principal associated with the resource share.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] resource_ids: Specifies the list of resource IDs.
    :param Sequence[_builtins.str] resource_share_ids: Specifies the list of resource share IDs.
    :param _builtins.str resource_urn: Specifies the URN of the resource associated with the resource share.
    :param _builtins.str status: Specifies the status of the association.
    """
    __args__ = dict()
    __args__['associationType'] = association_type
    __args__['principal'] = principal
    __args__['region'] = region
    __args__['resourceIds'] = resource_ids
    __args__['resourceShareIds'] = resource_share_ids
    __args__['resourceUrn'] = resource_urn
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ram/getResourceShareAssociations:getResourceShareAssociations', __args__, opts=opts, typ=GetResourceShareAssociationsResult).value

    return AwaitableGetResourceShareAssociationsResult(
        association_type=pulumi.get(__ret__, 'association_type'),
        associations=pulumi.get(__ret__, 'associations'),
        id=pulumi.get(__ret__, 'id'),
        principal=pulumi.get(__ret__, 'principal'),
        region=pulumi.get(__ret__, 'region'),
        resource_ids=pulumi.get(__ret__, 'resource_ids'),
        resource_share_ids=pulumi.get(__ret__, 'resource_share_ids'),
        resource_urn=pulumi.get(__ret__, 'resource_urn'),
        status=pulumi.get(__ret__, 'status'))
def get_resource_share_associations_output(association_type: Optional[pulumi.Input[_builtins.str]] = None,
                                           principal: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           resource_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                           resource_share_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                           resource_urn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceShareAssociationsResult]:
    """
    Use this data source to get the list of principals and resources associated with the RAM shared resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    association_type = config.require_object("associationType")
    test = huaweicloud.ram.get_resource_share_associations(association_type=association_type)
    ```


    :param _builtins.str association_type: Specifies the association type. Valid values are **principal** and **resource**.
    :param _builtins.str principal: Specifies the principal associated with the resource share.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[_builtins.str] resource_ids: Specifies the list of resource IDs.
    :param Sequence[_builtins.str] resource_share_ids: Specifies the list of resource share IDs.
    :param _builtins.str resource_urn: Specifies the URN of the resource associated with the resource share.
    :param _builtins.str status: Specifies the status of the association.
    """
    __args__ = dict()
    __args__['associationType'] = association_type
    __args__['principal'] = principal
    __args__['region'] = region
    __args__['resourceIds'] = resource_ids
    __args__['resourceShareIds'] = resource_share_ids
    __args__['resourceUrn'] = resource_urn
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ram/getResourceShareAssociations:getResourceShareAssociations', __args__, opts=opts, typ=GetResourceShareAssociationsResult)
    return __ret__.apply(lambda __response__: GetResourceShareAssociationsResult(
        association_type=pulumi.get(__response__, 'association_type'),
        associations=pulumi.get(__response__, 'associations'),
        id=pulumi.get(__response__, 'id'),
        principal=pulumi.get(__response__, 'principal'),
        region=pulumi.get(__response__, 'region'),
        resource_ids=pulumi.get(__response__, 'resource_ids'),
        resource_share_ids=pulumi.get(__response__, 'resource_share_ids'),
        resource_urn=pulumi.get(__response__, 'resource_urn'),
        status=pulumi.get(__response__, 'status')))
