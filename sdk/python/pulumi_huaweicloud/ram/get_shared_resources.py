# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSharedResourcesResult',
    'AwaitableGetSharedResourcesResult',
    'get_shared_resources',
    'get_shared_resources_output',
]

@pulumi.output_type
class GetSharedResourcesResult:
    """
    A collection of values returned by getSharedResources.
    """
    def __init__(__self__, id=None, principal=None, resource_ids=None, resource_owner=None, resource_region=None, resource_share_ids=None, resource_type=None, resource_urns=None, shared_resources=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if principal and not isinstance(principal, str):
            raise TypeError("Expected argument 'principal' to be a str")
        pulumi.set(__self__, "principal", principal)
        if resource_ids and not isinstance(resource_ids, list):
            raise TypeError("Expected argument 'resource_ids' to be a list")
        pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_owner and not isinstance(resource_owner, str):
            raise TypeError("Expected argument 'resource_owner' to be a str")
        pulumi.set(__self__, "resource_owner", resource_owner)
        if resource_region and not isinstance(resource_region, str):
            raise TypeError("Expected argument 'resource_region' to be a str")
        pulumi.set(__self__, "resource_region", resource_region)
        if resource_share_ids and not isinstance(resource_share_ids, list):
            raise TypeError("Expected argument 'resource_share_ids' to be a list")
        pulumi.set(__self__, "resource_share_ids", resource_share_ids)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if resource_urns and not isinstance(resource_urns, list):
            raise TypeError("Expected argument 'resource_urns' to be a list")
        pulumi.set(__self__, "resource_urns", resource_urns)
        if shared_resources and not isinstance(shared_resources, list):
            raise TypeError("Expected argument 'shared_resources' to be a list")
        pulumi.set(__self__, "shared_resources", shared_resources)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def principal(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "principal")

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "resource_ids")

    @_builtins.property
    @pulumi.getter(name="resourceOwner")
    def resource_owner(self) -> _builtins.str:
        return pulumi.get(self, "resource_owner")

    @_builtins.property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_region")

    @_builtins.property
    @pulumi.getter(name="resourceShareIds")
    def resource_share_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "resource_share_ids")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The resource type associated with the RAM share.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="resourceUrns")
    def resource_urns(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "resource_urns")

    @_builtins.property
    @pulumi.getter(name="sharedResources")
    def shared_resources(self) -> Sequence['outputs.GetSharedResourcesSharedResourceResult']:
        """
        The list of shared resources.
        The shared_resources structure is documented below.
        """
        return pulumi.get(self, "shared_resources")


class AwaitableGetSharedResourcesResult(GetSharedResourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSharedResourcesResult(
            id=self.id,
            principal=self.principal,
            resource_ids=self.resource_ids,
            resource_owner=self.resource_owner,
            resource_region=self.resource_region,
            resource_share_ids=self.resource_share_ids,
            resource_type=self.resource_type,
            resource_urns=self.resource_urns,
            shared_resources=self.shared_resources)


def get_shared_resources(principal: Optional[_builtins.str] = None,
                         resource_ids: Optional[Sequence[_builtins.str]] = None,
                         resource_owner: Optional[_builtins.str] = None,
                         resource_region: Optional[_builtins.str] = None,
                         resource_share_ids: Optional[Sequence[_builtins.str]] = None,
                         resource_type: Optional[_builtins.str] = None,
                         resource_urns: Optional[Sequence[_builtins.str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSharedResourcesResult:
    """
    Use this data source to get the list of RAM shared resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ram.get_shared_resources(resource_owner="self")
    ```


    :param _builtins.str principal: Specifies the principal associated with the RAM share.
           The principal could be account ID or organization ID.
           + If set to account ID, please make sure the account ID is not your owner account ID.
           + If set to organization ID, you first need to use the RAM console to enable sharing with Organization. Please refer
           to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
    :param Sequence[_builtins.str] resource_ids: Specifies the list of resource IDs associated with the RAM share.
    :param _builtins.str resource_owner: Specifies the owner associated with the RAM share.
           Value options are as follows:
           + **self**: Shared to other users by myself.
           + **other-accounts**: Shared to me by other users.
    :param _builtins.str resource_region: Specifies the resource region associated with the RAM share.
    :param Sequence[_builtins.str] resource_share_ids: Specifies the list of resource share IDs.
    :param _builtins.str resource_type: Specifies the resource type associated with the RAM share.
    :param Sequence[_builtins.str] resource_urns: Specifies one or more resources urns associated with the
           RAM share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
           Sharable cloud services and resource types refer to
           [document](https://support.huaweicloud.com/intl/en-us/productdesc-ram/ram_01_0007.html).
    """
    __args__ = dict()
    __args__['principal'] = principal
    __args__['resourceIds'] = resource_ids
    __args__['resourceOwner'] = resource_owner
    __args__['resourceRegion'] = resource_region
    __args__['resourceShareIds'] = resource_share_ids
    __args__['resourceType'] = resource_type
    __args__['resourceUrns'] = resource_urns
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:ram/getSharedResources:getSharedResources', __args__, opts=opts, typ=GetSharedResourcesResult).value

    return AwaitableGetSharedResourcesResult(
        id=pulumi.get(__ret__, 'id'),
        principal=pulumi.get(__ret__, 'principal'),
        resource_ids=pulumi.get(__ret__, 'resource_ids'),
        resource_owner=pulumi.get(__ret__, 'resource_owner'),
        resource_region=pulumi.get(__ret__, 'resource_region'),
        resource_share_ids=pulumi.get(__ret__, 'resource_share_ids'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        resource_urns=pulumi.get(__ret__, 'resource_urns'),
        shared_resources=pulumi.get(__ret__, 'shared_resources'))
def get_shared_resources_output(principal: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                resource_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                resource_owner: Optional[pulumi.Input[_builtins.str]] = None,
                                resource_region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                resource_share_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                resource_urns: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSharedResourcesResult]:
    """
    Use this data source to get the list of RAM shared resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.ram.get_shared_resources(resource_owner="self")
    ```


    :param _builtins.str principal: Specifies the principal associated with the RAM share.
           The principal could be account ID or organization ID.
           + If set to account ID, please make sure the account ID is not your owner account ID.
           + If set to organization ID, you first need to use the RAM console to enable sharing with Organization. Please refer
           to the [document](https://support.huaweicloud.com/intl/en-us/qs-ram/ram_02_0004.html).
    :param Sequence[_builtins.str] resource_ids: Specifies the list of resource IDs associated with the RAM share.
    :param _builtins.str resource_owner: Specifies the owner associated with the RAM share.
           Value options are as follows:
           + **self**: Shared to other users by myself.
           + **other-accounts**: Shared to me by other users.
    :param _builtins.str resource_region: Specifies the resource region associated with the RAM share.
    :param Sequence[_builtins.str] resource_share_ids: Specifies the list of resource share IDs.
    :param _builtins.str resource_type: Specifies the resource type associated with the RAM share.
    :param Sequence[_builtins.str] resource_urns: Specifies one or more resources urns associated with the
           RAM share. The format of URN is: `<service-name>:<region>:<account-id>:<type-name>:<resource-path>`.
           Sharable cloud services and resource types refer to
           [document](https://support.huaweicloud.com/intl/en-us/productdesc-ram/ram_01_0007.html).
    """
    __args__ = dict()
    __args__['principal'] = principal
    __args__['resourceIds'] = resource_ids
    __args__['resourceOwner'] = resource_owner
    __args__['resourceRegion'] = resource_region
    __args__['resourceShareIds'] = resource_share_ids
    __args__['resourceType'] = resource_type
    __args__['resourceUrns'] = resource_urns
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:ram/getSharedResources:getSharedResources', __args__, opts=opts, typ=GetSharedResourcesResult)
    return __ret__.apply(lambda __response__: GetSharedResourcesResult(
        id=pulumi.get(__response__, 'id'),
        principal=pulumi.get(__response__, 'principal'),
        resource_ids=pulumi.get(__response__, 'resource_ids'),
        resource_owner=pulumi.get(__response__, 'resource_owner'),
        resource_region=pulumi.get(__response__, 'resource_region'),
        resource_share_ids=pulumi.get(__response__, 'resource_share_ids'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        resource_urns=pulumi.get(__response__, 'resource_urns'),
        shared_resources=pulumi.get(__response__, 'shared_resources')))
