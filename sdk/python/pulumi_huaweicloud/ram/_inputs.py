# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ResourceShareAssociatedPermissionArgs',
    'ResourceShareAssociatedPermissionArgsDict',
    'GetResourceSharesTagFilterArgs',
    'GetResourceSharesTagFilterArgsDict',
]

MYPY = False

if not MYPY:
    class ResourceShareAssociatedPermissionArgsDict(TypedDict):
        permission_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The permission ID.
        """
        permission_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The permission name.
        """
        resource_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The resource type of the permission.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The status of the permission.
        """
elif False:
    ResourceShareAssociatedPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceShareAssociatedPermissionArgs:
    def __init__(__self__, *,
                 permission_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] permission_id: The permission ID.
        :param pulumi.Input[_builtins.str] permission_name: The permission name.
        :param pulumi.Input[_builtins.str] resource_type: The resource type of the permission.
        :param pulumi.Input[_builtins.str] status: The status of the permission.
        """
        if permission_id is not None:
            pulumi.set(__self__, "permission_id", permission_id)
        if permission_name is not None:
            pulumi.set(__self__, "permission_name", permission_name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="permissionId")
    def permission_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The permission ID.
        """
        return pulumi.get(self, "permission_id")

    @permission_id.setter
    def permission_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionName")
    def permission_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The permission name.
        """
        return pulumi.get(self, "permission_name")

    @permission_name.setter
    def permission_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type of the permission.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the permission.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class GetResourceSharesTagFilterArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the identifier or name of the tag key.
        """
        values: NotRequired[Sequence[_builtins.str]]
        """
        Specifies the list of values for the tag key.
        """
elif False:
    GetResourceSharesTagFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourceSharesTagFilterArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the identifier or name of the tag key.
        :param Sequence[_builtins.str] values: Specifies the list of values for the tag key.
        """
        pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the identifier or name of the tag key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of values for the tag key.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "values", value)


