# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ComponentActionMetadata',
    'ComponentConfiguration',
    'ComponentConfigurationsItem',
    'ComponentDeploymentMetadata',
    'ComponentMetadata',
    'ComponentSpec',
    'ComponentSpecBuild',
    'ComponentSpecBuildArchive',
    'ComponentSpecResourceLimit',
    'ComponentSpecSource',
    'ComponentSpecSourceCode',
    'NotificationRuleNotification',
    'NotificationRuleScope',
    'NotificationRuleTriggerPolicy',
    'TimerRuleApplication',
    'TimerRuleComponent',
    'GetApplicationsApplicationResult',
    'GetComponentsComponentResult',
    'GetComponentsComponentSpecResult',
    'GetEnvironmentsEnvironmentResult',
    'GetNotificationRulesRuleResult',
    'GetNotificationRulesRuleNotificationResult',
    'GetNotificationRulesRuleScopeResult',
    'GetNotificationRulesRuleTriggerPolicyResult',
]

@pulumi.output_type
class ComponentActionMetadata(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 annotations: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str name: Specifies the action name.  
               The valid values are as follows:
               + **deploy**
               + **configure**
               + **upgrade**
               + **rollback**
               + **start**
               + **restart**
               + **stop**
        :param Mapping[str, _builtins.str] annotations: Specifies the key/value pairs parameters related to the component to be operated.  
               Currently, only `version` is supported.
               
               > If the `annotations` parameter specified in this resource is inconsistent with the `cae.Component` resource,
               you can handle the changes in the `cae.Component` resource by `lifecycle.ignore_changes` or manual synchronization.
        """
        pulumi.set(__self__, "name", name)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the action name.  
        The valid values are as follows:
        + **deploy**
        + **configure**
        + **upgrade**
        + **rollback**
        + **start**
        + **restart**
        + **stop**
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs parameters related to the component to be operated.  
        Currently, only `version` is supported.

        > If the `annotations` parameter specified in this resource is inconsistent with the `cae.Component` resource,
        you can handle the changes in the `cae.Component` resource by `lifecycle.ignore_changes` or manual synchronization.
        """
        return pulumi.get(self, "annotations")


@pulumi.output_type
class ComponentConfiguration(dict):
    def __init__(__self__, *,
                 data: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str data: Specifies the configuration detail, in JSON format.  
               Please following [reference documentation](https://support.huaweicloud.com/api-cae/CreateComponentConfiguration.html#CreateComponentConfiguration__request_ConfigurationData).
        :param _builtins.str type: Specifies the type of the component configuration.  
               Please following [reference documentation](https://support.huaweicloud.com/api-cae/CreateComponentConfiguration.html#CreateComponentConfiguration__request_ConfigurationItem).
        """
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def data(self) -> _builtins.str:
        """
        Specifies the configuration detail, in JSON format.  
        Please following [reference documentation](https://support.huaweicloud.com/api-cae/CreateComponentConfiguration.html#CreateComponentConfiguration__request_ConfigurationData).
        """
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the component configuration.  
        Please following [reference documentation](https://support.huaweicloud.com/api-cae/CreateComponentConfiguration.html#CreateComponentConfiguration__request_ConfigurationItem).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ComponentConfigurationsItem(dict):
    def __init__(__self__, *,
                 data: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str data: Specifies the configuration detail, in JSON format.  
               Please following [reference documentation](https://support.huaweicloud.com/api-cae/CreateComponentConfiguration.html#CreateComponentConfiguration__request_ConfigurationData).
        :param _builtins.str type: Specifies the type of the configuration.  
               Please following [reference documentation](https://support.huaweicloud.com/api-cae/CreateComponentConfiguration.html#CreateComponentConfiguration__request_ConfigurationItem).
        """
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def data(self) -> _builtins.str:
        """
        Specifies the configuration detail, in JSON format.  
        Please following [reference documentation](https://support.huaweicloud.com/api-cae/CreateComponentConfiguration.html#CreateComponentConfiguration__request_ConfigurationData).
        """
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the configuration.  
        Please following [reference documentation](https://support.huaweicloud.com/api-cae/CreateComponentConfiguration.html#CreateComponentConfiguration__request_ConfigurationItem).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ComponentDeploymentMetadata(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 annotations: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str name: The action name.
        :param Mapping[str, _builtins.str] annotations: The key/value pairs parameters related to the component to be operated.
        """
        pulumi.set(__self__, "name", name)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The action name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The key/value pairs parameters related to the component to be operated.
        """
        return pulumi.get(self, "annotations")


@pulumi.output_type
class ComponentMetadata(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 name: _builtins.str):
        """
        :param Mapping[str, _builtins.str] annotations: Specifies the key/value pairs parameters related to the component.
               Currently, only `version` is supported and required.
               The format is `A.B.C` or `A.B.C.D`, A, B, C and D must be integer. e.g.`1.0.0` or `1.0.0.0`
               
               <a name="component_spec"></a>
               The `spec` block supports:
        :param _builtins.str name: Specifies the name of the component.
               The name can contain `4` to `32` characters, only lowercase letters, digits, and hyphens (-) allowed.
               The name must start with a lowercase letter and end with lowercase letters and digits.
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the key/value pairs parameters related to the component.
        Currently, only `version` is supported and required.
        The format is `A.B.C` or `A.B.C.D`, A, B, C and D must be integer. e.g.`1.0.0` or `1.0.0.0`

        <a name="component_spec"></a>
        The `spec` block supports:
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the component.
        The name can contain `4` to `32` characters, only lowercase letters, digits, and hyphens (-) allowed.
        The name must start with a lowercase letter and end with lowercase letters and digits.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ComponentSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceLimit":
            suggest = "resource_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 replica: _builtins.int,
                 resource_limit: 'outputs.ComponentSpecResourceLimit',
                 runtime: _builtins.str,
                 source: 'outputs.ComponentSpecSource',
                 build: Optional['outputs.ComponentSpecBuild'] = None):
        """
        :param _builtins.int replica: Specifies the instance number of the component. The valid value ranges from `1` to `99`.
        :param 'ComponentSpecResourceLimitArgs' resource_limit: Specifies instance specification corresponding to the component.
               The resource_limit structure is documented below.
        :param _builtins.str runtime: Specifies the component runtime to match. The valid values are **Docker**, **Java8**,
               **Java11**, **Java17**, **Tomcat8**, **Tomcat9**, **Python3**, **Nodejs8**, **Nodejs14**, **Nodejs16**, and **Php7**.
        :param 'ComponentSpecSourceArgs' source: Specifies the code source configuration information corresponding to the component.
               The source structure is documented below.
        :param 'ComponentSpecBuildArgs' build: Specifies the build information of the code source corresponding to the component.
               The build structure is documented below.
               
               <a name="component_spec_resource_limit"></a>
               The `resource_limit` block supports:
        """
        pulumi.set(__self__, "replica", replica)
        pulumi.set(__self__, "resource_limit", resource_limit)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "source", source)
        if build is not None:
            pulumi.set(__self__, "build", build)

    @_builtins.property
    @pulumi.getter
    def replica(self) -> _builtins.int:
        """
        Specifies the instance number of the component. The valid value ranges from `1` to `99`.
        """
        return pulumi.get(self, "replica")

    @_builtins.property
    @pulumi.getter(name="resourceLimit")
    def resource_limit(self) -> 'outputs.ComponentSpecResourceLimit':
        """
        Specifies instance specification corresponding to the component.
        The resource_limit structure is documented below.
        """
        return pulumi.get(self, "resource_limit")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> _builtins.str:
        """
        Specifies the component runtime to match. The valid values are **Docker**, **Java8**,
        **Java11**, **Java17**, **Tomcat8**, **Tomcat9**, **Python3**, **Nodejs8**, **Nodejs14**, **Nodejs16**, and **Php7**.
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter
    def source(self) -> 'outputs.ComponentSpecSource':
        """
        Specifies the code source configuration information corresponding to the component.
        The source structure is documented below.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def build(self) -> Optional['outputs.ComponentSpecBuild']:
        """
        Specifies the build information of the code source corresponding to the component.
        The build structure is documented below.

        <a name="component_spec_resource_limit"></a>
        The `resource_limit` block supports:
        """
        return pulumi.get(self, "build")


@pulumi.output_type
class ComponentSpecBuild(dict):
    def __init__(__self__, *,
                 archive: 'outputs.ComponentSpecBuildArchive',
                 parameters: Mapping[str, _builtins.str]):
        """
        :param 'ComponentSpecBuildArchiveArgs' archive: Specifies product configuration after building the code source corresponding to component.
               The archive structure is documented below.
        :param Mapping[str, _builtins.str] parameters: Specifies the key/value pairs configuration information required to build the code source
               corresponding to the component.
               It is required when `source.type` is **code** or **softwarePackage**.
               + **base_image**: Base image address.
               + **build_cmd**: Custom build command.
               + **dockerfile_content**: Custom dockerfile content.
               + **dockerfile_path**: Custom dockerfile file path.
               + **artifact_name**: Select and run the specified JAR package from multiple JAR packages generated during Maven build.
               The JAR package end with **.jar**. Fuzzy match is supported. e.g. `demo-1.0.jar`, `demo*.jar`.
               
               > `build_cmd`, `dockerfile_path` and `artifact_name` parameters are valid only when `source.type` is set to `code`.
               `dockerfile_path` and `artifact_name` parameters can't be set at the same time.
               `dockerfile_content` is valid only when `source.type` is set to `softwarePackage`.
               
               <a name="component_spec_build_archive"></a>
               The `archive` block supports:
        """
        pulumi.set(__self__, "archive", archive)
        pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def archive(self) -> 'outputs.ComponentSpecBuildArchive':
        """
        Specifies product configuration after building the code source corresponding to component.
        The archive structure is documented below.
        """
        return pulumi.get(self, "archive")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the key/value pairs configuration information required to build the code source
        corresponding to the component.
        It is required when `source.type` is **code** or **softwarePackage**.
        + **base_image**: Base image address.
        + **build_cmd**: Custom build command.
        + **dockerfile_content**: Custom dockerfile content.
        + **dockerfile_path**: Custom dockerfile file path.
        + **artifact_name**: Select and run the specified JAR package from multiple JAR packages generated during Maven build.
        The JAR package end with **.jar**. Fuzzy match is supported. e.g. `demo-1.0.jar`, `demo*.jar`.

        > `build_cmd`, `dockerfile_path` and `artifact_name` parameters are valid only when `source.type` is set to `code`.
        `dockerfile_path` and `artifact_name` parameters can't be set at the same time.
        `dockerfile_content` is valid only when `source.type` is set to `softwarePackage`.

        <a name="component_spec_build_archive"></a>
        The `archive` block supports:
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ComponentSpecBuildArchive(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactNamespace":
            suggest = "artifact_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentSpecBuildArchive. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentSpecBuildArchive.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentSpecBuildArchive.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_namespace: _builtins.str):
        """
        :param _builtins.str artifact_namespace: Specifies the name of the SWR organization after the code source
               corresponding to component is built.
               
               <a name="component_configurations"></a>
               The `configurations` block supports:
        """
        pulumi.set(__self__, "artifact_namespace", artifact_namespace)

    @_builtins.property
    @pulumi.getter(name="artifactNamespace")
    def artifact_namespace(self) -> _builtins.str:
        """
        Specifies the name of the SWR organization after the code source
        corresponding to component is built.

        <a name="component_configurations"></a>
        The `configurations` block supports:
        """
        return pulumi.get(self, "artifact_namespace")


@pulumi.output_type
class ComponentSpecResourceLimit(dict):
    def __init__(__self__, *,
                 cpu: _builtins.str,
                 memory: _builtins.str):
        """
        :param _builtins.str cpu: Specifies CPU core. The valid values are **500m**, **1000m** and **2000m**.
        :param _builtins.str memory: Specifies memory size. The valid values are **1Gi**, **2Gi** and **4Gi**.
               
               > If `cpu` parameter is set to `500m`, this parameter cannot be set to `4Gi`.
               
               <a name="component_spec_source"></a>
               The `source` block supports:
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.str:
        """
        Specifies CPU core. The valid values are **500m**, **1000m** and **2000m**.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Specifies memory size. The valid values are **1Gi**, **2Gi** and **4Gi**.

        > If `cpu` parameter is set to `500m`, this parameter cannot be set to `4Gi`.

        <a name="component_spec_source"></a>
        The `source` block supports:
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class ComponentSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subType":
            suggest = "sub_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 url: _builtins.str,
                 code: Optional['outputs.ComponentSpecSourceCode'] = None,
                 sub_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Specifies the type of the component configuration.  
               Please following [reference documentation](https://support.huaweicloud.com/api-cae/CreateComponentConfiguration.html#CreateComponentConfiguration__request_ConfigurationItem).
        :param _builtins.str url: Specifies code source URL corresponding to the component.
               + When `type` is **image**, the URL represents image URL.
               + When `type` is **code**, the URL represents Git URL.
               + When `type` is **softwarePackage**, the URL represents software package URL.
        :param 'ComponentSpecSourceCodeArgs' code: Specifies code source repository.
               The code structure is documented below.
               
               <a name="component_spec_source_code"></a>
               The `code` block supports:
        :param _builtins.str sub_type: Specifies the subtype corresponding to the code source.
               If the `source.type` is set to `code`, the `sub_type` parameter means different code repositories.
               The valid values are `DevCloud`, `GitHub`, `GitLab`, `Gitee` and `Bitbucket`.
               If the `source.type` is set to `softwarePackage`, the `sub_type` parameter means different software package repositories.
               The valid values are `BinObs` and `BinDevCloud`.
               
               > The parameter is required when `source.type` is set to `code` or `softwarePackage`.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if sub_type is not None:
            pulumi.set(__self__, "sub_type", sub_type)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the component configuration.  
        Please following [reference documentation](https://support.huaweicloud.com/api-cae/CreateComponentConfiguration.html#CreateComponentConfiguration__request_ConfigurationItem).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Specifies code source URL corresponding to the component.
        + When `type` is **image**, the URL represents image URL.
        + When `type` is **code**, the URL represents Git URL.
        + When `type` is **softwarePackage**, the URL represents software package URL.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional['outputs.ComponentSpecSourceCode']:
        """
        Specifies code source repository.
        The code structure is documented below.

        <a name="component_spec_source_code"></a>
        The `code` block supports:
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="subType")
    def sub_type(self) -> Optional[_builtins.str]:
        """
        Specifies the subtype corresponding to the code source.
        If the `source.type` is set to `code`, the `sub_type` parameter means different code repositories.
        The valid values are `DevCloud`, `GitHub`, `GitLab`, `Gitee` and `Bitbucket`.
        If the `source.type` is set to `softwarePackage`, the `sub_type` parameter means different software package repositories.
        The valid values are `BinObs` and `BinDevCloud`.

        > The parameter is required when `source.type` is set to `code` or `softwarePackage`.
        """
        return pulumi.get(self, "sub_type")


@pulumi.output_type
class ComponentSpecSourceCode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authName":
            suggest = "auth_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentSpecSourceCode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentSpecSourceCode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentSpecSourceCode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_name: _builtins.str,
                 branch: _builtins.str,
                 namespace: _builtins.str):
        """
        :param _builtins.str auth_name: Specifies the name of authorization corresponding to the code source.
        :param _builtins.str branch: Specifies the branch name of code source repository.
        :param _builtins.str namespace: Specifies the username or organization corresponding to the code source repository.
               
               <a name="component_spec_build"></a>
               The `build` block supports:
        """
        pulumi.set(__self__, "auth_name", auth_name)
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter(name="authName")
    def auth_name(self) -> _builtins.str:
        """
        Specifies the name of authorization corresponding to the code source.
        """
        return pulumi.get(self, "auth_name")

    @_builtins.property
    @pulumi.getter
    def branch(self) -> _builtins.str:
        """
        Specifies the branch name of code source repository.
        """
        return pulumi.get(self, "branch")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Specifies the username or organization corresponding to the code source repository.

        <a name="component_spec_build"></a>
        The `build` block supports:
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class NotificationRuleNotification(dict):
    def __init__(__self__, *,
                 endpoint: _builtins.str,
                 protocol: _builtins.str,
                 template: _builtins.str):
        """
        :param _builtins.str endpoint: Specifies the endpoint of the event notification.
               Changing this creates a new resource.
               + If `notification.type` is set to **sms**, the endpoint is a phone number.
               + If `notification.type` is set to **email**, the endpoint is a email address.
               + If `notification.type` is set to **wechat**, the endpoint is a webhook address starting with
               `https://qyapi.weixin.qq.com/cgi-bin/webhook/send`.
               you want to use this parameter, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
               to submit a service ticket to apply for it.
               For details about how to obtain a WeCom subscription endpoint, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/smn_faq/smn_faq_0027.html).
        :param _builtins.str protocol: Specifies the protocol of the event notification.
               Changing this creates a new resource.
               The valid values are as follows:
               + **sms**
               + **email**
               + **wechat**
        :param _builtins.str template: Specifies the template language of the event notification.
               Changing this creates a new resource.
               The valid values are as follows:
               + **EN**
               + **ZH**
               
               <a name="notification_rule_scope"></a>
               The `scope` block supports:
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "template", template)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        Specifies the endpoint of the event notification.
        Changing this creates a new resource.
        + If `notification.type` is set to **sms**, the endpoint is a phone number.
        + If `notification.type` is set to **email**, the endpoint is a email address.
        + If `notification.type` is set to **wechat**, the endpoint is a webhook address starting with
        `https://qyapi.weixin.qq.com/cgi-bin/webhook/send`.
        you want to use this parameter, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
        to submit a service ticket to apply for it.
        For details about how to obtain a WeCom subscription endpoint, please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/smn_faq/smn_faq_0027.html).
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol of the event notification.
        Changing this creates a new resource.
        The valid values are as follows:
        + **sms**
        + **email**
        + **wechat**
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def template(self) -> _builtins.str:
        """
        Specifies the template language of the event notification.
        Changing this creates a new resource.
        The valid values are as follows:
        + **EN**
        + **ZH**

        <a name="notification_rule_scope"></a>
        The `scope` block supports:
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class NotificationRuleScope(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 applications: Optional[Sequence[_builtins.str]] = None,
                 components: Optional[Sequence[_builtins.str]] = None,
                 environments: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str type: Specifies the type of the trigger.  
               The valid values are as follows:
               + **accumulative**
               + **immediately**
        :param Sequence[_builtins.str] applications: Specifies the list of the applications IDs.  
               This parameter is required and available only when the `scope.type` parameter is set to **applications**.
        :param Sequence[_builtins.str] components: Specifies the list of the components IDs.  
               This parameter is required and available only when the `scope.type` parameter is set to **components**.
               
               <a name="notification_rule_trigger_policy"></a>
               The `trigger_policy` block supports:
        :param Sequence[_builtins.str] environments: Specifies the list of the environment IDs.  
               This parameter is required and available only when the `scope.type` parameter is set to **environments**.
        """
        pulumi.set(__self__, "type", type)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if components is not None:
            pulumi.set(__self__, "components", components)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the trigger.  
        The valid values are as follows:
        + **accumulative**
        + **immediately**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def applications(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of the applications IDs.  
        This parameter is required and available only when the `scope.type` parameter is set to **applications**.
        """
        return pulumi.get(self, "applications")

    @_builtins.property
    @pulumi.getter
    def components(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of the components IDs.  
        This parameter is required and available only when the `scope.type` parameter is set to **components**.

        <a name="notification_rule_trigger_policy"></a>
        The `trigger_policy` block supports:
        """
        return pulumi.get(self, "components")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of the environment IDs.  
        This parameter is required and available only when the `scope.type` parameter is set to **environments**.
        """
        return pulumi.get(self, "environments")


@pulumi.output_type
class NotificationRuleTriggerPolicy(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 count: Optional[_builtins.int] = None,
                 operator: Optional[_builtins.str] = None,
                 period: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Specifies the type of the trigger.  
               The valid values are as follows:
               + **accumulative**
               + **immediately**
        :param _builtins.int count: Specifies the number of times the event occurred.  
               The valid value ranges from `1` to `100`.
               This parameter is required and available only when the `trigger_policy.type` parameter is set to **accumulative**.
        :param _builtins.str operator: Specifies the condition of the event notification.  
               The valid values are **>** and **>=**.
               This parameter is required and available only when the `trigger_policy.type` parameter is set to **accumulative**.
        :param _builtins.int period: Specifies the trigger period of the event. The unit is second.  
               This parameter is required and available only when the `trigger_policy.type` parameter is set to **accumulative**.
               The valid values are as follows:
               + **300**
               + **1200**
               + **3600**
               + **14400**
               + **86400**
        """
        pulumi.set(__self__, "type", type)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the trigger.  
        The valid values are as follows:
        + **accumulative**
        + **immediately**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def count(self) -> Optional[_builtins.int]:
        """
        Specifies the number of times the event occurred.  
        The valid value ranges from `1` to `100`.
        This parameter is required and available only when the `trigger_policy.type` parameter is set to **accumulative**.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        """
        Specifies the condition of the event notification.  
        The valid values are **>** and **>=**.
        This parameter is required and available only when the `trigger_policy.type` parameter is set to **accumulative**.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[_builtins.int]:
        """
        Specifies the trigger period of the event. The unit is second.  
        This parameter is required and available only when the `trigger_policy.type` parameter is set to **accumulative**.
        The valid values are as follows:
        + **300**
        + **1200**
        + **3600**
        + **14400**
        + **86400**
        """
        return pulumi.get(self, "period")


@pulumi.output_type
class TimerRuleApplication(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Specifies the ID of the component.
        :param _builtins.str name: Specifies the name of the component.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the component.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the component.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TimerRuleComponent(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Specifies the ID of the component.
        :param _builtins.str name: Specifies the name of the component.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the component.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the component.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the application.
        :param _builtins.str id: The ID of the application.
        :param _builtins.str name: Specifies the name of the application to be queried.
               The name can contain `2` to `64` characters, only lowercase letters, digits, and hyphens (-) allowed.
               The name must start with a lowercase letter and end with lowercase letters and digits.
        :param _builtins.str updated_at: The latest update time of the application.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the application.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the application to be queried.
        The name can contain `2` to `64` characters, only lowercase letters, digits, and hyphens (-) allowed.
        The name must start with a lowercase letter and end with lowercase letters and digits.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the application.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetComponentsComponentResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 created_at: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 specs: Sequence['outputs.GetComponentsComponentSpecResult'],
                 updated_at: _builtins.str):
        """
        :param Mapping[str, _builtins.str] annotations: The parameters of key/value pairs related to the component.
        :param _builtins.str created_at: The creation time of the component, in RFC3339 format.
        :param _builtins.str id: The ID of the component.
        :param _builtins.str name: The name of the component.
        :param Sequence['GetComponentsComponentSpecArgs'] specs: The configuration information of the component.  
               The spec structure is documented below.
        :param _builtins.str updated_at: The latest update time of the component, in RFC3339 format.
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "specs", specs)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        """
        The parameters of key/value pairs related to the component.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the component, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the component.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the component.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetComponentsComponentSpecResult']:
        """
        The configuration information of the component.  
        The spec structure is documented below.
        """
        return pulumi.get(self, "specs")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the component, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetComponentsComponentSpecResult(dict):
    def __init__(__self__, *,
                 available_replica: _builtins.int,
                 build: _builtins.str,
                 environment_id: _builtins.str,
                 image_url: _builtins.str,
                 replica: _builtins.int,
                 resource_limit: _builtins.str,
                 runtime: _builtins.str,
                 source: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.int available_replica: The available instance number of the component.
        :param _builtins.str build: The build information of the code source corresponding to the component.
        :param _builtins.str environment_id: Specifies the ID of the environment to which the components belong.
        :param _builtins.str image_url: The image URL that component used.
        :param _builtins.int replica: The instance number of the component.
        :param _builtins.str resource_limit: The instance specification corresponding to the component.
        :param _builtins.str runtime: The component runtime.
        :param _builtins.str source: The code source configuration information corresponding to the component.
        :param _builtins.str status: The status of the component.
        """
        pulumi.set(__self__, "available_replica", available_replica)
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "image_url", image_url)
        pulumi.set(__self__, "replica", replica)
        pulumi.set(__self__, "resource_limit", resource_limit)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availableReplica")
    def available_replica(self) -> _builtins.int:
        """
        The available instance number of the component.
        """
        return pulumi.get(self, "available_replica")

    @_builtins.property
    @pulumi.getter
    def build(self) -> _builtins.str:
        """
        The build information of the code source corresponding to the component.
        """
        return pulumi.get(self, "build")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        """
        Specifies the ID of the environment to which the components belong.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> _builtins.str:
        """
        The image URL that component used.
        """
        return pulumi.get(self, "image_url")

    @_builtins.property
    @pulumi.getter
    def replica(self) -> _builtins.int:
        """
        The instance number of the component.
        """
        return pulumi.get(self, "replica")

    @_builtins.property
    @pulumi.getter(name="resourceLimit")
    def resource_limit(self) -> _builtins.str:
        """
        The instance specification corresponding to the component.
        """
        return pulumi.get(self, "resource_limit")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> _builtins.str:
        """
        The component runtime.
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The code source configuration information corresponding to the component.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the component.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetEnvironmentsEnvironmentResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 created_at: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param Mapping[str, _builtins.str] annotations: The additional attributes of the environment.
        :param _builtins.str created_at: The creation time of the environment.
        :param _builtins.str id: The ID of the environment.
        :param _builtins.str name: Specifies the name of the environment to be queried.
        :param _builtins.str status: Specifies the status of the environment to be queried.
               The valid values are **finish**, **freeze** and **police_freeze**.
        :param _builtins.str updated_at: The latest update time of the environment.
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        """
        The additional attributes of the environment.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the environment.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the environment.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the environment to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the environment to be queried.
        The valid values are **finish**, **freeze** and **police_freeze**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the environment.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetNotificationRulesRuleResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 event_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 notifications: Sequence['outputs.GetNotificationRulesRuleNotificationResult'],
                 scopes: Sequence['outputs.GetNotificationRulesRuleScopeResult'],
                 trigger_policies: Sequence['outputs.GetNotificationRulesRuleTriggerPolicyResult']):
        """
        :param _builtins.bool enabled: Whether the event notification rule is enabled.
        :param _builtins.str event_name: The trigger event of the event notification.  
               The valid values are as follows:
               + **Healthy**: Healthy checked.
               + **Unhealthy**: Healthy check failed.
               + **Pulled**: Image pulled.
               + **FailedPullImage**: Pull image failed.
               + **Started**: Container started up.
               + **BackOffStart**: Container startup failed.
               + **SuccessfulMountVolume**: Volume mounted.
               + **FailedMount**: Attach volume failed.
        :param _builtins.str id: The ID of the event notification rule.
        :param _builtins.str name: The name of the event notification rule.
        :param Sequence['GetNotificationRulesRuleNotificationArgs'] notifications: The configuration of the event notification.
        :param Sequence['GetNotificationRulesRuleScopeArgs'] scopes: The scope in which event notification rule takes effect.
        :param Sequence['GetNotificationRulesRuleTriggerPolicyArgs'] trigger_policies: The trigger policy of the event notification rule.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "trigger_policies", trigger_policies)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether the event notification rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> _builtins.str:
        """
        The trigger event of the event notification.  
        The valid values are as follows:
        + **Healthy**: Healthy checked.
        + **Unhealthy**: Healthy check failed.
        + **Pulled**: Image pulled.
        + **FailedPullImage**: Pull image failed.
        + **Started**: Container started up.
        + **BackOffStart**: Container startup failed.
        + **SuccessfulMountVolume**: Volume mounted.
        + **FailedMount**: Attach volume failed.
        """
        return pulumi.get(self, "event_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the event notification rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the event notification rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetNotificationRulesRuleNotificationResult']:
        """
        The configuration of the event notification.
        """
        return pulumi.get(self, "notifications")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetNotificationRulesRuleScopeResult']:
        """
        The scope in which event notification rule takes effect.
        """
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter(name="triggerPolicies")
    def trigger_policies(self) -> Sequence['outputs.GetNotificationRulesRuleTriggerPolicyResult']:
        """
        The trigger policy of the event notification rule.
        """
        return pulumi.get(self, "trigger_policies")


@pulumi.output_type
class GetNotificationRulesRuleNotificationResult(dict):
    def __init__(__self__, *,
                 endpoint: _builtins.str,
                 protocol: _builtins.str,
                 template: _builtins.str):
        """
        :param _builtins.str endpoint: The endpoint of the event notification.
        :param _builtins.str protocol: The protocol of the event notification.  
               The valid values are as follows:
               + **sms**
               + **email**
               + **wechat**
        :param _builtins.str template: The template language of the event notification.  
               The valid values are as follows:
               + **EN**
               + **ZH**
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "template", template)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        The endpoint of the event notification.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol of the event notification.  
        The valid values are as follows:
        + **sms**
        + **email**
        + **wechat**
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def template(self) -> _builtins.str:
        """
        The template language of the event notification.  
        The valid values are as follows:
        + **EN**
        + **ZH**
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class GetNotificationRulesRuleScopeResult(dict):
    def __init__(__self__, *,
                 applications: Sequence[_builtins.str],
                 components: Sequence[_builtins.str],
                 environments: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] applications: The list of the application IDs.
        :param Sequence[_builtins.str] components: The list of the component IDs.
        :param Sequence[_builtins.str] environments: The list of the environment IDs.
        :param _builtins.str type: The type of the trigger.  
               The valid values are as follows:
               + **accumulative**
               + **immediately**
        """
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> Sequence[_builtins.str]:
        """
        The list of the application IDs.
        """
        return pulumi.get(self, "applications")

    @_builtins.property
    @pulumi.getter
    def components(self) -> Sequence[_builtins.str]:
        """
        The list of the component IDs.
        """
        return pulumi.get(self, "components")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence[_builtins.str]:
        """
        The list of the environment IDs.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the trigger.  
        The valid values are as follows:
        + **accumulative**
        + **immediately**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNotificationRulesRuleTriggerPolicyResult(dict):
    def __init__(__self__, *,
                 count: _builtins.int,
                 operator: _builtins.str,
                 period: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int count: The number of times the event occurred.
        :param _builtins.str operator: The condition of the event notification.  
               The valid values are **>** and **>=**.
        :param _builtins.int period: The trigger period of the event.  
               The valid values are as follows:
               + **300**
               + **1200**
               + **3600**
               + **14400**
               + **86400**
        :param _builtins.str type: The type of the trigger.  
               The valid values are as follows:
               + **accumulative**
               + **immediately**
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The number of times the event occurred.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        The condition of the event notification.  
        The valid values are **>** and **>=**.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        The trigger period of the event.  
        The valid values are as follows:
        + **300**
        + **1200**
        + **3600**
        + **14400**
        + **86400**
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the trigger.  
        The valid values are as follows:
        + **accumulative**
        + **immediately**
        """
        return pulumi.get(self, "type")


