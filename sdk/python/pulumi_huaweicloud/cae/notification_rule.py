# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NotificationRuleArgs', 'NotificationRule']

@pulumi.input_type
class NotificationRuleArgs:
    def __init__(__self__, *,
                 event_name: pulumi.Input[_builtins.str],
                 notification: pulumi.Input['NotificationRuleNotificationArgs'],
                 scope: pulumi.Input['NotificationRuleScopeArgs'],
                 trigger_policy: pulumi.Input['NotificationRuleTriggerPolicyArgs'],
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a NotificationRule resource.
        :param pulumi.Input[_builtins.str] event_name: Specifies the trigger event of the event notification.  
               Multiple events are separated by commas (,). e.g. **Healthy,Pulled**.
               The valid values are as follows:
               + **Healthy**: Healthy checked.
               + **Unhealthy**: Healthy check failed.
               + **Pulled**: Image pulled.
               + **FailedPullImage**: Pull image failed.
               + **Started**: Container started up.
               + **BackOffStart**: Container startup failed.
               + **SuccessfulMountVolume**: Volume mounted.
               + **FailedMount**: Attach volume failed.
        :param pulumi.Input['NotificationRuleNotificationArgs'] notification: Specifies the configuration of the event notification.
               Changing this creates a new resource.
               The notification structure is documented below.
        :param pulumi.Input['NotificationRuleScopeArgs'] scope: Specifies the scope in which event notification rule takes effect.  
               The scope structure is documented below.
        :param pulumi.Input['NotificationRuleTriggerPolicyArgs'] trigger_policy: Specifies the trigger policy of the event notification rule.  
               The trigger_policy structure is documented below.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable the event notification rule. Defaults to **false**.
               
               <a name="notification_rule_notification"></a>
               The `notification` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event notification rule. The name must be unique.  
               Changing this creates a new resource.
               The valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
               allowed.
               The name must start and end with an English letter or a digit.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "notification", notification)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "trigger_policy", trigger_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the trigger event of the event notification.  
        Multiple events are separated by commas (,). e.g. **Healthy,Pulled**.
        The valid values are as follows:
        + **Healthy**: Healthy checked.
        + **Unhealthy**: Healthy check failed.
        + **Pulled**: Image pulled.
        + **FailedPullImage**: Pull image failed.
        + **Started**: Container started up.
        + **BackOffStart**: Container startup failed.
        + **SuccessfulMountVolume**: Volume mounted.
        + **FailedMount**: Attach volume failed.
        """
        return pulumi.get(self, "event_name")

    @event_name.setter
    def event_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "event_name", value)

    @_builtins.property
    @pulumi.getter
    def notification(self) -> pulumi.Input['NotificationRuleNotificationArgs']:
        """
        Specifies the configuration of the event notification.
        Changing this creates a new resource.
        The notification structure is documented below.
        """
        return pulumi.get(self, "notification")

    @notification.setter
    def notification(self, value: pulumi.Input['NotificationRuleNotificationArgs']):
        pulumi.set(self, "notification", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> pulumi.Input['NotificationRuleScopeArgs']:
        """
        Specifies the scope in which event notification rule takes effect.  
        The scope structure is documented below.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input['NotificationRuleScopeArgs']):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="triggerPolicy")
    def trigger_policy(self) -> pulumi.Input['NotificationRuleTriggerPolicyArgs']:
        """
        Specifies the trigger policy of the event notification rule.  
        The trigger_policy structure is documented below.
        """
        return pulumi.get(self, "trigger_policy")

    @trigger_policy.setter
    def trigger_policy(self, value: pulumi.Input['NotificationRuleTriggerPolicyArgs']):
        pulumi.set(self, "trigger_policy", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the event notification rule. Defaults to **false**.

        <a name="notification_rule_notification"></a>
        The `notification` block supports:
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the event notification rule. The name must be unique.  
        Changing this creates a new resource.
        The valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
        allowed.
        The name must start and end with an English letter or a digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _NotificationRuleState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 event_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification: Optional[pulumi.Input['NotificationRuleNotificationArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input['NotificationRuleScopeArgs']] = None,
                 trigger_policy: Optional[pulumi.Input['NotificationRuleTriggerPolicyArgs']] = None):
        """
        Input properties used for looking up and filtering NotificationRule resources.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable the event notification rule. Defaults to **false**.
               
               <a name="notification_rule_notification"></a>
               The `notification` block supports:
        :param pulumi.Input[_builtins.str] event_name: Specifies the trigger event of the event notification.  
               Multiple events are separated by commas (,). e.g. **Healthy,Pulled**.
               The valid values are as follows:
               + **Healthy**: Healthy checked.
               + **Unhealthy**: Healthy check failed.
               + **Pulled**: Image pulled.
               + **FailedPullImage**: Pull image failed.
               + **Started**: Container started up.
               + **BackOffStart**: Container startup failed.
               + **SuccessfulMountVolume**: Volume mounted.
               + **FailedMount**: Attach volume failed.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event notification rule. The name must be unique.  
               Changing this creates a new resource.
               The valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
               allowed.
               The name must start and end with an English letter or a digit.
        :param pulumi.Input['NotificationRuleNotificationArgs'] notification: Specifies the configuration of the event notification.
               Changing this creates a new resource.
               The notification structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['NotificationRuleScopeArgs'] scope: Specifies the scope in which event notification rule takes effect.  
               The scope structure is documented below.
        :param pulumi.Input['NotificationRuleTriggerPolicyArgs'] trigger_policy: Specifies the trigger policy of the event notification rule.  
               The trigger_policy structure is documented below.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if event_name is not None:
            pulumi.set(__self__, "event_name", event_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification is not None:
            pulumi.set(__self__, "notification", notification)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if trigger_policy is not None:
            pulumi.set(__self__, "trigger_policy", trigger_policy)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the event notification rule. Defaults to **false**.

        <a name="notification_rule_notification"></a>
        The `notification` block supports:
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the trigger event of the event notification.  
        Multiple events are separated by commas (,). e.g. **Healthy,Pulled**.
        The valid values are as follows:
        + **Healthy**: Healthy checked.
        + **Unhealthy**: Healthy check failed.
        + **Pulled**: Image pulled.
        + **FailedPullImage**: Pull image failed.
        + **Started**: Container started up.
        + **BackOffStart**: Container startup failed.
        + **SuccessfulMountVolume**: Volume mounted.
        + **FailedMount**: Attach volume failed.
        """
        return pulumi.get(self, "event_name")

    @event_name.setter
    def event_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the event notification rule. The name must be unique.  
        Changing this creates a new resource.
        The valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
        allowed.
        The name must start and end with an English letter or a digit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def notification(self) -> Optional[pulumi.Input['NotificationRuleNotificationArgs']]:
        """
        Specifies the configuration of the event notification.
        Changing this creates a new resource.
        The notification structure is documented below.
        """
        return pulumi.get(self, "notification")

    @notification.setter
    def notification(self, value: Optional[pulumi.Input['NotificationRuleNotificationArgs']]):
        pulumi.set(self, "notification", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['NotificationRuleScopeArgs']]:
        """
        Specifies the scope in which event notification rule takes effect.  
        The scope structure is documented below.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['NotificationRuleScopeArgs']]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="triggerPolicy")
    def trigger_policy(self) -> Optional[pulumi.Input['NotificationRuleTriggerPolicyArgs']]:
        """
        Specifies the trigger policy of the event notification rule.  
        The trigger_policy structure is documented below.
        """
        return pulumi.get(self, "trigger_policy")

    @trigger_policy.setter
    def trigger_policy(self, value: Optional[pulumi.Input['NotificationRuleTriggerPolicyArgs']]):
        pulumi.set(self, "trigger_policy", value)


@pulumi.type_token("huaweicloud:cae/notificationRule:NotificationRule")
class NotificationRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 event_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification: Optional[pulumi.Input[Union['NotificationRuleNotificationArgs', 'NotificationRuleNotificationArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[Union['NotificationRuleScopeArgs', 'NotificationRuleScopeArgsDict']]] = None,
                 trigger_policy: Optional[pulumi.Input[Union['NotificationRuleTriggerPolicyArgs', 'NotificationRuleTriggerPolicyArgsDict']]] = None,
                 __props__=None):
        """
        Manage an event notification rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        notification_rule_name = config.require_object("notificationRuleName")
        notification_event_name = config.require_object("notificationEventName")
        application_ids = config.require_object("applicationIds")
        notification_email = config.require_object("notificationEmail")
        test = huaweicloud.cae.NotificationRule("test",
            name=notification_rule_name,
            event_name=notification_event_name,
            scope={
                "type": "applications",
                "applications": application_ids,
            },
            trigger_policy={
                "type": "immediately",
            },
            notification={
                "protocol": "email",
                "endpoint": notification_email,
                "template": "EN",
            },
            enabled=True)
        ```

        ## Import

        The event notification rule resource can be imported using `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cae/notificationRule:NotificationRule test <name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable the event notification rule. Defaults to **false**.
               
               <a name="notification_rule_notification"></a>
               The `notification` block supports:
        :param pulumi.Input[_builtins.str] event_name: Specifies the trigger event of the event notification.  
               Multiple events are separated by commas (,). e.g. **Healthy,Pulled**.
               The valid values are as follows:
               + **Healthy**: Healthy checked.
               + **Unhealthy**: Healthy check failed.
               + **Pulled**: Image pulled.
               + **FailedPullImage**: Pull image failed.
               + **Started**: Container started up.
               + **BackOffStart**: Container startup failed.
               + **SuccessfulMountVolume**: Volume mounted.
               + **FailedMount**: Attach volume failed.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event notification rule. The name must be unique.  
               Changing this creates a new resource.
               The valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
               allowed.
               The name must start and end with an English letter or a digit.
        :param pulumi.Input[Union['NotificationRuleNotificationArgs', 'NotificationRuleNotificationArgsDict']] notification: Specifies the configuration of the event notification.
               Changing this creates a new resource.
               The notification structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['NotificationRuleScopeArgs', 'NotificationRuleScopeArgsDict']] scope: Specifies the scope in which event notification rule takes effect.  
               The scope structure is documented below.
        :param pulumi.Input[Union['NotificationRuleTriggerPolicyArgs', 'NotificationRuleTriggerPolicyArgsDict']] trigger_policy: Specifies the trigger policy of the event notification rule.  
               The trigger_policy structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotificationRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage an event notification rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        notification_rule_name = config.require_object("notificationRuleName")
        notification_event_name = config.require_object("notificationEventName")
        application_ids = config.require_object("applicationIds")
        notification_email = config.require_object("notificationEmail")
        test = huaweicloud.cae.NotificationRule("test",
            name=notification_rule_name,
            event_name=notification_event_name,
            scope={
                "type": "applications",
                "applications": application_ids,
            },
            trigger_policy={
                "type": "immediately",
            },
            notification={
                "protocol": "email",
                "endpoint": notification_email,
                "template": "EN",
            },
            enabled=True)
        ```

        ## Import

        The event notification rule resource can be imported using `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cae/notificationRule:NotificationRule test <name>
        ```

        :param str resource_name: The name of the resource.
        :param NotificationRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotificationRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 event_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification: Optional[pulumi.Input[Union['NotificationRuleNotificationArgs', 'NotificationRuleNotificationArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[Union['NotificationRuleScopeArgs', 'NotificationRuleScopeArgsDict']]] = None,
                 trigger_policy: Optional[pulumi.Input[Union['NotificationRuleTriggerPolicyArgs', 'NotificationRuleTriggerPolicyArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotificationRuleArgs.__new__(NotificationRuleArgs)

            __props__.__dict__["enabled"] = enabled
            if event_name is None and not opts.urn:
                raise TypeError("Missing required property 'event_name'")
            __props__.__dict__["event_name"] = event_name
            __props__.__dict__["name"] = name
            if notification is None and not opts.urn:
                raise TypeError("Missing required property 'notification'")
            __props__.__dict__["notification"] = notification
            __props__.__dict__["region"] = region
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
            if trigger_policy is None and not opts.urn:
                raise TypeError("Missing required property 'trigger_policy'")
            __props__.__dict__["trigger_policy"] = trigger_policy
        super(NotificationRule, __self__).__init__(
            'huaweicloud:cae/notificationRule:NotificationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            event_name: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notification: Optional[pulumi.Input[Union['NotificationRuleNotificationArgs', 'NotificationRuleNotificationArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scope: Optional[pulumi.Input[Union['NotificationRuleScopeArgs', 'NotificationRuleScopeArgsDict']]] = None,
            trigger_policy: Optional[pulumi.Input[Union['NotificationRuleTriggerPolicyArgs', 'NotificationRuleTriggerPolicyArgsDict']]] = None) -> 'NotificationRule':
        """
        Get an existing NotificationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable the event notification rule. Defaults to **false**.
               
               <a name="notification_rule_notification"></a>
               The `notification` block supports:
        :param pulumi.Input[_builtins.str] event_name: Specifies the trigger event of the event notification.  
               Multiple events are separated by commas (,). e.g. **Healthy,Pulled**.
               The valid values are as follows:
               + **Healthy**: Healthy checked.
               + **Unhealthy**: Healthy check failed.
               + **Pulled**: Image pulled.
               + **FailedPullImage**: Pull image failed.
               + **Started**: Container started up.
               + **BackOffStart**: Container startup failed.
               + **SuccessfulMountVolume**: Volume mounted.
               + **FailedMount**: Attach volume failed.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the event notification rule. The name must be unique.  
               Changing this creates a new resource.
               The valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
               allowed.
               The name must start and end with an English letter or a digit.
        :param pulumi.Input[Union['NotificationRuleNotificationArgs', 'NotificationRuleNotificationArgsDict']] notification: Specifies the configuration of the event notification.
               Changing this creates a new resource.
               The notification structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['NotificationRuleScopeArgs', 'NotificationRuleScopeArgsDict']] scope: Specifies the scope in which event notification rule takes effect.  
               The scope structure is documented below.
        :param pulumi.Input[Union['NotificationRuleTriggerPolicyArgs', 'NotificationRuleTriggerPolicyArgsDict']] trigger_policy: Specifies the trigger policy of the event notification rule.  
               The trigger_policy structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotificationRuleState.__new__(_NotificationRuleState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["event_name"] = event_name
        __props__.__dict__["name"] = name
        __props__.__dict__["notification"] = notification
        __props__.__dict__["region"] = region
        __props__.__dict__["scope"] = scope
        __props__.__dict__["trigger_policy"] = trigger_policy
        return NotificationRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable the event notification rule. Defaults to **false**.

        <a name="notification_rule_notification"></a>
        The `notification` block supports:
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the trigger event of the event notification.  
        Multiple events are separated by commas (,). e.g. **Healthy,Pulled**.
        The valid values are as follows:
        + **Healthy**: Healthy checked.
        + **Unhealthy**: Healthy check failed.
        + **Pulled**: Image pulled.
        + **FailedPullImage**: Pull image failed.
        + **Started**: Container started up.
        + **BackOffStart**: Container startup failed.
        + **SuccessfulMountVolume**: Volume mounted.
        + **FailedMount**: Attach volume failed.
        """
        return pulumi.get(self, "event_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the event notification rule. The name must be unique.  
        Changing this creates a new resource.
        The valid length is limited from `1` to `64`, only English letters, digits, underscores (_) and hyphens (-) are
        allowed.
        The name must start and end with an English letter or a digit.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def notification(self) -> pulumi.Output['outputs.NotificationRuleNotification']:
        """
        Specifies the configuration of the event notification.
        Changing this creates a new resource.
        The notification structure is documented below.
        """
        return pulumi.get(self, "notification")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> pulumi.Output['outputs.NotificationRuleScope']:
        """
        Specifies the scope in which event notification rule takes effect.  
        The scope structure is documented below.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="triggerPolicy")
    def trigger_policy(self) -> pulumi.Output['outputs.NotificationRuleTriggerPolicy']:
        """
        Specifies the trigger policy of the event notification rule.  
        The trigger_policy structure is documented below.
        """
        return pulumi.get(self, "trigger_policy")

