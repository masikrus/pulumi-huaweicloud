# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VpcEgressArgs', 'VpcEgress']

@pulumi.input_type
class VpcEgressArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[_builtins.str],
                 environment_id: pulumi.Input[_builtins.str],
                 route_table_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VpcEgress resource.
        :param pulumi.Input[_builtins.str] cidr: Specifies the destination CIDR of the routing table corresponding to the subnet
               to which the CAE environment belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the CAE environment.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] route_table_id: Specifies the ID of the route table corresponding to the subnet to which
               the CAE environment belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "route_table_id", route_table_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the destination CIDR of the routing table corresponding to the subnet
        to which the CAE environment belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CAE environment.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the route table corresponding to the subnet to which
        the CAE environment belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "route_table_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _VpcEgressState:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VpcEgress resources.
        :param pulumi.Input[_builtins.str] cidr: Specifies the destination CIDR of the routing table corresponding to the subnet
               to which the CAE environment belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the CAE environment.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] route_table_id: Specifies the ID of the route table corresponding to the subnet to which
               the CAE environment belongs.
               Changing this creates a new resource.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination CIDR of the routing table corresponding to the subnet
        to which the CAE environment belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CAE environment.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the route table corresponding to the subnet to which
        the CAE environment belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_table_id", value)


@pulumi.type_token("huaweicloud:cae/vpcEgress:VpcEgress")
class VpcEgress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage a CAE environment to access VPC resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        route_table_id = config.require_object("routeTableId")
        cidr = config.require_object("cidr")
        test = huaweicloud.cae.VpcEgress("test",
            environment_id=environment_id,
            route_table_id=route_table_id,
            cidr=cidr)
        ```

        ## Import

        The resource can be imported using `environment_id`, `route_table_id`, and `cidr`, separated by commas (,), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cae/vpcEgress:VpcEgress test <environment_id>,<route_table_id>,<cidr>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr: Specifies the destination CIDR of the routing table corresponding to the subnet
               to which the CAE environment belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the CAE environment.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] route_table_id: Specifies the ID of the route table corresponding to the subnet to which
               the CAE environment belongs.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpcEgressArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a CAE environment to access VPC resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        route_table_id = config.require_object("routeTableId")
        cidr = config.require_object("cidr")
        test = huaweicloud.cae.VpcEgress("test",
            environment_id=environment_id,
            route_table_id=route_table_id,
            cidr=cidr)
        ```

        ## Import

        The resource can be imported using `environment_id`, `route_table_id`, and `cidr`, separated by commas (,), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cae/vpcEgress:VpcEgress test <environment_id>,<route_table_id>,<cidr>
        ```

        :param str resource_name: The name of the resource.
        :param VpcEgressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcEgressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcEgressArgs.__new__(VpcEgressArgs)

            if cidr is None and not opts.urn:
                raise TypeError("Missing required property 'cidr'")
            __props__.__dict__["cidr"] = cidr
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["region"] = region
            if route_table_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_table_id'")
            __props__.__dict__["route_table_id"] = route_table_id
        super(VpcEgress, __self__).__init__(
            'huaweicloud:cae/vpcEgress:VpcEgress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr: Optional[pulumi.Input[_builtins.str]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            route_table_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VpcEgress':
        """
        Get an existing VpcEgress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr: Specifies the destination CIDR of the routing table corresponding to the subnet
               to which the CAE environment belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the CAE environment.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] route_table_id: Specifies the ID of the route table corresponding to the subnet to which
               the CAE environment belongs.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpcEgressState.__new__(_VpcEgressState)

        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["region"] = region
        __props__.__dict__["route_table_id"] = route_table_id
        return VpcEgress(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the destination CIDR of the routing table corresponding to the subnet
        to which the CAE environment belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the CAE environment.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the route table corresponding to the subnet to which
        the CAE environment belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "route_table_id")

