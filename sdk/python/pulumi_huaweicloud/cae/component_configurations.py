# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComponentConfigurationsArgs', 'ComponentConfigurations']

@pulumi.input_type
class ComponentConfigurationsArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[_builtins.str],
                 component_id: pulumi.Input[_builtins.str],
                 environment_id: pulumi.Input[_builtins.str],
                 items: pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationsItemArgs']]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ComponentConfigurations resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application where the components are
               located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] component_id: Specifies the ID of the component to which the configurations belong.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the develop environment where the applications
               and components are located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationsItemArgs']]] items: Specifies the list of configurations for component.  
               The items structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="component_configuration_items"></a>
               The `items` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "component_id", component_id)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "items", items)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the application where the components are
        located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the component to which the configurations belong.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "component_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the develop environment where the applications
        and components are located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationsItemArgs']]]:
        """
        Specifies the list of configurations for component.  
        The items structure is documented below.
        Changing this parameter will create a new resource.

        <a name="component_configuration_items"></a>
        The `items` block supports:
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationsItemArgs']]]):
        pulumi.set(self, "items", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ComponentConfigurationsState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationsItemArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ComponentConfigurations resources.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application where the components are
               located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] component_id: Specifies the ID of the component to which the configurations belong.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the develop environment where the applications
               and components are located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationsItemArgs']]] items: Specifies the list of configurations for component.  
               The items structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="component_configuration_items"></a>
               The `items` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the application where the components are
        located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the component to which the configurations belong.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "component_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the develop environment where the applications
        and components are located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationsItemArgs']]]]:
        """
        Specifies the list of configurations for component.  
        The items structure is documented below.
        Changing this parameter will create a new resource.

        <a name="component_configuration_items"></a>
        The `items` block supports:
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationsItemArgs']]]]):
        pulumi.set(self, "items", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:cae/componentConfigurations:ComponentConfigurations")
class ComponentConfigurations(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentConfigurationsItemArgs', 'ComponentConfigurationsItemArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to manage develop configurations for a component within HuaweiCloud.

        > A component can only have one resource.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        application_id = config.require_object("applicationId")
        component_id = config.require_object("componentId")
        test = huaweicloud.cae.ComponentConfigurations("test",
            environment_id=environment_id,
            application_id=application_id,
            component_id=component_id,
            items=[
                {
                    "type": "lifecycle",
                    "data": json.dumps({
                        "spec": {
                            "postStart": {
                                "exec": {
                                    "command": [
                                        "/bin/bash",
                                        "-c",
                                        "sleep",
                                        "10",
                                        "done",
                                    ],
                                },
                            },
                        },
                    }),
                },
                {
                    "type": "env",
                    "data": json.dumps({
                        "spec": {
                            "envs": {
                                "key": "value",
                                "foo": "bar",
                            },
                        },
                    }),
                },
            ])
        ```

        ## Import

        The resource can be imported using `environment_id`, `application_id` and `component_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cae/componentConfigurations:ComponentConfigurations test <environment_id>/<application_id>/<component_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application where the components are
               located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] component_id: Specifies the ID of the component to which the configurations belong.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the develop environment where the applications
               and components are located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentConfigurationsItemArgs', 'ComponentConfigurationsItemArgsDict']]]] items: Specifies the list of configurations for component.  
               The items structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="component_configuration_items"></a>
               The `items` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentConfigurationsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to manage develop configurations for a component within HuaweiCloud.

        > A component can only have one resource.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        application_id = config.require_object("applicationId")
        component_id = config.require_object("componentId")
        test = huaweicloud.cae.ComponentConfigurations("test",
            environment_id=environment_id,
            application_id=application_id,
            component_id=component_id,
            items=[
                {
                    "type": "lifecycle",
                    "data": json.dumps({
                        "spec": {
                            "postStart": {
                                "exec": {
                                    "command": [
                                        "/bin/bash",
                                        "-c",
                                        "sleep",
                                        "10",
                                        "done",
                                    ],
                                },
                            },
                        },
                    }),
                },
                {
                    "type": "env",
                    "data": json.dumps({
                        "spec": {
                            "envs": {
                                "key": "value",
                                "foo": "bar",
                            },
                        },
                    }),
                },
            ])
        ```

        ## Import

        The resource can be imported using `environment_id`, `application_id` and `component_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cae/componentConfigurations:ComponentConfigurations test <environment_id>/<application_id>/<component_id>
        ```

        :param str resource_name: The name of the resource.
        :param ComponentConfigurationsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentConfigurationsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentConfigurationsItemArgs', 'ComponentConfigurationsItemArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentConfigurationsArgs.__new__(ComponentConfigurationsArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if component_id is None and not opts.urn:
                raise TypeError("Missing required property 'component_id'")
            __props__.__dict__["component_id"] = component_id
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            if items is None and not opts.urn:
                raise TypeError("Missing required property 'items'")
            __props__.__dict__["items"] = items
            __props__.__dict__["region"] = region
        super(ComponentConfigurations, __self__).__init__(
            'huaweicloud:cae/componentConfigurations:ComponentConfigurations',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            component_id: Optional[pulumi.Input[_builtins.str]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            items: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentConfigurationsItemArgs', 'ComponentConfigurationsItemArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'ComponentConfigurations':
        """
        Get an existing ComponentConfigurations resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application where the components are
               located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] component_id: Specifies the ID of the component to which the configurations belong.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the develop environment where the applications
               and components are located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentConfigurationsItemArgs', 'ComponentConfigurationsItemArgsDict']]]] items: Specifies the list of configurations for component.  
               The items structure is documented below.
               Changing this parameter will create a new resource.
               
               <a name="component_configuration_items"></a>
               The `items` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComponentConfigurationsState.__new__(_ComponentConfigurationsState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["component_id"] = component_id
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["items"] = items
        __props__.__dict__["region"] = region
        return ComponentConfigurations(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the application where the components are
        located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the component to which the configurations belong.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the develop environment where the applications
        and components are located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def items(self) -> pulumi.Output[Sequence['outputs.ComponentConfigurationsItem']]:
        """
        Specifies the list of configurations for component.  
        The items structure is documented below.
        Changing this parameter will create a new resource.

        <a name="component_configuration_items"></a>
        The `items` block supports:
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

