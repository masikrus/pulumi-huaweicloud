# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComponentDeploymentArgs', 'ComponentDeployment']

@pulumi.input_type
class ComponentDeploymentArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[_builtins.str],
                 component_id: pulumi.Input[_builtins.str],
                 environment_id: pulumi.Input[_builtins.str],
                 metadata: pulumi.Input['ComponentDeploymentMetadataArgs'],
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spec: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ComponentDeployment resource.
        :param pulumi.Input[_builtins.str] application_id: The ID of the application where the component is located.
        :param pulumi.Input[_builtins.str] component_id: The ID of the component to be operated.
        :param pulumi.Input[_builtins.str] environment_id: The ID of the environment where the application is located.
        :param pulumi.Input['ComponentDeploymentMetadataArgs'] metadata: The metadata of this action request.
        :param pulumi.Input[_builtins.str] region: The region where the component to be operated is located.
        :param pulumi.Input[_builtins.str] spec: The specification detail of the action, in JSON format.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "component_id", component_id)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "metadata", metadata)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the application where the component is located.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the component to be operated.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "component_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the environment where the application is located.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Input['ComponentDeploymentMetadataArgs']:
        """
        The metadata of this action request.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: pulumi.Input['ComponentDeploymentMetadataArgs']):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the component to be operated is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The specification detail of the action, in JSON format.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class _ComponentDeploymentState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input['ComponentDeploymentMetadataArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spec: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ComponentDeployment resources.
        :param pulumi.Input[_builtins.str] application_id: The ID of the application where the component is located.
        :param pulumi.Input[_builtins.str] component_id: The ID of the component to be operated.
        :param pulumi.Input[_builtins.str] environment_id: The ID of the environment where the application is located.
        :param pulumi.Input['ComponentDeploymentMetadataArgs'] metadata: The metadata of this action request.
        :param pulumi.Input[_builtins.str] region: The region where the component to be operated is located.
        :param pulumi.Input[_builtins.str] spec: The specification detail of the action, in JSON format.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the application where the component is located.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the component to be operated.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "component_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the environment where the application is located.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ComponentDeploymentMetadataArgs']]:
        """
        The metadata of this action request.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ComponentDeploymentMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the component to be operated is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The specification detail of the action, in JSON format.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spec", value)


@pulumi.type_token("huaweicloud:cae/componentDeployment:ComponentDeployment")
class ComponentDeployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Union['ComponentDeploymentMetadataArgs', 'ComponentDeploymentMetadataArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spec: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ComponentDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: The ID of the application where the component is located.
        :param pulumi.Input[_builtins.str] component_id: The ID of the component to be operated.
        :param pulumi.Input[_builtins.str] environment_id: The ID of the environment where the application is located.
        :param pulumi.Input[Union['ComponentDeploymentMetadataArgs', 'ComponentDeploymentMetadataArgsDict']] metadata: The metadata of this action request.
        :param pulumi.Input[_builtins.str] region: The region where the component to be operated is located.
        :param pulumi.Input[_builtins.str] spec: The specification detail of the action, in JSON format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentDeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComponentDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComponentDeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentDeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Union['ComponentDeploymentMetadataArgs', 'ComponentDeploymentMetadataArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spec: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentDeploymentArgs.__new__(ComponentDeploymentArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if component_id is None and not opts.urn:
                raise TypeError("Missing required property 'component_id'")
            __props__.__dict__["component_id"] = component_id
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            if metadata is None and not opts.urn:
                raise TypeError("Missing required property 'metadata'")
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["region"] = region
            __props__.__dict__["spec"] = spec
        super(ComponentDeployment, __self__).__init__(
            'huaweicloud:cae/componentDeployment:ComponentDeployment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            component_id: Optional[pulumi.Input[_builtins.str]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            metadata: Optional[pulumi.Input[Union['ComponentDeploymentMetadataArgs', 'ComponentDeploymentMetadataArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            spec: Optional[pulumi.Input[_builtins.str]] = None) -> 'ComponentDeployment':
        """
        Get an existing ComponentDeployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: The ID of the application where the component is located.
        :param pulumi.Input[_builtins.str] component_id: The ID of the component to be operated.
        :param pulumi.Input[_builtins.str] environment_id: The ID of the environment where the application is located.
        :param pulumi.Input[Union['ComponentDeploymentMetadataArgs', 'ComponentDeploymentMetadataArgsDict']] metadata: The metadata of this action request.
        :param pulumi.Input[_builtins.str] region: The region where the component to be operated is located.
        :param pulumi.Input[_builtins.str] spec: The specification detail of the action, in JSON format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComponentDeploymentState.__new__(_ComponentDeploymentState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["component_id"] = component_id
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["region"] = region
        __props__.__dict__["spec"] = spec
        return ComponentDeployment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the application where the component is located.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the component to be operated.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the environment where the application is located.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.ComponentDeploymentMetadata']:
        """
        The metadata of this action request.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region where the component to be operated is located.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The specification detail of the action, in JSON format.
        """
        return pulumi.get(self, "spec")

