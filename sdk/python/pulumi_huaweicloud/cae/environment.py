# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['EnvironmentArgs', 'Environment']

@pulumi.input_type
class EnvironmentArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Environment resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the additional attributes of the environment.  
               Changing this creates a new resource.
               The required keys are as follows:
               + **vpc_id**: The VPC ID bound to the environment.
               + **subnet_id**: The ID of the VPC subnet bound to the environment.
               + **group_name**: The SWR organization name bound to the environment.
               
               The optional keys are as follows:
               + **type**: The environment type. Currently, only **exclusive** is supported.
               + **security_group_id**: The ID of the security group bound to the environment.
               If omitted, the CAE service will automatically create it.
               
               > Deleting the resource does not delete the security group that the service automatically created.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the
               environment belongs.
               Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.int] max_retries: Specifies the maximum retry number in the **create** or **delete** operation.  
               Defaults to `0`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the environment.  
               The valid length is limited from `3` to `30`, only lowercase letters, digits and hyphens (-) are allowed.
               The name must start with a lowercase letter and end with a lowercase letter or a digit.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment is located.  
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the additional attributes of the environment.  
        Changing this creates a new resource.
        The required keys are as follows:
        + **vpc_id**: The VPC ID bound to the environment.
        + **subnet_id**: The ID of the VPC subnet bound to the environment.
        + **group_name**: The SWR organization name bound to the environment.

        The optional keys are as follows:
        + **type**: The environment type. Currently, only **exclusive** is supported.
        + **security_group_id**: The ID of the security group bound to the environment.
        If omitted, the CAE service will automatically create it.

        > Deleting the resource does not delete the security group that the service automatically created.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project to which the
        environment belongs.
        Changing this creates a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum retry number in the **create** or **delete** operation.  
        Defaults to `0`.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_retries", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the environment.  
        The valid length is limited from `3` to `30`, only lowercase letters, digits and hyphens (-) are allowed.
        The name must start with a lowercase letter and end with a lowercase letter or a digit.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the environment is located.  
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _EnvironmentState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Environment resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the additional attributes of the environment.  
               Changing this creates a new resource.
               The required keys are as follows:
               + **vpc_id**: The VPC ID bound to the environment.
               + **subnet_id**: The ID of the VPC subnet bound to the environment.
               + **group_name**: The SWR organization name bound to the environment.
               
               The optional keys are as follows:
               + **type**: The environment type. Currently, only **exclusive** is supported.
               + **security_group_id**: The ID of the security group bound to the environment.
               If omitted, the CAE service will automatically create it.
               
               > Deleting the resource does not delete the security group that the service automatically created.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the environment, in RFC3339 format.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the
               environment belongs.
               Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.int] max_retries: Specifies the maximum retry number in the **create** or **delete** operation.  
               Defaults to `0`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the environment.  
               The valid length is limited from `3` to `30`, only lowercase letters, digits and hyphens (-) are allowed.
               The name must start with a lowercase letter and end with a lowercase letter or a digit.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment is located.  
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the environment.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the environment, in RFC3339 format.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the additional attributes of the environment.  
        Changing this creates a new resource.
        The required keys are as follows:
        + **vpc_id**: The VPC ID bound to the environment.
        + **subnet_id**: The ID of the VPC subnet bound to the environment.
        + **group_name**: The SWR organization name bound to the environment.

        The optional keys are as follows:
        + **type**: The environment type. Currently, only **exclusive** is supported.
        + **security_group_id**: The ID of the security group bound to the environment.
        If omitted, the CAE service will automatically create it.

        > Deleting the resource does not delete the security group that the service automatically created.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the environment, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the enterprise project to which the
        environment belongs.
        Changing this creates a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum retry number in the **create** or **delete** operation.  
        Defaults to `0`.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_retries", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the environment.  
        The valid length is limited from `3` to `30`, only lowercase letters, digits and hyphens (-) are allowed.
        The name must start with a lowercase letter and end with a lowercase letter or a digit.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the environment is located.  
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the environment.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the environment, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:cae/environment:Environment")
class Environment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an environment resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_name = config.require_object("environmentName")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        security_group_id = config.require_object("securityGroupId")
        swr_organization_name = config.require_object("swrOrganizationName")
        test = huaweicloud.cae.Environment("test",
            name=environment_name,
            annotations={
                "type": "exclusive",
                "vpc_id": vpc_id,
                "subnet_id": subnet_id,
                "security_group_id": security_group_id,
                "group_name": swr_organization_name,
            })
        ```

        ## Import

        The environment can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cae/environment:Environment test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the additional attributes of the environment.  
               Changing this creates a new resource.
               The required keys are as follows:
               + **vpc_id**: The VPC ID bound to the environment.
               + **subnet_id**: The ID of the VPC subnet bound to the environment.
               + **group_name**: The SWR organization name bound to the environment.
               
               The optional keys are as follows:
               + **type**: The environment type. Currently, only **exclusive** is supported.
               + **security_group_id**: The ID of the security group bound to the environment.
               If omitted, the CAE service will automatically create it.
               
               > Deleting the resource does not delete the security group that the service automatically created.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the
               environment belongs.
               Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.int] max_retries: Specifies the maximum retry number in the **create** or **delete** operation.  
               Defaults to `0`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the environment.  
               The valid length is limited from `3` to `30`, only lowercase letters, digits and hyphens (-) are allowed.
               The name must start with a lowercase letter and end with a lowercase letter or a digit.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment is located.  
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EnvironmentArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an environment resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_name = config.require_object("environmentName")
        vpc_id = config.require_object("vpcId")
        subnet_id = config.require_object("subnetId")
        security_group_id = config.require_object("securityGroupId")
        swr_organization_name = config.require_object("swrOrganizationName")
        test = huaweicloud.cae.Environment("test",
            name=environment_name,
            annotations={
                "type": "exclusive",
                "vpc_id": vpc_id,
                "subnet_id": subnet_id,
                "security_group_id": security_group_id,
                "group_name": swr_organization_name,
            })
        ```

        ## Import

        The environment can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cae/environment:Environment test <id>
        ```

        :param str resource_name: The name of the resource.
        :param EnvironmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnvironmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnvironmentArgs.__new__(EnvironmentArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["max_retries"] = max_retries
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(Environment, __self__).__init__(
            'huaweicloud:cae/environment:Environment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            max_retries: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'Environment':
        """
        Get an existing Environment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Specifies the additional attributes of the environment.  
               Changing this creates a new resource.
               The required keys are as follows:
               + **vpc_id**: The VPC ID bound to the environment.
               + **subnet_id**: The ID of the VPC subnet bound to the environment.
               + **group_name**: The SWR organization name bound to the environment.
               
               The optional keys are as follows:
               + **type**: The environment type. Currently, only **exclusive** is supported.
               + **security_group_id**: The ID of the security group bound to the environment.
               If omitted, the CAE service will automatically create it.
               
               > Deleting the resource does not delete the security group that the service automatically created.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the environment, in RFC3339 format.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the ID of the enterprise project to which the
               environment belongs.
               Changing this creates a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.int] max_retries: Specifies the maximum retry number in the **create** or **delete** operation.  
               Defaults to `0`.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the environment.  
               The valid length is limited from `3` to `30`, only lowercase letters, digits and hyphens (-) are allowed.
               The name must start with a lowercase letter and end with a lowercase letter or a digit.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the environment is located.  
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the environment.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the environment, in RFC3339 format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnvironmentState.__new__(_EnvironmentState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["max_retries"] = max_retries
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        return Environment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the additional attributes of the environment.  
        Changing this creates a new resource.
        The required keys are as follows:
        + **vpc_id**: The VPC ID bound to the environment.
        + **subnet_id**: The ID of the VPC subnet bound to the environment.
        + **group_name**: The SWR organization name bound to the environment.

        The optional keys are as follows:
        + **type**: The environment type. Currently, only **exclusive** is supported.
        + **security_group_id**: The ID of the security group bound to the environment.
        If omitted, the CAE service will automatically create it.

        > Deleting the resource does not delete the security group that the service automatically created.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the environment, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the enterprise project to which the
        environment belongs.
        Changing this creates a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the maximum retry number in the **create** or **delete** operation.  
        Defaults to `0`.
        """
        return pulumi.get(self, "max_retries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the environment.  
        The valid length is limited from `3` to `30`, only lowercase letters, digits and hyphens (-) are allowed.
        The name must start with a lowercase letter and end with a lowercase letter or a digit.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the environment is located.  
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the environment.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the environment, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

