# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComponentArgs', 'Component']

@pulumi.input_type
class ComponentArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[_builtins.str],
                 environment_id: pulumi.Input[_builtins.str],
                 metadata: pulumi.Input['ComponentMetadataArgs'],
                 spec: pulumi.Input['ComponentSpecArgs'],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationArgs']]]] = None,
                 deploy_after_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Component resource.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the component belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the environment to which the application and the
               component belongs.
               Changing this creates a new resource.
        :param pulumi.Input['ComponentMetadataArgs'] metadata: Specifies the metadata of the component.
               The metadata structure is documented below.
        :param pulumi.Input['ComponentSpecArgs'] spec: Specifies the configuration information of the component.
               The spec structure is documented below.
        :param pulumi.Input[_builtins.str] action: Specifies operation type of the component.  
               The valid values are as follows:
               + **deploy**: Deploy component. Only valid for undeployed component.
               + **configure**: Configurations of effesctive component. Only valid for deployed component.
               + **upgrade**: Upgrade component. Only valid for deployed component.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationArgs']]] configurations: Specifies the list of configurations of the component.  
               The configurations structure is documented below.
               
               > This parameter must be used together with `action` parameter.
               
               <a name="component_metadata"></a>
               The `metadata` block supports:
        :param pulumi.Input[_builtins.bool] deploy_after_create: Whether to deploy the component after creating the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "spec", spec)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if deploy_after_create is not None:
            pulumi.set(__self__, "deploy_after_create", deploy_after_create)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the application to which the component belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the environment to which the application and the
        component belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Input['ComponentMetadataArgs']:
        """
        Specifies the metadata of the component.
        The metadata structure is documented below.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: pulumi.Input['ComponentMetadataArgs']):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def spec(self) -> pulumi.Input['ComponentSpecArgs']:
        """
        Specifies the configuration information of the component.
        The spec structure is documented below.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['ComponentSpecArgs']):
        pulumi.set(self, "spec", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies operation type of the component.  
        The valid values are as follows:
        + **deploy**: Deploy component. Only valid for undeployed component.
        + **configure**: Configurations of effesctive component. Only valid for deployed component.
        + **upgrade**: Upgrade component. Only valid for deployed component.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationArgs']]]]:
        """
        Specifies the list of configurations of the component.  
        The configurations structure is documented below.

        > This parameter must be used together with `action` parameter.

        <a name="component_metadata"></a>
        The `metadata` block supports:
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter(name="deployAfterCreate")
    def deploy_after_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to deploy the component after creating the resource.
        """
        return pulumi.get(self, "deploy_after_create")

    @deploy_after_create.setter
    def deploy_after_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deploy_after_create", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ComponentState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 available_replica: Optional[pulumi.Input[_builtins.int]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 deploy_after_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input['ComponentMetadataArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spec: Optional[pulumi.Input['ComponentSpecArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Component resources.
        :param pulumi.Input[_builtins.str] action: Specifies operation type of the component.  
               The valid values are as follows:
               + **deploy**: Deploy component. Only valid for undeployed component.
               + **configure**: Configurations of effesctive component. Only valid for deployed component.
               + **upgrade**: Upgrade component. Only valid for deployed component.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the component belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] available_replica: The number of available instances under the component.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationArgs']]] configurations: Specifies the list of configurations of the component.  
               The configurations structure is documented below.
               
               > This parameter must be used together with `action` parameter.
               
               <a name="component_metadata"></a>
               The `metadata` block supports:
        :param pulumi.Input[_builtins.str] created_at: The creation time of the component.
        :param pulumi.Input[_builtins.bool] deploy_after_create: Whether to deploy the component after creating the resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the environment to which the application and the
               component belongs.
               Changing this creates a new resource.
        :param pulumi.Input['ComponentMetadataArgs'] metadata: Specifies the metadata of the component.
               The metadata structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['ComponentSpecArgs'] spec: Specifies the configuration information of the component.
               The spec structure is documented below.
        :param pulumi.Input[_builtins.str] status: The current status of the component.
               + **running**
               + **paused**
               + **notReady**: The component deployed but not ready.
               + **created**: The component was not deployed.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the component.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if available_replica is not None:
            pulumi.set(__self__, "available_replica", available_replica)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deploy_after_create is not None:
            pulumi.set(__self__, "deploy_after_create", deploy_after_create)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies operation type of the component.  
        The valid values are as follows:
        + **deploy**: Deploy component. Only valid for undeployed component.
        + **configure**: Configurations of effesctive component. Only valid for deployed component.
        + **upgrade**: Upgrade component. Only valid for deployed component.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the application to which the component belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="availableReplica")
    def available_replica(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of available instances under the component.
        """
        return pulumi.get(self, "available_replica")

    @available_replica.setter
    def available_replica(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "available_replica", value)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationArgs']]]]:
        """
        Specifies the list of configurations of the component.  
        The configurations structure is documented below.

        > This parameter must be used together with `action` parameter.

        <a name="component_metadata"></a>
        The `metadata` block supports:
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the component.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="deployAfterCreate")
    def deploy_after_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to deploy the component after creating the resource.
        """
        return pulumi.get(self, "deploy_after_create")

    @deploy_after_create.setter
    def deploy_after_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deploy_after_create", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the environment to which the application and the
        component belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ComponentMetadataArgs']]:
        """
        Specifies the metadata of the component.
        The metadata structure is documented below.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ComponentMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['ComponentSpecArgs']]:
        """
        Specifies the configuration information of the component.
        The spec structure is documented below.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['ComponentSpecArgs']]):
        pulumi.set(self, "spec", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the component.
        + **running**
        + **paused**
        + **notReady**: The component deployed but not ready.
        + **created**: The component was not deployed.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the component.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:cae/component:Component")
class Component(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentConfigurationArgs', 'ComponentConfigurationArgsDict']]]]] = None,
                 deploy_after_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Union['ComponentMetadataArgs', 'ComponentMetadataArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spec: Optional[pulumi.Input[Union['ComponentSpecArgs', 'ComponentSpecArgsDict']]] = None,
                 __props__=None):
        """
        Manages a component resource within HuaweiCloud.

        > A maximum of `50` components can be created on the same environment. If you need more quotas,
           please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
           to submit a service ticket.

        ## Example Usage

        ### Create a component

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        application_id = config.require_object("applicationId")
        component_name = config.require_object("componentName")
        image_url = config.require_object("imageUrl")
        test = huaweicloud.cae.Component("test",
            environment_id=environment_id,
            application_id=application_id,
            metadata={
                "name": component_name,
                "annotations": {
                    "version": "1.0.0",
                },
            },
            spec={
                "runtime": "Docker",
                "replica": 1,
                "source": {
                    "type": "image",
                    "url": image_url,
                },
                "resource_limit": {
                    "cpu": "500m",
                    "memory": "1Gi",
                },
            })
        ```

        ### Create and deploy a component

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        application_id = config.require_object("applicationId")
        component_name = config.require_object("componentName")
        image_url = config.require_object("imageUrl")
        test = huaweicloud.cae.Component("test",
            environment_id=environment_id,
            application_id=application_id,
            metadata={
                "name": component_name,
                "annotations": {
                    "version": "1.0.0",
                },
            },
            spec={
                "runtime": "Docker",
                "replica": 1,
                "source": {
                    "type": "image",
                    "url": image_url,
                },
                "resource_limit": {
                    "cpu": "500m",
                    "memory": "1Gi",
                },
            },
            action="deploy")
        ```

        ## Import

        The CAE component can be imported using `environment_id`, `application_id` and `id`, separated by slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cae/component:Component test <environment_id>/<application_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `metadata.0.annotations`, `spec.0.build.0.parameters`, `action`, `configurations`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_cae_component" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              metadata.0.annotations, spec.0.build.0.parameters, action, configurations,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies operation type of the component.  
               The valid values are as follows:
               + **deploy**: Deploy component. Only valid for undeployed component.
               + **configure**: Configurations of effesctive component. Only valid for deployed component.
               + **upgrade**: Upgrade component. Only valid for deployed component.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the component belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentConfigurationArgs', 'ComponentConfigurationArgsDict']]]] configurations: Specifies the list of configurations of the component.  
               The configurations structure is documented below.
               
               > This parameter must be used together with `action` parameter.
               
               <a name="component_metadata"></a>
               The `metadata` block supports:
        :param pulumi.Input[_builtins.bool] deploy_after_create: Whether to deploy the component after creating the resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the environment to which the application and the
               component belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Union['ComponentMetadataArgs', 'ComponentMetadataArgsDict']] metadata: Specifies the metadata of the component.
               The metadata structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['ComponentSpecArgs', 'ComponentSpecArgsDict']] spec: Specifies the configuration information of the component.
               The spec structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a component resource within HuaweiCloud.

        > A maximum of `50` components can be created on the same environment. If you need more quotas,
           please refer to the [documentation](https://support.huaweicloud.com/intl/en-us/usermanual-ticket/topic_0065264094.html)
           to submit a service ticket.

        ## Example Usage

        ### Create a component

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        application_id = config.require_object("applicationId")
        component_name = config.require_object("componentName")
        image_url = config.require_object("imageUrl")
        test = huaweicloud.cae.Component("test",
            environment_id=environment_id,
            application_id=application_id,
            metadata={
                "name": component_name,
                "annotations": {
                    "version": "1.0.0",
                },
            },
            spec={
                "runtime": "Docker",
                "replica": 1,
                "source": {
                    "type": "image",
                    "url": image_url,
                },
                "resource_limit": {
                    "cpu": "500m",
                    "memory": "1Gi",
                },
            })
        ```

        ### Create and deploy a component

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        environment_id = config.require_object("environmentId")
        application_id = config.require_object("applicationId")
        component_name = config.require_object("componentName")
        image_url = config.require_object("imageUrl")
        test = huaweicloud.cae.Component("test",
            environment_id=environment_id,
            application_id=application_id,
            metadata={
                "name": component_name,
                "annotations": {
                    "version": "1.0.0",
                },
            },
            spec={
                "runtime": "Docker",
                "replica": 1,
                "source": {
                    "type": "image",
                    "url": image_url,
                },
                "resource_limit": {
                    "cpu": "500m",
                    "memory": "1Gi",
                },
            },
            action="deploy")
        ```

        ## Import

        The CAE component can be imported using `environment_id`, `application_id` and `id`, separated by slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:cae/component:Component test <environment_id>/<application_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `metadata.0.annotations`, `spec.0.build.0.parameters`, `action`, `configurations`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_cae_component" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              metadata.0.annotations, spec.0.build.0.parameters, action, configurations,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ComponentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentConfigurationArgs', 'ComponentConfigurationArgsDict']]]]] = None,
                 deploy_after_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Union['ComponentMetadataArgs', 'ComponentMetadataArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 spec: Optional[pulumi.Input[Union['ComponentSpecArgs', 'ComponentSpecArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentArgs.__new__(ComponentArgs)

            __props__.__dict__["action"] = action
            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            __props__.__dict__["configurations"] = configurations
            __props__.__dict__["deploy_after_create"] = deploy_after_create
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            if metadata is None and not opts.urn:
                raise TypeError("Missing required property 'metadata'")
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["region"] = region
            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
            __props__.__dict__["available_replica"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(Component, __self__).__init__(
            'huaweicloud:cae/component:Component',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            available_replica: Optional[pulumi.Input[_builtins.int]] = None,
            configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComponentConfigurationArgs', 'ComponentConfigurationArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            deploy_after_create: Optional[pulumi.Input[_builtins.bool]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            metadata: Optional[pulumi.Input[Union['ComponentMetadataArgs', 'ComponentMetadataArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            spec: Optional[pulumi.Input[Union['ComponentSpecArgs', 'ComponentSpecArgsDict']]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'Component':
        """
        Get an existing Component resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies operation type of the component.  
               The valid values are as follows:
               + **deploy**: Deploy component. Only valid for undeployed component.
               + **configure**: Configurations of effesctive component. Only valid for deployed component.
               + **upgrade**: Upgrade component. Only valid for deployed component.
        :param pulumi.Input[_builtins.str] application_id: Specifies the ID of the application to which the component belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] available_replica: The number of available instances under the component.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComponentConfigurationArgs', 'ComponentConfigurationArgsDict']]]] configurations: Specifies the list of configurations of the component.  
               The configurations structure is documented below.
               
               > This parameter must be used together with `action` parameter.
               
               <a name="component_metadata"></a>
               The `metadata` block supports:
        :param pulumi.Input[_builtins.str] created_at: The creation time of the component.
        :param pulumi.Input[_builtins.bool] deploy_after_create: Whether to deploy the component after creating the resource.
        :param pulumi.Input[_builtins.str] environment_id: Specifies the ID of the environment to which the application and the
               component belongs.
               Changing this creates a new resource.
        :param pulumi.Input[Union['ComponentMetadataArgs', 'ComponentMetadataArgsDict']] metadata: Specifies the metadata of the component.
               The metadata structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['ComponentSpecArgs', 'ComponentSpecArgsDict']] spec: Specifies the configuration information of the component.
               The spec structure is documented below.
        :param pulumi.Input[_builtins.str] status: The current status of the component.
               + **running**
               + **paused**
               + **notReady**: The component deployed but not ready.
               + **created**: The component was not deployed.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the component.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComponentState.__new__(_ComponentState)

        __props__.__dict__["action"] = action
        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["available_replica"] = available_replica
        __props__.__dict__["configurations"] = configurations
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["deploy_after_create"] = deploy_after_create
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["region"] = region
        __props__.__dict__["spec"] = spec
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        return Component(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies operation type of the component.  
        The valid values are as follows:
        + **deploy**: Deploy component. Only valid for undeployed component.
        + **configure**: Configurations of effesctive component. Only valid for deployed component.
        + **upgrade**: Upgrade component. Only valid for deployed component.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the application to which the component belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="availableReplica")
    def available_replica(self) -> pulumi.Output[_builtins.int]:
        """
        The number of available instances under the component.
        """
        return pulumi.get(self, "available_replica")

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> pulumi.Output[Optional[Sequence['outputs.ComponentConfiguration']]]:
        """
        Specifies the list of configurations of the component.  
        The configurations structure is documented below.

        > This parameter must be used together with `action` parameter.

        <a name="component_metadata"></a>
        The `metadata` block supports:
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the component.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deployAfterCreate")
    def deploy_after_create(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether to deploy the component after creating the resource.
        """
        return pulumi.get(self, "deploy_after_create")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the environment to which the application and the
        component belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.ComponentMetadata']:
        """
        Specifies the metadata of the component.
        The metadata structure is documented below.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> pulumi.Output['outputs.ComponentSpec']:
        """
        Specifies the configuration information of the component.
        The spec structure is documented below.
        """
        return pulumi.get(self, "spec")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the component.
        + **running**
        + **paused**
        + **notReady**: The component deployed but not ready.
        + **created**: The component was not deployed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the component.
        """
        return pulumi.get(self, "updated_at")

