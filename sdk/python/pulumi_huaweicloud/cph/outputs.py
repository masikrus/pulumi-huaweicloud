# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'PhonePropertyPhones',
    'PhoneResetPhones',
    'PhoneRestartPhones',
    'ServerAddress',
    'ServerBandwidth',
    'ServerPhoneDataVolume',
    'ServerPort',
    'ServerServerShareDataVolume',
    'GetEncodeServersEncodeServerResult',
    'GetEncodeServersEncodeServerAccessInfoResult',
    'GetPhoneConnectionsConnectInfoResult',
    'GetPhoneConnectionsConnectInfoAccessInfoResult',
    'GetPhoneCustomImagesImageResult',
    'GetPhoneFlavorsFlavorResult',
    'GetPhoneImagesImageResult',
    'GetPhonesPhoneResult',
    'GetPhonesPhoneMetadataResult',
    'GetServerBandwidthsBandwidthResult',
    'GetServerFlavorsFlavorResult',
    'GetServerFlavorsFlavorExtendSpecResult',
    'GetServersServerResult',
    'GetServersServerAddressResult',
    'GetServersServerMetadataResult',
]

@pulumi.output_type
class PhonePropertyPhones(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneId":
            suggest = "phone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PhonePropertyPhones. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PhonePropertyPhones.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PhonePropertyPhones.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_id: _builtins.str,
                 property: _builtins.str):
        """
        :param _builtins.str phone_id: Specifies the phone ID.
        :param _builtins.str property: Specifies the phone property, the format is json string.
        """
        pulumi.set(__self__, "phone_id", phone_id)
        pulumi.set(__self__, "property", property)

    @_builtins.property
    @pulumi.getter(name="phoneId")
    def phone_id(self) -> _builtins.str:
        """
        Specifies the phone ID.
        """
        return pulumi.get(self, "phone_id")

    @_builtins.property
    @pulumi.getter
    def property(self) -> _builtins.str:
        """
        Specifies the phone property, the format is json string.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class PhoneResetPhones(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneId":
            suggest = "phone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PhoneResetPhones. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PhoneResetPhones.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PhoneResetPhones.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_id: _builtins.str,
                 property: Optional[_builtins.str] = None):
        """
        :param _builtins.str phone_id: Specifies the ID of the CPH phone.
        :param _builtins.str property: Specifies the property of the CPH phone.
        """
        pulumi.set(__self__, "phone_id", phone_id)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @_builtins.property
    @pulumi.getter(name="phoneId")
    def phone_id(self) -> _builtins.str:
        """
        Specifies the ID of the CPH phone.
        """
        return pulumi.get(self, "phone_id")

    @_builtins.property
    @pulumi.getter
    def property(self) -> Optional[_builtins.str]:
        """
        Specifies the property of the CPH phone.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class PhoneRestartPhones(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneId":
            suggest = "phone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PhoneRestartPhones. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PhoneRestartPhones.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PhoneRestartPhones.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_id: _builtins.str,
                 property: Optional[_builtins.str] = None):
        """
        :param _builtins.str phone_id: Specifies the ID of the CPH phone.
        :param _builtins.str property: Specifies the property of the CPH phone.
        """
        pulumi.set(__self__, "phone_id", phone_id)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @_builtins.property
    @pulumi.getter(name="phoneId")
    def phone_id(self) -> _builtins.str:
        """
        Specifies the ID of the CPH phone.
        """
        return pulumi.get(self, "phone_id")

    @_builtins.property
    @pulumi.getter
    def property(self) -> Optional[_builtins.str]:
        """
        Specifies the property of the CPH phone.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class ServerAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicIp":
            suggest = "public_ip"
        elif key == "serverIp":
            suggest = "server_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_ip: Optional[_builtins.str] = None,
                 server_ip: Optional[_builtins.str] = None):
        """
        :param _builtins.str public_ip: The public IP address of the CPH server.
        :param _builtins.str server_ip: The internal IP address of the CPH server.
        """
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if server_ip is not None:
            pulumi.set(__self__, "server_ip", server_ip)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The public IP address of the CPH server.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> Optional[_builtins.str]:
        """
        The internal IP address of the CPH server.
        """
        return pulumi.get(self, "server_ip")


@pulumi.output_type
class ServerBandwidth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shareType":
            suggest = "share_type"
        elif key == "chargeMode":
            suggest = "charge_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerBandwidth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerBandwidth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerBandwidth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 share_type: _builtins.str,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 size: Optional[_builtins.int] = None):
        """
        :param _builtins.str share_type: The bandwidth type.  
               The options are as follows:
               + **0**: Dedicated bandwidth.
               + **1**: Shared bandwidth.
        :param _builtins.str charge_mode: Which the bandwidth used by the CPH server is billed.  
               This parameter is mandatory for a dedicated bandwidth.
               The options are as follows:
               + **0**: Billed by bandwidth.
               + **1**: Billed by traffic.
               
               <a name="cphServer_ApplicationPort"></a>
               The `ApplicationPort` block supports:
        :param _builtins.str id: The bandwidth ID.  
               You can specify an existing shared bandwidth when assigning an EIP for a shared bandwidth.
               This parameter is mandatory when you create a shared bandwidth.
        :param _builtins.int size: Specifies the share volume size, the unit is GB.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "share_type", share_type)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> _builtins.str:
        """
        The bandwidth type.  
        The options are as follows:
        + **0**: Dedicated bandwidth.
        + **1**: Shared bandwidth.
        """
        return pulumi.get(self, "share_type")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        Which the bandwidth used by the CPH server is billed.  
        This parameter is mandatory for a dedicated bandwidth.
        The options are as follows:
        + **0**: Billed by bandwidth.
        + **1**: Billed by traffic.

        <a name="cphServer_ApplicationPort"></a>
        The `ApplicationPort` block supports:
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The bandwidth ID.  
        You can specify an existing shared bandwidth when assigning an EIP for a shared bandwidth.
        This parameter is mandatory when you create a shared bandwidth.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        Specifies the share volume size, the unit is GB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class ServerPhoneDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "volumeId":
            suggest = "volume_id"
        elif key == "volumeName":
            suggest = "volume_name"
        elif key == "volumeSize":
            suggest = "volume_size"
        elif key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerPhoneDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerPhoneDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerPhoneDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None,
                 volume_id: Optional[_builtins.str] = None,
                 volume_name: Optional[_builtins.str] = None,
                 volume_size: Optional[_builtins.int] = None,
                 volume_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str created_at: The creation time.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str volume_id: The volume ID.
        :param _builtins.str volume_name: The volume name.
        :param _builtins.int volume_size: Specifies the volume size, the unit is GB.
               Changing this parameter will create a new resource.
        :param _builtins.str volume_type: Specifies the share volume type.
               Changing this parameter will create a new resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        The volume ID.
        """
        return pulumi.get(self, "volume_id")

    @_builtins.property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[_builtins.str]:
        """
        The volume name.
        """
        return pulumi.get(self, "volume_name")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[_builtins.int]:
        """
        Specifies the volume size, the unit is GB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[_builtins.str]:
        """
        Specifies the share volume type.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ServerPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internetAccessible":
            suggest = "internet_accessible"
        elif key == "listenPort":
            suggest = "listen_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internet_accessible: _builtins.str,
                 listen_port: _builtins.int,
                 name: _builtins.str):
        """
        :param _builtins.str internet_accessible: Whether public network access is mapped.
               The options are as follows:
               + **true**: public network access is mapped.
               + **false**: no mapping is performed.
               
               <a name="phone_data_volume"></a>
               The `phone_data_volume` block supports:
        :param _builtins.int listen_port: The port number, which ranges from `10,000` to `50,000`.
        :param _builtins.str name: The application port name, which can contain a maximum of 16 bytes.  
               The key service name cannot be **adb** or **vnc**.
        """
        pulumi.set(__self__, "internet_accessible", internet_accessible)
        pulumi.set(__self__, "listen_port", listen_port)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="internetAccessible")
    def internet_accessible(self) -> _builtins.str:
        """
        Whether public network access is mapped.
        The options are as follows:
        + **true**: public network access is mapped.
        + **false**: no mapping is performed.

        <a name="phone_data_volume"></a>
        The `phone_data_volume` block supports:
        """
        return pulumi.get(self, "internet_accessible")

    @_builtins.property
    @pulumi.getter(name="listenPort")
    def listen_port(self) -> _builtins.int:
        """
        The port number, which ranges from `10,000` to `50,000`.
        """
        return pulumi.get(self, "listen_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The application port name, which can contain a maximum of 16 bytes.  
        The key service name cannot be **adb** or **vnc**.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ServerServerShareDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerServerShareDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerServerShareDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerServerShareDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: Optional[_builtins.int] = None,
                 version: Optional[_builtins.int] = None,
                 volume_type: Optional[_builtins.str] = None):
        """
        :param _builtins.int size: Specifies the share volume size, the unit is GB.
               Changing this parameter will create a new resource.
        :param _builtins.int version: The share volume type.
        :param _builtins.str volume_type: Specifies the share volume type.
               Changing this parameter will create a new resource.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        Specifies the share volume size, the unit is GB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.int]:
        """
        The share volume type.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[_builtins.str]:
        """
        Specifies the share volume type.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetEncodeServersEncodeServerResult(dict):
    def __init__(__self__, *,
                 access_infos: Sequence['outputs.GetEncodeServersEncodeServerAccessInfoResult'],
                 encode_server_id: _builtins.str,
                 encode_server_ip: _builtins.str,
                 encode_server_ipv6: _builtins.str,
                 encode_server_name: _builtins.str,
                 keypair_name: _builtins.str,
                 server_id: _builtins.str,
                 status: _builtins.int,
                 type: _builtins.int):
        """
        :param Sequence['GetEncodeServersEncodeServerAccessInfoArgs'] access_infos: The encode server access list.
        :param _builtins.str encode_server_id: The encode server ID.
        :param _builtins.str encode_server_ip: The encode server IP.
        :param _builtins.str encode_server_ipv6: The server IPv6 of the encode server.
        :param _builtins.str encode_server_name: The server name of the encode server.
        :param _builtins.str keypair_name: The encode server keypair name.
        :param _builtins.str server_id: Specifies the CPH server ID.
        :param _builtins.int status: Specifies the encode server status.
               + **1**: Running
               + **2**: Abnormal
               + **3**: Restarting
               + **4**: Freeze
               + **5**: Shut down
               + **100**, **1014**, **0**: Creating
        :param _builtins.int type: Specifies the encode server type. The valid value can be **0** (server), **1** (container).
        """
        pulumi.set(__self__, "access_infos", access_infos)
        pulumi.set(__self__, "encode_server_id", encode_server_id)
        pulumi.set(__self__, "encode_server_ip", encode_server_ip)
        pulumi.set(__self__, "encode_server_ipv6", encode_server_ipv6)
        pulumi.set(__self__, "encode_server_name", encode_server_name)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="accessInfos")
    def access_infos(self) -> Sequence['outputs.GetEncodeServersEncodeServerAccessInfoResult']:
        """
        The encode server access list.
        """
        return pulumi.get(self, "access_infos")

    @_builtins.property
    @pulumi.getter(name="encodeServerId")
    def encode_server_id(self) -> _builtins.str:
        """
        The encode server ID.
        """
        return pulumi.get(self, "encode_server_id")

    @_builtins.property
    @pulumi.getter(name="encodeServerIp")
    def encode_server_ip(self) -> _builtins.str:
        """
        The encode server IP.
        """
        return pulumi.get(self, "encode_server_ip")

    @_builtins.property
    @pulumi.getter(name="encodeServerIpv6")
    def encode_server_ipv6(self) -> _builtins.str:
        """
        The server IPv6 of the encode server.
        """
        return pulumi.get(self, "encode_server_ipv6")

    @_builtins.property
    @pulumi.getter(name="encodeServerName")
    def encode_server_name(self) -> _builtins.str:
        """
        The server name of the encode server.
        """
        return pulumi.get(self, "encode_server_name")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> _builtins.str:
        """
        The encode server keypair name.
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        Specifies the CPH server ID.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Specifies the encode server status.
        + **1**: Running
        + **2**: Abnormal
        + **3**: Restarting
        + **4**: Freeze
        + **5**: Shut down
        + **100**, **1014**, **0**: Creating
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.int:
        """
        Specifies the encode server type. The valid value can be **0** (server), **1** (container).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetEncodeServersEncodeServerAccessInfoResult(dict):
    def __init__(__self__, *,
                 access_port: _builtins.int,
                 listen_port: _builtins.int,
                 public_ip: _builtins.str,
                 server_ip: _builtins.str,
                 server_ipv6: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.int access_port: The access port of the encode server access.
        :param _builtins.int listen_port: The listen port of the encode server access.
        :param _builtins.str public_ip: The public IP of the encode server access.
        :param _builtins.str server_ip: The server IP of the encode server access.
        :param _builtins.str server_ipv6: The server IPv6 of the encode server access.
        :param _builtins.str type: Specifies the encode server type. The valid value can be **0** (server), **1** (container).
        """
        pulumi.set(__self__, "access_port", access_port)
        pulumi.set(__self__, "listen_port", listen_port)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "server_ip", server_ip)
        pulumi.set(__self__, "server_ipv6", server_ipv6)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="accessPort")
    def access_port(self) -> _builtins.int:
        """
        The access port of the encode server access.
        """
        return pulumi.get(self, "access_port")

    @_builtins.property
    @pulumi.getter(name="listenPort")
    def listen_port(self) -> _builtins.int:
        """
        The listen port of the encode server access.
        """
        return pulumi.get(self, "listen_port")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the encode server access.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> _builtins.str:
        """
        The server IP of the encode server access.
        """
        return pulumi.get(self, "server_ip")

    @_builtins.property
    @pulumi.getter(name="serverIpv6")
    def server_ipv6(self) -> _builtins.str:
        """
        The server IPv6 of the encode server access.
        """
        return pulumi.get(self, "server_ipv6")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the encode server type. The valid value can be **0** (server), **1** (container).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPhoneConnectionsConnectInfoResult(dict):
    def __init__(__self__, *,
                 access_infos: Sequence['outputs.GetPhoneConnectionsConnectInfoAccessInfoResult'],
                 phone_id: _builtins.str):
        """
        :param Sequence['GetPhoneConnectionsConnectInfoAccessInfoArgs'] access_infos: The phone access information.
        :param _builtins.str phone_id: The phone ID.
        """
        pulumi.set(__self__, "access_infos", access_infos)
        pulumi.set(__self__, "phone_id", phone_id)

    @_builtins.property
    @pulumi.getter(name="accessInfos")
    def access_infos(self) -> Sequence['outputs.GetPhoneConnectionsConnectInfoAccessInfoResult']:
        """
        The phone access information.
        """
        return pulumi.get(self, "access_infos")

    @_builtins.property
    @pulumi.getter(name="phoneId")
    def phone_id(self) -> _builtins.str:
        """
        The phone ID.
        """
        return pulumi.get(self, "phone_id")


@pulumi.output_type
class GetPhoneConnectionsConnectInfoAccessInfoResult(dict):
    def __init__(__self__, *,
                 access_ip: _builtins.str,
                 access_ipv6: _builtins.str,
                 access_port: _builtins.int,
                 access_time: _builtins.str,
                 intranet_ip: _builtins.str,
                 session_id: _builtins.str,
                 ticket: _builtins.str):
        """
        :param _builtins.str access_ip: The IP of this access.
        :param _builtins.str access_ipv6: The IPv6 address of this access.
        :param _builtins.int access_port: The access port of cloud phone instance.
        :param _builtins.str access_time: The time of this access.
        :param _builtins.str intranet_ip: The intranet IP address of this access.
        :param _builtins.str session_id: The session ID of this access.
        :param _builtins.str ticket: The ticket of this access.
        """
        pulumi.set(__self__, "access_ip", access_ip)
        pulumi.set(__self__, "access_ipv6", access_ipv6)
        pulumi.set(__self__, "access_port", access_port)
        pulumi.set(__self__, "access_time", access_time)
        pulumi.set(__self__, "intranet_ip", intranet_ip)
        pulumi.set(__self__, "session_id", session_id)
        pulumi.set(__self__, "ticket", ticket)

    @_builtins.property
    @pulumi.getter(name="accessIp")
    def access_ip(self) -> _builtins.str:
        """
        The IP of this access.
        """
        return pulumi.get(self, "access_ip")

    @_builtins.property
    @pulumi.getter(name="accessIpv6")
    def access_ipv6(self) -> _builtins.str:
        """
        The IPv6 address of this access.
        """
        return pulumi.get(self, "access_ipv6")

    @_builtins.property
    @pulumi.getter(name="accessPort")
    def access_port(self) -> _builtins.int:
        """
        The access port of cloud phone instance.
        """
        return pulumi.get(self, "access_port")

    @_builtins.property
    @pulumi.getter(name="accessTime")
    def access_time(self) -> _builtins.str:
        """
        The time of this access.
        """
        return pulumi.get(self, "access_time")

    @_builtins.property
    @pulumi.getter(name="intranetIp")
    def intranet_ip(self) -> _builtins.str:
        """
        The intranet IP address of this access.
        """
        return pulumi.get(self, "intranet_ip")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> _builtins.str:
        """
        The session ID of this access.
        """
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter
    def ticket(self) -> _builtins.str:
        """
        The ticket of this access.
        """
        return pulumi.get(self, "ticket")


@pulumi.output_type
class GetPhoneCustomImagesImageResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 domain_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 size: _builtins.int,
                 src_project_id: _builtins.str,
                 status: _builtins.int,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str created_at: The image creation time.
        :param _builtins.str domain_id: The domain ID to which the image belongs.
        :param _builtins.str id: The image ID.
        :param _builtins.str name: Specifies the image name.
        :param _builtins.str project_id: The project ID of the image.
        :param _builtins.int size: The image size, the unit is byte.
        :param _builtins.str src_project_id: Specifies the project ID of the share image account.
        :param _builtins.int status: Specifies the image status.
               The valid value can be **0** (creating), **-1** (production) or **-2** (create failed).
        :param _builtins.str type: Specifies the image type. The valid value can be **public**, **private** or **share**.
        :param _builtins.str updated_at: The image update time.
        :param _builtins.str version: The image AOSP version.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "src_project_id", src_project_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The image creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID to which the image belongs.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The image ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the image name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID of the image.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The image size, the unit is byte.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="srcProjectId")
    def src_project_id(self) -> _builtins.str:
        """
        Specifies the project ID of the share image account.
        """
        return pulumi.get(self, "src_project_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Specifies the image status.
        The valid value can be **0** (creating), **-1** (production) or **-2** (create failed).
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the image type. The valid value can be **public**, **private** or **share**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The image update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The image AOSP version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPhoneFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 disk: _builtins.int,
                 extend_spec: _builtins.str,
                 flavor_id: _builtins.str,
                 image_label: _builtins.str,
                 memory: _builtins.int,
                 phone_capacity: _builtins.int,
                 resolution: _builtins.str,
                 server_flavor_id: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 vcpus: _builtins.int):
        """
        :param _builtins.int disk: The storage size in GB.
        :param _builtins.str extend_spec: The extended description, which is a string in JSON format and can contain a maximum of 512 bytes.
        :param _builtins.str flavor_id: The name of the flavor.
        :param _builtins.str image_label: The label of image.
               The valid values are **cloud_phone**, **cloud_game**, **qemu_phone**, **cloud_phone_1620**, and **cloud_game_1620**.
        :param _builtins.int memory: The ram of the CPH phone in MB.
        :param _builtins.int phone_capacity: The number of cloud phones of the current flavor.
        :param _builtins.str resolution: The resolution of the CPH phone.
        :param _builtins.str server_flavor_id: The CPH server flavor.
        :param _builtins.str status: The flavor status. Defaults to **1**.  
               The options are as follows:
               + **0**: offline.
               + **1**: normal.
        :param _builtins.str type: The cloud phone type.  
               The options are as follows:
               + **0**: Cloud phone.
               + **1**: Cloud mobile gaming.
        :param _builtins.int vcpus: The vcpus of the CPH phone.
        """
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "extend_spec", extend_spec)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "image_label", image_label)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "phone_capacity", phone_capacity)
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "server_flavor_id", server_flavor_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter
    def disk(self) -> _builtins.int:
        """
        The storage size in GB.
        """
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter(name="extendSpec")
    def extend_spec(self) -> _builtins.str:
        """
        The extended description, which is a string in JSON format and can contain a maximum of 512 bytes.
        """
        return pulumi.get(self, "extend_spec")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        The name of the flavor.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter(name="imageLabel")
    def image_label(self) -> _builtins.str:
        """
        The label of image.
        The valid values are **cloud_phone**, **cloud_game**, **qemu_phone**, **cloud_phone_1620**, and **cloud_game_1620**.
        """
        return pulumi.get(self, "image_label")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        The ram of the CPH phone in MB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="phoneCapacity")
    def phone_capacity(self) -> _builtins.int:
        """
        The number of cloud phones of the current flavor.
        """
        return pulumi.get(self, "phone_capacity")

    @_builtins.property
    @pulumi.getter
    def resolution(self) -> _builtins.str:
        """
        The resolution of the CPH phone.
        """
        return pulumi.get(self, "resolution")

    @_builtins.property
    @pulumi.getter(name="serverFlavorId")
    def server_flavor_id(self) -> _builtins.str:
        """
        The CPH server flavor.
        """
        return pulumi.get(self, "server_flavor_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The flavor status. Defaults to **1**.  
        The options are as follows:
        + **0**: offline.
        + **1**: normal.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The cloud phone type.  
        The options are as follows:
        + **0**: Cloud phone.
        + **1**: Cloud mobile gaming.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        The vcpus of the CPH phone.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetPhoneImagesImageResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 image_label: _builtins.str,
                 is_public: _builtins.int,
                 name: _builtins.str,
                 os_name: _builtins.str,
                 os_type: _builtins.str):
        """
        :param _builtins.str id: The ID of the image.
        :param _builtins.str image_label: The label of image.  
               The valid values are **cloud_phone**, **cloud_game**, **qemu_phone**, **cloud_phone_1620**, and **cloud_game_1620**.
        :param _builtins.int is_public: The image type.  
               The options are as follows:
               + **1**: Public image.
               + **2**: Private image.
        :param _builtins.str name: The name of the image.
        :param _builtins.str os_name: The os name of the image.
        :param _builtins.str os_type: The os type of the image.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_label", image_label)
        pulumi.set(__self__, "is_public", is_public)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_type", os_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the image.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageLabel")
    def image_label(self) -> _builtins.str:
        """
        The label of image.  
        The valid values are **cloud_phone**, **cloud_game**, **qemu_phone**, **cloud_phone_1620**, and **cloud_game_1620**.
        """
        return pulumi.get(self, "image_label")

    @_builtins.property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> _builtins.int:
        """
        The image type.  
        The options are as follows:
        + **1**: Public image.
        + **2**: Private image.
        """
        return pulumi.get(self, "is_public")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the image.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osName")
    def os_name(self) -> _builtins.str:
        """
        The os name of the image.
        """
        return pulumi.get(self, "os_name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The os type of the image.
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class GetPhonesPhoneResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 create_time: _builtins.str,
                 image_id: _builtins.str,
                 image_version: _builtins.str,
                 imei: _builtins.str,
                 metadatas: Sequence['outputs.GetPhonesPhoneMetadataResult'],
                 phone_id: _builtins.str,
                 phone_model_name: _builtins.str,
                 phone_name: _builtins.str,
                 server_id: _builtins.str,
                 status: _builtins.int,
                 traffic_type: _builtins.str,
                 type: _builtins.int,
                 update_time: _builtins.str,
                 vnc_enable: _builtins.str,
                 volume_mode: _builtins.int):
        """
        :param _builtins.str availability_zone: The availability zone where the cloud mobile server is located.
        :param _builtins.str create_time: The create time.
        :param _builtins.str image_id: The cloud phone image ID.
        :param _builtins.str image_version: The image version.
        :param _builtins.str imei: The IMEI of the phone.
        :param Sequence['GetPhonesPhoneMetadataArgs'] metadatas: The order and product related information.
        :param _builtins.str phone_id: The cloud phone ID.
        :param _builtins.str phone_model_name: The cloud phone flavor name.
        :param _builtins.str phone_name: Specifies the cloud phone name and support fuzzy query.
        :param _builtins.str server_id: Specifies the cloud phone server ID.
        :param _builtins.int status: Specifies the cloud phone status.
               + **1**: Creating
               + **2**: Running
               + **3**: Resetting
               + **4**: Restarting
               + **6**: Freeze
               + **7**: Shutting down
               + **8**: Shut down
               + **-5**: Reset failed
               + **-6**: Restart failed
               + **-7**: Mobile phone abnormality
               + **-8**: Creation failed
               + **-9**: Shutdown failed
        :param _builtins.str traffic_type: The phone routing type.
               + **direct**: default route
               + **routing**: routing to the encoding container
        :param _builtins.int type: Specifies the cloud phone type.
               + **0**: Ordinary cloud phone
               + **1**: Trial cloud phone
        :param _builtins.str update_time: The update time.
        :param _builtins.str vnc_enable: Whether to enable the VNC service on the cloud phone.
               + **true**: enable
               + **false**: disable
        :param _builtins.int volume_mode: Whether the physical disk of the mobile phone is independent.
               + **0**: Not independent
               + **1**: Independent
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "imei", imei)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "phone_id", phone_id)
        pulumi.set(__self__, "phone_model_name", phone_model_name)
        pulumi.set(__self__, "phone_name", phone_name)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "traffic_type", traffic_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vnc_enable", vnc_enable)
        pulumi.set(__self__, "volume_mode", volume_mode)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone where the cloud mobile server is located.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The cloud phone image ID.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> _builtins.str:
        """
        The image version.
        """
        return pulumi.get(self, "image_version")

    @_builtins.property
    @pulumi.getter
    def imei(self) -> _builtins.str:
        """
        The IMEI of the phone.
        """
        return pulumi.get(self, "imei")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetPhonesPhoneMetadataResult']:
        """
        The order and product related information.
        """
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter(name="phoneId")
    def phone_id(self) -> _builtins.str:
        """
        The cloud phone ID.
        """
        return pulumi.get(self, "phone_id")

    @_builtins.property
    @pulumi.getter(name="phoneModelName")
    def phone_model_name(self) -> _builtins.str:
        """
        The cloud phone flavor name.
        """
        return pulumi.get(self, "phone_model_name")

    @_builtins.property
    @pulumi.getter(name="phoneName")
    def phone_name(self) -> _builtins.str:
        """
        Specifies the cloud phone name and support fuzzy query.
        """
        return pulumi.get(self, "phone_name")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        Specifies the cloud phone server ID.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Specifies the cloud phone status.
        + **1**: Creating
        + **2**: Running
        + **3**: Resetting
        + **4**: Restarting
        + **6**: Freeze
        + **7**: Shutting down
        + **8**: Shut down
        + **-5**: Reset failed
        + **-6**: Restart failed
        + **-7**: Mobile phone abnormality
        + **-8**: Creation failed
        + **-9**: Shutdown failed
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> _builtins.str:
        """
        The phone routing type.
        + **direct**: default route
        + **routing**: routing to the encoding container
        """
        return pulumi.get(self, "traffic_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.int:
        """
        Specifies the cloud phone type.
        + **0**: Ordinary cloud phone
        + **1**: Trial cloud phone
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="vncEnable")
    def vnc_enable(self) -> _builtins.str:
        """
        Whether to enable the VNC service on the cloud phone.
        + **true**: enable
        + **false**: disable
        """
        return pulumi.get(self, "vnc_enable")

    @_builtins.property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> _builtins.int:
        """
        Whether the physical disk of the mobile phone is independent.
        + **0**: Not independent
        + **1**: Independent
        """
        return pulumi.get(self, "volume_mode")


@pulumi.output_type
class GetPhonesPhoneMetadataResult(dict):
    def __init__(__self__, *,
                 order_id: _builtins.str,
                 product_id: _builtins.str):
        """
        :param _builtins.str order_id: The order ID.
        :param _builtins.str product_id: The product ID.
        """
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "product_id", product_id)

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        The order ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        The product ID.
        """
        return pulumi.get(self, "product_id")


@pulumi.output_type
class GetServerBandwidthsBandwidthResult(dict):
    def __init__(__self__, *,
                 bandwidth_charge_mode: _builtins.int,
                 bandwidth_id: _builtins.str,
                 bandwidth_name: _builtins.str,
                 bandwidth_size: _builtins.int,
                 bandwidth_type: _builtins.int,
                 created_at: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.int bandwidth_charge_mode: The bandwidth charge mode.
               + **0**: bandwidth
               + **1**: traffic
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.
        :param _builtins.int bandwidth_size: The bandwidth size.
        :param _builtins.int bandwidth_type: The bandwidth type.
        :param _builtins.str created_at: The bandwidth creation time.
        :param _builtins.str updated_at: The bandwidth update time.
        """
        pulumi.set(__self__, "bandwidth_charge_mode", bandwidth_charge_mode)
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="bandwidthChargeMode")
    def bandwidth_charge_mode(self) -> _builtins.int:
        """
        The bandwidth charge mode.
        + **0**: bandwidth
        + **1**: traffic
        """
        return pulumi.get(self, "bandwidth_charge_mode")

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> _builtins.str:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> _builtins.str:
        """
        The bandwidth name.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> _builtins.int:
        """
        The bandwidth size.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> _builtins.int:
        """
        The bandwidth type.
        """
        return pulumi.get(self, "bandwidth_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The bandwidth creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The bandwidth update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetServerFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 extend_specs: Sequence['outputs.GetServerFlavorsFlavorExtendSpecResult'],
                 flavor_id: _builtins.str,
                 memory: _builtins.int,
                 type: _builtins.str,
                 vcpus: _builtins.int):
        """
        :param Sequence['GetServerFlavorsFlavorExtendSpecArgs'] extend_specs: The extended attribute description.
               The ExtendSpec structure is documented below.
        :param _builtins.str flavor_id: The name of the flavor.
        :param _builtins.int memory: The ram of the CPH server in GB.
        :param _builtins.str type: The type of the CPH server flavor.  
               The options are as follows:
               + **0**: Cloud phone servers are designed for app hosting and multi-platform live streaming.
               + **1**: Cloud mobile gaming servers, GPU hardware acceleration and graphics interfaces
               allow you to run mobile games on the cloud.
        :param _builtins.int vcpus: The vcpus of the CPH server.
        """
        pulumi.set(__self__, "extend_specs", extend_specs)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="extendSpecs")
    def extend_specs(self) -> Sequence['outputs.GetServerFlavorsFlavorExtendSpecResult']:
        """
        The extended attribute description.
        The ExtendSpec structure is documented below.
        """
        return pulumi.get(self, "extend_specs")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        The name of the flavor.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        The ram of the CPH server in GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the CPH server flavor.  
        The options are as follows:
        + **0**: Cloud phone servers are designed for app hosting and multi-platform live streaming.
        + **1**: Cloud mobile gaming servers, GPU hardware acceleration and graphics interfaces
        allow you to run mobile games on the cloud.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        The vcpus of the CPH server.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetServerFlavorsFlavorExtendSpecResult(dict):
    def __init__(__self__, *,
                 bms_flavor: _builtins.str,
                 disk: _builtins.str,
                 gpu: _builtins.str,
                 gpu_count: _builtins.int,
                 memory: _builtins.str,
                 network_interface: _builtins.str,
                 numa_count: _builtins.int,
                 vcpus: _builtins.str):
        """
        :param _builtins.str bms_flavor: The extended description of the bms flavor.
        :param _builtins.str disk: The extended description of the disk.
        :param _builtins.str gpu: The extended description of the gpu.
        :param _builtins.int gpu_count: The gpu count.
        :param _builtins.str memory: The ram of the CPH server in GB.
        :param _builtins.str network_interface: The extended description of the network interface.
        :param _builtins.int numa_count: The numa count.
        :param _builtins.str vcpus: The vcpus of the CPH server.
        """
        pulumi.set(__self__, "bms_flavor", bms_flavor)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "gpu", gpu)
        pulumi.set(__self__, "gpu_count", gpu_count)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "network_interface", network_interface)
        pulumi.set(__self__, "numa_count", numa_count)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="bmsFlavor")
    def bms_flavor(self) -> _builtins.str:
        """
        The extended description of the bms flavor.
        """
        return pulumi.get(self, "bms_flavor")

    @_builtins.property
    @pulumi.getter
    def disk(self) -> _builtins.str:
        """
        The extended description of the disk.
        """
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter
    def gpu(self) -> _builtins.str:
        """
        The extended description of the gpu.
        """
        return pulumi.get(self, "gpu")

    @_builtins.property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> _builtins.int:
        """
        The gpu count.
        """
        return pulumi.get(self, "gpu_count")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        The ram of the CPH server in GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> _builtins.str:
        """
        The extended description of the network interface.
        """
        return pulumi.get(self, "network_interface")

    @_builtins.property
    @pulumi.getter(name="numaCount")
    def numa_count(self) -> _builtins.int:
        """
        The numa count.
        """
        return pulumi.get(self, "numa_count")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        The vcpus of the CPH server.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetServersServerResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.GetServersServerAddressResult'],
                 availability_zone: _builtins.str,
                 cidr: _builtins.str,
                 create_time: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 keypair_name: _builtins.str,
                 metadatas: Sequence['outputs.GetServersServerMetadataResult'],
                 network_version: _builtins.str,
                 phone_flavor: _builtins.str,
                 resource_project_id: _builtins.str,
                 server_flavor: _builtins.str,
                 server_id: _builtins.str,
                 server_name: _builtins.str,
                 status: _builtins.int,
                 subnet_cidr: _builtins.str,
                 subnet_id: _builtins.str,
                 update_time: _builtins.str,
                 vpc_cidr: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param Sequence['GetServersServerAddressArgs'] addresses: The IP related information of the cloud phone server.
        :param _builtins.str availability_zone: The availability zone where the cloud mobile server is located.
        :param _builtins.str cidr: The network segment of VPC to which the cloud phone server belongs.
        :param _builtins.str create_time: The creation time.
        :param _builtins.str enterprise_project_id: The enterprise project ID to which the cloud phone server belongs.
        :param _builtins.str keypair_name: The name of the key pair used to connect to the cloud phone.
        :param Sequence['GetServersServerMetadataArgs'] metadatas: The order and product related information.
        :param _builtins.str network_version: Specifies whether the cloud phone server is a custom network identifier.
               + **v1**: System-defined network cloud phone server.
               + **v2**: Cloud phone server for custom network.
        :param _builtins.str phone_flavor: Specifies the cloud phone flavor name.
        :param _builtins.str resource_project_id: The project ID of the cloud phone server.
        :param _builtins.str server_flavor: The cloud phone server flavor name.
        :param _builtins.str server_id: Specifies the cloud phone server ID.
        :param _builtins.str server_name: Specifies the cloud phone server name and support fuzzy query.
        :param _builtins.int status: Specifies the server status.
               + **0, 1, 3, 4**: Creating
               + **2**: Abnormal
               + **5**: Normal
               + **8**: Freeze
               + **10**: Shut down
               + **11**: Shutting down
               + **12**: Shutdown failed
               + **13**: Starting up
        :param _builtins.str subnet_cidr: The subnet CIDR to which the cloud phone server belongs.
        :param _builtins.str subnet_id: The ID of the subnet to which the cloud phone server belongs.
        :param _builtins.str update_time: The update time.
        :param _builtins.str vpc_cidr: The VPC CIDR.
               When the value of `network_version` is **v1**, it indicates the VPC CIDR of the resource tenant to which
               the cloud mobile server belongs; when the value of `network_version` is **v2**, it indicates the VPC CIDR of the VPC
               specified by the tenant when creating the server.
        :param _builtins.str vpc_id: The ID of the virtual private cloud (VPC for short) to which the cloud mobile server belongs.
               When the value of `network_version` is **v1**, it indicates the VPC ID of the resource tenant to which
               the cloud mobile server belongs; when the value of `network_version` is **v2**, it indicates the VPC ID
               of the VPC specified by the tenant when creating the server.
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "network_version", network_version)
        pulumi.set(__self__, "phone_flavor", phone_flavor)
        pulumi.set(__self__, "resource_project_id", resource_project_id)
        pulumi.set(__self__, "server_flavor", server_flavor)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_cidr", subnet_cidr)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_cidr", vpc_cidr)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetServersServerAddressResult']:
        """
        The IP related information of the cloud phone server.
        """
        return pulumi.get(self, "addresses")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone where the cloud mobile server is located.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        The network segment of VPC to which the cloud phone server belongs.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID to which the cloud phone server belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> _builtins.str:
        """
        The name of the key pair used to connect to the cloud phone.
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetServersServerMetadataResult']:
        """
        The order and product related information.
        """
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter(name="networkVersion")
    def network_version(self) -> _builtins.str:
        """
        Specifies whether the cloud phone server is a custom network identifier.
        + **v1**: System-defined network cloud phone server.
        + **v2**: Cloud phone server for custom network.
        """
        return pulumi.get(self, "network_version")

    @_builtins.property
    @pulumi.getter(name="phoneFlavor")
    def phone_flavor(self) -> _builtins.str:
        """
        Specifies the cloud phone flavor name.
        """
        return pulumi.get(self, "phone_flavor")

    @_builtins.property
    @pulumi.getter(name="resourceProjectId")
    def resource_project_id(self) -> _builtins.str:
        """
        The project ID of the cloud phone server.
        """
        return pulumi.get(self, "resource_project_id")

    @_builtins.property
    @pulumi.getter(name="serverFlavor")
    def server_flavor(self) -> _builtins.str:
        """
        The cloud phone server flavor name.
        """
        return pulumi.get(self, "server_flavor")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        Specifies the cloud phone server ID.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> _builtins.str:
        """
        Specifies the cloud phone server name and support fuzzy query.
        """
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        Specifies the server status.
        + **0, 1, 3, 4**: Creating
        + **2**: Abnormal
        + **5**: Normal
        + **8**: Freeze
        + **10**: Shut down
        + **11**: Shutting down
        + **12**: Shutdown failed
        + **13**: Starting up
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> _builtins.str:
        """
        The subnet CIDR to which the cloud phone server belongs.
        """
        return pulumi.get(self, "subnet_cidr")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the subnet to which the cloud phone server belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> _builtins.str:
        """
        The VPC CIDR.
        When the value of `network_version` is **v1**, it indicates the VPC CIDR of the resource tenant to which
        the cloud mobile server belongs; when the value of `network_version` is **v2**, it indicates the VPC CIDR of the VPC
        specified by the tenant when creating the server.
        """
        return pulumi.get(self, "vpc_cidr")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the virtual private cloud (VPC for short) to which the cloud mobile server belongs.
        When the value of `network_version` is **v1**, it indicates the VPC ID of the resource tenant to which
        the cloud mobile server belongs; when the value of `network_version` is **v2**, it indicates the VPC ID
        of the VPC specified by the tenant when creating the server.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetServersServerAddressResult(dict):
    def __init__(__self__, *,
                 public_ip: _builtins.str,
                 server_ip: _builtins.str):
        """
        :param _builtins.str public_ip: The public IP of cloud phone server.
        :param _builtins.str server_ip: The intranet IP of cloud phone server.
        """
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "server_ip", server_ip)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of cloud phone server.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> _builtins.str:
        """
        The intranet IP of cloud phone server.
        """
        return pulumi.get(self, "server_ip")


@pulumi.output_type
class GetServersServerMetadataResult(dict):
    def __init__(__self__, *,
                 order_id: _builtins.str,
                 product_id: _builtins.str):
        """
        :param _builtins.str order_id: The order ID.
        :param _builtins.str product_id: The product ID.
        """
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "product_id", product_id)

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        The order ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        The product ID.
        """
        return pulumi.get(self, "product_id")


