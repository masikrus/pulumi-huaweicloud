# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPhonesResult',
    'AwaitableGetPhonesResult',
    'get_phones',
    'get_phones_output',
]

@pulumi.output_type
class GetPhonesResult:
    """
    A collection of values returned by getPhones.
    """
    def __init__(__self__, id=None, phone_name=None, phones=None, region=None, server_id=None, status=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if phone_name and not isinstance(phone_name, str):
            raise TypeError("Expected argument 'phone_name' to be a str")
        pulumi.set(__self__, "phone_name", phone_name)
        if phones and not isinstance(phones, list):
            raise TypeError("Expected argument 'phones' to be a list")
        pulumi.set(__self__, "phones", phones)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)
        if status and not isinstance(status, int):
            raise TypeError("Expected argument 'status' to be a int")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="phoneName")
    def phone_name(self) -> Optional[_builtins.str]:
        """
        The cloud phone name.
        """
        return pulumi.get(self, "phone_name")

    @_builtins.property
    @pulumi.getter
    def phones(self) -> Sequence['outputs.GetPhonesPhoneResult']:
        """
        The cloud phone list.
        """
        return pulumi.get(self, "phones")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[_builtins.str]:
        """
        The cloud phone server ID.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        The cloud phone status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The cloud phone type.
        """
        return pulumi.get(self, "type")


class AwaitableGetPhonesResult(GetPhonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPhonesResult(
            id=self.id,
            phone_name=self.phone_name,
            phones=self.phones,
            region=self.region,
            server_id=self.server_id,
            status=self.status,
            type=self.type)


def get_phones(phone_name: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               server_id: Optional[_builtins.str] = None,
               status: Optional[_builtins.int] = None,
               type: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPhonesResult:
    """
    Use this data source to get the list of CPH phones.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.cph.get_phones()
    ```


    :param _builtins.str phone_name: Specifies the cloud phone name and support fuzzy query.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_id: Specifies the cloud phone server ID.
    :param _builtins.int status: Specifies the cloud phone status.
           + **1**: Creating
           + **2**: Running
           + **3**: Resetting
           + **4**: Restarting
           + **6**: Freeze
           + **7**: Shutting down
           + **8**: Shut down
           + **-5**: Reset failed
           + **-6**: Restart failed
           + **-7**: Mobile phone abnormality
           + **-8**: Creation failed
           + **-9**: Shutdown failed
    :param _builtins.str type: Specifies the cloud phone type.
           + **0**: Ordinary cloud phone
           + **1**: Trial cloud phone
    """
    __args__ = dict()
    __args__['phoneName'] = phone_name
    __args__['region'] = region
    __args__['serverId'] = server_id
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:cph/getPhones:getPhones', __args__, opts=opts, typ=GetPhonesResult).value

    return AwaitableGetPhonesResult(
        id=pulumi.get(__ret__, 'id'),
        phone_name=pulumi.get(__ret__, 'phone_name'),
        phones=pulumi.get(__ret__, 'phones'),
        region=pulumi.get(__ret__, 'region'),
        server_id=pulumi.get(__ret__, 'server_id'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_phones_output(phone_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      server_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      status: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                      type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPhonesResult]:
    """
    Use this data source to get the list of CPH phones.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.cph.get_phones()
    ```


    :param _builtins.str phone_name: Specifies the cloud phone name and support fuzzy query.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_id: Specifies the cloud phone server ID.
    :param _builtins.int status: Specifies the cloud phone status.
           + **1**: Creating
           + **2**: Running
           + **3**: Resetting
           + **4**: Restarting
           + **6**: Freeze
           + **7**: Shutting down
           + **8**: Shut down
           + **-5**: Reset failed
           + **-6**: Restart failed
           + **-7**: Mobile phone abnormality
           + **-8**: Creation failed
           + **-9**: Shutdown failed
    :param _builtins.str type: Specifies the cloud phone type.
           + **0**: Ordinary cloud phone
           + **1**: Trial cloud phone
    """
    __args__ = dict()
    __args__['phoneName'] = phone_name
    __args__['region'] = region
    __args__['serverId'] = server_id
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:cph/getPhones:getPhones', __args__, opts=opts, typ=GetPhonesResult)
    return __ret__.apply(lambda __response__: GetPhonesResult(
        id=pulumi.get(__response__, 'id'),
        phone_name=pulumi.get(__response__, 'phone_name'),
        phones=pulumi.get(__response__, 'phones'),
        region=pulumi.get(__response__, 'region'),
        server_id=pulumi.get(__response__, 'server_id'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
