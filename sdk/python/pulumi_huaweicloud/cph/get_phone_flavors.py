# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPhoneFlavorsResult',
    'AwaitableGetPhoneFlavorsResult',
    'get_phone_flavors',
    'get_phone_flavors_output',
]

@pulumi.output_type
class GetPhoneFlavorsResult:
    """
    A collection of values returned by getPhoneFlavors.
    """
    def __init__(__self__, flavors=None, id=None, image_label=None, memory=None, region=None, server_flavor_id=None, status=None, type=None, vcpus=None):
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_label and not isinstance(image_label, str):
            raise TypeError("Expected argument 'image_label' to be a str")
        pulumi.set(__self__, "image_label", image_label)
        if memory and not isinstance(memory, int):
            raise TypeError("Expected argument 'memory' to be a int")
        pulumi.set(__self__, "memory", memory)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_flavor_id and not isinstance(server_flavor_id, str):
            raise TypeError("Expected argument 'server_flavor_id' to be a str")
        pulumi.set(__self__, "server_flavor_id", server_flavor_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vcpus and not isinstance(vcpus, int):
            raise TypeError("Expected argument 'vcpus' to be a int")
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetPhoneFlavorsFlavorResult']:
        """
        The list of flavor detail.
        The Flavors structure is documented below.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageLabel")
    def image_label(self) -> _builtins.str:
        """
        (Optional, String) The label of image.
        The valid values are **cloud_phone**, **cloud_game**, **qemu_phone**, **cloud_phone_1620**, and **cloud_game_1620**.
        """
        return pulumi.get(self, "image_label")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.int]:
        """
        The ram of the CPH phone in MB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverFlavorId")
    def server_flavor_id(self) -> Optional[_builtins.str]:
        """
        The name of the CPH server flavor.
        """
        return pulumi.get(self, "server_flavor_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The flavor status.  
        The options are as follows:
        + **0**: offline.
        + **1**: normal.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The cloud phone type.  
        The options are as follows:
        + **0**: Cloud phone.
        + **1**: Cloud mobile gaming.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[_builtins.int]:
        """
        The vcpus of the CPH phone.
        """
        return pulumi.get(self, "vcpus")


class AwaitableGetPhoneFlavorsResult(GetPhoneFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPhoneFlavorsResult(
            flavors=self.flavors,
            id=self.id,
            image_label=self.image_label,
            memory=self.memory,
            region=self.region,
            server_flavor_id=self.server_flavor_id,
            status=self.status,
            type=self.type,
            vcpus=self.vcpus)


def get_phone_flavors(memory: Optional[_builtins.int] = None,
                      region: Optional[_builtins.str] = None,
                      server_flavor_id: Optional[_builtins.str] = None,
                      status: Optional[_builtins.str] = None,
                      type: Optional[_builtins.str] = None,
                      vcpus: Optional[_builtins.int] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPhoneFlavorsResult:
    """
    Use this data source to get available flavors of CPH phone.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.cph.get_phone_flavors(type="1")
    ```


    :param _builtins.int memory: The ram of the CPH phone in MB.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_flavor_id: The CPH server flavor.
    :param _builtins.str status: The flavor status. Defaults to **1**.  
           The options are as follows:
           + **0**: offline.
           + **1**: normal.
    :param _builtins.str type: The cloud phone type.  
           The options are as follows:
           + **0**: Cloud phone.
           + **1**: Cloud mobile gaming.
    :param _builtins.int vcpus: The vcpus of the CPH phone.
    """
    __args__ = dict()
    __args__['memory'] = memory
    __args__['region'] = region
    __args__['serverFlavorId'] = server_flavor_id
    __args__['status'] = status
    __args__['type'] = type
    __args__['vcpus'] = vcpus
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:cph/getPhoneFlavors:getPhoneFlavors', __args__, opts=opts, typ=GetPhoneFlavorsResult).value

    return AwaitableGetPhoneFlavorsResult(
        flavors=pulumi.get(__ret__, 'flavors'),
        id=pulumi.get(__ret__, 'id'),
        image_label=pulumi.get(__ret__, 'image_label'),
        memory=pulumi.get(__ret__, 'memory'),
        region=pulumi.get(__ret__, 'region'),
        server_flavor_id=pulumi.get(__ret__, 'server_flavor_id'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        vcpus=pulumi.get(__ret__, 'vcpus'))
def get_phone_flavors_output(memory: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             server_flavor_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             vcpus: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPhoneFlavorsResult]:
    """
    Use this data source to get available flavors of CPH phone.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.cph.get_phone_flavors(type="1")
    ```


    :param _builtins.int memory: The ram of the CPH phone in MB.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_flavor_id: The CPH server flavor.
    :param _builtins.str status: The flavor status. Defaults to **1**.  
           The options are as follows:
           + **0**: offline.
           + **1**: normal.
    :param _builtins.str type: The cloud phone type.  
           The options are as follows:
           + **0**: Cloud phone.
           + **1**: Cloud mobile gaming.
    :param _builtins.int vcpus: The vcpus of the CPH phone.
    """
    __args__ = dict()
    __args__['memory'] = memory
    __args__['region'] = region
    __args__['serverFlavorId'] = server_flavor_id
    __args__['status'] = status
    __args__['type'] = type
    __args__['vcpus'] = vcpus
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:cph/getPhoneFlavors:getPhoneFlavors', __args__, opts=opts, typ=GetPhoneFlavorsResult)
    return __ret__.apply(lambda __response__: GetPhoneFlavorsResult(
        flavors=pulumi.get(__response__, 'flavors'),
        id=pulumi.get(__response__, 'id'),
        image_label=pulumi.get(__response__, 'image_label'),
        memory=pulumi.get(__response__, 'memory'),
        region=pulumi.get(__response__, 'region'),
        server_flavor_id=pulumi.get(__response__, 'server_flavor_id'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        vcpus=pulumi.get(__response__, 'vcpus')))
