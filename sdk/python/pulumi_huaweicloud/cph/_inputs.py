# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'PhonePropertyPhonesArgs',
    'PhonePropertyPhonesArgsDict',
    'PhoneResetPhonesArgs',
    'PhoneResetPhonesArgsDict',
    'PhoneRestartPhonesArgs',
    'PhoneRestartPhonesArgsDict',
    'ServerAddressArgs',
    'ServerAddressArgsDict',
    'ServerBandwidthArgs',
    'ServerBandwidthArgsDict',
    'ServerPhoneDataVolumeArgs',
    'ServerPhoneDataVolumeArgsDict',
    'ServerPortArgs',
    'ServerPortArgsDict',
    'ServerServerShareDataVolumeArgs',
    'ServerServerShareDataVolumeArgsDict',
]

MYPY = False

if not MYPY:
    class PhonePropertyPhonesArgsDict(TypedDict):
        phone_id: pulumi.Input[_builtins.str]
        """
        Specifies the phone ID.
        """
        property: pulumi.Input[_builtins.str]
        """
        Specifies the phone property, the format is json string.
        """
elif False:
    PhonePropertyPhonesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PhonePropertyPhonesArgs:
    def __init__(__self__, *,
                 phone_id: pulumi.Input[_builtins.str],
                 property: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] phone_id: Specifies the phone ID.
        :param pulumi.Input[_builtins.str] property: Specifies the phone property, the format is json string.
        """
        pulumi.set(__self__, "phone_id", phone_id)
        pulumi.set(__self__, "property", property)

    @_builtins.property
    @pulumi.getter(name="phoneId")
    def phone_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the phone ID.
        """
        return pulumi.get(self, "phone_id")

    @phone_id.setter
    def phone_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "phone_id", value)

    @_builtins.property
    @pulumi.getter
    def property(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the phone property, the format is json string.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "property", value)


if not MYPY:
    class PhoneResetPhonesArgsDict(TypedDict):
        phone_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the CPH phone.
        """
        property: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the property of the CPH phone.
        """
elif False:
    PhoneResetPhonesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PhoneResetPhonesArgs:
    def __init__(__self__, *,
                 phone_id: pulumi.Input[_builtins.str],
                 property: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] phone_id: Specifies the ID of the CPH phone.
        :param pulumi.Input[_builtins.str] property: Specifies the property of the CPH phone.
        """
        pulumi.set(__self__, "phone_id", phone_id)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @_builtins.property
    @pulumi.getter(name="phoneId")
    def phone_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CPH phone.
        """
        return pulumi.get(self, "phone_id")

    @phone_id.setter
    def phone_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "phone_id", value)

    @_builtins.property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the property of the CPH phone.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "property", value)


if not MYPY:
    class PhoneRestartPhonesArgsDict(TypedDict):
        phone_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the CPH phone.
        """
        property: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the property of the CPH phone.
        """
elif False:
    PhoneRestartPhonesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PhoneRestartPhonesArgs:
    def __init__(__self__, *,
                 phone_id: pulumi.Input[_builtins.str],
                 property: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] phone_id: Specifies the ID of the CPH phone.
        :param pulumi.Input[_builtins.str] property: Specifies the property of the CPH phone.
        """
        pulumi.set(__self__, "phone_id", phone_id)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @_builtins.property
    @pulumi.getter(name="phoneId")
    def phone_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CPH phone.
        """
        return pulumi.get(self, "phone_id")

    @phone_id.setter
    def phone_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "phone_id", value)

    @_builtins.property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the property of the CPH phone.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "property", value)


if not MYPY:
    class ServerAddressArgsDict(TypedDict):
        public_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        The public IP address of the CPH server.
        """
        server_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        The internal IP address of the CPH server.
        """
elif False:
    ServerAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerAddressArgs:
    def __init__(__self__, *,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 server_ip: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] public_ip: The public IP address of the CPH server.
        :param pulumi.Input[_builtins.str] server_ip: The internal IP address of the CPH server.
        """
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if server_ip is not None:
            pulumi.set(__self__, "server_ip", server_ip)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP address of the CPH server.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The internal IP address of the CPH server.
        """
        return pulumi.get(self, "server_ip")

    @server_ip.setter
    def server_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_ip", value)


if not MYPY:
    class ServerBandwidthArgsDict(TypedDict):
        share_type: pulumi.Input[_builtins.str]
        """
        The bandwidth type.  
        The options are as follows:
        + **0**: Dedicated bandwidth.
        + **1**: Shared bandwidth.
        """
        charge_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Which the bandwidth used by the CPH server is billed.  
        This parameter is mandatory for a dedicated bandwidth.
        The options are as follows:
        + **0**: Billed by bandwidth.
        + **1**: Billed by traffic.

        <a name="cphServer_ApplicationPort"></a>
        The `ApplicationPort` block supports:
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The bandwidth ID.  
        You can specify an existing shared bandwidth when assigning an EIP for a shared bandwidth.
        This parameter is mandatory when you create a shared bandwidth.
        """
        size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the share volume size, the unit is GB.
        Changing this parameter will create a new resource.
        """
elif False:
    ServerBandwidthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerBandwidthArgs:
    def __init__(__self__, *,
                 share_type: pulumi.Input[_builtins.str],
                 charge_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] share_type: The bandwidth type.  
               The options are as follows:
               + **0**: Dedicated bandwidth.
               + **1**: Shared bandwidth.
        :param pulumi.Input[_builtins.str] charge_mode: Which the bandwidth used by the CPH server is billed.  
               This parameter is mandatory for a dedicated bandwidth.
               The options are as follows:
               + **0**: Billed by bandwidth.
               + **1**: Billed by traffic.
               
               <a name="cphServer_ApplicationPort"></a>
               The `ApplicationPort` block supports:
        :param pulumi.Input[_builtins.str] id: The bandwidth ID.  
               You can specify an existing shared bandwidth when assigning an EIP for a shared bandwidth.
               This parameter is mandatory when you create a shared bandwidth.
        :param pulumi.Input[_builtins.int] size: Specifies the share volume size, the unit is GB.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "share_type", share_type)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="shareType")
    def share_type(self) -> pulumi.Input[_builtins.str]:
        """
        The bandwidth type.  
        The options are as follows:
        + **0**: Dedicated bandwidth.
        + **1**: Shared bandwidth.
        """
        return pulumi.get(self, "share_type")

    @share_type.setter
    def share_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share_type", value)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Which the bandwidth used by the CPH server is billed.  
        This parameter is mandatory for a dedicated bandwidth.
        The options are as follows:
        + **0**: Billed by bandwidth.
        + **1**: Billed by traffic.

        <a name="cphServer_ApplicationPort"></a>
        The `ApplicationPort` block supports:
        """
        return pulumi.get(self, "charge_mode")

    @charge_mode.setter
    def charge_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charge_mode", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bandwidth ID.  
        You can specify an existing shared bandwidth when assigning an EIP for a shared bandwidth.
        This parameter is mandatory when you create a shared bandwidth.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the share volume size, the unit is GB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class ServerPhoneDataVolumeArgsDict(TypedDict):
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The creation time.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The update time.
        """
        volume_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The volume ID.
        """
        volume_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The volume name.
        """
        volume_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the volume size, the unit is GB.
        Changing this parameter will create a new resource.
        """
        volume_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the share volume type.
        Changing this parameter will create a new resource.
        """
elif False:
    ServerPhoneDataVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerPhoneDataVolumeArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_size: Optional[pulumi.Input[_builtins.int]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        :param pulumi.Input[_builtins.str] volume_id: The volume ID.
        :param pulumi.Input[_builtins.str] volume_name: The volume name.
        :param pulumi.Input[_builtins.int] volume_size: Specifies the volume size, the unit is GB.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] volume_type: Specifies the share volume type.
               Changing this parameter will create a new resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The volume ID.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The volume name.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_name", value)

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the volume size, the unit is GB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "volume_size", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the share volume type.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class ServerPortArgsDict(TypedDict):
        internet_accessible: pulumi.Input[_builtins.str]
        """
        Whether public network access is mapped.
        The options are as follows:
        + **true**: public network access is mapped.
        + **false**: no mapping is performed.

        <a name="phone_data_volume"></a>
        The `phone_data_volume` block supports:
        """
        listen_port: pulumi.Input[_builtins.int]
        """
        The port number, which ranges from `10,000` to `50,000`.
        """
        name: pulumi.Input[_builtins.str]
        """
        The application port name, which can contain a maximum of 16 bytes.  
        The key service name cannot be **adb** or **vnc**.
        """
elif False:
    ServerPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerPortArgs:
    def __init__(__self__, *,
                 internet_accessible: pulumi.Input[_builtins.str],
                 listen_port: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] internet_accessible: Whether public network access is mapped.
               The options are as follows:
               + **true**: public network access is mapped.
               + **false**: no mapping is performed.
               
               <a name="phone_data_volume"></a>
               The `phone_data_volume` block supports:
        :param pulumi.Input[_builtins.int] listen_port: The port number, which ranges from `10,000` to `50,000`.
        :param pulumi.Input[_builtins.str] name: The application port name, which can contain a maximum of 16 bytes.  
               The key service name cannot be **adb** or **vnc**.
        """
        pulumi.set(__self__, "internet_accessible", internet_accessible)
        pulumi.set(__self__, "listen_port", listen_port)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="internetAccessible")
    def internet_accessible(self) -> pulumi.Input[_builtins.str]:
        """
        Whether public network access is mapped.
        The options are as follows:
        + **true**: public network access is mapped.
        + **false**: no mapping is performed.

        <a name="phone_data_volume"></a>
        The `phone_data_volume` block supports:
        """
        return pulumi.get(self, "internet_accessible")

    @internet_accessible.setter
    def internet_accessible(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "internet_accessible", value)

    @_builtins.property
    @pulumi.getter(name="listenPort")
    def listen_port(self) -> pulumi.Input[_builtins.int]:
        """
        The port number, which ranges from `10,000` to `50,000`.
        """
        return pulumi.get(self, "listen_port")

    @listen_port.setter
    def listen_port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "listen_port", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The application port name, which can contain a maximum of 16 bytes.  
        The key service name cannot be **adb** or **vnc**.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ServerServerShareDataVolumeArgsDict(TypedDict):
        size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the share volume size, the unit is GB.
        Changing this parameter will create a new resource.
        """
        version: NotRequired[pulumi.Input[_builtins.int]]
        """
        The share volume type.
        """
        volume_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the share volume type.
        Changing this parameter will create a new resource.
        """
elif False:
    ServerServerShareDataVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerServerShareDataVolumeArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] size: Specifies the share volume size, the unit is GB.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] version: The share volume type.
        :param pulumi.Input[_builtins.str] volume_type: Specifies the share volume type.
               Changing this parameter will create a new resource.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the share volume size, the unit is GB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The share volume type.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the share volume type.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_type", value)


