# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataserviceApiDebugArgs', 'DataserviceApiDebug']

@pulumi.input_type
class DataserviceApiDebugArgs:
    def __init__(__self__, *,
                 api_id: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 params: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataserviceApiDebug resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the catalog where the API is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of workspace where the API is located.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] max_retries: The maximum retry number of the API debug operation.
        :param pulumi.Input[_builtins.str] params: Specifies the request parameters in which to debug the API, in JSON format.
               Changing this parameter will create a new resource.
               
               > There are two default and required parameter `page_num` and `page_size` that need to be defined.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the catalog where the API is located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the exclusive cluster ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of workspace where the API is located.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum retry number of the API debug operation.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_retries", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request parameters in which to debug the API, in JSON format.
        Changing this parameter will create a new resource.

        > There are two default and required parameter `page_num` and `page_size` that need to be defined.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DataserviceApiDebugState:
    def __init__(__self__, *,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 params: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 request_header: Optional[pulumi.Input[_builtins.str]] = None,
                 response_header: Optional[pulumi.Input[_builtins.str]] = None,
                 result: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataserviceApiDebug resources.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the catalog where the API is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] max_retries: The maximum retry number of the API debug operation.
        :param pulumi.Input[_builtins.str] params: Specifies the request parameters in which to debug the API, in JSON format.
               Changing this parameter will create a new resource.
               
               > There are two default and required parameter `page_num` and `page_size` that need to be defined.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] request_header: The request header of this API debug result, in JSON format.
        :param pulumi.Input[_builtins.str] response_header: The response header of this API debug result, in JSON format.
        :param pulumi.Input[_builtins.str] result: The ID of the catalog where the API is located.
        :param pulumi.Input[_builtins.int] timeout: The timeout of this API debug.
        :param pulumi.Input[_builtins.str] url: The result detail of this API debug.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of workspace where the API is located.
               
               Changing this parameter will create a new resource.
        """
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if response_header is not None:
            pulumi.set(__self__, "response_header", response_header)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the catalog where the API is located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the exclusive cluster ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum retry number of the API debug operation.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_retries", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request parameters in which to debug the API, in JSON format.
        Changing this parameter will create a new resource.

        > There are two default and required parameter `page_num` and `page_size` that need to be defined.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request header of this API debug result, in JSON format.
        """
        return pulumi.get(self, "request_header")

    @request_header.setter
    def request_header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_header", value)

    @_builtins.property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The response header of this API debug result, in JSON format.
        """
        return pulumi.get(self, "response_header")

    @response_header.setter
    def response_header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "response_header", value)

    @_builtins.property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the catalog where the API is located.
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "result", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timeout of this API debug.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The result detail of this API debug.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of workspace where the API is located.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/dataserviceApiDebug:DataserviceApiDebug")
class DataserviceApiDebug(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 params: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to debug API for DataArts Data Service within HuaweiCloud.

        > 1. Only exclusive API can be debugged.
        >       <br>2. This resource is only a one-time action resource for debugging the API. Deleting this resource will not clear
        >       the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        debug_api_id = config.require_object("debugApiId")
        exclusive_cluster_id = config.require_object("exclusiveClusterId")
        # The API already has an request parameter and names 'test_request_field'.
        test = huaweicloud.dataartsstudio.DataserviceApiDebug("test",
            workspace_id=workspace_id,
            api_id=debug_api_id,
            instance_id=exclusive_cluster_id,
            params=json.dumps({
                "page_num": "1",
                "page_size": "100",
                "test_request_field": "{\\"foo\\": \\"bar\\"}",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the catalog where the API is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] max_retries: The maximum retry number of the API debug operation.
        :param pulumi.Input[_builtins.str] params: Specifies the request parameters in which to debug the API, in JSON format.
               Changing this parameter will create a new resource.
               
               > There are two default and required parameter `page_num` and `page_size` that need to be defined.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of workspace where the API is located.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataserviceApiDebugArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to debug API for DataArts Data Service within HuaweiCloud.

        > 1. Only exclusive API can be debugged.
        >       <br>2. This resource is only a one-time action resource for debugging the API. Deleting this resource will not clear
        >       the corresponding request record, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        debug_api_id = config.require_object("debugApiId")
        exclusive_cluster_id = config.require_object("exclusiveClusterId")
        # The API already has an request parameter and names 'test_request_field'.
        test = huaweicloud.dataartsstudio.DataserviceApiDebug("test",
            workspace_id=workspace_id,
            api_id=debug_api_id,
            instance_id=exclusive_cluster_id,
            params=json.dumps({
                "page_num": "1",
                "page_size": "100",
                "test_request_field": "{\\"foo\\": \\"bar\\"}",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param DataserviceApiDebugArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataserviceApiDebugArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 params: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataserviceApiDebugArgs.__new__(DataserviceApiDebugArgs)

            if api_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_id'")
            __props__.__dict__["api_id"] = api_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["max_retries"] = max_retries
            __props__.__dict__["params"] = params
            __props__.__dict__["region"] = region
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["request_header"] = None
            __props__.__dict__["response_header"] = None
            __props__.__dict__["result"] = None
            __props__.__dict__["timeout"] = None
            __props__.__dict__["url"] = None
        super(DataserviceApiDebug, __self__).__init__(
            'huaweicloud:DataArtsStudio/dataserviceApiDebug:DataserviceApiDebug',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            max_retries: Optional[pulumi.Input[_builtins.int]] = None,
            params: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            request_header: Optional[pulumi.Input[_builtins.str]] = None,
            response_header: Optional[pulumi.Input[_builtins.str]] = None,
            result: Optional[pulumi.Input[_builtins.str]] = None,
            timeout: Optional[pulumi.Input[_builtins.int]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataserviceApiDebug':
        """
        Get an existing DataserviceApiDebug resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the catalog where the API is located.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] max_retries: The maximum retry number of the API debug operation.
        :param pulumi.Input[_builtins.str] params: Specifies the request parameters in which to debug the API, in JSON format.
               Changing this parameter will create a new resource.
               
               > There are two default and required parameter `page_num` and `page_size` that need to be defined.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] request_header: The request header of this API debug result, in JSON format.
        :param pulumi.Input[_builtins.str] response_header: The response header of this API debug result, in JSON format.
        :param pulumi.Input[_builtins.str] result: The ID of the catalog where the API is located.
        :param pulumi.Input[_builtins.int] timeout: The timeout of this API debug.
        :param pulumi.Input[_builtins.str] url: The result detail of this API debug.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of workspace where the API is located.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataserviceApiDebugState.__new__(_DataserviceApiDebugState)

        __props__.__dict__["api_id"] = api_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["max_retries"] = max_retries
        __props__.__dict__["params"] = params
        __props__.__dict__["region"] = region
        __props__.__dict__["request_header"] = request_header
        __props__.__dict__["response_header"] = response_header
        __props__.__dict__["result"] = result
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["url"] = url
        __props__.__dict__["workspace_id"] = workspace_id
        return DataserviceApiDebug(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the catalog where the API is located.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the exclusive cluster ID.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The maximum retry number of the API debug operation.
        """
        return pulumi.get(self, "max_retries")

    @_builtins.property
    @pulumi.getter
    def params(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the request parameters in which to debug the API, in JSON format.
        Changing this parameter will create a new resource.

        > There are two default and required parameter `page_num` and `page_size` that need to be defined.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> pulumi.Output[_builtins.str]:
        """
        The request header of this API debug result, in JSON format.
        """
        return pulumi.get(self, "request_header")

    @_builtins.property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> pulumi.Output[_builtins.str]:
        """
        The response header of this API debug result, in JSON format.
        """
        return pulumi.get(self, "response_header")

    @_builtins.property
    @pulumi.getter
    def result(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the catalog where the API is located.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[_builtins.int]:
        """
        The timeout of this API debug.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[_builtins.str]:
        """
        The result detail of this API debug.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of workspace where the API is located.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

