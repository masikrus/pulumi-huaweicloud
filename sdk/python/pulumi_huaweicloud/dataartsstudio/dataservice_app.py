# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataserviceAppArgs', 'DataserviceApp']

@pulumi.input_type
class DataserviceAppArgs:
    def __init__(__self__, *,
                 dlm_type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataserviceApp resource.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] app_type: Specifies the type of the application.  
               The valid values are as follows:
               + **APP**: access through app authentication.
               + **IAM**: IAM authentication is used, which means access using a token.
               
               Defaults to **APP**. Changing this parameter will create a new resource.
               
               > The IAM app can only have one.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The name must be the **account** name when the `app_type` is **IAM**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "dlm_type", dlm_type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if app_type is not None:
            pulumi.set(__self__, "app_type", app_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of DLM engine.  
        The valid values are as follows:
        + **SHARED**: Shared data service.
        + **EXCLUSIVE**: The exclusive data service.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "dlm_type")

    @dlm_type.setter
    def dlm_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dlm_type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the application.  
        The valid values are as follows:
        + **APP**: access through app authentication.
        + **IAM**: IAM authentication is used, which means access using a token.

        Defaults to **APP**. Changing this parameter will create a new resource.

        > The IAM app can only have one.
        """
        return pulumi.get(self, "app_type")

    @app_type.setter
    def app_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the application.  
        The name must be the **account** name when the `app_type` is **IAM**.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DataserviceAppState:
    def __init__(__self__, *,
                 app_key: Optional[pulumi.Input[_builtins.str]] = None,
                 app_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataserviceApp resources.
        :param pulumi.Input[_builtins.str] app_key: The key of the app.
        :param pulumi.Input[_builtins.str] app_secret: The secret of the app.
        :param pulumi.Input[_builtins.str] app_type: Specifies the type of the application.  
               The valid values are as follows:
               + **APP**: access through app authentication.
               + **IAM**: IAM authentication is used, which means access using a token.
               
               Defaults to **APP**. Changing this parameter will create a new resource.
               
               > The IAM app can only have one.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The name must be the **account** name when the `app_type` is **IAM**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID.
               
               Changing this parameter will create a new resource.
        """
        if app_key is not None:
            pulumi.set(__self__, "app_key", app_key)
        if app_secret is not None:
            pulumi.set(__self__, "app_secret", app_secret)
        if app_type is not None:
            pulumi.set(__self__, "app_type", app_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlm_type is not None:
            pulumi.set(__self__, "dlm_type", dlm_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="appKey")
    def app_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The key of the app.
        """
        return pulumi.get(self, "app_key")

    @app_key.setter
    def app_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_key", value)

    @_builtins.property
    @pulumi.getter(name="appSecret")
    def app_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secret of the app.
        """
        return pulumi.get(self, "app_secret")

    @app_secret.setter
    def app_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_secret", value)

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the application.  
        The valid values are as follows:
        + **APP**: access through app authentication.
        + **IAM**: IAM authentication is used, which means access using a token.

        Defaults to **APP**. Changing this parameter will create a new resource.

        > The IAM app can only have one.
        """
        return pulumi.get(self, "app_type")

    @app_type.setter
    def app_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of DLM engine.  
        The valid values are as follows:
        + **SHARED**: Shared data service.
        + **EXCLUSIVE**: The exclusive data service.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "dlm_type")

    @dlm_type.setter
    def dlm_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dlm_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the application.  
        The name must be the **account** name when the `app_type` is **IAM**.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/dataserviceApp:DataserviceApp")
class DataserviceApp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an app resource of DataArts DataService within HuaweiCloud.

        An app is a set of API access permissions and defines the identity of an API caller.
        Each app corresponds to a unique identity credential and can be classified based on the app issuer.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        test = huaweicloud.dataartsstudio.DataserviceApp("test",
            workspace_id=workspace_id,
            dlm_type="SHARED",
            app_type="APP",
            name="demo")
        ```

        ## Import

        The DataArts DataService app can be imported using `workspace_id`, `dlm_type` and `id` separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/dataserviceApp:DataserviceApp test <workspace_id>/<dlm_type>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `app_type`.

        It is generally recommended running `pulumi preview` after importing an application.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the application. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_dataservice_app" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              app_type,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_type: Specifies the type of the application.  
               The valid values are as follows:
               + **APP**: access through app authentication.
               + **IAM**: IAM authentication is used, which means access using a token.
               
               Defaults to **APP**. Changing this parameter will create a new resource.
               
               > The IAM app can only have one.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The name must be the **account** name when the `app_type` is **IAM**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataserviceAppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an app resource of DataArts DataService within HuaweiCloud.

        An app is a set of API access permissions and defines the identity of an API caller.
        Each app corresponds to a unique identity credential and can be classified based on the app issuer.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        test = huaweicloud.dataartsstudio.DataserviceApp("test",
            workspace_id=workspace_id,
            dlm_type="SHARED",
            app_type="APP",
            name="demo")
        ```

        ## Import

        The DataArts DataService app can be imported using `workspace_id`, `dlm_type` and `id` separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/dataserviceApp:DataserviceApp test <workspace_id>/<dlm_type>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `app_type`.

        It is generally recommended running `pulumi preview` after importing an application.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the application. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_dataservice_app" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              app_type,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DataserviceAppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataserviceAppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataserviceAppArgs.__new__(DataserviceAppArgs)

            __props__.__dict__["app_type"] = app_type
            __props__.__dict__["description"] = description
            if dlm_type is None and not opts.urn:
                raise TypeError("Missing required property 'dlm_type'")
            __props__.__dict__["dlm_type"] = dlm_type
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["app_key"] = None
            __props__.__dict__["app_secret"] = None
        super(DataserviceApp, __self__).__init__(
            'huaweicloud:DataArtsStudio/dataserviceApp:DataserviceApp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_key: Optional[pulumi.Input[_builtins.str]] = None,
            app_secret: Optional[pulumi.Input[_builtins.str]] = None,
            app_type: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataserviceApp':
        """
        Get an existing DataserviceApp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_key: The key of the app.
        :param pulumi.Input[_builtins.str] app_secret: The secret of the app.
        :param pulumi.Input[_builtins.str] app_type: Specifies the type of the application.  
               The valid values are as follows:
               + **APP**: access through app authentication.
               + **IAM**: IAM authentication is used, which means access using a token.
               
               Defaults to **APP**. Changing this parameter will create a new resource.
               
               > The IAM app can only have one.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the application.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the application.  
               The name must be the **account** name when the `app_type` is **IAM**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataserviceAppState.__new__(_DataserviceAppState)

        __props__.__dict__["app_key"] = app_key
        __props__.__dict__["app_secret"] = app_secret
        __props__.__dict__["app_type"] = app_type
        __props__.__dict__["description"] = description
        __props__.__dict__["dlm_type"] = dlm_type
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["workspace_id"] = workspace_id
        return DataserviceApp(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appKey")
    def app_key(self) -> pulumi.Output[_builtins.str]:
        """
        The key of the app.
        """
        return pulumi.get(self, "app_key")

    @_builtins.property
    @pulumi.getter(name="appSecret")
    def app_secret(self) -> pulumi.Output[_builtins.str]:
        """
        The secret of the app.
        """
        return pulumi.get(self, "app_secret")

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the application.  
        The valid values are as follows:
        + **APP**: access through app authentication.
        + **IAM**: IAM authentication is used, which means access using a token.

        Defaults to **APP**. Changing this parameter will create a new resource.

        > The IAM app can only have one.
        """
        return pulumi.get(self, "app_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of DLM engine.  
        The valid values are as follows:
        + **SHARED**: Shared data service.
        + **EXCLUSIVE**: The exclusive data service.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "dlm_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the application.  
        The name must be the **account** name when the `app_type` is **IAM**.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

