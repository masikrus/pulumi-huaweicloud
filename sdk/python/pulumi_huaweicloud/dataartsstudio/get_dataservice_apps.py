# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataserviceAppsResult',
    'AwaitableGetDataserviceAppsResult',
    'get_dataservice_apps',
    'get_dataservice_apps_output',
]

@pulumi.output_type
class GetDataserviceAppsResult:
    """
    A collection of values returned by getDataserviceApps.
    """
    def __init__(__self__, apps=None, dlm_type=None, id=None, name=None, region=None, workspace_id=None):
        if apps and not isinstance(apps, list):
            raise TypeError("Expected argument 'apps' to be a list")
        pulumi.set(__self__, "apps", apps)
        if dlm_type and not isinstance(dlm_type, str):
            raise TypeError("Expected argument 'dlm_type' to be a str")
        pulumi.set(__self__, "dlm_type", dlm_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def apps(self) -> Sequence['outputs.GetDataserviceAppsAppResult']:
        """
        All applications that match the filter parameters.  
        The apps structure is documented below.
        """
        return pulumi.get(self, "apps")

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dlm_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the application.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetDataserviceAppsResult(GetDataserviceAppsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataserviceAppsResult(
            apps=self.apps,
            dlm_type=self.dlm_type,
            id=self.id,
            name=self.name,
            region=self.region,
            workspace_id=self.workspace_id)


def get_dataservice_apps(dlm_type: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         workspace_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataserviceAppsResult:
    """
    Use this data source to get the list of Data Service applications within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    app_name_to_be_queried = config.require_object("appNameToBeQueried")
    test = huaweicloud.DataArtsStudio.get_dataservice_apps(workspace_id=workspace_id,
        name=app_name_to_be_queried)
    ```


    :param _builtins.str dlm_type: Specifies the type of DLM engine.  
           The valid values are as follows:
           + **SHARED**: Shared data service.
           + **EXCLUSIVE**: The exclusive data service.
           
           Defaults to **SHARED**.
    :param _builtins.str name: Specifies the name of the applications to be fuzzy queried.
    :param _builtins.str region: Specifies the region where the applications are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the ID of the workspace to which the applications belong.
    """
    __args__ = dict()
    __args__['dlmType'] = dlm_type
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DataArtsStudio/getDataserviceApps:getDataserviceApps', __args__, opts=opts, typ=GetDataserviceAppsResult).value

    return AwaitableGetDataserviceAppsResult(
        apps=pulumi.get(__ret__, 'apps'),
        dlm_type=pulumi.get(__ret__, 'dlm_type'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_dataservice_apps_output(dlm_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataserviceAppsResult]:
    """
    Use this data source to get the list of Data Service applications within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    app_name_to_be_queried = config.require_object("appNameToBeQueried")
    test = huaweicloud.DataArtsStudio.get_dataservice_apps(workspace_id=workspace_id,
        name=app_name_to_be_queried)
    ```


    :param _builtins.str dlm_type: Specifies the type of DLM engine.  
           The valid values are as follows:
           + **SHARED**: Shared data service.
           + **EXCLUSIVE**: The exclusive data service.
           
           Defaults to **SHARED**.
    :param _builtins.str name: Specifies the name of the applications to be fuzzy queried.
    :param _builtins.str region: Specifies the region where the applications are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the ID of the workspace to which the applications belong.
    """
    __args__ = dict()
    __args__['dlmType'] = dlm_type
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DataArtsStudio/getDataserviceApps:getDataserviceApps', __args__, opts=opts, typ=GetDataserviceAppsResult)
    return __ret__.apply(lambda __response__: GetDataserviceAppsResult(
        apps=pulumi.get(__response__, 'apps'),
        dlm_type=pulumi.get(__response__, 'dlm_type'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
