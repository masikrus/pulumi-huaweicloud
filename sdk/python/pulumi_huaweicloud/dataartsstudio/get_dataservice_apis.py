# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataserviceApisResult',
    'AwaitableGetDataserviceApisResult',
    'get_dataservice_apis',
    'get_dataservice_apis_output',
]

@pulumi.output_type
class GetDataserviceApisResult:
    """
    A collection of values returned by getDataserviceApis.
    """
    def __init__(__self__, api_id=None, apis=None, create_user=None, datatable=None, description=None, dlm_type=None, id=None, name=None, region=None, type=None, workspace_id=None):
        if api_id and not isinstance(api_id, str):
            raise TypeError("Expected argument 'api_id' to be a str")
        pulumi.set(__self__, "api_id", api_id)
        if apis and not isinstance(apis, list):
            raise TypeError("Expected argument 'apis' to be a list")
        pulumi.set(__self__, "apis", apis)
        if create_user and not isinstance(create_user, str):
            raise TypeError("Expected argument 'create_user' to be a str")
        pulumi.set(__self__, "create_user", create_user)
        if datatable and not isinstance(datatable, str):
            raise TypeError("Expected argument 'datatable' to be a str")
        pulumi.set(__self__, "datatable", datatable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dlm_type and not isinstance(dlm_type, str):
            raise TypeError("Expected argument 'dlm_type' to be a str")
        pulumi.set(__self__, "dlm_type", dlm_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter
    def apis(self) -> Sequence['outputs.GetDataserviceApisApiResult']:
        """
        All APIs that match the filter parameters.  
        The apis structure is documented below.
        """
        return pulumi.get(self, "apis")

    @_builtins.property
    @pulumi.getter(name="createUser")
    def create_user(self) -> Optional[_builtins.str]:
        """
        The creator name.
        """
        return pulumi.get(self, "create_user")

    @_builtins.property
    @pulumi.getter
    def datatable(self) -> Optional[_builtins.str]:
        """
        The name of the data table.
        """
        return pulumi.get(self, "datatable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the constant parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dlm_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the constant parameter.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetDataserviceApisResult(GetDataserviceApisResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataserviceApisResult(
            api_id=self.api_id,
            apis=self.apis,
            create_user=self.create_user,
            datatable=self.datatable,
            description=self.description,
            dlm_type=self.dlm_type,
            id=self.id,
            name=self.name,
            region=self.region,
            type=self.type,
            workspace_id=self.workspace_id)


def get_dataservice_apis(api_id: Optional[_builtins.str] = None,
                         create_user: Optional[_builtins.str] = None,
                         datatable: Optional[_builtins.str] = None,
                         description: Optional[_builtins.str] = None,
                         dlm_type: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         type: Optional[_builtins.str] = None,
                         workspace_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataserviceApisResult:
    """
    Use this data source to get the list of Data Service APIs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    api_name_to_be_queried = config.require_object("apiNameToBeQueried")
    test = huaweicloud.DataArtsStudio.get_dataservice_apis(workspace_id=workspace_id,
        name=api_name_to_be_queried)
    ```


    :param _builtins.str api_id: Specifies the API ID to be queried.
    :param _builtins.str create_user: Specifies the API creator to be queried.
    :param _builtins.str datatable: Specifies the data table name used by API to be queried.
    :param _builtins.str description: Specifies the API description to be fuzzy queried.  
           Maximum of `255` characters are allowed.
    :param _builtins.str dlm_type: Specifies the type of DLM engine.  
           The valid values are as follows:
           + **SHARED**: Shared data service.
           + **EXCLUSIVE**: The exclusive data service.
           
           Defaults to **SHARED**.
    :param _builtins.str name: Specifies the API name to be fuzzy queried.  
           The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
           allowed.
           The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
           or **Unicode** format.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the API type to be queried.  
           The valid values are as follows:
           + **API_SPECIFIC_TYPE_CONFIGURATION**
           + **API_SPECIFIC_TYPE_REGISTER**
           + **API_SPECIFIC_TYPE_ORCHESTRATE**
           + **API_SPECIFIC_TYPE_MYBATIS**
           + **API_SPECIFIC_TYPE_SCRIPT**
           + **API_SPECIFIC_TYPE_GROOVY**
    :param _builtins.str workspace_id: Specifies the ID of workspace where the APIs are located.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['createUser'] = create_user
    __args__['datatable'] = datatable
    __args__['description'] = description
    __args__['dlmType'] = dlm_type
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DataArtsStudio/getDataserviceApis:getDataserviceApis', __args__, opts=opts, typ=GetDataserviceApisResult).value

    return AwaitableGetDataserviceApisResult(
        api_id=pulumi.get(__ret__, 'api_id'),
        apis=pulumi.get(__ret__, 'apis'),
        create_user=pulumi.get(__ret__, 'create_user'),
        datatable=pulumi.get(__ret__, 'datatable'),
        description=pulumi.get(__ret__, 'description'),
        dlm_type=pulumi.get(__ret__, 'dlm_type'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_dataservice_apis_output(api_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                create_user: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                datatable: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                dlm_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataserviceApisResult]:
    """
    Use this data source to get the list of Data Service APIs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    api_name_to_be_queried = config.require_object("apiNameToBeQueried")
    test = huaweicloud.DataArtsStudio.get_dataservice_apis(workspace_id=workspace_id,
        name=api_name_to_be_queried)
    ```


    :param _builtins.str api_id: Specifies the API ID to be queried.
    :param _builtins.str create_user: Specifies the API creator to be queried.
    :param _builtins.str datatable: Specifies the data table name used by API to be queried.
    :param _builtins.str description: Specifies the API description to be fuzzy queried.  
           Maximum of `255` characters are allowed.
    :param _builtins.str dlm_type: Specifies the type of DLM engine.  
           The valid values are as follows:
           + **SHARED**: Shared data service.
           + **EXCLUSIVE**: The exclusive data service.
           
           Defaults to **SHARED**.
    :param _builtins.str name: Specifies the API name to be fuzzy queried.  
           The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
           allowed.
           The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
           or **Unicode** format.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str type: Specifies the API type to be queried.  
           The valid values are as follows:
           + **API_SPECIFIC_TYPE_CONFIGURATION**
           + **API_SPECIFIC_TYPE_REGISTER**
           + **API_SPECIFIC_TYPE_ORCHESTRATE**
           + **API_SPECIFIC_TYPE_MYBATIS**
           + **API_SPECIFIC_TYPE_SCRIPT**
           + **API_SPECIFIC_TYPE_GROOVY**
    :param _builtins.str workspace_id: Specifies the ID of workspace where the APIs are located.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['createUser'] = create_user
    __args__['datatable'] = datatable
    __args__['description'] = description
    __args__['dlmType'] = dlm_type
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DataArtsStudio/getDataserviceApis:getDataserviceApis', __args__, opts=opts, typ=GetDataserviceApisResult)
    return __ret__.apply(lambda __response__: GetDataserviceApisResult(
        api_id=pulumi.get(__response__, 'api_id'),
        apis=pulumi.get(__response__, 'apis'),
        create_user=pulumi.get(__response__, 'create_user'),
        datatable=pulumi.get(__response__, 'datatable'),
        description=pulumi.get(__response__, 'description'),
        dlm_type=pulumi.get(__response__, 'dlm_type'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
