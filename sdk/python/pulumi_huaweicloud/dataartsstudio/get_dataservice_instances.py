# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataserviceInstancesResult',
    'AwaitableGetDataserviceInstancesResult',
    'get_dataservice_instances',
    'get_dataservice_instances_output',
]

@pulumi.output_type
class GetDataserviceInstancesResult:
    """
    A collection of values returned by getDataserviceInstances.
    """
    def __init__(__self__, create_user=None, id=None, instances=None, name=None, region=None, workspace_id=None):
        if create_user and not isinstance(create_user, str):
            raise TypeError("Expected argument 'create_user' to be a str")
        pulumi.set(__self__, "create_user", create_user)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="createUser")
    def create_user(self) -> Optional[_builtins.str]:
        """
        The create user of the node.
        """
        return pulumi.get(self, "create_user")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetDataserviceInstancesInstanceResult']:
        """
        All exclusive clusters that match the filter parameters.  
        The instances structure is documented below.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetDataserviceInstancesResult(GetDataserviceInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataserviceInstancesResult(
            create_user=self.create_user,
            id=self.id,
            instances=self.instances,
            name=self.name,
            region=self.region,
            workspace_id=self.workspace_id)


def get_dataservice_instances(create_user: Optional[_builtins.str] = None,
                              name: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              workspace_id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataserviceInstancesResult:
    """
    Use this data source to get the list of exclusive instances within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    exclusive_cluster_name = config.require_object("exclusiveClusterName")
    test = huaweicloud.DataArtsStudio.get_dataservice_instances(workspace_id=workspace_id,
        name=exclusive_cluster_name)
    ```


    :param _builtins.str create_user: Specifies the creator of the exclusive cluster to be queried.
    :param _builtins.str name: Specifies the exclusive cluster name to be queried.
    :param _builtins.str region: Specifies the region where the exclusive clusters are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies ID of the workspace to which the exclusive clusters belong.
    """
    __args__ = dict()
    __args__['createUser'] = create_user
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DataArtsStudio/getDataserviceInstances:getDataserviceInstances', __args__, opts=opts, typ=GetDataserviceInstancesResult).value

    return AwaitableGetDataserviceInstancesResult(
        create_user=pulumi.get(__ret__, 'create_user'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_dataservice_instances_output(create_user: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataserviceInstancesResult]:
    """
    Use this data source to get the list of exclusive instances within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    exclusive_cluster_name = config.require_object("exclusiveClusterName")
    test = huaweicloud.DataArtsStudio.get_dataservice_instances(workspace_id=workspace_id,
        name=exclusive_cluster_name)
    ```


    :param _builtins.str create_user: Specifies the creator of the exclusive cluster to be queried.
    :param _builtins.str name: Specifies the exclusive cluster name to be queried.
    :param _builtins.str region: Specifies the region where the exclusive clusters are located.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies ID of the workspace to which the exclusive clusters belong.
    """
    __args__ = dict()
    __args__['createUser'] = create_user
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DataArtsStudio/getDataserviceInstances:getDataserviceInstances', __args__, opts=opts, typ=GetDataserviceInstancesResult)
    return __ret__.apply(lambda __response__: GetDataserviceInstancesResult(
        create_user=pulumi.get(__response__, 'create_user'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
