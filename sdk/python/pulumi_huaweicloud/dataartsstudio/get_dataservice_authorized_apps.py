# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataserviceAuthorizedAppsResult',
    'AwaitableGetDataserviceAuthorizedAppsResult',
    'get_dataservice_authorized_apps',
    'get_dataservice_authorized_apps_output',
]

@pulumi.output_type
class GetDataserviceAuthorizedAppsResult:
    """
    A collection of values returned by getDataserviceAuthorizedApps.
    """
    def __init__(__self__, api_id=None, apps=None, dlm_type=None, id=None, region=None, workspace_id=None):
        if api_id and not isinstance(api_id, str):
            raise TypeError("Expected argument 'api_id' to be a str")
        pulumi.set(__self__, "api_id", api_id)
        if apps and not isinstance(apps, list):
            raise TypeError("Expected argument 'apps' to be a list")
        pulumi.set(__self__, "apps", apps)
        if dlm_type and not isinstance(dlm_type, str):
            raise TypeError("Expected argument 'dlm_type' to be a str")
        pulumi.set(__self__, "dlm_type", dlm_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> _builtins.str:
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter
    def apps(self) -> Sequence['outputs.GetDataserviceAuthorizedAppsAppResult']:
        """
        All APPs authorized by API.  
        The apis structure is documented below.
        """
        return pulumi.get(self, "apps")

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dlm_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetDataserviceAuthorizedAppsResult(GetDataserviceAuthorizedAppsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataserviceAuthorizedAppsResult(
            api_id=self.api_id,
            apps=self.apps,
            dlm_type=self.dlm_type,
            id=self.id,
            region=self.region,
            workspace_id=self.workspace_id)


def get_dataservice_authorized_apps(api_id: Optional[_builtins.str] = None,
                                    dlm_type: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    workspace_id: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataserviceAuthorizedAppsResult:
    """
    Use this data source to get the list of authorized APPs under specified API within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    authorized_api_id = config.require_object("authorizedApiId")
    test = huaweicloud.DataArtsStudio.get_dataservice_authorized_apps(workspace_id=workspace_id,
        dlm_type="EXCLUSIVE",
        api_id=authorized_api_id)
    ```


    :param _builtins.str api_id: Specifies the ID of the API used to authorize the APPs.
    :param _builtins.str dlm_type: Specifies the type of DLM engine.  
           The valid values are as follows:
           + **SHARED**: Shared data service.
           + **EXCLUSIVE**: The exclusive data service.
           
           Defaults to **SHARED**.
    :param _builtins.str region: Specifies the region in which to query the data source.  
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the ID of workspace where the APIs are located.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['dlmType'] = dlm_type
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DataArtsStudio/getDataserviceAuthorizedApps:getDataserviceAuthorizedApps', __args__, opts=opts, typ=GetDataserviceAuthorizedAppsResult).value

    return AwaitableGetDataserviceAuthorizedAppsResult(
        api_id=pulumi.get(__ret__, 'api_id'),
        apps=pulumi.get(__ret__, 'apps'),
        dlm_type=pulumi.get(__ret__, 'dlm_type'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_dataservice_authorized_apps_output(api_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           dlm_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataserviceAuthorizedAppsResult]:
    """
    Use this data source to get the list of authorized APPs under specified API within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    authorized_api_id = config.require_object("authorizedApiId")
    test = huaweicloud.DataArtsStudio.get_dataservice_authorized_apps(workspace_id=workspace_id,
        dlm_type="EXCLUSIVE",
        api_id=authorized_api_id)
    ```


    :param _builtins.str api_id: Specifies the ID of the API used to authorize the APPs.
    :param _builtins.str dlm_type: Specifies the type of DLM engine.  
           The valid values are as follows:
           + **SHARED**: Shared data service.
           + **EXCLUSIVE**: The exclusive data service.
           
           Defaults to **SHARED**.
    :param _builtins.str region: Specifies the region in which to query the data source.  
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the ID of workspace where the APIs are located.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['dlmType'] = dlm_type
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DataArtsStudio/getDataserviceAuthorizedApps:getDataserviceAuthorizedApps', __args__, opts=opts, typ=GetDataserviceAuthorizedAppsResult)
    return __ret__.apply(lambda __response__: GetDataserviceAuthorizedAppsResult(
        api_id=pulumi.get(__response__, 'api_id'),
        apps=pulumi.get(__response__, 'apps'),
        dlm_type=pulumi.get(__response__, 'dlm_type'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
