# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ArchitectureProcessArgs', 'ArchitectureProcess']

@pulumi.input_type
class ArchitectureProcessArgs:
    def __init__(__self__, *,
                 owner: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 next_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 prev_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ArchitectureProcess resource.
        :param pulumi.Input[_builtins.str] owner: Specifies the name of person responsible for process. The responsible person must exist
               in the system.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of process.
        :param pulumi.Input[_builtins.str] name: Specifies the name of process.
        :param pulumi.Input[_builtins.str] next_id: Specify the ID of the next node in the process.  
               When querying the process, if the field is null, it means that is the last node in the current process directory.
               
               > The `prev_id` and `next_id` will change with the position of the process in the current directory.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent catalog ID of process.  
               It's **Required** when you create a subordinate process, and directory level cannot exceed `3` layer.
        :param pulumi.Input[_builtins.str] prev_id: Specifies the ID of the previous node in the process.  
               When querying the process, if the field is null, it means that is the first node in the current process directory.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_id is not None:
            pulumi.set(__self__, "next_id", next_id)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if prev_id is not None:
            pulumi.set(__self__, "prev_id", prev_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of person responsible for process. The responsible person must exist
        in the system.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of process.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of process.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nextId")
    def next_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the ID of the next node in the process.  
        When querying the process, if the field is null, it means that is the last node in the current process directory.

        > The `prev_id` and `next_id` will change with the position of the process in the current directory.
        """
        return pulumi.get(self, "next_id")

    @next_id.setter
    def next_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_id", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent catalog ID of process.  
        It's **Required** when you create a subordinate process, and directory level cannot exceed `3` layer.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter(name="prevId")
    def prev_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the previous node in the process.  
        When querying the process, if the field is null, it means that is the first node in the current process directory.
        """
        return pulumi.get(self, "prev_id")

    @prev_id.setter
    def prev_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prev_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ArchitectureProcessState:
    def __init__(__self__, *,
                 childrens: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 next_id: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 prev_id: Optional[pulumi.Input[_builtins.str]] = None,
                 qualified_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ArchitectureProcess resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] childrens: The name list of subordinate process.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the process.
        :param pulumi.Input[_builtins.str] created_by: The creator of the process.
        :param pulumi.Input[_builtins.str] description: Specifies the description of process.
        :param pulumi.Input[_builtins.str] name: Specifies the name of process.
        :param pulumi.Input[_builtins.str] next_id: Specify the ID of the next node in the process.  
               When querying the process, if the field is null, it means that is the last node in the current process directory.
               
               > The `prev_id` and `next_id` will change with the position of the process in the current directory.
        :param pulumi.Input[_builtins.str] owner: Specifies the name of person responsible for process. The responsible person must exist
               in the system.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent catalog ID of process.  
               It's **Required** when you create a subordinate process, and directory level cannot exceed `3` layer.
        :param pulumi.Input[_builtins.str] prev_id: Specifies the ID of the previous node in the process.  
               When querying the process, if the field is null, it means that is the first node in the current process directory.
        :param pulumi.Input[_builtins.str] qualified_id: The ID of all superior processes. Format is `<root_process_id>.<sub_process_id1>.<sub_process_id2>`
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the process.
        :param pulumi.Input[_builtins.str] updated_by: The last editor of the process.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_id is not None:
            pulumi.set(__self__, "next_id", next_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if prev_id is not None:
            pulumi.set(__self__, "prev_id", prev_id)
        if qualified_id is not None:
            pulumi.set(__self__, "qualified_id", qualified_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def childrens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The name list of subordinate process.
        """
        return pulumi.get(self, "childrens")

    @childrens.setter
    def childrens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "childrens", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the process.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creator of the process.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of process.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of process.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nextId")
    def next_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the ID of the next node in the process.  
        When querying the process, if the field is null, it means that is the last node in the current process directory.

        > The `prev_id` and `next_id` will change with the position of the process in the current directory.
        """
        return pulumi.get(self, "next_id")

    @next_id.setter
    def next_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_id", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of person responsible for process. The responsible person must exist
        in the system.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent catalog ID of process.  
        It's **Required** when you create a subordinate process, and directory level cannot exceed `3` layer.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter(name="prevId")
    def prev_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the previous node in the process.  
        When querying the process, if the field is null, it means that is the first node in the current process directory.
        """
        return pulumi.get(self, "prev_id")

    @prev_id.setter
    def prev_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prev_id", value)

    @_builtins.property
    @pulumi.getter(name="qualifiedId")
    def qualified_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of all superior processes. Format is `<root_process_id>.<sub_process_id1>.<sub_process_id2>`
        """
        return pulumi.get(self, "qualified_id")

    @qualified_id.setter
    def qualified_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qualified_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the process.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The last editor of the process.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/architectureProcess:ArchitectureProcess")
class ArchitectureProcess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 next_id: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 prev_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DataArts Architecture process resource within HuaweiCloud.

        ## Example Usage

        ### Create a root process

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        process_name = config.require_object("processName")
        process_owner = config.require_object("processOwner")
        test_root = huaweicloud.dataartsstudio.ArchitectureProcess("test-root",
            workspace_id=workspace_id,
            name=process_name,
            owner=process_owner)
        ```

        ### Create a subordinate process

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        process_name = config.require_object("processName")
        process_owner = config.require_object("processOwner")
        parent_process_id = config.require_object("parentProcessId")
        test_sub = huaweicloud.dataartsstudio.ArchitectureProcess("test-sub",
            workspace_id=workspace_id,
            name=process_name,
            owner=process_owner,
            parent_id=parent_process_id)
        ```

        ## Import

        The DataArts architecture process can be imported using `workspace_id` and `qualified_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureProcess:ArchitectureProcess test <workspace_id>/<qualified_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of process.
        :param pulumi.Input[_builtins.str] name: Specifies the name of process.
        :param pulumi.Input[_builtins.str] next_id: Specify the ID of the next node in the process.  
               When querying the process, if the field is null, it means that is the last node in the current process directory.
               
               > The `prev_id` and `next_id` will change with the position of the process in the current directory.
        :param pulumi.Input[_builtins.str] owner: Specifies the name of person responsible for process. The responsible person must exist
               in the system.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent catalog ID of process.  
               It's **Required** when you create a subordinate process, and directory level cannot exceed `3` layer.
        :param pulumi.Input[_builtins.str] prev_id: Specifies the ID of the previous node in the process.  
               When querying the process, if the field is null, it means that is the first node in the current process directory.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ArchitectureProcessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DataArts Architecture process resource within HuaweiCloud.

        ## Example Usage

        ### Create a root process

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        process_name = config.require_object("processName")
        process_owner = config.require_object("processOwner")
        test_root = huaweicloud.dataartsstudio.ArchitectureProcess("test-root",
            workspace_id=workspace_id,
            name=process_name,
            owner=process_owner)
        ```

        ### Create a subordinate process

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        process_name = config.require_object("processName")
        process_owner = config.require_object("processOwner")
        parent_process_id = config.require_object("parentProcessId")
        test_sub = huaweicloud.dataartsstudio.ArchitectureProcess("test-sub",
            workspace_id=workspace_id,
            name=process_name,
            owner=process_owner,
            parent_id=parent_process_id)
        ```

        ## Import

        The DataArts architecture process can be imported using `workspace_id` and `qualified_id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureProcess:ArchitectureProcess test <workspace_id>/<qualified_id>
        ```

        :param str resource_name: The name of the resource.
        :param ArchitectureProcessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ArchitectureProcessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 next_id: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 prev_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ArchitectureProcessArgs.__new__(ArchitectureProcessArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["next_id"] = next_id
            if owner is None and not opts.urn:
                raise TypeError("Missing required property 'owner'")
            __props__.__dict__["owner"] = owner
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["prev_id"] = prev_id
            __props__.__dict__["region"] = region
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["childrens"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["qualified_id"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(ArchitectureProcess, __self__).__init__(
            'huaweicloud:DataArtsStudio/architectureProcess:ArchitectureProcess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            childrens: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            next_id: Optional[pulumi.Input[_builtins.str]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            parent_id: Optional[pulumi.Input[_builtins.str]] = None,
            prev_id: Optional[pulumi.Input[_builtins.str]] = None,
            qualified_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ArchitectureProcess':
        """
        Get an existing ArchitectureProcess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] childrens: The name list of subordinate process.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the process.
        :param pulumi.Input[_builtins.str] created_by: The creator of the process.
        :param pulumi.Input[_builtins.str] description: Specifies the description of process.
        :param pulumi.Input[_builtins.str] name: Specifies the name of process.
        :param pulumi.Input[_builtins.str] next_id: Specify the ID of the next node in the process.  
               When querying the process, if the field is null, it means that is the last node in the current process directory.
               
               > The `prev_id` and `next_id` will change with the position of the process in the current directory.
        :param pulumi.Input[_builtins.str] owner: Specifies the name of person responsible for process. The responsible person must exist
               in the system.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent catalog ID of process.  
               It's **Required** when you create a subordinate process, and directory level cannot exceed `3` layer.
        :param pulumi.Input[_builtins.str] prev_id: Specifies the ID of the previous node in the process.  
               When querying the process, if the field is null, it means that is the first node in the current process directory.
        :param pulumi.Input[_builtins.str] qualified_id: The ID of all superior processes. Format is `<root_process_id>.<sub_process_id1>.<sub_process_id2>`
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the process.
        :param pulumi.Input[_builtins.str] updated_by: The last editor of the process.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ArchitectureProcessState.__new__(_ArchitectureProcessState)

        __props__.__dict__["childrens"] = childrens
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["next_id"] = next_id
        __props__.__dict__["owner"] = owner
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["prev_id"] = prev_id
        __props__.__dict__["qualified_id"] = qualified_id
        __props__.__dict__["region"] = region
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["workspace_id"] = workspace_id
        return ArchitectureProcess(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def childrens(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The name list of subordinate process.
        """
        return pulumi.get(self, "childrens")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the process.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The creator of the process.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of process.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of process.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextId")
    def next_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specify the ID of the next node in the process.  
        When querying the process, if the field is null, it means that is the last node in the current process directory.

        > The `prev_id` and `next_id` will change with the position of the process in the current directory.
        """
        return pulumi.get(self, "next_id")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of person responsible for process. The responsible person must exist
        in the system.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the parent catalog ID of process.  
        It's **Required** when you create a subordinate process, and directory level cannot exceed `3` layer.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="prevId")
    def prev_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the previous node in the process.  
        When querying the process, if the field is null, it means that is the first node in the current process directory.
        """
        return pulumi.get(self, "prev_id")

    @_builtins.property
    @pulumi.getter(name="qualifiedId")
    def qualified_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of all superior processes. Format is `<root_process_id>.<sub_process_id1>.<sub_process_id2>`
        """
        return pulumi.get(self, "qualified_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the process.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The last editor of the process.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

