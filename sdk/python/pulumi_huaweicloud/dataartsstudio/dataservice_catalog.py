# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataserviceCatalogArgs', 'DataserviceCatalog']

@pulumi.input_type
class DataserviceCatalogArgs:
    def __init__(__self__, *,
                 workspace_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataserviceCatalog resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the catalog belongs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the catalog.  
               Maximum of `255` characters are allowed.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Defaults to **SHARED**. Changing this parameter will create a new resource.
               
               > The value of `dlm_type` for all catalogs under this directory must be consistent with this resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the catalog.  
               The valid length is limited from `1` to `64`, only Chinese and English characters, digits and hyphens (-) are
               allowed.
               The name must start with a Chinese or English character or a digit, and the Chinese characters must be in **UTF-8** or
               **Unicode** format.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the ID of the parent catalog for current catalog.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the catalog is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "workspace_id", workspace_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlm_type is not None:
            pulumi.set(__self__, "dlm_type", dlm_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the catalog belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the catalog.  
        Maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of DLM engine.  
        The valid values are as follows:
        + **SHARED**: Shared data service.
        + **EXCLUSIVE**: The exclusive data service.

        Defaults to **SHARED**. Changing this parameter will create a new resource.

        > The value of `dlm_type` for all catalogs under this directory must be consistent with this resource.
        """
        return pulumi.get(self, "dlm_type")

    @dlm_type.setter
    def dlm_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dlm_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the catalog.  
        The valid length is limited from `1` to `64`, only Chinese and English characters, digits and hyphens (-) are
        allowed.
        The name must start with a Chinese or English character or a digit, and the Chinese characters must be in **UTF-8** or
        **Unicode** format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the parent catalog for current catalog.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the catalog is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DataserviceCatalogState:
    def __init__(__self__, *,
                 api_total: Optional[pulumi.Input[_builtins.int]] = None,
                 catalog_total: Optional[pulumi.Input[_builtins.int]] = None,
                 create_user: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 update_user: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataserviceCatalog resources.
        :param pulumi.Input[_builtins.int] api_total: The total number of APIs in the current catalog.
        :param pulumi.Input[_builtins.int] catalog_total: The total number of sub-catalogs in the current catalog.
        :param pulumi.Input[_builtins.str] create_user: The creator of the catalog.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the catalog.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the catalog.  
               Maximum of `255` characters are allowed.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Defaults to **SHARED**. Changing this parameter will create a new resource.
               
               > The value of `dlm_type` for all catalogs under this directory must be consistent with this resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the catalog.  
               The valid length is limited from `1` to `64`, only Chinese and English characters, digits and hyphens (-) are
               allowed.
               The name must start with a Chinese or English character or a digit, and the Chinese characters must be in **UTF-8** or
               **Unicode** format.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the ID of the parent catalog for current catalog.
        :param pulumi.Input[_builtins.str] path: The path of current catalog.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the catalog is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] update_user: The user who latest updated the catalog.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the catalog.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the catalog belongs.  
               Changing this parameter will create a new resource.
        """
        if api_total is not None:
            pulumi.set(__self__, "api_total", api_total)
        if catalog_total is not None:
            pulumi.set(__self__, "catalog_total", catalog_total)
        if create_user is not None:
            pulumi.set(__self__, "create_user", create_user)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlm_type is not None:
            pulumi.set(__self__, "dlm_type", dlm_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if update_user is not None:
            pulumi.set(__self__, "update_user", update_user)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="apiTotal")
    def api_total(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The total number of APIs in the current catalog.
        """
        return pulumi.get(self, "api_total")

    @api_total.setter
    def api_total(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "api_total", value)

    @_builtins.property
    @pulumi.getter(name="catalogTotal")
    def catalog_total(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The total number of sub-catalogs in the current catalog.
        """
        return pulumi.get(self, "catalog_total")

    @catalog_total.setter
    def catalog_total(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "catalog_total", value)

    @_builtins.property
    @pulumi.getter(name="createUser")
    def create_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creator of the catalog.
        """
        return pulumi.get(self, "create_user")

    @create_user.setter
    def create_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_user", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the catalog.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the catalog.  
        Maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of DLM engine.  
        The valid values are as follows:
        + **SHARED**: Shared data service.
        + **EXCLUSIVE**: The exclusive data service.

        Defaults to **SHARED**. Changing this parameter will create a new resource.

        > The value of `dlm_type` for all catalogs under this directory must be consistent with this resource.
        """
        return pulumi.get(self, "dlm_type")

    @dlm_type.setter
    def dlm_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dlm_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the catalog.  
        The valid length is limited from `1` to `64`, only Chinese and English characters, digits and hyphens (-) are
        allowed.
        The name must start with a Chinese or English character or a digit, and the Chinese characters must be in **UTF-8** or
        **Unicode** format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the parent catalog for current catalog.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path of current catalog.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the catalog is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="updateUser")
    def update_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user who latest updated the catalog.
        """
        return pulumi.get(self, "update_user")

    @update_user.setter
    def update_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_user", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the catalog.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the catalog belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/dataserviceCatalog:DataserviceCatalog")
class DataserviceCatalog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to manage a shared or exclusive catalog within HuaweiCloud.

        ## Example Usage

        ### Create a catalog under the ROOT path

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        catalog_name = config.require_object("catalogName")
        test = huaweicloud.dataartsstudio.DataserviceCatalog("test",
            workspace_id=workspace_id,
            dlm_type="EXCLUSIVE",
            name=catalog_name)
        ```

        ### Create a catalog under the specified catalog

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        parent_catalog_id = config.require_object("parentCatalogId")
        catalog_name = config.require_object("catalogName")
        test = huaweicloud.dataartsstudio.DataserviceCatalog("test",
            workspace_id=workspace_id,
            parent_id=parent_catalog_id,
            dlm_type="EXCLUSIVE",
            name=catalog_name)
        ```

        ## Import

        The catalog can be imported using `workspace_id`, `dlm_type` and `id` separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/dataserviceCatalog:DataserviceCatalog test <workspace_id>/<dlm_type>/<id>
        ```

        Also, you can omit `dlm_type` and provide just `workspace_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/dataserviceCatalog:DataserviceCatalog test <workspace_id>/<id>
        ```

        ~> This way only supports importing the catalog of the **SHARED** type, but does not support the catalog imported for

           **EXCLUSIVE** type. If an error is reported, please carefully check the `dlm_type` value to which imported catalog

           you want.

        Note that the imported state may not be identical to your resource definition, because the attributes are missing in the

        API response. The missing attributes include: `parent_id`.

        It is generally recommended running `pulumi preview` after importing an resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_dataservice_catalog" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              parent_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the catalog.  
               Maximum of `255` characters are allowed.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Defaults to **SHARED**. Changing this parameter will create a new resource.
               
               > The value of `dlm_type` for all catalogs under this directory must be consistent with this resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the catalog.  
               The valid length is limited from `1` to `64`, only Chinese and English characters, digits and hyphens (-) are
               allowed.
               The name must start with a Chinese or English character or a digit, and the Chinese characters must be in **UTF-8** or
               **Unicode** format.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the ID of the parent catalog for current catalog.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the catalog is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the catalog belongs.  
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataserviceCatalogArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to manage a shared or exclusive catalog within HuaweiCloud.

        ## Example Usage

        ### Create a catalog under the ROOT path

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        catalog_name = config.require_object("catalogName")
        test = huaweicloud.dataartsstudio.DataserviceCatalog("test",
            workspace_id=workspace_id,
            dlm_type="EXCLUSIVE",
            name=catalog_name)
        ```

        ### Create a catalog under the specified catalog

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        parent_catalog_id = config.require_object("parentCatalogId")
        catalog_name = config.require_object("catalogName")
        test = huaweicloud.dataartsstudio.DataserviceCatalog("test",
            workspace_id=workspace_id,
            parent_id=parent_catalog_id,
            dlm_type="EXCLUSIVE",
            name=catalog_name)
        ```

        ## Import

        The catalog can be imported using `workspace_id`, `dlm_type` and `id` separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/dataserviceCatalog:DataserviceCatalog test <workspace_id>/<dlm_type>/<id>
        ```

        Also, you can omit `dlm_type` and provide just `workspace_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/dataserviceCatalog:DataserviceCatalog test <workspace_id>/<id>
        ```

        ~> This way only supports importing the catalog of the **SHARED** type, but does not support the catalog imported for

           **EXCLUSIVE** type. If an error is reported, please carefully check the `dlm_type` value to which imported catalog

           you want.

        Note that the imported state may not be identical to your resource definition, because the attributes are missing in the

        API response. The missing attributes include: `parent_id`.

        It is generally recommended running `pulumi preview` after importing an resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_dataservice_catalog" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              parent_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DataserviceCatalogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataserviceCatalogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataserviceCatalogArgs.__new__(DataserviceCatalogArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dlm_type"] = dlm_type
            __props__.__dict__["name"] = name
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["region"] = region
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["api_total"] = None
            __props__.__dict__["catalog_total"] = None
            __props__.__dict__["create_user"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["path"] = None
            __props__.__dict__["update_user"] = None
            __props__.__dict__["updated_at"] = None
        super(DataserviceCatalog, __self__).__init__(
            'huaweicloud:DataArtsStudio/dataserviceCatalog:DataserviceCatalog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_total: Optional[pulumi.Input[_builtins.int]] = None,
            catalog_total: Optional[pulumi.Input[_builtins.int]] = None,
            create_user: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parent_id: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            update_user: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataserviceCatalog':
        """
        Get an existing DataserviceCatalog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] api_total: The total number of APIs in the current catalog.
        :param pulumi.Input[_builtins.int] catalog_total: The total number of sub-catalogs in the current catalog.
        :param pulumi.Input[_builtins.str] create_user: The creator of the catalog.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the catalog.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the catalog.  
               Maximum of `255` characters are allowed.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Defaults to **SHARED**. Changing this parameter will create a new resource.
               
               > The value of `dlm_type` for all catalogs under this directory must be consistent with this resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the catalog.  
               The valid length is limited from `1` to `64`, only Chinese and English characters, digits and hyphens (-) are
               allowed.
               The name must start with a Chinese or English character or a digit, and the Chinese characters must be in **UTF-8** or
               **Unicode** format.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the ID of the parent catalog for current catalog.
        :param pulumi.Input[_builtins.str] path: The path of current catalog.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the catalog is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] update_user: The user who latest updated the catalog.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the catalog.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the catalog belongs.  
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataserviceCatalogState.__new__(_DataserviceCatalogState)

        __props__.__dict__["api_total"] = api_total
        __props__.__dict__["catalog_total"] = catalog_total
        __props__.__dict__["create_user"] = create_user
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["dlm_type"] = dlm_type
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["path"] = path
        __props__.__dict__["region"] = region
        __props__.__dict__["update_user"] = update_user
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["workspace_id"] = workspace_id
        return DataserviceCatalog(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiTotal")
    def api_total(self) -> pulumi.Output[_builtins.int]:
        """
        The total number of APIs in the current catalog.
        """
        return pulumi.get(self, "api_total")

    @_builtins.property
    @pulumi.getter(name="catalogTotal")
    def catalog_total(self) -> pulumi.Output[_builtins.int]:
        """
        The total number of sub-catalogs in the current catalog.
        """
        return pulumi.get(self, "catalog_total")

    @_builtins.property
    @pulumi.getter(name="createUser")
    def create_user(self) -> pulumi.Output[_builtins.str]:
        """
        The creator of the catalog.
        """
        return pulumi.get(self, "create_user")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the catalog.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the catalog.  
        Maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of DLM engine.  
        The valid values are as follows:
        + **SHARED**: Shared data service.
        + **EXCLUSIVE**: The exclusive data service.

        Defaults to **SHARED**. Changing this parameter will create a new resource.

        > The value of `dlm_type` for all catalogs under this directory must be consistent with this resource.
        """
        return pulumi.get(self, "dlm_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the catalog.  
        The valid length is limited from `1` to `64`, only Chinese and English characters, digits and hyphens (-) are
        allowed.
        The name must start with a Chinese or English character or a digit, and the Chinese characters must be in **UTF-8** or
        **Unicode** format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the parent catalog for current catalog.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[_builtins.str]:
        """
        The path of current catalog.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the catalog is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updateUser")
    def update_user(self) -> pulumi.Output[_builtins.str]:
        """
        The user who latest updated the catalog.
        """
        return pulumi.get(self, "update_user")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the catalog.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the catalog belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

