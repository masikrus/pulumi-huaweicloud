# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetArchitectureDsTemplateOptionalsResult',
    'AwaitableGetArchitectureDsTemplateOptionalsResult',
    'get_architecture_ds_template_optionals',
    'get_architecture_ds_template_optionals_output',
]

@pulumi.output_type
class GetArchitectureDsTemplateOptionalsResult:
    """
    A collection of values returned by getArchitectureDsTemplateOptionals.
    """
    def __init__(__self__, fd_name=None, id=None, optional_fields=None, region=None, required=None, searchable=None, workspace_id=None):
        if fd_name and not isinstance(fd_name, str):
            raise TypeError("Expected argument 'fd_name' to be a str")
        pulumi.set(__self__, "fd_name", fd_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if optional_fields and not isinstance(optional_fields, list):
            raise TypeError("Expected argument 'optional_fields' to be a list")
        pulumi.set(__self__, "optional_fields", optional_fields)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if required and not isinstance(required, bool):
            raise TypeError("Expected argument 'required' to be a bool")
        pulumi.set(__self__, "required", required)
        if searchable and not isinstance(searchable, bool):
            raise TypeError("Expected argument 'searchable' to be a bool")
        pulumi.set(__self__, "searchable", searchable)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="fdName")
    def fd_name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the optional field.
        """
        return pulumi.get(self, "fd_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> Sequence['outputs.GetArchitectureDsTemplateOptionalsOptionalFieldResult']:
        """
        Indicates the list of DataArts Architecture data standard template optional fields.
        The optional_fields structure is documented below.
        """
        return pulumi.get(self, "optional_fields")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the field is required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def searchable(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the field is search supported.
        """
        return pulumi.get(self, "searchable")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetArchitectureDsTemplateOptionalsResult(GetArchitectureDsTemplateOptionalsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetArchitectureDsTemplateOptionalsResult(
            fd_name=self.fd_name,
            id=self.id,
            optional_fields=self.optional_fields,
            region=self.region,
            required=self.required,
            searchable=self.searchable,
            workspace_id=self.workspace_id)


def get_architecture_ds_template_optionals(fd_name: Optional[_builtins.str] = None,
                                           region: Optional[_builtins.str] = None,
                                           required: Optional[_builtins.bool] = None,
                                           searchable: Optional[_builtins.bool] = None,
                                           workspace_id: Optional[_builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetArchitectureDsTemplateOptionalsResult:
    """
    Use this data source to get the list of DataArts Architecture data standard template optionals.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.DataArtsStudio.get_architecture_ds_template_optionals(workspace_id=workspace_id)
    ```


    :param _builtins.str fd_name: Specifies the name of the optional field.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.bool required: Specifies whether the field is required. Defaults to **false**.
    :param _builtins.bool searchable: Specifies whether the field is search supported. Defaults to **false**.
    :param _builtins.str workspace_id: Specifies the workspace ID of DataArts Architecture.
    """
    __args__ = dict()
    __args__['fdName'] = fd_name
    __args__['region'] = region
    __args__['required'] = required
    __args__['searchable'] = searchable
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DataArtsStudio/getArchitectureDsTemplateOptionals:getArchitectureDsTemplateOptionals', __args__, opts=opts, typ=GetArchitectureDsTemplateOptionalsResult).value

    return AwaitableGetArchitectureDsTemplateOptionalsResult(
        fd_name=pulumi.get(__ret__, 'fd_name'),
        id=pulumi.get(__ret__, 'id'),
        optional_fields=pulumi.get(__ret__, 'optional_fields'),
        region=pulumi.get(__ret__, 'region'),
        required=pulumi.get(__ret__, 'required'),
        searchable=pulumi.get(__ret__, 'searchable'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_architecture_ds_template_optionals_output(fd_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  required: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                  searchable: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                  workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetArchitectureDsTemplateOptionalsResult]:
    """
    Use this data source to get the list of DataArts Architecture data standard template optionals.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.DataArtsStudio.get_architecture_ds_template_optionals(workspace_id=workspace_id)
    ```


    :param _builtins.str fd_name: Specifies the name of the optional field.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.bool required: Specifies whether the field is required. Defaults to **false**.
    :param _builtins.bool searchable: Specifies whether the field is search supported. Defaults to **false**.
    :param _builtins.str workspace_id: Specifies the workspace ID of DataArts Architecture.
    """
    __args__ = dict()
    __args__['fdName'] = fd_name
    __args__['region'] = region
    __args__['required'] = required
    __args__['searchable'] = searchable
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DataArtsStudio/getArchitectureDsTemplateOptionals:getArchitectureDsTemplateOptionals', __args__, opts=opts, typ=GetArchitectureDsTemplateOptionalsResult)
    return __ret__.apply(lambda __response__: GetArchitectureDsTemplateOptionalsResult(
        fd_name=pulumi.get(__response__, 'fd_name'),
        id=pulumi.get(__response__, 'id'),
        optional_fields=pulumi.get(__response__, 'optional_fields'),
        region=pulumi.get(__response__, 'region'),
        required=pulumi.get(__response__, 'required'),
        searchable=pulumi.get(__response__, 'searchable'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
