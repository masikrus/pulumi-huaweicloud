# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FactoryScriptArgs', 'FactoryScript']

@pulumi.input_type
class FactoryScriptArgs:
    def __init__(__self__, *,
                 connection_name: pulumi.Input[_builtins.str],
                 content: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 approvers: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryScriptApproverArgs']]]] = None,
                 configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 database: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a FactoryScript resource.
        :param pulumi.Input[_builtins.str] connection_name: Specifies the connection name of script.
        :param pulumi.Input[_builtins.str] content: Specifies the script content. A maximum of 4 MB is supported.
        :param pulumi.Input[_builtins.str] type: Specifies the script type. The valid values are: **FlinkSQL**, **DLISQL**,
               **SparkSQL**, **HiveSQL**, **DWSSQL**, **RDSSQL**, **Shell**, **PRESTO**, **ClickHouseSQL**, **HetuEngineSQL**,
               **PYTHON**, **ImpalaSQL**. Changing this creates a new script.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the script in.
               Changing this creates a new script.
        :param pulumi.Input[Sequence[pulumi.Input['FactoryScriptApproverArgs']]] approvers: Specifies the approvers of script.
               The approvers structure is documented below.
               
               <a name="approvers"></a>
               The `approvers` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] configuration: Specifies the configuration of script. Only valid key and value can take an effect.
               if put the invalid key and value in the `configuration` map, it may proceed with an empty `configuration` map.
        :param pulumi.Input[_builtins.str] database: Specifies the database of script.
        :param pulumi.Input[_builtins.str] description: Specifies the description of script.
        :param pulumi.Input[_builtins.str] directory: Specifies the directory of script.
        :param pulumi.Input[_builtins.str] name: Specifies the script name. The name contains a maximum of 128 characters,
               including only letters, numbers, hyphens (-), and periods (.). The script name must be unique. Changing this creates
               a new script.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the queue name of script.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the script.
               Changing this creates a new script.
        :param pulumi.Input[_builtins.str] target_status: Specifies the target status of script.
        """
        pulumi.set(__self__, "connection_name", connection_name)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if approvers is not None:
            pulumi.set(__self__, "approvers", approvers)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if target_status is not None:
            pulumi.set(__self__, "target_status", target_status)

    @_builtins.property
    @pulumi.getter(name="connectionName")
    def connection_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the connection name of script.
        """
        return pulumi.get(self, "connection_name")

    @connection_name.setter
    def connection_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connection_name", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the script content. A maximum of 4 MB is supported.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the script type. The valid values are: **FlinkSQL**, **DLISQL**,
        **SparkSQL**, **HiveSQL**, **DWSSQL**, **RDSSQL**, **Shell**, **PRESTO**, **ClickHouseSQL**, **HetuEngineSQL**,
        **PYTHON**, **ImpalaSQL**. Changing this creates a new script.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID which the script in.
        Changing this creates a new script.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def approvers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FactoryScriptApproverArgs']]]]:
        """
        Specifies the approvers of script.
        The approvers structure is documented below.

        <a name="approvers"></a>
        The `approvers` block supports:
        """
        return pulumi.get(self, "approvers")

    @approvers.setter
    def approvers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryScriptApproverArgs']]]]):
        pulumi.set(self, "approvers", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the configuration of script. Only valid key and value can take an effect.
        if put the invalid key and value in the `configuration` map, it may proceed with an empty `configuration` map.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database of script.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of script.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the directory of script.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "directory", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the script name. The name contains a maximum of 128 characters,
        including only letters, numbers, hyphens (-), and periods (.). The script name must be unique. Changing this creates
        a new script.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the queue name of script.
        """
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to manage the script.
        Changing this creates a new script.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="targetStatus")
    def target_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target status of script.
        """
        return pulumi.get(self, "target_status")

    @target_status.setter
    def target_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_status", value)


@pulumi.input_type
class _FactoryScriptState:
    def __init__(__self__, *,
                 approvers: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryScriptApproverArgs']]]] = None,
                 auto_acquire_lock: Optional[pulumi.Input[_builtins.bool]] = None,
                 configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 database: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering FactoryScript resources.
        :param pulumi.Input[Sequence[pulumi.Input['FactoryScriptApproverArgs']]] approvers: Specifies the approvers of script.
               The approvers structure is documented below.
               
               <a name="approvers"></a>
               The `approvers` block supports:
        :param pulumi.Input[_builtins.bool] auto_acquire_lock: Whether the resource automatically obtain edit lock parameters.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] configuration: Specifies the configuration of script. Only valid key and value can take an effect.
               if put the invalid key and value in the `configuration` map, it may proceed with an empty `configuration` map.
        :param pulumi.Input[_builtins.str] connection_name: Specifies the connection name of script.
        :param pulumi.Input[_builtins.str] content: Specifies the script content. A maximum of 4 MB is supported.
        :param pulumi.Input[_builtins.str] created_by: The person creating the script.
        :param pulumi.Input[_builtins.str] database: Specifies the database of script.
        :param pulumi.Input[_builtins.str] description: Specifies the description of script.
        :param pulumi.Input[_builtins.str] directory: Specifies the directory of script.
        :param pulumi.Input[_builtins.str] name: Specifies the script name. The name contains a maximum of 128 characters,
               including only letters, numbers, hyphens (-), and periods (.). The script name must be unique. Changing this creates
               a new script.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the queue name of script.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the script.
               Changing this creates a new script.
        :param pulumi.Input[_builtins.str] target_status: Specifies the target status of script.
        :param pulumi.Input[_builtins.str] type: Specifies the script type. The valid values are: **FlinkSQL**, **DLISQL**,
               **SparkSQL**, **HiveSQL**, **DWSSQL**, **RDSSQL**, **Shell**, **PRESTO**, **ClickHouseSQL**, **HetuEngineSQL**,
               **PYTHON**, **ImpalaSQL**. Changing this creates a new script.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the script in.
               Changing this creates a new script.
        """
        if approvers is not None:
            pulumi.set(__self__, "approvers", approvers)
        if auto_acquire_lock is not None:
            pulumi.set(__self__, "auto_acquire_lock", auto_acquire_lock)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if connection_name is not None:
            pulumi.set(__self__, "connection_name", connection_name)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if target_status is not None:
            pulumi.set(__self__, "target_status", target_status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def approvers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FactoryScriptApproverArgs']]]]:
        """
        Specifies the approvers of script.
        The approvers structure is documented below.

        <a name="approvers"></a>
        The `approvers` block supports:
        """
        return pulumi.get(self, "approvers")

    @approvers.setter
    def approvers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryScriptApproverArgs']]]]):
        pulumi.set(self, "approvers", value)

    @_builtins.property
    @pulumi.getter(name="autoAcquireLock")
    def auto_acquire_lock(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the resource automatically obtain edit lock parameters.
        """
        return pulumi.get(self, "auto_acquire_lock")

    @auto_acquire_lock.setter
    def auto_acquire_lock(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_acquire_lock", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the configuration of script. Only valid key and value can take an effect.
        if put the invalid key and value in the `configuration` map, it may proceed with an empty `configuration` map.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="connectionName")
    def connection_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the connection name of script.
        """
        return pulumi.get(self, "connection_name")

    @connection_name.setter
    def connection_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_name", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the script content. A maximum of 4 MB is supported.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person creating the script.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database of script.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of script.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the directory of script.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "directory", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the script name. The name contains a maximum of 128 characters,
        including only letters, numbers, hyphens (-), and periods (.). The script name must be unique. Changing this creates
        a new script.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the queue name of script.
        """
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to manage the script.
        Changing this creates a new script.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="targetStatus")
    def target_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target status of script.
        """
        return pulumi.get(self, "target_status")

    @target_status.setter
    def target_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the script type. The valid values are: **FlinkSQL**, **DLISQL**,
        **SparkSQL**, **HiveSQL**, **DWSSQL**, **RDSSQL**, **Shell**, **PRESTO**, **ClickHouseSQL**, **HetuEngineSQL**,
        **PYTHON**, **ImpalaSQL**. Changing this creates a new script.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID which the script in.
        Changing this creates a new script.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/factoryScript:FactoryScript")
class FactoryScript(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approvers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryScriptApproverArgs', 'FactoryScriptApproverArgsDict']]]]] = None,
                 configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 database: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages DataArts Factory script resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        connection_name = config.require_object("connectionName")
        test = huaweicloud.dataartsstudio.FactoryScript("test",
            workspace_id=workspace_id,
            name=name,
            type="DLISQL",
            content="#content",
            connection_name=connection_name,
            queue_name="default",
            description="test",
            configuration={
                "spark.sql.files.maxRecordsPerFile": "1",
                "dli.sql.job.timeout": "1",
            })
        ```

        ## Import

        DataArts factory script can be imported using `<workspace_id>/<name>`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/factoryScript:FactoryScript test b41a17b18a814b118730a867cecb9952/test
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `approvers`, `target_status`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_factory_script" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              approvers, target_status,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FactoryScriptApproverArgs', 'FactoryScriptApproverArgsDict']]]] approvers: Specifies the approvers of script.
               The approvers structure is documented below.
               
               <a name="approvers"></a>
               The `approvers` block supports:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] configuration: Specifies the configuration of script. Only valid key and value can take an effect.
               if put the invalid key and value in the `configuration` map, it may proceed with an empty `configuration` map.
        :param pulumi.Input[_builtins.str] connection_name: Specifies the connection name of script.
        :param pulumi.Input[_builtins.str] content: Specifies the script content. A maximum of 4 MB is supported.
        :param pulumi.Input[_builtins.str] database: Specifies the database of script.
        :param pulumi.Input[_builtins.str] description: Specifies the description of script.
        :param pulumi.Input[_builtins.str] directory: Specifies the directory of script.
        :param pulumi.Input[_builtins.str] name: Specifies the script name. The name contains a maximum of 128 characters,
               including only letters, numbers, hyphens (-), and periods (.). The script name must be unique. Changing this creates
               a new script.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the queue name of script.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the script.
               Changing this creates a new script.
        :param pulumi.Input[_builtins.str] target_status: Specifies the target status of script.
        :param pulumi.Input[_builtins.str] type: Specifies the script type. The valid values are: **FlinkSQL**, **DLISQL**,
               **SparkSQL**, **HiveSQL**, **DWSSQL**, **RDSSQL**, **Shell**, **PRESTO**, **ClickHouseSQL**, **HetuEngineSQL**,
               **PYTHON**, **ImpalaSQL**. Changing this creates a new script.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the script in.
               Changing this creates a new script.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FactoryScriptArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages DataArts Factory script resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        connection_name = config.require_object("connectionName")
        test = huaweicloud.dataartsstudio.FactoryScript("test",
            workspace_id=workspace_id,
            name=name,
            type="DLISQL",
            content="#content",
            connection_name=connection_name,
            queue_name="default",
            description="test",
            configuration={
                "spark.sql.files.maxRecordsPerFile": "1",
                "dli.sql.job.timeout": "1",
            })
        ```

        ## Import

        DataArts factory script can be imported using `<workspace_id>/<name>`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/factoryScript:FactoryScript test b41a17b18a814b118730a867cecb9952/test
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `approvers`, `target_status`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_factory_script" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              approvers, target_status,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param FactoryScriptArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FactoryScriptArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approvers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryScriptApproverArgs', 'FactoryScriptApproverArgsDict']]]]] = None,
                 configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 database: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FactoryScriptArgs.__new__(FactoryScriptArgs)

            __props__.__dict__["approvers"] = approvers
            __props__.__dict__["configuration"] = configuration
            if connection_name is None and not opts.urn:
                raise TypeError("Missing required property 'connection_name'")
            __props__.__dict__["connection_name"] = connection_name
            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["database"] = database
            __props__.__dict__["description"] = description
            __props__.__dict__["directory"] = directory
            __props__.__dict__["name"] = name
            __props__.__dict__["queue_name"] = queue_name
            __props__.__dict__["region"] = region
            __props__.__dict__["target_status"] = target_status
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["auto_acquire_lock"] = None
            __props__.__dict__["created_by"] = None
        super(FactoryScript, __self__).__init__(
            'huaweicloud:DataArtsStudio/factoryScript:FactoryScript',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            approvers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryScriptApproverArgs', 'FactoryScriptApproverArgsDict']]]]] = None,
            auto_acquire_lock: Optional[pulumi.Input[_builtins.bool]] = None,
            configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            connection_name: Optional[pulumi.Input[_builtins.str]] = None,
            content: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            database: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            directory: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            queue_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            target_status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'FactoryScript':
        """
        Get an existing FactoryScript resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FactoryScriptApproverArgs', 'FactoryScriptApproverArgsDict']]]] approvers: Specifies the approvers of script.
               The approvers structure is documented below.
               
               <a name="approvers"></a>
               The `approvers` block supports:
        :param pulumi.Input[_builtins.bool] auto_acquire_lock: Whether the resource automatically obtain edit lock parameters.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] configuration: Specifies the configuration of script. Only valid key and value can take an effect.
               if put the invalid key and value in the `configuration` map, it may proceed with an empty `configuration` map.
        :param pulumi.Input[_builtins.str] connection_name: Specifies the connection name of script.
        :param pulumi.Input[_builtins.str] content: Specifies the script content. A maximum of 4 MB is supported.
        :param pulumi.Input[_builtins.str] created_by: The person creating the script.
        :param pulumi.Input[_builtins.str] database: Specifies the database of script.
        :param pulumi.Input[_builtins.str] description: Specifies the description of script.
        :param pulumi.Input[_builtins.str] directory: Specifies the directory of script.
        :param pulumi.Input[_builtins.str] name: Specifies the script name. The name contains a maximum of 128 characters,
               including only letters, numbers, hyphens (-), and periods (.). The script name must be unique. Changing this creates
               a new script.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the queue name of script.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the script.
               Changing this creates a new script.
        :param pulumi.Input[_builtins.str] target_status: Specifies the target status of script.
        :param pulumi.Input[_builtins.str] type: Specifies the script type. The valid values are: **FlinkSQL**, **DLISQL**,
               **SparkSQL**, **HiveSQL**, **DWSSQL**, **RDSSQL**, **Shell**, **PRESTO**, **ClickHouseSQL**, **HetuEngineSQL**,
               **PYTHON**, **ImpalaSQL**. Changing this creates a new script.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the script in.
               Changing this creates a new script.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FactoryScriptState.__new__(_FactoryScriptState)

        __props__.__dict__["approvers"] = approvers
        __props__.__dict__["auto_acquire_lock"] = auto_acquire_lock
        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["connection_name"] = connection_name
        __props__.__dict__["content"] = content
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["database"] = database
        __props__.__dict__["description"] = description
        __props__.__dict__["directory"] = directory
        __props__.__dict__["name"] = name
        __props__.__dict__["queue_name"] = queue_name
        __props__.__dict__["region"] = region
        __props__.__dict__["target_status"] = target_status
        __props__.__dict__["type"] = type
        __props__.__dict__["workspace_id"] = workspace_id
        return FactoryScript(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def approvers(self) -> pulumi.Output[Optional[Sequence['outputs.FactoryScriptApprover']]]:
        """
        Specifies the approvers of script.
        The approvers structure is documented below.

        <a name="approvers"></a>
        The `approvers` block supports:
        """
        return pulumi.get(self, "approvers")

    @_builtins.property
    @pulumi.getter(name="autoAcquireLock")
    def auto_acquire_lock(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the resource automatically obtain edit lock parameters.
        """
        return pulumi.get(self, "auto_acquire_lock")

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the configuration of script. Only valid key and value can take an effect.
        if put the invalid key and value in the `configuration` map, it may proceed with an empty `configuration` map.
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="connectionName")
    def connection_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the connection name of script.
        """
        return pulumi.get(self, "connection_name")

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the script content. A maximum of 4 MB is supported.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The person creating the script.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def database(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the database of script.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of script.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def directory(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the directory of script.
        """
        return pulumi.get(self, "directory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the script name. The name contains a maximum of 128 characters,
        including only letters, numbers, hyphens (-), and periods (.). The script name must be unique. Changing this creates
        a new script.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the queue name of script.
        """
        return pulumi.get(self, "queue_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to manage the script.
        Changing this creates a new script.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="targetStatus")
    def target_status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the target status of script.
        """
        return pulumi.get(self, "target_status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the script type. The valid values are: **FlinkSQL**, **DLISQL**,
        **SparkSQL**, **HiveSQL**, **DWSSQL**, **RDSSQL**, **Shell**, **PRESTO**, **ClickHouseSQL**, **HetuEngineSQL**,
        **PYTHON**, **ImpalaSQL**. Changing this creates a new script.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID which the script in.
        Changing this creates a new script.
        """
        return pulumi.get(self, "workspace_id")

