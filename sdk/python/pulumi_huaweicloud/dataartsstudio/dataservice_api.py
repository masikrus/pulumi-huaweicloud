# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DataserviceApiArgs', 'DataserviceApi']

@pulumi.input_type
class DataserviceApiArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[_builtins.str],
                 catalog_id: pulumi.Input[_builtins.str],
                 datasource_config: pulumi.Input['DataserviceApiDatasourceConfigArgs'],
                 manager: pulumi.Input[_builtins.str],
                 path: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input[_builtins.str],
                 request_type: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 backend_config: Optional[pulumi.Input['DataserviceApiBackendConfigArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 request_params: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiRequestParamArgs']]]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataserviceApi resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication type.  
               The valid values are as follows:
               + **APP**
               + **IAM**
               + **NONE**
        :param pulumi.Input[_builtins.str] catalog_id: Specifies the ID of the catalog where the API is located.
        :param pulumi.Input['DataserviceApiDatasourceConfigArgs'] datasource_config: Specifies the configuration of the API data source.  
               The datasource_config structure is documented below.
        :param pulumi.Input[_builtins.str] manager: Specifies the API reviewer.
               
               > Make sure the reviewer is already created in the data source reviewers management before the resource creation.
        :param pulumi.Input[_builtins.str] path: Specifies the backend path.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol of the backend request.  
               The valid values are as follows:
               + **PROTOCOL_TYPE_HTTP**
               + **PROTOCOL_TYPE_HTTPS**
        :param pulumi.Input[_builtins.str] request_type: Specifies the request type of the API.  
               The valid values are as follows:
               + **REQUEST_TYPE_POST**
               + **REQUEST_TYPE_GET**
        :param pulumi.Input[_builtins.str] type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of workspace where the API is located.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input['DataserviceApiBackendConfigArgs'] backend_config: Specifies the configuration of the API backend.  
               The backend_config structure is documented below.
               
               <a name="dataservice_api_datasource_config"></a>
               The `datasource_config` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant parameter.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Defaults to **SHARED**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the constant parameter.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DataserviceApiRequestParamArgs']]] request_params: Specifies the parameters of the API request.  
               The request_params structure is documented below.
        :param pulumi.Input[_builtins.str] visibility: Specifies the visibility to the catalog of API.  
               The valid values are as follows:
               + **WORKSPACE**
               + **PROJECT**
               + **DOMAIN**
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "datasource_config", datasource_config)
        pulumi.set(__self__, "manager", manager)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if backend_config is not None:
            pulumi.set(__self__, "backend_config", backend_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlm_type is not None:
            pulumi.set(__self__, "dlm_type", dlm_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if request_params is not None:
            pulumi.set(__self__, "request_params", request_params)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the authentication type.  
        The valid values are as follows:
        + **APP**
        + **IAM**
        + **NONE**
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the catalog where the API is located.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "catalog_id", value)

    @_builtins.property
    @pulumi.getter(name="datasourceConfig")
    def datasource_config(self) -> pulumi.Input['DataserviceApiDatasourceConfigArgs']:
        """
        Specifies the configuration of the API data source.  
        The datasource_config structure is documented below.
        """
        return pulumi.get(self, "datasource_config")

    @datasource_config.setter
    def datasource_config(self, value: pulumi.Input['DataserviceApiDatasourceConfigArgs']):
        pulumi.set(self, "datasource_config", value)

    @_builtins.property
    @pulumi.getter
    def manager(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the API reviewer.

        > Make sure the reviewer is already created in the data source reviewers management before the resource creation.
        """
        return pulumi.get(self, "manager")

    @manager.setter
    def manager(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "manager", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol of the backend request.  
        The valid values are as follows:
        + **PROTOCOL_TYPE_HTTP**
        + **PROTOCOL_TYPE_HTTPS**
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the request type of the API.  
        The valid values are as follows:
        + **REQUEST_TYPE_POST**
        + **REQUEST_TYPE_GET**
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "request_type", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of workspace where the API is located.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="backendConfig")
    def backend_config(self) -> Optional[pulumi.Input['DataserviceApiBackendConfigArgs']]:
        """
        Specifies the configuration of the API backend.  
        The backend_config structure is documented below.

        <a name="dataservice_api_datasource_config"></a>
        The `datasource_config` block supports:
        """
        return pulumi.get(self, "backend_config")

    @backend_config.setter
    def backend_config(self, value: Optional[pulumi.Input['DataserviceApiBackendConfigArgs']]):
        pulumi.set(self, "backend_config", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the constant parameter.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of DLM engine.  
        The valid values are as follows:
        + **SHARED**: Shared data service.
        + **EXCLUSIVE**: The exclusive data service.

        Defaults to **SHARED**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "dlm_type")

    @dlm_type.setter
    def dlm_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dlm_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="requestParams")
    def request_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiRequestParamArgs']]]]:
        """
        Specifies the parameters of the API request.  
        The request_params structure is documented below.
        """
        return pulumi.get(self, "request_params")

    @request_params.setter
    def request_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiRequestParamArgs']]]]):
        pulumi.set(self, "request_params", value)

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the visibility to the catalog of API.  
        The valid values are as follows:
        + **WORKSPACE**
        + **PROJECT**
        + **DOMAIN**
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class _DataserviceApiState:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_config: Optional[pulumi.Input['DataserviceApiBackendConfigArgs']] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 create_user: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 datasource_config: Optional[pulumi.Input['DataserviceApiDatasourceConfigArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiHostArgs']]]] = None,
                 manager: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 request_params: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiRequestParamArgs']]]] = None,
                 request_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataserviceApi resources.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication type.  
               The valid values are as follows:
               + **APP**
               + **IAM**
               + **NONE**
        :param pulumi.Input['DataserviceApiBackendConfigArgs'] backend_config: Specifies the configuration of the API backend.  
               The backend_config structure is documented below.
               
               <a name="dataservice_api_datasource_config"></a>
               The `datasource_config` block supports:
        :param pulumi.Input[_builtins.str] catalog_id: Specifies the ID of the catalog where the API is located.
        :param pulumi.Input[_builtins.str] create_user: The creator name.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the API, in RFC3339 format.
        :param pulumi.Input['DataserviceApiDatasourceConfigArgs'] datasource_config: Specifies the configuration of the API data source.  
               The datasource_config structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant parameter.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Defaults to **SHARED**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] group_id: The ID of the group to which the API belongs, for shared type.
        :param pulumi.Input[_builtins.str] host: Specifies the backend host.
        :param pulumi.Input[Sequence[pulumi.Input['DataserviceApiHostArgs']]] hosts: The API host configuration, for exclusive type.  
               The hosts structure is documented below.
        :param pulumi.Input[_builtins.str] manager: Specifies the API reviewer.
               
               > Make sure the reviewer is already created in the data source reviewers management before the resource creation.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the constant parameter.
        :param pulumi.Input[_builtins.str] path: Specifies the backend path.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol of the backend request.  
               The valid values are as follows:
               + **PROTOCOL_TYPE_HTTP**
               + **PROTOCOL_TYPE_HTTPS**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DataserviceApiRequestParamArgs']]] request_params: Specifies the parameters of the API request.  
               The request_params structure is documented below.
        :param pulumi.Input[_builtins.str] request_type: Specifies the request type of the API.  
               The valid values are as follows:
               + **REQUEST_TYPE_POST**
               + **REQUEST_TYPE_GET**
        :param pulumi.Input[_builtins.str] status: The API status, for shared type.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the API, in RFC3339 format.
        :param pulumi.Input[_builtins.str] visibility: Specifies the visibility to the catalog of API.  
               The valid values are as follows:
               + **WORKSPACE**
               + **PROJECT**
               + **DOMAIN**
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of workspace where the API is located.
               
               Changing this parameter will create a new resource.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if backend_config is not None:
            pulumi.set(__self__, "backend_config", backend_config)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if create_user is not None:
            pulumi.set(__self__, "create_user", create_user)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if datasource_config is not None:
            pulumi.set(__self__, "datasource_config", datasource_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlm_type is not None:
            pulumi.set(__self__, "dlm_type", dlm_type)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if manager is not None:
            pulumi.set(__self__, "manager", manager)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if request_params is not None:
            pulumi.set(__self__, "request_params", request_params)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication type.  
        The valid values are as follows:
        + **APP**
        + **IAM**
        + **NONE**
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="backendConfig")
    def backend_config(self) -> Optional[pulumi.Input['DataserviceApiBackendConfigArgs']]:
        """
        Specifies the configuration of the API backend.  
        The backend_config structure is documented below.

        <a name="dataservice_api_datasource_config"></a>
        The `datasource_config` block supports:
        """
        return pulumi.get(self, "backend_config")

    @backend_config.setter
    def backend_config(self, value: Optional[pulumi.Input['DataserviceApiBackendConfigArgs']]):
        pulumi.set(self, "backend_config", value)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the catalog where the API is located.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_id", value)

    @_builtins.property
    @pulumi.getter(name="createUser")
    def create_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creator name.
        """
        return pulumi.get(self, "create_user")

    @create_user.setter
    def create_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_user", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="datasourceConfig")
    def datasource_config(self) -> Optional[pulumi.Input['DataserviceApiDatasourceConfigArgs']]:
        """
        Specifies the configuration of the API data source.  
        The datasource_config structure is documented below.
        """
        return pulumi.get(self, "datasource_config")

    @datasource_config.setter
    def datasource_config(self, value: Optional[pulumi.Input['DataserviceApiDatasourceConfigArgs']]):
        pulumi.set(self, "datasource_config", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the constant parameter.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of DLM engine.  
        The valid values are as follows:
        + **SHARED**: Shared data service.
        + **EXCLUSIVE**: The exclusive data service.

        Defaults to **SHARED**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "dlm_type")

    @dlm_type.setter
    def dlm_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dlm_type", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the group to which the API belongs, for shared type.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiHostArgs']]]]:
        """
        The API host configuration, for exclusive type.  
        The hosts structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @_builtins.property
    @pulumi.getter
    def manager(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the API reviewer.

        > Make sure the reviewer is already created in the data source reviewers management before the resource creation.
        """
        return pulumi.get(self, "manager")

    @manager.setter
    def manager(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "manager", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backend path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the protocol of the backend request.  
        The valid values are as follows:
        + **PROTOCOL_TYPE_HTTP**
        + **PROTOCOL_TYPE_HTTPS**
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="requestParams")
    def request_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiRequestParamArgs']]]]:
        """
        Specifies the parameters of the API request.  
        The request_params structure is documented below.
        """
        return pulumi.get(self, "request_params")

    @request_params.setter
    def request_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiRequestParamArgs']]]]):
        pulumi.set(self, "request_params", value)

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request type of the API.  
        The valid values are as follows:
        + **REQUEST_TYPE_POST**
        + **REQUEST_TYPE_GET**
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The API status, for shared type.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the visibility to the catalog of API.  
        The valid values are as follows:
        + **WORKSPACE**
        + **PROJECT**
        + **DOMAIN**
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visibility", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of workspace where the API is located.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/dataserviceApi:DataserviceApi")
class DataserviceApi(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_config: Optional[pulumi.Input[Union['DataserviceApiBackendConfigArgs', 'DataserviceApiBackendConfigArgsDict']]] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datasource_config: Optional[pulumi.Input[Union['DataserviceApiDatasourceConfigArgs', 'DataserviceApiDatasourceConfigArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 manager: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 request_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DataserviceApiRequestParamArgs', 'DataserviceApiRequestParamArgsDict']]]]] = None,
                 request_type: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to manage API under data service catalog within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        catalog_id = config.require_object("catalogId")
        random_resource_name = config.require_object("randomResourceName")
        reviewer_name = config.require_object("reviewerName")
        test = huaweicloud.dataartsstudio.DataserviceApi("test",
            workspace_id=workspace_id,
            dlm_type="SHARED",
            type="API_SPECIFIC_TYPE_CONFIGURATION",
            catalog_id=catalog_id,
            name=random_resource_name,
            description="Created by terraform script",
            auth_type="NONE",
            manager=reviewer_name,
            path="/terraform/auto/resource_create/{resource_type}/{resource_name}",
            protocol="PROTOCOL_TYPE_HTTP",
            request_type="REQUEST_TYPE_POST",
            visibility="WORKSPACE",
            request_params=[
                {
                    "name": "resource_type",
                    "position": "REQUEST_PARAMETER_POSITION_PATH",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "description": "The type of the terraform resource to be automatically created",
                    "necessary": True,
                    "example_value": "huaweicloud_vpc",
                },
                {
                    "name": "resource_name",
                    "position": "REQUEST_PARAMETER_POSITION_PATH",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "description": "The name of the terraform resource to be automatically created",
                    "necessary": True,
                    "example_value": "test",
                },
                {
                    "name": "configuration",
                    "position": "REQUEST_PARAMETER_POSITION_BODY",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "description": "The configuration of the terraform resource, in JSON format",
                    "necessary": True,
                },
                {
                    "name": "resource_id",
                    "position": "REQUEST_PARAMETER_POSITION_BODY",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "description": "The resource ID, in UUID format",
                    "necessary": False,
                },
                {
                    "name": "order",
                    "position": "REQUEST_PARAMETER_POSITION_BODY",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "description": "The filter parameter for resource configuration details",
                    "necessary": False,
                    "example_value": "asc",
                    "default_value": "desc",
                },
            ],
            datasource_config={
                "type": "DLI",
                "connection_id": test_huaweicloud_dataarts_studio_data_connection["id"],
                "database": test_huaweicloud_dli_database["name"],
                "datatable": test_huaweicloud_dli_table["name"],
                "queue": test_huaweicloud_dli_queue["name"],
                "access_mode": "SQL",
                "backend_params": [{
                    "name": "configuration",
                    "mapping": "configuration",
                    "condition": "CONDITION_TYPE_EQ",
                }],
                "response_params": [{
                    "name": "resourceId",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "field": "resource_id",
                    "description": "The resource ID, in UUID format",
                }],
                "order_params": [{
                    "name": "bePlans",
                    "field": "plans",
                    "optional": True,
                    "sort": "ASC",
                    "order": 1,
                }],
            })
        ```

        ## Import

        The API can be imported using `workspace_id`, `dlm_type` and `id` separated by slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/dataserviceApi:DataserviceApi test <workspace_id>/<dlm_type>/<id>
        ```

        Also, you can omit `dlm_type` and provide just `workspace_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/dataserviceApi:DataserviceApi test <workspace_id>/<id>
        ```

        ~> This way only supports importing the API of the **SHARED** type, but does not support the API imported for

           **EXCLUSIVE** type. If an error is reported, please carefully check the `dlm_type` value to which imported API

           you want.

        Note that the imported state may not be identical to your resource definition, because the attributes are missing in the

        API response. The missing attributes includes: `auth_type`, `catalog_id` and `visibility`.

        It is generally recommended running `pulumi preview` after importing an resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_dataservice_api" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              auth_type, catalog_id, visibility,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication type.  
               The valid values are as follows:
               + **APP**
               + **IAM**
               + **NONE**
        :param pulumi.Input[Union['DataserviceApiBackendConfigArgs', 'DataserviceApiBackendConfigArgsDict']] backend_config: Specifies the configuration of the API backend.  
               The backend_config structure is documented below.
               
               <a name="dataservice_api_datasource_config"></a>
               The `datasource_config` block supports:
        :param pulumi.Input[_builtins.str] catalog_id: Specifies the ID of the catalog where the API is located.
        :param pulumi.Input[Union['DataserviceApiDatasourceConfigArgs', 'DataserviceApiDatasourceConfigArgsDict']] datasource_config: Specifies the configuration of the API data source.  
               The datasource_config structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant parameter.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Defaults to **SHARED**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] manager: Specifies the API reviewer.
               
               > Make sure the reviewer is already created in the data source reviewers management before the resource creation.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the constant parameter.
        :param pulumi.Input[_builtins.str] path: Specifies the backend path.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol of the backend request.  
               The valid values are as follows:
               + **PROTOCOL_TYPE_HTTP**
               + **PROTOCOL_TYPE_HTTPS**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DataserviceApiRequestParamArgs', 'DataserviceApiRequestParamArgsDict']]]] request_params: Specifies the parameters of the API request.  
               The request_params structure is documented below.
        :param pulumi.Input[_builtins.str] request_type: Specifies the request type of the API.  
               The valid values are as follows:
               + **REQUEST_TYPE_POST**
               + **REQUEST_TYPE_GET**
        :param pulumi.Input[_builtins.str] type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param pulumi.Input[_builtins.str] visibility: Specifies the visibility to the catalog of API.  
               The valid values are as follows:
               + **WORKSPACE**
               + **PROJECT**
               + **DOMAIN**
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of workspace where the API is located.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataserviceApiArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to manage API under data service catalog within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        catalog_id = config.require_object("catalogId")
        random_resource_name = config.require_object("randomResourceName")
        reviewer_name = config.require_object("reviewerName")
        test = huaweicloud.dataartsstudio.DataserviceApi("test",
            workspace_id=workspace_id,
            dlm_type="SHARED",
            type="API_SPECIFIC_TYPE_CONFIGURATION",
            catalog_id=catalog_id,
            name=random_resource_name,
            description="Created by terraform script",
            auth_type="NONE",
            manager=reviewer_name,
            path="/terraform/auto/resource_create/{resource_type}/{resource_name}",
            protocol="PROTOCOL_TYPE_HTTP",
            request_type="REQUEST_TYPE_POST",
            visibility="WORKSPACE",
            request_params=[
                {
                    "name": "resource_type",
                    "position": "REQUEST_PARAMETER_POSITION_PATH",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "description": "The type of the terraform resource to be automatically created",
                    "necessary": True,
                    "example_value": "huaweicloud_vpc",
                },
                {
                    "name": "resource_name",
                    "position": "REQUEST_PARAMETER_POSITION_PATH",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "description": "The name of the terraform resource to be automatically created",
                    "necessary": True,
                    "example_value": "test",
                },
                {
                    "name": "configuration",
                    "position": "REQUEST_PARAMETER_POSITION_BODY",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "description": "The configuration of the terraform resource, in JSON format",
                    "necessary": True,
                },
                {
                    "name": "resource_id",
                    "position": "REQUEST_PARAMETER_POSITION_BODY",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "description": "The resource ID, in UUID format",
                    "necessary": False,
                },
                {
                    "name": "order",
                    "position": "REQUEST_PARAMETER_POSITION_BODY",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "description": "The filter parameter for resource configuration details",
                    "necessary": False,
                    "example_value": "asc",
                    "default_value": "desc",
                },
            ],
            datasource_config={
                "type": "DLI",
                "connection_id": test_huaweicloud_dataarts_studio_data_connection["id"],
                "database": test_huaweicloud_dli_database["name"],
                "datatable": test_huaweicloud_dli_table["name"],
                "queue": test_huaweicloud_dli_queue["name"],
                "access_mode": "SQL",
                "backend_params": [{
                    "name": "configuration",
                    "mapping": "configuration",
                    "condition": "CONDITION_TYPE_EQ",
                }],
                "response_params": [{
                    "name": "resourceId",
                    "type": "REQUEST_PARAMETER_TYPE_STRING",
                    "field": "resource_id",
                    "description": "The resource ID, in UUID format",
                }],
                "order_params": [{
                    "name": "bePlans",
                    "field": "plans",
                    "optional": True,
                    "sort": "ASC",
                    "order": 1,
                }],
            })
        ```

        ## Import

        The API can be imported using `workspace_id`, `dlm_type` and `id` separated by slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/dataserviceApi:DataserviceApi test <workspace_id>/<dlm_type>/<id>
        ```

        Also, you can omit `dlm_type` and provide just `workspace_id` and `id`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/dataserviceApi:DataserviceApi test <workspace_id>/<id>
        ```

        ~> This way only supports importing the API of the **SHARED** type, but does not support the API imported for

           **EXCLUSIVE** type. If an error is reported, please carefully check the `dlm_type` value to which imported API

           you want.

        Note that the imported state may not be identical to your resource definition, because the attributes are missing in the

        API response. The missing attributes includes: `auth_type`, `catalog_id` and `visibility`.

        It is generally recommended running `pulumi preview` after importing an resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_dataservice_api" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              auth_type, catalog_id, visibility,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param DataserviceApiArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataserviceApiArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_config: Optional[pulumi.Input[Union['DataserviceApiBackendConfigArgs', 'DataserviceApiBackendConfigArgsDict']]] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datasource_config: Optional[pulumi.Input[Union['DataserviceApiDatasourceConfigArgs', 'DataserviceApiDatasourceConfigArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 manager: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 request_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DataserviceApiRequestParamArgs', 'DataserviceApiRequestParamArgsDict']]]]] = None,
                 request_type: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataserviceApiArgs.__new__(DataserviceApiArgs)

            if auth_type is None and not opts.urn:
                raise TypeError("Missing required property 'auth_type'")
            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["backend_config"] = backend_config
            if catalog_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_id'")
            __props__.__dict__["catalog_id"] = catalog_id
            if datasource_config is None and not opts.urn:
                raise TypeError("Missing required property 'datasource_config'")
            __props__.__dict__["datasource_config"] = datasource_config
            __props__.__dict__["description"] = description
            __props__.__dict__["dlm_type"] = dlm_type
            if manager is None and not opts.urn:
                raise TypeError("Missing required property 'manager'")
            __props__.__dict__["manager"] = manager
            __props__.__dict__["name"] = name
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["region"] = region
            __props__.__dict__["request_params"] = request_params
            if request_type is None and not opts.urn:
                raise TypeError("Missing required property 'request_type'")
            __props__.__dict__["request_type"] = request_type
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["visibility"] = visibility
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["create_user"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["group_id"] = None
            __props__.__dict__["host"] = None
            __props__.__dict__["hosts"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(DataserviceApi, __self__).__init__(
            'huaweicloud:DataArtsStudio/dataserviceApi:DataserviceApi',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_type: Optional[pulumi.Input[_builtins.str]] = None,
            backend_config: Optional[pulumi.Input[Union['DataserviceApiBackendConfigArgs', 'DataserviceApiBackendConfigArgsDict']]] = None,
            catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
            create_user: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            datasource_config: Optional[pulumi.Input[Union['DataserviceApiDatasourceConfigArgs', 'DataserviceApiDatasourceConfigArgsDict']]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dlm_type: Optional[pulumi.Input[_builtins.str]] = None,
            group_id: Optional[pulumi.Input[_builtins.str]] = None,
            host: Optional[pulumi.Input[_builtins.str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DataserviceApiHostArgs', 'DataserviceApiHostArgsDict']]]]] = None,
            manager: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            request_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DataserviceApiRequestParamArgs', 'DataserviceApiRequestParamArgsDict']]]]] = None,
            request_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            visibility: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataserviceApi':
        """
        Get an existing DataserviceApi resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authentication type.  
               The valid values are as follows:
               + **APP**
               + **IAM**
               + **NONE**
        :param pulumi.Input[Union['DataserviceApiBackendConfigArgs', 'DataserviceApiBackendConfigArgsDict']] backend_config: Specifies the configuration of the API backend.  
               The backend_config structure is documented below.
               
               <a name="dataservice_api_datasource_config"></a>
               The `datasource_config` block supports:
        :param pulumi.Input[_builtins.str] catalog_id: Specifies the ID of the catalog where the API is located.
        :param pulumi.Input[_builtins.str] create_user: The creator name.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the API, in RFC3339 format.
        :param pulumi.Input[Union['DataserviceApiDatasourceConfigArgs', 'DataserviceApiDatasourceConfigArgsDict']] datasource_config: Specifies the configuration of the API data source.  
               The datasource_config structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant parameter.
        :param pulumi.Input[_builtins.str] dlm_type: Specifies the type of DLM engine.  
               The valid values are as follows:
               + **SHARED**: Shared data service.
               + **EXCLUSIVE**: The exclusive data service.
               
               Defaults to **SHARED**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] group_id: The ID of the group to which the API belongs, for shared type.
        :param pulumi.Input[_builtins.str] host: Specifies the backend host.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DataserviceApiHostArgs', 'DataserviceApiHostArgsDict']]]] hosts: The API host configuration, for exclusive type.  
               The hosts structure is documented below.
        :param pulumi.Input[_builtins.str] manager: Specifies the API reviewer.
               
               > Make sure the reviewer is already created in the data source reviewers management before the resource creation.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the constant parameter.
        :param pulumi.Input[_builtins.str] path: Specifies the backend path.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol of the backend request.  
               The valid values are as follows:
               + **PROTOCOL_TYPE_HTTP**
               + **PROTOCOL_TYPE_HTTPS**
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DataserviceApiRequestParamArgs', 'DataserviceApiRequestParamArgsDict']]]] request_params: Specifies the parameters of the API request.  
               The request_params structure is documented below.
        :param pulumi.Input[_builtins.str] request_type: Specifies the request type of the API.  
               The valid values are as follows:
               + **REQUEST_TYPE_POST**
               + **REQUEST_TYPE_GET**
        :param pulumi.Input[_builtins.str] status: The API status, for shared type.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the API, in RFC3339 format.
        :param pulumi.Input[_builtins.str] visibility: Specifies the visibility to the catalog of API.  
               The valid values are as follows:
               + **WORKSPACE**
               + **PROJECT**
               + **DOMAIN**
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of workspace where the API is located.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataserviceApiState.__new__(_DataserviceApiState)

        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["backend_config"] = backend_config
        __props__.__dict__["catalog_id"] = catalog_id
        __props__.__dict__["create_user"] = create_user
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["datasource_config"] = datasource_config
        __props__.__dict__["description"] = description
        __props__.__dict__["dlm_type"] = dlm_type
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["host"] = host
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["manager"] = manager
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["region"] = region
        __props__.__dict__["request_params"] = request_params
        __props__.__dict__["request_type"] = request_type
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["visibility"] = visibility
        __props__.__dict__["workspace_id"] = workspace_id
        return DataserviceApi(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the authentication type.  
        The valid values are as follows:
        + **APP**
        + **IAM**
        + **NONE**
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="backendConfig")
    def backend_config(self) -> pulumi.Output['outputs.DataserviceApiBackendConfig']:
        """
        Specifies the configuration of the API backend.  
        The backend_config structure is documented below.

        <a name="dataservice_api_datasource_config"></a>
        The `datasource_config` block supports:
        """
        return pulumi.get(self, "backend_config")

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the catalog where the API is located.
        """
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="createUser")
    def create_user(self) -> pulumi.Output[_builtins.str]:
        """
        The creator name.
        """
        return pulumi.get(self, "create_user")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="datasourceConfig")
    def datasource_config(self) -> pulumi.Output['outputs.DataserviceApiDatasourceConfig']:
        """
        Specifies the configuration of the API data source.  
        The datasource_config structure is documented below.
        """
        return pulumi.get(self, "datasource_config")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the constant parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dlmType")
    def dlm_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of DLM engine.  
        The valid values are as follows:
        + **SHARED**: Shared data service.
        + **EXCLUSIVE**: The exclusive data service.

        Defaults to **SHARED**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "dlm_type")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the group to which the API belongs, for shared type.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the backend host.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence['outputs.DataserviceApiHost']]:
        """
        The API host configuration, for exclusive type.  
        The hosts structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def manager(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the API reviewer.

        > Make sure the reviewer is already created in the data source reviewers management before the resource creation.
        """
        return pulumi.get(self, "manager")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the backend path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the protocol of the backend request.  
        The valid values are as follows:
        + **PROTOCOL_TYPE_HTTP**
        + **PROTOCOL_TYPE_HTTPS**
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="requestParams")
    def request_params(self) -> pulumi.Output[Optional[Sequence['outputs.DataserviceApiRequestParam']]]:
        """
        Specifies the parameters of the API request.  
        The request_params structure is documented below.
        """
        return pulumi.get(self, "request_params")

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the request type of the API.  
        The valid values are as follows:
        + **REQUEST_TYPE_POST**
        + **REQUEST_TYPE_GET**
        """
        return pulumi.get(self, "request_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The API status, for shared type.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the visibility to the catalog of API.  
        The valid values are as follows:
        + **WORKSPACE**
        + **PROJECT**
        + **DOMAIN**
        """
        return pulumi.get(self, "visibility")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of workspace where the API is located.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

