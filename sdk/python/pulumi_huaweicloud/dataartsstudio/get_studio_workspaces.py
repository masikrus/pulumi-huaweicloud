# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetStudioWorkspacesResult',
    'AwaitableGetStudioWorkspacesResult',
    'get_studio_workspaces',
    'get_studio_workspaces_output',
]

@pulumi.output_type
class GetStudioWorkspacesResult:
    """
    A collection of values returned by getStudioWorkspaces.
    """
    def __init__(__self__, created_by=None, enterprise_project_id=None, id=None, instance_id=None, name=None, region=None, workspace_id=None, workspaces=None):
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)
        if workspaces and not isinstance(workspaces, list):
            raise TypeError("Expected argument 'workspaces' to be a list")
        pulumi.set(__self__, "workspaces", workspaces)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The user creating the workspace.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID of workspace.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The workspace name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "workspace_id")

    @_builtins.property
    @pulumi.getter
    def workspaces(self) -> Sequence['outputs.GetStudioWorkspacesWorkspaceResult']:
        """
        The filtered workspaces.The workspaces structure is documented below.
        """
        return pulumi.get(self, "workspaces")


class AwaitableGetStudioWorkspacesResult(GetStudioWorkspacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStudioWorkspacesResult(
            created_by=self.created_by,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            workspace_id=self.workspace_id,
            workspaces=self.workspaces)


def get_studio_workspaces(created_by: Optional[_builtins.str] = None,
                          enterprise_project_id: Optional[_builtins.str] = None,
                          instance_id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          workspace_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStudioWorkspacesResult:
    """
    Use this data source to get a list of DataArts Studio workspaces within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    all = huaweicloud.DataArtsStudio.get_studio_workspaces(instance_id=instance_id)
    ```


    :param _builtins.str created_by: Specifies the user creating workspaces used to filter results.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID used to filter results.
    :param _builtins.str instance_id: Specifies the ID of the instance which the workspaces in.
    :param _builtins.str name: Specifies the workspace name used to filter results.
    :param _builtins.str region: Specifies the region in which to obtain the workspaces.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID used to filter results.
    """
    __args__ = dict()
    __args__['createdBy'] = created_by
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DataArtsStudio/getStudioWorkspaces:getStudioWorkspaces', __args__, opts=opts, typ=GetStudioWorkspacesResult).value

    return AwaitableGetStudioWorkspacesResult(
        created_by=pulumi.get(__ret__, 'created_by'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'),
        workspaces=pulumi.get(__ret__, 'workspaces'))
def get_studio_workspaces_output(created_by: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 workspace_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStudioWorkspacesResult]:
    """
    Use this data source to get a list of DataArts Studio workspaces within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    all = huaweicloud.DataArtsStudio.get_studio_workspaces(instance_id=instance_id)
    ```


    :param _builtins.str created_by: Specifies the user creating workspaces used to filter results.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID used to filter results.
    :param _builtins.str instance_id: Specifies the ID of the instance which the workspaces in.
    :param _builtins.str name: Specifies the workspace name used to filter results.
    :param _builtins.str region: Specifies the region in which to obtain the workspaces.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID used to filter results.
    """
    __args__ = dict()
    __args__['createdBy'] = created_by
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DataArtsStudio/getStudioWorkspaces:getStudioWorkspaces', __args__, opts=opts, typ=GetStudioWorkspacesResult)
    return __ret__.apply(lambda __response__: GetStudioWorkspacesResult(
        created_by=pulumi.get(__response__, 'created_by'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        workspace_id=pulumi.get(__response__, 'workspace_id'),
        workspaces=pulumi.get(__response__, 'workspaces')))
