# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetFactoryJobsResult',
    'AwaitableGetFactoryJobsResult',
    'get_factory_jobs',
    'get_factory_jobs_output',
]

@pulumi.output_type
class GetFactoryJobsResult:
    """
    A collection of values returned by getFactoryJobs.
    """
    def __init__(__self__, id=None, jobs=None, name=None, process_type=None, region=None, workspace_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if jobs and not isinstance(jobs, list):
            raise TypeError("Expected argument 'jobs' to be a list")
        pulumi.set(__self__, "jobs", jobs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if process_type and not isinstance(process_type, str):
            raise TypeError("Expected argument 'process_type' to be a str")
        pulumi.set(__self__, "process_type", process_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence['outputs.GetFactoryJobsJobResult']:
        """
        All jobs that match the filter parameters.
        The jobs structure is documented below.
        """
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the job.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="processType")
    def process_type(self) -> Optional[_builtins.str]:
        """
        The type of the job.
        """
        return pulumi.get(self, "process_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "workspace_id")


class AwaitableGetFactoryJobsResult(GetFactoryJobsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFactoryJobsResult(
            id=self.id,
            jobs=self.jobs,
            name=self.name,
            process_type=self.process_type,
            region=self.region,
            workspace_id=self.workspace_id)


def get_factory_jobs(name: Optional[_builtins.str] = None,
                     process_type: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     workspace_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFactoryJobsResult:
    """
    Use this data source to get the list of the Factory jobs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.DataArtsStudio.get_factory_jobs(workspace_id=workspace_id)
    ```


    :param _builtins.str name: Specified the job name to be queried. Fuzzy search is supported.
    :param _builtins.str process_type: Specified the job type to be queried.
           If omitted, the default value is **BATCH**.
           The valid values are as follows:
           + **REAL_TIME**: Real-time processing.
           + **BATCH**: Batch processing.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: The ID of the workspace to which the jobs belong.
           If omitted, default workspace will be used.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['processType'] = process_type
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DataArtsStudio/getFactoryJobs:getFactoryJobs', __args__, opts=opts, typ=GetFactoryJobsResult).value

    return AwaitableGetFactoryJobsResult(
        id=pulumi.get(__ret__, 'id'),
        jobs=pulumi.get(__ret__, 'jobs'),
        name=pulumi.get(__ret__, 'name'),
        process_type=pulumi.get(__ret__, 'process_type'),
        region=pulumi.get(__ret__, 'region'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_factory_jobs_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            process_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            workspace_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFactoryJobsResult]:
    """
    Use this data source to get the list of the Factory jobs within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.DataArtsStudio.get_factory_jobs(workspace_id=workspace_id)
    ```


    :param _builtins.str name: Specified the job name to be queried. Fuzzy search is supported.
    :param _builtins.str process_type: Specified the job type to be queried.
           If omitted, the default value is **BATCH**.
           The valid values are as follows:
           + **REAL_TIME**: Real-time processing.
           + **BATCH**: Batch processing.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: The ID of the workspace to which the jobs belong.
           If omitted, default workspace will be used.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['processType'] = process_type
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DataArtsStudio/getFactoryJobs:getFactoryJobs', __args__, opts=opts, typ=GetFactoryJobsResult)
    return __ret__.apply(lambda __response__: GetFactoryJobsResult(
        id=pulumi.get(__response__, 'id'),
        jobs=pulumi.get(__response__, 'jobs'),
        name=pulumi.get(__response__, 'name'),
        process_type=pulumi.get(__response__, 'process_type'),
        region=pulumi.get(__response__, 'region'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
