# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataserviceApiPublishmentArgs', 'DataserviceApiPublishment']

@pulumi.input_type
class DataserviceApiPublishmentArgs:
    def __init__(__self__, *,
                 api_id: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 apig_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roma_app_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataserviceApiPublishment resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the API to be published.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID to which the published API belongs in
               Data Service side.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_group_id: Specifies the APIG group ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_instance_id: Specifies the APIG instance ID to which the API is published
               simultaneously in APIG service.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_type: Specifies the type of the APIG object.  
               The valid values are as follows:
               + **APIG**
               + **APIGW**
               + **ROMA_APIC**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the published API is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] roma_app_id: Specifies the application ID for ROMA APIC.  
               Changing this parameter will create a new resource.
               
               > If `apig_type` and other optional parameters are omitted, the API will only be published on Data Service side.
        """
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if apig_group_id is not None:
            pulumi.set(__self__, "apig_group_id", apig_group_id)
        if apig_instance_id is not None:
            pulumi.set(__self__, "apig_instance_id", apig_instance_id)
        if apig_type is not None:
            pulumi.set(__self__, "apig_type", apig_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if roma_app_id is not None:
            pulumi.set(__self__, "roma_app_id", roma_app_id)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the API to be published.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the exclusive cluster ID to which the published API belongs in
        Data Service side.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID to which the published API belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="apigGroupId")
    def apig_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the APIG group ID to which the published API belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "apig_group_id")

    @apig_group_id.setter
    def apig_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apig_group_id", value)

    @_builtins.property
    @pulumi.getter(name="apigInstanceId")
    def apig_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the APIG instance ID to which the API is published
        simultaneously in APIG service.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "apig_instance_id")

    @apig_instance_id.setter
    def apig_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apig_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="apigType")
    def apig_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the APIG object.  
        The valid values are as follows:
        + **APIG**
        + **APIGW**
        + **ROMA_APIC**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "apig_type")

    @apig_type.setter
    def apig_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apig_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the published API is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="romaAppId")
    def roma_app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application ID for ROMA APIC.  
        Changing this parameter will create a new resource.

        > If `apig_type` and other optional parameters are omitted, the API will only be published on Data Service side.
        """
        return pulumi.get(self, "roma_app_id")

    @roma_app_id.setter
    def roma_app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "roma_app_id", value)


@pulumi.input_type
class _DataserviceApiPublishmentState:
    def __init__(__self__, *,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 publish_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roma_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataserviceApiPublishment resources.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the API to be published.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_group_id: Specifies the APIG group ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_instance_id: Specifies the APIG instance ID to which the API is published
               simultaneously in APIG service.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_type: Specifies the type of the APIG object.  
               The valid values are as follows:
               + **APIG**
               + **APIGW**
               + **ROMA_APIC**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID to which the published API belongs in
               Data Service side.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] publish_id: The publish ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the published API is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] roma_app_id: Specifies the application ID for ROMA APIC.  
               Changing this parameter will create a new resource.
               
               > If `apig_type` and other optional parameters are omitted, the API will only be published on Data Service side.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        """
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if apig_group_id is not None:
            pulumi.set(__self__, "apig_group_id", apig_group_id)
        if apig_instance_id is not None:
            pulumi.set(__self__, "apig_instance_id", apig_instance_id)
        if apig_type is not None:
            pulumi.set(__self__, "apig_type", apig_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if publish_id is not None:
            pulumi.set(__self__, "publish_id", publish_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if roma_app_id is not None:
            pulumi.set(__self__, "roma_app_id", roma_app_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the API to be published.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="apigGroupId")
    def apig_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the APIG group ID to which the published API belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "apig_group_id")

    @apig_group_id.setter
    def apig_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apig_group_id", value)

    @_builtins.property
    @pulumi.getter(name="apigInstanceId")
    def apig_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the APIG instance ID to which the API is published
        simultaneously in APIG service.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "apig_instance_id")

    @apig_instance_id.setter
    def apig_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apig_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="apigType")
    def apig_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the APIG object.  
        The valid values are as follows:
        + **APIG**
        + **APIGW**
        + **ROMA_APIC**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "apig_type")

    @apig_type.setter
    def apig_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apig_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the exclusive cluster ID to which the published API belongs in
        Data Service side.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="publishId")
    def publish_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The publish ID.
        """
        return pulumi.get(self, "publish_id")

    @publish_id.setter
    def publish_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publish_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the published API is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="romaAppId")
    def roma_app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application ID for ROMA APIC.  
        Changing this parameter will create a new resource.

        > If `apig_type` and other optional parameters are omitted, the API will only be published on Data Service side.
        """
        return pulumi.get(self, "roma_app_id")

    @roma_app_id.setter
    def roma_app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "roma_app_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID to which the published API belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/dataserviceApiPublishment:DataserviceApiPublishment")
class DataserviceApiPublishment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roma_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to manage the API pulishing for DataArts Data Service within HuaweiCloud.

        > 1. The API must be debugged before it is published.
        >       <br>2. Deleting this resource will unpublish the API (on Data Service side if you specifies the APIG type).
        >       <br>3. Before using this resource, please make sure that the current user has the approver permission.
        >       <br>4. Please make sure that the network of the cluster and the target APIG instance (if used) are consistent.
        >       <br>5. After the resource is deleted, 2 days will be reserved for deauthorizing the application and processing all
        >       messages. If all actions have been completed during execution, it will be unpublish immediately.

        ## Example Usage

        ### Publish the API on Data Service side

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        publish_api_id = config.require_object("publishApiId")
        exclusive_cluster_id = config.require_object("exclusiveClusterId")
        test = huaweicloud.dataartsstudio.DataserviceApiPublishment("test",
            workspace_id=workspace_id,
            api_id=publish_api_id,
            instance_id=exclusive_cluster_id)
        ```

        ### Publish the API both on Data Service and APIG sides

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        publish_api_id = config.require_object("publishApiId")
        exclusive_cluster_id = config.require_object("exclusiveClusterId")
        apig_instance_id = config.require_object("apigInstanceId")
        apig_group_id = config.require_object("apigGroupId")
        test = huaweicloud.dataartsstudio.DataserviceApiPublishment("test",
            workspace_id=workspace_id,
            api_id=publish_api_id,
            instance_id=exclusive_cluster_id,
            apig_type="APIG",
            apig_instance_id=apig_instance_id,
            apig_group_id=apig_group_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the API to be published.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_group_id: Specifies the APIG group ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_instance_id: Specifies the APIG instance ID to which the API is published
               simultaneously in APIG service.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_type: Specifies the type of the APIG object.  
               The valid values are as follows:
               + **APIG**
               + **APIGW**
               + **ROMA_APIC**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID to which the published API belongs in
               Data Service side.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the published API is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] roma_app_id: Specifies the application ID for ROMA APIC.  
               Changing this parameter will create a new resource.
               
               > If `apig_type` and other optional parameters are omitted, the API will only be published on Data Service side.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataserviceApiPublishmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to manage the API pulishing for DataArts Data Service within HuaweiCloud.

        > 1. The API must be debugged before it is published.
        >       <br>2. Deleting this resource will unpublish the API (on Data Service side if you specifies the APIG type).
        >       <br>3. Before using this resource, please make sure that the current user has the approver permission.
        >       <br>4. Please make sure that the network of the cluster and the target APIG instance (if used) are consistent.
        >       <br>5. After the resource is deleted, 2 days will be reserved for deauthorizing the application and processing all
        >       messages. If all actions have been completed during execution, it will be unpublish immediately.

        ## Example Usage

        ### Publish the API on Data Service side

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        publish_api_id = config.require_object("publishApiId")
        exclusive_cluster_id = config.require_object("exclusiveClusterId")
        test = huaweicloud.dataartsstudio.DataserviceApiPublishment("test",
            workspace_id=workspace_id,
            api_id=publish_api_id,
            instance_id=exclusive_cluster_id)
        ```

        ### Publish the API both on Data Service and APIG sides

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        publish_api_id = config.require_object("publishApiId")
        exclusive_cluster_id = config.require_object("exclusiveClusterId")
        apig_instance_id = config.require_object("apigInstanceId")
        apig_group_id = config.require_object("apigGroupId")
        test = huaweicloud.dataartsstudio.DataserviceApiPublishment("test",
            workspace_id=workspace_id,
            api_id=publish_api_id,
            instance_id=exclusive_cluster_id,
            apig_type="APIG",
            apig_instance_id=apig_instance_id,
            apig_group_id=apig_group_id)
        ```

        :param str resource_name: The name of the resource.
        :param DataserviceApiPublishmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataserviceApiPublishmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apig_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 roma_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataserviceApiPublishmentArgs.__new__(DataserviceApiPublishmentArgs)

            if api_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_id'")
            __props__.__dict__["api_id"] = api_id
            __props__.__dict__["apig_group_id"] = apig_group_id
            __props__.__dict__["apig_instance_id"] = apig_instance_id
            __props__.__dict__["apig_type"] = apig_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["roma_app_id"] = roma_app_id
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["publish_id"] = None
        super(DataserviceApiPublishment, __self__).__init__(
            'huaweicloud:DataArtsStudio/dataserviceApiPublishment:DataserviceApiPublishment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_id: Optional[pulumi.Input[_builtins.str]] = None,
            apig_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            apig_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            apig_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            publish_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            roma_app_id: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataserviceApiPublishment':
        """
        Get an existing DataserviceApiPublishment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the API to be published.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_group_id: Specifies the APIG group ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_instance_id: Specifies the APIG instance ID to which the API is published
               simultaneously in APIG service.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apig_type: Specifies the type of the APIG object.  
               The valid values are as follows:
               + **APIG**
               + **APIGW**
               + **ROMA_APIC**
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID to which the published API belongs in
               Data Service side.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] publish_id: The publish ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the published API is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] roma_app_id: Specifies the application ID for ROMA APIC.  
               Changing this parameter will create a new resource.
               
               > If `apig_type` and other optional parameters are omitted, the API will only be published on Data Service side.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataserviceApiPublishmentState.__new__(_DataserviceApiPublishmentState)

        __props__.__dict__["api_id"] = api_id
        __props__.__dict__["apig_group_id"] = apig_group_id
        __props__.__dict__["apig_instance_id"] = apig_instance_id
        __props__.__dict__["apig_type"] = apig_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["publish_id"] = publish_id
        __props__.__dict__["region"] = region
        __props__.__dict__["roma_app_id"] = roma_app_id
        __props__.__dict__["workspace_id"] = workspace_id
        return DataserviceApiPublishment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the API to be published.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="apigGroupId")
    def apig_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the APIG group ID to which the published API belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "apig_group_id")

    @_builtins.property
    @pulumi.getter(name="apigInstanceId")
    def apig_instance_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the APIG instance ID to which the API is published
        simultaneously in APIG service.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "apig_instance_id")

    @_builtins.property
    @pulumi.getter(name="apigType")
    def apig_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of the APIG object.  
        The valid values are as follows:
        + **APIG**
        + **APIGW**
        + **ROMA_APIC**

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "apig_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the exclusive cluster ID to which the published API belongs in
        Data Service side.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="publishId")
    def publish_id(self) -> pulumi.Output[_builtins.str]:
        """
        The publish ID.
        """
        return pulumi.get(self, "publish_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the published API is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="romaAppId")
    def roma_app_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the application ID for ROMA APIC.  
        Changing this parameter will create a new resource.

        > If `apig_type` and other optional parameters are omitted, the API will only be published on Data Service side.
        """
        return pulumi.get(self, "roma_app_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID to which the published API belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

