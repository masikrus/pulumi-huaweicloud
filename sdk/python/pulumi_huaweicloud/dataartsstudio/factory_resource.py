# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FactoryResourceArgs', 'FactoryResource']

@pulumi.input_type
class FactoryResourceArgs:
    def __init__(__self__, *,
                 directory: pulumi.Input[_builtins.str],
                 location: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 depend_packages: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryResourceDependPackageArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a FactoryResource resource.
        :param pulumi.Input[_builtins.str] directory: Specifies the directory where the resource is located.
        :param pulumi.Input[_builtins.str] location: Specifies the path of the dependent file. Currently, only OBS paths is
               supported.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the dependent file. The valid values are **file**,
               **jar** and **pyFile**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the resource in.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['FactoryResourceDependPackageArgs']]] depend_packages: Specifies an array of dependent files.
               The depend_packages structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the resource description.
               
               <a name="DataArts_Factory_Resource_Depend_Packages"></a>
               The `depend_packages` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the resource name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "directory", directory)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if depend_packages is not None:
            pulumi.set(__self__, "depend_packages", depend_packages)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def directory(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the directory where the resource is located.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "directory", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the path of the dependent file. Currently, only OBS paths is
        supported.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the dependent file. The valid values are **file**,
        **jar** and **pyFile**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID which the resource in.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="dependPackages")
    def depend_packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FactoryResourceDependPackageArgs']]]]:
        """
        Specifies an array of dependent files.
        The depend_packages structure is documented below.
        """
        return pulumi.get(self, "depend_packages")

    @depend_packages.setter
    def depend_packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryResourceDependPackageArgs']]]]):
        pulumi.set(self, "depend_packages", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource description.

        <a name="DataArts_Factory_Resource_Depend_Packages"></a>
        The `depend_packages` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _FactoryResourceState:
    def __init__(__self__, *,
                 depend_packages: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryResourceDependPackageArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering FactoryResource resources.
        :param pulumi.Input[Sequence[pulumi.Input['FactoryResourceDependPackageArgs']]] depend_packages: Specifies an array of dependent files.
               The depend_packages structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the resource description.
               
               <a name="DataArts_Factory_Resource_Depend_Packages"></a>
               The `depend_packages` block supports:
        :param pulumi.Input[_builtins.str] directory: Specifies the directory where the resource is located.
        :param pulumi.Input[_builtins.str] location: Specifies the path of the dependent file. Currently, only OBS paths is
               supported.
        :param pulumi.Input[_builtins.str] name: Specifies the resource name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the dependent file. The valid values are **file**,
               **jar** and **pyFile**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the resource in.
               Changing this creates a new resource.
        """
        if depend_packages is not None:
            pulumi.set(__self__, "depend_packages", depend_packages)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="dependPackages")
    def depend_packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FactoryResourceDependPackageArgs']]]]:
        """
        Specifies an array of dependent files.
        The depend_packages structure is documented below.
        """
        return pulumi.get(self, "depend_packages")

    @depend_packages.setter
    def depend_packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryResourceDependPackageArgs']]]]):
        pulumi.set(self, "depend_packages", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource description.

        <a name="DataArts_Factory_Resource_Depend_Packages"></a>
        The `depend_packages` block supports:
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the directory where the resource is located.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "directory", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path of the dependent file. Currently, only OBS paths is
        supported.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the dependent file. The valid values are **file**,
        **jar** and **pyFile**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID which the resource in.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/factoryResource:FactoryResource")
class FactoryResource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 depend_packages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryResourceDependPackageArgs', 'FactoryResourceDependPackageArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages DataArts Factory resource within HuaweiCloud.

        ## Example Usage

        ### Create a resource with OBS path

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        directory = config.require_object("directory")
        test = huaweicloud.dataartsstudio.FactoryResource("test",
            workspace_id=workspace_id,
            name=name,
            type="jar",
            location="obs://test/main.jar",
            directory=directory)
        ```

        ### Create a resource with HDFS path

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        directory = config.require_object("directory")
        test = huaweicloud.dataartsstudio.FactoryResource("test",
            workspace_id=workspace_id,
            name=name,
            type="jar",
            location="hdfs://test/main.jar",
            directory=directory)
        ```

        ## Import

        DataArts Factory resource can be imported using `<workspace_id>/<id>`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/factoryResource:FactoryResource test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FactoryResourceDependPackageArgs', 'FactoryResourceDependPackageArgsDict']]]] depend_packages: Specifies an array of dependent files.
               The depend_packages structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the resource description.
               
               <a name="DataArts_Factory_Resource_Depend_Packages"></a>
               The `depend_packages` block supports:
        :param pulumi.Input[_builtins.str] directory: Specifies the directory where the resource is located.
        :param pulumi.Input[_builtins.str] location: Specifies the path of the dependent file. Currently, only OBS paths is
               supported.
        :param pulumi.Input[_builtins.str] name: Specifies the resource name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the dependent file. The valid values are **file**,
               **jar** and **pyFile**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the resource in.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FactoryResourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages DataArts Factory resource within HuaweiCloud.

        ## Example Usage

        ### Create a resource with OBS path

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        directory = config.require_object("directory")
        test = huaweicloud.dataartsstudio.FactoryResource("test",
            workspace_id=workspace_id,
            name=name,
            type="jar",
            location="obs://test/main.jar",
            directory=directory)
        ```

        ### Create a resource with HDFS path

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        directory = config.require_object("directory")
        test = huaweicloud.dataartsstudio.FactoryResource("test",
            workspace_id=workspace_id,
            name=name,
            type="jar",
            location="hdfs://test/main.jar",
            directory=directory)
        ```

        ## Import

        DataArts Factory resource can be imported using `<workspace_id>/<id>`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/factoryResource:FactoryResource test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param FactoryResourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FactoryResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 depend_packages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryResourceDependPackageArgs', 'FactoryResourceDependPackageArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FactoryResourceArgs.__new__(FactoryResourceArgs)

            __props__.__dict__["depend_packages"] = depend_packages
            __props__.__dict__["description"] = description
            if directory is None and not opts.urn:
                raise TypeError("Missing required property 'directory'")
            __props__.__dict__["directory"] = directory
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
        super(FactoryResource, __self__).__init__(
            'huaweicloud:DataArtsStudio/factoryResource:FactoryResource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            depend_packages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryResourceDependPackageArgs', 'FactoryResourceDependPackageArgsDict']]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            directory: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'FactoryResource':
        """
        Get an existing FactoryResource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FactoryResourceDependPackageArgs', 'FactoryResourceDependPackageArgsDict']]]] depend_packages: Specifies an array of dependent files.
               The depend_packages structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the resource description.
               
               <a name="DataArts_Factory_Resource_Depend_Packages"></a>
               The `depend_packages` block supports:
        :param pulumi.Input[_builtins.str] directory: Specifies the directory where the resource is located.
        :param pulumi.Input[_builtins.str] location: Specifies the path of the dependent file. Currently, only OBS paths is
               supported.
        :param pulumi.Input[_builtins.str] name: Specifies the resource name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the dependent file. The valid values are **file**,
               **jar** and **pyFile**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the resource in.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FactoryResourceState.__new__(_FactoryResourceState)

        __props__.__dict__["depend_packages"] = depend_packages
        __props__.__dict__["description"] = description
        __props__.__dict__["directory"] = directory
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["workspace_id"] = workspace_id
        return FactoryResource(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dependPackages")
    def depend_packages(self) -> pulumi.Output[Optional[Sequence['outputs.FactoryResourceDependPackage']]]:
        """
        Specifies an array of dependent files.
        The depend_packages structure is documented below.
        """
        return pulumi.get(self, "depend_packages")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the resource description.

        <a name="DataArts_Factory_Resource_Depend_Packages"></a>
        The `depend_packages` block supports:
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def directory(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the directory where the resource is located.
        """
        return pulumi.get(self, "directory")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the path of the dependent file. Currently, only OBS paths is
        supported.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the dependent file. The valid values are **file**,
        **jar** and **pyFile**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID which the resource in.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "workspace_id")

