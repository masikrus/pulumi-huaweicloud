# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['FactoryJobActionArgs', 'FactoryJobAction']

@pulumi.input_type
class FactoryJobActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 job_name: pulumi.Input[_builtins.str],
                 process_type: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a FactoryJobAction resource.
        :param pulumi.Input[_builtins.str] action: Specified the action type of the job.  
               The valid values are as follows:
               + **start**
               + **stop**
        :param pulumi.Input[_builtins.str] job_name: Specified the name of the job.
               Changing this creates a new resource.
               The name contains a maximum of  `128` characters, including only letters, numbers, hyphens (-),
               underscores (_), and periods (.).
        :param pulumi.Input[_builtins.str] process_type: Specified the type of the job.
               Changing this creates a new resource.
               The valid values are as follows:
               + **REAL_TIME**: Real-time processing.
               + **BATCH**: Batch processing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specified the ID of the workspace to which the job belongs.
               Changing this creates a new resource.
               If this parameter is not set, the default workspace is used by default.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "job_name", job_name)
        pulumi.set(__self__, "process_type", process_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Specified the action type of the job.  
        The valid values are as follows:
        + **start**
        + **stop**
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specified the name of the job.
        Changing this creates a new resource.
        The name contains a maximum of  `128` characters, including only letters, numbers, hyphens (-),
        underscores (_), and periods (.).
        """
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "job_name", value)

    @_builtins.property
    @pulumi.getter(name="processType")
    def process_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specified the type of the job.
        Changing this creates a new resource.
        The valid values are as follows:
        + **REAL_TIME**: Real-time processing.
        + **BATCH**: Batch processing.
        """
        return pulumi.get(self, "process_type")

    @process_type.setter
    def process_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "process_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specified the ID of the workspace to which the job belongs.
        Changing this creates a new resource.
        If this parameter is not set, the default workspace is used by default.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _FactoryJobActionState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 job_name: Optional[pulumi.Input[_builtins.str]] = None,
                 process_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering FactoryJobAction resources.
        :param pulumi.Input[_builtins.str] action: Specified the action type of the job.  
               The valid values are as follows:
               + **start**
               + **stop**
        :param pulumi.Input[_builtins.str] job_name: Specified the name of the job.
               Changing this creates a new resource.
               The name contains a maximum of  `128` characters, including only letters, numbers, hyphens (-),
               underscores (_), and periods (.).
        :param pulumi.Input[_builtins.str] process_type: Specified the type of the job.
               Changing this creates a new resource.
               The valid values are as follows:
               + **REAL_TIME**: Real-time processing.
               + **BATCH**: Batch processing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: The current status of the job.
               + **NORMAL**
               + **STOPPED**
               + **SCHEDULING**
               + **PAUSED**
               + **EXCEPTION**
        :param pulumi.Input[_builtins.str] workspace_id: Specified the ID of the workspace to which the job belongs.
               Changing this creates a new resource.
               If this parameter is not set, the default workspace is used by default.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if job_name is not None:
            pulumi.set(__self__, "job_name", job_name)
        if process_type is not None:
            pulumi.set(__self__, "process_type", process_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specified the action type of the job.  
        The valid values are as follows:
        + **start**
        + **stop**
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specified the name of the job.
        Changing this creates a new resource.
        The name contains a maximum of  `128` characters, including only letters, numbers, hyphens (-),
        underscores (_), and periods (.).
        """
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_name", value)

    @_builtins.property
    @pulumi.getter(name="processType")
    def process_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specified the type of the job.
        Changing this creates a new resource.
        The valid values are as follows:
        + **REAL_TIME**: Real-time processing.
        + **BATCH**: Batch processing.
        """
        return pulumi.get(self, "process_type")

    @process_type.setter
    def process_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "process_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the job.
        + **NORMAL**
        + **STOPPED**
        + **SCHEDULING**
        + **PAUSED**
        + **EXCEPTION**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specified the ID of the workspace to which the job belongs.
        Changing this creates a new resource.
        If this parameter is not set, the default workspace is used by default.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/factoryJobAction:FactoryJobAction")
class FactoryJobAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 job_name: Optional[pulumi.Input[_builtins.str]] = None,
                 process_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a job action resource of DataArts Factory within HuaweiCloud.

        > Destroying resources does not change the current action status of the job.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        job_name = config.require_object("jobName")
        test = huaweicloud.dataartsstudio.FactoryJobAction("test",
            workspace_id=workspace_id,
            action="start",
            job_name=job_name,
            process_type="BATCH")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specified the action type of the job.  
               The valid values are as follows:
               + **start**
               + **stop**
        :param pulumi.Input[_builtins.str] job_name: Specified the name of the job.
               Changing this creates a new resource.
               The name contains a maximum of  `128` characters, including only letters, numbers, hyphens (-),
               underscores (_), and periods (.).
        :param pulumi.Input[_builtins.str] process_type: Specified the type of the job.
               Changing this creates a new resource.
               The valid values are as follows:
               + **REAL_TIME**: Real-time processing.
               + **BATCH**: Batch processing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specified the ID of the workspace to which the job belongs.
               Changing this creates a new resource.
               If this parameter is not set, the default workspace is used by default.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FactoryJobActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a job action resource of DataArts Factory within HuaweiCloud.

        > Destroying resources does not change the current action status of the job.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        job_name = config.require_object("jobName")
        test = huaweicloud.dataartsstudio.FactoryJobAction("test",
            workspace_id=workspace_id,
            action="start",
            job_name=job_name,
            process_type="BATCH")
        ```

        :param str resource_name: The name of the resource.
        :param FactoryJobActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FactoryJobActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 job_name: Optional[pulumi.Input[_builtins.str]] = None,
                 process_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FactoryJobActionArgs.__new__(FactoryJobActionArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            if job_name is None and not opts.urn:
                raise TypeError("Missing required property 'job_name'")
            __props__.__dict__["job_name"] = job_name
            if process_type is None and not opts.urn:
                raise TypeError("Missing required property 'process_type'")
            __props__.__dict__["process_type"] = process_type
            __props__.__dict__["region"] = region
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["status"] = None
        super(FactoryJobAction, __self__).__init__(
            'huaweicloud:DataArtsStudio/factoryJobAction:FactoryJobAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            job_name: Optional[pulumi.Input[_builtins.str]] = None,
            process_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'FactoryJobAction':
        """
        Get an existing FactoryJobAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specified the action type of the job.  
               The valid values are as follows:
               + **start**
               + **stop**
        :param pulumi.Input[_builtins.str] job_name: Specified the name of the job.
               Changing this creates a new resource.
               The name contains a maximum of  `128` characters, including only letters, numbers, hyphens (-),
               underscores (_), and periods (.).
        :param pulumi.Input[_builtins.str] process_type: Specified the type of the job.
               Changing this creates a new resource.
               The valid values are as follows:
               + **REAL_TIME**: Real-time processing.
               + **BATCH**: Batch processing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] status: The current status of the job.
               + **NORMAL**
               + **STOPPED**
               + **SCHEDULING**
               + **PAUSED**
               + **EXCEPTION**
        :param pulumi.Input[_builtins.str] workspace_id: Specified the ID of the workspace to which the job belongs.
               Changing this creates a new resource.
               If this parameter is not set, the default workspace is used by default.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FactoryJobActionState.__new__(_FactoryJobActionState)

        __props__.__dict__["action"] = action
        __props__.__dict__["job_name"] = job_name
        __props__.__dict__["process_type"] = process_type
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["workspace_id"] = workspace_id
        return FactoryJobAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specified the action type of the job.  
        The valid values are as follows:
        + **start**
        + **stop**
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specified the name of the job.
        Changing this creates a new resource.
        The name contains a maximum of  `128` characters, including only letters, numbers, hyphens (-),
        underscores (_), and periods (.).
        """
        return pulumi.get(self, "job_name")

    @_builtins.property
    @pulumi.getter(name="processType")
    def process_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specified the type of the job.
        Changing this creates a new resource.
        The valid values are as follows:
        + **REAL_TIME**: Real-time processing.
        + **BATCH**: Batch processing.
        """
        return pulumi.get(self, "process_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the job.
        + **NORMAL**
        + **STOPPED**
        + **SCHEDULING**
        + **PAUSED**
        + **EXCEPTION**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specified the ID of the workspace to which the job belongs.
        Changing this creates a new resource.
        If this parameter is not set, the default workspace is used by default.
        """
        return pulumi.get(self, "workspace_id")

