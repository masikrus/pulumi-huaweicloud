# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ArchitectureBatchPublishBizInfo',
    'ArchitectureBatchPublishmentBizInfo',
    'ArchitectureBatchUnpublishBizInfo',
    'ArchitectureCodeTableField',
    'ArchitectureCodeTableValuesValue',
    'ArchitectureDataStandardNewBiz',
    'ArchitectureDataStandardTemplateCustomField',
    'ArchitectureDataStandardTemplateOptionalField',
    'ArchitectureDataStandardValue',
    'ArchitectureTableModelAttribute',
    'ArchitectureTableModelMapping',
    'ArchitectureTableModelMappingSourceField',
    'ArchitectureTableModelMappingSourceTable',
    'ArchitectureTableModelMappingSourceTableJoinField',
    'ArchitectureTableModelRelation',
    'ArchitectureTableModelRelationMapping',
    'DataserviceApiBackendConfig',
    'DataserviceApiBackendConfigBackendParam',
    'DataserviceApiBackendConfigConstantParam',
    'DataserviceApiDatasourceConfig',
    'DataserviceApiDatasourceConfigBackendParam',
    'DataserviceApiDatasourceConfigOrderParam',
    'DataserviceApiDatasourceConfigResponseParam',
    'DataserviceApiHost',
    'DataserviceApiRequestParam',
    'FactoryJobBasicConfig',
    'FactoryJobNode',
    'FactoryJobNodeCondition',
    'FactoryJobNodeCronTrigger',
    'FactoryJobNodeCronTriggerDependJobs',
    'FactoryJobNodeEventTrigger',
    'FactoryJobNodeLocation',
    'FactoryJobNodeProperty',
    'FactoryJobParam',
    'FactoryJobSchedule',
    'FactoryJobScheduleCron',
    'FactoryJobScheduleCronDependJobs',
    'FactoryJobScheduleEvent',
    'FactoryResourceDependPackage',
    'FactoryScriptApprover',
    'GetArchitectureDsTemplateOptionalsOptionalFieldResult',
    'GetArchitectureModelStatisticDmResult',
    'GetArchitectureModelStatisticDmModelResult',
    'GetArchitectureModelStatisticDwrResult',
    'GetArchitectureModelStatisticDwrModelResult',
    'GetArchitectureModelStatisticFrequentResult',
    'GetArchitectureModelStatisticFrequentModelResult',
    'GetArchitectureModelStatisticLogicResult',
    'GetArchitectureModelStatisticLogicModelResult',
    'GetArchitectureModelStatisticPhysicalResult',
    'GetArchitectureModelStatisticPhysicalModelResult',
    'GetArchitectureModelStatisticTopResult',
    'GetArchitectureModelStatisticTopModelResult',
    'GetArchitectureTableModelsTableResult',
    'GetArchitectureTableModelsTableAttributeResult',
    'GetDataserviceApisApiResult',
    'GetDataserviceApisApiBackendConfigResult',
    'GetDataserviceApisApiBackendConfigBackendParamResult',
    'GetDataserviceApisApiBackendConfigConstantParamResult',
    'GetDataserviceApisApiDatasourceConfigResult',
    'GetDataserviceApisApiDatasourceConfigBackendParamResult',
    'GetDataserviceApisApiDatasourceConfigOrderParamResult',
    'GetDataserviceApisApiDatasourceConfigResponseParamResult',
    'GetDataserviceApisApiRequestParamResult',
    'GetDataserviceAppsAppResult',
    'GetDataserviceAuthorizedAppsAppResult',
    'GetDataserviceAuthorizedAppsAppStaticParamResult',
    'GetDataserviceInstancesInstanceResult',
    'GetDataserviceInstancesInstanceFlavorResult',
    'GetDataserviceInstancesInstanceNodeResult',
    'GetDataserviceMessagesMessageResult',
    'GetFactoryJobsJobResult',
    'GetQualityTasksTaskResult',
    'GetStudioDataConnectionsConnectionResult',
    'GetStudioWorkspacesWorkspaceResult',
]

@pulumi.output_type
class ArchitectureBatchPublishBizInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bizId":
            suggest = "biz_id"
        elif key == "bizType":
            suggest = "biz_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureBatchPublishBizInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureBatchPublishBizInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureBatchPublishBizInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 biz_id: _builtins.str,
                 biz_type: _builtins.str):
        """
        :param _builtins.str biz_id: Specifies the ID of the object to be published.
               Changing this creates a new resource.
        :param _builtins.str biz_type: Specifies the type of the object to be published.
               Changing this creates a new resource.
               The valid values are as follows:
               + **AGGREGATION_LOGIC_TABLE**
               + **ATOMIC_INDEX**
               + **ATOMIC_METRIC**
               + **BIZ_CATALOG**
               + **BIZ_METRIC**
               + **CODE_TABLE**
               + **COMMON_CONDITION**
               + **COMPOUND_METRIC**
               + **CONDITION_GROUP**
               + **DEGENERATE_DIMENSION**
               + **DERIVATIVE_INDEX**
               + **DERIVED_METRIC**
               + **DIMENSION**
               + **DIMENSION_ATTRIBUTE**
               + **DIMENSION_HIERARCHIES**
               + **DIMENSION_LOGIC_TABLE**
               + **DIMENSION_TABLE_ATTRIBUTE**
               + **DIRECTORY**
               + **FACT_ATTRIBUTE**
               + **FACT_DIMENSION**
               + **FACT_LOGIC_TABLE**
               + **FACT_MEASURE**
               + **FUNCTION**
               + **INFO_ARCH**
               + **MODEL**
               + **QUALITY_RULE**
               + **SECRECY_LEVEL**
               + **STANDARD_ELEMENT**
               + **STANDARD_ELEMENT_TEMPLATE**
               + **SUBJECT**
               + **SUMMARY_DIMENSION_ATTRIBUTE**
               + **SUMMARY_INDEX**
               + **SUMMARY_TIME**
               + **TABLE_MODEL**
               + **TABLE_MODEL_ATTRIBUTE**
               + **TABLE_MODEL_LOGIC**
               + **TABLE_TYPE**
               + **TAG**
               + **TIME_CONDITION**
        """
        pulumi.set(__self__, "biz_id", biz_id)
        pulumi.set(__self__, "biz_type", biz_type)

    @_builtins.property
    @pulumi.getter(name="bizId")
    def biz_id(self) -> _builtins.str:
        """
        Specifies the ID of the object to be published.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "biz_id")

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> _builtins.str:
        """
        Specifies the type of the object to be published.
        Changing this creates a new resource.
        The valid values are as follows:
        + **AGGREGATION_LOGIC_TABLE**
        + **ATOMIC_INDEX**
        + **ATOMIC_METRIC**
        + **BIZ_CATALOG**
        + **BIZ_METRIC**
        + **CODE_TABLE**
        + **COMMON_CONDITION**
        + **COMPOUND_METRIC**
        + **CONDITION_GROUP**
        + **DEGENERATE_DIMENSION**
        + **DERIVATIVE_INDEX**
        + **DERIVED_METRIC**
        + **DIMENSION**
        + **DIMENSION_ATTRIBUTE**
        + **DIMENSION_HIERARCHIES**
        + **DIMENSION_LOGIC_TABLE**
        + **DIMENSION_TABLE_ATTRIBUTE**
        + **DIRECTORY**
        + **FACT_ATTRIBUTE**
        + **FACT_DIMENSION**
        + **FACT_LOGIC_TABLE**
        + **FACT_MEASURE**
        + **FUNCTION**
        + **INFO_ARCH**
        + **MODEL**
        + **QUALITY_RULE**
        + **SECRECY_LEVEL**
        + **STANDARD_ELEMENT**
        + **STANDARD_ELEMENT_TEMPLATE**
        + **SUBJECT**
        + **SUMMARY_DIMENSION_ATTRIBUTE**
        + **SUMMARY_INDEX**
        + **SUMMARY_TIME**
        + **TABLE_MODEL**
        + **TABLE_MODEL_ATTRIBUTE**
        + **TABLE_MODEL_LOGIC**
        + **TABLE_TYPE**
        + **TAG**
        + **TIME_CONDITION**
        """
        return pulumi.get(self, "biz_type")


@pulumi.output_type
class ArchitectureBatchPublishmentBizInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bizId":
            suggest = "biz_id"
        elif key == "bizType":
            suggest = "biz_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureBatchPublishmentBizInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureBatchPublishmentBizInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureBatchPublishmentBizInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 biz_id: _builtins.str,
                 biz_type: _builtins.str):
        """
        :param _builtins.str biz_id: Specifies the ID of the object to be published.
               Changing this creates a new resource.
        :param _builtins.str biz_type: Specifies the type of the object to be published.
               Changing this creates a new resource.
               The valid values are as follows:
               + **AGGREGATION_LOGIC_TABLE**
               + **ATOMIC_INDEX**
               + **ATOMIC_METRIC**
               + **BIZ_CATALOG**
               + **BIZ_METRIC**
               + **CODE_TABLE**
               + **COMMON_CONDITION**
               + **COMPOUND_METRIC**
               + **CONDITION_GROUP**
               + **DEGENERATE_DIMENSION**
               + **DERIVATIVE_INDEX**
               + **DERIVED_METRIC**
               + **DIMENSION**
               + **DIMENSION_ATTRIBUTE**
               + **DIMENSION_HIERARCHIES**
               + **DIMENSION_LOGIC_TABLE**
               + **DIMENSION_TABLE_ATTRIBUTE**
               + **DIRECTORY**
               + **FACT_ATTRIBUTE**
               + **FACT_DIMENSION**
               + **FACT_LOGIC_TABLE**
               + **FACT_MEASURE**
               + **FUNCTION**
               + **INFO_ARCH**
               + **MODEL**
               + **QUALITY_RULE**
               + **SECRECY_LEVEL**
               + **STANDARD_ELEMENT**
               + **STANDARD_ELEMENT_TEMPLATE**
               + **SUBJECT**
               + **SUMMARY_DIMENSION_ATTRIBUTE**
               + **SUMMARY_INDEX**
               + **SUMMARY_TIME**
               + **TABLE_MODEL**
               + **TABLE_MODEL_ATTRIBUTE**
               + **TABLE_MODEL_LOGIC**
               + **TABLE_TYPE**
               + **TAG**
               + **TIME_CONDITION**
        """
        pulumi.set(__self__, "biz_id", biz_id)
        pulumi.set(__self__, "biz_type", biz_type)

    @_builtins.property
    @pulumi.getter(name="bizId")
    def biz_id(self) -> _builtins.str:
        """
        Specifies the ID of the object to be published.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "biz_id")

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> _builtins.str:
        """
        Specifies the type of the object to be published.
        Changing this creates a new resource.
        The valid values are as follows:
        + **AGGREGATION_LOGIC_TABLE**
        + **ATOMIC_INDEX**
        + **ATOMIC_METRIC**
        + **BIZ_CATALOG**
        + **BIZ_METRIC**
        + **CODE_TABLE**
        + **COMMON_CONDITION**
        + **COMPOUND_METRIC**
        + **CONDITION_GROUP**
        + **DEGENERATE_DIMENSION**
        + **DERIVATIVE_INDEX**
        + **DERIVED_METRIC**
        + **DIMENSION**
        + **DIMENSION_ATTRIBUTE**
        + **DIMENSION_HIERARCHIES**
        + **DIMENSION_LOGIC_TABLE**
        + **DIMENSION_TABLE_ATTRIBUTE**
        + **DIRECTORY**
        + **FACT_ATTRIBUTE**
        + **FACT_DIMENSION**
        + **FACT_LOGIC_TABLE**
        + **FACT_MEASURE**
        + **FUNCTION**
        + **INFO_ARCH**
        + **MODEL**
        + **QUALITY_RULE**
        + **SECRECY_LEVEL**
        + **STANDARD_ELEMENT**
        + **STANDARD_ELEMENT_TEMPLATE**
        + **SUBJECT**
        + **SUMMARY_DIMENSION_ATTRIBUTE**
        + **SUMMARY_INDEX**
        + **SUMMARY_TIME**
        + **TABLE_MODEL**
        + **TABLE_MODEL_ATTRIBUTE**
        + **TABLE_MODEL_LOGIC**
        + **TABLE_TYPE**
        + **TAG**
        + **TIME_CONDITION**
        """
        return pulumi.get(self, "biz_type")


@pulumi.output_type
class ArchitectureBatchUnpublishBizInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bizId":
            suggest = "biz_id"
        elif key == "bizType":
            suggest = "biz_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureBatchUnpublishBizInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureBatchUnpublishBizInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureBatchUnpublishBizInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 biz_id: _builtins.str,
                 biz_type: _builtins.str):
        """
        :param _builtins.str biz_id: Specifies the ID of the object to be published.
               Changing this creates a new resource.
        :param _builtins.str biz_type: Specifies the type of the object to be published.
               Changing this creates a new resource.
               The valid values are as follows:
               + **AGGREGATION_LOGIC_TABLE**
               + **ATOMIC_INDEX**
               + **ATOMIC_METRIC**
               + **BIZ_CATALOG**
               + **BIZ_METRIC**
               + **CODE_TABLE**
               + **COMMON_CONDITION**
               + **COMPOUND_METRIC**
               + **CONDITION_GROUP**
               + **DEGENERATE_DIMENSION**
               + **DERIVATIVE_INDEX**
               + **DERIVED_METRIC**
               + **DIMENSION**
               + **DIMENSION_ATTRIBUTE**
               + **DIMENSION_HIERARCHIES**
               + **DIMENSION_LOGIC_TABLE**
               + **DIMENSION_TABLE_ATTRIBUTE**
               + **DIRECTORY**
               + **FACT_ATTRIBUTE**
               + **FACT_DIMENSION**
               + **FACT_LOGIC_TABLE**
               + **FACT_MEASURE**
               + **FUNCTION**
               + **INFO_ARCH**
               + **MODEL**
               + **QUALITY_RULE**
               + **SECRECY_LEVEL**
               + **STANDARD_ELEMENT**
               + **STANDARD_ELEMENT_TEMPLATE**
               + **SUBJECT**
               + **SUMMARY_DIMENSION_ATTRIBUTE**
               + **SUMMARY_INDEX**
               + **SUMMARY_TIME**
               + **TABLE_MODEL**
               + **TABLE_MODEL_ATTRIBUTE**
               + **TABLE_MODEL_LOGIC**
               + **TABLE_TYPE**
               + **TAG**
               + **TIME_CONDITION**
        """
        pulumi.set(__self__, "biz_id", biz_id)
        pulumi.set(__self__, "biz_type", biz_type)

    @_builtins.property
    @pulumi.getter(name="bizId")
    def biz_id(self) -> _builtins.str:
        """
        Specifies the ID of the object to be published.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "biz_id")

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> _builtins.str:
        """
        Specifies the type of the object to be published.
        Changing this creates a new resource.
        The valid values are as follows:
        + **AGGREGATION_LOGIC_TABLE**
        + **ATOMIC_INDEX**
        + **ATOMIC_METRIC**
        + **BIZ_CATALOG**
        + **BIZ_METRIC**
        + **CODE_TABLE**
        + **COMMON_CONDITION**
        + **COMPOUND_METRIC**
        + **CONDITION_GROUP**
        + **DEGENERATE_DIMENSION**
        + **DERIVATIVE_INDEX**
        + **DERIVED_METRIC**
        + **DIMENSION**
        + **DIMENSION_ATTRIBUTE**
        + **DIMENSION_HIERARCHIES**
        + **DIMENSION_LOGIC_TABLE**
        + **DIMENSION_TABLE_ATTRIBUTE**
        + **DIRECTORY**
        + **FACT_ATTRIBUTE**
        + **FACT_DIMENSION**
        + **FACT_LOGIC_TABLE**
        + **FACT_MEASURE**
        + **FUNCTION**
        + **INFO_ARCH**
        + **MODEL**
        + **QUALITY_RULE**
        + **SECRECY_LEVEL**
        + **STANDARD_ELEMENT**
        + **STANDARD_ELEMENT_TEMPLATE**
        + **SUBJECT**
        + **SUMMARY_DIMENSION_ATTRIBUTE**
        + **SUMMARY_INDEX**
        + **SUMMARY_TIME**
        + **TABLE_MODEL**
        + **TABLE_MODEL_ATTRIBUTE**
        + **TABLE_MODEL_LOGIC**
        + **TABLE_TYPE**
        + **TAG**
        + **TIME_CONDITION**
        """
        return pulumi.get(self, "biz_type")


@pulumi.output_type
class ArchitectureCodeTableField(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ordinal: Optional[_builtins.int] = None):
        """
        :param _builtins.str code: Specifies the code of a field.
        :param _builtins.str name: Specifies the name of a field.
        :param _builtins.str type: Specifies the type of a field. Valid values are: **BIGINT**, **BOOLEAN**, **DATE**,
               **DECIMAL**, **DOUBLE**, **STRING**, and **TIMESTAMP**.
        :param _builtins.str description: Specifies the description of a field.
        :param _builtins.str id: The ID of the field.
        :param _builtins.int ordinal: The ordinal of a field.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Specifies the code of a field.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of a field.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of a field. Valid values are: **BIGINT**, **BOOLEAN**, **DATE**,
        **DECIMAL**, **DOUBLE**, **STRING**, and **TIMESTAMP**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of a field.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the field.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> Optional[_builtins.int]:
        """
        The ordinal of a field.
        """
        return pulumi.get(self, "ordinal")


@pulumi.output_type
class ArchitectureCodeTableValuesValue(dict):
    def __init__(__self__, *,
                 value: _builtins.str,
                 id: Optional[_builtins.str] = None,
                 ordinal: Optional[_builtins.int] = None):
        """
        :param _builtins.str value: Specifies the value of a field.
        :param _builtins.str id: The ID of a value.
        :param _builtins.int ordinal: The ordinal of a value.
        """
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of a field.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of a value.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> Optional[_builtins.int]:
        """
        The ordinal of a value.
        """
        return pulumi.get(self, "ordinal")


@pulumi.output_type
class ArchitectureDataStandardNewBiz(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bizId":
            suggest = "biz_id"
        elif key == "bizInfo":
            suggest = "biz_info"
        elif key == "bizType":
            suggest = "biz_type"
        elif key == "bizVersion":
            suggest = "biz_version"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureDataStandardNewBiz. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureDataStandardNewBiz.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureDataStandardNewBiz.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 biz_id: Optional[_builtins.str] = None,
                 biz_info: Optional[_builtins.str] = None,
                 biz_type: Optional[_builtins.str] = None,
                 biz_version: Optional[_builtins.str] = None,
                 created_at: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str biz_id: Indicates the ID of data standard.
        :param _builtins.str biz_info: Indicates the info of the new biz.
        :param _builtins.str biz_type: Indicates the type of the new biz.
        :param _builtins.str biz_version: Indicates the version of the new biz.
        :param _builtins.str created_at: Indicates the creation time of the data standard.
        :param _builtins.str id: Indicates the ID of the new biz.
        :param _builtins.str status: Indicates the status of the new biz.
        :param _builtins.str updated_at: Indicates the latest update time of the new biz.
        """
        if biz_id is not None:
            pulumi.set(__self__, "biz_id", biz_id)
        if biz_info is not None:
            pulumi.set(__self__, "biz_info", biz_info)
        if biz_type is not None:
            pulumi.set(__self__, "biz_type", biz_type)
        if biz_version is not None:
            pulumi.set(__self__, "biz_version", biz_version)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="bizId")
    def biz_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of data standard.
        """
        return pulumi.get(self, "biz_id")

    @_builtins.property
    @pulumi.getter(name="bizInfo")
    def biz_info(self) -> Optional[_builtins.str]:
        """
        Indicates the info of the new biz.
        """
        return pulumi.get(self, "biz_info")

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> Optional[_builtins.str]:
        """
        Indicates the type of the new biz.
        """
        return pulumi.get(self, "biz_type")

    @_builtins.property
    @pulumi.getter(name="bizVersion")
    def biz_version(self) -> Optional[_builtins.str]:
        """
        Indicates the version of the new biz.
        """
        return pulumi.get(self, "biz_version")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        Indicates the creation time of the data standard.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the new biz.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the new biz.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        Indicates the latest update time of the new biz.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ArchitectureDataStandardTemplateCustomField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fdName":
            suggest = "fd_name"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "optionalValues":
            suggest = "optional_values"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "updatedBy":
            suggest = "updated_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureDataStandardTemplateCustomField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureDataStandardTemplateCustomField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureDataStandardTemplateCustomField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fd_name: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 optional_values: Optional[_builtins.str] = None,
                 required: Optional[_builtins.bool] = None,
                 searchable: Optional[_builtins.bool] = None,
                 updated_at: Optional[_builtins.str] = None,
                 updated_by: Optional[_builtins.str] = None):
        """
        :param _builtins.str fd_name: Specifies the name of the field.
        :param _builtins.str created_at: Indicates the creation time of the field.
        :param _builtins.str created_by: Indicates the name of creator.
        :param _builtins.str id: Indicates the ID of the custom field.
        :param _builtins.str optional_values: Specifies the optional values of the field. Multiple values are separated by
               semicolons (;).
        :param _builtins.bool required: Specifies whether the field is required.
        :param _builtins.bool searchable: Specifies whether the field is search supported.
        :param _builtins.str updated_at: Indicates the latest update time of the field.
        :param _builtins.str updated_by: Indicates the name of updater.
        """
        pulumi.set(__self__, "fd_name", fd_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if optional_values is not None:
            pulumi.set(__self__, "optional_values", optional_values)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if searchable is not None:
            pulumi.set(__self__, "searchable", searchable)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="fdName")
    def fd_name(self) -> _builtins.str:
        """
        Specifies the name of the field.
        """
        return pulumi.get(self, "fd_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        Indicates the creation time of the field.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        Indicates the name of creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the custom field.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="optionalValues")
    def optional_values(self) -> Optional[_builtins.str]:
        """
        Specifies the optional values of the field. Multiple values are separated by
        semicolons (;).
        """
        return pulumi.get(self, "optional_values")

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the field is required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def searchable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the field is search supported.
        """
        return pulumi.get(self, "searchable")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        Indicates the latest update time of the field.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[_builtins.str]:
        """
        Indicates the name of updater.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class ArchitectureDataStandardTemplateOptionalField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fdName":
            suggest = "fd_name"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "updatedBy":
            suggest = "updated_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureDataStandardTemplateOptionalField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureDataStandardTemplateOptionalField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureDataStandardTemplateOptionalField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fd_name: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 required: Optional[_builtins.bool] = None,
                 searchable: Optional[_builtins.bool] = None,
                 updated_at: Optional[_builtins.str] = None,
                 updated_by: Optional[_builtins.str] = None):
        """
        :param _builtins.str fd_name: Specifies the name of the field.
        :param _builtins.str created_at: Indicates the creation time of the field.
        :param _builtins.str created_by: Indicates the name of creator.
        :param _builtins.str id: Indicates the ID of the custom field.
        :param _builtins.bool required: Specifies whether the field is required.
        :param _builtins.bool searchable: Specifies whether the field is search supported.
        :param _builtins.str updated_at: Indicates the latest update time of the field.
        :param _builtins.str updated_by: Indicates the name of updater.
        """
        pulumi.set(__self__, "fd_name", fd_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if searchable is not None:
            pulumi.set(__self__, "searchable", searchable)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="fdName")
    def fd_name(self) -> _builtins.str:
        """
        Specifies the name of the field.
        """
        return pulumi.get(self, "fd_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        Indicates the creation time of the field.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        Indicates the name of creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the custom field.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the field is required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def searchable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the field is search supported.
        """
        return pulumi.get(self, "searchable")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        Indicates the latest update time of the field.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[_builtins.str]:
        """
        Indicates the name of updater.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class ArchitectureDataStandardValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fdName":
            suggest = "fd_name"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "directoryId":
            suggest = "directory_id"
        elif key == "fdId":
            suggest = "fd_id"
        elif key == "fdValue":
            suggest = "fd_value"
        elif key == "rowId":
            suggest = "row_id"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "updatedBy":
            suggest = "updated_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureDataStandardValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureDataStandardValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureDataStandardValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fd_name: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 directory_id: Optional[_builtins.str] = None,
                 fd_id: Optional[_builtins.str] = None,
                 fd_value: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 row_id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None,
                 updated_by: Optional[_builtins.str] = None):
        """
        :param _builtins.str fd_name: Specifies the name of the data standard attribute.
        :param _builtins.str created_at: Indicates the creation time of the data standard.
        :param _builtins.str created_by: Indicates the creation time of the new biz.
        :param _builtins.str directory_id: Specifies the directory ID that the data standard belongs to.
        :param _builtins.str fd_id: Indicates the ID of the data standard attribute definition.
        :param _builtins.str fd_value: Specifies the value of the data standard attribute.
        :param _builtins.str id: Indicates the ID of the new biz.
        :param _builtins.str row_id: Indicates the ID of data standard.
        :param _builtins.str status: Indicates the status of the new biz.
        :param _builtins.str updated_at: Indicates the latest update time of the new biz.
        :param _builtins.str updated_by: Indicates the name of updater.
        """
        pulumi.set(__self__, "fd_name", fd_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if directory_id is not None:
            pulumi.set(__self__, "directory_id", directory_id)
        if fd_id is not None:
            pulumi.set(__self__, "fd_id", fd_id)
        if fd_value is not None:
            pulumi.set(__self__, "fd_value", fd_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if row_id is not None:
            pulumi.set(__self__, "row_id", row_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="fdName")
    def fd_name(self) -> _builtins.str:
        """
        Specifies the name of the data standard attribute.
        """
        return pulumi.get(self, "fd_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        Indicates the creation time of the data standard.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        Indicates the creation time of the new biz.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> Optional[_builtins.str]:
        """
        Specifies the directory ID that the data standard belongs to.
        """
        return pulumi.get(self, "directory_id")

    @_builtins.property
    @pulumi.getter(name="fdId")
    def fd_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the data standard attribute definition.
        """
        return pulumi.get(self, "fd_id")

    @_builtins.property
    @pulumi.getter(name="fdValue")
    def fd_value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the data standard attribute.
        """
        return pulumi.get(self, "fd_value")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the new biz.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="rowId")
    def row_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of data standard.
        """
        return pulumi.get(self, "row_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the new biz.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        Indicates the latest update time of the new biz.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[_builtins.str]:
        """
        Indicates the name of updater.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class ArchitectureTableModelAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "nameEn":
            suggest = "name_en"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "dataTypeExtend":
            suggest = "data_type_extend"
        elif key == "domainType":
            suggest = "domain_type"
        elif key == "extendField":
            suggest = "extend_field"
        elif key == "isForeignKey":
            suggest = "is_foreign_key"
        elif key == "isPartitionKey":
            suggest = "is_partition_key"
        elif key == "isPrimaryKey":
            suggest = "is_primary_key"
        elif key == "notNull":
            suggest = "not_null"
        elif key == "relatedLogicAttrId":
            suggest = "related_logic_attr_id"
        elif key == "relatedLogicAttrName":
            suggest = "related_logic_attr_name"
        elif key == "relatedLogicAttrNameEn":
            suggest = "related_logic_attr_name_en"
        elif key == "standRowId":
            suggest = "stand_row_id"
        elif key == "standRowName":
            suggest = "stand_row_name"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureTableModelAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureTableModelAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureTableModelAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: _builtins.str,
                 name: _builtins.str,
                 name_en: _builtins.str,
                 code: Optional[_builtins.str] = None,
                 created_at: Optional[_builtins.str] = None,
                 data_type_extend: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 domain_type: Optional[_builtins.str] = None,
                 extend_field: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 is_foreign_key: Optional[_builtins.bool] = None,
                 is_partition_key: Optional[_builtins.bool] = None,
                 is_primary_key: Optional[_builtins.bool] = None,
                 not_null: Optional[_builtins.bool] = None,
                 ordinal: Optional[_builtins.str] = None,
                 related_logic_attr_id: Optional[_builtins.str] = None,
                 related_logic_attr_name: Optional[_builtins.str] = None,
                 related_logic_attr_name_en: Optional[_builtins.str] = None,
                 stand_row_id: Optional[_builtins.str] = None,
                 stand_row_name: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str data_type: Specifies the data type of attribute.
        :param _builtins.str name: Specifies the mapping name.
        :param _builtins.str name_en: Specifies the English name of attribute.
        :param _builtins.str code: Specifies the code of attribute.
        :param _builtins.str created_at: The creating time of the mapping
        :param _builtins.str data_type_extend: Specifies the data type extend field of attribute.
        :param _builtins.str description: Specifies the description of attribute.
        :param _builtins.str domain_type: The domain type of the attribute.
        :param _builtins.bool extend_field: Specifies the extend field of attribute.
        :param _builtins.str id: The ID of the mapping.
        :param _builtins.bool is_foreign_key: Specifies the attribute is foreign key or not.
        :param _builtins.bool is_partition_key: Specifies the attribute is partition key or not.
        :param _builtins.bool is_primary_key: Specifies the attribute is primary key or not.
        :param _builtins.bool not_null: Specifies the attribute is not null or null.
               
               <a name="block--relations"></a>
               The `relations` block supports:
        :param _builtins.str ordinal: Specifies the sequence number of attribute. The input values must start from one, and must
               be continuous numbers.
        :param _builtins.str related_logic_attr_id: Specifies the related logic attribute ID of attribute.
        :param _builtins.str related_logic_attr_name: Specifies the related logic attribute name of attribute.
        :param _builtins.str related_logic_attr_name_en: Specifies the related logic attribute English name of attribute.
        :param _builtins.str stand_row_id: Specifies the data standard ID of attribute.
        :param _builtins.str stand_row_name: Specifies the data standard name of attribute.
        :param _builtins.str updated_at: The updating time of the mapping.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_en", name_en)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_type_extend is not None:
            pulumi.set(__self__, "data_type_extend", data_type_extend)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_type is not None:
            pulumi.set(__self__, "domain_type", domain_type)
        if extend_field is not None:
            pulumi.set(__self__, "extend_field", extend_field)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_foreign_key is not None:
            pulumi.set(__self__, "is_foreign_key", is_foreign_key)
        if is_partition_key is not None:
            pulumi.set(__self__, "is_partition_key", is_partition_key)
        if is_primary_key is not None:
            pulumi.set(__self__, "is_primary_key", is_primary_key)
        if not_null is not None:
            pulumi.set(__self__, "not_null", not_null)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)
        if related_logic_attr_id is not None:
            pulumi.set(__self__, "related_logic_attr_id", related_logic_attr_id)
        if related_logic_attr_name is not None:
            pulumi.set(__self__, "related_logic_attr_name", related_logic_attr_name)
        if related_logic_attr_name_en is not None:
            pulumi.set(__self__, "related_logic_attr_name_en", related_logic_attr_name_en)
        if stand_row_id is not None:
            pulumi.set(__self__, "stand_row_id", stand_row_id)
        if stand_row_name is not None:
            pulumi.set(__self__, "stand_row_name", stand_row_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        """
        Specifies the data type of attribute.
        """
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the mapping name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> _builtins.str:
        """
        Specifies the English name of attribute.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        Specifies the code of attribute.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creating time of the mapping
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataTypeExtend")
    def data_type_extend(self) -> Optional[_builtins.str]:
        """
        Specifies the data type extend field of attribute.
        """
        return pulumi.get(self, "data_type_extend")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of attribute.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainType")
    def domain_type(self) -> Optional[_builtins.str]:
        """
        The domain type of the attribute.
        """
        return pulumi.get(self, "domain_type")

    @_builtins.property
    @pulumi.getter(name="extendField")
    def extend_field(self) -> Optional[_builtins.bool]:
        """
        Specifies the extend field of attribute.
        """
        return pulumi.get(self, "extend_field")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the mapping.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isForeignKey")
    def is_foreign_key(self) -> Optional[_builtins.bool]:
        """
        Specifies the attribute is foreign key or not.
        """
        return pulumi.get(self, "is_foreign_key")

    @_builtins.property
    @pulumi.getter(name="isPartitionKey")
    def is_partition_key(self) -> Optional[_builtins.bool]:
        """
        Specifies the attribute is partition key or not.
        """
        return pulumi.get(self, "is_partition_key")

    @_builtins.property
    @pulumi.getter(name="isPrimaryKey")
    def is_primary_key(self) -> Optional[_builtins.bool]:
        """
        Specifies the attribute is primary key or not.
        """
        return pulumi.get(self, "is_primary_key")

    @_builtins.property
    @pulumi.getter(name="notNull")
    def not_null(self) -> Optional[_builtins.bool]:
        """
        Specifies the attribute is not null or null.

        <a name="block--relations"></a>
        The `relations` block supports:
        """
        return pulumi.get(self, "not_null")

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> Optional[_builtins.str]:
        """
        Specifies the sequence number of attribute. The input values must start from one, and must
        be continuous numbers.
        """
        return pulumi.get(self, "ordinal")

    @_builtins.property
    @pulumi.getter(name="relatedLogicAttrId")
    def related_logic_attr_id(self) -> Optional[_builtins.str]:
        """
        Specifies the related logic attribute ID of attribute.
        """
        return pulumi.get(self, "related_logic_attr_id")

    @_builtins.property
    @pulumi.getter(name="relatedLogicAttrName")
    def related_logic_attr_name(self) -> Optional[_builtins.str]:
        """
        Specifies the related logic attribute name of attribute.
        """
        return pulumi.get(self, "related_logic_attr_name")

    @_builtins.property
    @pulumi.getter(name="relatedLogicAttrNameEn")
    def related_logic_attr_name_en(self) -> Optional[_builtins.str]:
        """
        Specifies the related logic attribute English name of attribute.
        """
        return pulumi.get(self, "related_logic_attr_name_en")

    @_builtins.property
    @pulumi.getter(name="standRowId")
    def stand_row_id(self) -> Optional[_builtins.str]:
        """
        Specifies the data standard ID of attribute.
        """
        return pulumi.get(self, "stand_row_id")

    @_builtins.property
    @pulumi.getter(name="standRowName")
    def stand_row_name(self) -> Optional[_builtins.str]:
        """
        Specifies the data standard name of attribute.
        """
        return pulumi.get(self, "stand_row_name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The updating time of the mapping.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ArchitectureTableModelMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceTables":
            suggest = "source_tables"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "sourceFields":
            suggest = "source_fields"
        elif key == "srcModelId":
            suggest = "src_model_id"
        elif key == "srcModelName":
            suggest = "src_model_name"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "viewText":
            suggest = "view_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureTableModelMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureTableModelMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureTableModelMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 source_tables: Sequence['outputs.ArchitectureTableModelMappingSourceTable'],
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 source_fields: Optional[Sequence['outputs.ArchitectureTableModelMappingSourceField']] = None,
                 src_model_id: Optional[_builtins.str] = None,
                 src_model_name: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None,
                 updated_by: Optional[_builtins.str] = None,
                 view_text: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the mapping name.
        :param Sequence['ArchitectureTableModelMappingSourceTableArgs'] source_tables: Specifies the source table informations of mapping.
               The source_tables structure is documented below.
        :param _builtins.str created_at: The creating time of the mapping
        :param _builtins.str created_by: The person creating the mapping.
        :param _builtins.str id: The ID of the mapping.
        :param Sequence['ArchitectureTableModelMappingSourceFieldArgs'] source_fields: Specifies the source attribute informations of mapping.
               The source_fields structure is documented below.
               
               <a name="block--mappings--source_fields"></a>
               The `source_fields` block supports:
        :param _builtins.str src_model_id: Specifies the source model ID. It's **Required** for physical table model.
        :param _builtins.str src_model_name: Specifies the source model name.
        :param _builtins.str updated_at: The updating time of the mapping.
        :param _builtins.str updated_by: The person updating the mapping.
        :param _builtins.str view_text: Specifies the source to capturing the view, using for **DWS** reversed view.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_tables", source_tables)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source_fields is not None:
            pulumi.set(__self__, "source_fields", source_fields)
        if src_model_id is not None:
            pulumi.set(__self__, "src_model_id", src_model_id)
        if src_model_name is not None:
            pulumi.set(__self__, "src_model_name", src_model_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if view_text is not None:
            pulumi.set(__self__, "view_text", view_text)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the mapping name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceTables")
    def source_tables(self) -> Sequence['outputs.ArchitectureTableModelMappingSourceTable']:
        """
        Specifies the source table informations of mapping.
        The source_tables structure is documented below.
        """
        return pulumi.get(self, "source_tables")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creating time of the mapping
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The person creating the mapping.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the mapping.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sourceFields")
    def source_fields(self) -> Optional[Sequence['outputs.ArchitectureTableModelMappingSourceField']]:
        """
        Specifies the source attribute informations of mapping.
        The source_fields structure is documented below.

        <a name="block--mappings--source_fields"></a>
        The `source_fields` block supports:
        """
        return pulumi.get(self, "source_fields")

    @_builtins.property
    @pulumi.getter(name="srcModelId")
    def src_model_id(self) -> Optional[_builtins.str]:
        """
        Specifies the source model ID. It's **Required** for physical table model.
        """
        return pulumi.get(self, "src_model_id")

    @_builtins.property
    @pulumi.getter(name="srcModelName")
    def src_model_name(self) -> Optional[_builtins.str]:
        """
        Specifies the source model name.
        """
        return pulumi.get(self, "src_model_name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The updating time of the mapping.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[_builtins.str]:
        """
        The person updating the mapping.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="viewText")
    def view_text(self) -> Optional[_builtins.str]:
        """
        Specifies the source to capturing the view, using for **DWS** reversed view.
        """
        return pulumi.get(self, "view_text")


@pulumi.output_type
class ArchitectureTableModelMappingSourceField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldIds":
            suggest = "field_ids"
        elif key == "fieldNames":
            suggest = "field_names"
        elif key == "targetFieldName":
            suggest = "target_field_name"
        elif key == "transformExpression":
            suggest = "transform_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureTableModelMappingSourceField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureTableModelMappingSourceField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureTableModelMappingSourceField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 changed: Optional[_builtins.bool] = None,
                 field_ids: Optional[_builtins.str] = None,
                 field_names: Optional[Sequence[_builtins.str]] = None,
                 target_field_name: Optional[_builtins.str] = None,
                 transform_expression: Optional[_builtins.str] = None):
        """
        :param _builtins.bool changed: The attributes changed or not.
        :param _builtins.str field_ids: Specifies the source attribute IDs of mapping. Using **,** to split ID.
        :param Sequence[_builtins.str] field_names: Specifies the source attribute English name list of mapping.
        :param _builtins.str target_field_name: Specifies the attribute English name of this resource.
        :param _builtins.str transform_expression: Specifies the transform expression.
               
               <a name="block--mappings--source_tables"></a>
               The `source_tables` block supports:
        """
        if changed is not None:
            pulumi.set(__self__, "changed", changed)
        if field_ids is not None:
            pulumi.set(__self__, "field_ids", field_ids)
        if field_names is not None:
            pulumi.set(__self__, "field_names", field_names)
        if target_field_name is not None:
            pulumi.set(__self__, "target_field_name", target_field_name)
        if transform_expression is not None:
            pulumi.set(__self__, "transform_expression", transform_expression)

    @_builtins.property
    @pulumi.getter
    def changed(self) -> Optional[_builtins.bool]:
        """
        The attributes changed or not.
        """
        return pulumi.get(self, "changed")

    @_builtins.property
    @pulumi.getter(name="fieldIds")
    def field_ids(self) -> Optional[_builtins.str]:
        """
        Specifies the source attribute IDs of mapping. Using **,** to split ID.
        """
        return pulumi.get(self, "field_ids")

    @_builtins.property
    @pulumi.getter(name="fieldNames")
    def field_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the source attribute English name list of mapping.
        """
        return pulumi.get(self, "field_names")

    @_builtins.property
    @pulumi.getter(name="targetFieldName")
    def target_field_name(self) -> Optional[_builtins.str]:
        """
        Specifies the attribute English name of this resource.
        """
        return pulumi.get(self, "target_field_name")

    @_builtins.property
    @pulumi.getter(name="transformExpression")
    def transform_expression(self) -> Optional[_builtins.str]:
        """
        Specifies the transform expression.

        <a name="block--mappings--source_tables"></a>
        The `source_tables` block supports:
        """
        return pulumi.get(self, "transform_expression")


@pulumi.output_type
class ArchitectureTableModelMappingSourceTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "table1Id":
            suggest = "table1_id"
        elif key == "joinFields":
            suggest = "join_fields"
        elif key == "joinType":
            suggest = "join_type"
        elif key == "table1Name":
            suggest = "table1_name"
        elif key == "table2Id":
            suggest = "table2_id"
        elif key == "table2Name":
            suggest = "table2_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureTableModelMappingSourceTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureTableModelMappingSourceTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureTableModelMappingSourceTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 table1_id: _builtins.str,
                 join_fields: Optional[Sequence['outputs.ArchitectureTableModelMappingSourceTableJoinField']] = None,
                 join_type: Optional[_builtins.str] = None,
                 table1_name: Optional[_builtins.str] = None,
                 table2_id: Optional[_builtins.str] = None,
                 table2_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str table1_id: Specifies the table id.
        :param Sequence['ArchitectureTableModelMappingSourceTableJoinFieldArgs'] join_fields: Specifies the attribute informations.
               The join_fields structure is documented below.
        :param _builtins.str join_type: Specifies the join type of two table.
               The valid values are **LEFT**, **RIGHT**, **INNER**, **FULL**.
        :param _builtins.str table1_name: Specifies the table name.
        :param _builtins.str table2_id: Specifies the table id.
        :param _builtins.str table2_name: Specifies the table name
               
               <a name="block--mappings--source_tables--join_fields"></a>
               The `join_fields` block supports:
        """
        pulumi.set(__self__, "table1_id", table1_id)
        if join_fields is not None:
            pulumi.set(__self__, "join_fields", join_fields)
        if join_type is not None:
            pulumi.set(__self__, "join_type", join_type)
        if table1_name is not None:
            pulumi.set(__self__, "table1_name", table1_name)
        if table2_id is not None:
            pulumi.set(__self__, "table2_id", table2_id)
        if table2_name is not None:
            pulumi.set(__self__, "table2_name", table2_name)

    @_builtins.property
    @pulumi.getter(name="table1Id")
    def table1_id(self) -> _builtins.str:
        """
        Specifies the table id.
        """
        return pulumi.get(self, "table1_id")

    @_builtins.property
    @pulumi.getter(name="joinFields")
    def join_fields(self) -> Optional[Sequence['outputs.ArchitectureTableModelMappingSourceTableJoinField']]:
        """
        Specifies the attribute informations.
        The join_fields structure is documented below.
        """
        return pulumi.get(self, "join_fields")

    @_builtins.property
    @pulumi.getter(name="joinType")
    def join_type(self) -> Optional[_builtins.str]:
        """
        Specifies the join type of two table.
        The valid values are **LEFT**, **RIGHT**, **INNER**, **FULL**.
        """
        return pulumi.get(self, "join_type")

    @_builtins.property
    @pulumi.getter(name="table1Name")
    def table1_name(self) -> Optional[_builtins.str]:
        """
        Specifies the table name.
        """
        return pulumi.get(self, "table1_name")

    @_builtins.property
    @pulumi.getter(name="table2Id")
    def table2_id(self) -> Optional[_builtins.str]:
        """
        Specifies the table id.
        """
        return pulumi.get(self, "table2_id")

    @_builtins.property
    @pulumi.getter(name="table2Name")
    def table2_name(self) -> Optional[_builtins.str]:
        """
        Specifies the table name

        <a name="block--mappings--source_tables--join_fields"></a>
        The `join_fields` block supports:
        """
        return pulumi.get(self, "table2_name")


@pulumi.output_type
class ArchitectureTableModelMappingSourceTableJoinField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "field1Id":
            suggest = "field1_id"
        elif key == "field2Id":
            suggest = "field2_id"
        elif key == "field1Name":
            suggest = "field1_name"
        elif key == "field2Name":
            suggest = "field2_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureTableModelMappingSourceTableJoinField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureTableModelMappingSourceTableJoinField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureTableModelMappingSourceTableJoinField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field1_id: _builtins.str,
                 field2_id: _builtins.str,
                 field1_name: Optional[_builtins.str] = None,
                 field2_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str field1_id: Specifies the attribute ID.
        :param _builtins.str field2_id: Specifies the attribute ID.
        :param _builtins.str field1_name: Specifies the attribute English name.
        :param _builtins.str field2_name: Specifies the attribute English name.
        """
        pulumi.set(__self__, "field1_id", field1_id)
        pulumi.set(__self__, "field2_id", field2_id)
        if field1_name is not None:
            pulumi.set(__self__, "field1_name", field1_name)
        if field2_name is not None:
            pulumi.set(__self__, "field2_name", field2_name)

    @_builtins.property
    @pulumi.getter(name="field1Id")
    def field1_id(self) -> _builtins.str:
        """
        Specifies the attribute ID.
        """
        return pulumi.get(self, "field1_id")

    @_builtins.property
    @pulumi.getter(name="field2Id")
    def field2_id(self) -> _builtins.str:
        """
        Specifies the attribute ID.
        """
        return pulumi.get(self, "field2_id")

    @_builtins.property
    @pulumi.getter(name="field1Name")
    def field1_name(self) -> Optional[_builtins.str]:
        """
        Specifies the attribute English name.
        """
        return pulumi.get(self, "field1_name")

    @_builtins.property
    @pulumi.getter(name="field2Name")
    def field2_name(self) -> Optional[_builtins.str]:
        """
        Specifies the attribute English name.
        """
        return pulumi.get(self, "field2_name")


@pulumi.output_type
class ArchitectureTableModelRelation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "targetType":
            suggest = "target_type"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "sourceTableId":
            suggest = "source_table_id"
        elif key == "sourceTableName":
            suggest = "source_table_name"
        elif key == "targetTableId":
            suggest = "target_table_id"
        elif key == "targetTableName":
            suggest = "target_table_name"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "updatedBy":
            suggest = "updated_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureTableModelRelation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureTableModelRelation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureTableModelRelation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mappings: Sequence['outputs.ArchitectureTableModelRelationMapping'],
                 name: _builtins.str,
                 source_type: _builtins.str,
                 target_type: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 source_table_id: Optional[_builtins.str] = None,
                 source_table_name: Optional[_builtins.str] = None,
                 target_table_id: Optional[_builtins.str] = None,
                 target_table_name: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None,
                 updated_by: Optional[_builtins.str] = None):
        """
        :param Sequence['ArchitectureTableModelRelationMappingArgs'] mappings: Specifies the mappings of the attributes related.
               The mappings structure is documented below.
        :param _builtins.str name: Specifies the mapping name.
        :param _builtins.str source_type: Specifies the relation type of source to target.
               The valid values are **ONE**, **ZERO_OR_ONE**, **ZERO_OR_N**, **ONE_OR_N**.
        :param _builtins.str target_type: Specifies the relation type of target to source.
               The valid values are **ONE**, **ZERO_OR_ONE**, **ZERO_OR_N**, **ONE_OR_N**.
        :param _builtins.str created_at: The creating time of the mapping
        :param _builtins.str created_by: The person creating the mapping.
        :param _builtins.str id: The ID of the mapping.
        :param _builtins.str role: Specifies the role of the relation.
        :param _builtins.str source_table_id: Specifies the source table ID. Source table ID and target table ID, one of them
               must be the resource ID, so it have to be empty and the other one is **Required**.
        :param _builtins.str source_table_name: Specifies the source table name.
        :param _builtins.str target_table_id: Specifies the target table ID. Source table ID and target table ID, one of them
               must be the resource ID, so it have to be empty and the other one is **Required**.
        :param _builtins.str target_table_name: Specifies the target table name.
               
               <a name="block--relations--mappings"></a>
               The `mappings` block supports:
        :param _builtins.str updated_at: The updating time of the mapping.
        :param _builtins.str updated_by: The person updating the mapping.
        """
        pulumi.set(__self__, "mappings", mappings)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "target_type", target_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if source_table_id is not None:
            pulumi.set(__self__, "source_table_id", source_table_id)
        if source_table_name is not None:
            pulumi.set(__self__, "source_table_name", source_table_name)
        if target_table_id is not None:
            pulumi.set(__self__, "target_table_id", target_table_id)
        if target_table_name is not None:
            pulumi.set(__self__, "target_table_name", target_table_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter
    def mappings(self) -> Sequence['outputs.ArchitectureTableModelRelationMapping']:
        """
        Specifies the mappings of the attributes related.
        The mappings structure is documented below.
        """
        return pulumi.get(self, "mappings")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the mapping name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.str:
        """
        Specifies the relation type of source to target.
        The valid values are **ONE**, **ZERO_OR_ONE**, **ZERO_OR_N**, **ONE_OR_N**.
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> _builtins.str:
        """
        Specifies the relation type of target to source.
        The valid values are **ONE**, **ZERO_OR_ONE**, **ZERO_OR_N**, **ONE_OR_N**.
        """
        return pulumi.get(self, "target_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creating time of the mapping
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The person creating the mapping.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the mapping.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Specifies the role of the relation.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="sourceTableId")
    def source_table_id(self) -> Optional[_builtins.str]:
        """
        Specifies the source table ID. Source table ID and target table ID, one of them
        must be the resource ID, so it have to be empty and the other one is **Required**.
        """
        return pulumi.get(self, "source_table_id")

    @_builtins.property
    @pulumi.getter(name="sourceTableName")
    def source_table_name(self) -> Optional[_builtins.str]:
        """
        Specifies the source table name.
        """
        return pulumi.get(self, "source_table_name")

    @_builtins.property
    @pulumi.getter(name="targetTableId")
    def target_table_id(self) -> Optional[_builtins.str]:
        """
        Specifies the target table ID. Source table ID and target table ID, one of them
        must be the resource ID, so it have to be empty and the other one is **Required**.
        """
        return pulumi.get(self, "target_table_id")

    @_builtins.property
    @pulumi.getter(name="targetTableName")
    def target_table_name(self) -> Optional[_builtins.str]:
        """
        Specifies the target table name.

        <a name="block--relations--mappings"></a>
        The `mappings` block supports:
        """
        return pulumi.get(self, "target_table_name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The updating time of the mapping.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[_builtins.str]:
        """
        The person updating the mapping.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class ArchitectureTableModelRelationMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "sourceFieldId":
            suggest = "source_field_id"
        elif key == "sourceFieldName":
            suggest = "source_field_name"
        elif key == "targetFieldId":
            suggest = "target_field_id"
        elif key == "targetFieldName":
            suggest = "target_field_name"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "updatedBy":
            suggest = "updated_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArchitectureTableModelRelationMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArchitectureTableModelRelationMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArchitectureTableModelRelationMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 source_field_id: Optional[_builtins.str] = None,
                 source_field_name: Optional[_builtins.str] = None,
                 target_field_id: Optional[_builtins.str] = None,
                 target_field_name: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None,
                 updated_by: Optional[_builtins.str] = None):
        """
        :param _builtins.str created_at: The creating time of the mapping
        :param _builtins.str created_by: The person creating the mapping.
        :param _builtins.str id: The ID of the mapping.
        :param _builtins.str source_field_id: Specifies the source attribute ID. Source field ID and target field ID, one of
               them must be the resource attribute ID, so it have to be empty and input its name, the other one ID is **Required**.
        :param _builtins.str source_field_name: Specifies the source attribute English name. If the source attribute ID is
               empty, it's **Required**.
        :param _builtins.str target_field_id: Specifies the source attribute ID. Source field ID and target field ID, one of
               them must be the resource attribute ID, so it have to be empty and the other one is **Required**.
        :param _builtins.str target_field_name: Specifies the attribute English name of this resource.
        :param _builtins.str updated_at: The updating time of the mapping.
        :param _builtins.str updated_by: The person updating the mapping.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source_field_id is not None:
            pulumi.set(__self__, "source_field_id", source_field_id)
        if source_field_name is not None:
            pulumi.set(__self__, "source_field_name", source_field_name)
        if target_field_id is not None:
            pulumi.set(__self__, "target_field_id", target_field_id)
        if target_field_name is not None:
            pulumi.set(__self__, "target_field_name", target_field_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creating time of the mapping
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The person creating the mapping.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the mapping.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sourceFieldId")
    def source_field_id(self) -> Optional[_builtins.str]:
        """
        Specifies the source attribute ID. Source field ID and target field ID, one of
        them must be the resource attribute ID, so it have to be empty and input its name, the other one ID is **Required**.
        """
        return pulumi.get(self, "source_field_id")

    @_builtins.property
    @pulumi.getter(name="sourceFieldName")
    def source_field_name(self) -> Optional[_builtins.str]:
        """
        Specifies the source attribute English name. If the source attribute ID is
        empty, it's **Required**.
        """
        return pulumi.get(self, "source_field_name")

    @_builtins.property
    @pulumi.getter(name="targetFieldId")
    def target_field_id(self) -> Optional[_builtins.str]:
        """
        Specifies the source attribute ID. Source field ID and target field ID, one of
        them must be the resource attribute ID, so it have to be empty and the other one is **Required**.
        """
        return pulumi.get(self, "target_field_id")

    @_builtins.property
    @pulumi.getter(name="targetFieldName")
    def target_field_name(self) -> Optional[_builtins.str]:
        """
        Specifies the attribute English name of this resource.
        """
        return pulumi.get(self, "target_field_name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The updating time of the mapping.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[_builtins.str]:
        """
        The person updating the mapping.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class DataserviceApiBackendConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendParams":
            suggest = "backend_params"
        elif key == "constantParams":
            suggest = "constant_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataserviceApiBackendConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataserviceApiBackendConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataserviceApiBackendConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: _builtins.str,
                 path: _builtins.str,
                 protocol: _builtins.str,
                 type: _builtins.str,
                 backend_params: Optional[Sequence['outputs.DataserviceApiBackendConfigBackendParam']] = None,
                 constant_params: Optional[Sequence['outputs.DataserviceApiBackendConfigConstantParam']] = None,
                 timeout: Optional[_builtins.int] = None):
        """
        :param _builtins.str host: Specifies the backend host.
        :param _builtins.str path: Specifies the backend path.
        :param _builtins.str protocol: Specifies the protocol of the backend request.  
               The valid values are as follows:
               + **PROTOCOL_TYPE_HTTP**
               + **PROTOCOL_TYPE_HTTPS**
        :param _builtins.str type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param Sequence['DataserviceApiBackendConfigBackendParamArgs'] backend_params: Specifies the backend parameters of the API.  
               The backend_params structure is documented below.
        :param Sequence['DataserviceApiBackendConfigConstantParamArgs'] constant_params: Specifies the backend constant parameters of the API.  
               The constant_params structure is documented below.
               
               <a name="dataservice_api_backend_config_backend_params"></a>
               The `backend_params` block supports:
        :param _builtins.int timeout: Specifies the backend timeout.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if constant_params is not None:
            pulumi.set(__self__, "constant_params", constant_params)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        Specifies the backend host.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Specifies the backend path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol of the backend request.  
        The valid values are as follows:
        + **PROTOCOL_TYPE_HTTP**
        + **PROTOCOL_TYPE_HTTPS**
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.DataserviceApiBackendConfigBackendParam']]:
        """
        Specifies the backend parameters of the API.  
        The backend_params structure is documented below.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter(name="constantParams")
    def constant_params(self) -> Optional[Sequence['outputs.DataserviceApiBackendConfigConstantParam']]:
        """
        Specifies the backend constant parameters of the API.  
        The constant_params structure is documented below.

        <a name="dataservice_api_backend_config_backend_params"></a>
        The `backend_params` block supports:
        """
        return pulumi.get(self, "constant_params")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the backend timeout.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class DataserviceApiBackendConfigBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendParamName":
            suggest = "backend_param_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataserviceApiBackendConfigBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataserviceApiBackendConfigBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataserviceApiBackendConfigBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_param_name: _builtins.str,
                 name: _builtins.str,
                 position: _builtins.str):
        """
        :param _builtins.str backend_param_name: Specifies the name of the corresponding backend parameter.
               
               <a name="dataservice_api_backend_config_constant_params"></a>
               The `constant_params` block supports:
        :param _builtins.str name: Specifies the name of the constant parameter.
        :param _builtins.str position: Specifies the position of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_POSITION_PATH**
               + **REQUEST_PARAMETER_POSITION_HEADER**
               + **REQUEST_PARAMETER_POSITION_QUERY**
        """
        pulumi.set(__self__, "backend_param_name", backend_param_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)

    @_builtins.property
    @pulumi.getter(name="backendParamName")
    def backend_param_name(self) -> _builtins.str:
        """
        Specifies the name of the corresponding backend parameter.

        <a name="dataservice_api_backend_config_constant_params"></a>
        The `constant_params` block supports:
        """
        return pulumi.get(self, "backend_param_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def position(self) -> _builtins.str:
        """
        Specifies the position of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_POSITION_PATH**
        + **REQUEST_PARAMETER_POSITION_HEADER**
        + **REQUEST_PARAMETER_POSITION_QUERY**
        """
        return pulumi.get(self, "position")


@pulumi.output_type
class DataserviceApiBackendConfigConstantParam(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 position: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of the constant parameter.
        :param _builtins.str position: Specifies the position of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_POSITION_PATH**
               + **REQUEST_PARAMETER_POSITION_HEADER**
               + **REQUEST_PARAMETER_POSITION_QUERY**
        :param _builtins.str type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param _builtins.str value: Specifies the value of the constant parameter.
        :param _builtins.str description: Specifies the description of the constant parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def position(self) -> _builtins.str:
        """
        Specifies the position of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_POSITION_PATH**
        + **REQUEST_PARAMETER_POSITION_HEADER**
        + **REQUEST_PARAMETER_POSITION_QUERY**
        """
        return pulumi.get(self, "position")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the constant parameter.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the constant parameter.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class DataserviceApiDatasourceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessMode":
            suggest = "access_mode"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "connectionId":
            suggest = "connection_id"
        elif key == "connectionName":
            suggest = "connection_name"
        elif key == "orderParams":
            suggest = "order_params"
        elif key == "responseParams":
            suggest = "response_params"
        elif key == "tableId":
            suggest = "table_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataserviceApiDatasourceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataserviceApiDatasourceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataserviceApiDatasourceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: _builtins.str,
                 datatable: _builtins.str,
                 type: _builtins.str,
                 access_mode: Optional[_builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.DataserviceApiDatasourceConfigBackendParam']] = None,
                 connection_id: Optional[_builtins.str] = None,
                 connection_name: Optional[_builtins.str] = None,
                 order_params: Optional[Sequence['outputs.DataserviceApiDatasourceConfigOrderParam']] = None,
                 queue: Optional[_builtins.str] = None,
                 response_params: Optional[Sequence['outputs.DataserviceApiDatasourceConfigResponseParam']] = None,
                 sql: Optional[_builtins.str] = None,
                 table_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str database: Specifies the name of the database.
        :param _builtins.str datatable: Specifies the name of the data table.
        :param _builtins.str type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param _builtins.str access_mode: Specifies the access mode for the data.  
               The valid values are as follows:
               + **SQL**
               + **ROW_KEY**
               + **PREFIX_FILTER**
        :param Sequence['DataserviceApiDatasourceConfigBackendParamArgs'] backend_params: Specifies the backend parameters of the API.  
               The backend_params structure is documented below.
        :param _builtins.str connection_id: Specifies the ID of the data connection for the DataArts Studio service.
        :param _builtins.str connection_name: The name of the data connection.
        :param Sequence['DataserviceApiDatasourceConfigOrderParamArgs'] order_params: Specifies the order parameters of the API.  
               The order_params structure is documented below.
               
               > All column names that appear in the data table must have corresponding parameter mappings.
               
               <a name="dataservice_api_datasource_config_backend_params"></a>
               The `backend_params` block supports:
        :param _builtins.str queue: Specifies the ID of the DLI queue.
        :param Sequence['DataserviceApiDatasourceConfigResponseParamArgs'] response_params: Specifies the response parameters of the API.  
               The response_params structure is documented below.
        :param _builtins.str sql: Specifies the SQL statements in script access type.
        :param _builtins.str table_id: The ID of the data table.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "datatable", datatable)
        pulumi.set(__self__, "type", type)
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connection_name is not None:
            pulumi.set(__self__, "connection_name", connection_name)
        if order_params is not None:
            pulumi.set(__self__, "order_params", order_params)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if response_params is not None:
            pulumi.set(__self__, "response_params", response_params)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Specifies the name of the database.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter
    def datatable(self) -> _builtins.str:
        """
        Specifies the name of the data table.
        """
        return pulumi.get(self, "datatable")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the access mode for the data.  
        The valid values are as follows:
        + **SQL**
        + **ROW_KEY**
        + **PREFIX_FILTER**
        """
        return pulumi.get(self, "access_mode")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.DataserviceApiDatasourceConfigBackendParam']]:
        """
        Specifies the backend parameters of the API.  
        The backend_params structure is documented below.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the data connection for the DataArts Studio service.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionName")
    def connection_name(self) -> Optional[_builtins.str]:
        """
        The name of the data connection.
        """
        return pulumi.get(self, "connection_name")

    @_builtins.property
    @pulumi.getter(name="orderParams")
    def order_params(self) -> Optional[Sequence['outputs.DataserviceApiDatasourceConfigOrderParam']]:
        """
        Specifies the order parameters of the API.  
        The order_params structure is documented below.

        > All column names that appear in the data table must have corresponding parameter mappings.

        <a name="dataservice_api_datasource_config_backend_params"></a>
        The `backend_params` block supports:
        """
        return pulumi.get(self, "order_params")

    @_builtins.property
    @pulumi.getter
    def queue(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the DLI queue.
        """
        return pulumi.get(self, "queue")

    @_builtins.property
    @pulumi.getter(name="responseParams")
    def response_params(self) -> Optional[Sequence['outputs.DataserviceApiDatasourceConfigResponseParam']]:
        """
        Specifies the response parameters of the API.  
        The response_params structure is documented below.
        """
        return pulumi.get(self, "response_params")

    @_builtins.property
    @pulumi.getter
    def sql(self) -> Optional[_builtins.str]:
        """
        Specifies the SQL statements in script access type.
        """
        return pulumi.get(self, "sql")

    @_builtins.property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[_builtins.str]:
        """
        The ID of the data table.
        """
        return pulumi.get(self, "table_id")


@pulumi.output_type
class DataserviceApiDatasourceConfigBackendParam(dict):
    def __init__(__self__, *,
                 mapping: _builtins.str,
                 name: _builtins.str,
                 condition: Optional[_builtins.str] = None):
        """
        :param _builtins.str mapping: Specifies the name of the mapping parameter.
        :param _builtins.str name: Specifies the name of the constant parameter.
        :param _builtins.str condition: Specifies the condition character.  
               The valid values are as follows:
               + **CONDITION_TYPE_EQ**: =
               + **CONDITION_TYPE_NE**: <>
               + **CONDITION_TYPE_GT**: >
               + **CONDITION_TYPE_GE**: >=
               + **CONDITION_TYPE_LT**: <
               + **CONDITION_TYPE_LE**: <=
               + **CONDITION_TYPE_LIKE**: %like%
               + **CONDITION_TYPE_LIKE_L**: %like
               + **CONDITION_TYPE_LIKE_R**: like%
               
               <a name="dataservice_api_datasource_config_response_params"></a>
               The `response_params` block supports:
        """
        pulumi.set(__self__, "mapping", mapping)
        pulumi.set(__self__, "name", name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @_builtins.property
    @pulumi.getter
    def mapping(self) -> _builtins.str:
        """
        Specifies the name of the mapping parameter.
        """
        return pulumi.get(self, "mapping")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[_builtins.str]:
        """
        Specifies the condition character.  
        The valid values are as follows:
        + **CONDITION_TYPE_EQ**: =
        + **CONDITION_TYPE_NE**: <>
        + **CONDITION_TYPE_GT**: >
        + **CONDITION_TYPE_GE**: >=
        + **CONDITION_TYPE_LT**: <
        + **CONDITION_TYPE_LE**: <=
        + **CONDITION_TYPE_LIKE**: %like%
        + **CONDITION_TYPE_LIKE_L**: %like
        + **CONDITION_TYPE_LIKE_R**: like%

        <a name="dataservice_api_datasource_config_response_params"></a>
        The `response_params` block supports:
        """
        return pulumi.get(self, "condition")


@pulumi.output_type
class DataserviceApiDatasourceConfigOrderParam(dict):
    def __init__(__self__, *,
                 field: _builtins.str,
                 name: _builtins.str,
                 optional: Optional[_builtins.bool] = None,
                 order: Optional[_builtins.int] = None,
                 sort: Optional[_builtins.str] = None):
        """
        :param _builtins.str field: Specifies the corresponding parameter field for the order parameter.
        :param _builtins.str name: Specifies the name of the constant parameter.
        :param _builtins.bool optional: Specifies whether this order parameter is the optional parameter.
        :param _builtins.int order: Specifies the order of the sorting parameters.
               
               <a name="dataservice_api_request_params"></a>
               The `request_params` block supports:
        :param _builtins.str sort: Specifies the sort type of the order parameter.  
               The valid values are as follows:
               + **ASC**
               + **DESC**
               + **CUSTOM**
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @_builtins.property
    @pulumi.getter
    def field(self) -> _builtins.str:
        """
        Specifies the corresponding parameter field for the order parameter.
        """
        return pulumi.get(self, "field")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this order parameter is the optional parameter.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[_builtins.int]:
        """
        Specifies the order of the sorting parameters.

        <a name="dataservice_api_request_params"></a>
        The `request_params` block supports:
        """
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        """
        Specifies the sort type of the order parameter.  
        The valid values are as follows:
        + **ASC**
        + **DESC**
        + **CUSTOM**
        """
        return pulumi.get(self, "sort")


@pulumi.output_type
class DataserviceApiDatasourceConfigResponseParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exampleValue":
            suggest = "example_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataserviceApiDatasourceConfigResponseParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataserviceApiDatasourceConfigResponseParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataserviceApiDatasourceConfigResponseParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 example_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str field: Specifies the corresponding parameter field for the order parameter.
        :param _builtins.str name: Specifies the name of the constant parameter.
        :param _builtins.str type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param _builtins.str description: Specifies the description of the constant parameter.
        :param _builtins.str example_value: Specifies the example value of the request parameter.
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if example_value is not None:
            pulumi.set(__self__, "example_value", example_value)

    @_builtins.property
    @pulumi.getter
    def field(self) -> _builtins.str:
        """
        Specifies the corresponding parameter field for the order parameter.
        """
        return pulumi.get(self, "field")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the constant parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="exampleValue")
    def example_value(self) -> Optional[_builtins.str]:
        """
        Specifies the example value of the request parameter.
        """
        return pulumi.get(self, "example_value")


@pulumi.output_type
class DataserviceApiHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalHost":
            suggest = "external_host"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "intranetHost":
            suggest = "intranet_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataserviceApiHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataserviceApiHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataserviceApiHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domains: Optional[Sequence[_builtins.str]] = None,
                 external_host: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 instance_name: Optional[_builtins.str] = None,
                 intranet_host: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] domains: The list of gateway damains.
        :param _builtins.str external_host: The exrernal address.
        :param _builtins.str instance_id: The cluster ID to which the API belongs.
        :param _builtins.str instance_name: The cluster name to which the API belongs.
        :param _builtins.str intranet_host: The intranet address.
        """
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if external_host is not None:
            pulumi.set(__self__, "external_host", external_host)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if intranet_host is not None:
            pulumi.set(__self__, "intranet_host", intranet_host)

    @_builtins.property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of gateway damains.
        """
        return pulumi.get(self, "domains")

    @_builtins.property
    @pulumi.getter(name="externalHost")
    def external_host(self) -> Optional[_builtins.str]:
        """
        The exrernal address.
        """
        return pulumi.get(self, "external_host")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The cluster ID to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[_builtins.str]:
        """
        The cluster name to which the API belongs.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="intranetHost")
    def intranet_host(self) -> Optional[_builtins.str]:
        """
        The intranet address.
        """
        return pulumi.get(self, "intranet_host")


@pulumi.output_type
class DataserviceApiRequestParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"
        elif key == "exampleValue":
            suggest = "example_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataserviceApiRequestParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataserviceApiRequestParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataserviceApiRequestParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 position: _builtins.str,
                 type: _builtins.str,
                 default_value: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 example_value: Optional[_builtins.str] = None,
                 necessary: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the name of the constant parameter.
        :param _builtins.str position: Specifies the position of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_POSITION_PATH**
               + **REQUEST_PARAMETER_POSITION_HEADER**
               + **REQUEST_PARAMETER_POSITION_QUERY**
        :param _builtins.str type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param _builtins.str default_value: Specifies the default value of the request parameter.
               
               <a name="dataservice_api_backend_config"></a>
               The `backend_config` block supports:
        :param _builtins.str description: Specifies the description of the constant parameter.
        :param _builtins.str example_value: Specifies the example value of the request parameter.
        :param _builtins.bool necessary: Specifies whether this parameter is the required parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "type", type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if example_value is not None:
            pulumi.set(__self__, "example_value", example_value)
        if necessary is not None:
            pulumi.set(__self__, "necessary", necessary)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def position(self) -> _builtins.str:
        """
        Specifies the position of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_POSITION_PATH**
        + **REQUEST_PARAMETER_POSITION_HEADER**
        + **REQUEST_PARAMETER_POSITION_QUERY**
        """
        return pulumi.get(self, "position")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[_builtins.str]:
        """
        Specifies the default value of the request parameter.

        <a name="dataservice_api_backend_config"></a>
        The `backend_config` block supports:
        """
        return pulumi.get(self, "default_value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of the constant parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="exampleValue")
    def example_value(self) -> Optional[_builtins.str]:
        """
        Specifies the example value of the request parameter.
        """
        return pulumi.get(self, "example_value")

    @_builtins.property
    @pulumi.getter
    def necessary(self) -> Optional[_builtins.bool]:
        """
        Specifies whether this parameter is the required parameter.
        """
        return pulumi.get(self, "necessary")


@pulumi.output_type
class FactoryJobBasicConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customFields":
            suggest = "custom_fields"
        elif key == "executeUser":
            suggest = "execute_user"
        elif key == "instanceTimeout":
            suggest = "instance_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FactoryJobBasicConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FactoryJobBasicConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FactoryJobBasicConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_fields: Optional[Mapping[str, _builtins.str]] = None,
                 execute_user: Optional[_builtins.str] = None,
                 instance_timeout: Optional[_builtins.int] = None,
                 owner: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None):
        """
        :param Mapping[str, _builtins.str] custom_fields: Custom fields.
        :param _builtins.str execute_user: Job execution user. The value must be an existing user.
        :param _builtins.int instance_timeout: Maximum execution time of a job instance.  
               Unit: minute; value range: `5` to `1440`.
               Default value: `60`.
        :param _builtins.str owner: Job owner.
        :param _builtins.int priority: Job priority.  
               The value ranges from `0` to `2`.
               `0` indicates a top priority, `1` indicates a medium priority, and `2` indicates a low priority.
               Default value: `0`.
        """
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if execute_user is not None:
            pulumi.set(__self__, "execute_user", execute_user)
        if instance_timeout is not None:
            pulumi.set(__self__, "instance_timeout", instance_timeout)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Custom fields.
        """
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter(name="executeUser")
    def execute_user(self) -> Optional[_builtins.str]:
        """
        Job execution user. The value must be an existing user.
        """
        return pulumi.get(self, "execute_user")

    @_builtins.property
    @pulumi.getter(name="instanceTimeout")
    def instance_timeout(self) -> Optional[_builtins.int]:
        """
        Maximum execution time of a job instance.  
        Unit: minute; value range: `5` to `1440`.
        Default value: `60`.
        """
        return pulumi.get(self, "instance_timeout")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[_builtins.str]:
        """
        Job owner.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Job priority.  
        The value ranges from `0` to `2`.
        `0` indicates a top priority, `1` indicates a medium priority, and `2` indicates a low priority.
        Default value: `0`.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class FactoryJobNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cronTrigger":
            suggest = "cron_trigger"
        elif key == "eventTrigger":
            suggest = "event_trigger"
        elif key == "failPolicy":
            suggest = "fail_policy"
        elif key == "maxExecutionTime":
            suggest = "max_execution_time"
        elif key == "pollingInterval":
            suggest = "polling_interval"
        elif key == "preNodeNames":
            suggest = "pre_node_names"
        elif key == "retryInterval":
            suggest = "retry_interval"
        elif key == "retryTimes":
            suggest = "retry_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FactoryJobNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FactoryJobNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FactoryJobNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: 'outputs.FactoryJobNodeLocation',
                 name: _builtins.str,
                 properties: Sequence['outputs.FactoryJobNodeProperty'],
                 type: _builtins.str,
                 conditions: Optional[Sequence['outputs.FactoryJobNodeCondition']] = None,
                 cron_trigger: Optional['outputs.FactoryJobNodeCronTrigger'] = None,
                 event_trigger: Optional['outputs.FactoryJobNodeEventTrigger'] = None,
                 fail_policy: Optional[_builtins.str] = None,
                 max_execution_time: Optional[_builtins.int] = None,
                 polling_interval: Optional[_builtins.int] = None,
                 pre_node_names: Optional[Sequence[_builtins.str]] = None,
                 retry_interval: Optional[_builtins.int] = None,
                 retry_times: Optional[_builtins.int] = None):
        """
        :param 'FactoryJobNodeLocationArgs' location: Location of a node on the job canvas
               The location structure is documented below.
        :param _builtins.str name: Name of a parameter.  
               The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
               underscores (_).
        :param Sequence['FactoryJobNodePropertyArgs'] properties: Node property. Each type of node has its own property definition.  
               - **HiveSQL**: For details, see [Table 14](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **SparkSQL**: For details, see [Table 15](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **DWSSQL**: For details, see [Table 16](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **DLISQL**: For details, see [Table 17](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **Shell**: For details, see [Table 18](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **CDMJob**: For details, see [Table 19](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **DISTransferTask**: For details, see [Table 20](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **CloudTableManager**: For details, see [Table 21](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **OBSManager**: For details, see [Table 22](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **RESTClient**: For details, see [Table 23](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **SMN**: For details, see [Table 24](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **MRSSpark**: For details, see [Table 25](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **MapReduce**: For details, see [Table 26](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **DLISpark**: For details, see [Table 27](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **MRSFlinkJob**: For details, see [Table 29](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **MRSHetuEngine**: For details, see [Table 30](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               
               The properties structure is documented below.
        :param _builtins.str type: Parameter type.  
               The valid values are as follows:
               - **variable**
               - **constants**
               
               Defaults to **variable**.
               
               <a name="job_BasicConfig"></a>
               The `basic_config` block supports:
        :param Sequence['FactoryJobNodeConditionArgs'] conditions: Node execution condition.  
               Whether the node is executed or not depends on the calculation result of the EL expression saved
               in the expression field of condition.
               The conditions structure is documented below.
        :param 'FactoryJobNodeCronTriggerArgs' cron_trigger: Cron trigger for the real-time job node
               The cron_trigger structure is documented below.
               
               <a name="job_Location"></a>
               The `location` block supports:
        :param 'FactoryJobNodeEventTriggerArgs' event_trigger: Event trigger for the real-time job node.
               The event_trigger structure is documented below.
        :param _builtins.str fail_policy: Job failure policy.  
               The valid values are as follows:
               - **SUSPEND**: Suspend the event.
               - **IGNORE**: Ignore the failure and process with the next event.
               
               The default value is **SUSPEND**.
        :param _builtins.int max_execution_time: Maximum execution time of a node.  
               If a node is not executed within the maximum execution time, the node is set to the failed state.
               Unit: minute; value range: `5` to `1,440`.
               Default value: `60`.
        :param _builtins.int polling_interval: Interval at which node running results are checked.  
               Unit: second; value range: `1` to `60`.
               Default value: `10`.
        :param Sequence[_builtins.str] pre_node_names: Name of the previous node on which the current node depends.
        :param _builtins.int retry_interval: Interval at which a retry is performed upon a failure.  
               The value ranges from `5` to `120`.
               Unit: second.
               Default value: `120`.
        :param _builtins.int retry_times: Number of the node retries.  
               The value ranges from `0` to `5`. `0` indicates no retry.
               Default value: `0`.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "type", type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if cron_trigger is not None:
            pulumi.set(__self__, "cron_trigger", cron_trigger)
        if event_trigger is not None:
            pulumi.set(__self__, "event_trigger", event_trigger)
        if fail_policy is not None:
            pulumi.set(__self__, "fail_policy", fail_policy)
        if max_execution_time is not None:
            pulumi.set(__self__, "max_execution_time", max_execution_time)
        if polling_interval is not None:
            pulumi.set(__self__, "polling_interval", polling_interval)
        if pre_node_names is not None:
            pulumi.set(__self__, "pre_node_names", pre_node_names)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if retry_times is not None:
            pulumi.set(__self__, "retry_times", retry_times)

    @_builtins.property
    @pulumi.getter
    def location(self) -> 'outputs.FactoryJobNodeLocation':
        """
        Location of a node on the job canvas
        The location structure is documented below.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.FactoryJobNodeProperty']:
        """
        Node property. Each type of node has its own property definition.  
        - **HiveSQL**: For details, see [Table 14](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **SparkSQL**: For details, see [Table 15](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DWSSQL**: For details, see [Table 16](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DLISQL**: For details, see [Table 17](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **Shell**: For details, see [Table 18](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **CDMJob**: For details, see [Table 19](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DISTransferTask**: For details, see [Table 20](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **CloudTableManager**: For details, see [Table 21](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **OBSManager**: For details, see [Table 22](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **RESTClient**: For details, see [Table 23](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **SMN**: For details, see [Table 24](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MRSSpark**: For details, see [Table 25](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MapReduce**: For details, see [Table 26](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DLISpark**: For details, see [Table 27](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MRSFlinkJob**: For details, see [Table 29](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MRSHetuEngine**: For details, see [Table 30](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).

        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Parameter type.  
        The valid values are as follows:
        - **variable**
        - **constants**

        Defaults to **variable**.

        <a name="job_BasicConfig"></a>
        The `basic_config` block supports:
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.FactoryJobNodeCondition']]:
        """
        Node execution condition.  
        Whether the node is executed or not depends on the calculation result of the EL expression saved
        in the expression field of condition.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="cronTrigger")
    def cron_trigger(self) -> Optional['outputs.FactoryJobNodeCronTrigger']:
        """
        Cron trigger for the real-time job node
        The cron_trigger structure is documented below.

        <a name="job_Location"></a>
        The `location` block supports:
        """
        return pulumi.get(self, "cron_trigger")

    @_builtins.property
    @pulumi.getter(name="eventTrigger")
    def event_trigger(self) -> Optional['outputs.FactoryJobNodeEventTrigger']:
        """
        Event trigger for the real-time job node.
        The event_trigger structure is documented below.
        """
        return pulumi.get(self, "event_trigger")

    @_builtins.property
    @pulumi.getter(name="failPolicy")
    def fail_policy(self) -> Optional[_builtins.str]:
        """
        Job failure policy.  
        The valid values are as follows:
        - **SUSPEND**: Suspend the event.
        - **IGNORE**: Ignore the failure and process with the next event.

        The default value is **SUSPEND**.
        """
        return pulumi.get(self, "fail_policy")

    @_builtins.property
    @pulumi.getter(name="maxExecutionTime")
    def max_execution_time(self) -> Optional[_builtins.int]:
        """
        Maximum execution time of a node.  
        If a node is not executed within the maximum execution time, the node is set to the failed state.
        Unit: minute; value range: `5` to `1,440`.
        Default value: `60`.
        """
        return pulumi.get(self, "max_execution_time")

    @_builtins.property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> Optional[_builtins.int]:
        """
        Interval at which node running results are checked.  
        Unit: second; value range: `1` to `60`.
        Default value: `10`.
        """
        return pulumi.get(self, "polling_interval")

    @_builtins.property
    @pulumi.getter(name="preNodeNames")
    def pre_node_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        Name of the previous node on which the current node depends.
        """
        return pulumi.get(self, "pre_node_names")

    @_builtins.property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[_builtins.int]:
        """
        Interval at which a retry is performed upon a failure.  
        The value ranges from `5` to `120`.
        Unit: second.
        Default value: `120`.
        """
        return pulumi.get(self, "retry_interval")

    @_builtins.property
    @pulumi.getter(name="retryTimes")
    def retry_times(self) -> Optional[_builtins.int]:
        """
        Number of the node retries.  
        The value ranges from `0` to `5`. `0` indicates no retry.
        Default value: `0`.
        """
        return pulumi.get(self, "retry_times")


@pulumi.output_type
class FactoryJobNodeCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preNodeName":
            suggest = "pre_node_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FactoryJobNodeCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FactoryJobNodeCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FactoryJobNodeCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: _builtins.str,
                 pre_node_name: _builtins.str):
        """
        :param _builtins.str expression: Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        :param _builtins.str pre_node_name: Name of the previous node on which the current node depends.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "pre_node_name", pre_node_name)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter(name="preNodeName")
    def pre_node_name(self) -> _builtins.str:
        """
        Name of the previous node on which the current node depends.
        """
        return pulumi.get(self, "pre_node_name")


@pulumi.output_type
class FactoryJobNodeCronTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "dependJobs":
            suggest = "depend_jobs"
        elif key == "dependPrePeriod":
            suggest = "depend_pre_period"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "expressionTimeZone":
            suggest = "expression_time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FactoryJobNodeCronTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FactoryJobNodeCronTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FactoryJobNodeCronTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: _builtins.str,
                 start_time: _builtins.str,
                 concurrent: Optional[_builtins.int] = None,
                 depend_jobs: Optional['outputs.FactoryJobNodeCronTriggerDependJobs'] = None,
                 depend_pre_period: Optional[_builtins.bool] = None,
                 end_time: Optional[_builtins.str] = None,
                 expression_time_zone: Optional[_builtins.str] = None,
                 period: Optional[_builtins.str] = None):
        """
        :param _builtins.str expression: Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        :param _builtins.str start_time: Scheduling start time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
               which is an ISO 8601 time format.
               For example, 2018-10-22T23:59:59+08, which indicates that a job starts to be scheduled at 23:59:59
               on October 22nd, 2018.
        :param _builtins.int concurrent: Number of the concurrently scheduled jobs.  
               Value range: `1` to `128`.
               Default value: `1`.
        :param 'FactoryJobNodeCronTriggerDependJobsArgs' depend_jobs: Job dependency configuration.
               The depend_jobs structure is documented below.
               
               <a name="job_ScheduleCronDependJobs"></a>
               The `depend_jobs` block supports:
        :param _builtins.bool depend_pre_period: Indicates whether to depend on the execution result of the current
               job's dependent job in the previous scheduling period.
               Default value: **false**.
        :param _builtins.str end_time: Scheduling end time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
               which is an ISO 8601 time format.
               For example, 2018-10-22T23:59:59+08, which indicates that a job stops to be scheduled at 23:59:59
               on October 22nd, 2018.
               If the end time is not set, the job will continuously be executed based on the scheduling period.
        :param _builtins.str expression_time_zone: Time zone corresponding to the Cron expression.  
               Default value: time zone where DataArts Studio is located
        :param _builtins.str period: Job execution interval consisting of a time and time unit.  
               Example: 1 hours, 1 days, 1 weeks, 1 months.
               The value must match the value of expression.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "start_time", start_time)
        if concurrent is not None:
            pulumi.set(__self__, "concurrent", concurrent)
        if depend_jobs is not None:
            pulumi.set(__self__, "depend_jobs", depend_jobs)
        if depend_pre_period is not None:
            pulumi.set(__self__, "depend_pre_period", depend_pre_period)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if expression_time_zone is not None:
            pulumi.set(__self__, "expression_time_zone", expression_time_zone)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Scheduling start time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job starts to be scheduled at 23:59:59
        on October 22nd, 2018.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def concurrent(self) -> Optional[_builtins.int]:
        """
        Number of the concurrently scheduled jobs.  
        Value range: `1` to `128`.
        Default value: `1`.
        """
        return pulumi.get(self, "concurrent")

    @_builtins.property
    @pulumi.getter(name="dependJobs")
    def depend_jobs(self) -> Optional['outputs.FactoryJobNodeCronTriggerDependJobs']:
        """
        Job dependency configuration.
        The depend_jobs structure is documented below.

        <a name="job_ScheduleCronDependJobs"></a>
        The `depend_jobs` block supports:
        """
        return pulumi.get(self, "depend_jobs")

    @_builtins.property
    @pulumi.getter(name="dependPrePeriod")
    def depend_pre_period(self) -> Optional[_builtins.bool]:
        """
        Indicates whether to depend on the execution result of the current
        job's dependent job in the previous scheduling period.
        Default value: **false**.
        """
        return pulumi.get(self, "depend_pre_period")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Scheduling end time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job stops to be scheduled at 23:59:59
        on October 22nd, 2018.
        If the end time is not set, the job will continuously be executed based on the scheduling period.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="expressionTimeZone")
    def expression_time_zone(self) -> Optional[_builtins.str]:
        """
        Time zone corresponding to the Cron expression.  
        Default value: time zone where DataArts Studio is located
        """
        return pulumi.get(self, "expression_time_zone")

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[_builtins.str]:
        """
        Job execution interval consisting of a time and time unit.  
        Example: 1 hours, 1 days, 1 weeks, 1 months.
        The value must match the value of expression.
        """
        return pulumi.get(self, "period")


@pulumi.output_type
class FactoryJobNodeCronTriggerDependJobs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dependFailPolicy":
            suggest = "depend_fail_policy"
        elif key == "dependPeriod":
            suggest = "depend_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FactoryJobNodeCronTriggerDependJobs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FactoryJobNodeCronTriggerDependJobs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FactoryJobNodeCronTriggerDependJobs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jobs: Sequence[_builtins.str],
                 depend_fail_policy: Optional[_builtins.str] = None,
                 depend_period: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] jobs: A list of dependent jobs. Only the existing jobs can be depended on.
        :param _builtins.str depend_fail_policy: Dependency job failure policy.  
               The valid values are as follows:
               - **FAIL**: Stop the job and set the job to the failed state.
               - **IGNORE**: Continue to run the job.
               - **SUSPEND**: Suspend the job.
               
               The default value is **FAIL**.
               
               <a name="job_ScheduleEvent"></a>
               The `event` block supports:
        :param _builtins.str depend_period: Dependency period.  
               The valid values are as follows:
               - **SAME_PERIOD**: To run a job or not depends on the execution result of its depended job in
               the current scheduling period.
               - **PRE_PERIOD**: To run a job or not depends on the execution result of its depended job in
               the previous scheduling period.
               
               The default value is **SAME_PERIOD**.
        """
        pulumi.set(__self__, "jobs", jobs)
        if depend_fail_policy is not None:
            pulumi.set(__self__, "depend_fail_policy", depend_fail_policy)
        if depend_period is not None:
            pulumi.set(__self__, "depend_period", depend_period)

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence[_builtins.str]:
        """
        A list of dependent jobs. Only the existing jobs can be depended on.
        """
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter(name="dependFailPolicy")
    def depend_fail_policy(self) -> Optional[_builtins.str]:
        """
        Dependency job failure policy.  
        The valid values are as follows:
        - **FAIL**: Stop the job and set the job to the failed state.
        - **IGNORE**: Continue to run the job.
        - **SUSPEND**: Suspend the job.

        The default value is **FAIL**.

        <a name="job_ScheduleEvent"></a>
        The `event` block supports:
        """
        return pulumi.get(self, "depend_fail_policy")

    @_builtins.property
    @pulumi.getter(name="dependPeriod")
    def depend_period(self) -> Optional[_builtins.str]:
        """
        Dependency period.  
        The valid values are as follows:
        - **SAME_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the current scheduling period.
        - **PRE_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the previous scheduling period.

        The default value is **SAME_PERIOD**.
        """
        return pulumi.get(self, "depend_period")


@pulumi.output_type
class FactoryJobNodeEventTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventType":
            suggest = "event_type"
        elif key == "failPolicy":
            suggest = "fail_policy"
        elif key == "readPolicy":
            suggest = "read_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FactoryJobNodeEventTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FactoryJobNodeEventTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FactoryJobNodeEventTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: _builtins.str,
                 event_type: _builtins.str,
                 concurrent: Optional[_builtins.int] = None,
                 fail_policy: Optional[_builtins.str] = None,
                 read_policy: Optional[_builtins.str] = None):
        """
        :param _builtins.str channel: DIS stream name.  
               Perform the following operations to obtain the stream name:
               - Log in to the management console.
               - Click **Data Ingestion Service** and select **Stream Management** from the left navigation pane.
               - The stream management page lists the existing streams.
        :param _builtins.str event_type: Event type.  
               The valid values are as follows:
               - **KAFKA**: Select the corresponding connection name and topic. When a new Kafka message is
               received, the job is triggered.
               - **OBS**: Select the OBS path to be listened to. If new files exist in the path, scheduling is
               triggered. The path name can be referenced using variable Job.trigger.obsNewFiles. The
               prerequisite is that DIS notifications have been configured for the OBS path.
               - **DIS**: Currently, only newly reported data events from the DIS stream can be monitored.
               Each time a data record is reported, the job runs once.
        :param _builtins.int concurrent: Number of the concurrently scheduled jobs.  
               Value range: `1` to `128`.
               Default value: `1`.
        :param _builtins.str fail_policy: Job failure policy.  
               The valid values are as follows:
               - **SUSPEND**: Suspend the event.
               - **IGNORE**: Ignore the failure and process with the next event.
               
               The default value is **SUSPEND**.
        :param _builtins.str read_policy: Access policy.  
               The valid values are as follows:
               - **LAST**: Access data from the last location.
               - **NEW**: Access data from a new location.
               
               The default value is **LAST**.
               
               <a name="job_Param"></a>
               The `params` block supports:
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "event_type", event_type)
        if concurrent is not None:
            pulumi.set(__self__, "concurrent", concurrent)
        if fail_policy is not None:
            pulumi.set(__self__, "fail_policy", fail_policy)
        if read_policy is not None:
            pulumi.set(__self__, "read_policy", read_policy)

    @_builtins.property
    @pulumi.getter
    def channel(self) -> _builtins.str:
        """
        DIS stream name.  
        Perform the following operations to obtain the stream name:
        - Log in to the management console.
        - Click **Data Ingestion Service** and select **Stream Management** from the left navigation pane.
        - The stream management page lists the existing streams.
        """
        return pulumi.get(self, "channel")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> _builtins.str:
        """
        Event type.  
        The valid values are as follows:
        - **KAFKA**: Select the corresponding connection name and topic. When a new Kafka message is
        received, the job is triggered.
        - **OBS**: Select the OBS path to be listened to. If new files exist in the path, scheduling is
        triggered. The path name can be referenced using variable Job.trigger.obsNewFiles. The
        prerequisite is that DIS notifications have been configured for the OBS path.
        - **DIS**: Currently, only newly reported data events from the DIS stream can be monitored.
        Each time a data record is reported, the job runs once.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter
    def concurrent(self) -> Optional[_builtins.int]:
        """
        Number of the concurrently scheduled jobs.  
        Value range: `1` to `128`.
        Default value: `1`.
        """
        return pulumi.get(self, "concurrent")

    @_builtins.property
    @pulumi.getter(name="failPolicy")
    def fail_policy(self) -> Optional[_builtins.str]:
        """
        Job failure policy.  
        The valid values are as follows:
        - **SUSPEND**: Suspend the event.
        - **IGNORE**: Ignore the failure and process with the next event.

        The default value is **SUSPEND**.
        """
        return pulumi.get(self, "fail_policy")

    @_builtins.property
    @pulumi.getter(name="readPolicy")
    def read_policy(self) -> Optional[_builtins.str]:
        """
        Access policy.  
        The valid values are as follows:
        - **LAST**: Access data from the last location.
        - **NEW**: Access data from a new location.

        The default value is **LAST**.

        <a name="job_Param"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "read_policy")


@pulumi.output_type
class FactoryJobNodeLocation(dict):
    def __init__(__self__, *,
                 x: _builtins.int,
                 y: _builtins.int):
        """
        :param _builtins.int x: Position of the node on the horizontal axis of the job canvas.
        :param _builtins.int y: Position of the node on the vertical axis of the job canvas.
               
               <a name="job_Condition"></a>
               The `conditions` block supports:
        """
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @_builtins.property
    @pulumi.getter
    def x(self) -> _builtins.int:
        """
        Position of the node on the horizontal axis of the job canvas.
        """
        return pulumi.get(self, "x")

    @_builtins.property
    @pulumi.getter
    def y(self) -> _builtins.int:
        """
        Position of the node on the vertical axis of the job canvas.

        <a name="job_Condition"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "y")


@pulumi.output_type
class FactoryJobNodeProperty(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Name of a parameter.  
               The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
               underscores (_).
        :param _builtins.str value: Value of the parameter.  
               It cannot exceed 1024 characters.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Value of the parameter.  
        It cannot exceed 1024 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FactoryJobParam(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Name of a parameter.  
               The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
               underscores (_).
        :param _builtins.str value: Value of the parameter.  
               It cannot exceed 1024 characters.
        :param _builtins.str type: Parameter type.  
               The valid values are as follows:
               - **variable**
               - **constants**
               
               Defaults to **variable**.
               
               <a name="job_BasicConfig"></a>
               The `basic_config` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value of the parameter.  
        It cannot exceed 1024 characters.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Parameter type.  
        The valid values are as follows:
        - **variable**
        - **constants**

        Defaults to **variable**.

        <a name="job_BasicConfig"></a>
        The `basic_config` block supports:
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FactoryJobSchedule(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 cron: Optional['outputs.FactoryJobScheduleCron'] = None,
                 event: Optional['outputs.FactoryJobScheduleEvent'] = None):
        """
        :param _builtins.str type: Parameter type.  
               The valid values are as follows:
               - **variable**
               - **constants**
               
               Defaults to **variable**.
               
               <a name="job_BasicConfig"></a>
               The `basic_config` block supports:
        :param 'FactoryJobScheduleCronArgs' cron: When `type` is set to **CRON**, configure the scheduling frequency and start time.
               The cron structure is documented below.
        :param 'FactoryJobScheduleEventArgs' event: When `type` is set to **EVENT**, configure information such as the event source.
               The Event structure is documented below.
               
               <a name="job_ScheduleCron"></a>
               The `cron` block supports:
        """
        pulumi.set(__self__, "type", type)
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if event is not None:
            pulumi.set(__self__, "event", event)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Parameter type.  
        The valid values are as follows:
        - **variable**
        - **constants**

        Defaults to **variable**.

        <a name="job_BasicConfig"></a>
        The `basic_config` block supports:
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def cron(self) -> Optional['outputs.FactoryJobScheduleCron']:
        """
        When `type` is set to **CRON**, configure the scheduling frequency and start time.
        The cron structure is documented below.
        """
        return pulumi.get(self, "cron")

    @_builtins.property
    @pulumi.getter
    def event(self) -> Optional['outputs.FactoryJobScheduleEvent']:
        """
        When `type` is set to **EVENT**, configure information such as the event source.
        The Event structure is documented below.

        <a name="job_ScheduleCron"></a>
        The `cron` block supports:
        """
        return pulumi.get(self, "event")


@pulumi.output_type
class FactoryJobScheduleCron(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "dependJobs":
            suggest = "depend_jobs"
        elif key == "dependPrePeriod":
            suggest = "depend_pre_period"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "expressionTimeZone":
            suggest = "expression_time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FactoryJobScheduleCron. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FactoryJobScheduleCron.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FactoryJobScheduleCron.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: _builtins.str,
                 start_time: _builtins.str,
                 depend_jobs: Optional['outputs.FactoryJobScheduleCronDependJobs'] = None,
                 depend_pre_period: Optional[_builtins.bool] = None,
                 end_time: Optional[_builtins.str] = None,
                 expression_time_zone: Optional[_builtins.str] = None):
        """
        :param _builtins.str expression: Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        :param _builtins.str start_time: Scheduling start time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
               which is an ISO 8601 time format.
               For example, 2018-10-22T23:59:59+08, which indicates that a job starts to be scheduled at 23:59:59
               on October 22nd, 2018.
        :param 'FactoryJobScheduleCronDependJobsArgs' depend_jobs: Job dependency configuration.
               The depend_jobs structure is documented below.
               
               <a name="job_ScheduleCronDependJobs"></a>
               The `depend_jobs` block supports:
        :param _builtins.bool depend_pre_period: Indicates whether to depend on the execution result of the current
               job's dependent job in the previous scheduling period.
               Default value: **false**.
        :param _builtins.str end_time: Scheduling end time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
               which is an ISO 8601 time format.
               For example, 2018-10-22T23:59:59+08, which indicates that a job stops to be scheduled at 23:59:59
               on October 22nd, 2018.
               If the end time is not set, the job will continuously be executed based on the scheduling period.
        :param _builtins.str expression_time_zone: Time zone corresponding to the Cron expression.  
               Default value: time zone where DataArts Studio is located
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "start_time", start_time)
        if depend_jobs is not None:
            pulumi.set(__self__, "depend_jobs", depend_jobs)
        if depend_pre_period is not None:
            pulumi.set(__self__, "depend_pre_period", depend_pre_period)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if expression_time_zone is not None:
            pulumi.set(__self__, "expression_time_zone", expression_time_zone)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Scheduling start time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job starts to be scheduled at 23:59:59
        on October 22nd, 2018.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="dependJobs")
    def depend_jobs(self) -> Optional['outputs.FactoryJobScheduleCronDependJobs']:
        """
        Job dependency configuration.
        The depend_jobs structure is documented below.

        <a name="job_ScheduleCronDependJobs"></a>
        The `depend_jobs` block supports:
        """
        return pulumi.get(self, "depend_jobs")

    @_builtins.property
    @pulumi.getter(name="dependPrePeriod")
    def depend_pre_period(self) -> Optional[_builtins.bool]:
        """
        Indicates whether to depend on the execution result of the current
        job's dependent job in the previous scheduling period.
        Default value: **false**.
        """
        return pulumi.get(self, "depend_pre_period")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Scheduling end time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job stops to be scheduled at 23:59:59
        on October 22nd, 2018.
        If the end time is not set, the job will continuously be executed based on the scheduling period.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="expressionTimeZone")
    def expression_time_zone(self) -> Optional[_builtins.str]:
        """
        Time zone corresponding to the Cron expression.  
        Default value: time zone where DataArts Studio is located
        """
        return pulumi.get(self, "expression_time_zone")


@pulumi.output_type
class FactoryJobScheduleCronDependJobs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dependFailPolicy":
            suggest = "depend_fail_policy"
        elif key == "dependPeriod":
            suggest = "depend_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FactoryJobScheduleCronDependJobs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FactoryJobScheduleCronDependJobs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FactoryJobScheduleCronDependJobs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jobs: Sequence[_builtins.str],
                 depend_fail_policy: Optional[_builtins.str] = None,
                 depend_period: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] jobs: A list of dependent jobs. Only the existing jobs can be depended on.
        :param _builtins.str depend_fail_policy: Dependency job failure policy.  
               The valid values are as follows:
               - **FAIL**: Stop the job and set the job to the failed state.
               - **IGNORE**: Continue to run the job.
               - **SUSPEND**: Suspend the job.
               
               The default value is **FAIL**.
               
               <a name="job_ScheduleEvent"></a>
               The `event` block supports:
        :param _builtins.str depend_period: Dependency period.  
               The valid values are as follows:
               - **SAME_PERIOD**: To run a job or not depends on the execution result of its depended job in
               the current scheduling period.
               - **PRE_PERIOD**: To run a job or not depends on the execution result of its depended job in
               the previous scheduling period.
               
               The default value is **SAME_PERIOD**.
        """
        pulumi.set(__self__, "jobs", jobs)
        if depend_fail_policy is not None:
            pulumi.set(__self__, "depend_fail_policy", depend_fail_policy)
        if depend_period is not None:
            pulumi.set(__self__, "depend_period", depend_period)

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence[_builtins.str]:
        """
        A list of dependent jobs. Only the existing jobs can be depended on.
        """
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter(name="dependFailPolicy")
    def depend_fail_policy(self) -> Optional[_builtins.str]:
        """
        Dependency job failure policy.  
        The valid values are as follows:
        - **FAIL**: Stop the job and set the job to the failed state.
        - **IGNORE**: Continue to run the job.
        - **SUSPEND**: Suspend the job.

        The default value is **FAIL**.

        <a name="job_ScheduleEvent"></a>
        The `event` block supports:
        """
        return pulumi.get(self, "depend_fail_policy")

    @_builtins.property
    @pulumi.getter(name="dependPeriod")
    def depend_period(self) -> Optional[_builtins.str]:
        """
        Dependency period.  
        The valid values are as follows:
        - **SAME_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the current scheduling period.
        - **PRE_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the previous scheduling period.

        The default value is **SAME_PERIOD**.
        """
        return pulumi.get(self, "depend_period")


@pulumi.output_type
class FactoryJobScheduleEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventType":
            suggest = "event_type"
        elif key == "failPolicy":
            suggest = "fail_policy"
        elif key == "readPolicy":
            suggest = "read_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FactoryJobScheduleEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FactoryJobScheduleEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FactoryJobScheduleEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: _builtins.str,
                 event_type: _builtins.str,
                 concurrent: Optional[_builtins.int] = None,
                 fail_policy: Optional[_builtins.str] = None,
                 read_policy: Optional[_builtins.str] = None):
        """
        :param _builtins.str channel: DIS stream name.  
               Perform the following operations to obtain the stream name:
               - Log in to the management console.
               - Click **Data Ingestion Service** and select **Stream Management** from the left navigation pane.
               - The stream management page lists the existing streams.
        :param _builtins.str event_type: Event type.  
               The valid values are as follows:
               - **KAFKA**: Select the corresponding connection name and topic. When a new Kafka message is
               received, the job is triggered.
               - **OBS**: Select the OBS path to be listened to. If new files exist in the path, scheduling is
               triggered. The path name can be referenced using variable Job.trigger.obsNewFiles. The
               prerequisite is that DIS notifications have been configured for the OBS path.
               - **DIS**: Currently, only newly reported data events from the DIS stream can be monitored.
               Each time a data record is reported, the job runs once.
        :param _builtins.int concurrent: Number of the concurrently scheduled jobs.  
               Value range: `1` to `128`.
               Default value: `1`.
        :param _builtins.str fail_policy: Job failure policy.  
               The valid values are as follows:
               - **SUSPEND**: Suspend the event.
               - **IGNORE**: Ignore the failure and process with the next event.
               
               The default value is **SUSPEND**.
        :param _builtins.str read_policy: Access policy.  
               The valid values are as follows:
               - **LAST**: Access data from the last location.
               - **NEW**: Access data from a new location.
               
               The default value is **LAST**.
               
               <a name="job_Param"></a>
               The `params` block supports:
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "event_type", event_type)
        if concurrent is not None:
            pulumi.set(__self__, "concurrent", concurrent)
        if fail_policy is not None:
            pulumi.set(__self__, "fail_policy", fail_policy)
        if read_policy is not None:
            pulumi.set(__self__, "read_policy", read_policy)

    @_builtins.property
    @pulumi.getter
    def channel(self) -> _builtins.str:
        """
        DIS stream name.  
        Perform the following operations to obtain the stream name:
        - Log in to the management console.
        - Click **Data Ingestion Service** and select **Stream Management** from the left navigation pane.
        - The stream management page lists the existing streams.
        """
        return pulumi.get(self, "channel")

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> _builtins.str:
        """
        Event type.  
        The valid values are as follows:
        - **KAFKA**: Select the corresponding connection name and topic. When a new Kafka message is
        received, the job is triggered.
        - **OBS**: Select the OBS path to be listened to. If new files exist in the path, scheduling is
        triggered. The path name can be referenced using variable Job.trigger.obsNewFiles. The
        prerequisite is that DIS notifications have been configured for the OBS path.
        - **DIS**: Currently, only newly reported data events from the DIS stream can be monitored.
        Each time a data record is reported, the job runs once.
        """
        return pulumi.get(self, "event_type")

    @_builtins.property
    @pulumi.getter
    def concurrent(self) -> Optional[_builtins.int]:
        """
        Number of the concurrently scheduled jobs.  
        Value range: `1` to `128`.
        Default value: `1`.
        """
        return pulumi.get(self, "concurrent")

    @_builtins.property
    @pulumi.getter(name="failPolicy")
    def fail_policy(self) -> Optional[_builtins.str]:
        """
        Job failure policy.  
        The valid values are as follows:
        - **SUSPEND**: Suspend the event.
        - **IGNORE**: Ignore the failure and process with the next event.

        The default value is **SUSPEND**.
        """
        return pulumi.get(self, "fail_policy")

    @_builtins.property
    @pulumi.getter(name="readPolicy")
    def read_policy(self) -> Optional[_builtins.str]:
        """
        Access policy.  
        The valid values are as follows:
        - **LAST**: Access data from the last location.
        - **NEW**: Access data from a new location.

        The default value is **LAST**.

        <a name="job_Param"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "read_policy")


@pulumi.output_type
class FactoryResourceDependPackage(dict):
    def __init__(__self__, *,
                 location: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str location: Specifies the path of the dependent file. Currently, only OBS paths is
               supported.
        :param _builtins.str type: Specifies the type of the dependent file. The valid values are **file**,
               **jar** and **pyFile**.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Specifies the path of the dependent file. Currently, only OBS paths is
        supported.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the dependent file. The valid values are **file**,
        **jar** and **pyFile**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FactoryScriptApprover(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "approverName":
            suggest = "approver_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FactoryScriptApprover. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FactoryScriptApprover.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FactoryScriptApprover.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 approver_name: _builtins.str):
        """
        :param _builtins.str approver_name: Specifies the approver name of script.
        """
        pulumi.set(__self__, "approver_name", approver_name)

    @_builtins.property
    @pulumi.getter(name="approverName")
    def approver_name(self) -> _builtins.str:
        """
        Specifies the approver name of script.
        """
        return pulumi.get(self, "approver_name")


@pulumi.output_type
class GetArchitectureDsTemplateOptionalsOptionalFieldResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 description_en: _builtins.str,
                 fd_name: _builtins.str,
                 required: _builtins.bool,
                 searchable: _builtins.bool):
        """
        :param _builtins.str description: Indicates the description of the field.
        :param _builtins.str description_en: Indicates the English description of the field.
        :param _builtins.str fd_name: Specifies the name of the optional field.
        :param _builtins.bool required: Specifies whether the field is required. Defaults to **false**.
        :param _builtins.bool searchable: Specifies whether the field is search supported. Defaults to **false**.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_en", description_en)
        pulumi.set(__self__, "fd_name", fd_name)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "searchable", searchable)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the field.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionEn")
    def description_en(self) -> _builtins.str:
        """
        Indicates the English description of the field.
        """
        return pulumi.get(self, "description_en")

    @_builtins.property
    @pulumi.getter(name="fdName")
    def fd_name(self) -> _builtins.str:
        """
        Specifies the name of the optional field.
        """
        return pulumi.get(self, "fd_name")

    @_builtins.property
    @pulumi.getter
    def required(self) -> _builtins.bool:
        """
        Specifies whether the field is required. Defaults to **false**.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def searchable(self) -> _builtins.bool:
        """
        Specifies whether the field is search supported. Defaults to **false**.
        """
        return pulumi.get(self, "searchable")


@pulumi.output_type
class GetArchitectureModelStatisticDmResult(dict):
    def __init__(__self__, *,
                 biz_type: _builtins.str,
                 db: _builtins.int,
                 fd: _builtins.int,
                 fd_published: _builtins.int,
                 level: _builtins.str,
                 models: Sequence['outputs.GetArchitectureModelStatisticDmModelResult'],
                 st: _builtins.float,
                 st_published: _builtins.float,
                 tb: _builtins.int,
                 tb_published: _builtins.int):
        """
        :param _builtins.str biz_type: The service type.
        :param _builtins.int db: The total database number.
        :param _builtins.int fd: The total field number.
        :param _builtins.int fd_published: The published field number.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param Sequence['GetArchitectureModelStatisticDmModelArgs'] models: The model detail.
               The model structure is documented below.
        :param _builtins.float st: The standard coverage.
        :param _builtins.float st_published: The published standard coverage.
        :param _builtins.int tb: The total data table number.
        :param _builtins.int tb_published: The published data table number.
        """
        pulumi.set(__self__, "biz_type", biz_type)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "fd", fd)
        pulumi.set(__self__, "fd_published", fd_published)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "models", models)
        pulumi.set(__self__, "st", st)
        pulumi.set(__self__, "st_published", st_published)
        pulumi.set(__self__, "tb", tb)
        pulumi.set(__self__, "tb_published", tb_published)

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> _builtins.str:
        """
        The service type.
        """
        return pulumi.get(self, "biz_type")

    @_builtins.property
    @pulumi.getter
    def db(self) -> _builtins.int:
        """
        The total database number.
        """
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter
    def fd(self) -> _builtins.int:
        """
        The total field number.
        """
        return pulumi.get(self, "fd")

    @_builtins.property
    @pulumi.getter(name="fdPublished")
    def fd_published(self) -> _builtins.int:
        """
        The published field number.
        """
        return pulumi.get(self, "fd_published")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def models(self) -> Sequence['outputs.GetArchitectureModelStatisticDmModelResult']:
        """
        The model detail.
        The model structure is documented below.
        """
        return pulumi.get(self, "models")

    @_builtins.property
    @pulumi.getter
    def st(self) -> _builtins.float:
        """
        The standard coverage.
        """
        return pulumi.get(self, "st")

    @_builtins.property
    @pulumi.getter(name="stPublished")
    def st_published(self) -> _builtins.float:
        """
        The published standard coverage.
        """
        return pulumi.get(self, "st_published")

    @_builtins.property
    @pulumi.getter
    def tb(self) -> _builtins.int:
        """
        The total data table number.
        """
        return pulumi.get(self, "tb")

    @_builtins.property
    @pulumi.getter(name="tbPublished")
    def tb_published(self) -> _builtins.int:
        """
        The published data table number.
        """
        return pulumi.get(self, "tb_published")


@pulumi.output_type
class GetArchitectureModelStatisticDmModelResult(dict):
    def __init__(__self__, *,
                 biz_catalog_ids: _builtins.str,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 databases: Sequence[_builtins.str],
                 description: _builtins.str,
                 dw_type: _builtins.str,
                 frequent: _builtins.bool,
                 id: _builtins.str,
                 is_physical: _builtins.bool,
                 level: _builtins.str,
                 name: _builtins.str,
                 table_model_prefix: _builtins.str,
                 top: _builtins.bool,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 updated_by: _builtins.str):
        """
        :param _builtins.str biz_catalog_ids: The ID list of associated service catalogs.
        :param _builtins.str created_at: The creation time of the model (workspace), in RFC3339 format.
        :param _builtins.str created_by: The person who creates the model (workspace).
        :param Sequence[_builtins.str] databases: The list of database names.
        :param _builtins.str description: The description of the model (workspace).
        :param _builtins.str dw_type: The type of the data connection.
        :param _builtins.bool frequent: Whether the model (workspace) is frequently used.
        :param _builtins.str id: The ID of the model (workspace).
        :param _builtins.bool is_physical: Whether a table is a physical table.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param _builtins.str name: The name of the model (workspace).
        :param _builtins.str table_model_prefix: The verification prefix of the model (workspace).
        :param _builtins.bool top: Whether the model (workspace) is hierarchical governance.
        :param _builtins.str type: The type of the model (workspace).  
               The valid values are as follows:
               + **THIRD_NF**: relational modeling
               + **DIMENSION**: dimensional modeling
        :param _builtins.str updated_at: The latest update time of the model (workspace), in RFC3339 format.
        :param _builtins.str updated_by: The person who updates the model (workspace).
        """
        pulumi.set(__self__, "biz_catalog_ids", biz_catalog_ids)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dw_type", dw_type)
        pulumi.set(__self__, "frequent", frequent)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_physical", is_physical)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "table_model_prefix", table_model_prefix)
        pulumi.set(__self__, "top", top)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="bizCatalogIds")
    def biz_catalog_ids(self) -> _builtins.str:
        """
        The ID list of associated service catalogs.
        """
        return pulumi.get(self, "biz_catalog_ids")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The person who creates the model (workspace).
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence[_builtins.str]:
        """
        The list of database names.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the model (workspace).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> _builtins.str:
        """
        The type of the data connection.
        """
        return pulumi.get(self, "dw_type")

    @_builtins.property
    @pulumi.getter
    def frequent(self) -> _builtins.bool:
        """
        Whether the model (workspace) is frequently used.
        """
        return pulumi.get(self, "frequent")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the model (workspace).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPhysical")
    def is_physical(self) -> _builtins.bool:
        """
        Whether a table is a physical table.
        """
        return pulumi.get(self, "is_physical")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the model (workspace).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tableModelPrefix")
    def table_model_prefix(self) -> _builtins.str:
        """
        The verification prefix of the model (workspace).
        """
        return pulumi.get(self, "table_model_prefix")

    @_builtins.property
    @pulumi.getter
    def top(self) -> _builtins.bool:
        """
        Whether the model (workspace) is hierarchical governance.
        """
        return pulumi.get(self, "top")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the model (workspace).  
        The valid values are as follows:
        + **THIRD_NF**: relational modeling
        + **DIMENSION**: dimensional modeling
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The person who updates the model (workspace).
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetArchitectureModelStatisticDwrResult(dict):
    def __init__(__self__, *,
                 biz_type: _builtins.str,
                 db: _builtins.int,
                 fd: _builtins.int,
                 fd_published: _builtins.int,
                 level: _builtins.str,
                 models: Sequence['outputs.GetArchitectureModelStatisticDwrModelResult'],
                 st: _builtins.float,
                 st_published: _builtins.float,
                 tb: _builtins.int,
                 tb_published: _builtins.int):
        """
        :param _builtins.str biz_type: The service type.
        :param _builtins.int db: The total database number.
        :param _builtins.int fd: The total field number.
        :param _builtins.int fd_published: The published field number.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param Sequence['GetArchitectureModelStatisticDwrModelArgs'] models: The model detail.
               The model structure is documented below.
        :param _builtins.float st: The standard coverage.
        :param _builtins.float st_published: The published standard coverage.
        :param _builtins.int tb: The total data table number.
        :param _builtins.int tb_published: The published data table number.
        """
        pulumi.set(__self__, "biz_type", biz_type)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "fd", fd)
        pulumi.set(__self__, "fd_published", fd_published)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "models", models)
        pulumi.set(__self__, "st", st)
        pulumi.set(__self__, "st_published", st_published)
        pulumi.set(__self__, "tb", tb)
        pulumi.set(__self__, "tb_published", tb_published)

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> _builtins.str:
        """
        The service type.
        """
        return pulumi.get(self, "biz_type")

    @_builtins.property
    @pulumi.getter
    def db(self) -> _builtins.int:
        """
        The total database number.
        """
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter
    def fd(self) -> _builtins.int:
        """
        The total field number.
        """
        return pulumi.get(self, "fd")

    @_builtins.property
    @pulumi.getter(name="fdPublished")
    def fd_published(self) -> _builtins.int:
        """
        The published field number.
        """
        return pulumi.get(self, "fd_published")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def models(self) -> Sequence['outputs.GetArchitectureModelStatisticDwrModelResult']:
        """
        The model detail.
        The model structure is documented below.
        """
        return pulumi.get(self, "models")

    @_builtins.property
    @pulumi.getter
    def st(self) -> _builtins.float:
        """
        The standard coverage.
        """
        return pulumi.get(self, "st")

    @_builtins.property
    @pulumi.getter(name="stPublished")
    def st_published(self) -> _builtins.float:
        """
        The published standard coverage.
        """
        return pulumi.get(self, "st_published")

    @_builtins.property
    @pulumi.getter
    def tb(self) -> _builtins.int:
        """
        The total data table number.
        """
        return pulumi.get(self, "tb")

    @_builtins.property
    @pulumi.getter(name="tbPublished")
    def tb_published(self) -> _builtins.int:
        """
        The published data table number.
        """
        return pulumi.get(self, "tb_published")


@pulumi.output_type
class GetArchitectureModelStatisticDwrModelResult(dict):
    def __init__(__self__, *,
                 biz_catalog_ids: _builtins.str,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 databases: Sequence[_builtins.str],
                 description: _builtins.str,
                 dw_type: _builtins.str,
                 frequent: _builtins.bool,
                 id: _builtins.str,
                 is_physical: _builtins.bool,
                 level: _builtins.str,
                 name: _builtins.str,
                 table_model_prefix: _builtins.str,
                 top: _builtins.bool,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 updated_by: _builtins.str):
        """
        :param _builtins.str biz_catalog_ids: The ID list of associated service catalogs.
        :param _builtins.str created_at: The creation time of the model (workspace), in RFC3339 format.
        :param _builtins.str created_by: The person who creates the model (workspace).
        :param Sequence[_builtins.str] databases: The list of database names.
        :param _builtins.str description: The description of the model (workspace).
        :param _builtins.str dw_type: The type of the data connection.
        :param _builtins.bool frequent: Whether the model (workspace) is frequently used.
        :param _builtins.str id: The ID of the model (workspace).
        :param _builtins.bool is_physical: Whether a table is a physical table.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param _builtins.str name: The name of the model (workspace).
        :param _builtins.str table_model_prefix: The verification prefix of the model (workspace).
        :param _builtins.bool top: Whether the model (workspace) is hierarchical governance.
        :param _builtins.str type: The type of the model (workspace).  
               The valid values are as follows:
               + **THIRD_NF**: relational modeling
               + **DIMENSION**: dimensional modeling
        :param _builtins.str updated_at: The latest update time of the model (workspace), in RFC3339 format.
        :param _builtins.str updated_by: The person who updates the model (workspace).
        """
        pulumi.set(__self__, "biz_catalog_ids", biz_catalog_ids)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dw_type", dw_type)
        pulumi.set(__self__, "frequent", frequent)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_physical", is_physical)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "table_model_prefix", table_model_prefix)
        pulumi.set(__self__, "top", top)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="bizCatalogIds")
    def biz_catalog_ids(self) -> _builtins.str:
        """
        The ID list of associated service catalogs.
        """
        return pulumi.get(self, "biz_catalog_ids")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The person who creates the model (workspace).
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence[_builtins.str]:
        """
        The list of database names.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the model (workspace).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> _builtins.str:
        """
        The type of the data connection.
        """
        return pulumi.get(self, "dw_type")

    @_builtins.property
    @pulumi.getter
    def frequent(self) -> _builtins.bool:
        """
        Whether the model (workspace) is frequently used.
        """
        return pulumi.get(self, "frequent")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the model (workspace).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPhysical")
    def is_physical(self) -> _builtins.bool:
        """
        Whether a table is a physical table.
        """
        return pulumi.get(self, "is_physical")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the model (workspace).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tableModelPrefix")
    def table_model_prefix(self) -> _builtins.str:
        """
        The verification prefix of the model (workspace).
        """
        return pulumi.get(self, "table_model_prefix")

    @_builtins.property
    @pulumi.getter
    def top(self) -> _builtins.bool:
        """
        Whether the model (workspace) is hierarchical governance.
        """
        return pulumi.get(self, "top")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the model (workspace).  
        The valid values are as follows:
        + **THIRD_NF**: relational modeling
        + **DIMENSION**: dimensional modeling
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The person who updates the model (workspace).
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetArchitectureModelStatisticFrequentResult(dict):
    def __init__(__self__, *,
                 biz_type: _builtins.str,
                 db: _builtins.int,
                 fd: _builtins.int,
                 fd_published: _builtins.int,
                 level: _builtins.str,
                 models: Sequence['outputs.GetArchitectureModelStatisticFrequentModelResult'],
                 st: _builtins.float,
                 st_published: _builtins.float,
                 tb: _builtins.int,
                 tb_published: _builtins.int):
        """
        :param _builtins.str biz_type: The service type.
        :param _builtins.int db: The total database number.
        :param _builtins.int fd: The total field number.
        :param _builtins.int fd_published: The published field number.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param Sequence['GetArchitectureModelStatisticFrequentModelArgs'] models: The model detail.
               The model structure is documented below.
        :param _builtins.float st: The standard coverage.
        :param _builtins.float st_published: The published standard coverage.
        :param _builtins.int tb: The total data table number.
        :param _builtins.int tb_published: The published data table number.
        """
        pulumi.set(__self__, "biz_type", biz_type)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "fd", fd)
        pulumi.set(__self__, "fd_published", fd_published)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "models", models)
        pulumi.set(__self__, "st", st)
        pulumi.set(__self__, "st_published", st_published)
        pulumi.set(__self__, "tb", tb)
        pulumi.set(__self__, "tb_published", tb_published)

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> _builtins.str:
        """
        The service type.
        """
        return pulumi.get(self, "biz_type")

    @_builtins.property
    @pulumi.getter
    def db(self) -> _builtins.int:
        """
        The total database number.
        """
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter
    def fd(self) -> _builtins.int:
        """
        The total field number.
        """
        return pulumi.get(self, "fd")

    @_builtins.property
    @pulumi.getter(name="fdPublished")
    def fd_published(self) -> _builtins.int:
        """
        The published field number.
        """
        return pulumi.get(self, "fd_published")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def models(self) -> Sequence['outputs.GetArchitectureModelStatisticFrequentModelResult']:
        """
        The model detail.
        The model structure is documented below.
        """
        return pulumi.get(self, "models")

    @_builtins.property
    @pulumi.getter
    def st(self) -> _builtins.float:
        """
        The standard coverage.
        """
        return pulumi.get(self, "st")

    @_builtins.property
    @pulumi.getter(name="stPublished")
    def st_published(self) -> _builtins.float:
        """
        The published standard coverage.
        """
        return pulumi.get(self, "st_published")

    @_builtins.property
    @pulumi.getter
    def tb(self) -> _builtins.int:
        """
        The total data table number.
        """
        return pulumi.get(self, "tb")

    @_builtins.property
    @pulumi.getter(name="tbPublished")
    def tb_published(self) -> _builtins.int:
        """
        The published data table number.
        """
        return pulumi.get(self, "tb_published")


@pulumi.output_type
class GetArchitectureModelStatisticFrequentModelResult(dict):
    def __init__(__self__, *,
                 biz_catalog_ids: _builtins.str,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 databases: Sequence[_builtins.str],
                 description: _builtins.str,
                 dw_type: _builtins.str,
                 frequent: _builtins.bool,
                 id: _builtins.str,
                 is_physical: _builtins.bool,
                 level: _builtins.str,
                 name: _builtins.str,
                 table_model_prefix: _builtins.str,
                 top: _builtins.bool,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 updated_by: _builtins.str):
        """
        :param _builtins.str biz_catalog_ids: The ID list of associated service catalogs.
        :param _builtins.str created_at: The creation time of the model (workspace), in RFC3339 format.
        :param _builtins.str created_by: The person who creates the model (workspace).
        :param Sequence[_builtins.str] databases: The list of database names.
        :param _builtins.str description: The description of the model (workspace).
        :param _builtins.str dw_type: The type of the data connection.
        :param _builtins.bool frequent: Whether the model (workspace) is frequently used.
        :param _builtins.str id: The ID of the model (workspace).
        :param _builtins.bool is_physical: Whether a table is a physical table.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param _builtins.str name: The name of the model (workspace).
        :param _builtins.str table_model_prefix: The verification prefix of the model (workspace).
        :param _builtins.bool top: Whether the model (workspace) is hierarchical governance.
        :param _builtins.str type: The type of the model (workspace).  
               The valid values are as follows:
               + **THIRD_NF**: relational modeling
               + **DIMENSION**: dimensional modeling
        :param _builtins.str updated_at: The latest update time of the model (workspace), in RFC3339 format.
        :param _builtins.str updated_by: The person who updates the model (workspace).
        """
        pulumi.set(__self__, "biz_catalog_ids", biz_catalog_ids)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dw_type", dw_type)
        pulumi.set(__self__, "frequent", frequent)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_physical", is_physical)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "table_model_prefix", table_model_prefix)
        pulumi.set(__self__, "top", top)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="bizCatalogIds")
    def biz_catalog_ids(self) -> _builtins.str:
        """
        The ID list of associated service catalogs.
        """
        return pulumi.get(self, "biz_catalog_ids")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The person who creates the model (workspace).
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence[_builtins.str]:
        """
        The list of database names.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the model (workspace).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> _builtins.str:
        """
        The type of the data connection.
        """
        return pulumi.get(self, "dw_type")

    @_builtins.property
    @pulumi.getter
    def frequent(self) -> _builtins.bool:
        """
        Whether the model (workspace) is frequently used.
        """
        return pulumi.get(self, "frequent")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the model (workspace).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPhysical")
    def is_physical(self) -> _builtins.bool:
        """
        Whether a table is a physical table.
        """
        return pulumi.get(self, "is_physical")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the model (workspace).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tableModelPrefix")
    def table_model_prefix(self) -> _builtins.str:
        """
        The verification prefix of the model (workspace).
        """
        return pulumi.get(self, "table_model_prefix")

    @_builtins.property
    @pulumi.getter
    def top(self) -> _builtins.bool:
        """
        Whether the model (workspace) is hierarchical governance.
        """
        return pulumi.get(self, "top")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the model (workspace).  
        The valid values are as follows:
        + **THIRD_NF**: relational modeling
        + **DIMENSION**: dimensional modeling
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The person who updates the model (workspace).
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetArchitectureModelStatisticLogicResult(dict):
    def __init__(__self__, *,
                 biz_type: _builtins.str,
                 db: _builtins.int,
                 fd: _builtins.int,
                 fd_published: _builtins.int,
                 level: _builtins.str,
                 models: Sequence['outputs.GetArchitectureModelStatisticLogicModelResult'],
                 st: _builtins.float,
                 st_published: _builtins.float,
                 tb: _builtins.int,
                 tb_published: _builtins.int):
        """
        :param _builtins.str biz_type: The service type.
        :param _builtins.int db: The total database number.
        :param _builtins.int fd: The total field number.
        :param _builtins.int fd_published: The published field number.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param Sequence['GetArchitectureModelStatisticLogicModelArgs'] models: The model detail.
               The model structure is documented below.
        :param _builtins.float st: The standard coverage.
        :param _builtins.float st_published: The published standard coverage.
        :param _builtins.int tb: The total data table number.
        :param _builtins.int tb_published: The published data table number.
        """
        pulumi.set(__self__, "biz_type", biz_type)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "fd", fd)
        pulumi.set(__self__, "fd_published", fd_published)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "models", models)
        pulumi.set(__self__, "st", st)
        pulumi.set(__self__, "st_published", st_published)
        pulumi.set(__self__, "tb", tb)
        pulumi.set(__self__, "tb_published", tb_published)

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> _builtins.str:
        """
        The service type.
        """
        return pulumi.get(self, "biz_type")

    @_builtins.property
    @pulumi.getter
    def db(self) -> _builtins.int:
        """
        The total database number.
        """
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter
    def fd(self) -> _builtins.int:
        """
        The total field number.
        """
        return pulumi.get(self, "fd")

    @_builtins.property
    @pulumi.getter(name="fdPublished")
    def fd_published(self) -> _builtins.int:
        """
        The published field number.
        """
        return pulumi.get(self, "fd_published")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def models(self) -> Sequence['outputs.GetArchitectureModelStatisticLogicModelResult']:
        """
        The model detail.
        The model structure is documented below.
        """
        return pulumi.get(self, "models")

    @_builtins.property
    @pulumi.getter
    def st(self) -> _builtins.float:
        """
        The standard coverage.
        """
        return pulumi.get(self, "st")

    @_builtins.property
    @pulumi.getter(name="stPublished")
    def st_published(self) -> _builtins.float:
        """
        The published standard coverage.
        """
        return pulumi.get(self, "st_published")

    @_builtins.property
    @pulumi.getter
    def tb(self) -> _builtins.int:
        """
        The total data table number.
        """
        return pulumi.get(self, "tb")

    @_builtins.property
    @pulumi.getter(name="tbPublished")
    def tb_published(self) -> _builtins.int:
        """
        The published data table number.
        """
        return pulumi.get(self, "tb_published")


@pulumi.output_type
class GetArchitectureModelStatisticLogicModelResult(dict):
    def __init__(__self__, *,
                 biz_catalog_ids: _builtins.str,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 databases: Sequence[_builtins.str],
                 description: _builtins.str,
                 dw_type: _builtins.str,
                 frequent: _builtins.bool,
                 id: _builtins.str,
                 is_physical: _builtins.bool,
                 level: _builtins.str,
                 name: _builtins.str,
                 table_model_prefix: _builtins.str,
                 top: _builtins.bool,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 updated_by: _builtins.str):
        """
        :param _builtins.str biz_catalog_ids: The ID list of associated service catalogs.
        :param _builtins.str created_at: The creation time of the model (workspace), in RFC3339 format.
        :param _builtins.str created_by: The person who creates the model (workspace).
        :param Sequence[_builtins.str] databases: The list of database names.
        :param _builtins.str description: The description of the model (workspace).
        :param _builtins.str dw_type: The type of the data connection.
        :param _builtins.bool frequent: Whether the model (workspace) is frequently used.
        :param _builtins.str id: The ID of the model (workspace).
        :param _builtins.bool is_physical: Whether a table is a physical table.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param _builtins.str name: The name of the model (workspace).
        :param _builtins.str table_model_prefix: The verification prefix of the model (workspace).
        :param _builtins.bool top: Whether the model (workspace) is hierarchical governance.
        :param _builtins.str type: The type of the model (workspace).  
               The valid values are as follows:
               + **THIRD_NF**: relational modeling
               + **DIMENSION**: dimensional modeling
        :param _builtins.str updated_at: The latest update time of the model (workspace), in RFC3339 format.
        :param _builtins.str updated_by: The person who updates the model (workspace).
        """
        pulumi.set(__self__, "biz_catalog_ids", biz_catalog_ids)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dw_type", dw_type)
        pulumi.set(__self__, "frequent", frequent)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_physical", is_physical)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "table_model_prefix", table_model_prefix)
        pulumi.set(__self__, "top", top)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="bizCatalogIds")
    def biz_catalog_ids(self) -> _builtins.str:
        """
        The ID list of associated service catalogs.
        """
        return pulumi.get(self, "biz_catalog_ids")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The person who creates the model (workspace).
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence[_builtins.str]:
        """
        The list of database names.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the model (workspace).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> _builtins.str:
        """
        The type of the data connection.
        """
        return pulumi.get(self, "dw_type")

    @_builtins.property
    @pulumi.getter
    def frequent(self) -> _builtins.bool:
        """
        Whether the model (workspace) is frequently used.
        """
        return pulumi.get(self, "frequent")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the model (workspace).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPhysical")
    def is_physical(self) -> _builtins.bool:
        """
        Whether a table is a physical table.
        """
        return pulumi.get(self, "is_physical")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the model (workspace).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tableModelPrefix")
    def table_model_prefix(self) -> _builtins.str:
        """
        The verification prefix of the model (workspace).
        """
        return pulumi.get(self, "table_model_prefix")

    @_builtins.property
    @pulumi.getter
    def top(self) -> _builtins.bool:
        """
        Whether the model (workspace) is hierarchical governance.
        """
        return pulumi.get(self, "top")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the model (workspace).  
        The valid values are as follows:
        + **THIRD_NF**: relational modeling
        + **DIMENSION**: dimensional modeling
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The person who updates the model (workspace).
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetArchitectureModelStatisticPhysicalResult(dict):
    def __init__(__self__, *,
                 biz_type: _builtins.str,
                 db: _builtins.int,
                 fd: _builtins.int,
                 fd_published: _builtins.int,
                 level: _builtins.str,
                 models: Sequence['outputs.GetArchitectureModelStatisticPhysicalModelResult'],
                 st: _builtins.float,
                 st_published: _builtins.float,
                 tb: _builtins.int,
                 tb_published: _builtins.int):
        """
        :param _builtins.str biz_type: The service type.
        :param _builtins.int db: The total database number.
        :param _builtins.int fd: The total field number.
        :param _builtins.int fd_published: The published field number.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param Sequence['GetArchitectureModelStatisticPhysicalModelArgs'] models: The model detail.
               The model structure is documented below.
        :param _builtins.float st: The standard coverage.
        :param _builtins.float st_published: The published standard coverage.
        :param _builtins.int tb: The total data table number.
        :param _builtins.int tb_published: The published data table number.
        """
        pulumi.set(__self__, "biz_type", biz_type)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "fd", fd)
        pulumi.set(__self__, "fd_published", fd_published)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "models", models)
        pulumi.set(__self__, "st", st)
        pulumi.set(__self__, "st_published", st_published)
        pulumi.set(__self__, "tb", tb)
        pulumi.set(__self__, "tb_published", tb_published)

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> _builtins.str:
        """
        The service type.
        """
        return pulumi.get(self, "biz_type")

    @_builtins.property
    @pulumi.getter
    def db(self) -> _builtins.int:
        """
        The total database number.
        """
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter
    def fd(self) -> _builtins.int:
        """
        The total field number.
        """
        return pulumi.get(self, "fd")

    @_builtins.property
    @pulumi.getter(name="fdPublished")
    def fd_published(self) -> _builtins.int:
        """
        The published field number.
        """
        return pulumi.get(self, "fd_published")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def models(self) -> Sequence['outputs.GetArchitectureModelStatisticPhysicalModelResult']:
        """
        The model detail.
        The model structure is documented below.
        """
        return pulumi.get(self, "models")

    @_builtins.property
    @pulumi.getter
    def st(self) -> _builtins.float:
        """
        The standard coverage.
        """
        return pulumi.get(self, "st")

    @_builtins.property
    @pulumi.getter(name="stPublished")
    def st_published(self) -> _builtins.float:
        """
        The published standard coverage.
        """
        return pulumi.get(self, "st_published")

    @_builtins.property
    @pulumi.getter
    def tb(self) -> _builtins.int:
        """
        The total data table number.
        """
        return pulumi.get(self, "tb")

    @_builtins.property
    @pulumi.getter(name="tbPublished")
    def tb_published(self) -> _builtins.int:
        """
        The published data table number.
        """
        return pulumi.get(self, "tb_published")


@pulumi.output_type
class GetArchitectureModelStatisticPhysicalModelResult(dict):
    def __init__(__self__, *,
                 biz_catalog_ids: _builtins.str,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 databases: Sequence[_builtins.str],
                 description: _builtins.str,
                 dw_type: _builtins.str,
                 frequent: _builtins.bool,
                 id: _builtins.str,
                 is_physical: _builtins.bool,
                 level: _builtins.str,
                 name: _builtins.str,
                 table_model_prefix: _builtins.str,
                 top: _builtins.bool,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 updated_by: _builtins.str):
        """
        :param _builtins.str biz_catalog_ids: The ID list of associated service catalogs.
        :param _builtins.str created_at: The creation time of the model (workspace), in RFC3339 format.
        :param _builtins.str created_by: The person who creates the model (workspace).
        :param Sequence[_builtins.str] databases: The list of database names.
        :param _builtins.str description: The description of the model (workspace).
        :param _builtins.str dw_type: The type of the data connection.
        :param _builtins.bool frequent: Whether the model (workspace) is frequently used.
        :param _builtins.str id: The ID of the model (workspace).
        :param _builtins.bool is_physical: Whether a table is a physical table.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param _builtins.str name: The name of the model (workspace).
        :param _builtins.str table_model_prefix: The verification prefix of the model (workspace).
        :param _builtins.bool top: Whether the model (workspace) is hierarchical governance.
        :param _builtins.str type: The type of the model (workspace).  
               The valid values are as follows:
               + **THIRD_NF**: relational modeling
               + **DIMENSION**: dimensional modeling
        :param _builtins.str updated_at: The latest update time of the model (workspace), in RFC3339 format.
        :param _builtins.str updated_by: The person who updates the model (workspace).
        """
        pulumi.set(__self__, "biz_catalog_ids", biz_catalog_ids)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dw_type", dw_type)
        pulumi.set(__self__, "frequent", frequent)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_physical", is_physical)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "table_model_prefix", table_model_prefix)
        pulumi.set(__self__, "top", top)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="bizCatalogIds")
    def biz_catalog_ids(self) -> _builtins.str:
        """
        The ID list of associated service catalogs.
        """
        return pulumi.get(self, "biz_catalog_ids")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The person who creates the model (workspace).
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence[_builtins.str]:
        """
        The list of database names.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the model (workspace).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> _builtins.str:
        """
        The type of the data connection.
        """
        return pulumi.get(self, "dw_type")

    @_builtins.property
    @pulumi.getter
    def frequent(self) -> _builtins.bool:
        """
        Whether the model (workspace) is frequently used.
        """
        return pulumi.get(self, "frequent")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the model (workspace).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPhysical")
    def is_physical(self) -> _builtins.bool:
        """
        Whether a table is a physical table.
        """
        return pulumi.get(self, "is_physical")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the model (workspace).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tableModelPrefix")
    def table_model_prefix(self) -> _builtins.str:
        """
        The verification prefix of the model (workspace).
        """
        return pulumi.get(self, "table_model_prefix")

    @_builtins.property
    @pulumi.getter
    def top(self) -> _builtins.bool:
        """
        Whether the model (workspace) is hierarchical governance.
        """
        return pulumi.get(self, "top")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the model (workspace).  
        The valid values are as follows:
        + **THIRD_NF**: relational modeling
        + **DIMENSION**: dimensional modeling
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The person who updates the model (workspace).
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetArchitectureModelStatisticTopResult(dict):
    def __init__(__self__, *,
                 biz_type: _builtins.str,
                 db: _builtins.int,
                 fd: _builtins.int,
                 fd_published: _builtins.int,
                 level: _builtins.str,
                 models: Sequence['outputs.GetArchitectureModelStatisticTopModelResult'],
                 st: _builtins.float,
                 st_published: _builtins.float,
                 tb: _builtins.int,
                 tb_published: _builtins.int):
        """
        :param _builtins.str biz_type: The service type.
        :param _builtins.int db: The total database number.
        :param _builtins.int fd: The total field number.
        :param _builtins.int fd_published: The published field number.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param Sequence['GetArchitectureModelStatisticTopModelArgs'] models: The model detail.
               The model structure is documented below.
        :param _builtins.float st: The standard coverage.
        :param _builtins.float st_published: The published standard coverage.
        :param _builtins.int tb: The total data table number.
        :param _builtins.int tb_published: The published data table number.
        """
        pulumi.set(__self__, "biz_type", biz_type)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "fd", fd)
        pulumi.set(__self__, "fd_published", fd_published)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "models", models)
        pulumi.set(__self__, "st", st)
        pulumi.set(__self__, "st_published", st_published)
        pulumi.set(__self__, "tb", tb)
        pulumi.set(__self__, "tb_published", tb_published)

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> _builtins.str:
        """
        The service type.
        """
        return pulumi.get(self, "biz_type")

    @_builtins.property
    @pulumi.getter
    def db(self) -> _builtins.int:
        """
        The total database number.
        """
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter
    def fd(self) -> _builtins.int:
        """
        The total field number.
        """
        return pulumi.get(self, "fd")

    @_builtins.property
    @pulumi.getter(name="fdPublished")
    def fd_published(self) -> _builtins.int:
        """
        The published field number.
        """
        return pulumi.get(self, "fd_published")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def models(self) -> Sequence['outputs.GetArchitectureModelStatisticTopModelResult']:
        """
        The model detail.
        The model structure is documented below.
        """
        return pulumi.get(self, "models")

    @_builtins.property
    @pulumi.getter
    def st(self) -> _builtins.float:
        """
        The standard coverage.
        """
        return pulumi.get(self, "st")

    @_builtins.property
    @pulumi.getter(name="stPublished")
    def st_published(self) -> _builtins.float:
        """
        The published standard coverage.
        """
        return pulumi.get(self, "st_published")

    @_builtins.property
    @pulumi.getter
    def tb(self) -> _builtins.int:
        """
        The total data table number.
        """
        return pulumi.get(self, "tb")

    @_builtins.property
    @pulumi.getter(name="tbPublished")
    def tb_published(self) -> _builtins.int:
        """
        The published data table number.
        """
        return pulumi.get(self, "tb_published")


@pulumi.output_type
class GetArchitectureModelStatisticTopModelResult(dict):
    def __init__(__self__, *,
                 biz_catalog_ids: _builtins.str,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 databases: Sequence[_builtins.str],
                 description: _builtins.str,
                 dw_type: _builtins.str,
                 frequent: _builtins.bool,
                 id: _builtins.str,
                 is_physical: _builtins.bool,
                 level: _builtins.str,
                 name: _builtins.str,
                 table_model_prefix: _builtins.str,
                 top: _builtins.bool,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 updated_by: _builtins.str):
        """
        :param _builtins.str biz_catalog_ids: The ID list of associated service catalogs.
        :param _builtins.str created_at: The creation time of the model (workspace), in RFC3339 format.
        :param _builtins.str created_by: The person who creates the model (workspace).
        :param Sequence[_builtins.str] databases: The list of database names.
        :param _builtins.str description: The description of the model (workspace).
        :param _builtins.str dw_type: The type of the data connection.
        :param _builtins.bool frequent: Whether the model (workspace) is frequently used.
        :param _builtins.str id: The ID of the model (workspace).
        :param _builtins.bool is_physical: Whether a table is a physical table.
        :param _builtins.str level: The level of the data governance layering.  
               The valid values are as follows:
               + **SDI**
               + **DWI**
               + **DWR**
               + **DM**
        :param _builtins.str name: The name of the model (workspace).
        :param _builtins.str table_model_prefix: The verification prefix of the model (workspace).
        :param _builtins.bool top: Whether the model (workspace) is hierarchical governance.
        :param _builtins.str type: The type of the model (workspace).  
               The valid values are as follows:
               + **THIRD_NF**: relational modeling
               + **DIMENSION**: dimensional modeling
        :param _builtins.str updated_at: The latest update time of the model (workspace), in RFC3339 format.
        :param _builtins.str updated_by: The person who updates the model (workspace).
        """
        pulumi.set(__self__, "biz_catalog_ids", biz_catalog_ids)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dw_type", dw_type)
        pulumi.set(__self__, "frequent", frequent)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_physical", is_physical)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "table_model_prefix", table_model_prefix)
        pulumi.set(__self__, "top", top)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="bizCatalogIds")
    def biz_catalog_ids(self) -> _builtins.str:
        """
        The ID list of associated service catalogs.
        """
        return pulumi.get(self, "biz_catalog_ids")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The person who creates the model (workspace).
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence[_builtins.str]:
        """
        The list of database names.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the model (workspace).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> _builtins.str:
        """
        The type of the data connection.
        """
        return pulumi.get(self, "dw_type")

    @_builtins.property
    @pulumi.getter
    def frequent(self) -> _builtins.bool:
        """
        Whether the model (workspace) is frequently used.
        """
        return pulumi.get(self, "frequent")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the model (workspace).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPhysical")
    def is_physical(self) -> _builtins.bool:
        """
        Whether a table is a physical table.
        """
        return pulumi.get(self, "is_physical")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of the data governance layering.  
        The valid values are as follows:
        + **SDI**
        + **DWI**
        + **DWR**
        + **DM**
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the model (workspace).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tableModelPrefix")
    def table_model_prefix(self) -> _builtins.str:
        """
        The verification prefix of the model (workspace).
        """
        return pulumi.get(self, "table_model_prefix")

    @_builtins.property
    @pulumi.getter
    def top(self) -> _builtins.bool:
        """
        Whether the model (workspace) is hierarchical governance.
        """
        return pulumi.get(self, "top")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the model (workspace).  
        The valid values are as follows:
        + **THIRD_NF**: relational modeling
        + **DIMENSION**: dimensional modeling
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the model (workspace), in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The person who updates the model (workspace).
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetArchitectureTableModelsTableResult(dict):
    def __init__(__self__, *,
                 attributes: Sequence['outputs.GetArchitectureTableModelsTableAttributeResult'],
                 business_asset_status: _builtins.str,
                 catalog_path: _builtins.str,
                 code: _builtins.str,
                 compression: _builtins.str,
                 configs: _builtins.str,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 data_format: _builtins.str,
                 data_quality_status: _builtins.str,
                 db_name: _builtins.str,
                 description: _builtins.str,
                 dev_physical_table_status: _builtins.str,
                 dev_version: _builtins.str,
                 dirty_out_database: _builtins.str,
                 dirty_out_prefix: _builtins.str,
                 dirty_out_suffix: _builtins.str,
                 dirty_out_switch: _builtins.bool,
                 distribute: _builtins.str,
                 distribute_column: _builtins.str,
                 dlf_task_id: _builtins.str,
                 dw_id: _builtins.str,
                 dw_type: _builtins.str,
                 env_type: _builtins.str,
                 extend_info: _builtins.str,
                 has_related_logic_table: _builtins.bool,
                 has_related_physical_table: _builtins.bool,
                 id: _builtins.str,
                 is_partition: _builtins.bool,
                 logic_tb_guid: _builtins.str,
                 logic_tb_id: _builtins.str,
                 meta_data_link_status: _builtins.str,
                 model_id: _builtins.str,
                 obs_location: _builtins.str,
                 owner: _builtins.str,
                 parent_table_code: _builtins.str,
                 parent_table_id: _builtins.str,
                 parent_table_name: _builtins.str,
                 partition_conf: _builtins.str,
                 physical_table_name: _builtins.str,
                 physical_table_status: _builtins.str,
                 prod_version: _builtins.str,
                 queue_name: _builtins.str,
                 related_logic_table_id: _builtins.str,
                 schema: _builtins.str,
                 status: _builtins.str,
                 subject_id: _builtins.str,
                 summary_status: _builtins.str,
                 table_name: _builtins.str,
                 table_type: _builtins.str,
                 tb_guid: _builtins.str,
                 tb_id: _builtins.str,
                 technical_asset_status: _builtins.str,
                 updated_at: _builtins.str,
                 updated_by: _builtins.str,
                 use_recently_partition: _builtins.bool):
        """
        :param Sequence['GetArchitectureTableModelsTableAttributeArgs'] attributes: The list of the attributes of the table model.
               The attributes structure is documented below.
        :param _builtins.str business_asset_status: The business asset status of the table model.
        :param _builtins.str catalog_path: The subject path corresponding to the table model.
        :param _builtins.str code: The code of the logical attribute associated with attribute.
        :param _builtins.str compression: The compression type of the table model.
        :param _builtins.str configs: The advanced configuration information of the table model, in JSON format.
        :param _builtins.str created_at: The creation time of the attribute, in RFC3339 format.
        :param _builtins.str created_by: Specifies the creator of the table model.
        :param _builtins.str data_format: The data format of the DLI table model.
        :param _builtins.str data_quality_status: The data quality status of the table model.
        :param _builtins.str db_name: The database name of the table model.
        :param _builtins.str description: The description of the attribute.
        :param _builtins.str dev_physical_table_status: The dev physical table status of the table model.
        :param _builtins.str dev_version: The development environment version of the table model.
        :param _builtins.str dirty_out_database: The database where to record the dirty data.
        :param _builtins.str dirty_out_prefix: The prefix of the table recording dirty data.
        :param _builtins.str dirty_out_suffix: The suffix of the table recording dirty data.
        :param _builtins.bool dirty_out_switch: The dirty data output switch of the table model.
        :param _builtins.str distribute: The attribute distribution mode of the DWS table model.
        :param _builtins.str distribute_column: The HASH column of the attribute distribution.
        :param _builtins.str dlf_task_id: The DLF task ID of table model.
        :param _builtins.str dw_id: The ID of the connection corresponding to the table model.
        :param _builtins.str dw_type: The type of the connection corresponding to the table model.
        :param _builtins.str env_type: The environment type of the table model.
               + **INVALID_TYPE**
               + **DEV_TYPE**
               + **PROD_TYPE**
               + **DEV_PROD_TYPE**
        :param _builtins.str extend_info: The extend information of the table model.
        :param _builtins.bool has_related_logic_table: Whether the table model has associated the logical entities.
        :param _builtins.bool has_related_physical_table: Whether the logical entity has associated the physical tables.
        :param _builtins.str id: The ID of the attribute.
        :param _builtins.bool is_partition: Whether table is the partition table.
        :param _builtins.str logic_tb_guid: The globally unique ID of the logic table model generated when publishing the table model.
        :param _builtins.str logic_tb_id: The ID of logical entity.
        :param _builtins.str meta_data_link_status: The meta data link status the table model.
        :param _builtins.str model_id: Specifies the model ID to which the table model belongs.
        :param _builtins.str obs_location: The OBS path of the table model.
        :param _builtins.str owner: The owner of the table model.
        :param _builtins.str parent_table_code: The parent table code of table model.
        :param _builtins.str parent_table_id: The parent table ID of table model.
        :param _builtins.str parent_table_name: The parent table name of table model.
        :param _builtins.str partition_conf: The condition expression of the partition.
        :param _builtins.str physical_table_name: The English name of the table model.
        :param _builtins.str physical_table_status: The physical table status of the table model.
        :param _builtins.str prod_version: The production environment version of the table model.
        :param _builtins.str queue_name: The queue name of the DLI table model.
        :param _builtins.str related_logic_table_id: The logical table ID associated with table model.
        :param _builtins.str schema: The schema of the DWS and POSTGRESQL table model.
        :param _builtins.str status: Specifies the status of the table model.  
               The valid values are as follows:
               + **DRAFT**
               + **PUBLISH_DEVELOPING**
               + **PUBLISHED**
               + **OFFLINE**
               + **REJECT**
        :param _builtins.str subject_id: Specifies the subject ID to which the table model belongs.
        :param _builtins.str summary_status: The synchronization status of the table model.
        :param _builtins.str table_name: The Chinese name of the table model.
        :param _builtins.str table_type: The table type of the table model.
        :param _builtins.str tb_guid: The globally unique ID generated when publishing the table model.
        :param _builtins.str tb_id: The ID of the data table.
        :param _builtins.str technical_asset_status: The technical asset status of the table model.
        :param _builtins.str updated_at: The latest update time of the attribute, in RFC3339 format.
        :param _builtins.str updated_by: The latest updater of the table model.
        :param _builtins.bool use_recently_partition: Whether the table model has used latest partition.
        """
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "business_asset_status", business_asset_status)
        pulumi.set(__self__, "catalog_path", catalog_path)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "data_format", data_format)
        pulumi.set(__self__, "data_quality_status", data_quality_status)
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dev_physical_table_status", dev_physical_table_status)
        pulumi.set(__self__, "dev_version", dev_version)
        pulumi.set(__self__, "dirty_out_database", dirty_out_database)
        pulumi.set(__self__, "dirty_out_prefix", dirty_out_prefix)
        pulumi.set(__self__, "dirty_out_suffix", dirty_out_suffix)
        pulumi.set(__self__, "dirty_out_switch", dirty_out_switch)
        pulumi.set(__self__, "distribute", distribute)
        pulumi.set(__self__, "distribute_column", distribute_column)
        pulumi.set(__self__, "dlf_task_id", dlf_task_id)
        pulumi.set(__self__, "dw_id", dw_id)
        pulumi.set(__self__, "dw_type", dw_type)
        pulumi.set(__self__, "env_type", env_type)
        pulumi.set(__self__, "extend_info", extend_info)
        pulumi.set(__self__, "has_related_logic_table", has_related_logic_table)
        pulumi.set(__self__, "has_related_physical_table", has_related_physical_table)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_partition", is_partition)
        pulumi.set(__self__, "logic_tb_guid", logic_tb_guid)
        pulumi.set(__self__, "logic_tb_id", logic_tb_id)
        pulumi.set(__self__, "meta_data_link_status", meta_data_link_status)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "obs_location", obs_location)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "parent_table_code", parent_table_code)
        pulumi.set(__self__, "parent_table_id", parent_table_id)
        pulumi.set(__self__, "parent_table_name", parent_table_name)
        pulumi.set(__self__, "partition_conf", partition_conf)
        pulumi.set(__self__, "physical_table_name", physical_table_name)
        pulumi.set(__self__, "physical_table_status", physical_table_status)
        pulumi.set(__self__, "prod_version", prod_version)
        pulumi.set(__self__, "queue_name", queue_name)
        pulumi.set(__self__, "related_logic_table_id", related_logic_table_id)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subject_id", subject_id)
        pulumi.set(__self__, "summary_status", summary_status)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "table_type", table_type)
        pulumi.set(__self__, "tb_guid", tb_guid)
        pulumi.set(__self__, "tb_id", tb_id)
        pulumi.set(__self__, "technical_asset_status", technical_asset_status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "use_recently_partition", use_recently_partition)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Sequence['outputs.GetArchitectureTableModelsTableAttributeResult']:
        """
        The list of the attributes of the table model.
        The attributes structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter(name="businessAssetStatus")
    def business_asset_status(self) -> _builtins.str:
        """
        The business asset status of the table model.
        """
        return pulumi.get(self, "business_asset_status")

    @_builtins.property
    @pulumi.getter(name="catalogPath")
    def catalog_path(self) -> _builtins.str:
        """
        The subject path corresponding to the table model.
        """
        return pulumi.get(self, "catalog_path")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The code of the logical attribute associated with attribute.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def compression(self) -> _builtins.str:
        """
        The compression type of the table model.
        """
        return pulumi.get(self, "compression")

    @_builtins.property
    @pulumi.getter
    def configs(self) -> _builtins.str:
        """
        The advanced configuration information of the table model, in JSON format.
        """
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the attribute, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        Specifies the creator of the table model.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> _builtins.str:
        """
        The data format of the DLI table model.
        """
        return pulumi.get(self, "data_format")

    @_builtins.property
    @pulumi.getter(name="dataQualityStatus")
    def data_quality_status(self) -> _builtins.str:
        """
        The data quality status of the table model.
        """
        return pulumi.get(self, "data_quality_status")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        The database name of the table model.
        """
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the attribute.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="devPhysicalTableStatus")
    def dev_physical_table_status(self) -> _builtins.str:
        """
        The dev physical table status of the table model.
        """
        return pulumi.get(self, "dev_physical_table_status")

    @_builtins.property
    @pulumi.getter(name="devVersion")
    def dev_version(self) -> _builtins.str:
        """
        The development environment version of the table model.
        """
        return pulumi.get(self, "dev_version")

    @_builtins.property
    @pulumi.getter(name="dirtyOutDatabase")
    def dirty_out_database(self) -> _builtins.str:
        """
        The database where to record the dirty data.
        """
        return pulumi.get(self, "dirty_out_database")

    @_builtins.property
    @pulumi.getter(name="dirtyOutPrefix")
    def dirty_out_prefix(self) -> _builtins.str:
        """
        The prefix of the table recording dirty data.
        """
        return pulumi.get(self, "dirty_out_prefix")

    @_builtins.property
    @pulumi.getter(name="dirtyOutSuffix")
    def dirty_out_suffix(self) -> _builtins.str:
        """
        The suffix of the table recording dirty data.
        """
        return pulumi.get(self, "dirty_out_suffix")

    @_builtins.property
    @pulumi.getter(name="dirtyOutSwitch")
    def dirty_out_switch(self) -> _builtins.bool:
        """
        The dirty data output switch of the table model.
        """
        return pulumi.get(self, "dirty_out_switch")

    @_builtins.property
    @pulumi.getter
    def distribute(self) -> _builtins.str:
        """
        The attribute distribution mode of the DWS table model.
        """
        return pulumi.get(self, "distribute")

    @_builtins.property
    @pulumi.getter(name="distributeColumn")
    def distribute_column(self) -> _builtins.str:
        """
        The HASH column of the attribute distribution.
        """
        return pulumi.get(self, "distribute_column")

    @_builtins.property
    @pulumi.getter(name="dlfTaskId")
    def dlf_task_id(self) -> _builtins.str:
        """
        The DLF task ID of table model.
        """
        return pulumi.get(self, "dlf_task_id")

    @_builtins.property
    @pulumi.getter(name="dwId")
    def dw_id(self) -> _builtins.str:
        """
        The ID of the connection corresponding to the table model.
        """
        return pulumi.get(self, "dw_id")

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> _builtins.str:
        """
        The type of the connection corresponding to the table model.
        """
        return pulumi.get(self, "dw_type")

    @_builtins.property
    @pulumi.getter(name="envType")
    def env_type(self) -> _builtins.str:
        """
        The environment type of the table model.
        + **INVALID_TYPE**
        + **DEV_TYPE**
        + **PROD_TYPE**
        + **DEV_PROD_TYPE**
        """
        return pulumi.get(self, "env_type")

    @_builtins.property
    @pulumi.getter(name="extendInfo")
    def extend_info(self) -> _builtins.str:
        """
        The extend information of the table model.
        """
        return pulumi.get(self, "extend_info")

    @_builtins.property
    @pulumi.getter(name="hasRelatedLogicTable")
    def has_related_logic_table(self) -> _builtins.bool:
        """
        Whether the table model has associated the logical entities.
        """
        return pulumi.get(self, "has_related_logic_table")

    @_builtins.property
    @pulumi.getter(name="hasRelatedPhysicalTable")
    def has_related_physical_table(self) -> _builtins.bool:
        """
        Whether the logical entity has associated the physical tables.
        """
        return pulumi.get(self, "has_related_physical_table")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attribute.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPartition")
    def is_partition(self) -> _builtins.bool:
        """
        Whether table is the partition table.
        """
        return pulumi.get(self, "is_partition")

    @_builtins.property
    @pulumi.getter(name="logicTbGuid")
    def logic_tb_guid(self) -> _builtins.str:
        """
        The globally unique ID of the logic table model generated when publishing the table model.
        """
        return pulumi.get(self, "logic_tb_guid")

    @_builtins.property
    @pulumi.getter(name="logicTbId")
    def logic_tb_id(self) -> _builtins.str:
        """
        The ID of logical entity.
        """
        return pulumi.get(self, "logic_tb_id")

    @_builtins.property
    @pulumi.getter(name="metaDataLinkStatus")
    def meta_data_link_status(self) -> _builtins.str:
        """
        The meta data link status the table model.
        """
        return pulumi.get(self, "meta_data_link_status")

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> _builtins.str:
        """
        Specifies the model ID to which the table model belongs.
        """
        return pulumi.get(self, "model_id")

    @_builtins.property
    @pulumi.getter(name="obsLocation")
    def obs_location(self) -> _builtins.str:
        """
        The OBS path of the table model.
        """
        return pulumi.get(self, "obs_location")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        The owner of the table model.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="parentTableCode")
    def parent_table_code(self) -> _builtins.str:
        """
        The parent table code of table model.
        """
        return pulumi.get(self, "parent_table_code")

    @_builtins.property
    @pulumi.getter(name="parentTableId")
    def parent_table_id(self) -> _builtins.str:
        """
        The parent table ID of table model.
        """
        return pulumi.get(self, "parent_table_id")

    @_builtins.property
    @pulumi.getter(name="parentTableName")
    def parent_table_name(self) -> _builtins.str:
        """
        The parent table name of table model.
        """
        return pulumi.get(self, "parent_table_name")

    @_builtins.property
    @pulumi.getter(name="partitionConf")
    def partition_conf(self) -> _builtins.str:
        """
        The condition expression of the partition.
        """
        return pulumi.get(self, "partition_conf")

    @_builtins.property
    @pulumi.getter(name="physicalTableName")
    def physical_table_name(self) -> _builtins.str:
        """
        The English name of the table model.
        """
        return pulumi.get(self, "physical_table_name")

    @_builtins.property
    @pulumi.getter(name="physicalTableStatus")
    def physical_table_status(self) -> _builtins.str:
        """
        The physical table status of the table model.
        """
        return pulumi.get(self, "physical_table_status")

    @_builtins.property
    @pulumi.getter(name="prodVersion")
    def prod_version(self) -> _builtins.str:
        """
        The production environment version of the table model.
        """
        return pulumi.get(self, "prod_version")

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> _builtins.str:
        """
        The queue name of the DLI table model.
        """
        return pulumi.get(self, "queue_name")

    @_builtins.property
    @pulumi.getter(name="relatedLogicTableId")
    def related_logic_table_id(self) -> _builtins.str:
        """
        The logical table ID associated with table model.
        """
        return pulumi.get(self, "related_logic_table_id")

    @_builtins.property
    @pulumi.getter
    def schema(self) -> _builtins.str:
        """
        The schema of the DWS and POSTGRESQL table model.
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the table model.  
        The valid values are as follows:
        + **DRAFT**
        + **PUBLISH_DEVELOPING**
        + **PUBLISHED**
        + **OFFLINE**
        + **REJECT**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subjectId")
    def subject_id(self) -> _builtins.str:
        """
        Specifies the subject ID to which the table model belongs.
        """
        return pulumi.get(self, "subject_id")

    @_builtins.property
    @pulumi.getter(name="summaryStatus")
    def summary_status(self) -> _builtins.str:
        """
        The synchronization status of the table model.
        """
        return pulumi.get(self, "summary_status")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> _builtins.str:
        """
        The Chinese name of the table model.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter(name="tableType")
    def table_type(self) -> _builtins.str:
        """
        The table type of the table model.
        """
        return pulumi.get(self, "table_type")

    @_builtins.property
    @pulumi.getter(name="tbGuid")
    def tb_guid(self) -> _builtins.str:
        """
        The globally unique ID generated when publishing the table model.
        """
        return pulumi.get(self, "tb_guid")

    @_builtins.property
    @pulumi.getter(name="tbId")
    def tb_id(self) -> _builtins.str:
        """
        The ID of the data table.
        """
        return pulumi.get(self, "tb_id")

    @_builtins.property
    @pulumi.getter(name="technicalAssetStatus")
    def technical_asset_status(self) -> _builtins.str:
        """
        The technical asset status of the table model.
        """
        return pulumi.get(self, "technical_asset_status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the attribute, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The latest updater of the table model.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="useRecentlyPartition")
    def use_recently_partition(self) -> _builtins.bool:
        """
        Whether the table model has used latest partition.
        """
        return pulumi.get(self, "use_recently_partition")


@pulumi.output_type
class GetArchitectureTableModelsTableAttributeResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 created_at: _builtins.str,
                 data_type: _builtins.str,
                 data_type_extend: _builtins.str,
                 description: _builtins.str,
                 domain_type: _builtins.str,
                 extend_field: _builtins.bool,
                 id: _builtins.str,
                 is_foreign_key: _builtins.bool,
                 is_partition_key: _builtins.bool,
                 is_primary_key: _builtins.bool,
                 name: _builtins.str,
                 name_en: _builtins.str,
                 not_null: _builtins.bool,
                 ordinal: _builtins.int,
                 stand_row_id: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str code: The code of the logical attribute associated with attribute.
        :param _builtins.str created_at: The creation time of the attribute, in RFC3339 format.
        :param _builtins.str data_type: The data type of the attribute.
        :param _builtins.str data_type_extend: The data type extend field of attribute.
        :param _builtins.str description: The description of the attribute.
        :param _builtins.str domain_type: The domain type of the attribute.
               + **NUMBER**
               + **STRING**
               + **DATETIME**
               + **BLOB**: Large Object (BLOB).
               + **OTHER**
        :param _builtins.bool extend_field: The extend field of the attribute.
        :param _builtins.str id: The ID of the attribute.
        :param _builtins.bool is_foreign_key: Whether the attribute is foreign key.
        :param _builtins.bool is_partition_key: Whether the attribute is partition key.
        :param _builtins.bool is_primary_key: Whether the attribute is primary key.
        :param _builtins.str name: Specifies the Chinese or English name of the table model.
               Fuzzy search is supported.
        :param _builtins.str name_en: The English name of the attribute.
        :param _builtins.bool not_null: Whether the attribute is not null.
        :param _builtins.int ordinal: The sequence number of attribute.
        :param _builtins.str stand_row_id: The ID of the data standard associated with attribute.
        :param _builtins.str updated_at: The latest update time of the attribute, in RFC3339 format.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "data_type_extend", data_type_extend)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_type", domain_type)
        pulumi.set(__self__, "extend_field", extend_field)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_foreign_key", is_foreign_key)
        pulumi.set(__self__, "is_partition_key", is_partition_key)
        pulumi.set(__self__, "is_primary_key", is_primary_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_en", name_en)
        pulumi.set(__self__, "not_null", not_null)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "stand_row_id", stand_row_id)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The code of the logical attribute associated with attribute.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the attribute, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        """
        The data type of the attribute.
        """
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter(name="dataTypeExtend")
    def data_type_extend(self) -> _builtins.str:
        """
        The data type extend field of attribute.
        """
        return pulumi.get(self, "data_type_extend")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the attribute.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainType")
    def domain_type(self) -> _builtins.str:
        """
        The domain type of the attribute.
        + **NUMBER**
        + **STRING**
        + **DATETIME**
        + **BLOB**: Large Object (BLOB).
        + **OTHER**
        """
        return pulumi.get(self, "domain_type")

    @_builtins.property
    @pulumi.getter(name="extendField")
    def extend_field(self) -> _builtins.bool:
        """
        The extend field of the attribute.
        """
        return pulumi.get(self, "extend_field")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attribute.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isForeignKey")
    def is_foreign_key(self) -> _builtins.bool:
        """
        Whether the attribute is foreign key.
        """
        return pulumi.get(self, "is_foreign_key")

    @_builtins.property
    @pulumi.getter(name="isPartitionKey")
    def is_partition_key(self) -> _builtins.bool:
        """
        Whether the attribute is partition key.
        """
        return pulumi.get(self, "is_partition_key")

    @_builtins.property
    @pulumi.getter(name="isPrimaryKey")
    def is_primary_key(self) -> _builtins.bool:
        """
        Whether the attribute is primary key.
        """
        return pulumi.get(self, "is_primary_key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the Chinese or English name of the table model.
        Fuzzy search is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> _builtins.str:
        """
        The English name of the attribute.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter(name="notNull")
    def not_null(self) -> _builtins.bool:
        """
        Whether the attribute is not null.
        """
        return pulumi.get(self, "not_null")

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> _builtins.int:
        """
        The sequence number of attribute.
        """
        return pulumi.get(self, "ordinal")

    @_builtins.property
    @pulumi.getter(name="standRowId")
    def stand_row_id(self) -> _builtins.str:
        """
        The ID of the data standard associated with attribute.
        """
        return pulumi.get(self, "stand_row_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the attribute, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetDataserviceApisApiResult(dict):
    def __init__(__self__, *,
                 backend_configs: Sequence['outputs.GetDataserviceApisApiBackendConfigResult'],
                 create_user: _builtins.str,
                 created_at: _builtins.str,
                 datasource_configs: Sequence['outputs.GetDataserviceApisApiDatasourceConfigResult'],
                 description: _builtins.str,
                 group_id: _builtins.str,
                 host: _builtins.str,
                 hosts: Sequence[_builtins.str],
                 id: _builtins.str,
                 manager: _builtins.str,
                 name: _builtins.str,
                 path: _builtins.str,
                 protocol: _builtins.str,
                 request_params: Sequence['outputs.GetDataserviceApisApiRequestParamResult'],
                 request_type: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param Sequence['GetDataserviceApisApiBackendConfigArgs'] backend_configs: The configuration of the API backend.  
               The backend_config structure is documented below.
        :param _builtins.str create_user: Specifies the API creator to be queried.
        :param _builtins.str created_at: The creation time of the API, in RFC3339 format.
        :param Sequence['GetDataserviceApisApiDatasourceConfigArgs'] datasource_configs: The configuration of the API data source.  
               The datasource_config structure is documented below.
        :param _builtins.str description: Specifies the API description to be fuzzy queried.  
               Maximum of `255` characters are allowed.
        :param _builtins.str group_id: The ID of the group to which the API belongs, for shared type.
        :param _builtins.str host: The backend host.
        :param Sequence[_builtins.str] hosts: The API host configuration, for exclusive type.
        :param _builtins.str id: The API ID, in UUID format.
        :param _builtins.str manager: The API reviewer.
        :param _builtins.str name: Specifies the API name to be fuzzy queried.  
               The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
               allowed.
               The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
               or **Unicode** format.
        :param _builtins.str path: The backend path.
        :param _builtins.str protocol: The protocol of the backend request.
        :param Sequence['GetDataserviceApisApiRequestParamArgs'] request_params: The parameters of the API request.  
               The request_params structure is documented below.
        :param _builtins.str request_type: The request type of the API.
        :param _builtins.str status: The API status, for shared type.
        :param _builtins.str type: Specifies the API type to be queried.  
               The valid values are as follows:
               + **API_SPECIFIC_TYPE_CONFIGURATION**
               + **API_SPECIFIC_TYPE_REGISTER**
               + **API_SPECIFIC_TYPE_ORCHESTRATE**
               + **API_SPECIFIC_TYPE_MYBATIS**
               + **API_SPECIFIC_TYPE_SCRIPT**
               + **API_SPECIFIC_TYPE_GROOVY**
        :param _builtins.str updated_at: The latest update time of the API, in RFC3339 format.
        """
        pulumi.set(__self__, "backend_configs", backend_configs)
        pulumi.set(__self__, "create_user", create_user)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "datasource_configs", datasource_configs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "manager", manager)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "request_params", request_params)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="backendConfigs")
    def backend_configs(self) -> Sequence['outputs.GetDataserviceApisApiBackendConfigResult']:
        """
        The configuration of the API backend.  
        The backend_config structure is documented below.
        """
        return pulumi.get(self, "backend_configs")

    @_builtins.property
    @pulumi.getter(name="createUser")
    def create_user(self) -> _builtins.str:
        """
        Specifies the API creator to be queried.
        """
        return pulumi.get(self, "create_user")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="datasourceConfigs")
    def datasource_configs(self) -> Sequence['outputs.GetDataserviceApisApiDatasourceConfigResult']:
        """
        The configuration of the API data source.  
        The datasource_config structure is documented below.
        """
        return pulumi.get(self, "datasource_configs")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the API description to be fuzzy queried.  
        Maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        The ID of the group to which the API belongs, for shared type.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The backend host.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence[_builtins.str]:
        """
        The API host configuration, for exclusive type.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The API ID, in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def manager(self) -> _builtins.str:
        """
        The API reviewer.
        """
        return pulumi.get(self, "manager")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the API name to be fuzzy queried.  
        The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
        allowed.
        The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
        or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The backend path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol of the backend request.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="requestParams")
    def request_params(self) -> Sequence['outputs.GetDataserviceApisApiRequestParamResult']:
        """
        The parameters of the API request.  
        The request_params structure is documented below.
        """
        return pulumi.get(self, "request_params")

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> _builtins.str:
        """
        The request type of the API.
        """
        return pulumi.get(self, "request_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The API status, for shared type.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the API type to be queried.  
        The valid values are as follows:
        + **API_SPECIFIC_TYPE_CONFIGURATION**
        + **API_SPECIFIC_TYPE_REGISTER**
        + **API_SPECIFIC_TYPE_ORCHESTRATE**
        + **API_SPECIFIC_TYPE_MYBATIS**
        + **API_SPECIFIC_TYPE_SCRIPT**
        + **API_SPECIFIC_TYPE_GROOVY**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetDataserviceApisApiBackendConfigResult(dict):
    def __init__(__self__, *,
                 backend_params: Sequence['outputs.GetDataserviceApisApiBackendConfigBackendParamResult'],
                 constant_params: Sequence['outputs.GetDataserviceApisApiBackendConfigConstantParamResult'],
                 host: _builtins.str,
                 path: _builtins.str,
                 protocol: _builtins.str,
                 timeout: _builtins.int,
                 type: _builtins.str):
        """
        :param Sequence['GetDataserviceApisApiBackendConfigBackendParamArgs'] backend_params: The backend parameters of the API.  
               The backend_params structure is documented below.
        :param Sequence['GetDataserviceApisApiBackendConfigConstantParamArgs'] constant_params: The backend constant parameters of the API.  
               The constant_params structure is documented below.
        :param _builtins.str host: The backend host.
        :param _builtins.str path: The backend path.
        :param _builtins.str protocol: The protocol of the backend request.
        :param _builtins.int timeout: The backend timeout.
        :param _builtins.str type: Specifies the API type to be queried.  
               The valid values are as follows:
               + **API_SPECIFIC_TYPE_CONFIGURATION**
               + **API_SPECIFIC_TYPE_REGISTER**
               + **API_SPECIFIC_TYPE_ORCHESTRATE**
               + **API_SPECIFIC_TYPE_MYBATIS**
               + **API_SPECIFIC_TYPE_SCRIPT**
               + **API_SPECIFIC_TYPE_GROOVY**
        """
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "constant_params", constant_params)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetDataserviceApisApiBackendConfigBackendParamResult']:
        """
        The backend parameters of the API.  
        The backend_params structure is documented below.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter(name="constantParams")
    def constant_params(self) -> Sequence['outputs.GetDataserviceApisApiBackendConfigConstantParamResult']:
        """
        The backend constant parameters of the API.  
        The constant_params structure is documented below.
        """
        return pulumi.get(self, "constant_params")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The backend host.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The backend path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol of the backend request.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The backend timeout.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the API type to be queried.  
        The valid values are as follows:
        + **API_SPECIFIC_TYPE_CONFIGURATION**
        + **API_SPECIFIC_TYPE_REGISTER**
        + **API_SPECIFIC_TYPE_ORCHESTRATE**
        + **API_SPECIFIC_TYPE_MYBATIS**
        + **API_SPECIFIC_TYPE_SCRIPT**
        + **API_SPECIFIC_TYPE_GROOVY**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataserviceApisApiBackendConfigBackendParamResult(dict):
    def __init__(__self__, *,
                 backend_param_name: _builtins.str,
                 name: _builtins.str,
                 position: _builtins.str):
        """
        :param _builtins.str backend_param_name: The name of the corresponding backend parameter.
        :param _builtins.str name: Specifies the API name to be fuzzy queried.  
               The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
               allowed.
               The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
               or **Unicode** format.
        :param _builtins.str position: The position of the constant parameter.
        """
        pulumi.set(__self__, "backend_param_name", backend_param_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)

    @_builtins.property
    @pulumi.getter(name="backendParamName")
    def backend_param_name(self) -> _builtins.str:
        """
        The name of the corresponding backend parameter.
        """
        return pulumi.get(self, "backend_param_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the API name to be fuzzy queried.  
        The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
        allowed.
        The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
        or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def position(self) -> _builtins.str:
        """
        The position of the constant parameter.
        """
        return pulumi.get(self, "position")


@pulumi.output_type
class GetDataserviceApisApiBackendConfigConstantParamResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str,
                 position: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: Specifies the API description to be fuzzy queried.  
               Maximum of `255` characters are allowed.
        :param _builtins.str name: Specifies the API name to be fuzzy queried.  
               The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
               allowed.
               The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
               or **Unicode** format.
        :param _builtins.str position: The position of the constant parameter.
        :param _builtins.str type: Specifies the API type to be queried.  
               The valid values are as follows:
               + **API_SPECIFIC_TYPE_CONFIGURATION**
               + **API_SPECIFIC_TYPE_REGISTER**
               + **API_SPECIFIC_TYPE_ORCHESTRATE**
               + **API_SPECIFIC_TYPE_MYBATIS**
               + **API_SPECIFIC_TYPE_SCRIPT**
               + **API_SPECIFIC_TYPE_GROOVY**
        :param _builtins.str value: The value of the constant parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the API description to be fuzzy queried.  
        Maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the API name to be fuzzy queried.  
        The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
        allowed.
        The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
        or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def position(self) -> _builtins.str:
        """
        The position of the constant parameter.
        """
        return pulumi.get(self, "position")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the API type to be queried.  
        The valid values are as follows:
        + **API_SPECIFIC_TYPE_CONFIGURATION**
        + **API_SPECIFIC_TYPE_REGISTER**
        + **API_SPECIFIC_TYPE_ORCHESTRATE**
        + **API_SPECIFIC_TYPE_MYBATIS**
        + **API_SPECIFIC_TYPE_SCRIPT**
        + **API_SPECIFIC_TYPE_GROOVY**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the constant parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDataserviceApisApiDatasourceConfigResult(dict):
    def __init__(__self__, *,
                 access_mode: _builtins.str,
                 backend_params: Sequence['outputs.GetDataserviceApisApiDatasourceConfigBackendParamResult'],
                 connection_id: _builtins.str,
                 connection_name: _builtins.str,
                 database: _builtins.str,
                 datatable: _builtins.str,
                 order_params: Sequence['outputs.GetDataserviceApisApiDatasourceConfigOrderParamResult'],
                 queue: _builtins.str,
                 response_params: Sequence['outputs.GetDataserviceApisApiDatasourceConfigResponseParamResult'],
                 sql: _builtins.str,
                 table_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str access_mode: The access mode for the data.
        :param Sequence['GetDataserviceApisApiDatasourceConfigBackendParamArgs'] backend_params: The backend parameters of the API.  
               The backend_params structure is documented below.
        :param _builtins.str connection_id: The ID of the data connection for the DataArts Studio service.
        :param _builtins.str connection_name: The name of the data connection for the DataArts Studio service.
        :param _builtins.str database: The name of the database.
        :param _builtins.str datatable: Specifies the data table name used by API to be queried.
        :param Sequence['GetDataserviceApisApiDatasourceConfigOrderParamArgs'] order_params: The order parameters of the API.  
               The order_params structure is documented below.
        :param _builtins.str queue: The ID of the DLI queue.
        :param Sequence['GetDataserviceApisApiDatasourceConfigResponseParamArgs'] response_params: The response parameters of the API.  
               The response_params structure is documented below.
        :param _builtins.str sql: The SQL statements in script access type.
        :param _builtins.str table_id: The ID of the data table.
        :param _builtins.str type: Specifies the API type to be queried.  
               The valid values are as follows:
               + **API_SPECIFIC_TYPE_CONFIGURATION**
               + **API_SPECIFIC_TYPE_REGISTER**
               + **API_SPECIFIC_TYPE_ORCHESTRATE**
               + **API_SPECIFIC_TYPE_MYBATIS**
               + **API_SPECIFIC_TYPE_SCRIPT**
               + **API_SPECIFIC_TYPE_GROOVY**
        """
        pulumi.set(__self__, "access_mode", access_mode)
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_name", connection_name)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "datatable", datatable)
        pulumi.set(__self__, "order_params", order_params)
        pulumi.set(__self__, "queue", queue)
        pulumi.set(__self__, "response_params", response_params)
        pulumi.set(__self__, "sql", sql)
        pulumi.set(__self__, "table_id", table_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> _builtins.str:
        """
        The access mode for the data.
        """
        return pulumi.get(self, "access_mode")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetDataserviceApisApiDatasourceConfigBackendParamResult']:
        """
        The backend parameters of the API.  
        The backend_params structure is documented below.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        The ID of the data connection for the DataArts Studio service.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionName")
    def connection_name(self) -> _builtins.str:
        """
        The name of the data connection for the DataArts Studio service.
        """
        return pulumi.get(self, "connection_name")

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        The name of the database.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter
    def datatable(self) -> _builtins.str:
        """
        Specifies the data table name used by API to be queried.
        """
        return pulumi.get(self, "datatable")

    @_builtins.property
    @pulumi.getter(name="orderParams")
    def order_params(self) -> Sequence['outputs.GetDataserviceApisApiDatasourceConfigOrderParamResult']:
        """
        The order parameters of the API.  
        The order_params structure is documented below.
        """
        return pulumi.get(self, "order_params")

    @_builtins.property
    @pulumi.getter
    def queue(self) -> _builtins.str:
        """
        The ID of the DLI queue.
        """
        return pulumi.get(self, "queue")

    @_builtins.property
    @pulumi.getter(name="responseParams")
    def response_params(self) -> Sequence['outputs.GetDataserviceApisApiDatasourceConfigResponseParamResult']:
        """
        The response parameters of the API.  
        The response_params structure is documented below.
        """
        return pulumi.get(self, "response_params")

    @_builtins.property
    @pulumi.getter
    def sql(self) -> _builtins.str:
        """
        The SQL statements in script access type.
        """
        return pulumi.get(self, "sql")

    @_builtins.property
    @pulumi.getter(name="tableId")
    def table_id(self) -> _builtins.str:
        """
        The ID of the data table.
        """
        return pulumi.get(self, "table_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the API type to be queried.  
        The valid values are as follows:
        + **API_SPECIFIC_TYPE_CONFIGURATION**
        + **API_SPECIFIC_TYPE_REGISTER**
        + **API_SPECIFIC_TYPE_ORCHESTRATE**
        + **API_SPECIFIC_TYPE_MYBATIS**
        + **API_SPECIFIC_TYPE_SCRIPT**
        + **API_SPECIFIC_TYPE_GROOVY**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataserviceApisApiDatasourceConfigBackendParamResult(dict):
    def __init__(__self__, *,
                 condition: _builtins.str,
                 mapping: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str condition: The condition character.
        :param _builtins.str mapping: The name of the mapping parameter.
        :param _builtins.str name: Specifies the API name to be fuzzy queried.  
               The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
               allowed.
               The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
               or **Unicode** format.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "mapping", mapping)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        """
        The condition character.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def mapping(self) -> _builtins.str:
        """
        The name of the mapping parameter.
        """
        return pulumi.get(self, "mapping")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the API name to be fuzzy queried.  
        The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
        allowed.
        The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
        or **Unicode** format.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDataserviceApisApiDatasourceConfigOrderParamResult(dict):
    def __init__(__self__, *,
                 field: _builtins.str,
                 name: _builtins.str,
                 optional: _builtins.bool,
                 order: _builtins.int,
                 sort: _builtins.str):
        """
        :param _builtins.str field: The corresponding parameter field for the order parameter.
        :param _builtins.str name: Specifies the API name to be fuzzy queried.  
               The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
               allowed.
               The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
               or **Unicode** format.
        :param _builtins.bool optional: Whether this order parameter is the optional parameter.
        :param _builtins.int order: The order of the sorting parameters.
        :param _builtins.str sort: The sort type of the order parameter.
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "sort", sort)

    @_builtins.property
    @pulumi.getter
    def field(self) -> _builtins.str:
        """
        The corresponding parameter field for the order parameter.
        """
        return pulumi.get(self, "field")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the API name to be fuzzy queried.  
        The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
        allowed.
        The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
        or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Whether this order parameter is the optional parameter.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def order(self) -> _builtins.int:
        """
        The order of the sorting parameters.
        """
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> _builtins.str:
        """
        The sort type of the order parameter.
        """
        return pulumi.get(self, "sort")


@pulumi.output_type
class GetDataserviceApisApiDatasourceConfigResponseParamResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 example_value: _builtins.str,
                 field: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str description: Specifies the API description to be fuzzy queried.  
               Maximum of `255` characters are allowed.
        :param _builtins.str example_value: The example value of the request parameter.
        :param _builtins.str field: The corresponding parameter field for the order parameter.
        :param _builtins.str name: Specifies the API name to be fuzzy queried.  
               The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
               allowed.
               The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
               or **Unicode** format.
        :param _builtins.str type: Specifies the API type to be queried.  
               The valid values are as follows:
               + **API_SPECIFIC_TYPE_CONFIGURATION**
               + **API_SPECIFIC_TYPE_REGISTER**
               + **API_SPECIFIC_TYPE_ORCHESTRATE**
               + **API_SPECIFIC_TYPE_MYBATIS**
               + **API_SPECIFIC_TYPE_SCRIPT**
               + **API_SPECIFIC_TYPE_GROOVY**
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "example_value", example_value)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the API description to be fuzzy queried.  
        Maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="exampleValue")
    def example_value(self) -> _builtins.str:
        """
        The example value of the request parameter.
        """
        return pulumi.get(self, "example_value")

    @_builtins.property
    @pulumi.getter
    def field(self) -> _builtins.str:
        """
        The corresponding parameter field for the order parameter.
        """
        return pulumi.get(self, "field")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the API name to be fuzzy queried.  
        The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
        allowed.
        The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
        or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the API type to be queried.  
        The valid values are as follows:
        + **API_SPECIFIC_TYPE_CONFIGURATION**
        + **API_SPECIFIC_TYPE_REGISTER**
        + **API_SPECIFIC_TYPE_ORCHESTRATE**
        + **API_SPECIFIC_TYPE_MYBATIS**
        + **API_SPECIFIC_TYPE_SCRIPT**
        + **API_SPECIFIC_TYPE_GROOVY**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataserviceApisApiRequestParamResult(dict):
    def __init__(__self__, *,
                 default_value: _builtins.str,
                 description: _builtins.str,
                 example_value: _builtins.str,
                 name: _builtins.str,
                 necessary: _builtins.bool,
                 position: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str default_value: The default value of the request parameter.
        :param _builtins.str description: Specifies the API description to be fuzzy queried.  
               Maximum of `255` characters are allowed.
        :param _builtins.str example_value: The example value of the request parameter.
        :param _builtins.str name: Specifies the API name to be fuzzy queried.  
               The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
               allowed.
               The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
               or **Unicode** format.
        :param _builtins.bool necessary: Whether this parameter is the required parameter.
        :param _builtins.str position: The position of the constant parameter.
        :param _builtins.str type: Specifies the API type to be queried.  
               The valid values are as follows:
               + **API_SPECIFIC_TYPE_CONFIGURATION**
               + **API_SPECIFIC_TYPE_REGISTER**
               + **API_SPECIFIC_TYPE_ORCHESTRATE**
               + **API_SPECIFIC_TYPE_MYBATIS**
               + **API_SPECIFIC_TYPE_SCRIPT**
               + **API_SPECIFIC_TYPE_GROOVY**
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "example_value", example_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "necessary", necessary)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> _builtins.str:
        """
        The default value of the request parameter.
        """
        return pulumi.get(self, "default_value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the API description to be fuzzy queried.  
        Maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="exampleValue")
    def example_value(self) -> _builtins.str:
        """
        The example value of the request parameter.
        """
        return pulumi.get(self, "example_value")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the API name to be fuzzy queried.  
        The valid length is limited from `3` to `64`, only Chinese and English characters, digits and underscores (_) are
        allowed.
        The name must start with a Chinese or English character, and the Chinese characters must be in **UTF-8**
        or **Unicode** format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def necessary(self) -> _builtins.bool:
        """
        Whether this parameter is the required parameter.
        """
        return pulumi.get(self, "necessary")

    @_builtins.property
    @pulumi.getter
    def position(self) -> _builtins.str:
        """
        The position of the constant parameter.
        """
        return pulumi.get(self, "position")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the API type to be queried.  
        The valid values are as follows:
        + **API_SPECIFIC_TYPE_CONFIGURATION**
        + **API_SPECIFIC_TYPE_REGISTER**
        + **API_SPECIFIC_TYPE_ORCHESTRATE**
        + **API_SPECIFIC_TYPE_MYBATIS**
        + **API_SPECIFIC_TYPE_SCRIPT**
        + **API_SPECIFIC_TYPE_GROOVY**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataserviceAppsAppResult(dict):
    def __init__(__self__, *,
                 app_key: _builtins.str,
                 app_secret: _builtins.str,
                 app_type: _builtins.str,
                 create_user: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 update_user: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str app_key: The key of the application.
        :param _builtins.str app_secret: The secret of the application.
        :param _builtins.str app_type: The type of the application.
        :param _builtins.str create_user: The name of the application creator.
        :param _builtins.str created_at: The creation time of the application, in RFC3339 format.
        :param _builtins.str description: The description of the application.
        :param _builtins.str id: The ID of the application, in UUID format.
        :param _builtins.str name: Specifies the name of the applications to be fuzzy queried.
        :param _builtins.str update_user: The name of the application updater.
        :param _builtins.str updated_at: The latest update time of the application, in RFC3339 format.
        """
        pulumi.set(__self__, "app_key", app_key)
        pulumi.set(__self__, "app_secret", app_secret)
        pulumi.set(__self__, "app_type", app_type)
        pulumi.set(__self__, "create_user", create_user)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "update_user", update_user)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="appKey")
    def app_key(self) -> _builtins.str:
        """
        The key of the application.
        """
        return pulumi.get(self, "app_key")

    @_builtins.property
    @pulumi.getter(name="appSecret")
    def app_secret(self) -> _builtins.str:
        """
        The secret of the application.
        """
        return pulumi.get(self, "app_secret")

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> _builtins.str:
        """
        The type of the application.
        """
        return pulumi.get(self, "app_type")

    @_builtins.property
    @pulumi.getter(name="createUser")
    def create_user(self) -> _builtins.str:
        """
        The name of the application creator.
        """
        return pulumi.get(self, "create_user")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application, in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the applications to be fuzzy queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updateUser")
    def update_user(self) -> _builtins.str:
        """
        The name of the application updater.
        """
        return pulumi.get(self, "update_user")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetDataserviceAuthorizedAppsAppResult(dict):
    def __init__(__self__, *,
                 approved_at: _builtins.str,
                 expired_at: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 name: _builtins.str,
                 relationship_type: _builtins.str,
                 static_params: Sequence['outputs.GetDataserviceAuthorizedAppsAppStaticParamResult']):
        """
        :param _builtins.str approved_at: The approve time, in RFC3339 format.
        :param _builtins.str expired_at: The expiration time, in RFC3339 format.
        :param _builtins.str id: The ID of the application that has authorization.
        :param _builtins.str instance_id: The instance ID to which the authorized API belongs.
        :param _builtins.str instance_name: The instance name to which the authorized API belongs.
        :param _builtins.str name: The name of the static parameter.
        :param _builtins.str relationship_type: The relationship between the authorized API and the authorized APP list.
               + **LINK_WAITING_CHECK**: Pending to approval for authorize operation.
               + **LINKED**: Already authorized.
               + **OFFLINE_WAITING_CHECK**: Pending to approval for offline operation.
               + **RENEW_WAITING_CHECK**: Pending to approval for renew operation.
        :param Sequence['GetDataserviceAuthorizedAppsAppStaticParamArgs'] static_params: The configuration of the static parameters.  
               The static_params structure is documented below.
        """
        pulumi.set(__self__, "approved_at", approved_at)
        pulumi.set(__self__, "expired_at", expired_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "relationship_type", relationship_type)
        pulumi.set(__self__, "static_params", static_params)

    @_builtins.property
    @pulumi.getter(name="approvedAt")
    def approved_at(self) -> _builtins.str:
        """
        The approve time, in RFC3339 format.
        """
        return pulumi.get(self, "approved_at")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> _builtins.str:
        """
        The expiration time, in RFC3339 format.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application that has authorization.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The instance ID to which the authorized API belongs.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        The instance name to which the authorized API belongs.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the static parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="relationshipType")
    def relationship_type(self) -> _builtins.str:
        """
        The relationship between the authorized API and the authorized APP list.
        + **LINK_WAITING_CHECK**: Pending to approval for authorize operation.
        + **LINKED**: Already authorized.
        + **OFFLINE_WAITING_CHECK**: Pending to approval for offline operation.
        + **RENEW_WAITING_CHECK**: Pending to approval for renew operation.
        """
        return pulumi.get(self, "relationship_type")

    @_builtins.property
    @pulumi.getter(name="staticParams")
    def static_params(self) -> Sequence['outputs.GetDataserviceAuthorizedAppsAppStaticParamResult']:
        """
        The configuration of the static parameters.  
        The static_params structure is documented below.
        """
        return pulumi.get(self, "static_params")


@pulumi.output_type
class GetDataserviceAuthorizedAppsAppStaticParamResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The name of the static parameter.
        :param _builtins.str value: The value of the static parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the static parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the static parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDataserviceInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 all_namespace_publish_api_num: _builtins.int,
                 api_publishable_num: _builtins.int,
                 availability_zone: _builtins.str,
                 create_user: _builtins.str,
                 created_at: _builtins.str,
                 current_namespace_publish_api_num: _builtins.int,
                 deletable: _builtins.bool,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 external_address: _builtins.str,
                 flavors: Sequence['outputs.GetDataserviceInstancesInstanceFlavorResult'],
                 gateway_version: _builtins.str,
                 id: _builtins.str,
                 intranet_address: _builtins.str,
                 intranet_address_ipv6: _builtins.str,
                 name: _builtins.str,
                 node_num: _builtins.int,
                 nodes: Sequence['outputs.GetDataserviceInstancesInstanceNodeResult'],
                 private_zone_id: _builtins.str,
                 private_zone_name: _builtins.str,
                 public_zone_id: _builtins.str,
                 public_zone_name: _builtins.str,
                 security_group_id: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.int all_namespace_publish_api_num: The number of the published APIs.
        :param _builtins.int api_publishable_num: The API quota of the exclusive cluster.
        :param _builtins.str availability_zone: The availability zone where the exclusive cluster is located.
        :param _builtins.str create_user: Specifies the creator of the exclusive cluster to be queried.
        :param _builtins.str created_at: The create time of the node, in RFC3339 format.
        :param _builtins.int current_namespace_publish_api_num: The number of the published APIs in the current namespace.
        :param _builtins.bool deletable: Whether the exclusive cluster can be deleted.
        :param _builtins.str description: The description of the exclusive cluster.
        :param _builtins.str enterprise_project_id: The enterprise project ID to which the exclusive cluster belongs.
        :param _builtins.str external_address: The external IP address of the exclusive cluster.
        :param Sequence['GetDataserviceInstancesInstanceFlavorArgs'] flavors: The flavor of the exclusive cluster.  
               The flavor structure is documented below.
        :param _builtins.str gateway_version: The version of the node.
        :param _builtins.str id: The node ID.
        :param _builtins.str intranet_address: The intranet IP address of the exclusive cluster.
        :param _builtins.str intranet_address_ipv6: The intranet IPv6 address of the exclusive cluster.
        :param _builtins.str name: Specifies the exclusive cluster name to be queried.
        :param _builtins.int node_num: The node number of the exclusive cluster.
        :param Sequence['GetDataserviceInstancesInstanceNodeArgs'] nodes: The list of instance nodes.
               The nodes structure is documented below.
        :param _builtins.str private_zone_id: The private zone ID of the exclusive cluster.
        :param _builtins.str private_zone_name: The private zone name of the exclusive cluster.
        :param _builtins.str public_zone_id: The public zone ID of the exclusive cluster.
        :param _builtins.str public_zone_name: The public zone name of the exclusive cluster.
        :param _builtins.str security_group_id: The security group ID associated to the exclusive cluster.
        :param _builtins.str status: The status of the node.
        :param _builtins.str subnet_id: The subnet ID to which the exclusive cluster belongs.
        :param _builtins.str vpc_id: The VPC ID to which the exclusive cluster belongs.
        """
        pulumi.set(__self__, "all_namespace_publish_api_num", all_namespace_publish_api_num)
        pulumi.set(__self__, "api_publishable_num", api_publishable_num)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "create_user", create_user)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "current_namespace_publish_api_num", current_namespace_publish_api_num)
        pulumi.set(__self__, "deletable", deletable)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "external_address", external_address)
        pulumi.set(__self__, "flavors", flavors)
        pulumi.set(__self__, "gateway_version", gateway_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "intranet_address", intranet_address)
        pulumi.set(__self__, "intranet_address_ipv6", intranet_address_ipv6)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "private_zone_id", private_zone_id)
        pulumi.set(__self__, "private_zone_name", private_zone_name)
        pulumi.set(__self__, "public_zone_id", public_zone_id)
        pulumi.set(__self__, "public_zone_name", public_zone_name)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allNamespacePublishApiNum")
    def all_namespace_publish_api_num(self) -> _builtins.int:
        """
        The number of the published APIs.
        """
        return pulumi.get(self, "all_namespace_publish_api_num")

    @_builtins.property
    @pulumi.getter(name="apiPublishableNum")
    def api_publishable_num(self) -> _builtins.int:
        """
        The API quota of the exclusive cluster.
        """
        return pulumi.get(self, "api_publishable_num")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        The availability zone where the exclusive cluster is located.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="createUser")
    def create_user(self) -> _builtins.str:
        """
        Specifies the creator of the exclusive cluster to be queried.
        """
        return pulumi.get(self, "create_user")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time of the node, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="currentNamespacePublishApiNum")
    def current_namespace_publish_api_num(self) -> _builtins.int:
        """
        The number of the published APIs in the current namespace.
        """
        return pulumi.get(self, "current_namespace_publish_api_num")

    @_builtins.property
    @pulumi.getter
    def deletable(self) -> _builtins.bool:
        """
        Whether the exclusive cluster can be deleted.
        """
        return pulumi.get(self, "deletable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the exclusive cluster.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID to which the exclusive cluster belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="externalAddress")
    def external_address(self) -> _builtins.str:
        """
        The external IP address of the exclusive cluster.
        """
        return pulumi.get(self, "external_address")

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetDataserviceInstancesInstanceFlavorResult']:
        """
        The flavor of the exclusive cluster.  
        The flavor structure is documented below.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter(name="gatewayVersion")
    def gateway_version(self) -> _builtins.str:
        """
        The version of the node.
        """
        return pulumi.get(self, "gateway_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="intranetAddress")
    def intranet_address(self) -> _builtins.str:
        """
        The intranet IP address of the exclusive cluster.
        """
        return pulumi.get(self, "intranet_address")

    @_builtins.property
    @pulumi.getter(name="intranetAddressIpv6")
    def intranet_address_ipv6(self) -> _builtins.str:
        """
        The intranet IPv6 address of the exclusive cluster.
        """
        return pulumi.get(self, "intranet_address_ipv6")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the exclusive cluster name to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> _builtins.int:
        """
        The node number of the exclusive cluster.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetDataserviceInstancesInstanceNodeResult']:
        """
        The list of instance nodes.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="privateZoneId")
    def private_zone_id(self) -> _builtins.str:
        """
        The private zone ID of the exclusive cluster.
        """
        return pulumi.get(self, "private_zone_id")

    @_builtins.property
    @pulumi.getter(name="privateZoneName")
    def private_zone_name(self) -> _builtins.str:
        """
        The private zone name of the exclusive cluster.
        """
        return pulumi.get(self, "private_zone_name")

    @_builtins.property
    @pulumi.getter(name="publicZoneId")
    def public_zone_id(self) -> _builtins.str:
        """
        The public zone ID of the exclusive cluster.
        """
        return pulumi.get(self, "public_zone_id")

    @_builtins.property
    @pulumi.getter(name="publicZoneName")
    def public_zone_name(self) -> _builtins.str:
        """
        The public zone name of the exclusive cluster.
        """
        return pulumi.get(self, "public_zone_name")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The security group ID associated to the exclusive cluster.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the node.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The subnet ID to which the exclusive cluster belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The VPC ID to which the exclusive cluster belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetDataserviceInstancesInstanceFlavorResult(dict):
    def __init__(__self__, *,
                 disk_size: _builtins.int,
                 id: _builtins.str,
                 memory: _builtins.int,
                 name: _builtins.str,
                 vcpus: _builtins.int):
        """
        :param _builtins.int disk_size: The number of the disk size.
        :param _builtins.str id: The node ID.
        :param _builtins.int memory: The memory size in the flavor, in GB.
        :param _builtins.str name: Specifies the exclusive cluster name to be queried.
        :param _builtins.int vcpus: The number of CPU cores in the flavor.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> _builtins.int:
        """
        The number of the disk size.
        """
        return pulumi.get(self, "disk_size")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        The memory size in the flavor, in GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the exclusive cluster name to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        The number of CPU cores in the flavor.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetDataserviceInstancesInstanceNodeResult(dict):
    def __init__(__self__, *,
                 create_user: _builtins.str,
                 created_at: _builtins.str,
                 gateway_version: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str create_user: Specifies the creator of the exclusive cluster to be queried.
        :param _builtins.str created_at: The create time of the node, in RFC3339 format.
        :param _builtins.str gateway_version: The version of the node.
        :param _builtins.str id: The node ID.
        :param _builtins.str name: Specifies the exclusive cluster name to be queried.
        :param _builtins.str private_ip: The private IP address of the node.
        :param _builtins.str status: The status of the node.
        """
        pulumi.set(__self__, "create_user", create_user)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "gateway_version", gateway_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createUser")
    def create_user(self) -> _builtins.str:
        """
        Specifies the creator of the exclusive cluster to be queried.
        """
        return pulumi.get(self, "create_user")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time of the node, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="gatewayVersion")
    def gateway_version(self) -> _builtins.str:
        """
        The version of the node.
        """
        return pulumi.get(self, "gateway_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the exclusive cluster name to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The private IP address of the node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the node.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDataserviceMessagesMessageResult(dict):
    def __init__(__self__, *,
                 api_apply_status: _builtins.str,
                 api_apply_type: _builtins.str,
                 api_id: _builtins.str,
                 api_name: _builtins.str,
                 api_using_time: _builtins.str,
                 app_id: _builtins.str,
                 app_name: _builtins.str,
                 apply_time: _builtins.str,
                 approval_time: _builtins.str,
                 approver_name: _builtins.str,
                 comment: _builtins.str,
                 id: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str api_apply_status: The apply status for API.
               + **STATUS_TYPE_PENDING_APPROVAL**: Pending review.
               + **STATUS_TYPE_REJECTED**: Rejected.
               + **STATUS_TYPE_PENDING_CHECK**: Pending confirmation.
               + **STATUS_TYPE_PENDING_EXECUTE**: Pending execution.
               + **STATUS_TYPE_SYNCHRONOUS_EXECUTE**: Synchronous execution.
               + **STATUS_TYPE_FORCED_CANCEL**: Forced cancellation.
               + **STATUS_TYPE_PASSED**: Passed.
        :param _builtins.str api_apply_type: The apply type.
               + **APPLY_TYPE_PUBLISH**: Release API.
               + **APPLY_TYPE_AUTHORIZE**: API active authorization.
               + **APPLY_TYPE_APPLY**: Review API.
               + **APPLY_TYPE_RENEW**: Apply for renewal of API.
               + **APPLY_TYPE_STOP**: Apply for suspension of API.
               + **APPLY_TYPE_RECOVER**: Apply for recovery of API.
               + **APPLY_TYPE_API_CANCEL_AUTHORIZE**: API cancellation of authorization.
               + **APPLY_TYPE_APP_CANCEL_AUTHORIZE**: APP cancellation of authorization.
               + **APPLY_TYPE_OFFLINE**: Apply for offline.
        :param _builtins.str api_id: The ID of the exclusive API to which the approval message belongs.
        :param _builtins.str api_name: Specifies the name of the API to be approved.
        :param _builtins.str api_using_time: The expiration time used by the API, in RFC3339 format.
        :param _builtins.str app_id: The application ID of the API that has been bound (or is to be bound).
        :param _builtins.str app_name: The application name of the API that has been bound (or is to be bound).
        :param _builtins.str apply_time: The apply time, in RFC3339 format.
        :param _builtins.str approval_time: The approval time of the approval message, in RFC3339 format.
        :param _builtins.str approver_name: The approver name.
        :param _builtins.str comment: The approval comment.
        :param _builtins.str id: The ID of the approval message, in UUID format.
        :param _builtins.str user_name: The name of applicant.
        """
        pulumi.set(__self__, "api_apply_status", api_apply_status)
        pulumi.set(__self__, "api_apply_type", api_apply_type)
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "api_using_time", api_using_time)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "apply_time", apply_time)
        pulumi.set(__self__, "approval_time", approval_time)
        pulumi.set(__self__, "approver_name", approver_name)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="apiApplyStatus")
    def api_apply_status(self) -> _builtins.str:
        """
        The apply status for API.
        + **STATUS_TYPE_PENDING_APPROVAL**: Pending review.
        + **STATUS_TYPE_REJECTED**: Rejected.
        + **STATUS_TYPE_PENDING_CHECK**: Pending confirmation.
        + **STATUS_TYPE_PENDING_EXECUTE**: Pending execution.
        + **STATUS_TYPE_SYNCHRONOUS_EXECUTE**: Synchronous execution.
        + **STATUS_TYPE_FORCED_CANCEL**: Forced cancellation.
        + **STATUS_TYPE_PASSED**: Passed.
        """
        return pulumi.get(self, "api_apply_status")

    @_builtins.property
    @pulumi.getter(name="apiApplyType")
    def api_apply_type(self) -> _builtins.str:
        """
        The apply type.
        + **APPLY_TYPE_PUBLISH**: Release API.
        + **APPLY_TYPE_AUTHORIZE**: API active authorization.
        + **APPLY_TYPE_APPLY**: Review API.
        + **APPLY_TYPE_RENEW**: Apply for renewal of API.
        + **APPLY_TYPE_STOP**: Apply for suspension of API.
        + **APPLY_TYPE_RECOVER**: Apply for recovery of API.
        + **APPLY_TYPE_API_CANCEL_AUTHORIZE**: API cancellation of authorization.
        + **APPLY_TYPE_APP_CANCEL_AUTHORIZE**: APP cancellation of authorization.
        + **APPLY_TYPE_OFFLINE**: Apply for offline.
        """
        return pulumi.get(self, "api_apply_type")

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> _builtins.str:
        """
        The ID of the exclusive API to which the approval message belongs.
        """
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="apiName")
    def api_name(self) -> _builtins.str:
        """
        Specifies the name of the API to be approved.
        """
        return pulumi.get(self, "api_name")

    @_builtins.property
    @pulumi.getter(name="apiUsingTime")
    def api_using_time(self) -> _builtins.str:
        """
        The expiration time used by the API, in RFC3339 format.
        """
        return pulumi.get(self, "api_using_time")

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> _builtins.str:
        """
        The application ID of the API that has been bound (or is to be bound).
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The application name of the API that has been bound (or is to be bound).
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="applyTime")
    def apply_time(self) -> _builtins.str:
        """
        The apply time, in RFC3339 format.
        """
        return pulumi.get(self, "apply_time")

    @_builtins.property
    @pulumi.getter(name="approvalTime")
    def approval_time(self) -> _builtins.str:
        """
        The approval time of the approval message, in RFC3339 format.
        """
        return pulumi.get(self, "approval_time")

    @_builtins.property
    @pulumi.getter(name="approverName")
    def approver_name(self) -> _builtins.str:
        """
        The approver name.
        """
        return pulumi.get(self, "approver_name")

    @_builtins.property
    @pulumi.getter
    def comment(self) -> _builtins.str:
        """
        The approval comment.
        """
        return pulumi.get(self, "comment")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the approval message, in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The name of applicant.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetFactoryJobsJobResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 directory: _builtins.str,
                 end_time: _builtins.str,
                 is_single_task_job: _builtins.bool,
                 last_instance_end_time: _builtins.str,
                 last_instance_status: _builtins.str,
                 name: _builtins.str,
                 owner: _builtins.str,
                 priority: _builtins.int,
                 process_type: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 updated_by: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the job, in RFC3339 format.
        :param _builtins.str created_by: The creator of the job.
        :param _builtins.str directory: The directory tree path of the job.
        :param _builtins.str end_time: The end time of the job scheduling, in RFC3339 format.
        :param _builtins.bool is_single_task_job: Whether the job is single task.
        :param _builtins.str last_instance_end_time: The latest end time of the instance corresponding to the job, in RFC3339 format.
        :param _builtins.str last_instance_status: The latest running status of the instance corresponding to the job.
               + **running**
               + **success**
               + **fail**
               + **running-exception**
               + **manual-stop**
        :param _builtins.str name: Specified the job name to be queried. Fuzzy search is supported.
        :param _builtins.str owner: The owner of the job.
        :param _builtins.int priority: The priority of the job.
               + **0**: High priority.
               + **1**: Medium priority.
               + **2**: Low priority.
        :param _builtins.str process_type: Specified the job type to be queried.
               If omitted, the default value is **BATCH**.
               The valid values are as follows:
               + **REAL_TIME**: Real-time processing.
               + **BATCH**: Batch processing.
        :param _builtins.str start_time: The start time of the job scheduling, in RFC3339 format.
        :param _builtins.str status: The current status of the job.
               + **NORMAL**
               + **STOPPED**
               + **SCHEDULING**
               + **PAUSED**
               + **EXCEPTION**
        :param _builtins.str updated_at: The latest update time of the job, in RFC3339 format.
        :param _builtins.str updated_by: The name of the user who last updated the job.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "directory", directory)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "is_single_task_job", is_single_task_job)
        pulumi.set(__self__, "last_instance_end_time", last_instance_end_time)
        pulumi.set(__self__, "last_instance_status", last_instance_status)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "process_type", process_type)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the job, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The creator of the job.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def directory(self) -> _builtins.str:
        """
        The directory tree path of the job.
        """
        return pulumi.get(self, "directory")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time of the job scheduling, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="isSingleTaskJob")
    def is_single_task_job(self) -> _builtins.bool:
        """
        Whether the job is single task.
        """
        return pulumi.get(self, "is_single_task_job")

    @_builtins.property
    @pulumi.getter(name="lastInstanceEndTime")
    def last_instance_end_time(self) -> _builtins.str:
        """
        The latest end time of the instance corresponding to the job, in RFC3339 format.
        """
        return pulumi.get(self, "last_instance_end_time")

    @_builtins.property
    @pulumi.getter(name="lastInstanceStatus")
    def last_instance_status(self) -> _builtins.str:
        """
        The latest running status of the instance corresponding to the job.
        + **running**
        + **success**
        + **fail**
        + **running-exception**
        + **manual-stop**
        """
        return pulumi.get(self, "last_instance_status")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specified the job name to be queried. Fuzzy search is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        The owner of the job.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        The priority of the job.
        + **0**: High priority.
        + **1**: Medium priority.
        + **2**: Low priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="processType")
    def process_type(self) -> _builtins.str:
        """
        Specified the job type to be queried.
        If omitted, the default value is **BATCH**.
        The valid values are as follows:
        + **REAL_TIME**: Real-time processing.
        + **BATCH**: Batch processing.
        """
        return pulumi.get(self, "process_type")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        The start time of the job scheduling, in RFC3339 format.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the job.
        + **NORMAL**
        + **STOPPED**
        + **SCHEDULING**
        + **PAUSED**
        + **EXCEPTION**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the job, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The name of the user who last updated the job.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetQualityTasksTaskResult(dict):
    def __init__(__self__, *,
                 category_id: _builtins.str,
                 created_at: _builtins.str,
                 creator: _builtins.str,
                 id: _builtins.float,
                 last_run_time: _builtins.str,
                 name: _builtins.str,
                 schedule_interval: _builtins.str,
                 schedule_period: _builtins.str,
                 schedule_status: _builtins.str):
        """
        :param _builtins.str category_id: Specifies the category ID to which the quality tasks belong.
        :param _builtins.str created_at: The creation time of the quality task, in RFC3339 format.
        :param _builtins.str creator: Specifies the name of the quality task creator.
        :param _builtins.float id: The API ID, in UUID format.
        :param _builtins.str last_run_time: The last run time of the quality task, in RFC3339 format.
        :param _builtins.str name: Specifies the name of the quality task.
        :param _builtins.str schedule_interval: The schedule interval of the quality task.
               + If the `schedule_period` is **MINUTE**,**HOUR** or **DAY**, a numeric string is returned.
               + If the `schedule_period` is **WEEK**, the scheduling week information is returned, e.g. **MONDAY**, **THURSDAY**.
        :param _builtins.str schedule_period: The schedule period of the quality task.
               + **MINUTE**
               + **HOUR**
               + **DAY**
               + **WEEK**
        :param _builtins.str schedule_status: Specifies the schedule status of the quality task.
               + **UNKNOWN**
               + **NOT_START**
               + **SCHEDULING**
               + **FINISH_SUCCESS**
               + **KILL**
               + **RUNNING_EXCEPTION**
        """
        pulumi.set(__self__, "category_id", category_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_run_time", last_run_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schedule_interval", schedule_interval)
        pulumi.set(__self__, "schedule_period", schedule_period)
        pulumi.set(__self__, "schedule_status", schedule_status)

    @_builtins.property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> _builtins.str:
        """
        Specifies the category ID to which the quality tasks belong.
        """
        return pulumi.get(self, "category_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the quality task, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        Specifies the name of the quality task creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        """
        The API ID, in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastRunTime")
    def last_run_time(self) -> _builtins.str:
        """
        The last run time of the quality task, in RFC3339 format.
        """
        return pulumi.get(self, "last_run_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the quality task.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="scheduleInterval")
    def schedule_interval(self) -> _builtins.str:
        """
        The schedule interval of the quality task.
        + If the `schedule_period` is **MINUTE**,**HOUR** or **DAY**, a numeric string is returned.
        + If the `schedule_period` is **WEEK**, the scheduling week information is returned, e.g. **MONDAY**, **THURSDAY**.
        """
        return pulumi.get(self, "schedule_interval")

    @_builtins.property
    @pulumi.getter(name="schedulePeriod")
    def schedule_period(self) -> _builtins.str:
        """
        The schedule period of the quality task.
        + **MINUTE**
        + **HOUR**
        + **DAY**
        + **WEEK**
        """
        return pulumi.get(self, "schedule_period")

    @_builtins.property
    @pulumi.getter(name="scheduleStatus")
    def schedule_status(self) -> _builtins.str:
        """
        Specifies the schedule status of the quality task.
        + **UNKNOWN**
        + **NOT_START**
        + **SCHEDULING**
        + **FINISH_SUCCESS**
        + **KILL**
        + **RUNNING_EXCEPTION**
        """
        return pulumi.get(self, "schedule_status")


@pulumi.output_type
class GetStudioDataConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 qualified_name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str agent_id: The agent ID corresponding to the data connection.
        :param _builtins.str created_at: The creation time of the data connection.
        :param _builtins.str created_by: The creator of the data connection.
        :param _builtins.str id: The ID of the data connection.
        :param _builtins.str name: Specifies the name of the data connection.
               Supports fuzzy search.
        :param _builtins.str qualified_name: The qualified name of the data connection.
        :param _builtins.str type: Specifies the type of the data connection.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "qualified_name", qualified_name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The agent ID corresponding to the data connection.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the data connection.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The creator of the data connection.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the data connection.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the data connection.
        Supports fuzzy search.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="qualifiedName")
    def qualified_name(self) -> _builtins.str:
        """
        The qualified name of the data connection.
        """
        return pulumi.get(self, "qualified_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the data connection.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetStudioWorkspacesWorkspaceResult(dict):
    def __init__(__self__, *,
                 bad_record_location_name: _builtins.str,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 is_default: _builtins.float,
                 job_log_location_name: _builtins.str,
                 member_num: _builtins.float,
                 name: _builtins.str,
                 updated_at: _builtins.str,
                 updated_by: _builtins.str):
        """
        :param _builtins.str bad_record_location_name: The bad record location name of workspace.
        :param _builtins.str created_at: The create time of the workspace.
        :param _builtins.str created_by: Specifies the user creating workspaces used to filter results.
        :param _builtins.str description: The description of workspace.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID used to filter results.
        :param _builtins.str id: The workspace ID.
        :param _builtins.float is_default: Indicates the workspace is default sapce or not.
               + **0** means private space.
               + **1** means default space.
               + **2** means public space.
        :param _builtins.str job_log_location_name: The job log location name of workspace.
        :param _builtins.float member_num: The member num of the workspace.
        :param _builtins.str name: Specifies the workspace name used to filter results.
        :param _builtins.str updated_at: The update time of the workspace.
        :param _builtins.str updated_by: The user updating the workspace.
        """
        pulumi.set(__self__, "bad_record_location_name", bad_record_location_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "job_log_location_name", job_log_location_name)
        pulumi.set(__self__, "member_num", member_num)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="badRecordLocationName")
    def bad_record_location_name(self) -> _builtins.str:
        """
        The bad record location name of workspace.
        """
        return pulumi.get(self, "bad_record_location_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time of the workspace.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        Specifies the user creating workspaces used to filter results.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of workspace.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID used to filter results.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.float:
        """
        Indicates the workspace is default sapce or not.
        + **0** means private space.
        + **1** means default space.
        + **2** means public space.
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="jobLogLocationName")
    def job_log_location_name(self) -> _builtins.str:
        """
        The job log location name of workspace.
        """
        return pulumi.get(self, "job_log_location_name")

    @_builtins.property
    @pulumi.getter(name="memberNum")
    def member_num(self) -> _builtins.float:
        """
        The member num of the workspace.
        """
        return pulumi.get(self, "member_num")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the workspace name used to filter results.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the workspace.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        """
        The user updating the workspace.
        """
        return pulumi.get(self, "updated_by")


