# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['StudioDataConnectionArgs', 'StudioDataConnection']

@pulumi.input_type
class StudioDataConnectionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 agent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_name: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 env_type: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a StudioDataConnection resource.
        :param pulumi.Input[_builtins.str] type: Specifies the data connection type.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the data connection belongs.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] agent_id: Specifies the agent ID.
        :param pulumi.Input[_builtins.str] agent_name: Specifies the agent name.  
               Required if the `agent_id` is specified.
        :param pulumi.Input[_builtins.str] config: Specifies the dynamic configuration for the specified type of data connection.
               
               > Please fill the dynamic configuration based on the debugging result on the console. Pay attention to the type of
               the type of the value: the `bool` values (HCL format) and the `bool values of string type` (HCL format) are not
               considered equal.
        :param pulumi.Input[_builtins.int] env_type: Specifies the data connection mode.
               + **0**: Development mode.
               + **1**: Production mode.
               
               Defaults to `0`.
        :param pulumi.Input[_builtins.str] name: Specifies the data connection name.  
               The value contains a maximum of `100` characters, including only letters, digits, hyphens (-), and underscores (_).
               The connection name must be unique.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the data connection is located.
               Changing this will create a new resource.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if agent_name is not None:
            pulumi.set(__self__, "agent_name", agent_name)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if env_type is not None:
            pulumi.set(__self__, "env_type", env_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the data connection type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the data connection belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the agent ID.
        """
        return pulumi.get(self, "agent_id")

    @agent_id.setter
    def agent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_id", value)

    @_builtins.property
    @pulumi.getter(name="agentName")
    def agent_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the agent name.  
        Required if the `agent_id` is specified.
        """
        return pulumi.get(self, "agent_name")

    @agent_name.setter
    def agent_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_name", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dynamic configuration for the specified type of data connection.

        > Please fill the dynamic configuration based on the debugging result on the console. Pay attention to the type of
        the type of the value: the `bool` values (HCL format) and the `bool values of string type` (HCL format) are not
        considered equal.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter(name="envType")
    def env_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the data connection mode.
        + **0**: Development mode.
        + **1**: Production mode.

        Defaults to `0`.
        """
        return pulumi.get(self, "env_type")

    @env_type.setter
    def env_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "env_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection name.  
        The value contains a maximum of `100` characters, including only letters, digits, hyphens (-), and underscores (_).
        The connection name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the data connection is located.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _StudioDataConnectionState:
    def __init__(__self__, *,
                 agent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_name: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 env_type: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 qualified_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering StudioDataConnection resources.
        :param pulumi.Input[_builtins.str] agent_id: Specifies the agent ID.
        :param pulumi.Input[_builtins.str] agent_name: Specifies the agent name.  
               Required if the `agent_id` is specified.
        :param pulumi.Input[_builtins.str] config: Specifies the dynamic configuration for the specified type of data connection.
               
               > Please fill the dynamic configuration based on the debugging result on the console. Pay attention to the type of
               the type of the value: the `bool` values (HCL format) and the `bool values of string type` (HCL format) are not
               considered equal.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the data connection.
        :param pulumi.Input[_builtins.str] created_by: The name of the data connection creator.
        :param pulumi.Input[_builtins.int] env_type: Specifies the data connection mode.
               + **0**: Development mode.
               + **1**: Production mode.
               
               Defaults to `0`.
        :param pulumi.Input[_builtins.str] name: Specifies the data connection name.  
               The value contains a maximum of `100` characters, including only letters, digits, hyphens (-), and underscores (_).
               The connection name must be unique.
        :param pulumi.Input[_builtins.str] qualified_name: The qualified name of this data connection.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the data connection is located.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the data connection type.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the data connection belongs.
               Changing this will create a new resource.
        """
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if agent_name is not None:
            pulumi.set(__self__, "agent_name", agent_name)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if env_type is not None:
            pulumi.set(__self__, "env_type", env_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qualified_name is not None:
            pulumi.set(__self__, "qualified_name", qualified_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the agent ID.
        """
        return pulumi.get(self, "agent_id")

    @agent_id.setter
    def agent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_id", value)

    @_builtins.property
    @pulumi.getter(name="agentName")
    def agent_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the agent name.  
        Required if the `agent_id` is specified.
        """
        return pulumi.get(self, "agent_name")

    @agent_name.setter
    def agent_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_name", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dynamic configuration for the specified type of data connection.

        > Please fill the dynamic configuration based on the debugging result on the console. Pay attention to the type of
        the type of the value: the `bool` values (HCL format) and the `bool values of string type` (HCL format) are not
        considered equal.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the data connection.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the data connection creator.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="envType")
    def env_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the data connection mode.
        + **0**: Development mode.
        + **1**: Production mode.

        Defaults to `0`.
        """
        return pulumi.get(self, "env_type")

    @env_type.setter
    def env_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "env_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection name.  
        The value contains a maximum of `100` characters, including only letters, digits, hyphens (-), and underscores (_).
        The connection name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="qualifiedName")
    def qualified_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The qualified name of this data connection.
        """
        return pulumi.get(self, "qualified_name")

    @qualified_name.setter
    def qualified_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qualified_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the data connection is located.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the data connection belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/studioDataConnection:StudioDataConnection")
class StudioDataConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_name: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 env_type: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource you can configure data source information and create a data connection within HuaweiCloud,
        through which you can access data sources when developing scripts and jobs.

        > There can be only one data connection of the same type.

        ## Example Usage

        ### Create a data connection of the DLI type

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        connection_name = config.require_object("connectionName")
        test = huaweicloud.dataartsstudio.StudioDataConnection("test",
            workspace_id=workspace_id,
            type="DLI",
            name=connection_name,
            env_type=0,
            config=json.dumps({
                "cdm_property_enable": "false",
            }))
        ```

        ## Import

        Data connections can be imported using related `workspace_id` and their `name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/studioDataConnection:StudioDataConnection test <workspace_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agent_id: Specifies the agent ID.
        :param pulumi.Input[_builtins.str] agent_name: Specifies the agent name.  
               Required if the `agent_id` is specified.
        :param pulumi.Input[_builtins.str] config: Specifies the dynamic configuration for the specified type of data connection.
               
               > Please fill the dynamic configuration based on the debugging result on the console. Pay attention to the type of
               the type of the value: the `bool` values (HCL format) and the `bool values of string type` (HCL format) are not
               considered equal.
        :param pulumi.Input[_builtins.int] env_type: Specifies the data connection mode.
               + **0**: Development mode.
               + **1**: Production mode.
               
               Defaults to `0`.
        :param pulumi.Input[_builtins.str] name: Specifies the data connection name.  
               The value contains a maximum of `100` characters, including only letters, digits, hyphens (-), and underscores (_).
               The connection name must be unique.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the data connection is located.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the data connection type.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the data connection belongs.
               Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StudioDataConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource you can configure data source information and create a data connection within HuaweiCloud,
        through which you can access data sources when developing scripts and jobs.

        > There can be only one data connection of the same type.

        ## Example Usage

        ### Create a data connection of the DLI type

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        connection_name = config.require_object("connectionName")
        test = huaweicloud.dataartsstudio.StudioDataConnection("test",
            workspace_id=workspace_id,
            type="DLI",
            name=connection_name,
            env_type=0,
            config=json.dumps({
                "cdm_property_enable": "false",
            }))
        ```

        ## Import

        Data connections can be imported using related `workspace_id` and their `name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/studioDataConnection:StudioDataConnection test <workspace_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param StudioDataConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StudioDataConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_name: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 env_type: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StudioDataConnectionArgs.__new__(StudioDataConnectionArgs)

            __props__.__dict__["agent_id"] = agent_id
            __props__.__dict__["agent_name"] = agent_name
            __props__.__dict__["config"] = config
            __props__.__dict__["env_type"] = env_type
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["qualified_name"] = None
        super(StudioDataConnection, __self__).__init__(
            'huaweicloud:DataArtsStudio/studioDataConnection:StudioDataConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agent_id: Optional[pulumi.Input[_builtins.str]] = None,
            agent_name: Optional[pulumi.Input[_builtins.str]] = None,
            config: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            env_type: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            qualified_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'StudioDataConnection':
        """
        Get an existing StudioDataConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agent_id: Specifies the agent ID.
        :param pulumi.Input[_builtins.str] agent_name: Specifies the agent name.  
               Required if the `agent_id` is specified.
        :param pulumi.Input[_builtins.str] config: Specifies the dynamic configuration for the specified type of data connection.
               
               > Please fill the dynamic configuration based on the debugging result on the console. Pay attention to the type of
               the type of the value: the `bool` values (HCL format) and the `bool values of string type` (HCL format) are not
               considered equal.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the data connection.
        :param pulumi.Input[_builtins.str] created_by: The name of the data connection creator.
        :param pulumi.Input[_builtins.int] env_type: Specifies the data connection mode.
               + **0**: Development mode.
               + **1**: Production mode.
               
               Defaults to `0`.
        :param pulumi.Input[_builtins.str] name: Specifies the data connection name.  
               The value contains a maximum of `100` characters, including only letters, digits, hyphens (-), and underscores (_).
               The connection name must be unique.
        :param pulumi.Input[_builtins.str] qualified_name: The qualified name of this data connection.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the data connection is located.
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the data connection type.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the data connection belongs.
               Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StudioDataConnectionState.__new__(_StudioDataConnectionState)

        __props__.__dict__["agent_id"] = agent_id
        __props__.__dict__["agent_name"] = agent_name
        __props__.__dict__["config"] = config
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["env_type"] = env_type
        __props__.__dict__["name"] = name
        __props__.__dict__["qualified_name"] = qualified_name
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["workspace_id"] = workspace_id
        return StudioDataConnection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the agent ID.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="agentName")
    def agent_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the agent name.  
        Required if the `agent_id` is specified.
        """
        return pulumi.get(self, "agent_name")

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the dynamic configuration for the specified type of data connection.

        > Please fill the dynamic configuration based on the debugging result on the console. Pay attention to the type of
        the type of the value: the `bool` values (HCL format) and the `bool values of string type` (HCL format) are not
        considered equal.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the data connection.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the data connection creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="envType")
    def env_type(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the data connection mode.
        + **0**: Development mode.
        + **1**: Production mode.

        Defaults to `0`.
        """
        return pulumi.get(self, "env_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the data connection name.  
        The value contains a maximum of `100` characters, including only letters, digits, hyphens (-), and underscores (_).
        The connection name must be unique.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="qualifiedName")
    def qualified_name(self) -> pulumi.Output[_builtins.str]:
        """
        The qualified name of this data connection.
        """
        return pulumi.get(self, "qualified_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the data connection is located.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the data connection type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the data connection belongs.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

