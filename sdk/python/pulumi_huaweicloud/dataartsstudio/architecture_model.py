# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ArchitectureModelArgs', 'ArchitectureModel']

@pulumi.input_type
class ArchitectureModelArgs:
    def __init__(__self__, *,
                 physical: pulumi.Input[_builtins.bool],
                 type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_type: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ArchitectureModel resource.
        :param pulumi.Input[_builtins.bool] physical: Specifies the model is physical or logical.
               When the value is **true**, it means physical model.
               Changing this parameter will create a new model.
        :param pulumi.Input[_builtins.str] type: Specifies the model type. The valid values are **THIRD_NF** and **DIMENSION**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the model in.
               Changing this parameter will create a new model.
        :param pulumi.Input[_builtins.str] description: Specifies the description of model.
        :param pulumi.Input[_builtins.str] dw_type: Specifies the data connection type. This parameter is mandatory when
               `physical` is **true**. The valid values are:
               + **DWS**
               + **DLI**
               + **MRS_HIVE**
               + **POSTGRESQL**
               + **MRS_SPARK**
               + **CLICKHOUSE**
               + **MYSQL**
               + **ORACLE**
        :param pulumi.Input[_builtins.str] level: Specifies the data warehouse layer. Valid values are **SDI** and **DWI**.
        :param pulumi.Input[_builtins.str] name: Specifies the model name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the model.
               If omitted, the provider-level region will be used. Changing this parameter will create a new model.
        """
        pulumi.set(__self__, "physical", physical)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dw_type is not None:
            pulumi.set(__self__, "dw_type", dw_type)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def physical(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies the model is physical or logical.
        When the value is **true**, it means physical model.
        Changing this parameter will create a new model.
        """
        return pulumi.get(self, "physical")

    @physical.setter
    def physical(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "physical", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the model type. The valid values are **THIRD_NF** and **DIMENSION**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID which the model in.
        Changing this parameter will create a new model.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of model.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection type. This parameter is mandatory when
        `physical` is **true**. The valid values are:
        + **DWS**
        + **DLI**
        + **MRS_HIVE**
        + **POSTGRESQL**
        + **MRS_SPARK**
        + **CLICKHOUSE**
        + **MYSQL**
        + **ORACLE**
        """
        return pulumi.get(self, "dw_type")

    @dw_type.setter
    def dw_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dw_type", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data warehouse layer. Valid values are **SDI** and **DWI**.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the model name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to manage the model.
        If omitted, the provider-level region will be used. Changing this parameter will create a new model.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ArchitectureModelState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_type: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 physical: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ArchitectureModel resources.
        :param pulumi.Input[_builtins.str] created_at: The create time of the model.
        :param pulumi.Input[_builtins.str] created_by: The person creating the model.
        :param pulumi.Input[_builtins.str] description: Specifies the description of model.
        :param pulumi.Input[_builtins.str] dw_type: Specifies the data connection type. This parameter is mandatory when
               `physical` is **true**. The valid values are:
               + **DWS**
               + **DLI**
               + **MRS_HIVE**
               + **POSTGRESQL**
               + **MRS_SPARK**
               + **CLICKHOUSE**
               + **MYSQL**
               + **ORACLE**
        :param pulumi.Input[_builtins.str] level: Specifies the data warehouse layer. Valid values are **SDI** and **DWI**.
        :param pulumi.Input[_builtins.str] name: Specifies the model name.
        :param pulumi.Input[_builtins.bool] physical: Specifies the model is physical or logical.
               When the value is **true**, it means physical model.
               Changing this parameter will create a new model.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the model.
               If omitted, the provider-level region will be used. Changing this parameter will create a new model.
        :param pulumi.Input[_builtins.str] type: Specifies the model type. The valid values are **THIRD_NF** and **DIMENSION**.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the model.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the model.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the model in.
               Changing this parameter will create a new model.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dw_type is not None:
            pulumi.set(__self__, "dw_type", dw_type)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if physical is not None:
            pulumi.set(__self__, "physical", physical)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The create time of the model.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person creating the model.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of model.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection type. This parameter is mandatory when
        `physical` is **true**. The valid values are:
        + **DWS**
        + **DLI**
        + **MRS_HIVE**
        + **POSTGRESQL**
        + **MRS_SPARK**
        + **CLICKHOUSE**
        + **MYSQL**
        + **ORACLE**
        """
        return pulumi.get(self, "dw_type")

    @dw_type.setter
    def dw_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dw_type", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data warehouse layer. Valid values are **SDI** and **DWI**.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the model name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def physical(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the model is physical or logical.
        When the value is **true**, it means physical model.
        Changing this parameter will create a new model.
        """
        return pulumi.get(self, "physical")

    @physical.setter
    def physical(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "physical", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to manage the model.
        If omitted, the provider-level region will be used. Changing this parameter will create a new model.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the model type. The valid values are **THIRD_NF** and **DIMENSION**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the model.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person updating the model.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID which the model in.
        Changing this parameter will create a new model.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/architectureModel:ArchitectureModel")
class ArchitectureModel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_type: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 physical: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages DataArts Architecture ER Model resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        physical_model = huaweicloud.dataartsstudio.ArchitectureModel("physical_model",
            workspace_id=workspace_id,
            name=name,
            type="THIRD_NF",
            physical=True,
            dw_type="DWS")
        logic_model = huaweicloud.dataartsstudio.ArchitectureModel("logic_model",
            workspace_id=workspace_id,
            name=name,
            type="THIRD_NF",
            physical=False)
        ```

        ## Import

        DataArts Studio architecture model can be imported using `<workspace_id>/<name>`, e.g.

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureModel:ArchitectureModel test <workspace_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of model.
        :param pulumi.Input[_builtins.str] dw_type: Specifies the data connection type. This parameter is mandatory when
               `physical` is **true**. The valid values are:
               + **DWS**
               + **DLI**
               + **MRS_HIVE**
               + **POSTGRESQL**
               + **MRS_SPARK**
               + **CLICKHOUSE**
               + **MYSQL**
               + **ORACLE**
        :param pulumi.Input[_builtins.str] level: Specifies the data warehouse layer. Valid values are **SDI** and **DWI**.
        :param pulumi.Input[_builtins.str] name: Specifies the model name.
        :param pulumi.Input[_builtins.bool] physical: Specifies the model is physical or logical.
               When the value is **true**, it means physical model.
               Changing this parameter will create a new model.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the model.
               If omitted, the provider-level region will be used. Changing this parameter will create a new model.
        :param pulumi.Input[_builtins.str] type: Specifies the model type. The valid values are **THIRD_NF** and **DIMENSION**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the model in.
               Changing this parameter will create a new model.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ArchitectureModelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages DataArts Architecture ER Model resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        physical_model = huaweicloud.dataartsstudio.ArchitectureModel("physical_model",
            workspace_id=workspace_id,
            name=name,
            type="THIRD_NF",
            physical=True,
            dw_type="DWS")
        logic_model = huaweicloud.dataartsstudio.ArchitectureModel("logic_model",
            workspace_id=workspace_id,
            name=name,
            type="THIRD_NF",
            physical=False)
        ```

        ## Import

        DataArts Studio architecture model can be imported using `<workspace_id>/<name>`, e.g.

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureModel:ArchitectureModel test <workspace_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param ArchitectureModelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ArchitectureModelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_type: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 physical: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ArchitectureModelArgs.__new__(ArchitectureModelArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dw_type"] = dw_type
            __props__.__dict__["level"] = level
            __props__.__dict__["name"] = name
            if physical is None and not opts.urn:
                raise TypeError("Missing required property 'physical'")
            __props__.__dict__["physical"] = physical
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(ArchitectureModel, __self__).__init__(
            'huaweicloud:DataArtsStudio/architectureModel:ArchitectureModel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dw_type: Optional[pulumi.Input[_builtins.str]] = None,
            level: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            physical: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ArchitectureModel':
        """
        Get an existing ArchitectureModel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The create time of the model.
        :param pulumi.Input[_builtins.str] created_by: The person creating the model.
        :param pulumi.Input[_builtins.str] description: Specifies the description of model.
        :param pulumi.Input[_builtins.str] dw_type: Specifies the data connection type. This parameter is mandatory when
               `physical` is **true**. The valid values are:
               + **DWS**
               + **DLI**
               + **MRS_HIVE**
               + **POSTGRESQL**
               + **MRS_SPARK**
               + **CLICKHOUSE**
               + **MYSQL**
               + **ORACLE**
        :param pulumi.Input[_builtins.str] level: Specifies the data warehouse layer. Valid values are **SDI** and **DWI**.
        :param pulumi.Input[_builtins.str] name: Specifies the model name.
        :param pulumi.Input[_builtins.bool] physical: Specifies the model is physical or logical.
               When the value is **true**, it means physical model.
               Changing this parameter will create a new model.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the model.
               If omitted, the provider-level region will be used. Changing this parameter will create a new model.
        :param pulumi.Input[_builtins.str] type: Specifies the model type. The valid values are **THIRD_NF** and **DIMENSION**.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the model.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the model.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the model in.
               Changing this parameter will create a new model.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ArchitectureModelState.__new__(_ArchitectureModelState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["dw_type"] = dw_type
        __props__.__dict__["level"] = level
        __props__.__dict__["name"] = name
        __props__.__dict__["physical"] = physical
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["workspace_id"] = workspace_id
        return ArchitectureModel(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The create time of the model.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The person creating the model.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of model.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the data connection type. This parameter is mandatory when
        `physical` is **true**. The valid values are:
        + **DWS**
        + **DLI**
        + **MRS_HIVE**
        + **POSTGRESQL**
        + **MRS_SPARK**
        + **CLICKHOUSE**
        + **MYSQL**
        + **ORACLE**
        """
        return pulumi.get(self, "dw_type")

    @_builtins.property
    @pulumi.getter
    def level(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the data warehouse layer. Valid values are **SDI** and **DWI**.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the model name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def physical(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies the model is physical or logical.
        When the value is **true**, it means physical model.
        Changing this parameter will create a new model.
        """
        return pulumi.get(self, "physical")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to manage the model.
        If omitted, the provider-level region will be used. Changing this parameter will create a new model.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the model type. The valid values are **THIRD_NF** and **DIMENSION**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time of the model.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The person updating the model.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID which the model in.
        Changing this parameter will create a new model.
        """
        return pulumi.get(self, "workspace_id")

