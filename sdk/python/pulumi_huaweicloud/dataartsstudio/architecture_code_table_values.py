# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ArchitectureCodeTableValuesArgs', 'ArchitectureCodeTableValues']

@pulumi.input_type
class ArchitectureCodeTableValuesArgs:
    def __init__(__self__, *,
                 field_code: pulumi.Input[_builtins.str],
                 field_id: pulumi.Input[_builtins.str],
                 field_name: pulumi.Input[_builtins.str],
                 field_ordinal: pulumi.Input[_builtins.int],
                 field_type: pulumi.Input[_builtins.str],
                 table_id: pulumi.Input[_builtins.str],
                 values: pulumi.Input[Sequence[pulumi.Input['ArchitectureCodeTableValuesValueArgs']]],
                 workspace_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ArchitectureCodeTableValues resource.
        :param pulumi.Input[_builtins.str] field_code: Specifies the code of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_id: Specifies the ID of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_name: Specifies the name of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] field_ordinal: Specifies the ordinal of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_type: Specifies the type of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] table_id: Specifies the ID of the code table.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureCodeTableValuesValueArgs']]] values: Specifies the values list of the code table field.
               The values structure is documented below.
               
               <a name="Values"></a>
               The `values` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "field_code", field_code)
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "field_ordinal", field_ordinal)
        pulumi.set(__self__, "field_type", field_type)
        pulumi.set(__self__, "table_id", table_id)
        pulumi.set(__self__, "values", values)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="fieldCode")
    def field_code(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the code of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_code")

    @field_code.setter
    def field_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "field_code", value)

    @_builtins.property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "field_id", value)

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "field_name", value)

    @_builtins.property
    @pulumi.getter(name="fieldOrdinal")
    def field_ordinal(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the ordinal of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_ordinal")

    @field_ordinal.setter
    def field_ordinal(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "field_ordinal", value)

    @_builtins.property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_type")

    @field_type.setter
    def field_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "field_type", value)

    @_builtins.property
    @pulumi.getter(name="tableId")
    def table_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the code table.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "table_id")

    @table_id.setter
    def table_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "table_id", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input['ArchitectureCodeTableValuesValueArgs']]]:
        """
        Specifies the values list of the code table field.
        The values structure is documented below.

        <a name="Values"></a>
        The `values` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input['ArchitectureCodeTableValuesValueArgs']]]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ArchitectureCodeTableValuesState:
    def __init__(__self__, *,
                 field_code: Optional[pulumi.Input[_builtins.str]] = None,
                 field_id: Optional[pulumi.Input[_builtins.str]] = None,
                 field_name: Optional[pulumi.Input[_builtins.str]] = None,
                 field_ordinal: Optional[pulumi.Input[_builtins.int]] = None,
                 field_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureCodeTableValuesValueArgs']]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ArchitectureCodeTableValues resources.
        :param pulumi.Input[_builtins.str] field_code: Specifies the code of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_id: Specifies the ID of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_name: Specifies the name of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] field_ordinal: Specifies the ordinal of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_type: Specifies the type of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] table_id: Specifies the ID of the code table.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureCodeTableValuesValueArgs']]] values: Specifies the values list of the code table field.
               The values structure is documented below.
               
               <a name="Values"></a>
               The `values` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        if field_code is not None:
            pulumi.set(__self__, "field_code", field_code)
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)
        if field_name is not None:
            pulumi.set(__self__, "field_name", field_name)
        if field_ordinal is not None:
            pulumi.set(__self__, "field_ordinal", field_ordinal)
        if field_type is not None:
            pulumi.set(__self__, "field_type", field_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="fieldCode")
    def field_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_code")

    @field_code.setter
    def field_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field_code", value)

    @_builtins.property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field_id", value)

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field_name", value)

    @_builtins.property
    @pulumi.getter(name="fieldOrdinal")
    def field_ordinal(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the ordinal of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_ordinal")

    @field_ordinal.setter
    def field_ordinal(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "field_ordinal", value)

    @_builtins.property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_type")

    @field_type.setter
    def field_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the code table.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "table_id")

    @table_id.setter
    def table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_id", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureCodeTableValuesValueArgs']]]]:
        """
        Specifies the values list of the code table field.
        The values structure is documented below.

        <a name="Values"></a>
        The `values` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureCodeTableValuesValueArgs']]]]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/architectureCodeTableValues:ArchitectureCodeTableValues")
class ArchitectureCodeTableValues(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 field_code: Optional[pulumi.Input[_builtins.str]] = None,
                 field_id: Optional[pulumi.Input[_builtins.str]] = None,
                 field_name: Optional[pulumi.Input[_builtins.str]] = None,
                 field_ordinal: Optional[pulumi.Input[_builtins.int]] = None,
                 field_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureCodeTableValuesValueArgs', 'ArchitectureCodeTableValuesValueArgsDict']]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DataArts Architecture code table values resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        table_id = config.require_object("tableId")
        field_id = config.require_object("fieldId")
        field_ordinal = config.require_object("fieldOrdinal")
        field_name = config.require_object("fieldName")
        field_code = config.require_object("fieldCode")
        field_type = config.require_object("fieldType")
        test = huaweicloud.dataartsstudio.ArchitectureCodeTableValues("test",
            workspace_id=workspace_id,
            table_id=table_id,
            field_id=field_id,
            field_ordinal=field_ordinal,
            field_name=field_name,
            field_code=field_code,
            field_type=field_type,
            values=[{
                "value": "1",
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] field_code: Specifies the code of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_id: Specifies the ID of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_name: Specifies the name of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] field_ordinal: Specifies the ordinal of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_type: Specifies the type of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] table_id: Specifies the ID of the code table.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureCodeTableValuesValueArgs', 'ArchitectureCodeTableValuesValueArgsDict']]]] values: Specifies the values list of the code table field.
               The values structure is documented below.
               
               <a name="Values"></a>
               The `values` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ArchitectureCodeTableValuesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DataArts Architecture code table values resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        table_id = config.require_object("tableId")
        field_id = config.require_object("fieldId")
        field_ordinal = config.require_object("fieldOrdinal")
        field_name = config.require_object("fieldName")
        field_code = config.require_object("fieldCode")
        field_type = config.require_object("fieldType")
        test = huaweicloud.dataartsstudio.ArchitectureCodeTableValues("test",
            workspace_id=workspace_id,
            table_id=table_id,
            field_id=field_id,
            field_ordinal=field_ordinal,
            field_name=field_name,
            field_code=field_code,
            field_type=field_type,
            values=[{
                "value": "1",
            }])
        ```

        :param str resource_name: The name of the resource.
        :param ArchitectureCodeTableValuesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ArchitectureCodeTableValuesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 field_code: Optional[pulumi.Input[_builtins.str]] = None,
                 field_id: Optional[pulumi.Input[_builtins.str]] = None,
                 field_name: Optional[pulumi.Input[_builtins.str]] = None,
                 field_ordinal: Optional[pulumi.Input[_builtins.int]] = None,
                 field_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureCodeTableValuesValueArgs', 'ArchitectureCodeTableValuesValueArgsDict']]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ArchitectureCodeTableValuesArgs.__new__(ArchitectureCodeTableValuesArgs)

            if field_code is None and not opts.urn:
                raise TypeError("Missing required property 'field_code'")
            __props__.__dict__["field_code"] = field_code
            if field_id is None and not opts.urn:
                raise TypeError("Missing required property 'field_id'")
            __props__.__dict__["field_id"] = field_id
            if field_name is None and not opts.urn:
                raise TypeError("Missing required property 'field_name'")
            __props__.__dict__["field_name"] = field_name
            if field_ordinal is None and not opts.urn:
                raise TypeError("Missing required property 'field_ordinal'")
            __props__.__dict__["field_ordinal"] = field_ordinal
            if field_type is None and not opts.urn:
                raise TypeError("Missing required property 'field_type'")
            __props__.__dict__["field_type"] = field_type
            __props__.__dict__["region"] = region
            if table_id is None and not opts.urn:
                raise TypeError("Missing required property 'table_id'")
            __props__.__dict__["table_id"] = table_id
            if values is None and not opts.urn:
                raise TypeError("Missing required property 'values'")
            __props__.__dict__["values"] = values
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
        super(ArchitectureCodeTableValues, __self__).__init__(
            'huaweicloud:DataArtsStudio/architectureCodeTableValues:ArchitectureCodeTableValues',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            field_code: Optional[pulumi.Input[_builtins.str]] = None,
            field_id: Optional[pulumi.Input[_builtins.str]] = None,
            field_name: Optional[pulumi.Input[_builtins.str]] = None,
            field_ordinal: Optional[pulumi.Input[_builtins.int]] = None,
            field_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            table_id: Optional[pulumi.Input[_builtins.str]] = None,
            values: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureCodeTableValuesValueArgs', 'ArchitectureCodeTableValuesValueArgsDict']]]]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ArchitectureCodeTableValues':
        """
        Get an existing ArchitectureCodeTableValues resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] field_code: Specifies the code of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_id: Specifies the ID of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_name: Specifies the name of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] field_ordinal: Specifies the ordinal of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] field_type: Specifies the type of the code table field.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] table_id: Specifies the ID of the code table.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureCodeTableValuesValueArgs', 'ArchitectureCodeTableValuesValueArgsDict']]]] values: Specifies the values list of the code table field.
               The values structure is documented below.
               
               <a name="Values"></a>
               The `values` block supports:
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ArchitectureCodeTableValuesState.__new__(_ArchitectureCodeTableValuesState)

        __props__.__dict__["field_code"] = field_code
        __props__.__dict__["field_id"] = field_id
        __props__.__dict__["field_name"] = field_name
        __props__.__dict__["field_ordinal"] = field_ordinal
        __props__.__dict__["field_type"] = field_type
        __props__.__dict__["region"] = region
        __props__.__dict__["table_id"] = table_id
        __props__.__dict__["values"] = values
        __props__.__dict__["workspace_id"] = workspace_id
        return ArchitectureCodeTableValues(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="fieldCode")
    def field_code(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the code of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_code")

    @_builtins.property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_id")

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_name")

    @_builtins.property
    @pulumi.getter(name="fieldOrdinal")
    def field_ordinal(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the ordinal of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_ordinal")

    @_builtins.property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the code table field.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "field_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tableId")
    def table_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the code table.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "table_id")

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Output[Sequence['outputs.ArchitectureCodeTableValuesValue']]:
        """
        Specifies the values list of the code table field.
        The values structure is documented below.

        <a name="Values"></a>
        The `values` block supports:
        """
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

