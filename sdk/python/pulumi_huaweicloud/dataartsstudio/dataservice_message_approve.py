# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataserviceMessageApproveArgs', 'DataserviceMessageApprove']

@pulumi.input_type
class DataserviceMessageApproveArgs:
    def __init__(__self__, *,
                 message_id: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 action: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataserviceMessageApprove resource.
        :param pulumi.Input[_builtins.str] message_id: Specifies the ID of the message (to be approved).  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID of the exclusive API to which the message
               (to be approved) belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] action: Specifies the approval action performed by the message.  
               The valid values are as follows:
               + **0**: Immediate approval.
               + **1**: Regular approval.
               
               Defaults to `0`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the message (to be approved) is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time: Specifies the regular approval time.  
               The format is `YYYY-MM-DDThh:mm:ss.000Z`.
               Required if the value of the parameter `action` is `1`.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "message_id", message_id)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the message (to be approved).  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "message_id")

    @message_id.setter
    def message_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "message_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID of the exclusive API to which the message
        (to be approved) belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the approval action performed by the message.  
        The valid values are as follows:
        + **0**: Immediate approval.
        + **1**: Regular approval.

        Defaults to `0`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the message (to be approved) is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular approval time.  
        The format is `YYYY-MM-DDThh:mm:ss.000Z`.
        Required if the value of the parameter `action` is `1`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class _DataserviceMessageApproveState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.int]] = None,
                 message_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 time: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataserviceMessageApprove resources.
        :param pulumi.Input[_builtins.int] action: Specifies the approval action performed by the message.  
               The valid values are as follows:
               + **0**: Immediate approval.
               + **1**: Regular approval.
               
               Defaults to `0`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] message_id: Specifies the ID of the message (to be approved).  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the message (to be approved) is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time: Specifies the regular approval time.  
               The format is `YYYY-MM-DDThh:mm:ss.000Z`.
               Required if the value of the parameter `action` is `1`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID of the exclusive API to which the message
               (to be approved) belongs.
               Changing this parameter will create a new resource.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if message_id is not None:
            pulumi.set(__self__, "message_id", message_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the approval action performed by the message.  
        The valid values are as follows:
        + **0**: Immediate approval.
        + **1**: Regular approval.

        Defaults to `0`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the message (to be approved).  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "message_id")

    @message_id.setter
    def message_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the message (to be approved) is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular approval time.  
        The format is `YYYY-MM-DDThh:mm:ss.000Z`.
        Required if the value of the parameter `action` is `1`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID of the exclusive API to which the message
        (to be approved) belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/dataserviceMessageApprove:DataserviceMessageApprove")
class DataserviceMessageApprove(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.int]] = None,
                 message_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 time: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to approve the API message for DataArts Data Service within HuaweiCloud.

        > 1. Only messages of the exclusive (and published) API can be approved.
        >       <br>2. This resource is a one-time action resource used only for approval message. Deleting this resource will not
        >       clear the corresponding request record, but will only remove the resource information from the tfstate file.
        >       <br>3. Before using this resource, please make sure that the current user has the approver permission.

        ## Example Usage

        ### Approve the message immediately

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        message_id = config.require_object("messageId")
        test = huaweicloud.dataartsstudio.DataserviceMessageApprove("test",
            workspace_id=workspace_id,
            message_id=message_id,
            action=0)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] action: Specifies the approval action performed by the message.  
               The valid values are as follows:
               + **0**: Immediate approval.
               + **1**: Regular approval.
               
               Defaults to `0`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] message_id: Specifies the ID of the message (to be approved).  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the message (to be approved) is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time: Specifies the regular approval time.  
               The format is `YYYY-MM-DDThh:mm:ss.000Z`.
               Required if the value of the parameter `action` is `1`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID of the exclusive API to which the message
               (to be approved) belongs.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataserviceMessageApproveArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to approve the API message for DataArts Data Service within HuaweiCloud.

        > 1. Only messages of the exclusive (and published) API can be approved.
        >       <br>2. This resource is a one-time action resource used only for approval message. Deleting this resource will not
        >       clear the corresponding request record, but will only remove the resource information from the tfstate file.
        >       <br>3. Before using this resource, please make sure that the current user has the approver permission.

        ## Example Usage

        ### Approve the message immediately

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        message_id = config.require_object("messageId")
        test = huaweicloud.dataartsstudio.DataserviceMessageApprove("test",
            workspace_id=workspace_id,
            message_id=message_id,
            action=0)
        ```

        :param str resource_name: The name of the resource.
        :param DataserviceMessageApproveArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataserviceMessageApproveArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.int]] = None,
                 message_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 time: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataserviceMessageApproveArgs.__new__(DataserviceMessageApproveArgs)

            __props__.__dict__["action"] = action
            if message_id is None and not opts.urn:
                raise TypeError("Missing required property 'message_id'")
            __props__.__dict__["message_id"] = message_id
            __props__.__dict__["region"] = region
            __props__.__dict__["time"] = time
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
        super(DataserviceMessageApprove, __self__).__init__(
            'huaweicloud:DataArtsStudio/dataserviceMessageApprove:DataserviceMessageApprove',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.int]] = None,
            message_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            time: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataserviceMessageApprove':
        """
        Get an existing DataserviceMessageApprove resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] action: Specifies the approval action performed by the message.  
               The valid values are as follows:
               + **0**: Immediate approval.
               + **1**: Regular approval.
               
               Defaults to `0`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] message_id: Specifies the ID of the message (to be approved).  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the message (to be approved) is located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] time: Specifies the regular approval time.  
               The format is `YYYY-MM-DDThh:mm:ss.000Z`.
               Required if the value of the parameter `action` is `1`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID of the exclusive API to which the message
               (to be approved) belongs.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataserviceMessageApproveState.__new__(_DataserviceMessageApproveState)

        __props__.__dict__["action"] = action
        __props__.__dict__["message_id"] = message_id
        __props__.__dict__["region"] = region
        __props__.__dict__["time"] = time
        __props__.__dict__["workspace_id"] = workspace_id
        return DataserviceMessageApprove(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the approval action performed by the message.  
        The valid values are as follows:
        + **0**: Immediate approval.
        + **1**: Regular approval.

        Defaults to `0`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the message (to be approved).  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "message_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region where the message (to be approved) is located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the regular approval time.  
        The format is `YYYY-MM-DDThh:mm:ss.000Z`.
        Required if the value of the parameter `action` is `1`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID of the exclusive API to which the message
        (to be approved) belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

