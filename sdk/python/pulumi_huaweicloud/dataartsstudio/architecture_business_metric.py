# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ArchitectureBusinessMetricArgs', 'ArchitectureBusinessMetric']

@pulumi.input_type
class ArchitectureBusinessMetricArgs:
    def __init__(__self__, *,
                 biz_catalog_id: pulumi.Input[_builtins.str],
                 definition: pulumi.Input[_builtins.str],
                 destination: pulumi.Input[_builtins.str],
                 expression: pulumi.Input[_builtins.str],
                 interval_type: pulumi.Input[_builtins.str],
                 owner: pulumi.Input[_builtins.str],
                 owner_department: pulumi.Input[_builtins.str],
                 time_filters: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 apply_scenario: Optional[pulumi.Input[_builtins.str]] = None,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 data_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dimensions: Optional[pulumi.Input[_builtins.str]] = None,
                 general_filters: Optional[pulumi.Input[_builtins.str]] = None,
                 measure: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 technical_metric: Optional[pulumi.Input[_builtins.int]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ArchitectureBusinessMetric resource.
        :param pulumi.Input[_builtins.str] biz_catalog_id: Specifies the process architecture ID.
        :param pulumi.Input[_builtins.str] definition: Specifies the indicator definition. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] destination: Specifies the purpose of setting. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] expression: Specifies the calculation formula. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] interval_type: Specifies the refresh frequency. Value values are: **REAL_TIME**, **HOUR**,
               **HALF_DAY**, **DAY**, **WEEK**, **DOUBLE_WEEK**, **MONTH**, **QUART**, **HALF_YEAR** and **YEAR**.
        :param pulumi.Input[_builtins.str] owner: Specifies the name of person responsible for the indicator. The owner must exist in the
               system. The maximum length is 100 characters.
        :param pulumi.Input[_builtins.str] owner_department: Specifies the indicator management department name. The maximum length is 600
               characters.
        :param pulumi.Input[_builtins.str] time_filters: Specifies the statistical frequency. Use commas to separate multiple fields.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] apply_scenario: Specifies the application scenarios. The maximum length is 255 characters.
        :param pulumi.Input[_builtins.str] code: Specifies the indicator encoding. If this field is not specified, an indicator code will
               be automatically generated. The value of this field does not support changing to empty.
        :param pulumi.Input[_builtins.str] data_origin: Specifies the data sources. The value needs to be a descriptive value. The maximum
               length is 1000 characters.
        :param pulumi.Input[_builtins.str] description: Specifies the description. The maximum length is 600 characters.
        :param pulumi.Input[_builtins.str] dimensions: Specifies the statistical dimension. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] general_filters: Specifies the statistical caliber and modifiers. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] measure: Specifies the measurement object. The maximum length is 255 characters.
        :param pulumi.Input[_builtins.str] name: Specifies the indicator name. This value can contain only letters, digits, parentheses,
               commas, spaces, and special characters `+#-_/[]`. The maximum length is 500 characters.
        :param pulumi.Input[_builtins.str] name_alias: Specifies the indicator alias. The maximum length is 500 characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] technical_metric: Specifies the related technical indicators.
        :param pulumi.Input[_builtins.str] unit: Specifies the unit of measurement. The value of this field needs to be a quantifier, for example,
               **percentage**, **hour** or **minute**. The maximum length is 50 characters.
        """
        pulumi.set(__self__, "biz_catalog_id", biz_catalog_id)
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "interval_type", interval_type)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "owner_department", owner_department)
        pulumi.set(__self__, "time_filters", time_filters)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if apply_scenario is not None:
            pulumi.set(__self__, "apply_scenario", apply_scenario)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if general_filters is not None:
            pulumi.set(__self__, "general_filters", general_filters)
        if measure is not None:
            pulumi.set(__self__, "measure", measure)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_alias is not None:
            pulumi.set(__self__, "name_alias", name_alias)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if technical_metric is not None:
            pulumi.set(__self__, "technical_metric", technical_metric)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter(name="bizCatalogId")
    def biz_catalog_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the process architecture ID.
        """
        return pulumi.get(self, "biz_catalog_id")

    @biz_catalog_id.setter
    def biz_catalog_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "biz_catalog_id", value)

    @_builtins.property
    @pulumi.getter
    def definition(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the indicator definition. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "definition", value)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the purpose of setting. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the calculation formula. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter(name="intervalType")
    def interval_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the refresh frequency. Value values are: **REAL_TIME**, **HOUR**,
        **HALF_DAY**, **DAY**, **WEEK**, **DOUBLE_WEEK**, **MONTH**, **QUART**, **HALF_YEAR** and **YEAR**.
        """
        return pulumi.get(self, "interval_type")

    @interval_type.setter
    def interval_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "interval_type", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of person responsible for the indicator. The owner must exist in the
        system. The maximum length is 100 characters.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter(name="ownerDepartment")
    def owner_department(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the indicator management department name. The maximum length is 600
        characters.
        """
        return pulumi.get(self, "owner_department")

    @owner_department.setter
    def owner_department(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "owner_department", value)

    @_builtins.property
    @pulumi.getter(name="timeFilters")
    def time_filters(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the statistical frequency. Use commas to separate multiple fields.
        """
        return pulumi.get(self, "time_filters")

    @time_filters.setter
    def time_filters(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "time_filters", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="applyScenario")
    def apply_scenario(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application scenarios. The maximum length is 255 characters.
        """
        return pulumi.get(self, "apply_scenario")

    @apply_scenario.setter
    def apply_scenario(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apply_scenario", value)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator encoding. If this field is not specified, an indicator code will
        be automatically generated. The value of this field does not support changing to empty.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data sources. The value needs to be a descriptive value. The maximum
        length is 1000 characters.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_origin", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description. The maximum length is 600 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the statistical dimension. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dimensions", value)

    @_builtins.property
    @pulumi.getter(name="generalFilters")
    def general_filters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the statistical caliber and modifiers. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "general_filters")

    @general_filters.setter
    def general_filters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "general_filters", value)

    @_builtins.property
    @pulumi.getter
    def measure(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the measurement object. The maximum length is 255 characters.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "measure", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator name. This value can contain only letters, digits, parentheses,
        commas, spaces, and special characters `+#-_/[]`. The maximum length is 500 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameAlias")
    def name_alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator alias. The maximum length is 500 characters.
        """
        return pulumi.get(self, "name_alias")

    @name_alias.setter
    def name_alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_alias", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="technicalMetric")
    def technical_metric(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the related technical indicators.
        """
        return pulumi.get(self, "technical_metric")

    @technical_metric.setter
    def technical_metric(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "technical_metric", value)

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unit of measurement. The value of this field needs to be a quantifier, for example,
        **percentage**, **hour** or **minute**. The maximum length is 50 characters.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class _ArchitectureBusinessMetricState:
    def __init__(__self__, *,
                 apply_scenario: Optional[pulumi.Input[_builtins.str]] = None,
                 biz_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 biz_catalog_path: Optional[pulumi.Input[_builtins.str]] = None,
                 biz_metric: Optional[pulumi.Input[_builtins.str]] = None,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 data_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 definition: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 dimensions: Optional[pulumi.Input[_builtins.str]] = None,
                 expression: Optional[pulumi.Input[_builtins.str]] = None,
                 general_filters: Optional[pulumi.Input[_builtins.str]] = None,
                 interval_type: Optional[pulumi.Input[_builtins.str]] = None,
                 l1: Optional[pulumi.Input[_builtins.str]] = None,
                 l2: Optional[pulumi.Input[_builtins.str]] = None,
                 l3: Optional[pulumi.Input[_builtins.str]] = None,
                 measure: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_department: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 summary_status: Optional[pulumi.Input[_builtins.str]] = None,
                 technical_metric: Optional[pulumi.Input[_builtins.int]] = None,
                 technical_metric_name: Optional[pulumi.Input[_builtins.str]] = None,
                 technical_metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 time_filters: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ArchitectureBusinessMetric resources.
        :param pulumi.Input[_builtins.str] apply_scenario: Specifies the application scenarios. The maximum length is 255 characters.
        :param pulumi.Input[_builtins.str] biz_catalog_id: Specifies the process architecture ID.
        :param pulumi.Input[_builtins.str] biz_catalog_path: The process architecture path.
        :param pulumi.Input[_builtins.str] biz_metric: The business indicator synchronization status. Valid values are: **NO_NEED**, **CREATE_SUCCESS**,
               **CREATE_FAILED**, **UPDATE_SUCCESS**, **UPDATE_FAILED**, **SUMMARY_SUCCESS**, **SUMMARY_FAILED**, **RUNNING** and **OFFLINE**.
        :param pulumi.Input[_builtins.str] code: Specifies the indicator encoding. If this field is not specified, an indicator code will
               be automatically generated. The value of this field does not support changing to empty.
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] created_by: The creator.
        :param pulumi.Input[_builtins.str] data_origin: Specifies the data sources. The value needs to be a descriptive value. The maximum
               length is 1000 characters.
        :param pulumi.Input[_builtins.str] definition: Specifies the indicator definition. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] description: Specifies the description. The maximum length is 600 characters.
        :param pulumi.Input[_builtins.str] destination: Specifies the purpose of setting. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] dimensions: Specifies the statistical dimension. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] expression: Specifies the calculation formula. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] general_filters: Specifies the statistical caliber and modifiers. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] interval_type: Specifies the refresh frequency. Value values are: **REAL_TIME**, **HOUR**,
               **HALF_DAY**, **DAY**, **WEEK**, **DOUBLE_WEEK**, **MONTH**, **QUART**, **HALF_YEAR** and **YEAR**.
        :param pulumi.Input[_builtins.str] l1: The subject domain grouping Chinese name.
        :param pulumi.Input[_builtins.str] l2: The subject field Chinese name.
        :param pulumi.Input[_builtins.str] l3: The business object Chinese name.
        :param pulumi.Input[_builtins.str] measure: Specifies the measurement object. The maximum length is 255 characters.
        :param pulumi.Input[_builtins.str] name: Specifies the indicator name. This value can contain only letters, digits, parentheses,
               commas, spaces, and special characters `+#-_/[]`. The maximum length is 500 characters.
        :param pulumi.Input[_builtins.str] name_alias: Specifies the indicator alias. The maximum length is 500 characters.
        :param pulumi.Input[_builtins.str] owner: Specifies the name of person responsible for the indicator. The owner must exist in the
               system. The maximum length is 100 characters.
        :param pulumi.Input[_builtins.str] owner_department: Specifies the indicator management department name. The maximum length is 600
               characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status. Valid values are: **DRAFT**, **PUBLISH_DEVELOPING**, **PUBLISHED**, **OFFLINE_DEVELOPING**,
               **OFFLINE** and **REJECT**.
        :param pulumi.Input[_builtins.str] summary_status: The synchronize statistics status. Valid values are: **NO_NEED**, **CREATE_SUCCESS**,
               **CREATE_FAILED**, **UPDATE_SUCCESS**, **UPDATE_FAILED**, **SUMMARY_SUCCESS**, **SUMMARY_FAILED**, **RUNNING** and **OFFLINE**.
        :param pulumi.Input[_builtins.int] technical_metric: Specifies the related technical indicators.
        :param pulumi.Input[_builtins.str] technical_metric_name: The related technical indicator name.
        :param pulumi.Input[_builtins.str] technical_metric_type: The related technical indicator type.
        :param pulumi.Input[_builtins.str] time_filters: Specifies the statistical frequency. Use commas to separate multiple fields.
        :param pulumi.Input[_builtins.str] unit: Specifies the unit of measurement. The value of this field needs to be a quantifier, for example,
               **percentage**, **hour** or **minute**. The maximum length is 50 characters.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        :param pulumi.Input[_builtins.str] updated_by: The editor.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        if apply_scenario is not None:
            pulumi.set(__self__, "apply_scenario", apply_scenario)
        if biz_catalog_id is not None:
            pulumi.set(__self__, "biz_catalog_id", biz_catalog_id)
        if biz_catalog_path is not None:
            pulumi.set(__self__, "biz_catalog_path", biz_catalog_path)
        if biz_metric is not None:
            pulumi.set(__self__, "biz_metric", biz_metric)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if general_filters is not None:
            pulumi.set(__self__, "general_filters", general_filters)
        if interval_type is not None:
            pulumi.set(__self__, "interval_type", interval_type)
        if l1 is not None:
            pulumi.set(__self__, "l1", l1)
        if l2 is not None:
            pulumi.set(__self__, "l2", l2)
        if l3 is not None:
            pulumi.set(__self__, "l3", l3)
        if measure is not None:
            pulumi.set(__self__, "measure", measure)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_alias is not None:
            pulumi.set(__self__, "name_alias", name_alias)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if owner_department is not None:
            pulumi.set(__self__, "owner_department", owner_department)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if summary_status is not None:
            pulumi.set(__self__, "summary_status", summary_status)
        if technical_metric is not None:
            pulumi.set(__self__, "technical_metric", technical_metric)
        if technical_metric_name is not None:
            pulumi.set(__self__, "technical_metric_name", technical_metric_name)
        if technical_metric_type is not None:
            pulumi.set(__self__, "technical_metric_type", technical_metric_type)
        if time_filters is not None:
            pulumi.set(__self__, "time_filters", time_filters)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="applyScenario")
    def apply_scenario(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application scenarios. The maximum length is 255 characters.
        """
        return pulumi.get(self, "apply_scenario")

    @apply_scenario.setter
    def apply_scenario(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apply_scenario", value)

    @_builtins.property
    @pulumi.getter(name="bizCatalogId")
    def biz_catalog_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the process architecture ID.
        """
        return pulumi.get(self, "biz_catalog_id")

    @biz_catalog_id.setter
    def biz_catalog_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "biz_catalog_id", value)

    @_builtins.property
    @pulumi.getter(name="bizCatalogPath")
    def biz_catalog_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The process architecture path.
        """
        return pulumi.get(self, "biz_catalog_path")

    @biz_catalog_path.setter
    def biz_catalog_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "biz_catalog_path", value)

    @_builtins.property
    @pulumi.getter(name="bizMetric")
    def biz_metric(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The business indicator synchronization status. Valid values are: **NO_NEED**, **CREATE_SUCCESS**,
        **CREATE_FAILED**, **UPDATE_SUCCESS**, **UPDATE_FAILED**, **SUMMARY_SUCCESS**, **SUMMARY_FAILED**, **RUNNING** and **OFFLINE**.
        """
        return pulumi.get(self, "biz_metric")

    @biz_metric.setter
    def biz_metric(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "biz_metric", value)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator encoding. If this field is not specified, an indicator code will
        be automatically generated. The value of this field does not support changing to empty.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creator.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data sources. The value needs to be a descriptive value. The maximum
        length is 1000 characters.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_origin", value)

    @_builtins.property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator definition. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "definition", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description. The maximum length is 600 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the purpose of setting. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the statistical dimension. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dimensions", value)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the calculation formula. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter(name="generalFilters")
    def general_filters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the statistical caliber and modifiers. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "general_filters")

    @general_filters.setter
    def general_filters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "general_filters", value)

    @_builtins.property
    @pulumi.getter(name="intervalType")
    def interval_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the refresh frequency. Value values are: **REAL_TIME**, **HOUR**,
        **HALF_DAY**, **DAY**, **WEEK**, **DOUBLE_WEEK**, **MONTH**, **QUART**, **HALF_YEAR** and **YEAR**.
        """
        return pulumi.get(self, "interval_type")

    @interval_type.setter
    def interval_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interval_type", value)

    @_builtins.property
    @pulumi.getter
    def l1(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject domain grouping Chinese name.
        """
        return pulumi.get(self, "l1")

    @l1.setter
    def l1(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "l1", value)

    @_builtins.property
    @pulumi.getter
    def l2(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject field Chinese name.
        """
        return pulumi.get(self, "l2")

    @l2.setter
    def l2(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "l2", value)

    @_builtins.property
    @pulumi.getter
    def l3(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The business object Chinese name.
        """
        return pulumi.get(self, "l3")

    @l3.setter
    def l3(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "l3", value)

    @_builtins.property
    @pulumi.getter
    def measure(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the measurement object. The maximum length is 255 characters.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "measure", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator name. This value can contain only letters, digits, parentheses,
        commas, spaces, and special characters `+#-_/[]`. The maximum length is 500 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameAlias")
    def name_alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator alias. The maximum length is 500 characters.
        """
        return pulumi.get(self, "name_alias")

    @name_alias.setter
    def name_alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_alias", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of person responsible for the indicator. The owner must exist in the
        system. The maximum length is 100 characters.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter(name="ownerDepartment")
    def owner_department(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the indicator management department name. The maximum length is 600
        characters.
        """
        return pulumi.get(self, "owner_department")

    @owner_department.setter
    def owner_department(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner_department", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status. Valid values are: **DRAFT**, **PUBLISH_DEVELOPING**, **PUBLISHED**, **OFFLINE_DEVELOPING**,
        **OFFLINE** and **REJECT**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="summaryStatus")
    def summary_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The synchronize statistics status. Valid values are: **NO_NEED**, **CREATE_SUCCESS**,
        **CREATE_FAILED**, **UPDATE_SUCCESS**, **UPDATE_FAILED**, **SUMMARY_SUCCESS**, **SUMMARY_FAILED**, **RUNNING** and **OFFLINE**.
        """
        return pulumi.get(self, "summary_status")

    @summary_status.setter
    def summary_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "summary_status", value)

    @_builtins.property
    @pulumi.getter(name="technicalMetric")
    def technical_metric(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the related technical indicators.
        """
        return pulumi.get(self, "technical_metric")

    @technical_metric.setter
    def technical_metric(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "technical_metric", value)

    @_builtins.property
    @pulumi.getter(name="technicalMetricName")
    def technical_metric_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The related technical indicator name.
        """
        return pulumi.get(self, "technical_metric_name")

    @technical_metric_name.setter
    def technical_metric_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "technical_metric_name", value)

    @_builtins.property
    @pulumi.getter(name="technicalMetricType")
    def technical_metric_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The related technical indicator type.
        """
        return pulumi.get(self, "technical_metric_type")

    @technical_metric_type.setter
    def technical_metric_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "technical_metric_type", value)

    @_builtins.property
    @pulumi.getter(name="timeFilters")
    def time_filters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the statistical frequency. Use commas to separate multiple fields.
        """
        return pulumi.get(self, "time_filters")

    @time_filters.setter
    def time_filters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_filters", value)

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unit of measurement. The value of this field needs to be a quantifier, for example,
        **percentage**, **hour** or **minute**. The maximum length is 50 characters.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unit", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The editor.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/architectureBusinessMetric:ArchitectureBusinessMetric")
class ArchitectureBusinessMetric(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_scenario: Optional[pulumi.Input[_builtins.str]] = None,
                 biz_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 data_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 definition: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 dimensions: Optional[pulumi.Input[_builtins.str]] = None,
                 expression: Optional[pulumi.Input[_builtins.str]] = None,
                 general_filters: Optional[pulumi.Input[_builtins.str]] = None,
                 interval_type: Optional[pulumi.Input[_builtins.str]] = None,
                 measure: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_department: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 technical_metric: Optional[pulumi.Input[_builtins.int]] = None,
                 time_filters: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DataArts Architecture business metric resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        biz_catalog_id = config.require_object("bizCatalogId")
        owner = config.require_object("owner")
        owner_department = config.require_object("ownerDepartment")
        test = huaweicloud.dataartsstudio.ArchitectureBusinessMetric("test",
            workspace_id=workspace_id,
            biz_catalog_id=biz_catalog_id,
            owner=owner,
            owner_department=owner_department,
            name="test-name",
            name_alias="alias-name",
            time_filters="Monthly,Yearly",
            interval_type="HOUR",
            destination="test destination",
            definition="test definition",
            expression="a+b+c",
            description="test description")
        ```

        ## Import

        The DataArts Architecture business metric resource can be imported using the `workspace_id` and `id`, separated by a

        slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureBusinessMetric:ArchitectureBusinessMetric test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] apply_scenario: Specifies the application scenarios. The maximum length is 255 characters.
        :param pulumi.Input[_builtins.str] biz_catalog_id: Specifies the process architecture ID.
        :param pulumi.Input[_builtins.str] code: Specifies the indicator encoding. If this field is not specified, an indicator code will
               be automatically generated. The value of this field does not support changing to empty.
        :param pulumi.Input[_builtins.str] data_origin: Specifies the data sources. The value needs to be a descriptive value. The maximum
               length is 1000 characters.
        :param pulumi.Input[_builtins.str] definition: Specifies the indicator definition. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] description: Specifies the description. The maximum length is 600 characters.
        :param pulumi.Input[_builtins.str] destination: Specifies the purpose of setting. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] dimensions: Specifies the statistical dimension. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] expression: Specifies the calculation formula. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] general_filters: Specifies the statistical caliber and modifiers. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] interval_type: Specifies the refresh frequency. Value values are: **REAL_TIME**, **HOUR**,
               **HALF_DAY**, **DAY**, **WEEK**, **DOUBLE_WEEK**, **MONTH**, **QUART**, **HALF_YEAR** and **YEAR**.
        :param pulumi.Input[_builtins.str] measure: Specifies the measurement object. The maximum length is 255 characters.
        :param pulumi.Input[_builtins.str] name: Specifies the indicator name. This value can contain only letters, digits, parentheses,
               commas, spaces, and special characters `+#-_/[]`. The maximum length is 500 characters.
        :param pulumi.Input[_builtins.str] name_alias: Specifies the indicator alias. The maximum length is 500 characters.
        :param pulumi.Input[_builtins.str] owner: Specifies the name of person responsible for the indicator. The owner must exist in the
               system. The maximum length is 100 characters.
        :param pulumi.Input[_builtins.str] owner_department: Specifies the indicator management department name. The maximum length is 600
               characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] technical_metric: Specifies the related technical indicators.
        :param pulumi.Input[_builtins.str] time_filters: Specifies the statistical frequency. Use commas to separate multiple fields.
        :param pulumi.Input[_builtins.str] unit: Specifies the unit of measurement. The value of this field needs to be a quantifier, for example,
               **percentage**, **hour** or **minute**. The maximum length is 50 characters.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ArchitectureBusinessMetricArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DataArts Architecture business metric resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        biz_catalog_id = config.require_object("bizCatalogId")
        owner = config.require_object("owner")
        owner_department = config.require_object("ownerDepartment")
        test = huaweicloud.dataartsstudio.ArchitectureBusinessMetric("test",
            workspace_id=workspace_id,
            biz_catalog_id=biz_catalog_id,
            owner=owner,
            owner_department=owner_department,
            name="test-name",
            name_alias="alias-name",
            time_filters="Monthly,Yearly",
            interval_type="HOUR",
            destination="test destination",
            definition="test definition",
            expression="a+b+c",
            description="test description")
        ```

        ## Import

        The DataArts Architecture business metric resource can be imported using the `workspace_id` and `id`, separated by a

        slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureBusinessMetric:ArchitectureBusinessMetric test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param ArchitectureBusinessMetricArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ArchitectureBusinessMetricArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_scenario: Optional[pulumi.Input[_builtins.str]] = None,
                 biz_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 data_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 definition: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 dimensions: Optional[pulumi.Input[_builtins.str]] = None,
                 expression: Optional[pulumi.Input[_builtins.str]] = None,
                 general_filters: Optional[pulumi.Input[_builtins.str]] = None,
                 interval_type: Optional[pulumi.Input[_builtins.str]] = None,
                 measure: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_department: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 technical_metric: Optional[pulumi.Input[_builtins.int]] = None,
                 time_filters: Optional[pulumi.Input[_builtins.str]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ArchitectureBusinessMetricArgs.__new__(ArchitectureBusinessMetricArgs)

            __props__.__dict__["apply_scenario"] = apply_scenario
            if biz_catalog_id is None and not opts.urn:
                raise TypeError("Missing required property 'biz_catalog_id'")
            __props__.__dict__["biz_catalog_id"] = biz_catalog_id
            __props__.__dict__["code"] = code
            __props__.__dict__["data_origin"] = data_origin
            if definition is None and not opts.urn:
                raise TypeError("Missing required property 'definition'")
            __props__.__dict__["definition"] = definition
            __props__.__dict__["description"] = description
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            __props__.__dict__["dimensions"] = dimensions
            if expression is None and not opts.urn:
                raise TypeError("Missing required property 'expression'")
            __props__.__dict__["expression"] = expression
            __props__.__dict__["general_filters"] = general_filters
            if interval_type is None and not opts.urn:
                raise TypeError("Missing required property 'interval_type'")
            __props__.__dict__["interval_type"] = interval_type
            __props__.__dict__["measure"] = measure
            __props__.__dict__["name"] = name
            __props__.__dict__["name_alias"] = name_alias
            if owner is None and not opts.urn:
                raise TypeError("Missing required property 'owner'")
            __props__.__dict__["owner"] = owner
            if owner_department is None and not opts.urn:
                raise TypeError("Missing required property 'owner_department'")
            __props__.__dict__["owner_department"] = owner_department
            __props__.__dict__["region"] = region
            __props__.__dict__["technical_metric"] = technical_metric
            if time_filters is None and not opts.urn:
                raise TypeError("Missing required property 'time_filters'")
            __props__.__dict__["time_filters"] = time_filters
            __props__.__dict__["unit"] = unit
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["biz_catalog_path"] = None
            __props__.__dict__["biz_metric"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["l1"] = None
            __props__.__dict__["l2"] = None
            __props__.__dict__["l3"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["summary_status"] = None
            __props__.__dict__["technical_metric_name"] = None
            __props__.__dict__["technical_metric_type"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(ArchitectureBusinessMetric, __self__).__init__(
            'huaweicloud:DataArtsStudio/architectureBusinessMetric:ArchitectureBusinessMetric',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            apply_scenario: Optional[pulumi.Input[_builtins.str]] = None,
            biz_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
            biz_catalog_path: Optional[pulumi.Input[_builtins.str]] = None,
            biz_metric: Optional[pulumi.Input[_builtins.str]] = None,
            code: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            data_origin: Optional[pulumi.Input[_builtins.str]] = None,
            definition: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            destination: Optional[pulumi.Input[_builtins.str]] = None,
            dimensions: Optional[pulumi.Input[_builtins.str]] = None,
            expression: Optional[pulumi.Input[_builtins.str]] = None,
            general_filters: Optional[pulumi.Input[_builtins.str]] = None,
            interval_type: Optional[pulumi.Input[_builtins.str]] = None,
            l1: Optional[pulumi.Input[_builtins.str]] = None,
            l2: Optional[pulumi.Input[_builtins.str]] = None,
            l3: Optional[pulumi.Input[_builtins.str]] = None,
            measure: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            name_alias: Optional[pulumi.Input[_builtins.str]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            owner_department: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            summary_status: Optional[pulumi.Input[_builtins.str]] = None,
            technical_metric: Optional[pulumi.Input[_builtins.int]] = None,
            technical_metric_name: Optional[pulumi.Input[_builtins.str]] = None,
            technical_metric_type: Optional[pulumi.Input[_builtins.str]] = None,
            time_filters: Optional[pulumi.Input[_builtins.str]] = None,
            unit: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ArchitectureBusinessMetric':
        """
        Get an existing ArchitectureBusinessMetric resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] apply_scenario: Specifies the application scenarios. The maximum length is 255 characters.
        :param pulumi.Input[_builtins.str] biz_catalog_id: Specifies the process architecture ID.
        :param pulumi.Input[_builtins.str] biz_catalog_path: The process architecture path.
        :param pulumi.Input[_builtins.str] biz_metric: The business indicator synchronization status. Valid values are: **NO_NEED**, **CREATE_SUCCESS**,
               **CREATE_FAILED**, **UPDATE_SUCCESS**, **UPDATE_FAILED**, **SUMMARY_SUCCESS**, **SUMMARY_FAILED**, **RUNNING** and **OFFLINE**.
        :param pulumi.Input[_builtins.str] code: Specifies the indicator encoding. If this field is not specified, an indicator code will
               be automatically generated. The value of this field does not support changing to empty.
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] created_by: The creator.
        :param pulumi.Input[_builtins.str] data_origin: Specifies the data sources. The value needs to be a descriptive value. The maximum
               length is 1000 characters.
        :param pulumi.Input[_builtins.str] definition: Specifies the indicator definition. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] description: Specifies the description. The maximum length is 600 characters.
        :param pulumi.Input[_builtins.str] destination: Specifies the purpose of setting. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] dimensions: Specifies the statistical dimension. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] expression: Specifies the calculation formula. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] general_filters: Specifies the statistical caliber and modifiers. The maximum length is 1000 characters.
        :param pulumi.Input[_builtins.str] interval_type: Specifies the refresh frequency. Value values are: **REAL_TIME**, **HOUR**,
               **HALF_DAY**, **DAY**, **WEEK**, **DOUBLE_WEEK**, **MONTH**, **QUART**, **HALF_YEAR** and **YEAR**.
        :param pulumi.Input[_builtins.str] l1: The subject domain grouping Chinese name.
        :param pulumi.Input[_builtins.str] l2: The subject field Chinese name.
        :param pulumi.Input[_builtins.str] l3: The business object Chinese name.
        :param pulumi.Input[_builtins.str] measure: Specifies the measurement object. The maximum length is 255 characters.
        :param pulumi.Input[_builtins.str] name: Specifies the indicator name. This value can contain only letters, digits, parentheses,
               commas, spaces, and special characters `+#-_/[]`. The maximum length is 500 characters.
        :param pulumi.Input[_builtins.str] name_alias: Specifies the indicator alias. The maximum length is 500 characters.
        :param pulumi.Input[_builtins.str] owner: Specifies the name of person responsible for the indicator. The owner must exist in the
               system. The maximum length is 100 characters.
        :param pulumi.Input[_builtins.str] owner_department: Specifies the indicator management department name. The maximum length is 600
               characters.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status. Valid values are: **DRAFT**, **PUBLISH_DEVELOPING**, **PUBLISHED**, **OFFLINE_DEVELOPING**,
               **OFFLINE** and **REJECT**.
        :param pulumi.Input[_builtins.str] summary_status: The synchronize statistics status. Valid values are: **NO_NEED**, **CREATE_SUCCESS**,
               **CREATE_FAILED**, **UPDATE_SUCCESS**, **UPDATE_FAILED**, **SUMMARY_SUCCESS**, **SUMMARY_FAILED**, **RUNNING** and **OFFLINE**.
        :param pulumi.Input[_builtins.int] technical_metric: Specifies the related technical indicators.
        :param pulumi.Input[_builtins.str] technical_metric_name: The related technical indicator name.
        :param pulumi.Input[_builtins.str] technical_metric_type: The related technical indicator type.
        :param pulumi.Input[_builtins.str] time_filters: Specifies the statistical frequency. Use commas to separate multiple fields.
        :param pulumi.Input[_builtins.str] unit: Specifies the unit of measurement. The value of this field needs to be a quantifier, for example,
               **percentage**, **hour** or **minute**. The maximum length is 50 characters.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        :param pulumi.Input[_builtins.str] updated_by: The editor.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ArchitectureBusinessMetricState.__new__(_ArchitectureBusinessMetricState)

        __props__.__dict__["apply_scenario"] = apply_scenario
        __props__.__dict__["biz_catalog_id"] = biz_catalog_id
        __props__.__dict__["biz_catalog_path"] = biz_catalog_path
        __props__.__dict__["biz_metric"] = biz_metric
        __props__.__dict__["code"] = code
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["data_origin"] = data_origin
        __props__.__dict__["definition"] = definition
        __props__.__dict__["description"] = description
        __props__.__dict__["destination"] = destination
        __props__.__dict__["dimensions"] = dimensions
        __props__.__dict__["expression"] = expression
        __props__.__dict__["general_filters"] = general_filters
        __props__.__dict__["interval_type"] = interval_type
        __props__.__dict__["l1"] = l1
        __props__.__dict__["l2"] = l2
        __props__.__dict__["l3"] = l3
        __props__.__dict__["measure"] = measure
        __props__.__dict__["name"] = name
        __props__.__dict__["name_alias"] = name_alias
        __props__.__dict__["owner"] = owner
        __props__.__dict__["owner_department"] = owner_department
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["summary_status"] = summary_status
        __props__.__dict__["technical_metric"] = technical_metric
        __props__.__dict__["technical_metric_name"] = technical_metric_name
        __props__.__dict__["technical_metric_type"] = technical_metric_type
        __props__.__dict__["time_filters"] = time_filters
        __props__.__dict__["unit"] = unit
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["workspace_id"] = workspace_id
        return ArchitectureBusinessMetric(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applyScenario")
    def apply_scenario(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the application scenarios. The maximum length is 255 characters.
        """
        return pulumi.get(self, "apply_scenario")

    @_builtins.property
    @pulumi.getter(name="bizCatalogId")
    def biz_catalog_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the process architecture ID.
        """
        return pulumi.get(self, "biz_catalog_id")

    @_builtins.property
    @pulumi.getter(name="bizCatalogPath")
    def biz_catalog_path(self) -> pulumi.Output[_builtins.str]:
        """
        The process architecture path.
        """
        return pulumi.get(self, "biz_catalog_path")

    @_builtins.property
    @pulumi.getter(name="bizMetric")
    def biz_metric(self) -> pulumi.Output[_builtins.str]:
        """
        The business indicator synchronization status. Valid values are: **NO_NEED**, **CREATE_SUCCESS**,
        **CREATE_FAILED**, **UPDATE_SUCCESS**, **UPDATE_FAILED**, **SUMMARY_SUCCESS**, **SUMMARY_FAILED**, **RUNNING** and **OFFLINE**.
        """
        return pulumi.get(self, "biz_metric")

    @_builtins.property
    @pulumi.getter
    def code(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the indicator encoding. If this field is not specified, an indicator code will
        be automatically generated. The value of this field does not support changing to empty.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the data sources. The value needs to be a descriptive value. The maximum
        length is 1000 characters.
        """
        return pulumi.get(self, "data_origin")

    @_builtins.property
    @pulumi.getter
    def definition(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the indicator definition. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "definition")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description. The maximum length is 600 characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the purpose of setting. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the statistical dimension. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the calculation formula. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter(name="generalFilters")
    def general_filters(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the statistical caliber and modifiers. The maximum length is 1000 characters.
        """
        return pulumi.get(self, "general_filters")

    @_builtins.property
    @pulumi.getter(name="intervalType")
    def interval_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the refresh frequency. Value values are: **REAL_TIME**, **HOUR**,
        **HALF_DAY**, **DAY**, **WEEK**, **DOUBLE_WEEK**, **MONTH**, **QUART**, **HALF_YEAR** and **YEAR**.
        """
        return pulumi.get(self, "interval_type")

    @_builtins.property
    @pulumi.getter
    def l1(self) -> pulumi.Output[_builtins.str]:
        """
        The subject domain grouping Chinese name.
        """
        return pulumi.get(self, "l1")

    @_builtins.property
    @pulumi.getter
    def l2(self) -> pulumi.Output[_builtins.str]:
        """
        The subject field Chinese name.
        """
        return pulumi.get(self, "l2")

    @_builtins.property
    @pulumi.getter
    def l3(self) -> pulumi.Output[_builtins.str]:
        """
        The business object Chinese name.
        """
        return pulumi.get(self, "l3")

    @_builtins.property
    @pulumi.getter
    def measure(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the measurement object. The maximum length is 255 characters.
        """
        return pulumi.get(self, "measure")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the indicator name. This value can contain only letters, digits, parentheses,
        commas, spaces, and special characters `+#-_/[]`. The maximum length is 500 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameAlias")
    def name_alias(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the indicator alias. The maximum length is 500 characters.
        """
        return pulumi.get(self, "name_alias")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of person responsible for the indicator. The owner must exist in the
        system. The maximum length is 100 characters.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="ownerDepartment")
    def owner_department(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the indicator management department name. The maximum length is 600
        characters.
        """
        return pulumi.get(self, "owner_department")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status. Valid values are: **DRAFT**, **PUBLISH_DEVELOPING**, **PUBLISHED**, **OFFLINE_DEVELOPING**,
        **OFFLINE** and **REJECT**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="summaryStatus")
    def summary_status(self) -> pulumi.Output[_builtins.str]:
        """
        The synchronize statistics status. Valid values are: **NO_NEED**, **CREATE_SUCCESS**,
        **CREATE_FAILED**, **UPDATE_SUCCESS**, **UPDATE_FAILED**, **SUMMARY_SUCCESS**, **SUMMARY_FAILED**, **RUNNING** and **OFFLINE**.
        """
        return pulumi.get(self, "summary_status")

    @_builtins.property
    @pulumi.getter(name="technicalMetric")
    def technical_metric(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the related technical indicators.
        """
        return pulumi.get(self, "technical_metric")

    @_builtins.property
    @pulumi.getter(name="technicalMetricName")
    def technical_metric_name(self) -> pulumi.Output[_builtins.str]:
        """
        The related technical indicator name.
        """
        return pulumi.get(self, "technical_metric_name")

    @_builtins.property
    @pulumi.getter(name="technicalMetricType")
    def technical_metric_type(self) -> pulumi.Output[_builtins.str]:
        """
        The related technical indicator type.
        """
        return pulumi.get(self, "technical_metric_type")

    @_builtins.property
    @pulumi.getter(name="timeFilters")
    def time_filters(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the statistical frequency. Use commas to separate multiple fields.
        """
        return pulumi.get(self, "time_filters")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the unit of measurement. The value of this field needs to be a quantifier, for example,
        **percentage**, **hour** or **minute**. The maximum length is 50 characters.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The editor.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

