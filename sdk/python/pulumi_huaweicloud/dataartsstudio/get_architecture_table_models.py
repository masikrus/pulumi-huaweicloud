# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetArchitectureTableModelsResult',
    'AwaitableGetArchitectureTableModelsResult',
    'get_architecture_table_models',
    'get_architecture_table_models_output',
]

@pulumi.output_type
class GetArchitectureTableModelsResult:
    """
    A collection of values returned by getArchitectureTableModels.
    """
    def __init__(__self__, created_by=None, id=None, model_id=None, name=None, region=None, status=None, subject_id=None, tables=None, workspace_id=None):
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if model_id and not isinstance(model_id, str):
            raise TypeError("Expected argument 'model_id' to be a str")
        pulumi.set(__self__, "model_id", model_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subject_id and not isinstance(subject_id, str):
            raise TypeError("Expected argument 'subject_id' to be a str")
        pulumi.set(__self__, "subject_id", subject_id)
        if tables and not isinstance(tables, list):
            raise TypeError("Expected argument 'tables' to be a list")
        pulumi.set(__self__, "tables", tables)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The creator of the table model.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> _builtins.str:
        """
        The model ID corresponding to the table model.
        """
        return pulumi.get(self, "model_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the attribute.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the table model.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subjectId")
    def subject_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "subject_id")

    @_builtins.property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.GetArchitectureTableModelsTableResult']:
        """
        All table models that match the filter parameters.
        The tables structure is documented below.
        """
        return pulumi.get(self, "tables")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetArchitectureTableModelsResult(GetArchitectureTableModelsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetArchitectureTableModelsResult(
            created_by=self.created_by,
            id=self.id,
            model_id=self.model_id,
            name=self.name,
            region=self.region,
            status=self.status,
            subject_id=self.subject_id,
            tables=self.tables,
            workspace_id=self.workspace_id)


def get_architecture_table_models(created_by: Optional[_builtins.str] = None,
                                  model_id: Optional[_builtins.str] = None,
                                  name: Optional[_builtins.str] = None,
                                  region: Optional[_builtins.str] = None,
                                  status: Optional[_builtins.str] = None,
                                  subject_id: Optional[_builtins.str] = None,
                                  workspace_id: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetArchitectureTableModelsResult:
    """
    Use this data source to get the list of the DataArts Architecture table models within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    model_id = config.require_object("modelId")
    test = huaweicloud.DataArtsStudio.get_architecture_table_models(workspace_id=workspace_id,
        model_id=model_id)
    ```


    :param _builtins.str created_by: Specifies the creator of the table model.
    :param _builtins.str model_id: Specifies the model ID to which the table model belongs.
    :param _builtins.str name: Specifies the Chinese or English name of the table model.
           Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the table model.  
           The valid values are as follows:
           + **DRAFT**
           + **PUBLISH_DEVELOPING**
           + **PUBLISHED**
           + **OFFLINE**
           + **REJECT**
    :param _builtins.str subject_id: Specifies the subject ID to which the table model belongs.
    :param _builtins.str workspace_id: Specifies the workspace ID of DataArts Architecture.
    """
    __args__ = dict()
    __args__['createdBy'] = created_by
    __args__['modelId'] = model_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['subjectId'] = subject_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DataArtsStudio/getArchitectureTableModels:getArchitectureTableModels', __args__, opts=opts, typ=GetArchitectureTableModelsResult).value

    return AwaitableGetArchitectureTableModelsResult(
        created_by=pulumi.get(__ret__, 'created_by'),
        id=pulumi.get(__ret__, 'id'),
        model_id=pulumi.get(__ret__, 'model_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        subject_id=pulumi.get(__ret__, 'subject_id'),
        tables=pulumi.get(__ret__, 'tables'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_architecture_table_models_output(created_by: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         model_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         subject_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetArchitectureTableModelsResult]:
    """
    Use this data source to get the list of the DataArts Architecture table models within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    model_id = config.require_object("modelId")
    test = huaweicloud.DataArtsStudio.get_architecture_table_models(workspace_id=workspace_id,
        model_id=model_id)
    ```


    :param _builtins.str created_by: Specifies the creator of the table model.
    :param _builtins.str model_id: Specifies the model ID to which the table model belongs.
    :param _builtins.str name: Specifies the Chinese or English name of the table model.
           Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the table model.  
           The valid values are as follows:
           + **DRAFT**
           + **PUBLISH_DEVELOPING**
           + **PUBLISHED**
           + **OFFLINE**
           + **REJECT**
    :param _builtins.str subject_id: Specifies the subject ID to which the table model belongs.
    :param _builtins.str workspace_id: Specifies the workspace ID of DataArts Architecture.
    """
    __args__ = dict()
    __args__['createdBy'] = created_by
    __args__['modelId'] = model_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    __args__['subjectId'] = subject_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DataArtsStudio/getArchitectureTableModels:getArchitectureTableModels', __args__, opts=opts, typ=GetArchitectureTableModelsResult)
    return __ret__.apply(lambda __response__: GetArchitectureTableModelsResult(
        created_by=pulumi.get(__response__, 'created_by'),
        id=pulumi.get(__response__, 'id'),
        model_id=pulumi.get(__response__, 'model_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        subject_id=pulumi.get(__response__, 'subject_id'),
        tables=pulumi.get(__response__, 'tables'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
