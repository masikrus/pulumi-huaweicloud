# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ArchitectureDirectoryArgs', 'ArchitectureDirectory']

@pulumi.input_type
class ArchitectureDirectoryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ArchitectureDirectory resource.
        :param pulumi.Input[_builtins.str] type: Specifies the directory type. The valid values are **STANDARD_ELEMENT** and **CODE**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the directory in.
               Changing this creates a new directory
        :param pulumi.Input[_builtins.str] description: Specifies the description of directory.
        :param pulumi.Input[_builtins.str] name: Specifies the directory name.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent ID of the directory.
               It's **Required** when you created a subordinate directory.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the directory.
               Changing this creates a new directory.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the directory type. The valid values are **STANDARD_ELEMENT** and **CODE**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID which the directory in.
        Changing this creates a new directory
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of directory.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the directory name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent ID of the directory.
        It's **Required** when you created a subordinate directory.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to manage the directory.
        Changing this creates a new directory.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ArchitectureDirectoryState:
    def __init__(__self__, *,
                 childrens: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 qualified_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 root_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ArchitectureDirectory resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] childrens: The name list of sub-directory.
        :param pulumi.Input[_builtins.str] created_at: The create time of the directory.
        :param pulumi.Input[_builtins.str] created_by: The person creating the directory.
        :param pulumi.Input[_builtins.str] description: Specifies the description of directory.
        :param pulumi.Input[_builtins.str] name: Specifies the directory name.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent ID of the directory.
               It's **Required** when you created a subordinate directory.
        :param pulumi.Input[_builtins.str] qualified_name: The directory path. Format is `<root_directory_name>.<sub_directory_name1>.<sub_directory_name2>...`
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the directory.
               Changing this creates a new directory.
        :param pulumi.Input[_builtins.str] root_id: The root directory ID.
        :param pulumi.Input[_builtins.str] type: Specifies the directory type. The valid values are **STANDARD_ELEMENT** and **CODE**.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the directory.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the directory.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the directory in.
               Changing this creates a new directory
        """
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if qualified_name is not None:
            pulumi.set(__self__, "qualified_name", qualified_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if root_id is not None:
            pulumi.set(__self__, "root_id", root_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def childrens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The name list of sub-directory.
        """
        return pulumi.get(self, "childrens")

    @childrens.setter
    def childrens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "childrens", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The create time of the directory.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person creating the directory.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of directory.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the directory name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent ID of the directory.
        It's **Required** when you created a subordinate directory.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter(name="qualifiedName")
    def qualified_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The directory path. Format is `<root_directory_name>.<sub_directory_name1>.<sub_directory_name2>...`
        """
        return pulumi.get(self, "qualified_name")

    @qualified_name.setter
    def qualified_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qualified_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to manage the directory.
        Changing this creates a new directory.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rootId")
    def root_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The root directory ID.
        """
        return pulumi.get(self, "root_id")

    @root_id.setter
    def root_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the directory type. The valid values are **STANDARD_ELEMENT** and **CODE**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the directory.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person updating the directory.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID which the directory in.
        Changing this creates a new directory
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/architectureDirectory:ArchitectureDirectory")
class ArchitectureDirectory(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages DataArts Architecture directory resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        directory_id = config.require_object("directoryId")
        test_root = huaweicloud.dataartsstudio.ArchitectureDirectory("test-root",
            workspace_id=workspace_id,
            name=name,
            type="STANDARD_ELEMENT")
        test_sub = huaweicloud.dataartsstudio.ArchitectureDirectory("test-sub",
            workspace_id=workspace_id,
            name=name,
            type="STANDARD_ELEMENT",
            parent_id=directory_id)
        ```

        ## Import

        DataArts Architecture directory can be imported using `<workspace_id>/<type>/<qualified_name>`, e.g.

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureDirectory:ArchitectureDirectory test b606cd4a47b645108a122857204b360f/STANDARD_ELEMENT/root
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of directory.
        :param pulumi.Input[_builtins.str] name: Specifies the directory name.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent ID of the directory.
               It's **Required** when you created a subordinate directory.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the directory.
               Changing this creates a new directory.
        :param pulumi.Input[_builtins.str] type: Specifies the directory type. The valid values are **STANDARD_ELEMENT** and **CODE**.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the directory in.
               Changing this creates a new directory
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ArchitectureDirectoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages DataArts Architecture directory resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        directory_id = config.require_object("directoryId")
        test_root = huaweicloud.dataartsstudio.ArchitectureDirectory("test-root",
            workspace_id=workspace_id,
            name=name,
            type="STANDARD_ELEMENT")
        test_sub = huaweicloud.dataartsstudio.ArchitectureDirectory("test-sub",
            workspace_id=workspace_id,
            name=name,
            type="STANDARD_ELEMENT",
            parent_id=directory_id)
        ```

        ## Import

        DataArts Architecture directory can be imported using `<workspace_id>/<type>/<qualified_name>`, e.g.

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureDirectory:ArchitectureDirectory test b606cd4a47b645108a122857204b360f/STANDARD_ELEMENT/root
        ```

        :param str resource_name: The name of the resource.
        :param ArchitectureDirectoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ArchitectureDirectoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ArchitectureDirectoryArgs.__new__(ArchitectureDirectoryArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["childrens"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["qualified_name"] = None
            __props__.__dict__["root_id"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(ArchitectureDirectory, __self__).__init__(
            'huaweicloud:DataArtsStudio/architectureDirectory:ArchitectureDirectory',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            childrens: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parent_id: Optional[pulumi.Input[_builtins.str]] = None,
            qualified_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            root_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ArchitectureDirectory':
        """
        Get an existing ArchitectureDirectory resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] childrens: The name list of sub-directory.
        :param pulumi.Input[_builtins.str] created_at: The create time of the directory.
        :param pulumi.Input[_builtins.str] created_by: The person creating the directory.
        :param pulumi.Input[_builtins.str] description: Specifies the description of directory.
        :param pulumi.Input[_builtins.str] name: Specifies the directory name.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent ID of the directory.
               It's **Required** when you created a subordinate directory.
        :param pulumi.Input[_builtins.str] qualified_name: The directory path. Format is `<root_directory_name>.<sub_directory_name1>.<sub_directory_name2>...`
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the directory.
               Changing this creates a new directory.
        :param pulumi.Input[_builtins.str] root_id: The root directory ID.
        :param pulumi.Input[_builtins.str] type: Specifies the directory type. The valid values are **STANDARD_ELEMENT** and **CODE**.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the directory.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the directory.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the directory in.
               Changing this creates a new directory
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ArchitectureDirectoryState.__new__(_ArchitectureDirectoryState)

        __props__.__dict__["childrens"] = childrens
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["qualified_name"] = qualified_name
        __props__.__dict__["region"] = region
        __props__.__dict__["root_id"] = root_id
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["workspace_id"] = workspace_id
        return ArchitectureDirectory(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def childrens(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The name list of sub-directory.
        """
        return pulumi.get(self, "childrens")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The create time of the directory.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The person creating the directory.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of directory.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the directory name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the parent ID of the directory.
        It's **Required** when you created a subordinate directory.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="qualifiedName")
    def qualified_name(self) -> pulumi.Output[_builtins.str]:
        """
        The directory path. Format is `<root_directory_name>.<sub_directory_name1>.<sub_directory_name2>...`
        """
        return pulumi.get(self, "qualified_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to manage the directory.
        Changing this creates a new directory.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rootId")
    def root_id(self) -> pulumi.Output[_builtins.str]:
        """
        The root directory ID.
        """
        return pulumi.get(self, "root_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the directory type. The valid values are **STANDARD_ELEMENT** and **CODE**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time of the directory.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The person updating the directory.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID which the directory in.
        Changing this creates a new directory
        """
        return pulumi.get(self, "workspace_id")

