# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SecurityPermissionSetPrivilegeArgs', 'SecurityPermissionSetPrivilege']

@pulumi.input_type
class SecurityPermissionSetPrivilegeArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 cluster_name: pulumi.Input[_builtins.str],
                 datasource_type: pulumi.Input[_builtins.str],
                 permission_set_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 column_name: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 database_name: Optional[pulumi.Input[_builtins.str]] = None,
                 database_url: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SecurityPermissionSetPrivilege resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] actions: Specifies the list of granted permissions. The valid length is limited from `1` to `32`,
               The valid permissions are documented below.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the cluster name corresponding to the granted data source.
               The valid ranges from `1` to `128`.
               Changing this creates a new resource.
               If `datasource_type` is set to `DLI`, the parameter is set to `*`.
        :param pulumi.Input[_builtins.str] datasource_type: Specifies the type of granted data source.
               The valid values are **HIVE**, **DWS** and **DLI**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the permission set to be granted.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of permission to be configured.
               Currently, only **ALLOW** is supported.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the permission set belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID corresponding to the granted data source.
               It is required when `datasource_type` is `HIVE` or `DWS`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] column_name: Specifies the name of column corresponding to the granted data source.
               Changing this creates a new resource.
               
               > 1. For `database_name`, `table_name` and `column_name` parameters, the valid length is limited from `1` to `128`,
               only letters, digits, underscores (_) and asterisk (*) are allowed.<br/>2. The permissions of databases, tables,
               and columns are managed by layer.
               For example, a user who has been granted database permissions does not have the permissions of tables and columns.
               Table and column permissions must be granted separately.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the data connection ID corresponding to the granted data source.
        :param pulumi.Input[_builtins.str] database_name: Specifies the name of the database corresponding to the granted data source.
               Changing this creates a new resource.
               It is required when `datasource_type` is `DWS` or `DLI`.
        :param pulumi.Input[_builtins.str] database_url: Specifies the URL of the database corresponding to the granted data source.
               Changing this creates a new resource.
               This parameter is only valid when `datasource_type` is set to `HIVE`.
               This parameter is conflict with `database_name`, `table_name` and `column_name`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] schema_name: Specifies the schema name corresponding to the DWS data source.
               Changing this creates a new resource.
               This parameter is only valid when `datasource_type` is set to `DWS`.
        :param pulumi.Input[_builtins.str] table_name: Specifies the name of the data table corresponding to the granted data source.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "datasource_type", datasource_type)
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_url is not None:
            pulumi.set(__self__, "database_url", database_url)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of granted permissions. The valid length is limited from `1` to `32`,
        The valid permissions are documented below.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cluster name corresponding to the granted data source.
        The valid ranges from `1` to `128`.
        Changing this creates a new resource.
        If `datasource_type` is set to `DLI`, the parameter is set to `*`.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="datasourceType")
    def datasource_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of granted data source.
        The valid values are **HIVE**, **DWS** and **DLI**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "datasource_type")

    @datasource_type.setter
    def datasource_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datasource_type", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the permission set to be granted.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "permission_set_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of permission to be configured.
        Currently, only **ALLOW** is supported.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the workspace to which the permission set belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster ID corresponding to the granted data source.
        It is required when `datasource_type` is `HIVE` or `DWS`.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of column corresponding to the granted data source.
        Changing this creates a new resource.

        > 1. For `database_name`, `table_name` and `column_name` parameters, the valid length is limited from `1` to `128`,
        only letters, digits, underscores (_) and asterisk (*) are allowed.<br/>2. The permissions of databases, tables,
        and columns are managed by layer.
        For example, a user who has been granted database permissions does not have the permissions of tables and columns.
        Table and column permissions must be granted separately.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "column_name", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection ID corresponding to the granted data source.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the database corresponding to the granted data source.
        Changing this creates a new resource.
        It is required when `datasource_type` is `DWS` or `DLI`.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_name", value)

    @_builtins.property
    @pulumi.getter(name="databaseUrl")
    def database_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the URL of the database corresponding to the granted data source.
        Changing this creates a new resource.
        This parameter is only valid when `datasource_type` is set to `HIVE`.
        This parameter is conflict with `database_name`, `table_name` and `column_name`.
        """
        return pulumi.get(self, "database_url")

    @database_url.setter
    def database_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_url", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the schema name corresponding to the DWS data source.
        Changing this creates a new resource.
        This parameter is only valid when `datasource_type` is set to `DWS`.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema_name", value)

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the data table corresponding to the granted data source.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class _SecurityPermissionSetPrivilegeState:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 column_name: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 database_name: Optional[pulumi.Input[_builtins.str]] = None,
                 database_url: Optional[pulumi.Input[_builtins.str]] = None,
                 datasource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 sync_msg: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SecurityPermissionSetPrivilege resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] actions: Specifies the list of granted permissions. The valid length is limited from `1` to `32`,
               The valid permissions are documented below.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID corresponding to the granted data source.
               It is required when `datasource_type` is `HIVE` or `DWS`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the cluster name corresponding to the granted data source.
               The valid ranges from `1` to `128`.
               Changing this creates a new resource.
               If `datasource_type` is set to `DLI`, the parameter is set to `*`.
        :param pulumi.Input[_builtins.str] column_name: Specifies the name of column corresponding to the granted data source.
               Changing this creates a new resource.
               
               > 1. For `database_name`, `table_name` and `column_name` parameters, the valid length is limited from `1` to `128`,
               only letters, digits, underscores (_) and asterisk (*) are allowed.<br/>2. The permissions of databases, tables,
               and columns are managed by layer.
               For example, a user who has been granted database permissions does not have the permissions of tables and columns.
               Table and column permissions must be granted separately.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the data connection ID corresponding to the granted data source.
        :param pulumi.Input[_builtins.str] database_name: Specifies the name of the database corresponding to the granted data source.
               Changing this creates a new resource.
               It is required when `datasource_type` is `DWS` or `DLI`.
        :param pulumi.Input[_builtins.str] database_url: Specifies the URL of the database corresponding to the granted data source.
               Changing this creates a new resource.
               This parameter is only valid when `datasource_type` is set to `HIVE`.
               This parameter is conflict with `database_name`, `table_name` and `column_name`.
        :param pulumi.Input[_builtins.str] datasource_type: Specifies the type of granted data source.
               The valid values are **HIVE**, **DWS** and **DLI**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the permission set to be granted.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] schema_name: Specifies the schema name corresponding to the DWS data source.
               Changing this creates a new resource.
               This parameter is only valid when `datasource_type` is set to `DWS`.
        :param pulumi.Input[_builtins.str] status: The current synchronization status of the resource.
               The valid values are **UNKNOWN**, **NOT_SYNC**, **SYNC_SUCCESS** and **SYNC_FAIL**.
        :param pulumi.Input[_builtins.str] sync_msg: The status information of the resource.
        :param pulumi.Input[_builtins.str] table_name: Specifies the name of the data table corresponding to the granted data source.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of permission to be configured.
               Currently, only **ALLOW** is supported.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the permission set belongs.
               Changing this creates a new resource.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_url is not None:
            pulumi.set(__self__, "database_url", database_url)
        if datasource_type is not None:
            pulumi.set(__self__, "datasource_type", datasource_type)
        if permission_set_id is not None:
            pulumi.set(__self__, "permission_set_id", permission_set_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_msg is not None:
            pulumi.set(__self__, "sync_msg", sync_msg)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of granted permissions. The valid length is limited from `1` to `32`,
        The valid permissions are documented below.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster ID corresponding to the granted data source.
        It is required when `datasource_type` is `HIVE` or `DWS`.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster name corresponding to the granted data source.
        The valid ranges from `1` to `128`.
        Changing this creates a new resource.
        If `datasource_type` is set to `DLI`, the parameter is set to `*`.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of column corresponding to the granted data source.
        Changing this creates a new resource.

        > 1. For `database_name`, `table_name` and `column_name` parameters, the valid length is limited from `1` to `128`,
        only letters, digits, underscores (_) and asterisk (*) are allowed.<br/>2. The permissions of databases, tables,
        and columns are managed by layer.
        For example, a user who has been granted database permissions does not have the permissions of tables and columns.
        Table and column permissions must be granted separately.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "column_name", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection ID corresponding to the granted data source.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the database corresponding to the granted data source.
        Changing this creates a new resource.
        It is required when `datasource_type` is `DWS` or `DLI`.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_name", value)

    @_builtins.property
    @pulumi.getter(name="databaseUrl")
    def database_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the URL of the database corresponding to the granted data source.
        Changing this creates a new resource.
        This parameter is only valid when `datasource_type` is set to `HIVE`.
        This parameter is conflict with `database_name`, `table_name` and `column_name`.
        """
        return pulumi.get(self, "database_url")

    @database_url.setter
    def database_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_url", value)

    @_builtins.property
    @pulumi.getter(name="datasourceType")
    def datasource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of granted data source.
        The valid values are **HIVE**, **DWS** and **DLI**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "datasource_type")

    @datasource_type.setter
    def datasource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datasource_type", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the permission set to be granted.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_set_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the schema name corresponding to the DWS data source.
        Changing this creates a new resource.
        This parameter is only valid when `datasource_type` is set to `DWS`.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema_name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current synchronization status of the resource.
        The valid values are **UNKNOWN**, **NOT_SYNC**, **SYNC_SUCCESS** and **SYNC_FAIL**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="syncMsg")
    def sync_msg(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status information of the resource.
        """
        return pulumi.get(self, "sync_msg")

    @sync_msg.setter
    def sync_msg(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sync_msg", value)

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the data table corresponding to the granted data source.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of permission to be configured.
        Currently, only **ALLOW** is supported.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the workspace to which the permission set belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/securityPermissionSetPrivilege:SecurityPermissionSetPrivilege")
class SecurityPermissionSetPrivilege(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 column_name: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 database_name: Optional[pulumi.Input[_builtins.str]] = None,
                 database_url: Optional[pulumi.Input[_builtins.str]] = None,
                 datasource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to assign data source permissions to workspace permission set or permission set within HuaweiCloud.

        > If you are assigning privileges to permission set, you can only select permission types included in the parent
           permission set.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        permission_set_id = config.require_object("permissionSetId")
        permission_actions = config.require_object("permissionActions")
        database_name = config.require_object("databaseName")
        table_name = config.require_object("tableName")
        connection_id = config.require_object("connectionId")
        test = huaweicloud.dataartsstudio.SecurityPermissionSetPrivilege("test",
            workspace_id=workspace_id,
            permission_set_id=permission_set_id,
            datasource_type="DLI",
            type="ALLOW",
            actions=permission_actions,
            cluster_name="*",
            database_name=database_name,
            table_name=table_name,
            connection_id=connection_id)
        ```

        ## Appendix

        <a name="permissions_for_permission_set"></a>

        | Type | HIVE | DWS | DLI |
        | ---- | ---- | --- | --- |
        | Permissions | ALL<br>SELECT<br>UPDATE<br>CREATE<br>DROP<br>ALTER<br>INDEX<br>READ<br>WRITE<br> | ALL<br>SELECT<br>UPDATE<br>DROP<br>ALTER<br>INSERT<br>CREATE_TABLE<br>DELETE<br>CREATE_SCHEMA<br> | SELECT<br>DROP<br>ALTER<br>INSERT<br>CREATE_TABLE |

        ## Import

        The resource can be imported using `workspace_id`, `permission_set_id` and `id`, separated by slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/securityPermissionSetPrivilege:SecurityPermissionSetPrivilege test <workspace_id>/<permission_set_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `connection_id`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_security_permission_set_privilege" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              connection_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] actions: Specifies the list of granted permissions. The valid length is limited from `1` to `32`,
               The valid permissions are documented below.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID corresponding to the granted data source.
               It is required when `datasource_type` is `HIVE` or `DWS`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the cluster name corresponding to the granted data source.
               The valid ranges from `1` to `128`.
               Changing this creates a new resource.
               If `datasource_type` is set to `DLI`, the parameter is set to `*`.
        :param pulumi.Input[_builtins.str] column_name: Specifies the name of column corresponding to the granted data source.
               Changing this creates a new resource.
               
               > 1. For `database_name`, `table_name` and `column_name` parameters, the valid length is limited from `1` to `128`,
               only letters, digits, underscores (_) and asterisk (*) are allowed.<br/>2. The permissions of databases, tables,
               and columns are managed by layer.
               For example, a user who has been granted database permissions does not have the permissions of tables and columns.
               Table and column permissions must be granted separately.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the data connection ID corresponding to the granted data source.
        :param pulumi.Input[_builtins.str] database_name: Specifies the name of the database corresponding to the granted data source.
               Changing this creates a new resource.
               It is required when `datasource_type` is `DWS` or `DLI`.
        :param pulumi.Input[_builtins.str] database_url: Specifies the URL of the database corresponding to the granted data source.
               Changing this creates a new resource.
               This parameter is only valid when `datasource_type` is set to `HIVE`.
               This parameter is conflict with `database_name`, `table_name` and `column_name`.
        :param pulumi.Input[_builtins.str] datasource_type: Specifies the type of granted data source.
               The valid values are **HIVE**, **DWS** and **DLI**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the permission set to be granted.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] schema_name: Specifies the schema name corresponding to the DWS data source.
               Changing this creates a new resource.
               This parameter is only valid when `datasource_type` is set to `DWS`.
        :param pulumi.Input[_builtins.str] table_name: Specifies the name of the data table corresponding to the granted data source.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of permission to be configured.
               Currently, only **ALLOW** is supported.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the permission set belongs.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityPermissionSetPrivilegeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to assign data source permissions to workspace permission set or permission set within HuaweiCloud.

        > If you are assigning privileges to permission set, you can only select permission types included in the parent
           permission set.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        permission_set_id = config.require_object("permissionSetId")
        permission_actions = config.require_object("permissionActions")
        database_name = config.require_object("databaseName")
        table_name = config.require_object("tableName")
        connection_id = config.require_object("connectionId")
        test = huaweicloud.dataartsstudio.SecurityPermissionSetPrivilege("test",
            workspace_id=workspace_id,
            permission_set_id=permission_set_id,
            datasource_type="DLI",
            type="ALLOW",
            actions=permission_actions,
            cluster_name="*",
            database_name=database_name,
            table_name=table_name,
            connection_id=connection_id)
        ```

        ## Appendix

        <a name="permissions_for_permission_set"></a>

        | Type | HIVE | DWS | DLI |
        | ---- | ---- | --- | --- |
        | Permissions | ALL<br>SELECT<br>UPDATE<br>CREATE<br>DROP<br>ALTER<br>INDEX<br>READ<br>WRITE<br> | ALL<br>SELECT<br>UPDATE<br>DROP<br>ALTER<br>INSERT<br>CREATE_TABLE<br>DELETE<br>CREATE_SCHEMA<br> | SELECT<br>DROP<br>ALTER<br>INSERT<br>CREATE_TABLE |

        ## Import

        The resource can be imported using `workspace_id`, `permission_set_id` and `id`, separated by slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/securityPermissionSetPrivilege:SecurityPermissionSetPrivilege test <workspace_id>/<permission_set_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `connection_id`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_security_permission_set_privilege" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              connection_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param SecurityPermissionSetPrivilegeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityPermissionSetPrivilegeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 column_name: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 database_name: Optional[pulumi.Input[_builtins.str]] = None,
                 database_url: Optional[pulumi.Input[_builtins.str]] = None,
                 datasource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityPermissionSetPrivilegeArgs.__new__(SecurityPermissionSetPrivilegeArgs)

            if actions is None and not opts.urn:
                raise TypeError("Missing required property 'actions'")
            __props__.__dict__["actions"] = actions
            __props__.__dict__["cluster_id"] = cluster_id
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["column_name"] = column_name
            __props__.__dict__["connection_id"] = connection_id
            __props__.__dict__["database_name"] = database_name
            __props__.__dict__["database_url"] = database_url
            if datasource_type is None and not opts.urn:
                raise TypeError("Missing required property 'datasource_type'")
            __props__.__dict__["datasource_type"] = datasource_type
            if permission_set_id is None and not opts.urn:
                raise TypeError("Missing required property 'permission_set_id'")
            __props__.__dict__["permission_set_id"] = permission_set_id
            __props__.__dict__["region"] = region
            __props__.__dict__["schema_name"] = schema_name
            __props__.__dict__["table_name"] = table_name
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["status"] = None
            __props__.__dict__["sync_msg"] = None
        super(SecurityPermissionSetPrivilege, __self__).__init__(
            'huaweicloud:DataArtsStudio/securityPermissionSetPrivilege:SecurityPermissionSetPrivilege',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            column_name: Optional[pulumi.Input[_builtins.str]] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            database_name: Optional[pulumi.Input[_builtins.str]] = None,
            database_url: Optional[pulumi.Input[_builtins.str]] = None,
            datasource_type: Optional[pulumi.Input[_builtins.str]] = None,
            permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            schema_name: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            sync_msg: Optional[pulumi.Input[_builtins.str]] = None,
            table_name: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SecurityPermissionSetPrivilege':
        """
        Get an existing SecurityPermissionSetPrivilege resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] actions: Specifies the list of granted permissions. The valid length is limited from `1` to `32`,
               The valid permissions are documented below.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID corresponding to the granted data source.
               It is required when `datasource_type` is `HIVE` or `DWS`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] cluster_name: Specifies the cluster name corresponding to the granted data source.
               The valid ranges from `1` to `128`.
               Changing this creates a new resource.
               If `datasource_type` is set to `DLI`, the parameter is set to `*`.
        :param pulumi.Input[_builtins.str] column_name: Specifies the name of column corresponding to the granted data source.
               Changing this creates a new resource.
               
               > 1. For `database_name`, `table_name` and `column_name` parameters, the valid length is limited from `1` to `128`,
               only letters, digits, underscores (_) and asterisk (*) are allowed.<br/>2. The permissions of databases, tables,
               and columns are managed by layer.
               For example, a user who has been granted database permissions does not have the permissions of tables and columns.
               Table and column permissions must be granted separately.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the data connection ID corresponding to the granted data source.
        :param pulumi.Input[_builtins.str] database_name: Specifies the name of the database corresponding to the granted data source.
               Changing this creates a new resource.
               It is required when `datasource_type` is `DWS` or `DLI`.
        :param pulumi.Input[_builtins.str] database_url: Specifies the URL of the database corresponding to the granted data source.
               Changing this creates a new resource.
               This parameter is only valid when `datasource_type` is set to `HIVE`.
               This parameter is conflict with `database_name`, `table_name` and `column_name`.
        :param pulumi.Input[_builtins.str] datasource_type: Specifies the type of granted data source.
               The valid values are **HIVE**, **DWS** and **DLI**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the ID of the permission set to be granted.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] schema_name: Specifies the schema name corresponding to the DWS data source.
               Changing this creates a new resource.
               This parameter is only valid when `datasource_type` is set to `DWS`.
        :param pulumi.Input[_builtins.str] status: The current synchronization status of the resource.
               The valid values are **UNKNOWN**, **NOT_SYNC**, **SYNC_SUCCESS** and **SYNC_FAIL**.
        :param pulumi.Input[_builtins.str] sync_msg: The status information of the resource.
        :param pulumi.Input[_builtins.str] table_name: Specifies the name of the data table corresponding to the granted data source.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of permission to be configured.
               Currently, only **ALLOW** is supported.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of the workspace to which the permission set belongs.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityPermissionSetPrivilegeState.__new__(_SecurityPermissionSetPrivilegeState)

        __props__.__dict__["actions"] = actions
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["column_name"] = column_name
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["database_name"] = database_name
        __props__.__dict__["database_url"] = database_url
        __props__.__dict__["datasource_type"] = datasource_type
        __props__.__dict__["permission_set_id"] = permission_set_id
        __props__.__dict__["region"] = region
        __props__.__dict__["schema_name"] = schema_name
        __props__.__dict__["status"] = status
        __props__.__dict__["sync_msg"] = sync_msg
        __props__.__dict__["table_name"] = table_name
        __props__.__dict__["type"] = type
        __props__.__dict__["workspace_id"] = workspace_id
        return SecurityPermissionSetPrivilege(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of granted permissions. The valid length is limited from `1` to `32`,
        The valid permissions are documented below.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster ID corresponding to the granted data source.
        It is required when `datasource_type` is `HIVE` or `DWS`.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster name corresponding to the granted data source.
        The valid ranges from `1` to `128`.
        Changing this creates a new resource.
        If `datasource_type` is set to `DLI`, the parameter is set to `*`.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of column corresponding to the granted data source.
        Changing this creates a new resource.

        > 1. For `database_name`, `table_name` and `column_name` parameters, the valid length is limited from `1` to `128`,
        only letters, digits, underscores (_) and asterisk (*) are allowed.<br/>2. The permissions of databases, tables,
        and columns are managed by layer.
        For example, a user who has been granted database permissions does not have the permissions of tables and columns.
        Table and column permissions must be granted separately.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the data connection ID corresponding to the granted data source.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the database corresponding to the granted data source.
        Changing this creates a new resource.
        It is required when `datasource_type` is `DWS` or `DLI`.
        """
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="databaseUrl")
    def database_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the URL of the database corresponding to the granted data source.
        Changing this creates a new resource.
        This parameter is only valid when `datasource_type` is set to `HIVE`.
        This parameter is conflict with `database_name`, `table_name` and `column_name`.
        """
        return pulumi.get(self, "database_url")

    @_builtins.property
    @pulumi.getter(name="datasourceType")
    def datasource_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of granted data source.
        The valid values are **HIVE**, **DWS** and **DLI**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "datasource_type")

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the permission set to be granted.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the schema name corresponding to the DWS data source.
        Changing this creates a new resource.
        This parameter is only valid when `datasource_type` is set to `DWS`.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current synchronization status of the resource.
        The valid values are **UNKNOWN**, **NOT_SYNC**, **SYNC_SUCCESS** and **SYNC_FAIL**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="syncMsg")
    def sync_msg(self) -> pulumi.Output[_builtins.str]:
        """
        The status information of the resource.
        """
        return pulumi.get(self, "sync_msg")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the data table corresponding to the granted data source.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of permission to be configured.
        Currently, only **ALLOW** is supported.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the workspace to which the permission set belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "workspace_id")

