# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ArchitectureTableModelArgs', 'ArchitectureTableModel']

@pulumi.input_type
class ArchitectureTableModelArgs:
    def __init__(__self__, *,
                 attributes: pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelAttributeArgs']]],
                 description: pulumi.Input[_builtins.str],
                 dw_type: pulumi.Input[_builtins.str],
                 model_id: pulumi.Input[_builtins.str],
                 physical_table_name: pulumi.Input[_builtins.str],
                 subject_id: pulumi.Input[_builtins.str],
                 table_name: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 compression: Optional[pulumi.Input[_builtins.str]] = None,
                 configs: Optional[pulumi.Input[_builtins.str]] = None,
                 data_format: Optional[pulumi.Input[_builtins.str]] = None,
                 db_name: Optional[pulumi.Input[_builtins.str]] = None,
                 del_type: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_database: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_suffix: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_switch: Optional[pulumi.Input[_builtins.bool]] = None,
                 distribute: Optional[pulumi.Input[_builtins.str]] = None,
                 distribute_column: Optional[pulumi.Input[_builtins.str]] = None,
                 dlf_task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingArgs']]]] = None,
                 obs_location: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_model_name: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_table_model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_table_model_name: Optional[pulumi.Input[_builtins.str]] = None,
                 relations: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationArgs']]]] = None,
                 reversed: Optional[pulumi.Input[_builtins.bool]] = None,
                 schema: Optional[pulumi.Input[_builtins.str]] = None,
                 table_type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_recently_partition: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a ArchitectureTableModel resource.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelAttributeArgs']]] attributes: Specifies the attributes of table model.
               The attributes structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of attribute.
        :param pulumi.Input[_builtins.str] dw_type: Specifies the data connection type of table model.
               Changing this creates a new table model.
               + The valid values for physical model are: **DWS**, **DLI**, **MRS_HIVE**, **POSTGRESQL**, **MRS_SPARK**,
               **CLICKHOUSE**, **MYSQL**, **ORACLE**.
               + The valid value for logical model is **UNSPECIFIED**.
        :param pulumi.Input[_builtins.str] model_id: Specifies the model ID which the table model in.
               Changing this creates a new table model.
        :param pulumi.Input[_builtins.str] physical_table_name: Specifies the physical name of table model.
        :param pulumi.Input[_builtins.str] subject_id: Specifies the subject ID to which table model belongs.
        :param pulumi.Input[_builtins.str] table_name: Specifies the name of table model.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the table model in.
               Changing this creates a new table model.
        :param pulumi.Input[_builtins.str] code: Specifies the code of attribute.
        :param pulumi.Input[_builtins.str] compression: Specifies the compression level of table model.
               The valid values are **YES**, **NO**. It's **Required** for **DWS** table model.
        :param pulumi.Input[_builtins.str] configs: Specifies the advanced configs of table model.
        :param pulumi.Input[_builtins.str] data_format: Specifies the data format of table model. Only for **DLI** table model.
               + The valid values for **MANAGED** are **Parquet**, **Carbon**.
               + The valid values for **EXTERNAL** are **Parquet**, **Carbon**, **CSV**, **ORC**, **JSON**, **Avro**.
        :param pulumi.Input[_builtins.str] db_name: Specifies the database name of table model.
        :param pulumi.Input[_builtins.str] del_type: Specifies the delete type of table model. The valid value is **PHYSICAL_TABLE**.
        :param pulumi.Input[_builtins.str] dirty_out_database: Specifies the database where to record the dirty data.
        :param pulumi.Input[_builtins.str] dirty_out_prefix: Specifies the prefix of the table recording dirty data.
        :param pulumi.Input[_builtins.str] dirty_out_suffix: Specifies the suffix of the table recording dirty data.
        :param pulumi.Input[_builtins.bool] dirty_out_switch: Specifies the dirty out switch of table model.
        :param pulumi.Input[_builtins.str] distribute: Specifies the attribute is distributed by what. The valid values are **HASH**,
               **REPLICATION**.
        :param pulumi.Input[_builtins.str] distribute_column: Specifies the **HASH** column the attribute distributed by.
        :param pulumi.Input[_builtins.str] dlf_task_id: Specifies the DLF task ID of table model.
        :param pulumi.Input[_builtins.str] dw_id: Specifies the data connection ID of table model.
        :param pulumi.Input[_builtins.str] dw_name: Specifies the data connection name of table model.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingArgs']]] mappings: Specifies the mappings of the attributes related.
               The mappings structure is documented below.
        :param pulumi.Input[_builtins.str] obs_location: Specifies the obs location of table model.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner of table model.
        :param pulumi.Input[_builtins.str] parent_table_id: Specifies the parent table ID of table model.
        :param pulumi.Input[_builtins.str] parent_table_name: Specifies the parent table name of table model.
        :param pulumi.Input[_builtins.str] partition_conf: Specifies the **WHERE** condition expression.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the queue name of table model.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the table model.
               If omitted, the provider-level region will be used. Changing this creates a new table model.
        :param pulumi.Input[_builtins.str] related_logic_model_id: Specifies the related logic model ID of table model.
        :param pulumi.Input[_builtins.str] related_logic_model_name: Specifies the related logic model name of table model.
        :param pulumi.Input[_builtins.str] related_logic_table_model_id: Specifies the related logic table model ID of table model.
        :param pulumi.Input[_builtins.str] related_logic_table_model_name: Specifies the related logic table model name of table model.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationArgs']]] relations: Specifies the relations of table model.
               The relations structure is documented below.
        :param pulumi.Input[_builtins.bool] reversed: Specifies whether the table model is reversed.
               
               <a name="block--attributes"></a>
               The `attributes` block supports:
        :param pulumi.Input[_builtins.str] schema: Specifies the schema of table model.
        :param pulumi.Input[_builtins.str] table_type: Specifies the table type of table model.
               + The valid values for **DWS** are **DWS_COLUMN**, **DWS_ROW**.
               + The valid values for **DLI** are **EXTERNAL**, **MANAGED**.
               + The valid values for **MRS_HIVE** are **HIVE_EXTERNAL_TABLE**, **HIVE_TABLE**.
               + The valid value for **POSTGRESQL** is **POSTGRESQL_TABLE**.
               + The valid values for **MRS_SPARK** are **HUDI_COW**, **HUDI_MOR**.
               + The valid value for **CLICKHOUSE** is **CLICKHOUSE_TABLE**.
               + The valid value for **MYSQL** is **MYSQL_TABLE**.
               + The valid value for **ORACLE** is **ORACLE_TABLE**.
               + The valid value for **UNSPECIFIED** is **LOGIC_TABLE**.
        :param pulumi.Input[_builtins.bool] use_recently_partition: Specifies the table model use recently partition or not.
        """
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dw_type", dw_type)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "physical_table_name", physical_table_name)
        pulumi.set(__self__, "subject_id", subject_id)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if data_format is not None:
            pulumi.set(__self__, "data_format", data_format)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if del_type is not None:
            pulumi.set(__self__, "del_type", del_type)
        if dirty_out_database is not None:
            pulumi.set(__self__, "dirty_out_database", dirty_out_database)
        if dirty_out_prefix is not None:
            pulumi.set(__self__, "dirty_out_prefix", dirty_out_prefix)
        if dirty_out_suffix is not None:
            pulumi.set(__self__, "dirty_out_suffix", dirty_out_suffix)
        if dirty_out_switch is not None:
            pulumi.set(__self__, "dirty_out_switch", dirty_out_switch)
        if distribute is not None:
            pulumi.set(__self__, "distribute", distribute)
        if distribute_column is not None:
            pulumi.set(__self__, "distribute_column", distribute_column)
        if dlf_task_id is not None:
            pulumi.set(__self__, "dlf_task_id", dlf_task_id)
        if dw_id is not None:
            pulumi.set(__self__, "dw_id", dw_id)
        if dw_name is not None:
            pulumi.set(__self__, "dw_name", dw_name)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if obs_location is not None:
            pulumi.set(__self__, "obs_location", obs_location)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if parent_table_id is not None:
            pulumi.set(__self__, "parent_table_id", parent_table_id)
        if parent_table_name is not None:
            pulumi.set(__self__, "parent_table_name", parent_table_name)
        if partition_conf is not None:
            pulumi.set(__self__, "partition_conf", partition_conf)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if related_logic_model_id is not None:
            pulumi.set(__self__, "related_logic_model_id", related_logic_model_id)
        if related_logic_model_name is not None:
            pulumi.set(__self__, "related_logic_model_name", related_logic_model_name)
        if related_logic_table_model_id is not None:
            pulumi.set(__self__, "related_logic_table_model_id", related_logic_table_model_id)
        if related_logic_table_model_name is not None:
            pulumi.set(__self__, "related_logic_table_model_name", related_logic_table_model_name)
        if relations is not None:
            pulumi.set(__self__, "relations", relations)
        if reversed is not None:
            pulumi.set(__self__, "reversed", reversed)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if table_type is not None:
            pulumi.set(__self__, "table_type", table_type)
        if use_recently_partition is not None:
            pulumi.set(__self__, "use_recently_partition", use_recently_partition)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelAttributeArgs']]]:
        """
        Specifies the attributes of table model.
        The attributes structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelAttributeArgs']]]):
        pulumi.set(self, "attributes", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the description of attribute.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the data connection type of table model.
        Changing this creates a new table model.
        + The valid values for physical model are: **DWS**, **DLI**, **MRS_HIVE**, **POSTGRESQL**, **MRS_SPARK**,
        **CLICKHOUSE**, **MYSQL**, **ORACLE**.
        + The valid value for logical model is **UNSPECIFIED**.
        """
        return pulumi.get(self, "dw_type")

    @dw_type.setter
    def dw_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dw_type", value)

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the model ID which the table model in.
        Changing this creates a new table model.
        """
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "model_id", value)

    @_builtins.property
    @pulumi.getter(name="physicalTableName")
    def physical_table_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the physical name of table model.
        """
        return pulumi.get(self, "physical_table_name")

    @physical_table_name.setter
    def physical_table_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "physical_table_name", value)

    @_builtins.property
    @pulumi.getter(name="subjectId")
    def subject_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the subject ID to which table model belongs.
        """
        return pulumi.get(self, "subject_id")

    @subject_id.setter
    def subject_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subject_id", value)

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of table model.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "table_name", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID which the table model in.
        Changing this creates a new table model.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code of attribute.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the compression level of table model.
        The valid values are **YES**, **NO**. It's **Required** for **DWS** table model.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compression", value)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced configs of table model.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data format of table model. Only for **DLI** table model.
        + The valid values for **MANAGED** are **Parquet**, **Carbon**.
        + The valid values for **EXTERNAL** are **Parquet**, **Carbon**, **CSV**, **ORC**, **JSON**, **Avro**.
        """
        return pulumi.get(self, "data_format")

    @data_format.setter
    def data_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_format", value)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database name of table model.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_name", value)

    @_builtins.property
    @pulumi.getter(name="delType")
    def del_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the delete type of table model. The valid value is **PHYSICAL_TABLE**.
        """
        return pulumi.get(self, "del_type")

    @del_type.setter
    def del_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "del_type", value)

    @_builtins.property
    @pulumi.getter(name="dirtyOutDatabase")
    def dirty_out_database(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database where to record the dirty data.
        """
        return pulumi.get(self, "dirty_out_database")

    @dirty_out_database.setter
    def dirty_out_database(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dirty_out_database", value)

    @_builtins.property
    @pulumi.getter(name="dirtyOutPrefix")
    def dirty_out_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the prefix of the table recording dirty data.
        """
        return pulumi.get(self, "dirty_out_prefix")

    @dirty_out_prefix.setter
    def dirty_out_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dirty_out_prefix", value)

    @_builtins.property
    @pulumi.getter(name="dirtyOutSuffix")
    def dirty_out_suffix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the suffix of the table recording dirty data.
        """
        return pulumi.get(self, "dirty_out_suffix")

    @dirty_out_suffix.setter
    def dirty_out_suffix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dirty_out_suffix", value)

    @_builtins.property
    @pulumi.getter(name="dirtyOutSwitch")
    def dirty_out_switch(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the dirty out switch of table model.
        """
        return pulumi.get(self, "dirty_out_switch")

    @dirty_out_switch.setter
    def dirty_out_switch(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dirty_out_switch", value)

    @_builtins.property
    @pulumi.getter
    def distribute(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the attribute is distributed by what. The valid values are **HASH**,
        **REPLICATION**.
        """
        return pulumi.get(self, "distribute")

    @distribute.setter
    def distribute(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distribute", value)

    @_builtins.property
    @pulumi.getter(name="distributeColumn")
    def distribute_column(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the **HASH** column the attribute distributed by.
        """
        return pulumi.get(self, "distribute_column")

    @distribute_column.setter
    def distribute_column(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distribute_column", value)

    @_builtins.property
    @pulumi.getter(name="dlfTaskId")
    def dlf_task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DLF task ID of table model.
        """
        return pulumi.get(self, "dlf_task_id")

    @dlf_task_id.setter
    def dlf_task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dlf_task_id", value)

    @_builtins.property
    @pulumi.getter(name="dwId")
    def dw_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection ID of table model.
        """
        return pulumi.get(self, "dw_id")

    @dw_id.setter
    def dw_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dw_id", value)

    @_builtins.property
    @pulumi.getter(name="dwName")
    def dw_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection name of table model.
        """
        return pulumi.get(self, "dw_name")

    @dw_name.setter
    def dw_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dw_name", value)

    @_builtins.property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingArgs']]]]:
        """
        Specifies the mappings of the attributes related.
        The mappings structure is documented below.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingArgs']]]]):
        pulumi.set(self, "mappings", value)

    @_builtins.property
    @pulumi.getter(name="obsLocation")
    def obs_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the obs location of table model.
        """
        return pulumi.get(self, "obs_location")

    @obs_location.setter
    def obs_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "obs_location", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the owner of table model.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter(name="parentTableId")
    def parent_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent table ID of table model.
        """
        return pulumi.get(self, "parent_table_id")

    @parent_table_id.setter
    def parent_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_table_id", value)

    @_builtins.property
    @pulumi.getter(name="parentTableName")
    def parent_table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent table name of table model.
        """
        return pulumi.get(self, "parent_table_name")

    @parent_table_name.setter
    def parent_table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_table_name", value)

    @_builtins.property
    @pulumi.getter(name="partitionConf")
    def partition_conf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the **WHERE** condition expression.
        """
        return pulumi.get(self, "partition_conf")

    @partition_conf.setter
    def partition_conf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "partition_conf", value)

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the queue name of table model.
        """
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to manage the table model.
        If omitted, the provider-level region will be used. Changing this creates a new table model.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicModelId")
    def related_logic_model_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic model ID of table model.
        """
        return pulumi.get(self, "related_logic_model_id")

    @related_logic_model_id.setter
    def related_logic_model_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_model_id", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicModelName")
    def related_logic_model_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic model name of table model.
        """
        return pulumi.get(self, "related_logic_model_name")

    @related_logic_model_name.setter
    def related_logic_model_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_model_name", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicTableModelId")
    def related_logic_table_model_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic table model ID of table model.
        """
        return pulumi.get(self, "related_logic_table_model_id")

    @related_logic_table_model_id.setter
    def related_logic_table_model_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_table_model_id", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicTableModelName")
    def related_logic_table_model_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic table model name of table model.
        """
        return pulumi.get(self, "related_logic_table_model_name")

    @related_logic_table_model_name.setter
    def related_logic_table_model_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_table_model_name", value)

    @_builtins.property
    @pulumi.getter
    def relations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationArgs']]]]:
        """
        Specifies the relations of table model.
        The relations structure is documented below.
        """
        return pulumi.get(self, "relations")

    @relations.setter
    def relations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationArgs']]]]):
        pulumi.set(self, "relations", value)

    @_builtins.property
    @pulumi.getter
    def reversed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the table model is reversed.

        <a name="block--attributes"></a>
        The `attributes` block supports:
        """
        return pulumi.get(self, "reversed")

    @reversed.setter
    def reversed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reversed", value)

    @_builtins.property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the schema of table model.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema", value)

    @_builtins.property
    @pulumi.getter(name="tableType")
    def table_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the table type of table model.
        + The valid values for **DWS** are **DWS_COLUMN**, **DWS_ROW**.
        + The valid values for **DLI** are **EXTERNAL**, **MANAGED**.
        + The valid values for **MRS_HIVE** are **HIVE_EXTERNAL_TABLE**, **HIVE_TABLE**.
        + The valid value for **POSTGRESQL** is **POSTGRESQL_TABLE**.
        + The valid values for **MRS_SPARK** are **HUDI_COW**, **HUDI_MOR**.
        + The valid value for **CLICKHOUSE** is **CLICKHOUSE_TABLE**.
        + The valid value for **MYSQL** is **MYSQL_TABLE**.
        + The valid value for **ORACLE** is **ORACLE_TABLE**.
        + The valid value for **UNSPECIFIED** is **LOGIC_TABLE**.
        """
        return pulumi.get(self, "table_type")

    @table_type.setter
    def table_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_type", value)

    @_builtins.property
    @pulumi.getter(name="useRecentlyPartition")
    def use_recently_partition(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the table model use recently partition or not.
        """
        return pulumi.get(self, "use_recently_partition")

    @use_recently_partition.setter
    def use_recently_partition(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_recently_partition", value)


@pulumi.input_type
class _ArchitectureTableModelState:
    def __init__(__self__, *,
                 attributes: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelAttributeArgs']]]] = None,
                 business_asset_status: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_path: Optional[pulumi.Input[_builtins.str]] = None,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 compression: Optional[pulumi.Input[_builtins.str]] = None,
                 configs: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 data_format: Optional[pulumi.Input[_builtins.str]] = None,
                 data_quality_status: Optional[pulumi.Input[_builtins.str]] = None,
                 db_name: Optional[pulumi.Input[_builtins.str]] = None,
                 del_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dev_physical_table_status: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_database: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_suffix: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_switch: Optional[pulumi.Input[_builtins.bool]] = None,
                 distribute: Optional[pulumi.Input[_builtins.str]] = None,
                 distribute_column: Optional[pulumi.Input[_builtins.str]] = None,
                 dlf_task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_name: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_type: Optional[pulumi.Input[_builtins.str]] = None,
                 env_type: Optional[pulumi.Input[_builtins.str]] = None,
                 extend_info: Optional[pulumi.Input[_builtins.str]] = None,
                 has_related_logic_table: Optional[pulumi.Input[_builtins.bool]] = None,
                 has_related_physical_table: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_partition: Optional[pulumi.Input[_builtins.bool]] = None,
                 logic_tb_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingArgs']]]] = None,
                 meta_data_link_status: Optional[pulumi.Input[_builtins.str]] = None,
                 model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_location: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_table_code: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_table_status: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_model_name: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_table_model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_table_model_name: Optional[pulumi.Input[_builtins.str]] = None,
                 relations: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationArgs']]]] = None,
                 reversed: Optional[pulumi.Input[_builtins.bool]] = None,
                 schema: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_id: Optional[pulumi.Input[_builtins.str]] = None,
                 summary_status: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tb_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 technical_asset_status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 use_recently_partition: Optional[pulumi.Input[_builtins.bool]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ArchitectureTableModel resources.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelAttributeArgs']]] attributes: Specifies the attributes of table model.
               The attributes structure is documented below.
        :param pulumi.Input[_builtins.str] business_asset_status: The business asset status of the table model.
        :param pulumi.Input[_builtins.str] catalog_path: The subject path.
        :param pulumi.Input[_builtins.str] code: Specifies the code of attribute.
        :param pulumi.Input[_builtins.str] compression: Specifies the compression level of table model.
               The valid values are **YES**, **NO**. It's **Required** for **DWS** table model.
        :param pulumi.Input[_builtins.str] configs: Specifies the advanced configs of table model.
        :param pulumi.Input[_builtins.str] created_at: The creating time of the mapping
        :param pulumi.Input[_builtins.str] created_by: The person creating the mapping.
        :param pulumi.Input[_builtins.str] data_format: Specifies the data format of table model. Only for **DLI** table model.
               + The valid values for **MANAGED** are **Parquet**, **Carbon**.
               + The valid values for **EXTERNAL** are **Parquet**, **Carbon**, **CSV**, **ORC**, **JSON**, **Avro**.
        :param pulumi.Input[_builtins.str] data_quality_status: The data quality status of the table model.
        :param pulumi.Input[_builtins.str] db_name: Specifies the database name of table model.
        :param pulumi.Input[_builtins.str] del_type: Specifies the delete type of table model. The valid value is **PHYSICAL_TABLE**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of attribute.
        :param pulumi.Input[_builtins.str] dev_physical_table_status: The dev physical table status of the table model.
        :param pulumi.Input[_builtins.str] dirty_out_database: Specifies the database where to record the dirty data.
        :param pulumi.Input[_builtins.str] dirty_out_prefix: Specifies the prefix of the table recording dirty data.
        :param pulumi.Input[_builtins.str] dirty_out_suffix: Specifies the suffix of the table recording dirty data.
        :param pulumi.Input[_builtins.bool] dirty_out_switch: Specifies the dirty out switch of table model.
        :param pulumi.Input[_builtins.str] distribute: Specifies the attribute is distributed by what. The valid values are **HASH**,
               **REPLICATION**.
        :param pulumi.Input[_builtins.str] distribute_column: Specifies the **HASH** column the attribute distributed by.
        :param pulumi.Input[_builtins.str] dlf_task_id: Specifies the DLF task ID of table model.
        :param pulumi.Input[_builtins.str] dw_id: Specifies the data connection ID of table model.
        :param pulumi.Input[_builtins.str] dw_name: Specifies the data connection name of table model.
        :param pulumi.Input[_builtins.str] dw_type: Specifies the data connection type of table model.
               Changing this creates a new table model.
               + The valid values for physical model are: **DWS**, **DLI**, **MRS_HIVE**, **POSTGRESQL**, **MRS_SPARK**,
               **CLICKHOUSE**, **MYSQL**, **ORACLE**.
               + The valid value for logical model is **UNSPECIFIED**.
        :param pulumi.Input[_builtins.str] env_type: The env type of the table model.
        :param pulumi.Input[_builtins.str] extend_info: The extend information of the table model.
        :param pulumi.Input[_builtins.bool] has_related_logic_table: The table model has related logic table or not.
        :param pulumi.Input[_builtins.bool] has_related_physical_table: The table model has related physical table or not.
        :param pulumi.Input[_builtins.bool] is_partition: The table model is partition or not.
        :param pulumi.Input[_builtins.str] logic_tb_guid: The globally unique ID of the logic table model, generating when the table model publish.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingArgs']]] mappings: Specifies the mappings of the attributes related.
               The mappings structure is documented below.
        :param pulumi.Input[_builtins.str] meta_data_link_status: The meta data link status the table model.
        :param pulumi.Input[_builtins.str] model_id: Specifies the model ID which the table model in.
               Changing this creates a new table model.
        :param pulumi.Input[_builtins.str] obs_location: Specifies the obs location of table model.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner of table model.
        :param pulumi.Input[_builtins.str] parent_table_code: The parent table code of the table model.
        :param pulumi.Input[_builtins.str] parent_table_id: Specifies the parent table ID of table model.
        :param pulumi.Input[_builtins.str] parent_table_name: Specifies the parent table name of table model.
        :param pulumi.Input[_builtins.str] partition_conf: Specifies the **WHERE** condition expression.
        :param pulumi.Input[_builtins.str] physical_table_name: Specifies the physical name of table model.
        :param pulumi.Input[_builtins.str] physical_table_status: The physical table status of the table model.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the queue name of table model.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the table model.
               If omitted, the provider-level region will be used. Changing this creates a new table model.
        :param pulumi.Input[_builtins.str] related_logic_model_id: Specifies the related logic model ID of table model.
        :param pulumi.Input[_builtins.str] related_logic_model_name: Specifies the related logic model name of table model.
        :param pulumi.Input[_builtins.str] related_logic_table_model_id: Specifies the related logic table model ID of table model.
        :param pulumi.Input[_builtins.str] related_logic_table_model_name: Specifies the related logic table model name of table model.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationArgs']]] relations: Specifies the relations of table model.
               The relations structure is documented below.
        :param pulumi.Input[_builtins.bool] reversed: Specifies whether the table model is reversed.
               
               <a name="block--attributes"></a>
               The `attributes` block supports:
        :param pulumi.Input[_builtins.str] schema: Specifies the schema of table model.
        :param pulumi.Input[_builtins.str] status: The status of the table model.
        :param pulumi.Input[_builtins.str] subject_id: Specifies the subject ID to which table model belongs.
        :param pulumi.Input[_builtins.str] summary_status: The summary status the table model.
        :param pulumi.Input[_builtins.str] table_name: Specifies the name of table model.
        :param pulumi.Input[_builtins.str] table_type: Specifies the table type of table model.
               + The valid values for **DWS** are **DWS_COLUMN**, **DWS_ROW**.
               + The valid values for **DLI** are **EXTERNAL**, **MANAGED**.
               + The valid values for **MRS_HIVE** are **HIVE_EXTERNAL_TABLE**, **HIVE_TABLE**.
               + The valid value for **POSTGRESQL** is **POSTGRESQL_TABLE**.
               + The valid values for **MRS_SPARK** are **HUDI_COW**, **HUDI_MOR**.
               + The valid value for **CLICKHOUSE** is **CLICKHOUSE_TABLE**.
               + The valid value for **MYSQL** is **MYSQL_TABLE**.
               + The valid value for **ORACLE** is **ORACLE_TABLE**.
               + The valid value for **UNSPECIFIED** is **LOGIC_TABLE**.
        :param pulumi.Input[_builtins.str] tb_guid: The globally unique ID of the table model, generating when the table model publish.
        :param pulumi.Input[_builtins.str] technical_asset_status: The technical asset status of the table model.
        :param pulumi.Input[_builtins.str] updated_at: The updating time of the mapping.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the mapping.
        :param pulumi.Input[_builtins.bool] use_recently_partition: Specifies the table model use recently partition or not.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the table model in.
               Changing this creates a new table model.
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if business_asset_status is not None:
            pulumi.set(__self__, "business_asset_status", business_asset_status)
        if catalog_path is not None:
            pulumi.set(__self__, "catalog_path", catalog_path)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if data_format is not None:
            pulumi.set(__self__, "data_format", data_format)
        if data_quality_status is not None:
            pulumi.set(__self__, "data_quality_status", data_quality_status)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if del_type is not None:
            pulumi.set(__self__, "del_type", del_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dev_physical_table_status is not None:
            pulumi.set(__self__, "dev_physical_table_status", dev_physical_table_status)
        if dirty_out_database is not None:
            pulumi.set(__self__, "dirty_out_database", dirty_out_database)
        if dirty_out_prefix is not None:
            pulumi.set(__self__, "dirty_out_prefix", dirty_out_prefix)
        if dirty_out_suffix is not None:
            pulumi.set(__self__, "dirty_out_suffix", dirty_out_suffix)
        if dirty_out_switch is not None:
            pulumi.set(__self__, "dirty_out_switch", dirty_out_switch)
        if distribute is not None:
            pulumi.set(__self__, "distribute", distribute)
        if distribute_column is not None:
            pulumi.set(__self__, "distribute_column", distribute_column)
        if dlf_task_id is not None:
            pulumi.set(__self__, "dlf_task_id", dlf_task_id)
        if dw_id is not None:
            pulumi.set(__self__, "dw_id", dw_id)
        if dw_name is not None:
            pulumi.set(__self__, "dw_name", dw_name)
        if dw_type is not None:
            pulumi.set(__self__, "dw_type", dw_type)
        if env_type is not None:
            pulumi.set(__self__, "env_type", env_type)
        if extend_info is not None:
            pulumi.set(__self__, "extend_info", extend_info)
        if has_related_logic_table is not None:
            pulumi.set(__self__, "has_related_logic_table", has_related_logic_table)
        if has_related_physical_table is not None:
            pulumi.set(__self__, "has_related_physical_table", has_related_physical_table)
        if is_partition is not None:
            pulumi.set(__self__, "is_partition", is_partition)
        if logic_tb_guid is not None:
            pulumi.set(__self__, "logic_tb_guid", logic_tb_guid)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if meta_data_link_status is not None:
            pulumi.set(__self__, "meta_data_link_status", meta_data_link_status)
        if model_id is not None:
            pulumi.set(__self__, "model_id", model_id)
        if obs_location is not None:
            pulumi.set(__self__, "obs_location", obs_location)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if parent_table_code is not None:
            pulumi.set(__self__, "parent_table_code", parent_table_code)
        if parent_table_id is not None:
            pulumi.set(__self__, "parent_table_id", parent_table_id)
        if parent_table_name is not None:
            pulumi.set(__self__, "parent_table_name", parent_table_name)
        if partition_conf is not None:
            pulumi.set(__self__, "partition_conf", partition_conf)
        if physical_table_name is not None:
            pulumi.set(__self__, "physical_table_name", physical_table_name)
        if physical_table_status is not None:
            pulumi.set(__self__, "physical_table_status", physical_table_status)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if related_logic_model_id is not None:
            pulumi.set(__self__, "related_logic_model_id", related_logic_model_id)
        if related_logic_model_name is not None:
            pulumi.set(__self__, "related_logic_model_name", related_logic_model_name)
        if related_logic_table_model_id is not None:
            pulumi.set(__self__, "related_logic_table_model_id", related_logic_table_model_id)
        if related_logic_table_model_name is not None:
            pulumi.set(__self__, "related_logic_table_model_name", related_logic_table_model_name)
        if relations is not None:
            pulumi.set(__self__, "relations", relations)
        if reversed is not None:
            pulumi.set(__self__, "reversed", reversed)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subject_id is not None:
            pulumi.set(__self__, "subject_id", subject_id)
        if summary_status is not None:
            pulumi.set(__self__, "summary_status", summary_status)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if table_type is not None:
            pulumi.set(__self__, "table_type", table_type)
        if tb_guid is not None:
            pulumi.set(__self__, "tb_guid", tb_guid)
        if technical_asset_status is not None:
            pulumi.set(__self__, "technical_asset_status", technical_asset_status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if use_recently_partition is not None:
            pulumi.set(__self__, "use_recently_partition", use_recently_partition)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelAttributeArgs']]]]:
        """
        Specifies the attributes of table model.
        The attributes structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelAttributeArgs']]]]):
        pulumi.set(self, "attributes", value)

    @_builtins.property
    @pulumi.getter(name="businessAssetStatus")
    def business_asset_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The business asset status of the table model.
        """
        return pulumi.get(self, "business_asset_status")

    @business_asset_status.setter
    def business_asset_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "business_asset_status", value)

    @_builtins.property
    @pulumi.getter(name="catalogPath")
    def catalog_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject path.
        """
        return pulumi.get(self, "catalog_path")

    @catalog_path.setter
    def catalog_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_path", value)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code of attribute.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the compression level of table model.
        The valid values are **YES**, **NO**. It's **Required** for **DWS** table model.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compression", value)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced configs of table model.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creating time of the mapping
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person creating the mapping.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data format of table model. Only for **DLI** table model.
        + The valid values for **MANAGED** are **Parquet**, **Carbon**.
        + The valid values for **EXTERNAL** are **Parquet**, **Carbon**, **CSV**, **ORC**, **JSON**, **Avro**.
        """
        return pulumi.get(self, "data_format")

    @data_format.setter
    def data_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_format", value)

    @_builtins.property
    @pulumi.getter(name="dataQualityStatus")
    def data_quality_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The data quality status of the table model.
        """
        return pulumi.get(self, "data_quality_status")

    @data_quality_status.setter
    def data_quality_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_quality_status", value)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database name of table model.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_name", value)

    @_builtins.property
    @pulumi.getter(name="delType")
    def del_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the delete type of table model. The valid value is **PHYSICAL_TABLE**.
        """
        return pulumi.get(self, "del_type")

    @del_type.setter
    def del_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "del_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of attribute.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="devPhysicalTableStatus")
    def dev_physical_table_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The dev physical table status of the table model.
        """
        return pulumi.get(self, "dev_physical_table_status")

    @dev_physical_table_status.setter
    def dev_physical_table_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dev_physical_table_status", value)

    @_builtins.property
    @pulumi.getter(name="dirtyOutDatabase")
    def dirty_out_database(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database where to record the dirty data.
        """
        return pulumi.get(self, "dirty_out_database")

    @dirty_out_database.setter
    def dirty_out_database(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dirty_out_database", value)

    @_builtins.property
    @pulumi.getter(name="dirtyOutPrefix")
    def dirty_out_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the prefix of the table recording dirty data.
        """
        return pulumi.get(self, "dirty_out_prefix")

    @dirty_out_prefix.setter
    def dirty_out_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dirty_out_prefix", value)

    @_builtins.property
    @pulumi.getter(name="dirtyOutSuffix")
    def dirty_out_suffix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the suffix of the table recording dirty data.
        """
        return pulumi.get(self, "dirty_out_suffix")

    @dirty_out_suffix.setter
    def dirty_out_suffix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dirty_out_suffix", value)

    @_builtins.property
    @pulumi.getter(name="dirtyOutSwitch")
    def dirty_out_switch(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the dirty out switch of table model.
        """
        return pulumi.get(self, "dirty_out_switch")

    @dirty_out_switch.setter
    def dirty_out_switch(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dirty_out_switch", value)

    @_builtins.property
    @pulumi.getter
    def distribute(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the attribute is distributed by what. The valid values are **HASH**,
        **REPLICATION**.
        """
        return pulumi.get(self, "distribute")

    @distribute.setter
    def distribute(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distribute", value)

    @_builtins.property
    @pulumi.getter(name="distributeColumn")
    def distribute_column(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the **HASH** column the attribute distributed by.
        """
        return pulumi.get(self, "distribute_column")

    @distribute_column.setter
    def distribute_column(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distribute_column", value)

    @_builtins.property
    @pulumi.getter(name="dlfTaskId")
    def dlf_task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DLF task ID of table model.
        """
        return pulumi.get(self, "dlf_task_id")

    @dlf_task_id.setter
    def dlf_task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dlf_task_id", value)

    @_builtins.property
    @pulumi.getter(name="dwId")
    def dw_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection ID of table model.
        """
        return pulumi.get(self, "dw_id")

    @dw_id.setter
    def dw_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dw_id", value)

    @_builtins.property
    @pulumi.getter(name="dwName")
    def dw_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection name of table model.
        """
        return pulumi.get(self, "dw_name")

    @dw_name.setter
    def dw_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dw_name", value)

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data connection type of table model.
        Changing this creates a new table model.
        + The valid values for physical model are: **DWS**, **DLI**, **MRS_HIVE**, **POSTGRESQL**, **MRS_SPARK**,
        **CLICKHOUSE**, **MYSQL**, **ORACLE**.
        + The valid value for logical model is **UNSPECIFIED**.
        """
        return pulumi.get(self, "dw_type")

    @dw_type.setter
    def dw_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dw_type", value)

    @_builtins.property
    @pulumi.getter(name="envType")
    def env_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The env type of the table model.
        """
        return pulumi.get(self, "env_type")

    @env_type.setter
    def env_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "env_type", value)

    @_builtins.property
    @pulumi.getter(name="extendInfo")
    def extend_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The extend information of the table model.
        """
        return pulumi.get(self, "extend_info")

    @extend_info.setter
    def extend_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "extend_info", value)

    @_builtins.property
    @pulumi.getter(name="hasRelatedLogicTable")
    def has_related_logic_table(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The table model has related logic table or not.
        """
        return pulumi.get(self, "has_related_logic_table")

    @has_related_logic_table.setter
    def has_related_logic_table(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "has_related_logic_table", value)

    @_builtins.property
    @pulumi.getter(name="hasRelatedPhysicalTable")
    def has_related_physical_table(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The table model has related physical table or not.
        """
        return pulumi.get(self, "has_related_physical_table")

    @has_related_physical_table.setter
    def has_related_physical_table(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "has_related_physical_table", value)

    @_builtins.property
    @pulumi.getter(name="isPartition")
    def is_partition(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The table model is partition or not.
        """
        return pulumi.get(self, "is_partition")

    @is_partition.setter
    def is_partition(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_partition", value)

    @_builtins.property
    @pulumi.getter(name="logicTbGuid")
    def logic_tb_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique ID of the logic table model, generating when the table model publish.
        """
        return pulumi.get(self, "logic_tb_guid")

    @logic_tb_guid.setter
    def logic_tb_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logic_tb_guid", value)

    @_builtins.property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingArgs']]]]:
        """
        Specifies the mappings of the attributes related.
        The mappings structure is documented below.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingArgs']]]]):
        pulumi.set(self, "mappings", value)

    @_builtins.property
    @pulumi.getter(name="metaDataLinkStatus")
    def meta_data_link_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The meta data link status the table model.
        """
        return pulumi.get(self, "meta_data_link_status")

    @meta_data_link_status.setter
    def meta_data_link_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "meta_data_link_status", value)

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the model ID which the table model in.
        Changing this creates a new table model.
        """
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "model_id", value)

    @_builtins.property
    @pulumi.getter(name="obsLocation")
    def obs_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the obs location of table model.
        """
        return pulumi.get(self, "obs_location")

    @obs_location.setter
    def obs_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "obs_location", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the owner of table model.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter(name="parentTableCode")
    def parent_table_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The parent table code of the table model.
        """
        return pulumi.get(self, "parent_table_code")

    @parent_table_code.setter
    def parent_table_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_table_code", value)

    @_builtins.property
    @pulumi.getter(name="parentTableId")
    def parent_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent table ID of table model.
        """
        return pulumi.get(self, "parent_table_id")

    @parent_table_id.setter
    def parent_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_table_id", value)

    @_builtins.property
    @pulumi.getter(name="parentTableName")
    def parent_table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent table name of table model.
        """
        return pulumi.get(self, "parent_table_name")

    @parent_table_name.setter
    def parent_table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_table_name", value)

    @_builtins.property
    @pulumi.getter(name="partitionConf")
    def partition_conf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the **WHERE** condition expression.
        """
        return pulumi.get(self, "partition_conf")

    @partition_conf.setter
    def partition_conf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "partition_conf", value)

    @_builtins.property
    @pulumi.getter(name="physicalTableName")
    def physical_table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the physical name of table model.
        """
        return pulumi.get(self, "physical_table_name")

    @physical_table_name.setter
    def physical_table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "physical_table_name", value)

    @_builtins.property
    @pulumi.getter(name="physicalTableStatus")
    def physical_table_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The physical table status of the table model.
        """
        return pulumi.get(self, "physical_table_status")

    @physical_table_status.setter
    def physical_table_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "physical_table_status", value)

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the queue name of table model.
        """
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to manage the table model.
        If omitted, the provider-level region will be used. Changing this creates a new table model.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicModelId")
    def related_logic_model_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic model ID of table model.
        """
        return pulumi.get(self, "related_logic_model_id")

    @related_logic_model_id.setter
    def related_logic_model_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_model_id", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicModelName")
    def related_logic_model_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic model name of table model.
        """
        return pulumi.get(self, "related_logic_model_name")

    @related_logic_model_name.setter
    def related_logic_model_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_model_name", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicTableModelId")
    def related_logic_table_model_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic table model ID of table model.
        """
        return pulumi.get(self, "related_logic_table_model_id")

    @related_logic_table_model_id.setter
    def related_logic_table_model_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_table_model_id", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicTableModelName")
    def related_logic_table_model_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic table model name of table model.
        """
        return pulumi.get(self, "related_logic_table_model_name")

    @related_logic_table_model_name.setter
    def related_logic_table_model_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_table_model_name", value)

    @_builtins.property
    @pulumi.getter
    def relations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationArgs']]]]:
        """
        Specifies the relations of table model.
        The relations structure is documented below.
        """
        return pulumi.get(self, "relations")

    @relations.setter
    def relations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationArgs']]]]):
        pulumi.set(self, "relations", value)

    @_builtins.property
    @pulumi.getter
    def reversed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the table model is reversed.

        <a name="block--attributes"></a>
        The `attributes` block supports:
        """
        return pulumi.get(self, "reversed")

    @reversed.setter
    def reversed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reversed", value)

    @_builtins.property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the schema of table model.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the table model.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subjectId")
    def subject_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subject ID to which table model belongs.
        """
        return pulumi.get(self, "subject_id")

    @subject_id.setter
    def subject_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject_id", value)

    @_builtins.property
    @pulumi.getter(name="summaryStatus")
    def summary_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The summary status the table model.
        """
        return pulumi.get(self, "summary_status")

    @summary_status.setter
    def summary_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "summary_status", value)

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of table model.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_name", value)

    @_builtins.property
    @pulumi.getter(name="tableType")
    def table_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the table type of table model.
        + The valid values for **DWS** are **DWS_COLUMN**, **DWS_ROW**.
        + The valid values for **DLI** are **EXTERNAL**, **MANAGED**.
        + The valid values for **MRS_HIVE** are **HIVE_EXTERNAL_TABLE**, **HIVE_TABLE**.
        + The valid value for **POSTGRESQL** is **POSTGRESQL_TABLE**.
        + The valid values for **MRS_SPARK** are **HUDI_COW**, **HUDI_MOR**.
        + The valid value for **CLICKHOUSE** is **CLICKHOUSE_TABLE**.
        + The valid value for **MYSQL** is **MYSQL_TABLE**.
        + The valid value for **ORACLE** is **ORACLE_TABLE**.
        + The valid value for **UNSPECIFIED** is **LOGIC_TABLE**.
        """
        return pulumi.get(self, "table_type")

    @table_type.setter
    def table_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_type", value)

    @_builtins.property
    @pulumi.getter(name="tbGuid")
    def tb_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique ID of the table model, generating when the table model publish.
        """
        return pulumi.get(self, "tb_guid")

    @tb_guid.setter
    def tb_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tb_guid", value)

    @_builtins.property
    @pulumi.getter(name="technicalAssetStatus")
    def technical_asset_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The technical asset status of the table model.
        """
        return pulumi.get(self, "technical_asset_status")

    @technical_asset_status.setter
    def technical_asset_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "technical_asset_status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updating time of the mapping.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person updating the mapping.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="useRecentlyPartition")
    def use_recently_partition(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the table model use recently partition or not.
        """
        return pulumi.get(self, "use_recently_partition")

    @use_recently_partition.setter
    def use_recently_partition(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_recently_partition", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID which the table model in.
        Changing this creates a new table model.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/architectureTableModel:ArchitectureTableModel")
class ArchitectureTableModel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelAttributeArgs', 'ArchitectureTableModelAttributeArgsDict']]]]] = None,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 compression: Optional[pulumi.Input[_builtins.str]] = None,
                 configs: Optional[pulumi.Input[_builtins.str]] = None,
                 data_format: Optional[pulumi.Input[_builtins.str]] = None,
                 db_name: Optional[pulumi.Input[_builtins.str]] = None,
                 del_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_database: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_suffix: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_switch: Optional[pulumi.Input[_builtins.bool]] = None,
                 distribute: Optional[pulumi.Input[_builtins.str]] = None,
                 distribute_column: Optional[pulumi.Input[_builtins.str]] = None,
                 dlf_task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_name: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_type: Optional[pulumi.Input[_builtins.str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelMappingArgs', 'ArchitectureTableModelMappingArgsDict']]]]] = None,
                 model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_location: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_model_name: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_table_model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_table_model_name: Optional[pulumi.Input[_builtins.str]] = None,
                 relations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelRelationArgs', 'ArchitectureTableModelRelationArgsDict']]]]] = None,
                 reversed: Optional[pulumi.Input[_builtins.bool]] = None,
                 schema: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_id: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table_type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_recently_partition: Optional[pulumi.Input[_builtins.bool]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages DataArts Architecture table model resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        model_id = config.require_object("modelId")
        model_name = config.require_object("modelName")
        subject_id = config.require_object("subjectId")
        table_model_name = config.require_object("tableModelName")
        table_model_id = config.require_object("tableModelId")
        attribute_name = config.require_object("attributeName")
        attribute_id = config.require_object("attributeId")
        relation_name = config.require_object("relationName")
        mapping_name = config.require_object("mappingName")
        attribute_names = config.require_object("attributeNames")
        attribute_ids = config.require_object("attributeIds")
        transform_expression = config.require_object("transformExpression")
        test = huaweicloud.dataartsstudio.ArchitectureTableModel("test",
            workspace_id=workspace_id,
            model_id=model_id,
            subject_id=subject_id,
            physical_table_name=table_model_name,
            table_name=table_model_name,
            description="demo",
            dw_type="UNSPECIFIED",
            attributes=[{
                "name": "key",
                "name_en": "key_en",
                "data_type": "STRING",
                "ordinal": "1",
            }],
            relations=[{
                "name": relation_name,
                "source_type": "ONE",
                "target_table_id": table_model_id,
                "target_table_name": table_model_name,
                "target_type": "ONE",
                "mappings": [{
                    "source_field_name": attribute_name,
                    "target_field_id": attribute_id,
                    "target_field_name": attribute_name,
                }],
            }],
            mappings=[{
                "name": mapping_name,
                "src_model_id": model_id,
                "src_model_name": model_name,
                "source_tables": [{
                    "table1_id": table_model_id,
                    "table1_name": table_model_name,
                    "table2_id": table_model_id,
                    "table2_name": table_model_name,
                    "join_type": "LEFT",
                    "join_fields": [{
                        "field1_id": attribute_id,
                        "field1_name": attribute_name,
                        "field2_id": attribute_id,
                        "field2_name": attribute_name,
                    }],
                }],
                "source_fields": [{
                    "target_field_name": attribute_name,
                    "field_ids": attribute_ids,
                    "field_names": attribute_names,
                    "transform_expression": transform_expression,
                }],
            }])
        ```

        ## Import

        DataArts Architecture table model can be imported using `<workspace_id>/<id>`, e.g.

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureTableModel:ArchitectureTableModel test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelAttributeArgs', 'ArchitectureTableModelAttributeArgsDict']]]] attributes: Specifies the attributes of table model.
               The attributes structure is documented below.
        :param pulumi.Input[_builtins.str] code: Specifies the code of attribute.
        :param pulumi.Input[_builtins.str] compression: Specifies the compression level of table model.
               The valid values are **YES**, **NO**. It's **Required** for **DWS** table model.
        :param pulumi.Input[_builtins.str] configs: Specifies the advanced configs of table model.
        :param pulumi.Input[_builtins.str] data_format: Specifies the data format of table model. Only for **DLI** table model.
               + The valid values for **MANAGED** are **Parquet**, **Carbon**.
               + The valid values for **EXTERNAL** are **Parquet**, **Carbon**, **CSV**, **ORC**, **JSON**, **Avro**.
        :param pulumi.Input[_builtins.str] db_name: Specifies the database name of table model.
        :param pulumi.Input[_builtins.str] del_type: Specifies the delete type of table model. The valid value is **PHYSICAL_TABLE**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of attribute.
        :param pulumi.Input[_builtins.str] dirty_out_database: Specifies the database where to record the dirty data.
        :param pulumi.Input[_builtins.str] dirty_out_prefix: Specifies the prefix of the table recording dirty data.
        :param pulumi.Input[_builtins.str] dirty_out_suffix: Specifies the suffix of the table recording dirty data.
        :param pulumi.Input[_builtins.bool] dirty_out_switch: Specifies the dirty out switch of table model.
        :param pulumi.Input[_builtins.str] distribute: Specifies the attribute is distributed by what. The valid values are **HASH**,
               **REPLICATION**.
        :param pulumi.Input[_builtins.str] distribute_column: Specifies the **HASH** column the attribute distributed by.
        :param pulumi.Input[_builtins.str] dlf_task_id: Specifies the DLF task ID of table model.
        :param pulumi.Input[_builtins.str] dw_id: Specifies the data connection ID of table model.
        :param pulumi.Input[_builtins.str] dw_name: Specifies the data connection name of table model.
        :param pulumi.Input[_builtins.str] dw_type: Specifies the data connection type of table model.
               Changing this creates a new table model.
               + The valid values for physical model are: **DWS**, **DLI**, **MRS_HIVE**, **POSTGRESQL**, **MRS_SPARK**,
               **CLICKHOUSE**, **MYSQL**, **ORACLE**.
               + The valid value for logical model is **UNSPECIFIED**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelMappingArgs', 'ArchitectureTableModelMappingArgsDict']]]] mappings: Specifies the mappings of the attributes related.
               The mappings structure is documented below.
        :param pulumi.Input[_builtins.str] model_id: Specifies the model ID which the table model in.
               Changing this creates a new table model.
        :param pulumi.Input[_builtins.str] obs_location: Specifies the obs location of table model.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner of table model.
        :param pulumi.Input[_builtins.str] parent_table_id: Specifies the parent table ID of table model.
        :param pulumi.Input[_builtins.str] parent_table_name: Specifies the parent table name of table model.
        :param pulumi.Input[_builtins.str] partition_conf: Specifies the **WHERE** condition expression.
        :param pulumi.Input[_builtins.str] physical_table_name: Specifies the physical name of table model.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the queue name of table model.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the table model.
               If omitted, the provider-level region will be used. Changing this creates a new table model.
        :param pulumi.Input[_builtins.str] related_logic_model_id: Specifies the related logic model ID of table model.
        :param pulumi.Input[_builtins.str] related_logic_model_name: Specifies the related logic model name of table model.
        :param pulumi.Input[_builtins.str] related_logic_table_model_id: Specifies the related logic table model ID of table model.
        :param pulumi.Input[_builtins.str] related_logic_table_model_name: Specifies the related logic table model name of table model.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelRelationArgs', 'ArchitectureTableModelRelationArgsDict']]]] relations: Specifies the relations of table model.
               The relations structure is documented below.
        :param pulumi.Input[_builtins.bool] reversed: Specifies whether the table model is reversed.
               
               <a name="block--attributes"></a>
               The `attributes` block supports:
        :param pulumi.Input[_builtins.str] schema: Specifies the schema of table model.
        :param pulumi.Input[_builtins.str] subject_id: Specifies the subject ID to which table model belongs.
        :param pulumi.Input[_builtins.str] table_name: Specifies the name of table model.
        :param pulumi.Input[_builtins.str] table_type: Specifies the table type of table model.
               + The valid values for **DWS** are **DWS_COLUMN**, **DWS_ROW**.
               + The valid values for **DLI** are **EXTERNAL**, **MANAGED**.
               + The valid values for **MRS_HIVE** are **HIVE_EXTERNAL_TABLE**, **HIVE_TABLE**.
               + The valid value for **POSTGRESQL** is **POSTGRESQL_TABLE**.
               + The valid values for **MRS_SPARK** are **HUDI_COW**, **HUDI_MOR**.
               + The valid value for **CLICKHOUSE** is **CLICKHOUSE_TABLE**.
               + The valid value for **MYSQL** is **MYSQL_TABLE**.
               + The valid value for **ORACLE** is **ORACLE_TABLE**.
               + The valid value for **UNSPECIFIED** is **LOGIC_TABLE**.
        :param pulumi.Input[_builtins.bool] use_recently_partition: Specifies the table model use recently partition or not.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the table model in.
               Changing this creates a new table model.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ArchitectureTableModelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages DataArts Architecture table model resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        model_id = config.require_object("modelId")
        model_name = config.require_object("modelName")
        subject_id = config.require_object("subjectId")
        table_model_name = config.require_object("tableModelName")
        table_model_id = config.require_object("tableModelId")
        attribute_name = config.require_object("attributeName")
        attribute_id = config.require_object("attributeId")
        relation_name = config.require_object("relationName")
        mapping_name = config.require_object("mappingName")
        attribute_names = config.require_object("attributeNames")
        attribute_ids = config.require_object("attributeIds")
        transform_expression = config.require_object("transformExpression")
        test = huaweicloud.dataartsstudio.ArchitectureTableModel("test",
            workspace_id=workspace_id,
            model_id=model_id,
            subject_id=subject_id,
            physical_table_name=table_model_name,
            table_name=table_model_name,
            description="demo",
            dw_type="UNSPECIFIED",
            attributes=[{
                "name": "key",
                "name_en": "key_en",
                "data_type": "STRING",
                "ordinal": "1",
            }],
            relations=[{
                "name": relation_name,
                "source_type": "ONE",
                "target_table_id": table_model_id,
                "target_table_name": table_model_name,
                "target_type": "ONE",
                "mappings": [{
                    "source_field_name": attribute_name,
                    "target_field_id": attribute_id,
                    "target_field_name": attribute_name,
                }],
            }],
            mappings=[{
                "name": mapping_name,
                "src_model_id": model_id,
                "src_model_name": model_name,
                "source_tables": [{
                    "table1_id": table_model_id,
                    "table1_name": table_model_name,
                    "table2_id": table_model_id,
                    "table2_name": table_model_name,
                    "join_type": "LEFT",
                    "join_fields": [{
                        "field1_id": attribute_id,
                        "field1_name": attribute_name,
                        "field2_id": attribute_id,
                        "field2_name": attribute_name,
                    }],
                }],
                "source_fields": [{
                    "target_field_name": attribute_name,
                    "field_ids": attribute_ids,
                    "field_names": attribute_names,
                    "transform_expression": transform_expression,
                }],
            }])
        ```

        ## Import

        DataArts Architecture table model can be imported using `<workspace_id>/<id>`, e.g.

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureTableModel:ArchitectureTableModel test <workspace_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param ArchitectureTableModelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ArchitectureTableModelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelAttributeArgs', 'ArchitectureTableModelAttributeArgsDict']]]]] = None,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 compression: Optional[pulumi.Input[_builtins.str]] = None,
                 configs: Optional[pulumi.Input[_builtins.str]] = None,
                 data_format: Optional[pulumi.Input[_builtins.str]] = None,
                 db_name: Optional[pulumi.Input[_builtins.str]] = None,
                 del_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_database: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_suffix: Optional[pulumi.Input[_builtins.str]] = None,
                 dirty_out_switch: Optional[pulumi.Input[_builtins.bool]] = None,
                 distribute: Optional[pulumi.Input[_builtins.str]] = None,
                 distribute_column: Optional[pulumi.Input[_builtins.str]] = None,
                 dlf_task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_name: Optional[pulumi.Input[_builtins.str]] = None,
                 dw_type: Optional[pulumi.Input[_builtins.str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelMappingArgs', 'ArchitectureTableModelMappingArgsDict']]]]] = None,
                 model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_location: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_model_name: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_table_model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_table_model_name: Optional[pulumi.Input[_builtins.str]] = None,
                 relations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelRelationArgs', 'ArchitectureTableModelRelationArgsDict']]]]] = None,
                 reversed: Optional[pulumi.Input[_builtins.bool]] = None,
                 schema: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_id: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table_type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_recently_partition: Optional[pulumi.Input[_builtins.bool]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ArchitectureTableModelArgs.__new__(ArchitectureTableModelArgs)

            if attributes is None and not opts.urn:
                raise TypeError("Missing required property 'attributes'")
            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["code"] = code
            __props__.__dict__["compression"] = compression
            __props__.__dict__["configs"] = configs
            __props__.__dict__["data_format"] = data_format
            __props__.__dict__["db_name"] = db_name
            __props__.__dict__["del_type"] = del_type
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["dirty_out_database"] = dirty_out_database
            __props__.__dict__["dirty_out_prefix"] = dirty_out_prefix
            __props__.__dict__["dirty_out_suffix"] = dirty_out_suffix
            __props__.__dict__["dirty_out_switch"] = dirty_out_switch
            __props__.__dict__["distribute"] = distribute
            __props__.__dict__["distribute_column"] = distribute_column
            __props__.__dict__["dlf_task_id"] = dlf_task_id
            __props__.__dict__["dw_id"] = dw_id
            __props__.__dict__["dw_name"] = dw_name
            if dw_type is None and not opts.urn:
                raise TypeError("Missing required property 'dw_type'")
            __props__.__dict__["dw_type"] = dw_type
            __props__.__dict__["mappings"] = mappings
            if model_id is None and not opts.urn:
                raise TypeError("Missing required property 'model_id'")
            __props__.__dict__["model_id"] = model_id
            __props__.__dict__["obs_location"] = obs_location
            __props__.__dict__["owner"] = owner
            __props__.__dict__["parent_table_id"] = parent_table_id
            __props__.__dict__["parent_table_name"] = parent_table_name
            __props__.__dict__["partition_conf"] = partition_conf
            if physical_table_name is None and not opts.urn:
                raise TypeError("Missing required property 'physical_table_name'")
            __props__.__dict__["physical_table_name"] = physical_table_name
            __props__.__dict__["queue_name"] = queue_name
            __props__.__dict__["region"] = region
            __props__.__dict__["related_logic_model_id"] = related_logic_model_id
            __props__.__dict__["related_logic_model_name"] = related_logic_model_name
            __props__.__dict__["related_logic_table_model_id"] = related_logic_table_model_id
            __props__.__dict__["related_logic_table_model_name"] = related_logic_table_model_name
            __props__.__dict__["relations"] = relations
            __props__.__dict__["reversed"] = reversed
            __props__.__dict__["schema"] = schema
            if subject_id is None and not opts.urn:
                raise TypeError("Missing required property 'subject_id'")
            __props__.__dict__["subject_id"] = subject_id
            if table_name is None and not opts.urn:
                raise TypeError("Missing required property 'table_name'")
            __props__.__dict__["table_name"] = table_name
            __props__.__dict__["table_type"] = table_type
            __props__.__dict__["use_recently_partition"] = use_recently_partition
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["business_asset_status"] = None
            __props__.__dict__["catalog_path"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["data_quality_status"] = None
            __props__.__dict__["dev_physical_table_status"] = None
            __props__.__dict__["env_type"] = None
            __props__.__dict__["extend_info"] = None
            __props__.__dict__["has_related_logic_table"] = None
            __props__.__dict__["has_related_physical_table"] = None
            __props__.__dict__["is_partition"] = None
            __props__.__dict__["logic_tb_guid"] = None
            __props__.__dict__["meta_data_link_status"] = None
            __props__.__dict__["parent_table_code"] = None
            __props__.__dict__["physical_table_status"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["summary_status"] = None
            __props__.__dict__["tb_guid"] = None
            __props__.__dict__["technical_asset_status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(ArchitectureTableModel, __self__).__init__(
            'huaweicloud:DataArtsStudio/architectureTableModel:ArchitectureTableModel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelAttributeArgs', 'ArchitectureTableModelAttributeArgsDict']]]]] = None,
            business_asset_status: Optional[pulumi.Input[_builtins.str]] = None,
            catalog_path: Optional[pulumi.Input[_builtins.str]] = None,
            code: Optional[pulumi.Input[_builtins.str]] = None,
            compression: Optional[pulumi.Input[_builtins.str]] = None,
            configs: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            data_format: Optional[pulumi.Input[_builtins.str]] = None,
            data_quality_status: Optional[pulumi.Input[_builtins.str]] = None,
            db_name: Optional[pulumi.Input[_builtins.str]] = None,
            del_type: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dev_physical_table_status: Optional[pulumi.Input[_builtins.str]] = None,
            dirty_out_database: Optional[pulumi.Input[_builtins.str]] = None,
            dirty_out_prefix: Optional[pulumi.Input[_builtins.str]] = None,
            dirty_out_suffix: Optional[pulumi.Input[_builtins.str]] = None,
            dirty_out_switch: Optional[pulumi.Input[_builtins.bool]] = None,
            distribute: Optional[pulumi.Input[_builtins.str]] = None,
            distribute_column: Optional[pulumi.Input[_builtins.str]] = None,
            dlf_task_id: Optional[pulumi.Input[_builtins.str]] = None,
            dw_id: Optional[pulumi.Input[_builtins.str]] = None,
            dw_name: Optional[pulumi.Input[_builtins.str]] = None,
            dw_type: Optional[pulumi.Input[_builtins.str]] = None,
            env_type: Optional[pulumi.Input[_builtins.str]] = None,
            extend_info: Optional[pulumi.Input[_builtins.str]] = None,
            has_related_logic_table: Optional[pulumi.Input[_builtins.bool]] = None,
            has_related_physical_table: Optional[pulumi.Input[_builtins.bool]] = None,
            is_partition: Optional[pulumi.Input[_builtins.bool]] = None,
            logic_tb_guid: Optional[pulumi.Input[_builtins.str]] = None,
            mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelMappingArgs', 'ArchitectureTableModelMappingArgsDict']]]]] = None,
            meta_data_link_status: Optional[pulumi.Input[_builtins.str]] = None,
            model_id: Optional[pulumi.Input[_builtins.str]] = None,
            obs_location: Optional[pulumi.Input[_builtins.str]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            parent_table_code: Optional[pulumi.Input[_builtins.str]] = None,
            parent_table_id: Optional[pulumi.Input[_builtins.str]] = None,
            parent_table_name: Optional[pulumi.Input[_builtins.str]] = None,
            partition_conf: Optional[pulumi.Input[_builtins.str]] = None,
            physical_table_name: Optional[pulumi.Input[_builtins.str]] = None,
            physical_table_status: Optional[pulumi.Input[_builtins.str]] = None,
            queue_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            related_logic_model_id: Optional[pulumi.Input[_builtins.str]] = None,
            related_logic_model_name: Optional[pulumi.Input[_builtins.str]] = None,
            related_logic_table_model_id: Optional[pulumi.Input[_builtins.str]] = None,
            related_logic_table_model_name: Optional[pulumi.Input[_builtins.str]] = None,
            relations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelRelationArgs', 'ArchitectureTableModelRelationArgsDict']]]]] = None,
            reversed: Optional[pulumi.Input[_builtins.bool]] = None,
            schema: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subject_id: Optional[pulumi.Input[_builtins.str]] = None,
            summary_status: Optional[pulumi.Input[_builtins.str]] = None,
            table_name: Optional[pulumi.Input[_builtins.str]] = None,
            table_type: Optional[pulumi.Input[_builtins.str]] = None,
            tb_guid: Optional[pulumi.Input[_builtins.str]] = None,
            technical_asset_status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            use_recently_partition: Optional[pulumi.Input[_builtins.bool]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ArchitectureTableModel':
        """
        Get an existing ArchitectureTableModel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelAttributeArgs', 'ArchitectureTableModelAttributeArgsDict']]]] attributes: Specifies the attributes of table model.
               The attributes structure is documented below.
        :param pulumi.Input[_builtins.str] business_asset_status: The business asset status of the table model.
        :param pulumi.Input[_builtins.str] catalog_path: The subject path.
        :param pulumi.Input[_builtins.str] code: Specifies the code of attribute.
        :param pulumi.Input[_builtins.str] compression: Specifies the compression level of table model.
               The valid values are **YES**, **NO**. It's **Required** for **DWS** table model.
        :param pulumi.Input[_builtins.str] configs: Specifies the advanced configs of table model.
        :param pulumi.Input[_builtins.str] created_at: The creating time of the mapping
        :param pulumi.Input[_builtins.str] created_by: The person creating the mapping.
        :param pulumi.Input[_builtins.str] data_format: Specifies the data format of table model. Only for **DLI** table model.
               + The valid values for **MANAGED** are **Parquet**, **Carbon**.
               + The valid values for **EXTERNAL** are **Parquet**, **Carbon**, **CSV**, **ORC**, **JSON**, **Avro**.
        :param pulumi.Input[_builtins.str] data_quality_status: The data quality status of the table model.
        :param pulumi.Input[_builtins.str] db_name: Specifies the database name of table model.
        :param pulumi.Input[_builtins.str] del_type: Specifies the delete type of table model. The valid value is **PHYSICAL_TABLE**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of attribute.
        :param pulumi.Input[_builtins.str] dev_physical_table_status: The dev physical table status of the table model.
        :param pulumi.Input[_builtins.str] dirty_out_database: Specifies the database where to record the dirty data.
        :param pulumi.Input[_builtins.str] dirty_out_prefix: Specifies the prefix of the table recording dirty data.
        :param pulumi.Input[_builtins.str] dirty_out_suffix: Specifies the suffix of the table recording dirty data.
        :param pulumi.Input[_builtins.bool] dirty_out_switch: Specifies the dirty out switch of table model.
        :param pulumi.Input[_builtins.str] distribute: Specifies the attribute is distributed by what. The valid values are **HASH**,
               **REPLICATION**.
        :param pulumi.Input[_builtins.str] distribute_column: Specifies the **HASH** column the attribute distributed by.
        :param pulumi.Input[_builtins.str] dlf_task_id: Specifies the DLF task ID of table model.
        :param pulumi.Input[_builtins.str] dw_id: Specifies the data connection ID of table model.
        :param pulumi.Input[_builtins.str] dw_name: Specifies the data connection name of table model.
        :param pulumi.Input[_builtins.str] dw_type: Specifies the data connection type of table model.
               Changing this creates a new table model.
               + The valid values for physical model are: **DWS**, **DLI**, **MRS_HIVE**, **POSTGRESQL**, **MRS_SPARK**,
               **CLICKHOUSE**, **MYSQL**, **ORACLE**.
               + The valid value for logical model is **UNSPECIFIED**.
        :param pulumi.Input[_builtins.str] env_type: The env type of the table model.
        :param pulumi.Input[_builtins.str] extend_info: The extend information of the table model.
        :param pulumi.Input[_builtins.bool] has_related_logic_table: The table model has related logic table or not.
        :param pulumi.Input[_builtins.bool] has_related_physical_table: The table model has related physical table or not.
        :param pulumi.Input[_builtins.bool] is_partition: The table model is partition or not.
        :param pulumi.Input[_builtins.str] logic_tb_guid: The globally unique ID of the logic table model, generating when the table model publish.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelMappingArgs', 'ArchitectureTableModelMappingArgsDict']]]] mappings: Specifies the mappings of the attributes related.
               The mappings structure is documented below.
        :param pulumi.Input[_builtins.str] meta_data_link_status: The meta data link status the table model.
        :param pulumi.Input[_builtins.str] model_id: Specifies the model ID which the table model in.
               Changing this creates a new table model.
        :param pulumi.Input[_builtins.str] obs_location: Specifies the obs location of table model.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner of table model.
        :param pulumi.Input[_builtins.str] parent_table_code: The parent table code of the table model.
        :param pulumi.Input[_builtins.str] parent_table_id: Specifies the parent table ID of table model.
        :param pulumi.Input[_builtins.str] parent_table_name: Specifies the parent table name of table model.
        :param pulumi.Input[_builtins.str] partition_conf: Specifies the **WHERE** condition expression.
        :param pulumi.Input[_builtins.str] physical_table_name: Specifies the physical name of table model.
        :param pulumi.Input[_builtins.str] physical_table_status: The physical table status of the table model.
        :param pulumi.Input[_builtins.str] queue_name: Specifies the queue name of table model.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the table model.
               If omitted, the provider-level region will be used. Changing this creates a new table model.
        :param pulumi.Input[_builtins.str] related_logic_model_id: Specifies the related logic model ID of table model.
        :param pulumi.Input[_builtins.str] related_logic_model_name: Specifies the related logic model name of table model.
        :param pulumi.Input[_builtins.str] related_logic_table_model_id: Specifies the related logic table model ID of table model.
        :param pulumi.Input[_builtins.str] related_logic_table_model_name: Specifies the related logic table model name of table model.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ArchitectureTableModelRelationArgs', 'ArchitectureTableModelRelationArgsDict']]]] relations: Specifies the relations of table model.
               The relations structure is documented below.
        :param pulumi.Input[_builtins.bool] reversed: Specifies whether the table model is reversed.
               
               <a name="block--attributes"></a>
               The `attributes` block supports:
        :param pulumi.Input[_builtins.str] schema: Specifies the schema of table model.
        :param pulumi.Input[_builtins.str] status: The status of the table model.
        :param pulumi.Input[_builtins.str] subject_id: Specifies the subject ID to which table model belongs.
        :param pulumi.Input[_builtins.str] summary_status: The summary status the table model.
        :param pulumi.Input[_builtins.str] table_name: Specifies the name of table model.
        :param pulumi.Input[_builtins.str] table_type: Specifies the table type of table model.
               + The valid values for **DWS** are **DWS_COLUMN**, **DWS_ROW**.
               + The valid values for **DLI** are **EXTERNAL**, **MANAGED**.
               + The valid values for **MRS_HIVE** are **HIVE_EXTERNAL_TABLE**, **HIVE_TABLE**.
               + The valid value for **POSTGRESQL** is **POSTGRESQL_TABLE**.
               + The valid values for **MRS_SPARK** are **HUDI_COW**, **HUDI_MOR**.
               + The valid value for **CLICKHOUSE** is **CLICKHOUSE_TABLE**.
               + The valid value for **MYSQL** is **MYSQL_TABLE**.
               + The valid value for **ORACLE** is **ORACLE_TABLE**.
               + The valid value for **UNSPECIFIED** is **LOGIC_TABLE**.
        :param pulumi.Input[_builtins.str] tb_guid: The globally unique ID of the table model, generating when the table model publish.
        :param pulumi.Input[_builtins.str] technical_asset_status: The technical asset status of the table model.
        :param pulumi.Input[_builtins.str] updated_at: The updating time of the mapping.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the mapping.
        :param pulumi.Input[_builtins.bool] use_recently_partition: Specifies the table model use recently partition or not.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the table model in.
               Changing this creates a new table model.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ArchitectureTableModelState.__new__(_ArchitectureTableModelState)

        __props__.__dict__["attributes"] = attributes
        __props__.__dict__["business_asset_status"] = business_asset_status
        __props__.__dict__["catalog_path"] = catalog_path
        __props__.__dict__["code"] = code
        __props__.__dict__["compression"] = compression
        __props__.__dict__["configs"] = configs
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["data_format"] = data_format
        __props__.__dict__["data_quality_status"] = data_quality_status
        __props__.__dict__["db_name"] = db_name
        __props__.__dict__["del_type"] = del_type
        __props__.__dict__["description"] = description
        __props__.__dict__["dev_physical_table_status"] = dev_physical_table_status
        __props__.__dict__["dirty_out_database"] = dirty_out_database
        __props__.__dict__["dirty_out_prefix"] = dirty_out_prefix
        __props__.__dict__["dirty_out_suffix"] = dirty_out_suffix
        __props__.__dict__["dirty_out_switch"] = dirty_out_switch
        __props__.__dict__["distribute"] = distribute
        __props__.__dict__["distribute_column"] = distribute_column
        __props__.__dict__["dlf_task_id"] = dlf_task_id
        __props__.__dict__["dw_id"] = dw_id
        __props__.__dict__["dw_name"] = dw_name
        __props__.__dict__["dw_type"] = dw_type
        __props__.__dict__["env_type"] = env_type
        __props__.__dict__["extend_info"] = extend_info
        __props__.__dict__["has_related_logic_table"] = has_related_logic_table
        __props__.__dict__["has_related_physical_table"] = has_related_physical_table
        __props__.__dict__["is_partition"] = is_partition
        __props__.__dict__["logic_tb_guid"] = logic_tb_guid
        __props__.__dict__["mappings"] = mappings
        __props__.__dict__["meta_data_link_status"] = meta_data_link_status
        __props__.__dict__["model_id"] = model_id
        __props__.__dict__["obs_location"] = obs_location
        __props__.__dict__["owner"] = owner
        __props__.__dict__["parent_table_code"] = parent_table_code
        __props__.__dict__["parent_table_id"] = parent_table_id
        __props__.__dict__["parent_table_name"] = parent_table_name
        __props__.__dict__["partition_conf"] = partition_conf
        __props__.__dict__["physical_table_name"] = physical_table_name
        __props__.__dict__["physical_table_status"] = physical_table_status
        __props__.__dict__["queue_name"] = queue_name
        __props__.__dict__["region"] = region
        __props__.__dict__["related_logic_model_id"] = related_logic_model_id
        __props__.__dict__["related_logic_model_name"] = related_logic_model_name
        __props__.__dict__["related_logic_table_model_id"] = related_logic_table_model_id
        __props__.__dict__["related_logic_table_model_name"] = related_logic_table_model_name
        __props__.__dict__["relations"] = relations
        __props__.__dict__["reversed"] = reversed
        __props__.__dict__["schema"] = schema
        __props__.__dict__["status"] = status
        __props__.__dict__["subject_id"] = subject_id
        __props__.__dict__["summary_status"] = summary_status
        __props__.__dict__["table_name"] = table_name
        __props__.__dict__["table_type"] = table_type
        __props__.__dict__["tb_guid"] = tb_guid
        __props__.__dict__["technical_asset_status"] = technical_asset_status
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["use_recently_partition"] = use_recently_partition
        __props__.__dict__["workspace_id"] = workspace_id
        return ArchitectureTableModel(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Sequence['outputs.ArchitectureTableModelAttribute']]:
        """
        Specifies the attributes of table model.
        The attributes structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter(name="businessAssetStatus")
    def business_asset_status(self) -> pulumi.Output[_builtins.str]:
        """
        The business asset status of the table model.
        """
        return pulumi.get(self, "business_asset_status")

    @_builtins.property
    @pulumi.getter(name="catalogPath")
    def catalog_path(self) -> pulumi.Output[_builtins.str]:
        """
        The subject path.
        """
        return pulumi.get(self, "catalog_path")

    @_builtins.property
    @pulumi.getter
    def code(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the code of attribute.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def compression(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the compression level of table model.
        The valid values are **YES**, **NO**. It's **Required** for **DWS** table model.
        """
        return pulumi.get(self, "compression")

    @_builtins.property
    @pulumi.getter
    def configs(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the advanced configs of table model.
        """
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creating time of the mapping
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The person creating the mapping.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the data format of table model. Only for **DLI** table model.
        + The valid values for **MANAGED** are **Parquet**, **Carbon**.
        + The valid values for **EXTERNAL** are **Parquet**, **Carbon**, **CSV**, **ORC**, **JSON**, **Avro**.
        """
        return pulumi.get(self, "data_format")

    @_builtins.property
    @pulumi.getter(name="dataQualityStatus")
    def data_quality_status(self) -> pulumi.Output[_builtins.str]:
        """
        The data quality status of the table model.
        """
        return pulumi.get(self, "data_quality_status")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the database name of table model.
        """
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter(name="delType")
    def del_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the delete type of table model. The valid value is **PHYSICAL_TABLE**.
        """
        return pulumi.get(self, "del_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of attribute.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="devPhysicalTableStatus")
    def dev_physical_table_status(self) -> pulumi.Output[_builtins.str]:
        """
        The dev physical table status of the table model.
        """
        return pulumi.get(self, "dev_physical_table_status")

    @_builtins.property
    @pulumi.getter(name="dirtyOutDatabase")
    def dirty_out_database(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the database where to record the dirty data.
        """
        return pulumi.get(self, "dirty_out_database")

    @_builtins.property
    @pulumi.getter(name="dirtyOutPrefix")
    def dirty_out_prefix(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the prefix of the table recording dirty data.
        """
        return pulumi.get(self, "dirty_out_prefix")

    @_builtins.property
    @pulumi.getter(name="dirtyOutSuffix")
    def dirty_out_suffix(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the suffix of the table recording dirty data.
        """
        return pulumi.get(self, "dirty_out_suffix")

    @_builtins.property
    @pulumi.getter(name="dirtyOutSwitch")
    def dirty_out_switch(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies the dirty out switch of table model.
        """
        return pulumi.get(self, "dirty_out_switch")

    @_builtins.property
    @pulumi.getter
    def distribute(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the attribute is distributed by what. The valid values are **HASH**,
        **REPLICATION**.
        """
        return pulumi.get(self, "distribute")

    @_builtins.property
    @pulumi.getter(name="distributeColumn")
    def distribute_column(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the **HASH** column the attribute distributed by.
        """
        return pulumi.get(self, "distribute_column")

    @_builtins.property
    @pulumi.getter(name="dlfTaskId")
    def dlf_task_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DLF task ID of table model.
        """
        return pulumi.get(self, "dlf_task_id")

    @_builtins.property
    @pulumi.getter(name="dwId")
    def dw_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the data connection ID of table model.
        """
        return pulumi.get(self, "dw_id")

    @_builtins.property
    @pulumi.getter(name="dwName")
    def dw_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the data connection name of table model.
        """
        return pulumi.get(self, "dw_name")

    @_builtins.property
    @pulumi.getter(name="dwType")
    def dw_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the data connection type of table model.
        Changing this creates a new table model.
        + The valid values for physical model are: **DWS**, **DLI**, **MRS_HIVE**, **POSTGRESQL**, **MRS_SPARK**,
        **CLICKHOUSE**, **MYSQL**, **ORACLE**.
        + The valid value for logical model is **UNSPECIFIED**.
        """
        return pulumi.get(self, "dw_type")

    @_builtins.property
    @pulumi.getter(name="envType")
    def env_type(self) -> pulumi.Output[_builtins.str]:
        """
        The env type of the table model.
        """
        return pulumi.get(self, "env_type")

    @_builtins.property
    @pulumi.getter(name="extendInfo")
    def extend_info(self) -> pulumi.Output[_builtins.str]:
        """
        The extend information of the table model.
        """
        return pulumi.get(self, "extend_info")

    @_builtins.property
    @pulumi.getter(name="hasRelatedLogicTable")
    def has_related_logic_table(self) -> pulumi.Output[_builtins.bool]:
        """
        The table model has related logic table or not.
        """
        return pulumi.get(self, "has_related_logic_table")

    @_builtins.property
    @pulumi.getter(name="hasRelatedPhysicalTable")
    def has_related_physical_table(self) -> pulumi.Output[_builtins.bool]:
        """
        The table model has related physical table or not.
        """
        return pulumi.get(self, "has_related_physical_table")

    @_builtins.property
    @pulumi.getter(name="isPartition")
    def is_partition(self) -> pulumi.Output[_builtins.bool]:
        """
        The table model is partition or not.
        """
        return pulumi.get(self, "is_partition")

    @_builtins.property
    @pulumi.getter(name="logicTbGuid")
    def logic_tb_guid(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique ID of the logic table model, generating when the table model publish.
        """
        return pulumi.get(self, "logic_tb_guid")

    @_builtins.property
    @pulumi.getter
    def mappings(self) -> pulumi.Output[Optional[Sequence['outputs.ArchitectureTableModelMapping']]]:
        """
        Specifies the mappings of the attributes related.
        The mappings structure is documented below.
        """
        return pulumi.get(self, "mappings")

    @_builtins.property
    @pulumi.getter(name="metaDataLinkStatus")
    def meta_data_link_status(self) -> pulumi.Output[_builtins.str]:
        """
        The meta data link status the table model.
        """
        return pulumi.get(self, "meta_data_link_status")

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the model ID which the table model in.
        Changing this creates a new table model.
        """
        return pulumi.get(self, "model_id")

    @_builtins.property
    @pulumi.getter(name="obsLocation")
    def obs_location(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the obs location of table model.
        """
        return pulumi.get(self, "obs_location")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the owner of table model.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="parentTableCode")
    def parent_table_code(self) -> pulumi.Output[_builtins.str]:
        """
        The parent table code of the table model.
        """
        return pulumi.get(self, "parent_table_code")

    @_builtins.property
    @pulumi.getter(name="parentTableId")
    def parent_table_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the parent table ID of table model.
        """
        return pulumi.get(self, "parent_table_id")

    @_builtins.property
    @pulumi.getter(name="parentTableName")
    def parent_table_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the parent table name of table model.
        """
        return pulumi.get(self, "parent_table_name")

    @_builtins.property
    @pulumi.getter(name="partitionConf")
    def partition_conf(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the **WHERE** condition expression.
        """
        return pulumi.get(self, "partition_conf")

    @_builtins.property
    @pulumi.getter(name="physicalTableName")
    def physical_table_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the physical name of table model.
        """
        return pulumi.get(self, "physical_table_name")

    @_builtins.property
    @pulumi.getter(name="physicalTableStatus")
    def physical_table_status(self) -> pulumi.Output[_builtins.str]:
        """
        The physical table status of the table model.
        """
        return pulumi.get(self, "physical_table_status")

    @_builtins.property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the queue name of table model.
        """
        return pulumi.get(self, "queue_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to manage the table model.
        If omitted, the provider-level region will be used. Changing this creates a new table model.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="relatedLogicModelId")
    def related_logic_model_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the related logic model ID of table model.
        """
        return pulumi.get(self, "related_logic_model_id")

    @_builtins.property
    @pulumi.getter(name="relatedLogicModelName")
    def related_logic_model_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the related logic model name of table model.
        """
        return pulumi.get(self, "related_logic_model_name")

    @_builtins.property
    @pulumi.getter(name="relatedLogicTableModelId")
    def related_logic_table_model_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the related logic table model ID of table model.
        """
        return pulumi.get(self, "related_logic_table_model_id")

    @_builtins.property
    @pulumi.getter(name="relatedLogicTableModelName")
    def related_logic_table_model_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the related logic table model name of table model.
        """
        return pulumi.get(self, "related_logic_table_model_name")

    @_builtins.property
    @pulumi.getter
    def relations(self) -> pulumi.Output[Optional[Sequence['outputs.ArchitectureTableModelRelation']]]:
        """
        Specifies the relations of table model.
        The relations structure is documented below.
        """
        return pulumi.get(self, "relations")

    @_builtins.property
    @pulumi.getter
    def reversed(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the table model is reversed.

        <a name="block--attributes"></a>
        The `attributes` block supports:
        """
        return pulumi.get(self, "reversed")

    @_builtins.property
    @pulumi.getter
    def schema(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the schema of table model.
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the table model.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subjectId")
    def subject_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the subject ID to which table model belongs.
        """
        return pulumi.get(self, "subject_id")

    @_builtins.property
    @pulumi.getter(name="summaryStatus")
    def summary_status(self) -> pulumi.Output[_builtins.str]:
        """
        The summary status the table model.
        """
        return pulumi.get(self, "summary_status")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of table model.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter(name="tableType")
    def table_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the table type of table model.
        + The valid values for **DWS** are **DWS_COLUMN**, **DWS_ROW**.
        + The valid values for **DLI** are **EXTERNAL**, **MANAGED**.
        + The valid values for **MRS_HIVE** are **HIVE_EXTERNAL_TABLE**, **HIVE_TABLE**.
        + The valid value for **POSTGRESQL** is **POSTGRESQL_TABLE**.
        + The valid values for **MRS_SPARK** are **HUDI_COW**, **HUDI_MOR**.
        + The valid value for **CLICKHOUSE** is **CLICKHOUSE_TABLE**.
        + The valid value for **MYSQL** is **MYSQL_TABLE**.
        + The valid value for **ORACLE** is **ORACLE_TABLE**.
        + The valid value for **UNSPECIFIED** is **LOGIC_TABLE**.
        """
        return pulumi.get(self, "table_type")

    @_builtins.property
    @pulumi.getter(name="tbGuid")
    def tb_guid(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique ID of the table model, generating when the table model publish.
        """
        return pulumi.get(self, "tb_guid")

    @_builtins.property
    @pulumi.getter(name="technicalAssetStatus")
    def technical_asset_status(self) -> pulumi.Output[_builtins.str]:
        """
        The technical asset status of the table model.
        """
        return pulumi.get(self, "technical_asset_status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The updating time of the mapping.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The person updating the mapping.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="useRecentlyPartition")
    def use_recently_partition(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies the table model use recently partition or not.
        """
        return pulumi.get(self, "use_recently_partition")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID which the table model in.
        Changing this creates a new table model.
        """
        return pulumi.get(self, "workspace_id")

