# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ArchitectureBatchPublishBizInfoArgs',
    'ArchitectureBatchPublishBizInfoArgsDict',
    'ArchitectureBatchPublishmentBizInfoArgs',
    'ArchitectureBatchPublishmentBizInfoArgsDict',
    'ArchitectureBatchUnpublishBizInfoArgs',
    'ArchitectureBatchUnpublishBizInfoArgsDict',
    'ArchitectureCodeTableFieldArgs',
    'ArchitectureCodeTableFieldArgsDict',
    'ArchitectureCodeTableValuesValueArgs',
    'ArchitectureCodeTableValuesValueArgsDict',
    'ArchitectureDataStandardNewBizArgs',
    'ArchitectureDataStandardNewBizArgsDict',
    'ArchitectureDataStandardTemplateCustomFieldArgs',
    'ArchitectureDataStandardTemplateCustomFieldArgsDict',
    'ArchitectureDataStandardTemplateOptionalFieldArgs',
    'ArchitectureDataStandardTemplateOptionalFieldArgsDict',
    'ArchitectureDataStandardValueArgs',
    'ArchitectureDataStandardValueArgsDict',
    'ArchitectureTableModelAttributeArgs',
    'ArchitectureTableModelAttributeArgsDict',
    'ArchitectureTableModelMappingArgs',
    'ArchitectureTableModelMappingArgsDict',
    'ArchitectureTableModelMappingSourceFieldArgs',
    'ArchitectureTableModelMappingSourceFieldArgsDict',
    'ArchitectureTableModelMappingSourceTableArgs',
    'ArchitectureTableModelMappingSourceTableArgsDict',
    'ArchitectureTableModelMappingSourceTableJoinFieldArgs',
    'ArchitectureTableModelMappingSourceTableJoinFieldArgsDict',
    'ArchitectureTableModelRelationArgs',
    'ArchitectureTableModelRelationArgsDict',
    'ArchitectureTableModelRelationMappingArgs',
    'ArchitectureTableModelRelationMappingArgsDict',
    'DataserviceApiBackendConfigArgs',
    'DataserviceApiBackendConfigArgsDict',
    'DataserviceApiBackendConfigBackendParamArgs',
    'DataserviceApiBackendConfigBackendParamArgsDict',
    'DataserviceApiBackendConfigConstantParamArgs',
    'DataserviceApiBackendConfigConstantParamArgsDict',
    'DataserviceApiDatasourceConfigArgs',
    'DataserviceApiDatasourceConfigArgsDict',
    'DataserviceApiDatasourceConfigBackendParamArgs',
    'DataserviceApiDatasourceConfigBackendParamArgsDict',
    'DataserviceApiDatasourceConfigOrderParamArgs',
    'DataserviceApiDatasourceConfigOrderParamArgsDict',
    'DataserviceApiDatasourceConfigResponseParamArgs',
    'DataserviceApiDatasourceConfigResponseParamArgsDict',
    'DataserviceApiHostArgs',
    'DataserviceApiHostArgsDict',
    'DataserviceApiRequestParamArgs',
    'DataserviceApiRequestParamArgsDict',
    'FactoryJobBasicConfigArgs',
    'FactoryJobBasicConfigArgsDict',
    'FactoryJobNodeArgs',
    'FactoryJobNodeArgsDict',
    'FactoryJobNodeConditionArgs',
    'FactoryJobNodeConditionArgsDict',
    'FactoryJobNodeCronTriggerArgs',
    'FactoryJobNodeCronTriggerArgsDict',
    'FactoryJobNodeCronTriggerDependJobsArgs',
    'FactoryJobNodeCronTriggerDependJobsArgsDict',
    'FactoryJobNodeEventTriggerArgs',
    'FactoryJobNodeEventTriggerArgsDict',
    'FactoryJobNodeLocationArgs',
    'FactoryJobNodeLocationArgsDict',
    'FactoryJobNodePropertyArgs',
    'FactoryJobNodePropertyArgsDict',
    'FactoryJobParamArgs',
    'FactoryJobParamArgsDict',
    'FactoryJobScheduleArgs',
    'FactoryJobScheduleArgsDict',
    'FactoryJobScheduleCronArgs',
    'FactoryJobScheduleCronArgsDict',
    'FactoryJobScheduleCronDependJobsArgs',
    'FactoryJobScheduleCronDependJobsArgsDict',
    'FactoryJobScheduleEventArgs',
    'FactoryJobScheduleEventArgsDict',
    'FactoryResourceDependPackageArgs',
    'FactoryResourceDependPackageArgsDict',
    'FactoryScriptApproverArgs',
    'FactoryScriptApproverArgsDict',
]

MYPY = False

if not MYPY:
    class ArchitectureBatchPublishBizInfoArgsDict(TypedDict):
        biz_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the object to be published.
        Changing this creates a new resource.
        """
        biz_type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the object to be published.
        Changing this creates a new resource.
        The valid values are as follows:
        + **AGGREGATION_LOGIC_TABLE**
        + **ATOMIC_INDEX**
        + **ATOMIC_METRIC**
        + **BIZ_CATALOG**
        + **BIZ_METRIC**
        + **CODE_TABLE**
        + **COMMON_CONDITION**
        + **COMPOUND_METRIC**
        + **CONDITION_GROUP**
        + **DEGENERATE_DIMENSION**
        + **DERIVATIVE_INDEX**
        + **DERIVED_METRIC**
        + **DIMENSION**
        + **DIMENSION_ATTRIBUTE**
        + **DIMENSION_HIERARCHIES**
        + **DIMENSION_LOGIC_TABLE**
        + **DIMENSION_TABLE_ATTRIBUTE**
        + **DIRECTORY**
        + **FACT_ATTRIBUTE**
        + **FACT_DIMENSION**
        + **FACT_LOGIC_TABLE**
        + **FACT_MEASURE**
        + **FUNCTION**
        + **INFO_ARCH**
        + **MODEL**
        + **QUALITY_RULE**
        + **SECRECY_LEVEL**
        + **STANDARD_ELEMENT**
        + **STANDARD_ELEMENT_TEMPLATE**
        + **SUBJECT**
        + **SUMMARY_DIMENSION_ATTRIBUTE**
        + **SUMMARY_INDEX**
        + **SUMMARY_TIME**
        + **TABLE_MODEL**
        + **TABLE_MODEL_ATTRIBUTE**
        + **TABLE_MODEL_LOGIC**
        + **TABLE_TYPE**
        + **TAG**
        + **TIME_CONDITION**
        """
elif False:
    ArchitectureBatchPublishBizInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureBatchPublishBizInfoArgs:
    def __init__(__self__, *,
                 biz_id: pulumi.Input[_builtins.str],
                 biz_type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] biz_id: Specifies the ID of the object to be published.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] biz_type: Specifies the type of the object to be published.
               Changing this creates a new resource.
               The valid values are as follows:
               + **AGGREGATION_LOGIC_TABLE**
               + **ATOMIC_INDEX**
               + **ATOMIC_METRIC**
               + **BIZ_CATALOG**
               + **BIZ_METRIC**
               + **CODE_TABLE**
               + **COMMON_CONDITION**
               + **COMPOUND_METRIC**
               + **CONDITION_GROUP**
               + **DEGENERATE_DIMENSION**
               + **DERIVATIVE_INDEX**
               + **DERIVED_METRIC**
               + **DIMENSION**
               + **DIMENSION_ATTRIBUTE**
               + **DIMENSION_HIERARCHIES**
               + **DIMENSION_LOGIC_TABLE**
               + **DIMENSION_TABLE_ATTRIBUTE**
               + **DIRECTORY**
               + **FACT_ATTRIBUTE**
               + **FACT_DIMENSION**
               + **FACT_LOGIC_TABLE**
               + **FACT_MEASURE**
               + **FUNCTION**
               + **INFO_ARCH**
               + **MODEL**
               + **QUALITY_RULE**
               + **SECRECY_LEVEL**
               + **STANDARD_ELEMENT**
               + **STANDARD_ELEMENT_TEMPLATE**
               + **SUBJECT**
               + **SUMMARY_DIMENSION_ATTRIBUTE**
               + **SUMMARY_INDEX**
               + **SUMMARY_TIME**
               + **TABLE_MODEL**
               + **TABLE_MODEL_ATTRIBUTE**
               + **TABLE_MODEL_LOGIC**
               + **TABLE_TYPE**
               + **TAG**
               + **TIME_CONDITION**
        """
        pulumi.set(__self__, "biz_id", biz_id)
        pulumi.set(__self__, "biz_type", biz_type)

    @_builtins.property
    @pulumi.getter(name="bizId")
    def biz_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the object to be published.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "biz_id")

    @biz_id.setter
    def biz_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "biz_id", value)

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the object to be published.
        Changing this creates a new resource.
        The valid values are as follows:
        + **AGGREGATION_LOGIC_TABLE**
        + **ATOMIC_INDEX**
        + **ATOMIC_METRIC**
        + **BIZ_CATALOG**
        + **BIZ_METRIC**
        + **CODE_TABLE**
        + **COMMON_CONDITION**
        + **COMPOUND_METRIC**
        + **CONDITION_GROUP**
        + **DEGENERATE_DIMENSION**
        + **DERIVATIVE_INDEX**
        + **DERIVED_METRIC**
        + **DIMENSION**
        + **DIMENSION_ATTRIBUTE**
        + **DIMENSION_HIERARCHIES**
        + **DIMENSION_LOGIC_TABLE**
        + **DIMENSION_TABLE_ATTRIBUTE**
        + **DIRECTORY**
        + **FACT_ATTRIBUTE**
        + **FACT_DIMENSION**
        + **FACT_LOGIC_TABLE**
        + **FACT_MEASURE**
        + **FUNCTION**
        + **INFO_ARCH**
        + **MODEL**
        + **QUALITY_RULE**
        + **SECRECY_LEVEL**
        + **STANDARD_ELEMENT**
        + **STANDARD_ELEMENT_TEMPLATE**
        + **SUBJECT**
        + **SUMMARY_DIMENSION_ATTRIBUTE**
        + **SUMMARY_INDEX**
        + **SUMMARY_TIME**
        + **TABLE_MODEL**
        + **TABLE_MODEL_ATTRIBUTE**
        + **TABLE_MODEL_LOGIC**
        + **TABLE_TYPE**
        + **TAG**
        + **TIME_CONDITION**
        """
        return pulumi.get(self, "biz_type")

    @biz_type.setter
    def biz_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "biz_type", value)


if not MYPY:
    class ArchitectureBatchPublishmentBizInfoArgsDict(TypedDict):
        biz_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the object to be published.
        Changing this creates a new resource.
        """
        biz_type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the object to be published.
        Changing this creates a new resource.
        The valid values are as follows:
        + **AGGREGATION_LOGIC_TABLE**
        + **ATOMIC_INDEX**
        + **ATOMIC_METRIC**
        + **BIZ_CATALOG**
        + **BIZ_METRIC**
        + **CODE_TABLE**
        + **COMMON_CONDITION**
        + **COMPOUND_METRIC**
        + **CONDITION_GROUP**
        + **DEGENERATE_DIMENSION**
        + **DERIVATIVE_INDEX**
        + **DERIVED_METRIC**
        + **DIMENSION**
        + **DIMENSION_ATTRIBUTE**
        + **DIMENSION_HIERARCHIES**
        + **DIMENSION_LOGIC_TABLE**
        + **DIMENSION_TABLE_ATTRIBUTE**
        + **DIRECTORY**
        + **FACT_ATTRIBUTE**
        + **FACT_DIMENSION**
        + **FACT_LOGIC_TABLE**
        + **FACT_MEASURE**
        + **FUNCTION**
        + **INFO_ARCH**
        + **MODEL**
        + **QUALITY_RULE**
        + **SECRECY_LEVEL**
        + **STANDARD_ELEMENT**
        + **STANDARD_ELEMENT_TEMPLATE**
        + **SUBJECT**
        + **SUMMARY_DIMENSION_ATTRIBUTE**
        + **SUMMARY_INDEX**
        + **SUMMARY_TIME**
        + **TABLE_MODEL**
        + **TABLE_MODEL_ATTRIBUTE**
        + **TABLE_MODEL_LOGIC**
        + **TABLE_TYPE**
        + **TAG**
        + **TIME_CONDITION**
        """
elif False:
    ArchitectureBatchPublishmentBizInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureBatchPublishmentBizInfoArgs:
    def __init__(__self__, *,
                 biz_id: pulumi.Input[_builtins.str],
                 biz_type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] biz_id: Specifies the ID of the object to be published.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] biz_type: Specifies the type of the object to be published.
               Changing this creates a new resource.
               The valid values are as follows:
               + **AGGREGATION_LOGIC_TABLE**
               + **ATOMIC_INDEX**
               + **ATOMIC_METRIC**
               + **BIZ_CATALOG**
               + **BIZ_METRIC**
               + **CODE_TABLE**
               + **COMMON_CONDITION**
               + **COMPOUND_METRIC**
               + **CONDITION_GROUP**
               + **DEGENERATE_DIMENSION**
               + **DERIVATIVE_INDEX**
               + **DERIVED_METRIC**
               + **DIMENSION**
               + **DIMENSION_ATTRIBUTE**
               + **DIMENSION_HIERARCHIES**
               + **DIMENSION_LOGIC_TABLE**
               + **DIMENSION_TABLE_ATTRIBUTE**
               + **DIRECTORY**
               + **FACT_ATTRIBUTE**
               + **FACT_DIMENSION**
               + **FACT_LOGIC_TABLE**
               + **FACT_MEASURE**
               + **FUNCTION**
               + **INFO_ARCH**
               + **MODEL**
               + **QUALITY_RULE**
               + **SECRECY_LEVEL**
               + **STANDARD_ELEMENT**
               + **STANDARD_ELEMENT_TEMPLATE**
               + **SUBJECT**
               + **SUMMARY_DIMENSION_ATTRIBUTE**
               + **SUMMARY_INDEX**
               + **SUMMARY_TIME**
               + **TABLE_MODEL**
               + **TABLE_MODEL_ATTRIBUTE**
               + **TABLE_MODEL_LOGIC**
               + **TABLE_TYPE**
               + **TAG**
               + **TIME_CONDITION**
        """
        pulumi.set(__self__, "biz_id", biz_id)
        pulumi.set(__self__, "biz_type", biz_type)

    @_builtins.property
    @pulumi.getter(name="bizId")
    def biz_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the object to be published.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "biz_id")

    @biz_id.setter
    def biz_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "biz_id", value)

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the object to be published.
        Changing this creates a new resource.
        The valid values are as follows:
        + **AGGREGATION_LOGIC_TABLE**
        + **ATOMIC_INDEX**
        + **ATOMIC_METRIC**
        + **BIZ_CATALOG**
        + **BIZ_METRIC**
        + **CODE_TABLE**
        + **COMMON_CONDITION**
        + **COMPOUND_METRIC**
        + **CONDITION_GROUP**
        + **DEGENERATE_DIMENSION**
        + **DERIVATIVE_INDEX**
        + **DERIVED_METRIC**
        + **DIMENSION**
        + **DIMENSION_ATTRIBUTE**
        + **DIMENSION_HIERARCHIES**
        + **DIMENSION_LOGIC_TABLE**
        + **DIMENSION_TABLE_ATTRIBUTE**
        + **DIRECTORY**
        + **FACT_ATTRIBUTE**
        + **FACT_DIMENSION**
        + **FACT_LOGIC_TABLE**
        + **FACT_MEASURE**
        + **FUNCTION**
        + **INFO_ARCH**
        + **MODEL**
        + **QUALITY_RULE**
        + **SECRECY_LEVEL**
        + **STANDARD_ELEMENT**
        + **STANDARD_ELEMENT_TEMPLATE**
        + **SUBJECT**
        + **SUMMARY_DIMENSION_ATTRIBUTE**
        + **SUMMARY_INDEX**
        + **SUMMARY_TIME**
        + **TABLE_MODEL**
        + **TABLE_MODEL_ATTRIBUTE**
        + **TABLE_MODEL_LOGIC**
        + **TABLE_TYPE**
        + **TAG**
        + **TIME_CONDITION**
        """
        return pulumi.get(self, "biz_type")

    @biz_type.setter
    def biz_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "biz_type", value)


if not MYPY:
    class ArchitectureBatchUnpublishBizInfoArgsDict(TypedDict):
        biz_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the object to be published.
        Changing this creates a new resource.
        """
        biz_type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the object to be published.
        Changing this creates a new resource.
        The valid values are as follows:
        + **AGGREGATION_LOGIC_TABLE**
        + **ATOMIC_INDEX**
        + **ATOMIC_METRIC**
        + **BIZ_CATALOG**
        + **BIZ_METRIC**
        + **CODE_TABLE**
        + **COMMON_CONDITION**
        + **COMPOUND_METRIC**
        + **CONDITION_GROUP**
        + **DEGENERATE_DIMENSION**
        + **DERIVATIVE_INDEX**
        + **DERIVED_METRIC**
        + **DIMENSION**
        + **DIMENSION_ATTRIBUTE**
        + **DIMENSION_HIERARCHIES**
        + **DIMENSION_LOGIC_TABLE**
        + **DIMENSION_TABLE_ATTRIBUTE**
        + **DIRECTORY**
        + **FACT_ATTRIBUTE**
        + **FACT_DIMENSION**
        + **FACT_LOGIC_TABLE**
        + **FACT_MEASURE**
        + **FUNCTION**
        + **INFO_ARCH**
        + **MODEL**
        + **QUALITY_RULE**
        + **SECRECY_LEVEL**
        + **STANDARD_ELEMENT**
        + **STANDARD_ELEMENT_TEMPLATE**
        + **SUBJECT**
        + **SUMMARY_DIMENSION_ATTRIBUTE**
        + **SUMMARY_INDEX**
        + **SUMMARY_TIME**
        + **TABLE_MODEL**
        + **TABLE_MODEL_ATTRIBUTE**
        + **TABLE_MODEL_LOGIC**
        + **TABLE_TYPE**
        + **TAG**
        + **TIME_CONDITION**
        """
elif False:
    ArchitectureBatchUnpublishBizInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureBatchUnpublishBizInfoArgs:
    def __init__(__self__, *,
                 biz_id: pulumi.Input[_builtins.str],
                 biz_type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] biz_id: Specifies the ID of the object to be published.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] biz_type: Specifies the type of the object to be published.
               Changing this creates a new resource.
               The valid values are as follows:
               + **AGGREGATION_LOGIC_TABLE**
               + **ATOMIC_INDEX**
               + **ATOMIC_METRIC**
               + **BIZ_CATALOG**
               + **BIZ_METRIC**
               + **CODE_TABLE**
               + **COMMON_CONDITION**
               + **COMPOUND_METRIC**
               + **CONDITION_GROUP**
               + **DEGENERATE_DIMENSION**
               + **DERIVATIVE_INDEX**
               + **DERIVED_METRIC**
               + **DIMENSION**
               + **DIMENSION_ATTRIBUTE**
               + **DIMENSION_HIERARCHIES**
               + **DIMENSION_LOGIC_TABLE**
               + **DIMENSION_TABLE_ATTRIBUTE**
               + **DIRECTORY**
               + **FACT_ATTRIBUTE**
               + **FACT_DIMENSION**
               + **FACT_LOGIC_TABLE**
               + **FACT_MEASURE**
               + **FUNCTION**
               + **INFO_ARCH**
               + **MODEL**
               + **QUALITY_RULE**
               + **SECRECY_LEVEL**
               + **STANDARD_ELEMENT**
               + **STANDARD_ELEMENT_TEMPLATE**
               + **SUBJECT**
               + **SUMMARY_DIMENSION_ATTRIBUTE**
               + **SUMMARY_INDEX**
               + **SUMMARY_TIME**
               + **TABLE_MODEL**
               + **TABLE_MODEL_ATTRIBUTE**
               + **TABLE_MODEL_LOGIC**
               + **TABLE_TYPE**
               + **TAG**
               + **TIME_CONDITION**
        """
        pulumi.set(__self__, "biz_id", biz_id)
        pulumi.set(__self__, "biz_type", biz_type)

    @_builtins.property
    @pulumi.getter(name="bizId")
    def biz_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the object to be published.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "biz_id")

    @biz_id.setter
    def biz_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "biz_id", value)

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the object to be published.
        Changing this creates a new resource.
        The valid values are as follows:
        + **AGGREGATION_LOGIC_TABLE**
        + **ATOMIC_INDEX**
        + **ATOMIC_METRIC**
        + **BIZ_CATALOG**
        + **BIZ_METRIC**
        + **CODE_TABLE**
        + **COMMON_CONDITION**
        + **COMPOUND_METRIC**
        + **CONDITION_GROUP**
        + **DEGENERATE_DIMENSION**
        + **DERIVATIVE_INDEX**
        + **DERIVED_METRIC**
        + **DIMENSION**
        + **DIMENSION_ATTRIBUTE**
        + **DIMENSION_HIERARCHIES**
        + **DIMENSION_LOGIC_TABLE**
        + **DIMENSION_TABLE_ATTRIBUTE**
        + **DIRECTORY**
        + **FACT_ATTRIBUTE**
        + **FACT_DIMENSION**
        + **FACT_LOGIC_TABLE**
        + **FACT_MEASURE**
        + **FUNCTION**
        + **INFO_ARCH**
        + **MODEL**
        + **QUALITY_RULE**
        + **SECRECY_LEVEL**
        + **STANDARD_ELEMENT**
        + **STANDARD_ELEMENT_TEMPLATE**
        + **SUBJECT**
        + **SUMMARY_DIMENSION_ATTRIBUTE**
        + **SUMMARY_INDEX**
        + **SUMMARY_TIME**
        + **TABLE_MODEL**
        + **TABLE_MODEL_ATTRIBUTE**
        + **TABLE_MODEL_LOGIC**
        + **TABLE_TYPE**
        + **TAG**
        + **TIME_CONDITION**
        """
        return pulumi.get(self, "biz_type")

    @biz_type.setter
    def biz_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "biz_type", value)


if not MYPY:
    class ArchitectureCodeTableFieldArgsDict(TypedDict):
        code: pulumi.Input[_builtins.str]
        """
        Specifies the code of a field.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of a field.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of a field. Valid values are: **BIGINT**, **BOOLEAN**, **DATE**,
        **DECIMAL**, **DOUBLE**, **STRING**, and **TIMESTAMP**.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of a field.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the field.
        """
        ordinal: NotRequired[pulumi.Input[_builtins.int]]
        """
        The ordinal of a field.
        """
elif False:
    ArchitectureCodeTableFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureCodeTableFieldArgs:
    def __init__(__self__, *,
                 code: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 ordinal: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] code: Specifies the code of a field.
        :param pulumi.Input[_builtins.str] name: Specifies the name of a field.
        :param pulumi.Input[_builtins.str] type: Specifies the type of a field. Valid values are: **BIGINT**, **BOOLEAN**, **DATE**,
               **DECIMAL**, **DOUBLE**, **STRING**, and **TIMESTAMP**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of a field.
        :param pulumi.Input[_builtins.str] id: The ID of the field.
        :param pulumi.Input[_builtins.int] ordinal: The ordinal of a field.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)

    @_builtins.property
    @pulumi.getter
    def code(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the code of a field.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of a field.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of a field. Valid values are: **BIGINT**, **BOOLEAN**, **DATE**,
        **DECIMAL**, **DOUBLE**, **STRING**, and **TIMESTAMP**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of a field.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the field.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The ordinal of a field.
        """
        return pulumi.get(self, "ordinal")

    @ordinal.setter
    def ordinal(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ordinal", value)


if not MYPY:
    class ArchitectureCodeTableValuesValueArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of a field.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of a value.
        """
        ordinal: NotRequired[pulumi.Input[_builtins.int]]
        """
        The ordinal of a value.
        """
elif False:
    ArchitectureCodeTableValuesValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureCodeTableValuesValueArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 ordinal: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] value: Specifies the value of a field.
        :param pulumi.Input[_builtins.str] id: The ID of a value.
        :param pulumi.Input[_builtins.int] ordinal: The ordinal of a value.
        """
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of a field.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of a value.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The ordinal of a value.
        """
        return pulumi.get(self, "ordinal")

    @ordinal.setter
    def ordinal(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ordinal", value)


if not MYPY:
    class ArchitectureDataStandardNewBizArgsDict(TypedDict):
        biz_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the ID of data standard.
        """
        biz_info: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the info of the new biz.
        """
        biz_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the type of the new biz.
        """
        biz_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the version of the new biz.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the creation time of the data standard.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the ID of the new biz.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the status of the new biz.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the latest update time of the new biz.
        """
elif False:
    ArchitectureDataStandardNewBizArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureDataStandardNewBizArgs:
    def __init__(__self__, *,
                 biz_id: Optional[pulumi.Input[_builtins.str]] = None,
                 biz_info: Optional[pulumi.Input[_builtins.str]] = None,
                 biz_type: Optional[pulumi.Input[_builtins.str]] = None,
                 biz_version: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] biz_id: Indicates the ID of data standard.
        :param pulumi.Input[_builtins.str] biz_info: Indicates the info of the new biz.
        :param pulumi.Input[_builtins.str] biz_type: Indicates the type of the new biz.
        :param pulumi.Input[_builtins.str] biz_version: Indicates the version of the new biz.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time of the data standard.
        :param pulumi.Input[_builtins.str] id: Indicates the ID of the new biz.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the new biz.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the latest update time of the new biz.
        """
        if biz_id is not None:
            pulumi.set(__self__, "biz_id", biz_id)
        if biz_info is not None:
            pulumi.set(__self__, "biz_info", biz_info)
        if biz_type is not None:
            pulumi.set(__self__, "biz_type", biz_type)
        if biz_version is not None:
            pulumi.set(__self__, "biz_version", biz_version)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="bizId")
    def biz_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of data standard.
        """
        return pulumi.get(self, "biz_id")

    @biz_id.setter
    def biz_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "biz_id", value)

    @_builtins.property
    @pulumi.getter(name="bizInfo")
    def biz_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the info of the new biz.
        """
        return pulumi.get(self, "biz_info")

    @biz_info.setter
    def biz_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "biz_info", value)

    @_builtins.property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the type of the new biz.
        """
        return pulumi.get(self, "biz_type")

    @biz_type.setter
    def biz_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "biz_type", value)

    @_builtins.property
    @pulumi.getter(name="bizVersion")
    def biz_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the version of the new biz.
        """
        return pulumi.get(self, "biz_version")

    @biz_version.setter
    def biz_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "biz_version", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time of the data standard.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the new biz.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the new biz.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the latest update time of the new biz.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class ArchitectureDataStandardTemplateCustomFieldArgsDict(TypedDict):
        fd_name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the field.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the creation time of the field.
        """
        created_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the name of creator.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the ID of the custom field.
        """
        optional_values: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the optional values of the field. Multiple values are separated by
        semicolons (;).
        """
        required: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the field is required.
        """
        searchable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the field is search supported.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the latest update time of the field.
        """
        updated_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the name of updater.
        """
elif False:
    ArchitectureDataStandardTemplateCustomFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureDataStandardTemplateCustomFieldArgs:
    def __init__(__self__, *,
                 fd_name: pulumi.Input[_builtins.str],
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 optional_values: Optional[pulumi.Input[_builtins.str]] = None,
                 required: Optional[pulumi.Input[_builtins.bool]] = None,
                 searchable: Optional[pulumi.Input[_builtins.bool]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] fd_name: Specifies the name of the field.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time of the field.
        :param pulumi.Input[_builtins.str] created_by: Indicates the name of creator.
        :param pulumi.Input[_builtins.str] id: Indicates the ID of the custom field.
        :param pulumi.Input[_builtins.str] optional_values: Specifies the optional values of the field. Multiple values are separated by
               semicolons (;).
        :param pulumi.Input[_builtins.bool] required: Specifies whether the field is required.
        :param pulumi.Input[_builtins.bool] searchable: Specifies whether the field is search supported.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the latest update time of the field.
        :param pulumi.Input[_builtins.str] updated_by: Indicates the name of updater.
        """
        pulumi.set(__self__, "fd_name", fd_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if optional_values is not None:
            pulumi.set(__self__, "optional_values", optional_values)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if searchable is not None:
            pulumi.set(__self__, "searchable", searchable)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="fdName")
    def fd_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the field.
        """
        return pulumi.get(self, "fd_name")

    @fd_name.setter
    def fd_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "fd_name", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time of the field.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of creator.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the custom field.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="optionalValues")
    def optional_values(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the optional values of the field. Multiple values are separated by
        semicolons (;).
        """
        return pulumi.get(self, "optional_values")

    @optional_values.setter
    def optional_values(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optional_values", value)

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the field is required.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "required", value)

    @_builtins.property
    @pulumi.getter
    def searchable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the field is search supported.
        """
        return pulumi.get(self, "searchable")

    @searchable.setter
    def searchable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "searchable", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the latest update time of the field.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of updater.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)


if not MYPY:
    class ArchitectureDataStandardTemplateOptionalFieldArgsDict(TypedDict):
        fd_name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the field.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the creation time of the field.
        """
        created_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the name of creator.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the ID of the custom field.
        """
        required: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the field is required.
        """
        searchable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the field is search supported.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the latest update time of the field.
        """
        updated_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the name of updater.
        """
elif False:
    ArchitectureDataStandardTemplateOptionalFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureDataStandardTemplateOptionalFieldArgs:
    def __init__(__self__, *,
                 fd_name: pulumi.Input[_builtins.str],
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 required: Optional[pulumi.Input[_builtins.bool]] = None,
                 searchable: Optional[pulumi.Input[_builtins.bool]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] fd_name: Specifies the name of the field.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time of the field.
        :param pulumi.Input[_builtins.str] created_by: Indicates the name of creator.
        :param pulumi.Input[_builtins.str] id: Indicates the ID of the custom field.
        :param pulumi.Input[_builtins.bool] required: Specifies whether the field is required.
        :param pulumi.Input[_builtins.bool] searchable: Specifies whether the field is search supported.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the latest update time of the field.
        :param pulumi.Input[_builtins.str] updated_by: Indicates the name of updater.
        """
        pulumi.set(__self__, "fd_name", fd_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if searchable is not None:
            pulumi.set(__self__, "searchable", searchable)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="fdName")
    def fd_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the field.
        """
        return pulumi.get(self, "fd_name")

    @fd_name.setter
    def fd_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "fd_name", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time of the field.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of creator.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the custom field.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the field is required.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "required", value)

    @_builtins.property
    @pulumi.getter
    def searchable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the field is search supported.
        """
        return pulumi.get(self, "searchable")

    @searchable.setter
    def searchable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "searchable", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the latest update time of the field.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of updater.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)


if not MYPY:
    class ArchitectureDataStandardValueArgsDict(TypedDict):
        fd_name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the data standard attribute.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the creation time of the data standard.
        """
        created_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the creation time of the new biz.
        """
        directory_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the directory ID that the data standard belongs to.
        """
        fd_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the ID of the data standard attribute definition.
        """
        fd_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value of the data standard attribute.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the ID of the new biz.
        """
        row_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the ID of data standard.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the status of the new biz.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the latest update time of the new biz.
        """
        updated_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the name of updater.
        """
elif False:
    ArchitectureDataStandardValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureDataStandardValueArgs:
    def __init__(__self__, *,
                 fd_name: pulumi.Input[_builtins.str],
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 directory_id: Optional[pulumi.Input[_builtins.str]] = None,
                 fd_id: Optional[pulumi.Input[_builtins.str]] = None,
                 fd_value: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 row_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] fd_name: Specifies the name of the data standard attribute.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time of the data standard.
        :param pulumi.Input[_builtins.str] created_by: Indicates the creation time of the new biz.
        :param pulumi.Input[_builtins.str] directory_id: Specifies the directory ID that the data standard belongs to.
        :param pulumi.Input[_builtins.str] fd_id: Indicates the ID of the data standard attribute definition.
        :param pulumi.Input[_builtins.str] fd_value: Specifies the value of the data standard attribute.
        :param pulumi.Input[_builtins.str] id: Indicates the ID of the new biz.
        :param pulumi.Input[_builtins.str] row_id: Indicates the ID of data standard.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the new biz.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the latest update time of the new biz.
        :param pulumi.Input[_builtins.str] updated_by: Indicates the name of updater.
        """
        pulumi.set(__self__, "fd_name", fd_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if directory_id is not None:
            pulumi.set(__self__, "directory_id", directory_id)
        if fd_id is not None:
            pulumi.set(__self__, "fd_id", fd_id)
        if fd_value is not None:
            pulumi.set(__self__, "fd_value", fd_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if row_id is not None:
            pulumi.set(__self__, "row_id", row_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="fdName")
    def fd_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the data standard attribute.
        """
        return pulumi.get(self, "fd_name")

    @fd_name.setter
    def fd_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "fd_name", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time of the data standard.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time of the new biz.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the directory ID that the data standard belongs to.
        """
        return pulumi.get(self, "directory_id")

    @directory_id.setter
    def directory_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "directory_id", value)

    @_builtins.property
    @pulumi.getter(name="fdId")
    def fd_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the data standard attribute definition.
        """
        return pulumi.get(self, "fd_id")

    @fd_id.setter
    def fd_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fd_id", value)

    @_builtins.property
    @pulumi.getter(name="fdValue")
    def fd_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of the data standard attribute.
        """
        return pulumi.get(self, "fd_value")

    @fd_value.setter
    def fd_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fd_value", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of the new biz.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="rowId")
    def row_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the ID of data standard.
        """
        return pulumi.get(self, "row_id")

    @row_id.setter
    def row_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "row_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the new biz.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the latest update time of the new biz.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of updater.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)


if not MYPY:
    class ArchitectureTableModelAttributeArgsDict(TypedDict):
        data_type: pulumi.Input[_builtins.str]
        """
        Specifies the data type of attribute.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the mapping name.
        """
        name_en: pulumi.Input[_builtins.str]
        """
        Specifies the English name of attribute.
        """
        code: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the code of attribute.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The creating time of the mapping
        """
        data_type_extend: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the data type extend field of attribute.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of attribute.
        """
        domain_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The domain type of the attribute.
        """
        extend_field: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies the extend field of attribute.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the mapping.
        """
        is_foreign_key: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies the attribute is foreign key or not.
        """
        is_partition_key: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies the attribute is partition key or not.
        """
        is_primary_key: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies the attribute is primary key or not.
        """
        not_null: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies the attribute is not null or null.

        <a name="block--relations"></a>
        The `relations` block supports:
        """
        ordinal: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the sequence number of attribute. The input values must start from one, and must
        be continuous numbers.
        """
        related_logic_attr_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the related logic attribute ID of attribute.
        """
        related_logic_attr_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the related logic attribute name of attribute.
        """
        related_logic_attr_name_en: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the related logic attribute English name of attribute.
        """
        stand_row_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the data standard ID of attribute.
        """
        stand_row_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the data standard name of attribute.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The updating time of the mapping.
        """
elif False:
    ArchitectureTableModelAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureTableModelAttributeArgs:
    def __init__(__self__, *,
                 data_type: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 name_en: pulumi.Input[_builtins.str],
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 data_type_extend: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_type: Optional[pulumi.Input[_builtins.str]] = None,
                 extend_field: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_foreign_key: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_partition_key: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_primary_key: Optional[pulumi.Input[_builtins.bool]] = None,
                 not_null: Optional[pulumi.Input[_builtins.bool]] = None,
                 ordinal: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_attr_id: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_attr_name: Optional[pulumi.Input[_builtins.str]] = None,
                 related_logic_attr_name_en: Optional[pulumi.Input[_builtins.str]] = None,
                 stand_row_id: Optional[pulumi.Input[_builtins.str]] = None,
                 stand_row_name: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] data_type: Specifies the data type of attribute.
        :param pulumi.Input[_builtins.str] name: Specifies the mapping name.
        :param pulumi.Input[_builtins.str] name_en: Specifies the English name of attribute.
        :param pulumi.Input[_builtins.str] code: Specifies the code of attribute.
        :param pulumi.Input[_builtins.str] created_at: The creating time of the mapping
        :param pulumi.Input[_builtins.str] data_type_extend: Specifies the data type extend field of attribute.
        :param pulumi.Input[_builtins.str] description: Specifies the description of attribute.
        :param pulumi.Input[_builtins.str] domain_type: The domain type of the attribute.
        :param pulumi.Input[_builtins.bool] extend_field: Specifies the extend field of attribute.
        :param pulumi.Input[_builtins.str] id: The ID of the mapping.
        :param pulumi.Input[_builtins.bool] is_foreign_key: Specifies the attribute is foreign key or not.
        :param pulumi.Input[_builtins.bool] is_partition_key: Specifies the attribute is partition key or not.
        :param pulumi.Input[_builtins.bool] is_primary_key: Specifies the attribute is primary key or not.
        :param pulumi.Input[_builtins.bool] not_null: Specifies the attribute is not null or null.
               
               <a name="block--relations"></a>
               The `relations` block supports:
        :param pulumi.Input[_builtins.str] ordinal: Specifies the sequence number of attribute. The input values must start from one, and must
               be continuous numbers.
        :param pulumi.Input[_builtins.str] related_logic_attr_id: Specifies the related logic attribute ID of attribute.
        :param pulumi.Input[_builtins.str] related_logic_attr_name: Specifies the related logic attribute name of attribute.
        :param pulumi.Input[_builtins.str] related_logic_attr_name_en: Specifies the related logic attribute English name of attribute.
        :param pulumi.Input[_builtins.str] stand_row_id: Specifies the data standard ID of attribute.
        :param pulumi.Input[_builtins.str] stand_row_name: Specifies the data standard name of attribute.
        :param pulumi.Input[_builtins.str] updated_at: The updating time of the mapping.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_en", name_en)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_type_extend is not None:
            pulumi.set(__self__, "data_type_extend", data_type_extend)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_type is not None:
            pulumi.set(__self__, "domain_type", domain_type)
        if extend_field is not None:
            pulumi.set(__self__, "extend_field", extend_field)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_foreign_key is not None:
            pulumi.set(__self__, "is_foreign_key", is_foreign_key)
        if is_partition_key is not None:
            pulumi.set(__self__, "is_partition_key", is_partition_key)
        if is_primary_key is not None:
            pulumi.set(__self__, "is_primary_key", is_primary_key)
        if not_null is not None:
            pulumi.set(__self__, "not_null", not_null)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)
        if related_logic_attr_id is not None:
            pulumi.set(__self__, "related_logic_attr_id", related_logic_attr_id)
        if related_logic_attr_name is not None:
            pulumi.set(__self__, "related_logic_attr_name", related_logic_attr_name)
        if related_logic_attr_name_en is not None:
            pulumi.set(__self__, "related_logic_attr_name_en", related_logic_attr_name_en)
        if stand_row_id is not None:
            pulumi.set(__self__, "stand_row_id", stand_row_id)
        if stand_row_name is not None:
            pulumi.set(__self__, "stand_row_name", stand_row_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the data type of attribute.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "data_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the mapping name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the English name of attribute.
        """
        return pulumi.get(self, "name_en")

    @name_en.setter
    def name_en(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name_en", value)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the code of attribute.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creating time of the mapping
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dataTypeExtend")
    def data_type_extend(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data type extend field of attribute.
        """
        return pulumi.get(self, "data_type_extend")

    @data_type_extend.setter
    def data_type_extend(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_type_extend", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of attribute.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="domainType")
    def domain_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The domain type of the attribute.
        """
        return pulumi.get(self, "domain_type")

    @domain_type.setter
    def domain_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_type", value)

    @_builtins.property
    @pulumi.getter(name="extendField")
    def extend_field(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the extend field of attribute.
        """
        return pulumi.get(self, "extend_field")

    @extend_field.setter
    def extend_field(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "extend_field", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the mapping.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="isForeignKey")
    def is_foreign_key(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the attribute is foreign key or not.
        """
        return pulumi.get(self, "is_foreign_key")

    @is_foreign_key.setter
    def is_foreign_key(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_foreign_key", value)

    @_builtins.property
    @pulumi.getter(name="isPartitionKey")
    def is_partition_key(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the attribute is partition key or not.
        """
        return pulumi.get(self, "is_partition_key")

    @is_partition_key.setter
    def is_partition_key(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_partition_key", value)

    @_builtins.property
    @pulumi.getter(name="isPrimaryKey")
    def is_primary_key(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the attribute is primary key or not.
        """
        return pulumi.get(self, "is_primary_key")

    @is_primary_key.setter
    def is_primary_key(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_primary_key", value)

    @_builtins.property
    @pulumi.getter(name="notNull")
    def not_null(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies the attribute is not null or null.

        <a name="block--relations"></a>
        The `relations` block supports:
        """
        return pulumi.get(self, "not_null")

    @not_null.setter
    def not_null(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "not_null", value)

    @_builtins.property
    @pulumi.getter
    def ordinal(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the sequence number of attribute. The input values must start from one, and must
        be continuous numbers.
        """
        return pulumi.get(self, "ordinal")

    @ordinal.setter
    def ordinal(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ordinal", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicAttrId")
    def related_logic_attr_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic attribute ID of attribute.
        """
        return pulumi.get(self, "related_logic_attr_id")

    @related_logic_attr_id.setter
    def related_logic_attr_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_attr_id", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicAttrName")
    def related_logic_attr_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic attribute name of attribute.
        """
        return pulumi.get(self, "related_logic_attr_name")

    @related_logic_attr_name.setter
    def related_logic_attr_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_attr_name", value)

    @_builtins.property
    @pulumi.getter(name="relatedLogicAttrNameEn")
    def related_logic_attr_name_en(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the related logic attribute English name of attribute.
        """
        return pulumi.get(self, "related_logic_attr_name_en")

    @related_logic_attr_name_en.setter
    def related_logic_attr_name_en(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_logic_attr_name_en", value)

    @_builtins.property
    @pulumi.getter(name="standRowId")
    def stand_row_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data standard ID of attribute.
        """
        return pulumi.get(self, "stand_row_id")

    @stand_row_id.setter
    def stand_row_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stand_row_id", value)

    @_builtins.property
    @pulumi.getter(name="standRowName")
    def stand_row_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the data standard name of attribute.
        """
        return pulumi.get(self, "stand_row_name")

    @stand_row_name.setter
    def stand_row_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stand_row_name", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updating time of the mapping.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class ArchitectureTableModelMappingArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the mapping name.
        """
        source_tables: pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceTableArgsDict']]]
        """
        Specifies the source table informations of mapping.
        The source_tables structure is documented below.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The creating time of the mapping
        """
        created_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The person creating the mapping.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the mapping.
        """
        source_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceFieldArgsDict']]]]
        """
        Specifies the source attribute informations of mapping.
        The source_fields structure is documented below.

        <a name="block--mappings--source_fields"></a>
        The `source_fields` block supports:
        """
        src_model_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source model ID. It's **Required** for physical table model.
        """
        src_model_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source model name.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The updating time of the mapping.
        """
        updated_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The person updating the mapping.
        """
        view_text: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source to capturing the view, using for **DWS** reversed view.
        """
elif False:
    ArchitectureTableModelMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureTableModelMappingArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 source_tables: pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceTableArgs']]],
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_fields: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceFieldArgs']]]] = None,
                 src_model_id: Optional[pulumi.Input[_builtins.str]] = None,
                 src_model_name: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 view_text: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the mapping name.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceTableArgs']]] source_tables: Specifies the source table informations of mapping.
               The source_tables structure is documented below.
        :param pulumi.Input[_builtins.str] created_at: The creating time of the mapping
        :param pulumi.Input[_builtins.str] created_by: The person creating the mapping.
        :param pulumi.Input[_builtins.str] id: The ID of the mapping.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceFieldArgs']]] source_fields: Specifies the source attribute informations of mapping.
               The source_fields structure is documented below.
               
               <a name="block--mappings--source_fields"></a>
               The `source_fields` block supports:
        :param pulumi.Input[_builtins.str] src_model_id: Specifies the source model ID. It's **Required** for physical table model.
        :param pulumi.Input[_builtins.str] src_model_name: Specifies the source model name.
        :param pulumi.Input[_builtins.str] updated_at: The updating time of the mapping.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the mapping.
        :param pulumi.Input[_builtins.str] view_text: Specifies the source to capturing the view, using for **DWS** reversed view.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_tables", source_tables)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source_fields is not None:
            pulumi.set(__self__, "source_fields", source_fields)
        if src_model_id is not None:
            pulumi.set(__self__, "src_model_id", src_model_id)
        if src_model_name is not None:
            pulumi.set(__self__, "src_model_name", src_model_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if view_text is not None:
            pulumi.set(__self__, "view_text", view_text)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the mapping name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sourceTables")
    def source_tables(self) -> pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceTableArgs']]]:
        """
        Specifies the source table informations of mapping.
        The source_tables structure is documented below.
        """
        return pulumi.get(self, "source_tables")

    @source_tables.setter
    def source_tables(self, value: pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceTableArgs']]]):
        pulumi.set(self, "source_tables", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creating time of the mapping
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person creating the mapping.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the mapping.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="sourceFields")
    def source_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceFieldArgs']]]]:
        """
        Specifies the source attribute informations of mapping.
        The source_fields structure is documented below.

        <a name="block--mappings--source_fields"></a>
        The `source_fields` block supports:
        """
        return pulumi.get(self, "source_fields")

    @source_fields.setter
    def source_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceFieldArgs']]]]):
        pulumi.set(self, "source_fields", value)

    @_builtins.property
    @pulumi.getter(name="srcModelId")
    def src_model_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source model ID. It's **Required** for physical table model.
        """
        return pulumi.get(self, "src_model_id")

    @src_model_id.setter
    def src_model_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "src_model_id", value)

    @_builtins.property
    @pulumi.getter(name="srcModelName")
    def src_model_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source model name.
        """
        return pulumi.get(self, "src_model_name")

    @src_model_name.setter
    def src_model_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "src_model_name", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updating time of the mapping.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person updating the mapping.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="viewText")
    def view_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source to capturing the view, using for **DWS** reversed view.
        """
        return pulumi.get(self, "view_text")

    @view_text.setter
    def view_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "view_text", value)


if not MYPY:
    class ArchitectureTableModelMappingSourceFieldArgsDict(TypedDict):
        changed: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The attributes changed or not.
        """
        field_ids: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source attribute IDs of mapping. Using **,** to split ID.
        """
        field_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the source attribute English name list of mapping.
        """
        target_field_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the attribute English name of this resource.
        """
        transform_expression: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the transform expression.

        <a name="block--mappings--source_tables"></a>
        The `source_tables` block supports:
        """
elif False:
    ArchitectureTableModelMappingSourceFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureTableModelMappingSourceFieldArgs:
    def __init__(__self__, *,
                 changed: Optional[pulumi.Input[_builtins.bool]] = None,
                 field_ids: Optional[pulumi.Input[_builtins.str]] = None,
                 field_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_field_name: Optional[pulumi.Input[_builtins.str]] = None,
                 transform_expression: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] changed: The attributes changed or not.
        :param pulumi.Input[_builtins.str] field_ids: Specifies the source attribute IDs of mapping. Using **,** to split ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] field_names: Specifies the source attribute English name list of mapping.
        :param pulumi.Input[_builtins.str] target_field_name: Specifies the attribute English name of this resource.
        :param pulumi.Input[_builtins.str] transform_expression: Specifies the transform expression.
               
               <a name="block--mappings--source_tables"></a>
               The `source_tables` block supports:
        """
        if changed is not None:
            pulumi.set(__self__, "changed", changed)
        if field_ids is not None:
            pulumi.set(__self__, "field_ids", field_ids)
        if field_names is not None:
            pulumi.set(__self__, "field_names", field_names)
        if target_field_name is not None:
            pulumi.set(__self__, "target_field_name", target_field_name)
        if transform_expression is not None:
            pulumi.set(__self__, "transform_expression", transform_expression)

    @_builtins.property
    @pulumi.getter
    def changed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The attributes changed or not.
        """
        return pulumi.get(self, "changed")

    @changed.setter
    def changed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "changed", value)

    @_builtins.property
    @pulumi.getter(name="fieldIds")
    def field_ids(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source attribute IDs of mapping. Using **,** to split ID.
        """
        return pulumi.get(self, "field_ids")

    @field_ids.setter
    def field_ids(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field_ids", value)

    @_builtins.property
    @pulumi.getter(name="fieldNames")
    def field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the source attribute English name list of mapping.
        """
        return pulumi.get(self, "field_names")

    @field_names.setter
    def field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "field_names", value)

    @_builtins.property
    @pulumi.getter(name="targetFieldName")
    def target_field_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the attribute English name of this resource.
        """
        return pulumi.get(self, "target_field_name")

    @target_field_name.setter
    def target_field_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_field_name", value)

    @_builtins.property
    @pulumi.getter(name="transformExpression")
    def transform_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the transform expression.

        <a name="block--mappings--source_tables"></a>
        The `source_tables` block supports:
        """
        return pulumi.get(self, "transform_expression")

    @transform_expression.setter
    def transform_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transform_expression", value)


if not MYPY:
    class ArchitectureTableModelMappingSourceTableArgsDict(TypedDict):
        table1_id: pulumi.Input[_builtins.str]
        """
        Specifies the table id.
        """
        join_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceTableJoinFieldArgsDict']]]]
        """
        Specifies the attribute informations.
        The join_fields structure is documented below.
        """
        join_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the join type of two table.
        The valid values are **LEFT**, **RIGHT**, **INNER**, **FULL**.
        """
        table1_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the table name.
        """
        table2_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the table id.
        """
        table2_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the table name

        <a name="block--mappings--source_tables--join_fields"></a>
        The `join_fields` block supports:
        """
elif False:
    ArchitectureTableModelMappingSourceTableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureTableModelMappingSourceTableArgs:
    def __init__(__self__, *,
                 table1_id: pulumi.Input[_builtins.str],
                 join_fields: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceTableJoinFieldArgs']]]] = None,
                 join_type: Optional[pulumi.Input[_builtins.str]] = None,
                 table1_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table2_id: Optional[pulumi.Input[_builtins.str]] = None,
                 table2_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] table1_id: Specifies the table id.
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceTableJoinFieldArgs']]] join_fields: Specifies the attribute informations.
               The join_fields structure is documented below.
        :param pulumi.Input[_builtins.str] join_type: Specifies the join type of two table.
               The valid values are **LEFT**, **RIGHT**, **INNER**, **FULL**.
        :param pulumi.Input[_builtins.str] table1_name: Specifies the table name.
        :param pulumi.Input[_builtins.str] table2_id: Specifies the table id.
        :param pulumi.Input[_builtins.str] table2_name: Specifies the table name
               
               <a name="block--mappings--source_tables--join_fields"></a>
               The `join_fields` block supports:
        """
        pulumi.set(__self__, "table1_id", table1_id)
        if join_fields is not None:
            pulumi.set(__self__, "join_fields", join_fields)
        if join_type is not None:
            pulumi.set(__self__, "join_type", join_type)
        if table1_name is not None:
            pulumi.set(__self__, "table1_name", table1_name)
        if table2_id is not None:
            pulumi.set(__self__, "table2_id", table2_id)
        if table2_name is not None:
            pulumi.set(__self__, "table2_name", table2_name)

    @_builtins.property
    @pulumi.getter(name="table1Id")
    def table1_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the table id.
        """
        return pulumi.get(self, "table1_id")

    @table1_id.setter
    def table1_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "table1_id", value)

    @_builtins.property
    @pulumi.getter(name="joinFields")
    def join_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceTableJoinFieldArgs']]]]:
        """
        Specifies the attribute informations.
        The join_fields structure is documented below.
        """
        return pulumi.get(self, "join_fields")

    @join_fields.setter
    def join_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelMappingSourceTableJoinFieldArgs']]]]):
        pulumi.set(self, "join_fields", value)

    @_builtins.property
    @pulumi.getter(name="joinType")
    def join_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the join type of two table.
        The valid values are **LEFT**, **RIGHT**, **INNER**, **FULL**.
        """
        return pulumi.get(self, "join_type")

    @join_type.setter
    def join_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "join_type", value)

    @_builtins.property
    @pulumi.getter(name="table1Name")
    def table1_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the table name.
        """
        return pulumi.get(self, "table1_name")

    @table1_name.setter
    def table1_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table1_name", value)

    @_builtins.property
    @pulumi.getter(name="table2Id")
    def table2_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the table id.
        """
        return pulumi.get(self, "table2_id")

    @table2_id.setter
    def table2_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table2_id", value)

    @_builtins.property
    @pulumi.getter(name="table2Name")
    def table2_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the table name

        <a name="block--mappings--source_tables--join_fields"></a>
        The `join_fields` block supports:
        """
        return pulumi.get(self, "table2_name")

    @table2_name.setter
    def table2_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table2_name", value)


if not MYPY:
    class ArchitectureTableModelMappingSourceTableJoinFieldArgsDict(TypedDict):
        field1_id: pulumi.Input[_builtins.str]
        """
        Specifies the attribute ID.
        """
        field2_id: pulumi.Input[_builtins.str]
        """
        Specifies the attribute ID.
        """
        field1_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the attribute English name.
        """
        field2_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the attribute English name.
        """
elif False:
    ArchitectureTableModelMappingSourceTableJoinFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureTableModelMappingSourceTableJoinFieldArgs:
    def __init__(__self__, *,
                 field1_id: pulumi.Input[_builtins.str],
                 field2_id: pulumi.Input[_builtins.str],
                 field1_name: Optional[pulumi.Input[_builtins.str]] = None,
                 field2_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] field1_id: Specifies the attribute ID.
        :param pulumi.Input[_builtins.str] field2_id: Specifies the attribute ID.
        :param pulumi.Input[_builtins.str] field1_name: Specifies the attribute English name.
        :param pulumi.Input[_builtins.str] field2_name: Specifies the attribute English name.
        """
        pulumi.set(__self__, "field1_id", field1_id)
        pulumi.set(__self__, "field2_id", field2_id)
        if field1_name is not None:
            pulumi.set(__self__, "field1_name", field1_name)
        if field2_name is not None:
            pulumi.set(__self__, "field2_name", field2_name)

    @_builtins.property
    @pulumi.getter(name="field1Id")
    def field1_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the attribute ID.
        """
        return pulumi.get(self, "field1_id")

    @field1_id.setter
    def field1_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "field1_id", value)

    @_builtins.property
    @pulumi.getter(name="field2Id")
    def field2_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the attribute ID.
        """
        return pulumi.get(self, "field2_id")

    @field2_id.setter
    def field2_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "field2_id", value)

    @_builtins.property
    @pulumi.getter(name="field1Name")
    def field1_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the attribute English name.
        """
        return pulumi.get(self, "field1_name")

    @field1_name.setter
    def field1_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field1_name", value)

    @_builtins.property
    @pulumi.getter(name="field2Name")
    def field2_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the attribute English name.
        """
        return pulumi.get(self, "field2_name")

    @field2_name.setter
    def field2_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field2_name", value)


if not MYPY:
    class ArchitectureTableModelRelationArgsDict(TypedDict):
        mappings: pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationMappingArgsDict']]]
        """
        Specifies the mappings of the attributes related.
        The mappings structure is documented below.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the mapping name.
        """
        source_type: pulumi.Input[_builtins.str]
        """
        Specifies the relation type of source to target.
        The valid values are **ONE**, **ZERO_OR_ONE**, **ZERO_OR_N**, **ONE_OR_N**.
        """
        target_type: pulumi.Input[_builtins.str]
        """
        Specifies the relation type of target to source.
        The valid values are **ONE**, **ZERO_OR_ONE**, **ZERO_OR_N**, **ONE_OR_N**.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The creating time of the mapping
        """
        created_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The person creating the mapping.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the mapping.
        """
        role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the role of the relation.
        """
        source_table_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source table ID. Source table ID and target table ID, one of them
        must be the resource ID, so it have to be empty and the other one is **Required**.
        """
        source_table_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source table name.
        """
        target_table_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the target table ID. Source table ID and target table ID, one of them
        must be the resource ID, so it have to be empty and the other one is **Required**.
        """
        target_table_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the target table name.

        <a name="block--relations--mappings"></a>
        The `mappings` block supports:
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The updating time of the mapping.
        """
        updated_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The person updating the mapping.
        """
elif False:
    ArchitectureTableModelRelationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureTableModelRelationArgs:
    def __init__(__self__, *,
                 mappings: pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationMappingArgs']]],
                 name: pulumi.Input[_builtins.str],
                 source_type: pulumi.Input[_builtins.str],
                 target_type: pulumi.Input[_builtins.str],
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 source_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 target_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationMappingArgs']]] mappings: Specifies the mappings of the attributes related.
               The mappings structure is documented below.
        :param pulumi.Input[_builtins.str] name: Specifies the mapping name.
        :param pulumi.Input[_builtins.str] source_type: Specifies the relation type of source to target.
               The valid values are **ONE**, **ZERO_OR_ONE**, **ZERO_OR_N**, **ONE_OR_N**.
        :param pulumi.Input[_builtins.str] target_type: Specifies the relation type of target to source.
               The valid values are **ONE**, **ZERO_OR_ONE**, **ZERO_OR_N**, **ONE_OR_N**.
        :param pulumi.Input[_builtins.str] created_at: The creating time of the mapping
        :param pulumi.Input[_builtins.str] created_by: The person creating the mapping.
        :param pulumi.Input[_builtins.str] id: The ID of the mapping.
        :param pulumi.Input[_builtins.str] role: Specifies the role of the relation.
        :param pulumi.Input[_builtins.str] source_table_id: Specifies the source table ID. Source table ID and target table ID, one of them
               must be the resource ID, so it have to be empty and the other one is **Required**.
        :param pulumi.Input[_builtins.str] source_table_name: Specifies the source table name.
        :param pulumi.Input[_builtins.str] target_table_id: Specifies the target table ID. Source table ID and target table ID, one of them
               must be the resource ID, so it have to be empty and the other one is **Required**.
        :param pulumi.Input[_builtins.str] target_table_name: Specifies the target table name.
               
               <a name="block--relations--mappings"></a>
               The `mappings` block supports:
        :param pulumi.Input[_builtins.str] updated_at: The updating time of the mapping.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the mapping.
        """
        pulumi.set(__self__, "mappings", mappings)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "target_type", target_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if source_table_id is not None:
            pulumi.set(__self__, "source_table_id", source_table_id)
        if source_table_name is not None:
            pulumi.set(__self__, "source_table_name", source_table_name)
        if target_table_id is not None:
            pulumi.set(__self__, "target_table_id", target_table_id)
        if target_table_name is not None:
            pulumi.set(__self__, "target_table_name", target_table_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter
    def mappings(self) -> pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationMappingArgs']]]:
        """
        Specifies the mappings of the attributes related.
        The mappings structure is documented below.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: pulumi.Input[Sequence[pulumi.Input['ArchitectureTableModelRelationMappingArgs']]]):
        pulumi.set(self, "mappings", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the mapping name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the relation type of source to target.
        The valid values are **ONE**, **ZERO_OR_ONE**, **ZERO_OR_N**, **ONE_OR_N**.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the relation type of target to source.
        The valid values are **ONE**, **ZERO_OR_ONE**, **ZERO_OR_N**, **ONE_OR_N**.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_type", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creating time of the mapping
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person creating the mapping.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the mapping.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the role of the relation.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter(name="sourceTableId")
    def source_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source table ID. Source table ID and target table ID, one of them
        must be the resource ID, so it have to be empty and the other one is **Required**.
        """
        return pulumi.get(self, "source_table_id")

    @source_table_id.setter
    def source_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_table_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceTableName")
    def source_table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source table name.
        """
        return pulumi.get(self, "source_table_name")

    @source_table_name.setter
    def source_table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_table_name", value)

    @_builtins.property
    @pulumi.getter(name="targetTableId")
    def target_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target table ID. Source table ID and target table ID, one of them
        must be the resource ID, so it have to be empty and the other one is **Required**.
        """
        return pulumi.get(self, "target_table_id")

    @target_table_id.setter
    def target_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_table_id", value)

    @_builtins.property
    @pulumi.getter(name="targetTableName")
    def target_table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target table name.

        <a name="block--relations--mappings"></a>
        The `mappings` block supports:
        """
        return pulumi.get(self, "target_table_name")

    @target_table_name.setter
    def target_table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_table_name", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updating time of the mapping.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person updating the mapping.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)


if not MYPY:
    class ArchitectureTableModelRelationMappingArgsDict(TypedDict):
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The creating time of the mapping
        """
        created_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The person creating the mapping.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the mapping.
        """
        source_field_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source attribute ID. Source field ID and target field ID, one of
        them must be the resource attribute ID, so it have to be empty and input its name, the other one ID is **Required**.
        """
        source_field_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source attribute English name. If the source attribute ID is
        empty, it's **Required**.
        """
        target_field_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the source attribute ID. Source field ID and target field ID, one of
        them must be the resource attribute ID, so it have to be empty and the other one is **Required**.
        """
        target_field_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the attribute English name of this resource.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The updating time of the mapping.
        """
        updated_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The person updating the mapping.
        """
elif False:
    ArchitectureTableModelRelationMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchitectureTableModelRelationMappingArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_field_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_field_name: Optional[pulumi.Input[_builtins.str]] = None,
                 target_field_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_field_name: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] created_at: The creating time of the mapping
        :param pulumi.Input[_builtins.str] created_by: The person creating the mapping.
        :param pulumi.Input[_builtins.str] id: The ID of the mapping.
        :param pulumi.Input[_builtins.str] source_field_id: Specifies the source attribute ID. Source field ID and target field ID, one of
               them must be the resource attribute ID, so it have to be empty and input its name, the other one ID is **Required**.
        :param pulumi.Input[_builtins.str] source_field_name: Specifies the source attribute English name. If the source attribute ID is
               empty, it's **Required**.
        :param pulumi.Input[_builtins.str] target_field_id: Specifies the source attribute ID. Source field ID and target field ID, one of
               them must be the resource attribute ID, so it have to be empty and the other one is **Required**.
        :param pulumi.Input[_builtins.str] target_field_name: Specifies the attribute English name of this resource.
        :param pulumi.Input[_builtins.str] updated_at: The updating time of the mapping.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the mapping.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source_field_id is not None:
            pulumi.set(__self__, "source_field_id", source_field_id)
        if source_field_name is not None:
            pulumi.set(__self__, "source_field_name", source_field_name)
        if target_field_id is not None:
            pulumi.set(__self__, "target_field_id", target_field_id)
        if target_field_name is not None:
            pulumi.set(__self__, "target_field_name", target_field_name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creating time of the mapping
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person creating the mapping.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the mapping.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="sourceFieldId")
    def source_field_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source attribute ID. Source field ID and target field ID, one of
        them must be the resource attribute ID, so it have to be empty and input its name, the other one ID is **Required**.
        """
        return pulumi.get(self, "source_field_id")

    @source_field_id.setter
    def source_field_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_field_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceFieldName")
    def source_field_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source attribute English name. If the source attribute ID is
        empty, it's **Required**.
        """
        return pulumi.get(self, "source_field_name")

    @source_field_name.setter
    def source_field_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_field_name", value)

    @_builtins.property
    @pulumi.getter(name="targetFieldId")
    def target_field_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source attribute ID. Source field ID and target field ID, one of
        them must be the resource attribute ID, so it have to be empty and the other one is **Required**.
        """
        return pulumi.get(self, "target_field_id")

    @target_field_id.setter
    def target_field_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_field_id", value)

    @_builtins.property
    @pulumi.getter(name="targetFieldName")
    def target_field_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the attribute English name of this resource.
        """
        return pulumi.get(self, "target_field_name")

    @target_field_name.setter
    def target_field_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_field_name", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updating time of the mapping.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person updating the mapping.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)


if not MYPY:
    class DataserviceApiBackendConfigArgsDict(TypedDict):
        host: pulumi.Input[_builtins.str]
        """
        Specifies the backend host.
        """
        path: pulumi.Input[_builtins.str]
        """
        Specifies the backend path.
        """
        protocol: pulumi.Input[_builtins.str]
        """
        Specifies the protocol of the backend request.  
        The valid values are as follows:
        + **PROTOCOL_TYPE_HTTP**
        + **PROTOCOL_TYPE_HTTPS**
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        backend_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataserviceApiBackendConfigBackendParamArgsDict']]]]
        """
        Specifies the backend parameters of the API.  
        The backend_params structure is documented below.
        """
        constant_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataserviceApiBackendConfigConstantParamArgsDict']]]]
        """
        Specifies the backend constant parameters of the API.  
        The constant_params structure is documented below.

        <a name="dataservice_api_backend_config_backend_params"></a>
        The `backend_params` block supports:
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the backend timeout.
        """
elif False:
    DataserviceApiBackendConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataserviceApiBackendConfigArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[_builtins.str],
                 path: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 backend_params: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiBackendConfigBackendParamArgs']]]] = None,
                 constant_params: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiBackendConfigConstantParamArgs']]]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] host: Specifies the backend host.
        :param pulumi.Input[_builtins.str] path: Specifies the backend path.
        :param pulumi.Input[_builtins.str] protocol: Specifies the protocol of the backend request.  
               The valid values are as follows:
               + **PROTOCOL_TYPE_HTTP**
               + **PROTOCOL_TYPE_HTTPS**
        :param pulumi.Input[_builtins.str] type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param pulumi.Input[Sequence[pulumi.Input['DataserviceApiBackendConfigBackendParamArgs']]] backend_params: Specifies the backend parameters of the API.  
               The backend_params structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['DataserviceApiBackendConfigConstantParamArgs']]] constant_params: Specifies the backend constant parameters of the API.  
               The constant_params structure is documented below.
               
               <a name="dataservice_api_backend_config_backend_params"></a>
               The `backend_params` block supports:
        :param pulumi.Input[_builtins.int] timeout: Specifies the backend timeout.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if constant_params is not None:
            pulumi.set(__self__, "constant_params", constant_params)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backend path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the protocol of the backend request.  
        The valid values are as follows:
        + **PROTOCOL_TYPE_HTTP**
        + **PROTOCOL_TYPE_HTTPS**
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiBackendConfigBackendParamArgs']]]]:
        """
        Specifies the backend parameters of the API.  
        The backend_params structure is documented below.
        """
        return pulumi.get(self, "backend_params")

    @backend_params.setter
    def backend_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiBackendConfigBackendParamArgs']]]]):
        pulumi.set(self, "backend_params", value)

    @_builtins.property
    @pulumi.getter(name="constantParams")
    def constant_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiBackendConfigConstantParamArgs']]]]:
        """
        Specifies the backend constant parameters of the API.  
        The constant_params structure is documented below.

        <a name="dataservice_api_backend_config_backend_params"></a>
        The `backend_params` block supports:
        """
        return pulumi.get(self, "constant_params")

    @constant_params.setter
    def constant_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiBackendConfigConstantParamArgs']]]]):
        pulumi.set(self, "constant_params", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the backend timeout.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class DataserviceApiBackendConfigBackendParamArgsDict(TypedDict):
        backend_param_name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the corresponding backend parameter.

        <a name="dataservice_api_backend_config_constant_params"></a>
        The `constant_params` block supports:
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the constant parameter.
        """
        position: pulumi.Input[_builtins.str]
        """
        Specifies the position of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_POSITION_PATH**
        + **REQUEST_PARAMETER_POSITION_HEADER**
        + **REQUEST_PARAMETER_POSITION_QUERY**
        """
elif False:
    DataserviceApiBackendConfigBackendParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataserviceApiBackendConfigBackendParamArgs:
    def __init__(__self__, *,
                 backend_param_name: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 position: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] backend_param_name: Specifies the name of the corresponding backend parameter.
               
               <a name="dataservice_api_backend_config_constant_params"></a>
               The `constant_params` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the name of the constant parameter.
        :param pulumi.Input[_builtins.str] position: Specifies the position of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_POSITION_PATH**
               + **REQUEST_PARAMETER_POSITION_HEADER**
               + **REQUEST_PARAMETER_POSITION_QUERY**
        """
        pulumi.set(__self__, "backend_param_name", backend_param_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)

    @_builtins.property
    @pulumi.getter(name="backendParamName")
    def backend_param_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the corresponding backend parameter.

        <a name="dataservice_api_backend_config_constant_params"></a>
        The `constant_params` block supports:
        """
        return pulumi.get(self, "backend_param_name")

    @backend_param_name.setter
    def backend_param_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "backend_param_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def position(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the position of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_POSITION_PATH**
        + **REQUEST_PARAMETER_POSITION_HEADER**
        + **REQUEST_PARAMETER_POSITION_QUERY**
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "position", value)


if not MYPY:
    class DataserviceApiBackendConfigConstantParamArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the constant parameter.
        """
        position: pulumi.Input[_builtins.str]
        """
        Specifies the position of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_POSITION_PATH**
        + **REQUEST_PARAMETER_POSITION_HEADER**
        + **REQUEST_PARAMETER_POSITION_QUERY**
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the constant parameter.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the constant parameter.
        """
elif False:
    DataserviceApiBackendConfigConstantParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataserviceApiBackendConfigConstantParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 position: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the constant parameter.
        :param pulumi.Input[_builtins.str] position: Specifies the position of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_POSITION_PATH**
               + **REQUEST_PARAMETER_POSITION_HEADER**
               + **REQUEST_PARAMETER_POSITION_QUERY**
        :param pulumi.Input[_builtins.str] type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param pulumi.Input[_builtins.str] value: Specifies the value of the constant parameter.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def position(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the position of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_POSITION_PATH**
        + **REQUEST_PARAMETER_POSITION_HEADER**
        + **REQUEST_PARAMETER_POSITION_QUERY**
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "position", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the constant parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the constant parameter.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class DataserviceApiDatasourceConfigArgsDict(TypedDict):
        database: pulumi.Input[_builtins.str]
        """
        Specifies the name of the database.
        """
        datatable: pulumi.Input[_builtins.str]
        """
        Specifies the name of the data table.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        access_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the access mode for the data.  
        The valid values are as follows:
        + **SQL**
        + **ROW_KEY**
        + **PREFIX_FILTER**
        """
        backend_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigBackendParamArgsDict']]]]
        """
        Specifies the backend parameters of the API.  
        The backend_params structure is documented below.
        """
        connection_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the data connection for the DataArts Studio service.
        """
        connection_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the data connection.
        """
        order_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigOrderParamArgsDict']]]]
        """
        Specifies the order parameters of the API.  
        The order_params structure is documented below.

        > All column names that appear in the data table must have corresponding parameter mappings.

        <a name="dataservice_api_datasource_config_backend_params"></a>
        The `backend_params` block supports:
        """
        queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the DLI queue.
        """
        response_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigResponseParamArgsDict']]]]
        """
        Specifies the response parameters of the API.  
        The response_params structure is documented below.
        """
        sql: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the SQL statements in script access type.
        """
        table_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the data table.
        """
elif False:
    DataserviceApiDatasourceConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataserviceApiDatasourceConfigArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[_builtins.str],
                 datatable: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 access_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_params: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigBackendParamArgs']]]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                 order_params: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigOrderParamArgs']]]] = None,
                 queue: Optional[pulumi.Input[_builtins.str]] = None,
                 response_params: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigResponseParamArgs']]]] = None,
                 sql: Optional[pulumi.Input[_builtins.str]] = None,
                 table_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] database: Specifies the name of the database.
        :param pulumi.Input[_builtins.str] datatable: Specifies the name of the data table.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param pulumi.Input[_builtins.str] access_mode: Specifies the access mode for the data.  
               The valid values are as follows:
               + **SQL**
               + **ROW_KEY**
               + **PREFIX_FILTER**
        :param pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigBackendParamArgs']]] backend_params: Specifies the backend parameters of the API.  
               The backend_params structure is documented below.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the data connection for the DataArts Studio service.
        :param pulumi.Input[_builtins.str] connection_name: The name of the data connection.
        :param pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigOrderParamArgs']]] order_params: Specifies the order parameters of the API.  
               The order_params structure is documented below.
               
               > All column names that appear in the data table must have corresponding parameter mappings.
               
               <a name="dataservice_api_datasource_config_backend_params"></a>
               The `backend_params` block supports:
        :param pulumi.Input[_builtins.str] queue: Specifies the ID of the DLI queue.
        :param pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigResponseParamArgs']]] response_params: Specifies the response parameters of the API.  
               The response_params structure is documented below.
        :param pulumi.Input[_builtins.str] sql: Specifies the SQL statements in script access type.
        :param pulumi.Input[_builtins.str] table_id: The ID of the data table.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "datatable", datatable)
        pulumi.set(__self__, "type", type)
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connection_name is not None:
            pulumi.set(__self__, "connection_name", connection_name)
        if order_params is not None:
            pulumi.set(__self__, "order_params", order_params)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if response_params is not None:
            pulumi.set(__self__, "response_params", response_params)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)

    @_builtins.property
    @pulumi.getter
    def database(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "database", value)

    @_builtins.property
    @pulumi.getter
    def datatable(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the data table.
        """
        return pulumi.get(self, "datatable")

    @datatable.setter
    def datatable(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datatable", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the access mode for the data.  
        The valid values are as follows:
        + **SQL**
        + **ROW_KEY**
        + **PREFIX_FILTER**
        """
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_mode", value)

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigBackendParamArgs']]]]:
        """
        Specifies the backend parameters of the API.  
        The backend_params structure is documented below.
        """
        return pulumi.get(self, "backend_params")

    @backend_params.setter
    def backend_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigBackendParamArgs']]]]):
        pulumi.set(self, "backend_params", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the data connection for the DataArts Studio service.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="connectionName")
    def connection_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the data connection.
        """
        return pulumi.get(self, "connection_name")

    @connection_name.setter
    def connection_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_name", value)

    @_builtins.property
    @pulumi.getter(name="orderParams")
    def order_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigOrderParamArgs']]]]:
        """
        Specifies the order parameters of the API.  
        The order_params structure is documented below.

        > All column names that appear in the data table must have corresponding parameter mappings.

        <a name="dataservice_api_datasource_config_backend_params"></a>
        The `backend_params` block supports:
        """
        return pulumi.get(self, "order_params")

    @order_params.setter
    def order_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigOrderParamArgs']]]]):
        pulumi.set(self, "order_params", value)

    @_builtins.property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the DLI queue.
        """
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue", value)

    @_builtins.property
    @pulumi.getter(name="responseParams")
    def response_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigResponseParamArgs']]]]:
        """
        Specifies the response parameters of the API.  
        The response_params structure is documented below.
        """
        return pulumi.get(self, "response_params")

    @response_params.setter
    def response_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataserviceApiDatasourceConfigResponseParamArgs']]]]):
        pulumi.set(self, "response_params", value)

    @_builtins.property
    @pulumi.getter
    def sql(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the SQL statements in script access type.
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sql", value)

    @_builtins.property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the data table.
        """
        return pulumi.get(self, "table_id")

    @table_id.setter
    def table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_id", value)


if not MYPY:
    class DataserviceApiDatasourceConfigBackendParamArgsDict(TypedDict):
        mapping: pulumi.Input[_builtins.str]
        """
        Specifies the name of the mapping parameter.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the constant parameter.
        """
        condition: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the condition character.  
        The valid values are as follows:
        + **CONDITION_TYPE_EQ**: =
        + **CONDITION_TYPE_NE**: <>
        + **CONDITION_TYPE_GT**: >
        + **CONDITION_TYPE_GE**: >=
        + **CONDITION_TYPE_LT**: <
        + **CONDITION_TYPE_LE**: <=
        + **CONDITION_TYPE_LIKE**: %like%
        + **CONDITION_TYPE_LIKE_L**: %like
        + **CONDITION_TYPE_LIKE_R**: like%

        <a name="dataservice_api_datasource_config_response_params"></a>
        The `response_params` block supports:
        """
elif False:
    DataserviceApiDatasourceConfigBackendParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataserviceApiDatasourceConfigBackendParamArgs:
    def __init__(__self__, *,
                 mapping: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 condition: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] mapping: Specifies the name of the mapping parameter.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the constant parameter.
        :param pulumi.Input[_builtins.str] condition: Specifies the condition character.  
               The valid values are as follows:
               + **CONDITION_TYPE_EQ**: =
               + **CONDITION_TYPE_NE**: <>
               + **CONDITION_TYPE_GT**: >
               + **CONDITION_TYPE_GE**: >=
               + **CONDITION_TYPE_LT**: <
               + **CONDITION_TYPE_LE**: <=
               + **CONDITION_TYPE_LIKE**: %like%
               + **CONDITION_TYPE_LIKE_L**: %like
               + **CONDITION_TYPE_LIKE_R**: like%
               
               <a name="dataservice_api_datasource_config_response_params"></a>
               The `response_params` block supports:
        """
        pulumi.set(__self__, "mapping", mapping)
        pulumi.set(__self__, "name", name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @_builtins.property
    @pulumi.getter
    def mapping(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the mapping parameter.
        """
        return pulumi.get(self, "mapping")

    @mapping.setter
    def mapping(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mapping", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the condition character.  
        The valid values are as follows:
        + **CONDITION_TYPE_EQ**: =
        + **CONDITION_TYPE_NE**: <>
        + **CONDITION_TYPE_GT**: >
        + **CONDITION_TYPE_GE**: >=
        + **CONDITION_TYPE_LT**: <
        + **CONDITION_TYPE_LE**: <=
        + **CONDITION_TYPE_LIKE**: %like%
        + **CONDITION_TYPE_LIKE_L**: %like
        + **CONDITION_TYPE_LIKE_R**: like%

        <a name="dataservice_api_datasource_config_response_params"></a>
        The `response_params` block supports:
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "condition", value)


if not MYPY:
    class DataserviceApiDatasourceConfigOrderParamArgsDict(TypedDict):
        field: pulumi.Input[_builtins.str]
        """
        Specifies the corresponding parameter field for the order parameter.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the constant parameter.
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether this order parameter is the optional parameter.
        """
        order: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the order of the sorting parameters.

        <a name="dataservice_api_request_params"></a>
        The `request_params` block supports:
        """
        sort: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the sort type of the order parameter.  
        The valid values are as follows:
        + **ASC**
        + **DESC**
        + **CUSTOM**
        """
elif False:
    DataserviceApiDatasourceConfigOrderParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataserviceApiDatasourceConfigOrderParamArgs:
    def __init__(__self__, *,
                 field: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 order: Optional[pulumi.Input[_builtins.int]] = None,
                 sort: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] field: Specifies the corresponding parameter field for the order parameter.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the constant parameter.
        :param pulumi.Input[_builtins.bool] optional: Specifies whether this order parameter is the optional parameter.
        :param pulumi.Input[_builtins.int] order: Specifies the order of the sorting parameters.
               
               <a name="dataservice_api_request_params"></a>
               The `request_params` block supports:
        :param pulumi.Input[_builtins.str] sort: Specifies the sort type of the order parameter.  
               The valid values are as follows:
               + **ASC**
               + **DESC**
               + **CUSTOM**
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @_builtins.property
    @pulumi.getter
    def field(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the corresponding parameter field for the order parameter.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "field", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether this order parameter is the optional parameter.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the order of the sorting parameters.

        <a name="dataservice_api_request_params"></a>
        The `request_params` block supports:
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "order", value)

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the sort type of the order parameter.  
        The valid values are as follows:
        + **ASC**
        + **DESC**
        + **CUSTOM**
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sort", value)


if not MYPY:
    class DataserviceApiDatasourceConfigResponseParamArgsDict(TypedDict):
        field: pulumi.Input[_builtins.str]
        """
        Specifies the corresponding parameter field for the order parameter.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the constant parameter.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the constant parameter.
        """
        example_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the example value of the request parameter.
        """
elif False:
    DataserviceApiDatasourceConfigResponseParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataserviceApiDatasourceConfigResponseParamArgs:
    def __init__(__self__, *,
                 field: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 example_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] field: Specifies the corresponding parameter field for the order parameter.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the constant parameter.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant parameter.
        :param pulumi.Input[_builtins.str] example_value: Specifies the example value of the request parameter.
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if example_value is not None:
            pulumi.set(__self__, "example_value", example_value)

    @_builtins.property
    @pulumi.getter
    def field(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the corresponding parameter field for the order parameter.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "field", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the constant parameter.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="exampleValue")
    def example_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the example value of the request parameter.
        """
        return pulumi.get(self, "example_value")

    @example_value.setter
    def example_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "example_value", value)


if not MYPY:
    class DataserviceApiHostArgsDict(TypedDict):
        domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The list of gateway damains.
        """
        external_host: NotRequired[pulumi.Input[_builtins.str]]
        """
        The exrernal address.
        """
        instance_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The cluster ID to which the API belongs.
        """
        instance_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The cluster name to which the API belongs.
        """
        intranet_host: NotRequired[pulumi.Input[_builtins.str]]
        """
        The intranet address.
        """
elif False:
    DataserviceApiHostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataserviceApiHostArgs:
    def __init__(__self__, *,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 external_host: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 intranet_host: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] domains: The list of gateway damains.
        :param pulumi.Input[_builtins.str] external_host: The exrernal address.
        :param pulumi.Input[_builtins.str] instance_id: The cluster ID to which the API belongs.
        :param pulumi.Input[_builtins.str] instance_name: The cluster name to which the API belongs.
        :param pulumi.Input[_builtins.str] intranet_host: The intranet address.
        """
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if external_host is not None:
            pulumi.set(__self__, "external_host", external_host)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if intranet_host is not None:
            pulumi.set(__self__, "intranet_host", intranet_host)

    @_builtins.property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of gateway damains.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "domains", value)

    @_builtins.property
    @pulumi.getter(name="externalHost")
    def external_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The exrernal address.
        """
        return pulumi.get(self, "external_host")

    @external_host.setter
    def external_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_host", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster ID to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster name to which the API belongs.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_name", value)

    @_builtins.property
    @pulumi.getter(name="intranetHost")
    def intranet_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The intranet address.
        """
        return pulumi.get(self, "intranet_host")

    @intranet_host.setter
    def intranet_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "intranet_host", value)


if not MYPY:
    class DataserviceApiRequestParamArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the constant parameter.
        """
        position: pulumi.Input[_builtins.str]
        """
        Specifies the position of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_POSITION_PATH**
        + **REQUEST_PARAMETER_POSITION_HEADER**
        + **REQUEST_PARAMETER_POSITION_QUERY**
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        default_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the default value of the request parameter.

        <a name="dataservice_api_backend_config"></a>
        The `backend_config` block supports:
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the constant parameter.
        """
        example_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the example value of the request parameter.
        """
        necessary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether this parameter is the required parameter.
        """
elif False:
    DataserviceApiRequestParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataserviceApiRequestParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 position: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 default_value: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 example_value: Optional[pulumi.Input[_builtins.str]] = None,
                 necessary: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the constant parameter.
        :param pulumi.Input[_builtins.str] position: Specifies the position of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_POSITION_PATH**
               + **REQUEST_PARAMETER_POSITION_HEADER**
               + **REQUEST_PARAMETER_POSITION_QUERY**
        :param pulumi.Input[_builtins.str] type: Specifies the type of the constant parameter.  
               The valid values are as follows:
               + **REQUEST_PARAMETER_TYPE_NUMBER**
               + **REQUEST_PARAMETER_TYPE_STRING**
        :param pulumi.Input[_builtins.str] default_value: Specifies the default value of the request parameter.
               
               <a name="dataservice_api_backend_config"></a>
               The `backend_config` block supports:
        :param pulumi.Input[_builtins.str] description: Specifies the description of the constant parameter.
        :param pulumi.Input[_builtins.str] example_value: Specifies the example value of the request parameter.
        :param pulumi.Input[_builtins.bool] necessary: Specifies whether this parameter is the required parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "type", type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if example_value is not None:
            pulumi.set(__self__, "example_value", example_value)
        if necessary is not None:
            pulumi.set(__self__, "necessary", necessary)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the constant parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def position(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the position of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_POSITION_PATH**
        + **REQUEST_PARAMETER_POSITION_HEADER**
        + **REQUEST_PARAMETER_POSITION_QUERY**
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "position", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the constant parameter.  
        The valid values are as follows:
        + **REQUEST_PARAMETER_TYPE_NUMBER**
        + **REQUEST_PARAMETER_TYPE_STRING**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the default value of the request parameter.

        <a name="dataservice_api_backend_config"></a>
        The `backend_config` block supports:
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the constant parameter.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="exampleValue")
    def example_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the example value of the request parameter.
        """
        return pulumi.get(self, "example_value")

    @example_value.setter
    def example_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "example_value", value)

    @_builtins.property
    @pulumi.getter
    def necessary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether this parameter is the required parameter.
        """
        return pulumi.get(self, "necessary")

    @necessary.setter
    def necessary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "necessary", value)


if not MYPY:
    class FactoryJobBasicConfigArgsDict(TypedDict):
        custom_fields: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Custom fields.
        """
        execute_user: NotRequired[pulumi.Input[_builtins.str]]
        """
        Job execution user. The value must be an existing user.
        """
        instance_timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Maximum execution time of a job instance.  
        Unit: minute; value range: `5` to `1440`.
        Default value: `60`.
        """
        owner: NotRequired[pulumi.Input[_builtins.str]]
        """
        Job owner.
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Job priority.  
        The value ranges from `0` to `2`.
        `0` indicates a top priority, `1` indicates a medium priority, and `2` indicates a low priority.
        Default value: `0`.
        """
elif False:
    FactoryJobBasicConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobBasicConfigArgs:
    def __init__(__self__, *,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 execute_user: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_fields: Custom fields.
        :param pulumi.Input[_builtins.str] execute_user: Job execution user. The value must be an existing user.
        :param pulumi.Input[_builtins.int] instance_timeout: Maximum execution time of a job instance.  
               Unit: minute; value range: `5` to `1440`.
               Default value: `60`.
        :param pulumi.Input[_builtins.str] owner: Job owner.
        :param pulumi.Input[_builtins.int] priority: Job priority.  
               The value ranges from `0` to `2`.
               `0` indicates a top priority, `1` indicates a medium priority, and `2` indicates a low priority.
               Default value: `0`.
        """
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if execute_user is not None:
            pulumi.set(__self__, "execute_user", execute_user)
        if instance_timeout is not None:
            pulumi.set(__self__, "instance_timeout", instance_timeout)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Custom fields.
        """
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter(name="executeUser")
    def execute_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Job execution user. The value must be an existing user.
        """
        return pulumi.get(self, "execute_user")

    @execute_user.setter
    def execute_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "execute_user", value)

    @_builtins.property
    @pulumi.getter(name="instanceTimeout")
    def instance_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum execution time of a job instance.  
        Unit: minute; value range: `5` to `1440`.
        Default value: `60`.
        """
        return pulumi.get(self, "instance_timeout")

    @instance_timeout.setter
    def instance_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "instance_timeout", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Job owner.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Job priority.  
        The value ranges from `0` to `2`.
        `0` indicates a top priority, `1` indicates a medium priority, and `2` indicates a low priority.
        Default value: `0`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)


if not MYPY:
    class FactoryJobNodeArgsDict(TypedDict):
        location: pulumi.Input['FactoryJobNodeLocationArgsDict']
        """
        Location of a node on the job canvas
        The location structure is documented below.
        """
        name: pulumi.Input[_builtins.str]
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        properties: pulumi.Input[Sequence[pulumi.Input['FactoryJobNodePropertyArgsDict']]]
        """
        Node property. Each type of node has its own property definition.  
        - **HiveSQL**: For details, see [Table 14](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **SparkSQL**: For details, see [Table 15](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DWSSQL**: For details, see [Table 16](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DLISQL**: For details, see [Table 17](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **Shell**: For details, see [Table 18](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **CDMJob**: For details, see [Table 19](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DISTransferTask**: For details, see [Table 20](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **CloudTableManager**: For details, see [Table 21](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **OBSManager**: For details, see [Table 22](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **RESTClient**: For details, see [Table 23](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **SMN**: For details, see [Table 24](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MRSSpark**: For details, see [Table 25](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MapReduce**: For details, see [Table 26](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DLISpark**: For details, see [Table 27](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MRSFlinkJob**: For details, see [Table 29](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MRSHetuEngine**: For details, see [Table 30](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).

        The properties structure is documented below.
        """
        type: pulumi.Input[_builtins.str]
        """
        Parameter type.  
        The valid values are as follows:
        - **variable**
        - **constants**

        Defaults to **variable**.

        <a name="job_BasicConfig"></a>
        The `basic_config` block supports:
        """
        conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeConditionArgsDict']]]]
        """
        Node execution condition.  
        Whether the node is executed or not depends on the calculation result of the EL expression saved
        in the expression field of condition.
        The conditions structure is documented below.
        """
        cron_trigger: NotRequired[pulumi.Input['FactoryJobNodeCronTriggerArgsDict']]
        """
        Cron trigger for the real-time job node
        The cron_trigger structure is documented below.

        <a name="job_Location"></a>
        The `location` block supports:
        """
        event_trigger: NotRequired[pulumi.Input['FactoryJobNodeEventTriggerArgsDict']]
        """
        Event trigger for the real-time job node.
        The event_trigger structure is documented below.
        """
        fail_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Job failure policy.  
        The valid values are as follows:
        - **SUSPEND**: Suspend the event.
        - **IGNORE**: Ignore the failure and process with the next event.

        The default value is **SUSPEND**.
        """
        max_execution_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Maximum execution time of a node.  
        If a node is not executed within the maximum execution time, the node is set to the failed state.
        Unit: minute; value range: `5` to `1,440`.
        Default value: `60`.
        """
        polling_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Interval at which node running results are checked.  
        Unit: second; value range: `1` to `60`.
        Default value: `10`.
        """
        pre_node_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Name of the previous node on which the current node depends.
        """
        retry_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Interval at which a retry is performed upon a failure.  
        The value ranges from `5` to `120`.
        Unit: second.
        Default value: `120`.
        """
        retry_times: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of the node retries.  
        The value ranges from `0` to `5`. `0` indicates no retry.
        Default value: `0`.
        """
elif False:
    FactoryJobNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobNodeArgs:
    def __init__(__self__, *,
                 location: pulumi.Input['FactoryJobNodeLocationArgs'],
                 name: pulumi.Input[_builtins.str],
                 properties: pulumi.Input[Sequence[pulumi.Input['FactoryJobNodePropertyArgs']]],
                 type: pulumi.Input[_builtins.str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeConditionArgs']]]] = None,
                 cron_trigger: Optional[pulumi.Input['FactoryJobNodeCronTriggerArgs']] = None,
                 event_trigger: Optional[pulumi.Input['FactoryJobNodeEventTriggerArgs']] = None,
                 fail_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 max_execution_time: Optional[pulumi.Input[_builtins.int]] = None,
                 polling_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 pre_node_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 retry_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 retry_times: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input['FactoryJobNodeLocationArgs'] location: Location of a node on the job canvas
               The location structure is documented below.
        :param pulumi.Input[_builtins.str] name: Name of a parameter.  
               The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
               underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input['FactoryJobNodePropertyArgs']]] properties: Node property. Each type of node has its own property definition.  
               - **HiveSQL**: For details, see [Table 14](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **SparkSQL**: For details, see [Table 15](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **DWSSQL**: For details, see [Table 16](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **DLISQL**: For details, see [Table 17](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **Shell**: For details, see [Table 18](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **CDMJob**: For details, see [Table 19](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **DISTransferTask**: For details, see [Table 20](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **CloudTableManager**: For details, see [Table 21](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **OBSManager**: For details, see [Table 22](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **RESTClient**: For details, see [Table 23](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **SMN**: For details, see [Table 24](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **MRSSpark**: For details, see [Table 25](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **MapReduce**: For details, see [Table 26](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **DLISpark**: For details, see [Table 27](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **MRSFlinkJob**: For details, see [Table 29](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               - **MRSHetuEngine**: For details, see [Table 30](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
               
               The properties structure is documented below.
        :param pulumi.Input[_builtins.str] type: Parameter type.  
               The valid values are as follows:
               - **variable**
               - **constants**
               
               Defaults to **variable**.
               
               <a name="job_BasicConfig"></a>
               The `basic_config` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeConditionArgs']]] conditions: Node execution condition.  
               Whether the node is executed or not depends on the calculation result of the EL expression saved
               in the expression field of condition.
               The conditions structure is documented below.
        :param pulumi.Input['FactoryJobNodeCronTriggerArgs'] cron_trigger: Cron trigger for the real-time job node
               The cron_trigger structure is documented below.
               
               <a name="job_Location"></a>
               The `location` block supports:
        :param pulumi.Input['FactoryJobNodeEventTriggerArgs'] event_trigger: Event trigger for the real-time job node.
               The event_trigger structure is documented below.
        :param pulumi.Input[_builtins.str] fail_policy: Job failure policy.  
               The valid values are as follows:
               - **SUSPEND**: Suspend the event.
               - **IGNORE**: Ignore the failure and process with the next event.
               
               The default value is **SUSPEND**.
        :param pulumi.Input[_builtins.int] max_execution_time: Maximum execution time of a node.  
               If a node is not executed within the maximum execution time, the node is set to the failed state.
               Unit: minute; value range: `5` to `1,440`.
               Default value: `60`.
        :param pulumi.Input[_builtins.int] polling_interval: Interval at which node running results are checked.  
               Unit: second; value range: `1` to `60`.
               Default value: `10`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pre_node_names: Name of the previous node on which the current node depends.
        :param pulumi.Input[_builtins.int] retry_interval: Interval at which a retry is performed upon a failure.  
               The value ranges from `5` to `120`.
               Unit: second.
               Default value: `120`.
        :param pulumi.Input[_builtins.int] retry_times: Number of the node retries.  
               The value ranges from `0` to `5`. `0` indicates no retry.
               Default value: `0`.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "type", type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if cron_trigger is not None:
            pulumi.set(__self__, "cron_trigger", cron_trigger)
        if event_trigger is not None:
            pulumi.set(__self__, "event_trigger", event_trigger)
        if fail_policy is not None:
            pulumi.set(__self__, "fail_policy", fail_policy)
        if max_execution_time is not None:
            pulumi.set(__self__, "max_execution_time", max_execution_time)
        if polling_interval is not None:
            pulumi.set(__self__, "polling_interval", polling_interval)
        if pre_node_names is not None:
            pulumi.set(__self__, "pre_node_names", pre_node_names)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if retry_times is not None:
            pulumi.set(__self__, "retry_times", retry_times)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input['FactoryJobNodeLocationArgs']:
        """
        Location of a node on the job canvas
        The location structure is documented below.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input['FactoryJobNodeLocationArgs']):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> pulumi.Input[Sequence[pulumi.Input['FactoryJobNodePropertyArgs']]]:
        """
        Node property. Each type of node has its own property definition.  
        - **HiveSQL**: For details, see [Table 14](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **SparkSQL**: For details, see [Table 15](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DWSSQL**: For details, see [Table 16](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DLISQL**: For details, see [Table 17](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **Shell**: For details, see [Table 18](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **CDMJob**: For details, see [Table 19](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DISTransferTask**: For details, see [Table 20](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **CloudTableManager**: For details, see [Table 21](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **OBSManager**: For details, see [Table 22](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **RESTClient**: For details, see [Table 23](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **SMN**: For details, see [Table 24](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MRSSpark**: For details, see [Table 25](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MapReduce**: For details, see [Table 26](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **DLISpark**: For details, see [Table 27](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MRSFlinkJob**: For details, see [Table 29](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).
        - **MRSHetuEngine**: For details, see [Table 30](https://support.huaweicloud.com/intl/en-us/api-dataartsstudio/dataartsstudio_02_0084.html).

        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input[Sequence[pulumi.Input['FactoryJobNodePropertyArgs']]]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Parameter type.  
        The valid values are as follows:
        - **variable**
        - **constants**

        Defaults to **variable**.

        <a name="job_BasicConfig"></a>
        The `basic_config` block supports:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeConditionArgs']]]]:
        """
        Node execution condition.  
        Whether the node is executed or not depends on the calculation result of the EL expression saved
        in the expression field of condition.
        The conditions structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter(name="cronTrigger")
    def cron_trigger(self) -> Optional[pulumi.Input['FactoryJobNodeCronTriggerArgs']]:
        """
        Cron trigger for the real-time job node
        The cron_trigger structure is documented below.

        <a name="job_Location"></a>
        The `location` block supports:
        """
        return pulumi.get(self, "cron_trigger")

    @cron_trigger.setter
    def cron_trigger(self, value: Optional[pulumi.Input['FactoryJobNodeCronTriggerArgs']]):
        pulumi.set(self, "cron_trigger", value)

    @_builtins.property
    @pulumi.getter(name="eventTrigger")
    def event_trigger(self) -> Optional[pulumi.Input['FactoryJobNodeEventTriggerArgs']]:
        """
        Event trigger for the real-time job node.
        The event_trigger structure is documented below.
        """
        return pulumi.get(self, "event_trigger")

    @event_trigger.setter
    def event_trigger(self, value: Optional[pulumi.Input['FactoryJobNodeEventTriggerArgs']]):
        pulumi.set(self, "event_trigger", value)

    @_builtins.property
    @pulumi.getter(name="failPolicy")
    def fail_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Job failure policy.  
        The valid values are as follows:
        - **SUSPEND**: Suspend the event.
        - **IGNORE**: Ignore the failure and process with the next event.

        The default value is **SUSPEND**.
        """
        return pulumi.get(self, "fail_policy")

    @fail_policy.setter
    def fail_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fail_policy", value)

    @_builtins.property
    @pulumi.getter(name="maxExecutionTime")
    def max_execution_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum execution time of a node.  
        If a node is not executed within the maximum execution time, the node is set to the failed state.
        Unit: minute; value range: `5` to `1,440`.
        Default value: `60`.
        """
        return pulumi.get(self, "max_execution_time")

    @max_execution_time.setter
    def max_execution_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_execution_time", value)

    @_builtins.property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval at which node running results are checked.  
        Unit: second; value range: `1` to `60`.
        Default value: `10`.
        """
        return pulumi.get(self, "polling_interval")

    @polling_interval.setter
    def polling_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "polling_interval", value)

    @_builtins.property
    @pulumi.getter(name="preNodeNames")
    def pre_node_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Name of the previous node on which the current node depends.
        """
        return pulumi.get(self, "pre_node_names")

    @pre_node_names.setter
    def pre_node_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pre_node_names", value)

    @_builtins.property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval at which a retry is performed upon a failure.  
        The value ranges from `5` to `120`.
        Unit: second.
        Default value: `120`.
        """
        return pulumi.get(self, "retry_interval")

    @retry_interval.setter
    def retry_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retry_interval", value)

    @_builtins.property
    @pulumi.getter(name="retryTimes")
    def retry_times(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of the node retries.  
        The value ranges from `0` to `5`. `0` indicates no retry.
        Default value: `0`.
        """
        return pulumi.get(self, "retry_times")

    @retry_times.setter
    def retry_times(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retry_times", value)


if not MYPY:
    class FactoryJobNodeConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        """
        Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        """
        pre_node_name: pulumi.Input[_builtins.str]
        """
        Name of the previous node on which the current node depends.
        """
elif False:
    FactoryJobNodeConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobNodeConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 pre_node_name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] expression: Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        :param pulumi.Input[_builtins.str] pre_node_name: Name of the previous node on which the current node depends.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "pre_node_name", pre_node_name)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        """
        Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter(name="preNodeName")
    def pre_node_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the previous node on which the current node depends.
        """
        return pulumi.get(self, "pre_node_name")

    @pre_node_name.setter
    def pre_node_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pre_node_name", value)


if not MYPY:
    class FactoryJobNodeCronTriggerArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        """
        Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        """
        start_time: pulumi.Input[_builtins.str]
        """
        Scheduling start time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job starts to be scheduled at 23:59:59
        on October 22nd, 2018.
        """
        concurrent: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of the concurrently scheduled jobs.  
        Value range: `1` to `128`.
        Default value: `1`.
        """
        depend_jobs: NotRequired[pulumi.Input['FactoryJobNodeCronTriggerDependJobsArgsDict']]
        """
        Job dependency configuration.
        The depend_jobs structure is documented below.

        <a name="job_ScheduleCronDependJobs"></a>
        The `depend_jobs` block supports:
        """
        depend_pre_period: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether to depend on the execution result of the current
        job's dependent job in the previous scheduling period.
        Default value: **false**.
        """
        end_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Scheduling end time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job stops to be scheduled at 23:59:59
        on October 22nd, 2018.
        If the end time is not set, the job will continuously be executed based on the scheduling period.
        """
        expression_time_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time zone corresponding to the Cron expression.  
        Default value: time zone where DataArts Studio is located
        """
        period: NotRequired[pulumi.Input[_builtins.str]]
        """
        Job execution interval consisting of a time and time unit.  
        Example: 1 hours, 1 days, 1 weeks, 1 months.
        The value must match the value of expression.
        """
elif False:
    FactoryJobNodeCronTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobNodeCronTriggerArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 start_time: pulumi.Input[_builtins.str],
                 concurrent: Optional[pulumi.Input[_builtins.int]] = None,
                 depend_jobs: Optional[pulumi.Input['FactoryJobNodeCronTriggerDependJobsArgs']] = None,
                 depend_pre_period: Optional[pulumi.Input[_builtins.bool]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 expression_time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] expression: Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        :param pulumi.Input[_builtins.str] start_time: Scheduling start time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
               which is an ISO 8601 time format.
               For example, 2018-10-22T23:59:59+08, which indicates that a job starts to be scheduled at 23:59:59
               on October 22nd, 2018.
        :param pulumi.Input[_builtins.int] concurrent: Number of the concurrently scheduled jobs.  
               Value range: `1` to `128`.
               Default value: `1`.
        :param pulumi.Input['FactoryJobNodeCronTriggerDependJobsArgs'] depend_jobs: Job dependency configuration.
               The depend_jobs structure is documented below.
               
               <a name="job_ScheduleCronDependJobs"></a>
               The `depend_jobs` block supports:
        :param pulumi.Input[_builtins.bool] depend_pre_period: Indicates whether to depend on the execution result of the current
               job's dependent job in the previous scheduling period.
               Default value: **false**.
        :param pulumi.Input[_builtins.str] end_time: Scheduling end time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
               which is an ISO 8601 time format.
               For example, 2018-10-22T23:59:59+08, which indicates that a job stops to be scheduled at 23:59:59
               on October 22nd, 2018.
               If the end time is not set, the job will continuously be executed based on the scheduling period.
        :param pulumi.Input[_builtins.str] expression_time_zone: Time zone corresponding to the Cron expression.  
               Default value: time zone where DataArts Studio is located
        :param pulumi.Input[_builtins.str] period: Job execution interval consisting of a time and time unit.  
               Example: 1 hours, 1 days, 1 weeks, 1 months.
               The value must match the value of expression.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "start_time", start_time)
        if concurrent is not None:
            pulumi.set(__self__, "concurrent", concurrent)
        if depend_jobs is not None:
            pulumi.set(__self__, "depend_jobs", depend_jobs)
        if depend_pre_period is not None:
            pulumi.set(__self__, "depend_pre_period", depend_pre_period)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if expression_time_zone is not None:
            pulumi.set(__self__, "expression_time_zone", expression_time_zone)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        """
        Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[_builtins.str]:
        """
        Scheduling start time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job starts to be scheduled at 23:59:59
        on October 22nd, 2018.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def concurrent(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of the concurrently scheduled jobs.  
        Value range: `1` to `128`.
        Default value: `1`.
        """
        return pulumi.get(self, "concurrent")

    @concurrent.setter
    def concurrent(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "concurrent", value)

    @_builtins.property
    @pulumi.getter(name="dependJobs")
    def depend_jobs(self) -> Optional[pulumi.Input['FactoryJobNodeCronTriggerDependJobsArgs']]:
        """
        Job dependency configuration.
        The depend_jobs structure is documented below.

        <a name="job_ScheduleCronDependJobs"></a>
        The `depend_jobs` block supports:
        """
        return pulumi.get(self, "depend_jobs")

    @depend_jobs.setter
    def depend_jobs(self, value: Optional[pulumi.Input['FactoryJobNodeCronTriggerDependJobsArgs']]):
        pulumi.set(self, "depend_jobs", value)

    @_builtins.property
    @pulumi.getter(name="dependPrePeriod")
    def depend_pre_period(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to depend on the execution result of the current
        job's dependent job in the previous scheduling period.
        Default value: **false**.
        """
        return pulumi.get(self, "depend_pre_period")

    @depend_pre_period.setter
    def depend_pre_period(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "depend_pre_period", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Scheduling end time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job stops to be scheduled at 23:59:59
        on October 22nd, 2018.
        If the end time is not set, the job will continuously be executed based on the scheduling period.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="expressionTimeZone")
    def expression_time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time zone corresponding to the Cron expression.  
        Default value: time zone where DataArts Studio is located
        """
        return pulumi.get(self, "expression_time_zone")

    @expression_time_zone.setter
    def expression_time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expression_time_zone", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Job execution interval consisting of a time and time unit.  
        Example: 1 hours, 1 days, 1 weeks, 1 months.
        The value must match the value of expression.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)


if not MYPY:
    class FactoryJobNodeCronTriggerDependJobsArgsDict(TypedDict):
        jobs: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        A list of dependent jobs. Only the existing jobs can be depended on.
        """
        depend_fail_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Dependency job failure policy.  
        The valid values are as follows:
        - **FAIL**: Stop the job and set the job to the failed state.
        - **IGNORE**: Continue to run the job.
        - **SUSPEND**: Suspend the job.

        The default value is **FAIL**.

        <a name="job_ScheduleEvent"></a>
        The `event` block supports:
        """
        depend_period: NotRequired[pulumi.Input[_builtins.str]]
        """
        Dependency period.  
        The valid values are as follows:
        - **SAME_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the current scheduling period.
        - **PRE_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the previous scheduling period.

        The default value is **SAME_PERIOD**.
        """
elif False:
    FactoryJobNodeCronTriggerDependJobsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobNodeCronTriggerDependJobsArgs:
    def __init__(__self__, *,
                 jobs: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 depend_fail_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 depend_period: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] jobs: A list of dependent jobs. Only the existing jobs can be depended on.
        :param pulumi.Input[_builtins.str] depend_fail_policy: Dependency job failure policy.  
               The valid values are as follows:
               - **FAIL**: Stop the job and set the job to the failed state.
               - **IGNORE**: Continue to run the job.
               - **SUSPEND**: Suspend the job.
               
               The default value is **FAIL**.
               
               <a name="job_ScheduleEvent"></a>
               The `event` block supports:
        :param pulumi.Input[_builtins.str] depend_period: Dependency period.  
               The valid values are as follows:
               - **SAME_PERIOD**: To run a job or not depends on the execution result of its depended job in
               the current scheduling period.
               - **PRE_PERIOD**: To run a job or not depends on the execution result of its depended job in
               the previous scheduling period.
               
               The default value is **SAME_PERIOD**.
        """
        pulumi.set(__self__, "jobs", jobs)
        if depend_fail_policy is not None:
            pulumi.set(__self__, "depend_fail_policy", depend_fail_policy)
        if depend_period is not None:
            pulumi.set(__self__, "depend_period", depend_period)

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        A list of dependent jobs. Only the existing jobs can be depended on.
        """
        return pulumi.get(self, "jobs")

    @jobs.setter
    def jobs(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "jobs", value)

    @_builtins.property
    @pulumi.getter(name="dependFailPolicy")
    def depend_fail_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dependency job failure policy.  
        The valid values are as follows:
        - **FAIL**: Stop the job and set the job to the failed state.
        - **IGNORE**: Continue to run the job.
        - **SUSPEND**: Suspend the job.

        The default value is **FAIL**.

        <a name="job_ScheduleEvent"></a>
        The `event` block supports:
        """
        return pulumi.get(self, "depend_fail_policy")

    @depend_fail_policy.setter
    def depend_fail_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "depend_fail_policy", value)

    @_builtins.property
    @pulumi.getter(name="dependPeriod")
    def depend_period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dependency period.  
        The valid values are as follows:
        - **SAME_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the current scheduling period.
        - **PRE_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the previous scheduling period.

        The default value is **SAME_PERIOD**.
        """
        return pulumi.get(self, "depend_period")

    @depend_period.setter
    def depend_period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "depend_period", value)


if not MYPY:
    class FactoryJobNodeEventTriggerArgsDict(TypedDict):
        channel: pulumi.Input[_builtins.str]
        """
        DIS stream name.  
        Perform the following operations to obtain the stream name:
        - Log in to the management console.
        - Click **Data Ingestion Service** and select **Stream Management** from the left navigation pane.
        - The stream management page lists the existing streams.
        """
        event_type: pulumi.Input[_builtins.str]
        """
        Event type.  
        The valid values are as follows:
        - **KAFKA**: Select the corresponding connection name and topic. When a new Kafka message is
        received, the job is triggered.
        - **OBS**: Select the OBS path to be listened to. If new files exist in the path, scheduling is
        triggered. The path name can be referenced using variable Job.trigger.obsNewFiles. The
        prerequisite is that DIS notifications have been configured for the OBS path.
        - **DIS**: Currently, only newly reported data events from the DIS stream can be monitored.
        Each time a data record is reported, the job runs once.
        """
        concurrent: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of the concurrently scheduled jobs.  
        Value range: `1` to `128`.
        Default value: `1`.
        """
        fail_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Job failure policy.  
        The valid values are as follows:
        - **SUSPEND**: Suspend the event.
        - **IGNORE**: Ignore the failure and process with the next event.

        The default value is **SUSPEND**.
        """
        read_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Access policy.  
        The valid values are as follows:
        - **LAST**: Access data from the last location.
        - **NEW**: Access data from a new location.

        The default value is **LAST**.

        <a name="job_Param"></a>
        The `params` block supports:
        """
elif False:
    FactoryJobNodeEventTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobNodeEventTriggerArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input[_builtins.str],
                 event_type: pulumi.Input[_builtins.str],
                 concurrent: Optional[pulumi.Input[_builtins.int]] = None,
                 fail_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 read_policy: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] channel: DIS stream name.  
               Perform the following operations to obtain the stream name:
               - Log in to the management console.
               - Click **Data Ingestion Service** and select **Stream Management** from the left navigation pane.
               - The stream management page lists the existing streams.
        :param pulumi.Input[_builtins.str] event_type: Event type.  
               The valid values are as follows:
               - **KAFKA**: Select the corresponding connection name and topic. When a new Kafka message is
               received, the job is triggered.
               - **OBS**: Select the OBS path to be listened to. If new files exist in the path, scheduling is
               triggered. The path name can be referenced using variable Job.trigger.obsNewFiles. The
               prerequisite is that DIS notifications have been configured for the OBS path.
               - **DIS**: Currently, only newly reported data events from the DIS stream can be monitored.
               Each time a data record is reported, the job runs once.
        :param pulumi.Input[_builtins.int] concurrent: Number of the concurrently scheduled jobs.  
               Value range: `1` to `128`.
               Default value: `1`.
        :param pulumi.Input[_builtins.str] fail_policy: Job failure policy.  
               The valid values are as follows:
               - **SUSPEND**: Suspend the event.
               - **IGNORE**: Ignore the failure and process with the next event.
               
               The default value is **SUSPEND**.
        :param pulumi.Input[_builtins.str] read_policy: Access policy.  
               The valid values are as follows:
               - **LAST**: Access data from the last location.
               - **NEW**: Access data from a new location.
               
               The default value is **LAST**.
               
               <a name="job_Param"></a>
               The `params` block supports:
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "event_type", event_type)
        if concurrent is not None:
            pulumi.set(__self__, "concurrent", concurrent)
        if fail_policy is not None:
            pulumi.set(__self__, "fail_policy", fail_policy)
        if read_policy is not None:
            pulumi.set(__self__, "read_policy", read_policy)

    @_builtins.property
    @pulumi.getter
    def channel(self) -> pulumi.Input[_builtins.str]:
        """
        DIS stream name.  
        Perform the following operations to obtain the stream name:
        - Log in to the management console.
        - Click **Data Ingestion Service** and select **Stream Management** from the left navigation pane.
        - The stream management page lists the existing streams.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "channel", value)

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[_builtins.str]:
        """
        Event type.  
        The valid values are as follows:
        - **KAFKA**: Select the corresponding connection name and topic. When a new Kafka message is
        received, the job is triggered.
        - **OBS**: Select the OBS path to be listened to. If new files exist in the path, scheduling is
        triggered. The path name can be referenced using variable Job.trigger.obsNewFiles. The
        prerequisite is that DIS notifications have been configured for the OBS path.
        - **DIS**: Currently, only newly reported data events from the DIS stream can be monitored.
        Each time a data record is reported, the job runs once.
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "event_type", value)

    @_builtins.property
    @pulumi.getter
    def concurrent(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of the concurrently scheduled jobs.  
        Value range: `1` to `128`.
        Default value: `1`.
        """
        return pulumi.get(self, "concurrent")

    @concurrent.setter
    def concurrent(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "concurrent", value)

    @_builtins.property
    @pulumi.getter(name="failPolicy")
    def fail_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Job failure policy.  
        The valid values are as follows:
        - **SUSPEND**: Suspend the event.
        - **IGNORE**: Ignore the failure and process with the next event.

        The default value is **SUSPEND**.
        """
        return pulumi.get(self, "fail_policy")

    @fail_policy.setter
    def fail_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fail_policy", value)

    @_builtins.property
    @pulumi.getter(name="readPolicy")
    def read_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access policy.  
        The valid values are as follows:
        - **LAST**: Access data from the last location.
        - **NEW**: Access data from a new location.

        The default value is **LAST**.

        <a name="job_Param"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "read_policy")

    @read_policy.setter
    def read_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "read_policy", value)


if not MYPY:
    class FactoryJobNodeLocationArgsDict(TypedDict):
        x: pulumi.Input[_builtins.int]
        """
        Position of the node on the horizontal axis of the job canvas.
        """
        y: pulumi.Input[_builtins.int]
        """
        Position of the node on the vertical axis of the job canvas.

        <a name="job_Condition"></a>
        The `conditions` block supports:
        """
elif False:
    FactoryJobNodeLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobNodeLocationArgs:
    def __init__(__self__, *,
                 x: pulumi.Input[_builtins.int],
                 y: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.int] x: Position of the node on the horizontal axis of the job canvas.
        :param pulumi.Input[_builtins.int] y: Position of the node on the vertical axis of the job canvas.
               
               <a name="job_Condition"></a>
               The `conditions` block supports:
        """
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @_builtins.property
    @pulumi.getter
    def x(self) -> pulumi.Input[_builtins.int]:
        """
        Position of the node on the horizontal axis of the job canvas.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "x", value)

    @_builtins.property
    @pulumi.getter
    def y(self) -> pulumi.Input[_builtins.int]:
        """
        Position of the node on the vertical axis of the job canvas.

        <a name="job_Condition"></a>
        The `conditions` block supports:
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "y", value)


if not MYPY:
    class FactoryJobNodePropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value of the parameter.  
        It cannot exceed 1024 characters.
        """
elif False:
    FactoryJobNodePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobNodePropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Name of a parameter.  
               The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
               underscores (_).
        :param pulumi.Input[_builtins.str] value: Value of the parameter.  
               It cannot exceed 1024 characters.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value of the parameter.  
        It cannot exceed 1024 characters.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FactoryJobParamArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        value: pulumi.Input[_builtins.str]
        """
        Value of the parameter.  
        It cannot exceed 1024 characters.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Parameter type.  
        The valid values are as follows:
        - **variable**
        - **constants**

        Defaults to **variable**.

        <a name="job_BasicConfig"></a>
        The `basic_config` block supports:
        """
elif False:
    FactoryJobParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Name of a parameter.  
               The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
               underscores (_).
        :param pulumi.Input[_builtins.str] value: Value of the parameter.  
               It cannot exceed 1024 characters.
        :param pulumi.Input[_builtins.str] type: Parameter type.  
               The valid values are as follows:
               - **variable**
               - **constants**
               
               Defaults to **variable**.
               
               <a name="job_BasicConfig"></a>
               The `basic_config` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Value of the parameter.  
        It cannot exceed 1024 characters.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Parameter type.  
        The valid values are as follows:
        - **variable**
        - **constants**

        Defaults to **variable**.

        <a name="job_BasicConfig"></a>
        The `basic_config` block supports:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FactoryJobScheduleArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Parameter type.  
        The valid values are as follows:
        - **variable**
        - **constants**

        Defaults to **variable**.

        <a name="job_BasicConfig"></a>
        The `basic_config` block supports:
        """
        cron: NotRequired[pulumi.Input['FactoryJobScheduleCronArgsDict']]
        """
        When `type` is set to **CRON**, configure the scheduling frequency and start time.
        The cron structure is documented below.
        """
        event: NotRequired[pulumi.Input['FactoryJobScheduleEventArgsDict']]
        """
        When `type` is set to **EVENT**, configure information such as the event source.
        The Event structure is documented below.

        <a name="job_ScheduleCron"></a>
        The `cron` block supports:
        """
elif False:
    FactoryJobScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobScheduleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 cron: Optional[pulumi.Input['FactoryJobScheduleCronArgs']] = None,
                 event: Optional[pulumi.Input['FactoryJobScheduleEventArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] type: Parameter type.  
               The valid values are as follows:
               - **variable**
               - **constants**
               
               Defaults to **variable**.
               
               <a name="job_BasicConfig"></a>
               The `basic_config` block supports:
        :param pulumi.Input['FactoryJobScheduleCronArgs'] cron: When `type` is set to **CRON**, configure the scheduling frequency and start time.
               The cron structure is documented below.
        :param pulumi.Input['FactoryJobScheduleEventArgs'] event: When `type` is set to **EVENT**, configure information such as the event source.
               The Event structure is documented below.
               
               <a name="job_ScheduleCron"></a>
               The `cron` block supports:
        """
        pulumi.set(__self__, "type", type)
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if event is not None:
            pulumi.set(__self__, "event", event)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Parameter type.  
        The valid values are as follows:
        - **variable**
        - **constants**

        Defaults to **variable**.

        <a name="job_BasicConfig"></a>
        The `basic_config` block supports:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input['FactoryJobScheduleCronArgs']]:
        """
        When `type` is set to **CRON**, configure the scheduling frequency and start time.
        The cron structure is documented below.
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input['FactoryJobScheduleCronArgs']]):
        pulumi.set(self, "cron", value)

    @_builtins.property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input['FactoryJobScheduleEventArgs']]:
        """
        When `type` is set to **EVENT**, configure information such as the event source.
        The Event structure is documented below.

        <a name="job_ScheduleCron"></a>
        The `cron` block supports:
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input['FactoryJobScheduleEventArgs']]):
        pulumi.set(self, "event", value)


if not MYPY:
    class FactoryJobScheduleCronArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        """
        Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        """
        start_time: pulumi.Input[_builtins.str]
        """
        Scheduling start time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job starts to be scheduled at 23:59:59
        on October 22nd, 2018.
        """
        depend_jobs: NotRequired[pulumi.Input['FactoryJobScheduleCronDependJobsArgsDict']]
        """
        Job dependency configuration.
        The depend_jobs structure is documented below.

        <a name="job_ScheduleCronDependJobs"></a>
        The `depend_jobs` block supports:
        """
        depend_pre_period: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether to depend on the execution result of the current
        job's dependent job in the previous scheduling period.
        Default value: **false**.
        """
        end_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Scheduling end time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job stops to be scheduled at 23:59:59
        on October 22nd, 2018.
        If the end time is not set, the job will continuously be executed based on the scheduling period.
        """
        expression_time_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time zone corresponding to the Cron expression.  
        Default value: time zone where DataArts Studio is located
        """
elif False:
    FactoryJobScheduleCronArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobScheduleCronArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 start_time: pulumi.Input[_builtins.str],
                 depend_jobs: Optional[pulumi.Input['FactoryJobScheduleCronDependJobsArgs']] = None,
                 depend_pre_period: Optional[pulumi.Input[_builtins.bool]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 expression_time_zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] expression: Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        :param pulumi.Input[_builtins.str] start_time: Scheduling start time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
               which is an ISO 8601 time format.
               For example, 2018-10-22T23:59:59+08, which indicates that a job starts to be scheduled at 23:59:59
               on October 22nd, 2018.
        :param pulumi.Input['FactoryJobScheduleCronDependJobsArgs'] depend_jobs: Job dependency configuration.
               The depend_jobs structure is documented below.
               
               <a name="job_ScheduleCronDependJobs"></a>
               The `depend_jobs` block supports:
        :param pulumi.Input[_builtins.bool] depend_pre_period: Indicates whether to depend on the execution result of the current
               job's dependent job in the previous scheduling period.
               Default value: **false**.
        :param pulumi.Input[_builtins.str] end_time: Scheduling end time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
               which is an ISO 8601 time format.
               For example, 2018-10-22T23:59:59+08, which indicates that a job stops to be scheduled at 23:59:59
               on October 22nd, 2018.
               If the end time is not set, the job will continuously be executed based on the scheduling period.
        :param pulumi.Input[_builtins.str] expression_time_zone: Time zone corresponding to the Cron expression.  
               Default value: time zone where DataArts Studio is located
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "start_time", start_time)
        if depend_jobs is not None:
            pulumi.set(__self__, "depend_jobs", depend_jobs)
        if depend_pre_period is not None:
            pulumi.set(__self__, "depend_pre_period", depend_pre_period)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if expression_time_zone is not None:
            pulumi.set(__self__, "expression_time_zone", expression_time_zone)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        """
        Cron expression in the format of **`<second><minute><hour><day><month><week>`**.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[_builtins.str]:
        """
        Scheduling start time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job starts to be scheduled at 23:59:59
        on October 22nd, 2018.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter(name="dependJobs")
    def depend_jobs(self) -> Optional[pulumi.Input['FactoryJobScheduleCronDependJobsArgs']]:
        """
        Job dependency configuration.
        The depend_jobs structure is documented below.

        <a name="job_ScheduleCronDependJobs"></a>
        The `depend_jobs` block supports:
        """
        return pulumi.get(self, "depend_jobs")

    @depend_jobs.setter
    def depend_jobs(self, value: Optional[pulumi.Input['FactoryJobScheduleCronDependJobsArgs']]):
        pulumi.set(self, "depend_jobs", value)

    @_builtins.property
    @pulumi.getter(name="dependPrePeriod")
    def depend_pre_period(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to depend on the execution result of the current
        job's dependent job in the previous scheduling period.
        Default value: **false**.
        """
        return pulumi.get(self, "depend_pre_period")

    @depend_pre_period.setter
    def depend_pre_period(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "depend_pre_period", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Scheduling end time in the format of **yyyy-MM-dd'T'HH:mm:ssZ**,
        which is an ISO 8601 time format.
        For example, 2018-10-22T23:59:59+08, which indicates that a job stops to be scheduled at 23:59:59
        on October 22nd, 2018.
        If the end time is not set, the job will continuously be executed based on the scheduling period.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="expressionTimeZone")
    def expression_time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time zone corresponding to the Cron expression.  
        Default value: time zone where DataArts Studio is located
        """
        return pulumi.get(self, "expression_time_zone")

    @expression_time_zone.setter
    def expression_time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expression_time_zone", value)


if not MYPY:
    class FactoryJobScheduleCronDependJobsArgsDict(TypedDict):
        jobs: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        A list of dependent jobs. Only the existing jobs can be depended on.
        """
        depend_fail_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Dependency job failure policy.  
        The valid values are as follows:
        - **FAIL**: Stop the job and set the job to the failed state.
        - **IGNORE**: Continue to run the job.
        - **SUSPEND**: Suspend the job.

        The default value is **FAIL**.

        <a name="job_ScheduleEvent"></a>
        The `event` block supports:
        """
        depend_period: NotRequired[pulumi.Input[_builtins.str]]
        """
        Dependency period.  
        The valid values are as follows:
        - **SAME_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the current scheduling period.
        - **PRE_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the previous scheduling period.

        The default value is **SAME_PERIOD**.
        """
elif False:
    FactoryJobScheduleCronDependJobsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobScheduleCronDependJobsArgs:
    def __init__(__self__, *,
                 jobs: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 depend_fail_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 depend_period: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] jobs: A list of dependent jobs. Only the existing jobs can be depended on.
        :param pulumi.Input[_builtins.str] depend_fail_policy: Dependency job failure policy.  
               The valid values are as follows:
               - **FAIL**: Stop the job and set the job to the failed state.
               - **IGNORE**: Continue to run the job.
               - **SUSPEND**: Suspend the job.
               
               The default value is **FAIL**.
               
               <a name="job_ScheduleEvent"></a>
               The `event` block supports:
        :param pulumi.Input[_builtins.str] depend_period: Dependency period.  
               The valid values are as follows:
               - **SAME_PERIOD**: To run a job or not depends on the execution result of its depended job in
               the current scheduling period.
               - **PRE_PERIOD**: To run a job or not depends on the execution result of its depended job in
               the previous scheduling period.
               
               The default value is **SAME_PERIOD**.
        """
        pulumi.set(__self__, "jobs", jobs)
        if depend_fail_policy is not None:
            pulumi.set(__self__, "depend_fail_policy", depend_fail_policy)
        if depend_period is not None:
            pulumi.set(__self__, "depend_period", depend_period)

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        A list of dependent jobs. Only the existing jobs can be depended on.
        """
        return pulumi.get(self, "jobs")

    @jobs.setter
    def jobs(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "jobs", value)

    @_builtins.property
    @pulumi.getter(name="dependFailPolicy")
    def depend_fail_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dependency job failure policy.  
        The valid values are as follows:
        - **FAIL**: Stop the job and set the job to the failed state.
        - **IGNORE**: Continue to run the job.
        - **SUSPEND**: Suspend the job.

        The default value is **FAIL**.

        <a name="job_ScheduleEvent"></a>
        The `event` block supports:
        """
        return pulumi.get(self, "depend_fail_policy")

    @depend_fail_policy.setter
    def depend_fail_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "depend_fail_policy", value)

    @_builtins.property
    @pulumi.getter(name="dependPeriod")
    def depend_period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dependency period.  
        The valid values are as follows:
        - **SAME_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the current scheduling period.
        - **PRE_PERIOD**: To run a job or not depends on the execution result of its depended job in
        the previous scheduling period.

        The default value is **SAME_PERIOD**.
        """
        return pulumi.get(self, "depend_period")

    @depend_period.setter
    def depend_period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "depend_period", value)


if not MYPY:
    class FactoryJobScheduleEventArgsDict(TypedDict):
        channel: pulumi.Input[_builtins.str]
        """
        DIS stream name.  
        Perform the following operations to obtain the stream name:
        - Log in to the management console.
        - Click **Data Ingestion Service** and select **Stream Management** from the left navigation pane.
        - The stream management page lists the existing streams.
        """
        event_type: pulumi.Input[_builtins.str]
        """
        Event type.  
        The valid values are as follows:
        - **KAFKA**: Select the corresponding connection name and topic. When a new Kafka message is
        received, the job is triggered.
        - **OBS**: Select the OBS path to be listened to. If new files exist in the path, scheduling is
        triggered. The path name can be referenced using variable Job.trigger.obsNewFiles. The
        prerequisite is that DIS notifications have been configured for the OBS path.
        - **DIS**: Currently, only newly reported data events from the DIS stream can be monitored.
        Each time a data record is reported, the job runs once.
        """
        concurrent: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of the concurrently scheduled jobs.  
        Value range: `1` to `128`.
        Default value: `1`.
        """
        fail_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Job failure policy.  
        The valid values are as follows:
        - **SUSPEND**: Suspend the event.
        - **IGNORE**: Ignore the failure and process with the next event.

        The default value is **SUSPEND**.
        """
        read_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Access policy.  
        The valid values are as follows:
        - **LAST**: Access data from the last location.
        - **NEW**: Access data from a new location.

        The default value is **LAST**.

        <a name="job_Param"></a>
        The `params` block supports:
        """
elif False:
    FactoryJobScheduleEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryJobScheduleEventArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input[_builtins.str],
                 event_type: pulumi.Input[_builtins.str],
                 concurrent: Optional[pulumi.Input[_builtins.int]] = None,
                 fail_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 read_policy: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] channel: DIS stream name.  
               Perform the following operations to obtain the stream name:
               - Log in to the management console.
               - Click **Data Ingestion Service** and select **Stream Management** from the left navigation pane.
               - The stream management page lists the existing streams.
        :param pulumi.Input[_builtins.str] event_type: Event type.  
               The valid values are as follows:
               - **KAFKA**: Select the corresponding connection name and topic. When a new Kafka message is
               received, the job is triggered.
               - **OBS**: Select the OBS path to be listened to. If new files exist in the path, scheduling is
               triggered. The path name can be referenced using variable Job.trigger.obsNewFiles. The
               prerequisite is that DIS notifications have been configured for the OBS path.
               - **DIS**: Currently, only newly reported data events from the DIS stream can be monitored.
               Each time a data record is reported, the job runs once.
        :param pulumi.Input[_builtins.int] concurrent: Number of the concurrently scheduled jobs.  
               Value range: `1` to `128`.
               Default value: `1`.
        :param pulumi.Input[_builtins.str] fail_policy: Job failure policy.  
               The valid values are as follows:
               - **SUSPEND**: Suspend the event.
               - **IGNORE**: Ignore the failure and process with the next event.
               
               The default value is **SUSPEND**.
        :param pulumi.Input[_builtins.str] read_policy: Access policy.  
               The valid values are as follows:
               - **LAST**: Access data from the last location.
               - **NEW**: Access data from a new location.
               
               The default value is **LAST**.
               
               <a name="job_Param"></a>
               The `params` block supports:
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "event_type", event_type)
        if concurrent is not None:
            pulumi.set(__self__, "concurrent", concurrent)
        if fail_policy is not None:
            pulumi.set(__self__, "fail_policy", fail_policy)
        if read_policy is not None:
            pulumi.set(__self__, "read_policy", read_policy)

    @_builtins.property
    @pulumi.getter
    def channel(self) -> pulumi.Input[_builtins.str]:
        """
        DIS stream name.  
        Perform the following operations to obtain the stream name:
        - Log in to the management console.
        - Click **Data Ingestion Service** and select **Stream Management** from the left navigation pane.
        - The stream management page lists the existing streams.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "channel", value)

    @_builtins.property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[_builtins.str]:
        """
        Event type.  
        The valid values are as follows:
        - **KAFKA**: Select the corresponding connection name and topic. When a new Kafka message is
        received, the job is triggered.
        - **OBS**: Select the OBS path to be listened to. If new files exist in the path, scheduling is
        triggered. The path name can be referenced using variable Job.trigger.obsNewFiles. The
        prerequisite is that DIS notifications have been configured for the OBS path.
        - **DIS**: Currently, only newly reported data events from the DIS stream can be monitored.
        Each time a data record is reported, the job runs once.
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "event_type", value)

    @_builtins.property
    @pulumi.getter
    def concurrent(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of the concurrently scheduled jobs.  
        Value range: `1` to `128`.
        Default value: `1`.
        """
        return pulumi.get(self, "concurrent")

    @concurrent.setter
    def concurrent(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "concurrent", value)

    @_builtins.property
    @pulumi.getter(name="failPolicy")
    def fail_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Job failure policy.  
        The valid values are as follows:
        - **SUSPEND**: Suspend the event.
        - **IGNORE**: Ignore the failure and process with the next event.

        The default value is **SUSPEND**.
        """
        return pulumi.get(self, "fail_policy")

    @fail_policy.setter
    def fail_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fail_policy", value)

    @_builtins.property
    @pulumi.getter(name="readPolicy")
    def read_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access policy.  
        The valid values are as follows:
        - **LAST**: Access data from the last location.
        - **NEW**: Access data from a new location.

        The default value is **LAST**.

        <a name="job_Param"></a>
        The `params` block supports:
        """
        return pulumi.get(self, "read_policy")

    @read_policy.setter
    def read_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "read_policy", value)


if not MYPY:
    class FactoryResourceDependPackageArgsDict(TypedDict):
        location: pulumi.Input[_builtins.str]
        """
        Specifies the path of the dependent file. Currently, only OBS paths is
        supported.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the dependent file. The valid values are **file**,
        **jar** and **pyFile**.
        """
elif False:
    FactoryResourceDependPackageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryResourceDependPackageArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] location: Specifies the path of the dependent file. Currently, only OBS paths is
               supported.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the dependent file. The valid values are **file**,
               **jar** and **pyFile**.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the path of the dependent file. Currently, only OBS paths is
        supported.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the dependent file. The valid values are **file**,
        **jar** and **pyFile**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FactoryScriptApproverArgsDict(TypedDict):
        approver_name: pulumi.Input[_builtins.str]
        """
        Specifies the approver name of script.
        """
elif False:
    FactoryScriptApproverArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FactoryScriptApproverArgs:
    def __init__(__self__, *,
                 approver_name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] approver_name: Specifies the approver name of script.
        """
        pulumi.set(__self__, "approver_name", approver_name)

    @_builtins.property
    @pulumi.getter(name="approverName")
    def approver_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the approver name of script.
        """
        return pulumi.get(self, "approver_name")

    @approver_name.setter
    def approver_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "approver_name", value)


