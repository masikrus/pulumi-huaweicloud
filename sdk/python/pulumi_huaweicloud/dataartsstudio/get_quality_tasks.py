# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetQualityTasksResult',
    'AwaitableGetQualityTasksResult',
    'get_quality_tasks',
    'get_quality_tasks_output',
]

@pulumi.output_type
class GetQualityTasksResult:
    """
    A collection of values returned by getQualityTasks.
    """
    def __init__(__self__, category_id=None, creator=None, id=None, name=None, region=None, schedule_status=None, start_time=None, tasks=None, workspace_id=None):
        if category_id and not isinstance(category_id, str):
            raise TypeError("Expected argument 'category_id' to be a str")
        pulumi.set(__self__, "category_id", category_id)
        if creator and not isinstance(creator, str):
            raise TypeError("Expected argument 'creator' to be a str")
        pulumi.set(__self__, "creator", creator)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if schedule_status and not isinstance(schedule_status, str):
            raise TypeError("Expected argument 'schedule_status' to be a str")
        pulumi.set(__self__, "schedule_status", schedule_status)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[_builtins.str]:
        """
        The category ID to which the quality task belongs.
        """
        return pulumi.get(self, "category_id")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> Optional[_builtins.str]:
        """
        The name of the task creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the quality task.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="scheduleStatus")
    def schedule_status(self) -> Optional[_builtins.str]:
        """
        The schedule status of the quality task.
        """
        return pulumi.get(self, "schedule_status")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetQualityTasksTaskResult']:
        """
        All quality tasks that match the filter parameters.  
        The tasks structure is documented below.
        """
        return pulumi.get(self, "tasks")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetQualityTasksResult(GetQualityTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQualityTasksResult(
            category_id=self.category_id,
            creator=self.creator,
            id=self.id,
            name=self.name,
            region=self.region,
            schedule_status=self.schedule_status,
            start_time=self.start_time,
            tasks=self.tasks,
            workspace_id=self.workspace_id)


def get_quality_tasks(category_id: Optional[_builtins.str] = None,
                      creator: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      schedule_status: Optional[_builtins.str] = None,
                      start_time: Optional[_builtins.str] = None,
                      workspace_id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQualityTasksResult:
    """
    Use this data source to get the list of quality tasks within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    task_name_to_be_queried = config.require_object("taskNameToBeQueried")
    test = huaweicloud.DataArtsStudio.get_quality_tasks(workspace_id=workspace_id,
        name=task_name_to_be_queried)
    ```


    :param _builtins.str category_id: Specifies the category ID to which the quality tasks belong.
    :param _builtins.str creator: Specifies the name of the quality task creator.
    :param _builtins.str name: Specifies the name of the quality task.
    :param _builtins.str region: Specifies the region where the quality tasks are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str schedule_status: Specifies the schedule status of the quality task.
           + **UNKNOWN**
           + **NOT_START**
           + **SCHEDULING**
           + **FINISH_SUCCESS**
           + **KILL**
           + **RUNNING_EXCEPTION**
    :param _builtins.str start_time: Specifies the start time of the query interval for the most recent run time.  
           The valid format is RFC3339 format, e.g. `2024-01-01T10:00:00+08:00`
    :param _builtins.str workspace_id: Specifies the workspace ID to which the quality tasks belong.
    """
    __args__ = dict()
    __args__['categoryId'] = category_id
    __args__['creator'] = creator
    __args__['name'] = name
    __args__['region'] = region
    __args__['scheduleStatus'] = schedule_status
    __args__['startTime'] = start_time
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DataArtsStudio/getQualityTasks:getQualityTasks', __args__, opts=opts, typ=GetQualityTasksResult).value

    return AwaitableGetQualityTasksResult(
        category_id=pulumi.get(__ret__, 'category_id'),
        creator=pulumi.get(__ret__, 'creator'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        schedule_status=pulumi.get(__ret__, 'schedule_status'),
        start_time=pulumi.get(__ret__, 'start_time'),
        tasks=pulumi.get(__ret__, 'tasks'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_quality_tasks_output(category_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             creator: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             schedule_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQualityTasksResult]:
    """
    Use this data source to get the list of quality tasks within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    task_name_to_be_queried = config.require_object("taskNameToBeQueried")
    test = huaweicloud.DataArtsStudio.get_quality_tasks(workspace_id=workspace_id,
        name=task_name_to_be_queried)
    ```


    :param _builtins.str category_id: Specifies the category ID to which the quality tasks belong.
    :param _builtins.str creator: Specifies the name of the quality task creator.
    :param _builtins.str name: Specifies the name of the quality task.
    :param _builtins.str region: Specifies the region where the quality tasks are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str schedule_status: Specifies the schedule status of the quality task.
           + **UNKNOWN**
           + **NOT_START**
           + **SCHEDULING**
           + **FINISH_SUCCESS**
           + **KILL**
           + **RUNNING_EXCEPTION**
    :param _builtins.str start_time: Specifies the start time of the query interval for the most recent run time.  
           The valid format is RFC3339 format, e.g. `2024-01-01T10:00:00+08:00`
    :param _builtins.str workspace_id: Specifies the workspace ID to which the quality tasks belong.
    """
    __args__ = dict()
    __args__['categoryId'] = category_id
    __args__['creator'] = creator
    __args__['name'] = name
    __args__['region'] = region
    __args__['scheduleStatus'] = schedule_status
    __args__['startTime'] = start_time
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DataArtsStudio/getQualityTasks:getQualityTasks', __args__, opts=opts, typ=GetQualityTasksResult)
    return __ret__.apply(lambda __response__: GetQualityTasksResult(
        category_id=pulumi.get(__response__, 'category_id'),
        creator=pulumi.get(__response__, 'creator'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        schedule_status=pulumi.get(__response__, 'schedule_status'),
        start_time=pulumi.get(__response__, 'start_time'),
        tasks=pulumi.get(__response__, 'tasks'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
