# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataserviceApiAuthActionArgs', 'DataserviceApiAuthAction']

@pulumi.input_type
class DataserviceApiAuthActionArgs:
    def __init__(__self__, *,
                 api_id: pulumi.Input[_builtins.str],
                 app_id: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 expired_at: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataserviceApiAuthAction resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the published API that to be operated.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] app_id: Specifies the ID of the APP to be operated.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the operation type of the authorization.  
               The valid values are as follows:
               + **APPLY_TYPE_APPLY**: Apply for APP access to API.
               + **APPLY_TYPE_AUTHORIZE**: Apply for APP access to API (fast approval).
               + **APPLY_TYPE_API_CANCEL_AUTHORIZE**: Cancel the API authorization.
               + **APPLY_TYPE_APP_CANCEL_AUTHORIZE**: Cancel the APP authorization (fast approval).
               + **APPLY_TYPE_RENEW**: Renew API.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the published API and APP to be
               operated belong.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: The expiration time of the authorize operation.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the published API and APP to be operated are
               located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if expired_at is not None:
            pulumi.set(__self__, "expired_at", expired_at)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the published API that to be operated.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the APP to be operated.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "app_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the exclusive cluster ID to which the published API belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operation type of the authorization.  
        The valid values are as follows:
        + **APPLY_TYPE_APPLY**: Apply for APP access to API.
        + **APPLY_TYPE_AUTHORIZE**: Apply for APP access to API (fast approval).
        + **APPLY_TYPE_API_CANCEL_AUTHORIZE**: Cancel the API authorization.
        + **APPLY_TYPE_APP_CANCEL_AUTHORIZE**: Cancel the APP authorization (fast approval).
        + **APPLY_TYPE_RENEW**: Renew API.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID to which the published API and APP to be
        operated belong.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The expiration time of the authorize operation.
        """
        return pulumi.get(self, "expired_at")

    @expired_at.setter
    def expired_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expired_at", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the published API and APP to be operated are
        located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DataserviceApiAuthActionState:
    def __init__(__self__, *,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_at: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataserviceApiAuthAction resources.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the published API that to be operated.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] app_id: Specifies the ID of the APP to be operated.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: The expiration time of the authorize operation.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the published API and APP to be operated are
               located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the operation type of the authorization.  
               The valid values are as follows:
               + **APPLY_TYPE_APPLY**: Apply for APP access to API.
               + **APPLY_TYPE_AUTHORIZE**: Apply for APP access to API (fast approval).
               + **APPLY_TYPE_API_CANCEL_AUTHORIZE**: Cancel the API authorization.
               + **APPLY_TYPE_APP_CANCEL_AUTHORIZE**: Cancel the APP authorization (fast approval).
               + **APPLY_TYPE_RENEW**: Renew API.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the published API and APP to be
               operated belong.
               Changing this parameter will create a new resource.
        """
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if expired_at is not None:
            pulumi.set(__self__, "expired_at", expired_at)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the published API that to be operated.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the APP to be operated.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_id", value)

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The expiration time of the authorize operation.
        """
        return pulumi.get(self, "expired_at")

    @expired_at.setter
    def expired_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expired_at", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the exclusive cluster ID to which the published API belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the published API and APP to be operated are
        located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation type of the authorization.  
        The valid values are as follows:
        + **APPLY_TYPE_APPLY**: Apply for APP access to API.
        + **APPLY_TYPE_AUTHORIZE**: Apply for APP access to API (fast approval).
        + **APPLY_TYPE_API_CANCEL_AUTHORIZE**: Cancel the API authorization.
        + **APPLY_TYPE_APP_CANCEL_AUTHORIZE**: Cancel the APP authorization (fast approval).
        + **APPLY_TYPE_RENEW**: Renew API.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID to which the published API and APP to be
        operated belong.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/dataserviceApiAuthAction:DataserviceApiAuthAction")
class DataserviceApiAuthAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_at: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to operate (authorized) APP for DataArts Data Service within HuaweiCloud.

        > 1. Only exclusive (and published) API can used to authorize APPs.
        >       <br>2. This resource is only a one-time action resource for doing authorize operation. Deleting this resource will
        >       not clear the corresponding request record, but will only remove the resource information from the tfstate file.
        >       <br>3. Before using this resource, please make sure that the current user has the approver permission.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        operate_api_id = config.require_object("operateApiId")
        exclusive_cluster_id = config.require_object("exclusiveClusterId")
        operate_app_id = config.require_object("operateAppId")
        test = huaweicloud.dataartsstudio.DataserviceApiAuthAction("test",
            workspace_id=workspace_id,
            api_id=operate_api_id,
            instance_id=exclusive_cluster_id,
            app_id=operate_app_id,
            type="APPLY_TYPE_APP_CANCEL_AUTHORIZE")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the published API that to be operated.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] app_id: Specifies the ID of the APP to be operated.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: The expiration time of the authorize operation.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the published API and APP to be operated are
               located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the operation type of the authorization.  
               The valid values are as follows:
               + **APPLY_TYPE_APPLY**: Apply for APP access to API.
               + **APPLY_TYPE_AUTHORIZE**: Apply for APP access to API (fast approval).
               + **APPLY_TYPE_API_CANCEL_AUTHORIZE**: Cancel the API authorization.
               + **APPLY_TYPE_APP_CANCEL_AUTHORIZE**: Cancel the APP authorization (fast approval).
               + **APPLY_TYPE_RENEW**: Renew API.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the published API and APP to be
               operated belong.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataserviceApiAuthActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to operate (authorized) APP for DataArts Data Service within HuaweiCloud.

        > 1. Only exclusive (and published) API can used to authorize APPs.
        >       <br>2. This resource is only a one-time action resource for doing authorize operation. Deleting this resource will
        >       not clear the corresponding request record, but will only remove the resource information from the tfstate file.
        >       <br>3. Before using this resource, please make sure that the current user has the approver permission.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        operate_api_id = config.require_object("operateApiId")
        exclusive_cluster_id = config.require_object("exclusiveClusterId")
        operate_app_id = config.require_object("operateAppId")
        test = huaweicloud.dataartsstudio.DataserviceApiAuthAction("test",
            workspace_id=workspace_id,
            api_id=operate_api_id,
            instance_id=exclusive_cluster_id,
            app_id=operate_app_id,
            type="APPLY_TYPE_APP_CANCEL_AUTHORIZE")
        ```

        :param str resource_name: The name of the resource.
        :param DataserviceApiAuthActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataserviceApiAuthActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_at: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataserviceApiAuthActionArgs.__new__(DataserviceApiAuthActionArgs)

            if api_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_id'")
            __props__.__dict__["api_id"] = api_id
            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            __props__.__dict__["expired_at"] = expired_at
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
        super(DataserviceApiAuthAction, __self__).__init__(
            'huaweicloud:DataArtsStudio/dataserviceApiAuthAction:DataserviceApiAuthAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_id: Optional[pulumi.Input[_builtins.str]] = None,
            app_id: Optional[pulumi.Input[_builtins.str]] = None,
            expired_at: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataserviceApiAuthAction':
        """
        Get an existing DataserviceApiAuthAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the ID of the published API that to be operated.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] app_id: Specifies the ID of the APP to be operated.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: The expiration time of the authorize operation.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID to which the published API belongs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the published API and APP to be operated are
               located.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the operation type of the authorization.  
               The valid values are as follows:
               + **APPLY_TYPE_APPLY**: Apply for APP access to API.
               + **APPLY_TYPE_AUTHORIZE**: Apply for APP access to API (fast approval).
               + **APPLY_TYPE_API_CANCEL_AUTHORIZE**: Cancel the API authorization.
               + **APPLY_TYPE_APP_CANCEL_AUTHORIZE**: Cancel the APP authorization (fast approval).
               + **APPLY_TYPE_RENEW**: Renew API.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the published API and APP to be
               operated belong.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataserviceApiAuthActionState.__new__(_DataserviceApiAuthActionState)

        __props__.__dict__["api_id"] = api_id
        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["expired_at"] = expired_at
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["workspace_id"] = workspace_id
        return DataserviceApiAuthAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the published API that to be operated.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the APP to be operated.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The expiration time of the authorize operation.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the exclusive cluster ID to which the published API belongs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region where the published API and APP to be operated are
        located.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operation type of the authorization.  
        The valid values are as follows:
        + **APPLY_TYPE_APPLY**: Apply for APP access to API.
        + **APPLY_TYPE_AUTHORIZE**: Apply for APP access to API (fast approval).
        + **APPLY_TYPE_API_CANCEL_AUTHORIZE**: Cancel the API authorization.
        + **APPLY_TYPE_APP_CANCEL_AUTHORIZE**: Cancel the APP authorization (fast approval).
        + **APPLY_TYPE_RENEW**: Renew API.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID to which the published API and APP to be
        operated belong.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

