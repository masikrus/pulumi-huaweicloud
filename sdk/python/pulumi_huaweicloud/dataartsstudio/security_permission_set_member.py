# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SecurityPermissionSetMemberArgs', 'SecurityPermissionSetMember']

@pulumi.input_type
class SecurityPermissionSetMemberArgs:
    def __init__(__self__, *,
                 object_id: pulumi.Input[_builtins.str],
                 permission_set_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SecurityPermissionSetMember resource.
        :param pulumi.Input[_builtins.str] object_id: Specifies the ID of the member object. The valid value ranges from `1` to `128`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the permission set ID to which the member belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the member object.
               The valid values are **USER**and **USER_GROUP**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the permission set and member belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the member object.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the member object. The valid value ranges from `1` to `128`.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "object_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the permission set ID to which the member belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "permission_set_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the member object.
        The valid values are **USER**and **USER_GROUP**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID to which the permission set and member belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the member object.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SecurityPermissionSetMemberState:
    def __init__(__self__, *,
                 member_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SecurityPermissionSetMember resources.
        :param pulumi.Input[_builtins.str] member_id: The ID of the member.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the member object.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] object_id: Specifies the ID of the member object. The valid value ranges from `1` to `128`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the permission set ID to which the member belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the member object.
               The valid values are **USER**and **USER_GROUP**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the permission set and member belongs.
               Changing this creates a new resource.
        """
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if permission_set_id is not None:
            pulumi.set(__self__, "permission_set_id", permission_set_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the member.
        """
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "member_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the member object.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the member object. The valid value ranges from `1` to `128`.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_id", value)

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the permission set ID to which the member belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "permission_set_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the member object.
        The valid values are **USER**and **USER_GROUP**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID to which the permission set and member belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/securityPermissionSetMember:SecurityPermissionSetMember")
class SecurityPermissionSetMember(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages DataArts Security permission set member resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        permission_set_id = config.require_object("permissionSetId")
        object_name = config.require_object("objectName")
        object_id = config.require_object("objectId")
        test = huaweicloud.dataartsstudio.SecurityPermissionSetMember("test",
            workspace_id=workspace_id,
            permission_set_id=permission_set_id,
            object_id=object_id,
            name=object_name,
            type="USER")
        ```

        ## Import

        The permission set member can be imported using `workspace_id`, `permission_set_id` and `object_id`, separated by

        slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/securityPermissionSetMember:SecurityPermissionSetMember test <workspace_id>/<permission_set_id>/<object_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the member object.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] object_id: Specifies the ID of the member object. The valid value ranges from `1` to `128`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the permission set ID to which the member belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the member object.
               The valid values are **USER**and **USER_GROUP**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the permission set and member belongs.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityPermissionSetMemberArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages DataArts Security permission set member resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        permission_set_id = config.require_object("permissionSetId")
        object_name = config.require_object("objectName")
        object_id = config.require_object("objectId")
        test = huaweicloud.dataartsstudio.SecurityPermissionSetMember("test",
            workspace_id=workspace_id,
            permission_set_id=permission_set_id,
            object_id=object_id,
            name=object_name,
            type="USER")
        ```

        ## Import

        The permission set member can be imported using `workspace_id`, `permission_set_id` and `object_id`, separated by

        slashes (/), e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/securityPermissionSetMember:SecurityPermissionSetMember test <workspace_id>/<permission_set_id>/<object_id>
        ```

        :param str resource_name: The name of the resource.
        :param SecurityPermissionSetMemberArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityPermissionSetMemberArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityPermissionSetMemberArgs.__new__(SecurityPermissionSetMemberArgs)

            __props__.__dict__["name"] = name
            if object_id is None and not opts.urn:
                raise TypeError("Missing required property 'object_id'")
            __props__.__dict__["object_id"] = object_id
            if permission_set_id is None and not opts.urn:
                raise TypeError("Missing required property 'permission_set_id'")
            __props__.__dict__["permission_set_id"] = permission_set_id
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["member_id"] = None
        super(SecurityPermissionSetMember, __self__).__init__(
            'huaweicloud:DataArtsStudio/securityPermissionSetMember:SecurityPermissionSetMember',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            member_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            object_id: Optional[pulumi.Input[_builtins.str]] = None,
            permission_set_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SecurityPermissionSetMember':
        """
        Get an existing SecurityPermissionSetMember resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] member_id: The ID of the member.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the member object.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] object_id: Specifies the ID of the member object. The valid value ranges from `1` to `128`.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] permission_set_id: Specifies the permission set ID to which the member belongs.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the member object.
               The valid values are **USER**and **USER_GROUP**.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the permission set and member belongs.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityPermissionSetMemberState.__new__(_SecurityPermissionSetMemberState)

        __props__.__dict__["member_id"] = member_id
        __props__.__dict__["name"] = name
        __props__.__dict__["object_id"] = object_id
        __props__.__dict__["permission_set_id"] = permission_set_id
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["workspace_id"] = workspace_id
        return SecurityPermissionSetMember(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="memberId")
    def member_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the member.
        """
        return pulumi.get(self, "member_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the member object.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the member object. The valid value ranges from `1` to `128`.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "object_id")

    @_builtins.property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the permission set ID to which the member belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "permission_set_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the member object.
        The valid values are **USER**and **USER_GROUP**.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID to which the permission set and member belongs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "workspace_id")

