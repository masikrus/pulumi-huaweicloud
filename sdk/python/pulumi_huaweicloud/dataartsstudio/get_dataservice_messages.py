# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataserviceMessagesResult',
    'AwaitableGetDataserviceMessagesResult',
    'get_dataservice_messages',
    'get_dataservice_messages_output',
]

@pulumi.output_type
class GetDataserviceMessagesResult:
    """
    A collection of values returned by getDataserviceMessages.
    """
    def __init__(__self__, api_name=None, id=None, messages=None, region=None, workspace_id=None):
        if api_name and not isinstance(api_name, str):
            raise TypeError("Expected argument 'api_name' to be a str")
        pulumi.set(__self__, "api_name", api_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if messages and not isinstance(messages, list):
            raise TypeError("Expected argument 'messages' to be a list")
        pulumi.set(__self__, "messages", messages)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[_builtins.str]:
        """
        The name of the exclusive API to which the approval message belongs.
        """
        return pulumi.get(self, "api_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.GetDataserviceMessagesMessageResult']:
        """
        All approval messages that match the filter parameters.  
        The messages structure is documented below.
        """
        return pulumi.get(self, "messages")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetDataserviceMessagesResult(GetDataserviceMessagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataserviceMessagesResult(
            api_name=self.api_name,
            id=self.id,
            messages=self.messages,
            region=self.region,
            workspace_id=self.workspace_id)


def get_dataservice_messages(api_name: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             workspace_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataserviceMessagesResult:
    """
    Use this data source to get the list of approval messages within HuaweiCloud.

    > Only exclusive messages are supported.

    ## Example Usage

    ### Query all exclusive approval messages

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.DataArtsStudio.get_dataservice_messages(workspace_id=workspace_id)
    ```

    ### Query all exclusive approval messages for a specified API

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    api_name = config.require_object("apiName")
    test = huaweicloud.DataArtsStudio.get_dataservice_messages(workspace_id=workspace_id,
        api_name=api_name)
    ```


    :param _builtins.str api_name: Specifies the name of the API to be approved.
    :param _builtins.str region: Specifies the region where the approval messages are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID of the exclusive API to which the approval message
           belongs.
    """
    __args__ = dict()
    __args__['apiName'] = api_name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DataArtsStudio/getDataserviceMessages:getDataserviceMessages', __args__, opts=opts, typ=GetDataserviceMessagesResult).value

    return AwaitableGetDataserviceMessagesResult(
        api_name=pulumi.get(__ret__, 'api_name'),
        id=pulumi.get(__ret__, 'id'),
        messages=pulumi.get(__ret__, 'messages'),
        region=pulumi.get(__ret__, 'region'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_dataservice_messages_output(api_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataserviceMessagesResult]:
    """
    Use this data source to get the list of approval messages within HuaweiCloud.

    > Only exclusive messages are supported.

    ## Example Usage

    ### Query all exclusive approval messages

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    test = huaweicloud.DataArtsStudio.get_dataservice_messages(workspace_id=workspace_id)
    ```

    ### Query all exclusive approval messages for a specified API

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    workspace_id = config.require_object("workspaceId")
    api_name = config.require_object("apiName")
    test = huaweicloud.DataArtsStudio.get_dataservice_messages(workspace_id=workspace_id,
        api_name=api_name)
    ```


    :param _builtins.str api_name: Specifies the name of the API to be approved.
    :param _builtins.str region: Specifies the region where the approval messages are located.  
           If omitted, the provider-level region will be used.
    :param _builtins.str workspace_id: Specifies the workspace ID of the exclusive API to which the approval message
           belongs.
    """
    __args__ = dict()
    __args__['apiName'] = api_name
    __args__['region'] = region
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:DataArtsStudio/getDataserviceMessages:getDataserviceMessages', __args__, opts=opts, typ=GetDataserviceMessagesResult)
    return __ret__.apply(lambda __response__: GetDataserviceMessagesResult(
        api_name=pulumi.get(__response__, 'api_name'),
        id=pulumi.get(__response__, 'id'),
        messages=pulumi.get(__response__, 'messages'),
        region=pulumi.get(__response__, 'region'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
