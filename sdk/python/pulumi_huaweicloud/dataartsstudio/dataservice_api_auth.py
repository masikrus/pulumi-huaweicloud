# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DataserviceApiAuthArgs', 'DataserviceApiAuth']

@pulumi.input_type
class DataserviceApiAuthArgs:
    def __init__(__self__, *,
                 api_id: pulumi.Input[_builtins.str],
                 app_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 instance_id: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 expired_at: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataserviceApiAuth resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the API ID that used to authorize the authentication.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] app_ids: Specifies the list of authorized application IDs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the API and APPs belong.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: The expiration time of the APP authorize operation.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the API and APPs are located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "app_ids", app_ids)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if expired_at is not None:
            pulumi.set(__self__, "expired_at", expired_at)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the API ID that used to authorize the authentication.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="appIds")
    def app_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of authorized application IDs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_ids")

    @app_ids.setter
    def app_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "app_ids", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the exclusive cluster ID.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID to which the API and APPs belong.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The expiration time of the APP authorize operation.
        """
        return pulumi.get(self, "expired_at")

    @expired_at.setter
    def expired_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expired_at", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the API and APPs are located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DataserviceApiAuthState:
    def __init__(__self__, *,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 expired_at: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataserviceApiAuth resources.
        :param pulumi.Input[_builtins.str] api_id: Specifies the API ID that used to authorize the authentication.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] app_ids: Specifies the list of authorized application IDs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: The expiration time of the APP authorize operation.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the API and APPs are located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the API and APPs belong.  
               Changing this parameter will create a new resource.
        """
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if app_ids is not None:
            pulumi.set(__self__, "app_ids", app_ids)
        if expired_at is not None:
            pulumi.set(__self__, "expired_at", expired_at)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the API ID that used to authorize the authentication.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="appIds")
    def app_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of authorized application IDs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_ids")

    @app_ids.setter
    def app_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "app_ids", value)

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The expiration time of the APP authorize operation.
        """
        return pulumi.get(self, "expired_at")

    @expired_at.setter
    def expired_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expired_at", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the exclusive cluster ID.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where the API and APPs are located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID to which the API and APPs belong.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/dataserviceApiAuth:DataserviceApiAuth")
class DataserviceApiAuth(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 expired_at: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource to authorize APP(s) to access API for DataArts Data Service within HuaweiCloud.

        > 1. Only exclusive API can used to authorize APPs.
        >       <br>2. This resource is only a one-time action resource for doing API authorization. Deleting this resource will not
        >       clear the corresponding request record, but will only remove the resource information from the tfstate file.
        >       <br>3. APP authentication APIs can only be authorized to APP-type applications.
        >       <br>4. Before using this resource, please make sure that the current user has the approver permission.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        auth_api_id = config.require_object("authApiId")
        exclusive_cluster_id = config.require_object("exclusiveClusterId")
        auth_expiration_time = config.require_object("authExpirationTime")
        authorized_app_ids = config.require_object("authorizedAppIds")
        test = huaweicloud.dataartsstudio.DataserviceApiAuth("test",
            workspace_id=workspace_id,
            api_id=auth_api_id,
            instance_id=exclusive_cluster_id,
            expired_at=auth_expiration_time,
            app_ids=authorized_app_ids)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the API ID that used to authorize the authentication.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] app_ids: Specifies the list of authorized application IDs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: The expiration time of the APP authorize operation.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the API and APPs are located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the API and APPs belong.  
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataserviceApiAuthArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to authorize APP(s) to access API for DataArts Data Service within HuaweiCloud.

        > 1. Only exclusive API can used to authorize APPs.
        >       <br>2. This resource is only a one-time action resource for doing API authorization. Deleting this resource will not
        >       clear the corresponding request record, but will only remove the resource information from the tfstate file.
        >       <br>3. APP authentication APIs can only be authorized to APP-type applications.
        >       <br>4. Before using this resource, please make sure that the current user has the approver permission.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        auth_api_id = config.require_object("authApiId")
        exclusive_cluster_id = config.require_object("exclusiveClusterId")
        auth_expiration_time = config.require_object("authExpirationTime")
        authorized_app_ids = config.require_object("authorizedAppIds")
        test = huaweicloud.dataartsstudio.DataserviceApiAuth("test",
            workspace_id=workspace_id,
            api_id=auth_api_id,
            instance_id=exclusive_cluster_id,
            expired_at=auth_expiration_time,
            app_ids=authorized_app_ids)
        ```

        :param str resource_name: The name of the resource.
        :param DataserviceApiAuthArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataserviceApiAuthArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 expired_at: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataserviceApiAuthArgs.__new__(DataserviceApiAuthArgs)

            if api_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_id'")
            __props__.__dict__["api_id"] = api_id
            if app_ids is None and not opts.urn:
                raise TypeError("Missing required property 'app_ids'")
            __props__.__dict__["app_ids"] = app_ids
            __props__.__dict__["expired_at"] = expired_at
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
        super(DataserviceApiAuth, __self__).__init__(
            'huaweicloud:DataArtsStudio/dataserviceApiAuth:DataserviceApiAuth',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_id: Optional[pulumi.Input[_builtins.str]] = None,
            app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            expired_at: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataserviceApiAuth':
        """
        Get an existing DataserviceApiAuth resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: Specifies the API ID that used to authorize the authentication.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] app_ids: Specifies the list of authorized application IDs.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] expired_at: The expiration time of the APP authorize operation.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the exclusive cluster ID.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region where the API and APPs are located.  
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID to which the API and APPs belong.  
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataserviceApiAuthState.__new__(_DataserviceApiAuthState)

        __props__.__dict__["api_id"] = api_id
        __props__.__dict__["app_ids"] = app_ids
        __props__.__dict__["expired_at"] = expired_at
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["workspace_id"] = workspace_id
        return DataserviceApiAuth(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the API ID that used to authorize the authentication.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="appIds")
    def app_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of authorized application IDs.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "app_ids")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The expiration time of the APP authorize operation.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the exclusive cluster ID.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region where the API and APPs are located.  
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID to which the API and APPs belong.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

