# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ArchitectureSubjectArgs', 'ArchitectureSubject']

@pulumi.input_type
class ArchitectureSubjectArgs:
    def __init__(__self__, *,
                 code: pulumi.Input[_builtins.str],
                 level: pulumi.Input[_builtins.int],
                 owner: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 department: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ArchitectureSubject resource.
        :param pulumi.Input[_builtins.str] code: Specifies the subject code.
        :param pulumi.Input[_builtins.int] level: Specifies the level of subject. The valid values are `1`, `2` and `3`.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner of the subject.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the subject in.
               Changing this creates a new subject.
        :param pulumi.Input[_builtins.str] department: Specifies the department of subject.
               It's **Required** when you created a **L3** subject.
        :param pulumi.Input[_builtins.str] description: Specifies the description of subject.
               It's **Required** when you created a **L3** subject.
        :param pulumi.Input[_builtins.str] name: Specifies the subject name.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent ID of the subject.
               It's **Required** when you created a **L2** or **L3** subject.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the subject.
               If omitted, the provider-level region will be used. Changing this creates a new subject.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def code(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the subject code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the level of subject. The valid values are `1`, `2` and `3`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the owner of the subject.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the workspace ID which the subject in.
        Changing this creates a new subject.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def department(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the department of subject.
        It's **Required** when you created a **L3** subject.
        """
        return pulumi.get(self, "department")

    @department.setter
    def department(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "department", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of subject.
        It's **Required** when you created a **L3** subject.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subject name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent ID of the subject.
        It's **Required** when you created a **L2** or **L3** subject.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to manage the subject.
        If omitted, the provider-level region will be used. Changing this creates a new subject.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ArchitectureSubjectState:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 department: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ArchitectureSubject resources.
        :param pulumi.Input[_builtins.str] code: Specifies the subject code.
        :param pulumi.Input[_builtins.str] created_at: The creating time of the subject.
        :param pulumi.Input[_builtins.str] created_by: The person creating the subject.
        :param pulumi.Input[_builtins.str] department: Specifies the department of subject.
               It's **Required** when you created a **L3** subject.
        :param pulumi.Input[_builtins.str] description: Specifies the description of subject.
               It's **Required** when you created a **L3** subject.
        :param pulumi.Input[_builtins.str] guid: The globally unique ID of the subject, generating when the subject was published.
        :param pulumi.Input[_builtins.int] level: Specifies the level of subject. The valid values are `1`, `2` and `3`.
        :param pulumi.Input[_builtins.str] name: Specifies the subject name.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner of the subject.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent ID of the subject.
               It's **Required** when you created a **L2** or **L3** subject.
        :param pulumi.Input[_builtins.str] path: The subject path. Format is `<L1_subject_name>.<L2_subject_name>.<L3_subject_name>`
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the subject.
               If omitted, the provider-level region will be used. Changing this creates a new subject.
        :param pulumi.Input[_builtins.str] status: The status of the subject.
        :param pulumi.Input[_builtins.str] updated_at: The updating time of the subject.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the subject.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the subject in.
               Changing this creates a new subject.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subject code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creating time of the subject.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person creating the subject.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def department(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the department of subject.
        It's **Required** when you created a **L3** subject.
        """
        return pulumi.get(self, "department")

    @department.setter
    def department(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "department", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of subject.
        It's **Required** when you created a **L3** subject.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique ID of the subject, generating when the subject was published.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the level of subject. The valid values are `1`, `2` and `3`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the subject name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the owner of the subject.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent ID of the subject.
        It's **Required** when you created a **L2** or **L3** subject.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject path. Format is `<L1_subject_name>.<L2_subject_name>.<L3_subject_name>`
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to manage the subject.
        If omitted, the provider-level region will be used. Changing this creates a new subject.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the subject.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The updating time of the subject.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The person updating the subject.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the workspace ID which the subject in.
        Changing this creates a new subject.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/architectureSubject:ArchitectureSubject")
class ArchitectureSubject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 department: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages DataArts Architecture subject resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        code = config.require_object("code")
        owner = config.require_object("owner")
        subject_id = config.require_object("subjectId")
        test__l1 = huaweicloud.dataartsstudio.ArchitectureSubject("test-L1",
            workspace_id=workspace_id,
            name=name,
            code=code,
            owner=owner,
            level=1)
        test__l2 = huaweicloud.dataartsstudio.ArchitectureSubject("test-L2",
            workspace_id=workspace_id,
            name=name,
            code=code,
            owner=owner,
            parent_id=subject_id,
            level=2)
        ```

        ## Import

        DataArts Architecture subject can be imported using `<workspace_id>/<path>`, e.g.

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureSubject:ArchitectureSubject test b606cd4a47b645108a122857204b360f/test-L1.test-L2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] code: Specifies the subject code.
        :param pulumi.Input[_builtins.str] department: Specifies the department of subject.
               It's **Required** when you created a **L3** subject.
        :param pulumi.Input[_builtins.str] description: Specifies the description of subject.
               It's **Required** when you created a **L3** subject.
        :param pulumi.Input[_builtins.int] level: Specifies the level of subject. The valid values are `1`, `2` and `3`.
        :param pulumi.Input[_builtins.str] name: Specifies the subject name.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner of the subject.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent ID of the subject.
               It's **Required** when you created a **L2** or **L3** subject.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the subject.
               If omitted, the provider-level region will be used. Changing this creates a new subject.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the subject in.
               Changing this creates a new subject.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ArchitectureSubjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages DataArts Architecture subject resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        code = config.require_object("code")
        owner = config.require_object("owner")
        subject_id = config.require_object("subjectId")
        test__l1 = huaweicloud.dataartsstudio.ArchitectureSubject("test-L1",
            workspace_id=workspace_id,
            name=name,
            code=code,
            owner=owner,
            level=1)
        test__l2 = huaweicloud.dataartsstudio.ArchitectureSubject("test-L2",
            workspace_id=workspace_id,
            name=name,
            code=code,
            owner=owner,
            parent_id=subject_id,
            level=2)
        ```

        ## Import

        DataArts Architecture subject can be imported using `<workspace_id>/<path>`, e.g.

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/architectureSubject:ArchitectureSubject test b606cd4a47b645108a122857204b360f/test-L1.test-L2
        ```

        :param str resource_name: The name of the resource.
        :param ArchitectureSubjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ArchitectureSubjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code: Optional[pulumi.Input[_builtins.str]] = None,
                 department: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ArchitectureSubjectArgs.__new__(ArchitectureSubjectArgs)

            if code is None and not opts.urn:
                raise TypeError("Missing required property 'code'")
            __props__.__dict__["code"] = code
            __props__.__dict__["department"] = department
            __props__.__dict__["description"] = description
            if level is None and not opts.urn:
                raise TypeError("Missing required property 'level'")
            __props__.__dict__["level"] = level
            __props__.__dict__["name"] = name
            if owner is None and not opts.urn:
                raise TypeError("Missing required property 'owner'")
            __props__.__dict__["owner"] = owner
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["region"] = region
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["guid"] = None
            __props__.__dict__["path"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(ArchitectureSubject, __self__).__init__(
            'huaweicloud:DataArtsStudio/architectureSubject:ArchitectureSubject',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            code: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            department: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            guid: Optional[pulumi.Input[_builtins.str]] = None,
            level: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            parent_id: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ArchitectureSubject':
        """
        Get an existing ArchitectureSubject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] code: Specifies the subject code.
        :param pulumi.Input[_builtins.str] created_at: The creating time of the subject.
        :param pulumi.Input[_builtins.str] created_by: The person creating the subject.
        :param pulumi.Input[_builtins.str] department: Specifies the department of subject.
               It's **Required** when you created a **L3** subject.
        :param pulumi.Input[_builtins.str] description: Specifies the description of subject.
               It's **Required** when you created a **L3** subject.
        :param pulumi.Input[_builtins.str] guid: The globally unique ID of the subject, generating when the subject was published.
        :param pulumi.Input[_builtins.int] level: Specifies the level of subject. The valid values are `1`, `2` and `3`.
        :param pulumi.Input[_builtins.str] name: Specifies the subject name.
        :param pulumi.Input[_builtins.str] owner: Specifies the owner of the subject.
        :param pulumi.Input[_builtins.str] parent_id: Specifies the parent ID of the subject.
               It's **Required** when you created a **L2** or **L3** subject.
        :param pulumi.Input[_builtins.str] path: The subject path. Format is `<L1_subject_name>.<L2_subject_name>.<L3_subject_name>`
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to manage the subject.
               If omitted, the provider-level region will be used. Changing this creates a new subject.
        :param pulumi.Input[_builtins.str] status: The status of the subject.
        :param pulumi.Input[_builtins.str] updated_at: The updating time of the subject.
        :param pulumi.Input[_builtins.str] updated_by: The person updating the subject.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the workspace ID which the subject in.
               Changing this creates a new subject.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ArchitectureSubjectState.__new__(_ArchitectureSubjectState)

        __props__.__dict__["code"] = code
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["department"] = department
        __props__.__dict__["description"] = description
        __props__.__dict__["guid"] = guid
        __props__.__dict__["level"] = level
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["path"] = path
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["workspace_id"] = workspace_id
        return ArchitectureSubject(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def code(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the subject code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creating time of the subject.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The person creating the subject.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def department(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the department of subject.
        It's **Required** when you created a **L3** subject.
        """
        return pulumi.get(self, "department")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of subject.
        It's **Required** when you created a **L3** subject.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique ID of the subject, generating when the subject was published.
        """
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def level(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the level of subject. The valid values are `1`, `2` and `3`.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the subject name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the owner of the subject.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the parent ID of the subject.
        It's **Required** when you created a **L2** or **L3** subject.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[_builtins.str]:
        """
        The subject path. Format is `<L1_subject_name>.<L2_subject_name>.<L3_subject_name>`
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to manage the subject.
        If omitted, the provider-level region will be used. Changing this creates a new subject.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the subject.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The updating time of the subject.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The person updating the subject.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the workspace ID which the subject in.
        Changing this creates a new subject.
        """
        return pulumi.get(self, "workspace_id")

