# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SecurityDataRecognitionRuleArgs', 'SecurityDataRecognitionRule']

@pulumi.input_type
class SecurityDataRecognitionRuleArgs:
    def __init__(__self__, *,
                 rule_type: pulumi.Input[_builtins.str],
                 secrecy_level_id: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.str],
                 builtin_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 category_id: Optional[pulumi.Input[_builtins.str]] = None,
                 column_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 comment_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 content_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SecurityDataRecognitionRule resource.
        :param pulumi.Input[_builtins.str] rule_type: Spedifies the type of data recognition rule.
               The valid values are **CUSTOM** and **BUILTIN**.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] secrecy_level_id: Spedifies the ID of data secrecy level.
               Before operating on data, you need to define a confidentiality level for the data
               and describe the confidentiality level accordingly.
               The larger the number, the higher the level of confidentiality.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] builtin_rule_id: Specifies the ID of built-in data recognition rule.
               The system has built-in 100+ sensitive data identification and desensitization rules,
               which can detect personal sensitive information (ID card, bank card, etc.),
               corporate sensitive information (business license number, tax registration certificate number, etc.),
               key sensitive information (PEM certificate, HEY private key, etc.),
               device sensitive information (IP address, MAC address, IPV6 address, etc.),
               location sensitive information (province, city, GPS location, address, etc.)
               and general sensitive information (date) Identify and desensitize sensitive information.
               The field `builtin_rule_id` is required when `rule_type` is **BUILTIN**.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] category_id: Sprcifies the ID of data secrecy level category.
               Define data classifications for data of different values to better manage and measure
               your own data in groups, so that all types of groups have a parallel,
               equal and mutually exclusive relationship, making the data clearer.
        :param pulumi.Input[_builtins.str] column_expression: Specifies the regular expression used to match the data column.
               This expression is used for both exact matching and fuzzy matching of field names.
               It supports multiple field matching currently.
               For example **phoneNumber|email**.
        :param pulumi.Input[_builtins.str] comment_expression: Specifies the regular expression used to match the data comment.
               For example **.*comment\\*.**, It represents a fuzzy match on data comment.
        :param pulumi.Input[_builtins.str] content_expression: Specifies the regular expression used to match the data content.
               For example **^male$|^female&**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of data recognition rule.
        :param pulumi.Input[_builtins.str] method: Specifies the method of custom data recognition rule.
               The valid values are **NONE** and **REGULAR**.
               If the value of `rule_type` is **CUSTOM**, the field `method` must be set.
               If the value of `method` is **REGULAR**, `content_expression`, `column_expression`,
               `comment_expression`, one of the three fields must be set.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name.
               If the value of `rule_type` is **BUILTIN**,
               then the value of `name` should correspond to the value of `builtin_rule_id`.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "secrecy_level_id", secrecy_level_id)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if builtin_rule_id is not None:
            pulumi.set(__self__, "builtin_rule_id", builtin_rule_id)
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if column_expression is not None:
            pulumi.set(__self__, "column_expression", column_expression)
        if comment_expression is not None:
            pulumi.set(__self__, "comment_expression", comment_expression)
        if content_expression is not None:
            pulumi.set(__self__, "content_expression", content_expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[_builtins.str]:
        """
        Spedifies the type of data recognition rule.
        The valid values are **CUSTOM** and **BUILTIN**.
        Changing this parameter will create a new data recognition rule.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "rule_type", value)

    @_builtins.property
    @pulumi.getter(name="secrecyLevelId")
    def secrecy_level_id(self) -> pulumi.Input[_builtins.str]:
        """
        Spedifies the ID of data secrecy level.
        Before operating on data, you need to define a confidentiality level for the data
        and describe the confidentiality level accordingly.
        The larger the number, the higher the level of confidentiality.
        """
        return pulumi.get(self, "secrecy_level_id")

    @secrecy_level_id.setter
    def secrecy_level_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "secrecy_level_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="builtinRuleId")
    def builtin_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of built-in data recognition rule.
        The system has built-in 100+ sensitive data identification and desensitization rules,
        which can detect personal sensitive information (ID card, bank card, etc.),
        corporate sensitive information (business license number, tax registration certificate number, etc.),
        key sensitive information (PEM certificate, HEY private key, etc.),
        device sensitive information (IP address, MAC address, IPV6 address, etc.),
        location sensitive information (province, city, GPS location, address, etc.)
        and general sensitive information (date) Identify and desensitize sensitive information.
        The field `builtin_rule_id` is required when `rule_type` is **BUILTIN**.
        Changing this parameter will create a new data recognition rule.
        """
        return pulumi.get(self, "builtin_rule_id")

    @builtin_rule_id.setter
    def builtin_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "builtin_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sprcifies the ID of data secrecy level category.
        Define data classifications for data of different values to better manage and measure
        your own data in groups, so that all types of groups have a parallel,
        equal and mutually exclusive relationship, making the data clearer.
        """
        return pulumi.get(self, "category_id")

    @category_id.setter
    def category_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category_id", value)

    @_builtins.property
    @pulumi.getter(name="columnExpression")
    def column_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression used to match the data column.
        This expression is used for both exact matching and fuzzy matching of field names.
        It supports multiple field matching currently.
        For example **phoneNumber|email**.
        """
        return pulumi.get(self, "column_expression")

    @column_expression.setter
    def column_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "column_expression", value)

    @_builtins.property
    @pulumi.getter(name="commentExpression")
    def comment_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression used to match the data comment.
        For example **.*comment\\*.**, It represents a fuzzy match on data comment.
        """
        return pulumi.get(self, "comment_expression")

    @comment_expression.setter
    def comment_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comment_expression", value)

    @_builtins.property
    @pulumi.getter(name="contentExpression")
    def content_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression used to match the data content.
        For example **^male$|^female&**.
        """
        return pulumi.get(self, "content_expression")

    @content_expression.setter
    def content_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content_expression", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of data recognition rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the method of custom data recognition rule.
        The valid values are **NONE** and **REGULAR**.
        If the value of `rule_type` is **CUSTOM**, the field `method` must be set.
        If the value of `method` is **REGULAR**, `content_expression`, `column_expression`,
        `comment_expression`, one of the three fields must be set.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule name.
        If the value of `rule_type` is **BUILTIN**,
        then the value of `name` should correspond to the value of `builtin_rule_id`.
        Changing this parameter will create a new data recognition rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SecurityDataRecognitionRuleState:
    def __init__(__self__, *,
                 builtin_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 category_id: Optional[pulumi.Input[_builtins.str]] = None,
                 column_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 comment_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 content_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 secrecy_level: Optional[pulumi.Input[_builtins.str]] = None,
                 secrecy_level_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secrecy_level_num: Optional[pulumi.Input[_builtins.int]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SecurityDataRecognitionRule resources.
        :param pulumi.Input[_builtins.str] builtin_rule_id: Specifies the ID of built-in data recognition rule.
               The system has built-in 100+ sensitive data identification and desensitization rules,
               which can detect personal sensitive information (ID card, bank card, etc.),
               corporate sensitive information (business license number, tax registration certificate number, etc.),
               key sensitive information (PEM certificate, HEY private key, etc.),
               device sensitive information (IP address, MAC address, IPV6 address, etc.),
               location sensitive information (province, city, GPS location, address, etc.)
               and general sensitive information (date) Identify and desensitize sensitive information.
               The field `builtin_rule_id` is required when `rule_type` is **BUILTIN**.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] category_id: Sprcifies the ID of data secrecy level category.
               Define data classifications for data of different values to better manage and measure
               your own data in groups, so that all types of groups have a parallel,
               equal and mutually exclusive relationship, making the data clearer.
        :param pulumi.Input[_builtins.str] column_expression: Specifies the regular expression used to match the data column.
               This expression is used for both exact matching and fuzzy matching of field names.
               It supports multiple field matching currently.
               For example **phoneNumber|email**.
        :param pulumi.Input[_builtins.str] comment_expression: Specifies the regular expression used to match the data comment.
               For example **.*comment\\*.**, It represents a fuzzy match on data comment.
        :param pulumi.Input[_builtins.str] content_expression: Specifies the regular expression used to match the data content.
               For example **^male$|^female&**.
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] created_by: The creator.
        :param pulumi.Input[_builtins.str] description: Specifies the description of data recognition rule.
        :param pulumi.Input[_builtins.bool] enable: Whether the current data recognition rule is available.
        :param pulumi.Input[_builtins.str] method: Specifies the method of custom data recognition rule.
               The valid values are **NONE** and **REGULAR**.
               If the value of `rule_type` is **CUSTOM**, the field `method` must be set.
               If the value of `method` is **REGULAR**, `content_expression`, `column_expression`,
               `comment_expression`, one of the three fields must be set.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name.
               If the value of `rule_type` is **BUILTIN**,
               then the value of `name` should correspond to the value of `builtin_rule_id`.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] rule_type: Spedifies the type of data recognition rule.
               The valid values are **CUSTOM** and **BUILTIN**.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] secrecy_level: The name of data secrecy level.
               It corresponds to `secrecy_level_id` one-to-one.
        :param pulumi.Input[_builtins.str] secrecy_level_id: Spedifies the ID of data secrecy level.
               Before operating on data, you need to define a confidentiality level for the data
               and describe the confidentiality level accordingly.
               The larger the number, the higher the level of confidentiality.
        :param pulumi.Input[_builtins.int] secrecy_level_num: The level of data secrecy.The larger the secrecy level number,
               the higher the secrecy level. Currently, a maximum of 10 levels of confidentiality can be created.
               It corresponds to `secrecy_level_id` one-to-one.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        :param pulumi.Input[_builtins.str] updated_by: The editor.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        if builtin_rule_id is not None:
            pulumi.set(__self__, "builtin_rule_id", builtin_rule_id)
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if column_expression is not None:
            pulumi.set(__self__, "column_expression", column_expression)
        if comment_expression is not None:
            pulumi.set(__self__, "comment_expression", comment_expression)
        if content_expression is not None:
            pulumi.set(__self__, "content_expression", content_expression)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if secrecy_level is not None:
            pulumi.set(__self__, "secrecy_level", secrecy_level)
        if secrecy_level_id is not None:
            pulumi.set(__self__, "secrecy_level_id", secrecy_level_id)
        if secrecy_level_num is not None:
            pulumi.set(__self__, "secrecy_level_num", secrecy_level_num)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="builtinRuleId")
    def builtin_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of built-in data recognition rule.
        The system has built-in 100+ sensitive data identification and desensitization rules,
        which can detect personal sensitive information (ID card, bank card, etc.),
        corporate sensitive information (business license number, tax registration certificate number, etc.),
        key sensitive information (PEM certificate, HEY private key, etc.),
        device sensitive information (IP address, MAC address, IPV6 address, etc.),
        location sensitive information (province, city, GPS location, address, etc.)
        and general sensitive information (date) Identify and desensitize sensitive information.
        The field `builtin_rule_id` is required when `rule_type` is **BUILTIN**.
        Changing this parameter will create a new data recognition rule.
        """
        return pulumi.get(self, "builtin_rule_id")

    @builtin_rule_id.setter
    def builtin_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "builtin_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sprcifies the ID of data secrecy level category.
        Define data classifications for data of different values to better manage and measure
        your own data in groups, so that all types of groups have a parallel,
        equal and mutually exclusive relationship, making the data clearer.
        """
        return pulumi.get(self, "category_id")

    @category_id.setter
    def category_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category_id", value)

    @_builtins.property
    @pulumi.getter(name="columnExpression")
    def column_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression used to match the data column.
        This expression is used for both exact matching and fuzzy matching of field names.
        It supports multiple field matching currently.
        For example **phoneNumber|email**.
        """
        return pulumi.get(self, "column_expression")

    @column_expression.setter
    def column_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "column_expression", value)

    @_builtins.property
    @pulumi.getter(name="commentExpression")
    def comment_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression used to match the data comment.
        For example **.*comment\\*.**, It represents a fuzzy match on data comment.
        """
        return pulumi.get(self, "comment_expression")

    @comment_expression.setter
    def comment_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comment_expression", value)

    @_builtins.property
    @pulumi.getter(name="contentExpression")
    def content_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the regular expression used to match the data content.
        For example **^male$|^female&**.
        """
        return pulumi.get(self, "content_expression")

    @content_expression.setter
    def content_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content_expression", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creator.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of data recognition rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the current data recognition rule is available.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the method of custom data recognition rule.
        The valid values are **NONE** and **REGULAR**.
        If the value of `rule_type` is **CUSTOM**, the field `method` must be set.
        If the value of `method` is **REGULAR**, `content_expression`, `column_expression`,
        `comment_expression`, one of the three fields must be set.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the rule name.
        If the value of `rule_type` is **BUILTIN**,
        then the value of `name` should correspond to the value of `builtin_rule_id`.
        Changing this parameter will create a new data recognition rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Spedifies the type of data recognition rule.
        The valid values are **CUSTOM** and **BUILTIN**.
        Changing this parameter will create a new data recognition rule.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_type", value)

    @_builtins.property
    @pulumi.getter(name="secrecyLevel")
    def secrecy_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of data secrecy level.
        It corresponds to `secrecy_level_id` one-to-one.
        """
        return pulumi.get(self, "secrecy_level")

    @secrecy_level.setter
    def secrecy_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secrecy_level", value)

    @_builtins.property
    @pulumi.getter(name="secrecyLevelId")
    def secrecy_level_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Spedifies the ID of data secrecy level.
        Before operating on data, you need to define a confidentiality level for the data
        and describe the confidentiality level accordingly.
        The larger the number, the higher the level of confidentiality.
        """
        return pulumi.get(self, "secrecy_level_id")

    @secrecy_level_id.setter
    def secrecy_level_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secrecy_level_id", value)

    @_builtins.property
    @pulumi.getter(name="secrecyLevelNum")
    def secrecy_level_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The level of data secrecy.The larger the secrecy level number,
        the higher the secrecy level. Currently, a maximum of 10 levels of confidentiality can be created.
        It corresponds to `secrecy_level_id` one-to-one.
        """
        return pulumi.get(self, "secrecy_level_num")

    @secrecy_level_num.setter
    def secrecy_level_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "secrecy_level_num", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The editor.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/securityDataRecognitionRule:SecurityDataRecognitionRule")
class SecurityDataRecognitionRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 builtin_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 category_id: Optional[pulumi.Input[_builtins.str]] = None,
                 column_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 comment_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 content_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 secrecy_level_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a data recognition rule resource of DataArts Security within HuaweiCloud.

        ## Example Usage

        ### CUSTOM RULE CHECK

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        secrecy_level_id = config.require_object("secrecyLevelId")
        category_id = config.require_object("categoryId")
        test = huaweicloud.dataartsstudio.SecurityDataRecognitionRule("test",
            workspace_id=workspace_id,
            rule_type="CUSTOM",
            name="ruleName",
            secrecy_level_id=secrecy_level_id,
            category_id=category_id,
            method="REGULAR",
            content_expression="^male$|^female&",
            column_expression="phoneNumber|email",
            comment_expression=".*comment*.",
            description="rule_description_custom_update1")
        ```

        ### BUILTIN RULE CHECK

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        secrecy_level_id = config.require_object("secrecyLevelId")
        category_id = config.require_object("categoryId")
        builtin_rule_id = config.require_object("builtinRuleId")
        test = huaweicloud.dataartsstudio.SecurityDataRecognitionRule("test",
            workspace_id=workspace_id,
            rule_type="BUILTIN",
            name=name,
            secrecy_level_id=secrecy_level_id,
            category_id=category_id,
            builtin_rule_id=builtin_rule_id)
        ```

        ## Import

        The DataArts Security data recognition rule can be imported using `<workspace_id>/<id>`, e.g.

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/securityDataRecognitionRule:SecurityDataRecognitionRule test <workspace_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `secrecy_level_id`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_security_data_recognition_rule" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              secrecy_level_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] builtin_rule_id: Specifies the ID of built-in data recognition rule.
               The system has built-in 100+ sensitive data identification and desensitization rules,
               which can detect personal sensitive information (ID card, bank card, etc.),
               corporate sensitive information (business license number, tax registration certificate number, etc.),
               key sensitive information (PEM certificate, HEY private key, etc.),
               device sensitive information (IP address, MAC address, IPV6 address, etc.),
               location sensitive information (province, city, GPS location, address, etc.)
               and general sensitive information (date) Identify and desensitize sensitive information.
               The field `builtin_rule_id` is required when `rule_type` is **BUILTIN**.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] category_id: Sprcifies the ID of data secrecy level category.
               Define data classifications for data of different values to better manage and measure
               your own data in groups, so that all types of groups have a parallel,
               equal and mutually exclusive relationship, making the data clearer.
        :param pulumi.Input[_builtins.str] column_expression: Specifies the regular expression used to match the data column.
               This expression is used for both exact matching and fuzzy matching of field names.
               It supports multiple field matching currently.
               For example **phoneNumber|email**.
        :param pulumi.Input[_builtins.str] comment_expression: Specifies the regular expression used to match the data comment.
               For example **.*comment\\*.**, It represents a fuzzy match on data comment.
        :param pulumi.Input[_builtins.str] content_expression: Specifies the regular expression used to match the data content.
               For example **^male$|^female&**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of data recognition rule.
        :param pulumi.Input[_builtins.str] method: Specifies the method of custom data recognition rule.
               The valid values are **NONE** and **REGULAR**.
               If the value of `rule_type` is **CUSTOM**, the field `method` must be set.
               If the value of `method` is **REGULAR**, `content_expression`, `column_expression`,
               `comment_expression`, one of the three fields must be set.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name.
               If the value of `rule_type` is **BUILTIN**,
               then the value of `name` should correspond to the value of `builtin_rule_id`.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] rule_type: Spedifies the type of data recognition rule.
               The valid values are **CUSTOM** and **BUILTIN**.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] secrecy_level_id: Spedifies the ID of data secrecy level.
               Before operating on data, you need to define a confidentiality level for the data
               and describe the confidentiality level accordingly.
               The larger the number, the higher the level of confidentiality.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityDataRecognitionRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a data recognition rule resource of DataArts Security within HuaweiCloud.

        ## Example Usage

        ### CUSTOM RULE CHECK

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        secrecy_level_id = config.require_object("secrecyLevelId")
        category_id = config.require_object("categoryId")
        test = huaweicloud.dataartsstudio.SecurityDataRecognitionRule("test",
            workspace_id=workspace_id,
            rule_type="CUSTOM",
            name="ruleName",
            secrecy_level_id=secrecy_level_id,
            category_id=category_id,
            method="REGULAR",
            content_expression="^male$|^female&",
            column_expression="phoneNumber|email",
            comment_expression=".*comment*.",
            description="rule_description_custom_update1")
        ```

        ### BUILTIN RULE CHECK

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        name = config.require_object("name")
        secrecy_level_id = config.require_object("secrecyLevelId")
        category_id = config.require_object("categoryId")
        builtin_rule_id = config.require_object("builtinRuleId")
        test = huaweicloud.dataartsstudio.SecurityDataRecognitionRule("test",
            workspace_id=workspace_id,
            rule_type="BUILTIN",
            name=name,
            secrecy_level_id=secrecy_level_id,
            category_id=category_id,
            builtin_rule_id=builtin_rule_id)
        ```

        ## Import

        The DataArts Security data recognition rule can be imported using `<workspace_id>/<id>`, e.g.

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/securityDataRecognitionRule:SecurityDataRecognitionRule test <workspace_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `secrecy_level_id`.

        It is generally recommended running `pulumi preview` after importing a resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to align

        with the resource. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_dataarts_security_data_recognition_rule" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              secrecy_level_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param SecurityDataRecognitionRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityDataRecognitionRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 builtin_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 category_id: Optional[pulumi.Input[_builtins.str]] = None,
                 column_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 comment_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 content_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 secrecy_level_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityDataRecognitionRuleArgs.__new__(SecurityDataRecognitionRuleArgs)

            __props__.__dict__["builtin_rule_id"] = builtin_rule_id
            __props__.__dict__["category_id"] = category_id
            __props__.__dict__["column_expression"] = column_expression
            __props__.__dict__["comment_expression"] = comment_expression
            __props__.__dict__["content_expression"] = content_expression
            __props__.__dict__["description"] = description
            __props__.__dict__["method"] = method
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if rule_type is None and not opts.urn:
                raise TypeError("Missing required property 'rule_type'")
            __props__.__dict__["rule_type"] = rule_type
            if secrecy_level_id is None and not opts.urn:
                raise TypeError("Missing required property 'secrecy_level_id'")
            __props__.__dict__["secrecy_level_id"] = secrecy_level_id
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["enable"] = None
            __props__.__dict__["secrecy_level"] = None
            __props__.__dict__["secrecy_level_num"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(SecurityDataRecognitionRule, __self__).__init__(
            'huaweicloud:DataArtsStudio/securityDataRecognitionRule:SecurityDataRecognitionRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            builtin_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            category_id: Optional[pulumi.Input[_builtins.str]] = None,
            column_expression: Optional[pulumi.Input[_builtins.str]] = None,
            comment_expression: Optional[pulumi.Input[_builtins.str]] = None,
            content_expression: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable: Optional[pulumi.Input[_builtins.bool]] = None,
            method: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rule_type: Optional[pulumi.Input[_builtins.str]] = None,
            secrecy_level: Optional[pulumi.Input[_builtins.str]] = None,
            secrecy_level_id: Optional[pulumi.Input[_builtins.str]] = None,
            secrecy_level_num: Optional[pulumi.Input[_builtins.int]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SecurityDataRecognitionRule':
        """
        Get an existing SecurityDataRecognitionRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] builtin_rule_id: Specifies the ID of built-in data recognition rule.
               The system has built-in 100+ sensitive data identification and desensitization rules,
               which can detect personal sensitive information (ID card, bank card, etc.),
               corporate sensitive information (business license number, tax registration certificate number, etc.),
               key sensitive information (PEM certificate, HEY private key, etc.),
               device sensitive information (IP address, MAC address, IPV6 address, etc.),
               location sensitive information (province, city, GPS location, address, etc.)
               and general sensitive information (date) Identify and desensitize sensitive information.
               The field `builtin_rule_id` is required when `rule_type` is **BUILTIN**.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] category_id: Sprcifies the ID of data secrecy level category.
               Define data classifications for data of different values to better manage and measure
               your own data in groups, so that all types of groups have a parallel,
               equal and mutually exclusive relationship, making the data clearer.
        :param pulumi.Input[_builtins.str] column_expression: Specifies the regular expression used to match the data column.
               This expression is used for both exact matching and fuzzy matching of field names.
               It supports multiple field matching currently.
               For example **phoneNumber|email**.
        :param pulumi.Input[_builtins.str] comment_expression: Specifies the regular expression used to match the data comment.
               For example **.*comment\\*.**, It represents a fuzzy match on data comment.
        :param pulumi.Input[_builtins.str] content_expression: Specifies the regular expression used to match the data content.
               For example **^male$|^female&**.
        :param pulumi.Input[_builtins.str] created_at: The creation time.
        :param pulumi.Input[_builtins.str] created_by: The creator.
        :param pulumi.Input[_builtins.str] description: Specifies the description of data recognition rule.
        :param pulumi.Input[_builtins.bool] enable: Whether the current data recognition rule is available.
        :param pulumi.Input[_builtins.str] method: Specifies the method of custom data recognition rule.
               The valid values are **NONE** and **REGULAR**.
               If the value of `rule_type` is **CUSTOM**, the field `method` must be set.
               If the value of `method` is **REGULAR**, `content_expression`, `column_expression`,
               `comment_expression`, one of the three fields must be set.
        :param pulumi.Input[_builtins.str] name: Specifies the rule name.
               If the value of `rule_type` is **BUILTIN**,
               then the value of `name` should correspond to the value of `builtin_rule_id`.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] rule_type: Spedifies the type of data recognition rule.
               The valid values are **CUSTOM** and **BUILTIN**.
               Changing this parameter will create a new data recognition rule.
        :param pulumi.Input[_builtins.str] secrecy_level: The name of data secrecy level.
               It corresponds to `secrecy_level_id` one-to-one.
        :param pulumi.Input[_builtins.str] secrecy_level_id: Spedifies the ID of data secrecy level.
               Before operating on data, you need to define a confidentiality level for the data
               and describe the confidentiality level accordingly.
               The larger the number, the higher the level of confidentiality.
        :param pulumi.Input[_builtins.int] secrecy_level_num: The level of data secrecy.The larger the secrecy level number,
               the higher the secrecy level. Currently, a maximum of 10 levels of confidentiality can be created.
               It corresponds to `secrecy_level_id` one-to-one.
        :param pulumi.Input[_builtins.str] updated_at: The update time.
        :param pulumi.Input[_builtins.str] updated_by: The editor.
        :param pulumi.Input[_builtins.str] workspace_id: Specifies the ID of DataArts Studio workspace.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityDataRecognitionRuleState.__new__(_SecurityDataRecognitionRuleState)

        __props__.__dict__["builtin_rule_id"] = builtin_rule_id
        __props__.__dict__["category_id"] = category_id
        __props__.__dict__["column_expression"] = column_expression
        __props__.__dict__["comment_expression"] = comment_expression
        __props__.__dict__["content_expression"] = content_expression
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["enable"] = enable
        __props__.__dict__["method"] = method
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["rule_type"] = rule_type
        __props__.__dict__["secrecy_level"] = secrecy_level
        __props__.__dict__["secrecy_level_id"] = secrecy_level_id
        __props__.__dict__["secrecy_level_num"] = secrecy_level_num
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["workspace_id"] = workspace_id
        return SecurityDataRecognitionRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="builtinRuleId")
    def builtin_rule_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of built-in data recognition rule.
        The system has built-in 100+ sensitive data identification and desensitization rules,
        which can detect personal sensitive information (ID card, bank card, etc.),
        corporate sensitive information (business license number, tax registration certificate number, etc.),
        key sensitive information (PEM certificate, HEY private key, etc.),
        device sensitive information (IP address, MAC address, IPV6 address, etc.),
        location sensitive information (province, city, GPS location, address, etc.)
        and general sensitive information (date) Identify and desensitize sensitive information.
        The field `builtin_rule_id` is required when `rule_type` is **BUILTIN**.
        Changing this parameter will create a new data recognition rule.
        """
        return pulumi.get(self, "builtin_rule_id")

    @_builtins.property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Sprcifies the ID of data secrecy level category.
        Define data classifications for data of different values to better manage and measure
        your own data in groups, so that all types of groups have a parallel,
        equal and mutually exclusive relationship, making the data clearer.
        """
        return pulumi.get(self, "category_id")

    @_builtins.property
    @pulumi.getter(name="columnExpression")
    def column_expression(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the regular expression used to match the data column.
        This expression is used for both exact matching and fuzzy matching of field names.
        It supports multiple field matching currently.
        For example **phoneNumber|email**.
        """
        return pulumi.get(self, "column_expression")

    @_builtins.property
    @pulumi.getter(name="commentExpression")
    def comment_expression(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the regular expression used to match the data comment.
        For example **.*comment\\*.**, It represents a fuzzy match on data comment.
        """
        return pulumi.get(self, "comment_expression")

    @_builtins.property
    @pulumi.getter(name="contentExpression")
    def content_expression(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the regular expression used to match the data content.
        For example **^male$|^female&**.
        """
        return pulumi.get(self, "content_expression")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of data recognition rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the current data recognition rule is available.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def method(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the method of custom data recognition rule.
        The valid values are **NONE** and **REGULAR**.
        If the value of `rule_type` is **CUSTOM**, the field `method` must be set.
        If the value of `method` is **REGULAR**, `content_expression`, `column_expression`,
        `comment_expression`, one of the three fields must be set.
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the rule name.
        If the value of `rule_type` is **BUILTIN**,
        then the value of `name` should correspond to the value of `builtin_rule_id`.
        Changing this parameter will create a new data recognition rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Output[_builtins.str]:
        """
        Spedifies the type of data recognition rule.
        The valid values are **CUSTOM** and **BUILTIN**.
        Changing this parameter will create a new data recognition rule.
        """
        return pulumi.get(self, "rule_type")

    @_builtins.property
    @pulumi.getter(name="secrecyLevel")
    def secrecy_level(self) -> pulumi.Output[_builtins.str]:
        """
        The name of data secrecy level.
        It corresponds to `secrecy_level_id` one-to-one.
        """
        return pulumi.get(self, "secrecy_level")

    @_builtins.property
    @pulumi.getter(name="secrecyLevelId")
    def secrecy_level_id(self) -> pulumi.Output[_builtins.str]:
        """
        Spedifies the ID of data secrecy level.
        Before operating on data, you need to define a confidentiality level for the data
        and describe the confidentiality level accordingly.
        The larger the number, the higher the level of confidentiality.
        """
        return pulumi.get(self, "secrecy_level_id")

    @_builtins.property
    @pulumi.getter(name="secrecyLevelNum")
    def secrecy_level_num(self) -> pulumi.Output[_builtins.int]:
        """
        The level of data secrecy.The larger the secrecy level number,
        the higher the secrecy level. Currently, a maximum of 10 levels of confidentiality can be created.
        It corresponds to `secrecy_level_id` one-to-one.
        """
        return pulumi.get(self, "secrecy_level_num")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The editor.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of DataArts Studio workspace.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

