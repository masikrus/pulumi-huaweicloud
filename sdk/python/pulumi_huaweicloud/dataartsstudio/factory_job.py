# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FactoryJobArgs', 'FactoryJob']

@pulumi.input_type
class FactoryJobArgs:
    def __init__(__self__, *,
                 nodes: pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeArgs']]],
                 process_type: pulumi.Input[_builtins.str],
                 schedule: pulumi.Input['FactoryJobScheduleArgs'],
                 basic_config: Optional[pulumi.Input['FactoryJobBasicConfigArgs']] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 log_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobParamArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a FactoryJob resource.
        :param pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeArgs']]] nodes: Node definition.
               The nodes structure is documented below.
        :param pulumi.Input[_builtins.str] process_type: Job type.  
               The valid values are as follows:
               - **REAL_TIME**: real-time processing.
               - **BATCH**: batch processing.
        :param pulumi.Input['FactoryJobScheduleArgs'] schedule: Scheduling configuration.
               The schedule structure is documented below.
        :param pulumi.Input['FactoryJobBasicConfigArgs'] basic_config: Baisc job information.
               The basic_config structure is documented below.
               
               <a name="job_Node"></a>
               The `nodes` block supports:
        :param pulumi.Input[_builtins.str] directory: Path of a job in the directory tree.  
               If the directory of the path does not exist during job creation, a directory is automatically
               created in the root directory /, for example, /dir/a/.
        :param pulumi.Input[_builtins.str] log_path: The OBS path where job execution logs are stored.
        :param pulumi.Input[_builtins.str] name: Name of a parameter.  
               The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
               underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input['FactoryJobParamArgs']]] params: Job parameter definition.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] workspace_id: The workspace ID.
               If this parameter is not set, the default workspace is used by default.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "process_type", process_type)
        pulumi.set(__self__, "schedule", schedule)
        if basic_config is not None:
            pulumi.set(__self__, "basic_config", basic_config)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if log_path is not None:
            pulumi.set(__self__, "log_path", log_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeArgs']]]:
        """
        Node definition.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeArgs']]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter(name="processType")
    def process_type(self) -> pulumi.Input[_builtins.str]:
        """
        Job type.  
        The valid values are as follows:
        - **REAL_TIME**: real-time processing.
        - **BATCH**: batch processing.
        """
        return pulumi.get(self, "process_type")

    @process_type.setter
    def process_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "process_type", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['FactoryJobScheduleArgs']:
        """
        Scheduling configuration.
        The schedule structure is documented below.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input['FactoryJobScheduleArgs']):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter(name="basicConfig")
    def basic_config(self) -> Optional[pulumi.Input['FactoryJobBasicConfigArgs']]:
        """
        Baisc job information.
        The basic_config structure is documented below.

        <a name="job_Node"></a>
        The `nodes` block supports:
        """
        return pulumi.get(self, "basic_config")

    @basic_config.setter
    def basic_config(self, value: Optional[pulumi.Input['FactoryJobBasicConfigArgs']]):
        pulumi.set(self, "basic_config", value)

    @_builtins.property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of a job in the directory tree.  
        If the directory of the path does not exist during job creation, a directory is automatically
        created in the root directory /, for example, /dir/a/.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "directory", value)

    @_builtins.property
    @pulumi.getter(name="logPath")
    def log_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OBS path where job execution logs are stored.
        """
        return pulumi.get(self, "log_path")

    @log_path.setter
    def log_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_path", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobParamArgs']]]]:
        """
        Job parameter definition.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobParamArgs']]]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The workspace ID.
        If this parameter is not set, the default workspace is used by default.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _FactoryJobState:
    def __init__(__self__, *,
                 basic_config: Optional[pulumi.Input['FactoryJobBasicConfigArgs']] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 log_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeArgs']]]] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobParamArgs']]]] = None,
                 process_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input['FactoryJobScheduleArgs']] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering FactoryJob resources.
        :param pulumi.Input['FactoryJobBasicConfigArgs'] basic_config: Baisc job information.
               The basic_config structure is documented below.
               
               <a name="job_Node"></a>
               The `nodes` block supports:
        :param pulumi.Input[_builtins.str] directory: Path of a job in the directory tree.  
               If the directory of the path does not exist during job creation, a directory is automatically
               created in the root directory /, for example, /dir/a/.
        :param pulumi.Input[_builtins.str] log_path: The OBS path where job execution logs are stored.
        :param pulumi.Input[_builtins.str] name: Name of a parameter.  
               The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
               underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeArgs']]] nodes: Node definition.
               The nodes structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FactoryJobParamArgs']]] params: Job parameter definition.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] process_type: Job type.  
               The valid values are as follows:
               - **REAL_TIME**: real-time processing.
               - **BATCH**: batch processing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input['FactoryJobScheduleArgs'] schedule: Scheduling configuration.
               The schedule structure is documented below.
        :param pulumi.Input[_builtins.str] workspace_id: The workspace ID.
               If this parameter is not set, the default workspace is used by default.
               Changing this parameter will create a new resource.
        """
        if basic_config is not None:
            pulumi.set(__self__, "basic_config", basic_config)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if log_path is not None:
            pulumi.set(__self__, "log_path", log_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if process_type is not None:
            pulumi.set(__self__, "process_type", process_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="basicConfig")
    def basic_config(self) -> Optional[pulumi.Input['FactoryJobBasicConfigArgs']]:
        """
        Baisc job information.
        The basic_config structure is documented below.

        <a name="job_Node"></a>
        The `nodes` block supports:
        """
        return pulumi.get(self, "basic_config")

    @basic_config.setter
    def basic_config(self, value: Optional[pulumi.Input['FactoryJobBasicConfigArgs']]):
        pulumi.set(self, "basic_config", value)

    @_builtins.property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of a job in the directory tree.  
        If the directory of the path does not exist during job creation, a directory is automatically
        created in the root directory /, for example, /dir/a/.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "directory", value)

    @_builtins.property
    @pulumi.getter(name="logPath")
    def log_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OBS path where job execution logs are stored.
        """
        return pulumi.get(self, "log_path")

    @log_path.setter
    def log_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_path", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeArgs']]]]:
        """
        Node definition.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobParamArgs']]]]:
        """
        Job parameter definition.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FactoryJobParamArgs']]]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter(name="processType")
    def process_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Job type.  
        The valid values are as follows:
        - **REAL_TIME**: real-time processing.
        - **BATCH**: batch processing.
        """
        return pulumi.get(self, "process_type")

    @process_type.setter
    def process_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "process_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['FactoryJobScheduleArgs']]:
        """
        Scheduling configuration.
        The schedule structure is documented below.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['FactoryJobScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The workspace ID.
        If this parameter is not set, the default workspace is used by default.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("huaweicloud:DataArtsStudio/factoryJob:FactoryJob")
class FactoryJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 basic_config: Optional[pulumi.Input[Union['FactoryJobBasicConfigArgs', 'FactoryJobBasicConfigArgsDict']]] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 log_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryJobNodeArgs', 'FactoryJobNodeArgsDict']]]]] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryJobParamArgs', 'FactoryJobParamArgsDict']]]]] = None,
                 process_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[Union['FactoryJobScheduleArgs', 'FactoryJobScheduleArgsDict']]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a job resource of DataArts Factory within HuaweiCloud.

        A job consists of one or more nodes, such as Hive SQL and CDM Job nodes.
        DLF supports two types of jobs: batch jobs and real-time jobs.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        cmd_name = config.require_object("cmdName")
        test = huaweicloud.dataartsstudio.FactoryJob("test",
            workspace_id=workspace_id,
            name="demo",
            process_type="REAL_TIME",
            nodes=[{
                "name": "Rest_client_demo_1",
                "type": "RESTAPI",
                "location": {
                    "x": 10,
                    "y": 10,
                },
                "properties": [
                    {
                        "name": "url",
                        "value": "https://www.huaweicloud.com/",
                    },
                    {
                        "name": "method",
                        "value": "GET",
                    },
                    {
                        "name": "retry",
                        "value": "false",
                    },
                    {
                        "name": "requestMode",
                        "value": "sync",
                    },
                    {
                        "name": "securityAuthentication",
                        "value": "NONE",
                    },
                    {
                        "name": "agentName",
                        "value": cmd_name,
                    },
                ],
            }],
            schedule={
                "type": "EXECUTE_ONCE",
            })
        ```

        ## Import

        The job can be imported using `workspace_id`, `name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/factoryJob:FactoryJob test <workspace_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['FactoryJobBasicConfigArgs', 'FactoryJobBasicConfigArgsDict']] basic_config: Baisc job information.
               The basic_config structure is documented below.
               
               <a name="job_Node"></a>
               The `nodes` block supports:
        :param pulumi.Input[_builtins.str] directory: Path of a job in the directory tree.  
               If the directory of the path does not exist during job creation, a directory is automatically
               created in the root directory /, for example, /dir/a/.
        :param pulumi.Input[_builtins.str] log_path: The OBS path where job execution logs are stored.
        :param pulumi.Input[_builtins.str] name: Name of a parameter.  
               The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
               underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input[Union['FactoryJobNodeArgs', 'FactoryJobNodeArgsDict']]]] nodes: Node definition.
               The nodes structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FactoryJobParamArgs', 'FactoryJobParamArgsDict']]]] params: Job parameter definition.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] process_type: Job type.  
               The valid values are as follows:
               - **REAL_TIME**: real-time processing.
               - **BATCH**: batch processing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['FactoryJobScheduleArgs', 'FactoryJobScheduleArgsDict']] schedule: Scheduling configuration.
               The schedule structure is documented below.
        :param pulumi.Input[_builtins.str] workspace_id: The workspace ID.
               If this parameter is not set, the default workspace is used by default.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FactoryJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a job resource of DataArts Factory within HuaweiCloud.

        A job consists of one or more nodes, such as Hive SQL and CDM Job nodes.
        DLF supports two types of jobs: batch jobs and real-time jobs.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_id = config.require_object("workspaceId")
        cmd_name = config.require_object("cmdName")
        test = huaweicloud.dataartsstudio.FactoryJob("test",
            workspace_id=workspace_id,
            name="demo",
            process_type="REAL_TIME",
            nodes=[{
                "name": "Rest_client_demo_1",
                "type": "RESTAPI",
                "location": {
                    "x": 10,
                    "y": 10,
                },
                "properties": [
                    {
                        "name": "url",
                        "value": "https://www.huaweicloud.com/",
                    },
                    {
                        "name": "method",
                        "value": "GET",
                    },
                    {
                        "name": "retry",
                        "value": "false",
                    },
                    {
                        "name": "requestMode",
                        "value": "sync",
                    },
                    {
                        "name": "securityAuthentication",
                        "value": "NONE",
                    },
                    {
                        "name": "agentName",
                        "value": cmd_name,
                    },
                ],
            }],
            schedule={
                "type": "EXECUTE_ONCE",
            })
        ```

        ## Import

        The job can be imported using `workspace_id`, `name`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:DataArtsStudio/factoryJob:FactoryJob test <workspace_id>/<name>
        ```

        :param str resource_name: The name of the resource.
        :param FactoryJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FactoryJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 basic_config: Optional[pulumi.Input[Union['FactoryJobBasicConfigArgs', 'FactoryJobBasicConfigArgsDict']]] = None,
                 directory: Optional[pulumi.Input[_builtins.str]] = None,
                 log_path: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryJobNodeArgs', 'FactoryJobNodeArgsDict']]]]] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryJobParamArgs', 'FactoryJobParamArgsDict']]]]] = None,
                 process_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[Union['FactoryJobScheduleArgs', 'FactoryJobScheduleArgsDict']]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FactoryJobArgs.__new__(FactoryJobArgs)

            __props__.__dict__["basic_config"] = basic_config
            __props__.__dict__["directory"] = directory
            __props__.__dict__["log_path"] = log_path
            __props__.__dict__["name"] = name
            if nodes is None and not opts.urn:
                raise TypeError("Missing required property 'nodes'")
            __props__.__dict__["nodes"] = nodes
            __props__.__dict__["params"] = params
            if process_type is None and not opts.urn:
                raise TypeError("Missing required property 'process_type'")
            __props__.__dict__["process_type"] = process_type
            __props__.__dict__["region"] = region
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["workspace_id"] = workspace_id
        super(FactoryJob, __self__).__init__(
            'huaweicloud:DataArtsStudio/factoryJob:FactoryJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            basic_config: Optional[pulumi.Input[Union['FactoryJobBasicConfigArgs', 'FactoryJobBasicConfigArgsDict']]] = None,
            directory: Optional[pulumi.Input[_builtins.str]] = None,
            log_path: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryJobNodeArgs', 'FactoryJobNodeArgsDict']]]]] = None,
            params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FactoryJobParamArgs', 'FactoryJobParamArgsDict']]]]] = None,
            process_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            schedule: Optional[pulumi.Input[Union['FactoryJobScheduleArgs', 'FactoryJobScheduleArgsDict']]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'FactoryJob':
        """
        Get an existing FactoryJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['FactoryJobBasicConfigArgs', 'FactoryJobBasicConfigArgsDict']] basic_config: Baisc job information.
               The basic_config structure is documented below.
               
               <a name="job_Node"></a>
               The `nodes` block supports:
        :param pulumi.Input[_builtins.str] directory: Path of a job in the directory tree.  
               If the directory of the path does not exist during job creation, a directory is automatically
               created in the root directory /, for example, /dir/a/.
        :param pulumi.Input[_builtins.str] log_path: The OBS path where job execution logs are stored.
        :param pulumi.Input[_builtins.str] name: Name of a parameter.  
               The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
               underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input[Union['FactoryJobNodeArgs', 'FactoryJobNodeArgsDict']]]] nodes: Node definition.
               The nodes structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FactoryJobParamArgs', 'FactoryJobParamArgsDict']]]] params: Job parameter definition.
               The params structure is documented below.
        :param pulumi.Input[_builtins.str] process_type: Job type.  
               The valid values are as follows:
               - **REAL_TIME**: real-time processing.
               - **BATCH**: batch processing.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Union['FactoryJobScheduleArgs', 'FactoryJobScheduleArgsDict']] schedule: Scheduling configuration.
               The schedule structure is documented below.
        :param pulumi.Input[_builtins.str] workspace_id: The workspace ID.
               If this parameter is not set, the default workspace is used by default.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FactoryJobState.__new__(_FactoryJobState)

        __props__.__dict__["basic_config"] = basic_config
        __props__.__dict__["directory"] = directory
        __props__.__dict__["log_path"] = log_path
        __props__.__dict__["name"] = name
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["params"] = params
        __props__.__dict__["process_type"] = process_type
        __props__.__dict__["region"] = region
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["workspace_id"] = workspace_id
        return FactoryJob(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="basicConfig")
    def basic_config(self) -> pulumi.Output['outputs.FactoryJobBasicConfig']:
        """
        Baisc job information.
        The basic_config structure is documented below.

        <a name="job_Node"></a>
        The `nodes` block supports:
        """
        return pulumi.get(self, "basic_config")

    @_builtins.property
    @pulumi.getter
    def directory(self) -> pulumi.Output[_builtins.str]:
        """
        Path of a job in the directory tree.  
        If the directory of the path does not exist during job creation, a directory is automatically
        created in the root directory /, for example, /dir/a/.
        """
        return pulumi.get(self, "directory")

    @_builtins.property
    @pulumi.getter(name="logPath")
    def log_path(self) -> pulumi.Output[_builtins.str]:
        """
        The OBS path where job execution logs are stored.
        """
        return pulumi.get(self, "log_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of a parameter.  
        The name contains a maximum of 64 characters, including only letters, numbers, hyphens (-), and
        underscores (_).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence['outputs.FactoryJobNode']]:
        """
        Node definition.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def params(self) -> pulumi.Output[Sequence['outputs.FactoryJobParam']]:
        """
        Job parameter definition.
        The params structure is documented below.
        """
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter(name="processType")
    def process_type(self) -> pulumi.Output[_builtins.str]:
        """
        Job type.  
        The valid values are as follows:
        - **REAL_TIME**: real-time processing.
        - **BATCH**: batch processing.
        """
        return pulumi.get(self, "process_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Output['outputs.FactoryJobSchedule']:
        """
        Scheduling configuration.
        The schedule structure is documented below.
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        The workspace ID.
        If this parameter is not set, the default workspace is used by default.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "workspace_id")

