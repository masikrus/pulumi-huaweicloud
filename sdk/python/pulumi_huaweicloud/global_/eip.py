# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['EipArgs', 'Eip']

@pulumi.input_type
class EipArgs:
    def __init__(__self__, *,
                 access_site: pulumi.Input[_builtins.str],
                 geip_pool_name: pulumi.Input[_builtins.str],
                 internet_bandwidth_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Eip resource.
        :param pulumi.Input[_builtins.str] access_site: Specifies the access site name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] geip_pool_name: Specifies the global EIP pool name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] internet_bandwidth_id: Specifies the internet bandwidth id which the global EIP use.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the global EIP.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id to which the global EIP
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the global EIP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the global EIP.
        """
        pulumi.set(__self__, "access_site", access_site)
        pulumi.set(__self__, "geip_pool_name", geip_pool_name)
        pulumi.set(__self__, "internet_bandwidth_id", internet_bandwidth_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the access site name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_site")

    @access_site.setter
    def access_site(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "access_site", value)

    @_builtins.property
    @pulumi.getter(name="geipPoolName")
    def geip_pool_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the global EIP pool name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "geip_pool_name")

    @geip_pool_name.setter
    def geip_pool_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "geip_pool_name", value)

    @_builtins.property
    @pulumi.getter(name="internetBandwidthId")
    def internet_bandwidth_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the internet bandwidth id which the global EIP use.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "internet_bandwidth_id")

    @internet_bandwidth_id.setter
    def internet_bandwidth_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "internet_bandwidth_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the global EIP.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project id to which the global EIP
        belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the global EIP.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the tags of the global EIP.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _EipState:
    def __init__(__self__, *,
                 access_site: Optional[pulumi.Input[_builtins.str]] = None,
                 associate_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 associate_instance_region: Optional[pulumi.Input[_builtins.str]] = None,
                 associate_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen: Optional[pulumi.Input[_builtins.bool]] = None,
                 frozen_info: Optional[pulumi.Input[_builtins.str]] = None,
                 geip_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 global_connection_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 global_connection_bandwidth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 internet_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.float]] = None,
                 isp: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 polluted: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Eip resources.
        :param pulumi.Input[_builtins.str] access_site: Specifies the access site name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] associate_instance_id: The ID of the associate instance.
        :param pulumi.Input[_builtins.str] associate_instance_region: The region of the associate instance.
        :param pulumi.Input[_builtins.str] associate_instance_type: The type of the associate instance.
        :param pulumi.Input[_builtins.str] created_at: The create time of the global EIP.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the global EIP.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id to which the global EIP
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] frozen: The global EIP is frozen or not.
        :param pulumi.Input[_builtins.str] frozen_info: The frozen info of the global EIP.
        :param pulumi.Input[_builtins.str] geip_pool_name: Specifies the global EIP pool name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] global_connection_bandwidth_id: The ID of the global connection bandwidth.
        :param pulumi.Input[_builtins.str] global_connection_bandwidth_type: The type of the global connection bandwidth.
        :param pulumi.Input[_builtins.str] internet_bandwidth_id: Specifies the internet bandwidth id which the global EIP use.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ip_address: The ip address of the global EIP.
        :param pulumi.Input[_builtins.float] ip_version: The ip version of the global EIP.
        :param pulumi.Input[_builtins.str] isp: The the internet service provider of the global EIP.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the global EIP.
        :param pulumi.Input[_builtins.bool] polluted: The global EIP is polluted or not.
        :param pulumi.Input[_builtins.str] status: The status of the global EIP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the global EIP.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the global EIP.
        """
        if access_site is not None:
            pulumi.set(__self__, "access_site", access_site)
        if associate_instance_id is not None:
            pulumi.set(__self__, "associate_instance_id", associate_instance_id)
        if associate_instance_region is not None:
            pulumi.set(__self__, "associate_instance_region", associate_instance_region)
        if associate_instance_type is not None:
            pulumi.set(__self__, "associate_instance_type", associate_instance_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if frozen is not None:
            pulumi.set(__self__, "frozen", frozen)
        if frozen_info is not None:
            pulumi.set(__self__, "frozen_info", frozen_info)
        if geip_pool_name is not None:
            pulumi.set(__self__, "geip_pool_name", geip_pool_name)
        if global_connection_bandwidth_id is not None:
            pulumi.set(__self__, "global_connection_bandwidth_id", global_connection_bandwidth_id)
        if global_connection_bandwidth_type is not None:
            pulumi.set(__self__, "global_connection_bandwidth_type", global_connection_bandwidth_type)
        if internet_bandwidth_id is not None:
            pulumi.set(__self__, "internet_bandwidth_id", internet_bandwidth_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if isp is not None:
            pulumi.set(__self__, "isp", isp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if polluted is not None:
            pulumi.set(__self__, "polluted", polluted)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the access site name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_site")

    @access_site.setter
    def access_site(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_site", value)

    @_builtins.property
    @pulumi.getter(name="associateInstanceId")
    def associate_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the associate instance.
        """
        return pulumi.get(self, "associate_instance_id")

    @associate_instance_id.setter
    def associate_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "associate_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="associateInstanceRegion")
    def associate_instance_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the associate instance.
        """
        return pulumi.get(self, "associate_instance_region")

    @associate_instance_region.setter
    def associate_instance_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "associate_instance_region", value)

    @_builtins.property
    @pulumi.getter(name="associateInstanceType")
    def associate_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the associate instance.
        """
        return pulumi.get(self, "associate_instance_type")

    @associate_instance_type.setter
    def associate_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "associate_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The create time of the global EIP.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the global EIP.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project id to which the global EIP
        belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def frozen(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The global EIP is frozen or not.
        """
        return pulumi.get(self, "frozen")

    @frozen.setter
    def frozen(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "frozen", value)

    @_builtins.property
    @pulumi.getter(name="frozenInfo")
    def frozen_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The frozen info of the global EIP.
        """
        return pulumi.get(self, "frozen_info")

    @frozen_info.setter
    def frozen_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frozen_info", value)

    @_builtins.property
    @pulumi.getter(name="geipPoolName")
    def geip_pool_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the global EIP pool name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "geip_pool_name")

    @geip_pool_name.setter
    def geip_pool_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "geip_pool_name", value)

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthId")
    def global_connection_bandwidth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the global connection bandwidth.
        """
        return pulumi.get(self, "global_connection_bandwidth_id")

    @global_connection_bandwidth_id.setter
    def global_connection_bandwidth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_connection_bandwidth_id", value)

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthType")
    def global_connection_bandwidth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the global connection bandwidth.
        """
        return pulumi.get(self, "global_connection_bandwidth_type")

    @global_connection_bandwidth_type.setter
    def global_connection_bandwidth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_connection_bandwidth_type", value)

    @_builtins.property
    @pulumi.getter(name="internetBandwidthId")
    def internet_bandwidth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the internet bandwidth id which the global EIP use.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "internet_bandwidth_id")

    @internet_bandwidth_id.setter
    def internet_bandwidth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "internet_bandwidth_id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ip address of the global EIP.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The ip version of the global EIP.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter
    def isp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The the internet service provider of the global EIP.
        """
        return pulumi.get(self, "isp")

    @isp.setter
    def isp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "isp", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the global EIP.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def polluted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The global EIP is polluted or not.
        """
        return pulumi.get(self, "polluted")

    @polluted.setter
    def polluted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "polluted", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the global EIP.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the tags of the global EIP.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the global EIP.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:global/eip:Eip")
class Eip(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_site: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 geip_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 internet_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a global EIP resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        enterprise_project_id = config.require_object("enterpriseProjectId")
        bandwidth_name = config.require_object("bandwidthName")
        eip_name = config.require_object("eipName")
        all = huaweicloud.global.get_eip_pools()
        test = huaweicloud.global_.InternetBandwidth("test",
            access_site=all.geip_pools[0].access_site,
            charge_mode="95peak_guar",
            enterprise_project_id=enterprise_project_id,
            size=300,
            isp=all.geip_pools[0].isp,
            name=bandwidth_name,
            type=all.geip_pools[0].allowed_bandwidth_types[0].type)
        test_eip = huaweicloud.global_.Eip("test",
            access_site=all.geip_pools[0].access_site,
            enterprise_project_id=enterprise_project_id,
            geip_pool_name=all.geip_pools[0].name,
            internet_bandwidth_id=test.id,
            name=eip_name,
            tags={
                "foo": "bar",
            })
        ```

        ## Import

        The global EIP can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:global/eip:Eip test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_site: Specifies the access site name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the global EIP.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id to which the global EIP
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] geip_pool_name: Specifies the global EIP pool name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] internet_bandwidth_id: Specifies the internet bandwidth id which the global EIP use.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the global EIP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the global EIP.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EipArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a global EIP resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        enterprise_project_id = config.require_object("enterpriseProjectId")
        bandwidth_name = config.require_object("bandwidthName")
        eip_name = config.require_object("eipName")
        all = huaweicloud.global.get_eip_pools()
        test = huaweicloud.global_.InternetBandwidth("test",
            access_site=all.geip_pools[0].access_site,
            charge_mode="95peak_guar",
            enterprise_project_id=enterprise_project_id,
            size=300,
            isp=all.geip_pools[0].isp,
            name=bandwidth_name,
            type=all.geip_pools[0].allowed_bandwidth_types[0].type)
        test_eip = huaweicloud.global_.Eip("test",
            access_site=all.geip_pools[0].access_site,
            enterprise_project_id=enterprise_project_id,
            geip_pool_name=all.geip_pools[0].name,
            internet_bandwidth_id=test.id,
            name=eip_name,
            tags={
                "foo": "bar",
            })
        ```

        ## Import

        The global EIP can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:global/eip:Eip test <id>
        ```

        :param str resource_name: The name of the resource.
        :param EipArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EipArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_site: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 geip_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 internet_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EipArgs.__new__(EipArgs)

            if access_site is None and not opts.urn:
                raise TypeError("Missing required property 'access_site'")
            __props__.__dict__["access_site"] = access_site
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if geip_pool_name is None and not opts.urn:
                raise TypeError("Missing required property 'geip_pool_name'")
            __props__.__dict__["geip_pool_name"] = geip_pool_name
            if internet_bandwidth_id is None and not opts.urn:
                raise TypeError("Missing required property 'internet_bandwidth_id'")
            __props__.__dict__["internet_bandwidth_id"] = internet_bandwidth_id
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["associate_instance_id"] = None
            __props__.__dict__["associate_instance_region"] = None
            __props__.__dict__["associate_instance_type"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["frozen"] = None
            __props__.__dict__["frozen_info"] = None
            __props__.__dict__["global_connection_bandwidth_id"] = None
            __props__.__dict__["global_connection_bandwidth_type"] = None
            __props__.__dict__["ip_address"] = None
            __props__.__dict__["ip_version"] = None
            __props__.__dict__["isp"] = None
            __props__.__dict__["polluted"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(Eip, __self__).__init__(
            'huaweicloud:global/eip:Eip',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_site: Optional[pulumi.Input[_builtins.str]] = None,
            associate_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            associate_instance_region: Optional[pulumi.Input[_builtins.str]] = None,
            associate_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            frozen: Optional[pulumi.Input[_builtins.bool]] = None,
            frozen_info: Optional[pulumi.Input[_builtins.str]] = None,
            geip_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
            global_connection_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
            global_connection_bandwidth_type: Optional[pulumi.Input[_builtins.str]] = None,
            internet_bandwidth_id: Optional[pulumi.Input[_builtins.str]] = None,
            ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            ip_version: Optional[pulumi.Input[_builtins.float]] = None,
            isp: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            polluted: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'Eip':
        """
        Get an existing Eip resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_site: Specifies the access site name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] associate_instance_id: The ID of the associate instance.
        :param pulumi.Input[_builtins.str] associate_instance_region: The region of the associate instance.
        :param pulumi.Input[_builtins.str] associate_instance_type: The type of the associate instance.
        :param pulumi.Input[_builtins.str] created_at: The create time of the global EIP.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the global EIP.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project id to which the global EIP
               belongs. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] frozen: The global EIP is frozen or not.
        :param pulumi.Input[_builtins.str] frozen_info: The frozen info of the global EIP.
        :param pulumi.Input[_builtins.str] geip_pool_name: Specifies the global EIP pool name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] global_connection_bandwidth_id: The ID of the global connection bandwidth.
        :param pulumi.Input[_builtins.str] global_connection_bandwidth_type: The type of the global connection bandwidth.
        :param pulumi.Input[_builtins.str] internet_bandwidth_id: Specifies the internet bandwidth id which the global EIP use.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] ip_address: The ip address of the global EIP.
        :param pulumi.Input[_builtins.float] ip_version: The ip version of the global EIP.
        :param pulumi.Input[_builtins.str] isp: The the internet service provider of the global EIP.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the global EIP.
        :param pulumi.Input[_builtins.bool] polluted: The global EIP is polluted or not.
        :param pulumi.Input[_builtins.str] status: The status of the global EIP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the tags of the global EIP.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the global EIP.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EipState.__new__(_EipState)

        __props__.__dict__["access_site"] = access_site
        __props__.__dict__["associate_instance_id"] = associate_instance_id
        __props__.__dict__["associate_instance_region"] = associate_instance_region
        __props__.__dict__["associate_instance_type"] = associate_instance_type
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["frozen"] = frozen
        __props__.__dict__["frozen_info"] = frozen_info
        __props__.__dict__["geip_pool_name"] = geip_pool_name
        __props__.__dict__["global_connection_bandwidth_id"] = global_connection_bandwidth_id
        __props__.__dict__["global_connection_bandwidth_type"] = global_connection_bandwidth_type
        __props__.__dict__["internet_bandwidth_id"] = internet_bandwidth_id
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["isp"] = isp
        __props__.__dict__["name"] = name
        __props__.__dict__["polluted"] = polluted
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        return Eip(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the access site name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "access_site")

    @_builtins.property
    @pulumi.getter(name="associateInstanceId")
    def associate_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the associate instance.
        """
        return pulumi.get(self, "associate_instance_id")

    @_builtins.property
    @pulumi.getter(name="associateInstanceRegion")
    def associate_instance_region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the associate instance.
        """
        return pulumi.get(self, "associate_instance_region")

    @_builtins.property
    @pulumi.getter(name="associateInstanceType")
    def associate_instance_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the associate instance.
        """
        return pulumi.get(self, "associate_instance_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The create time of the global EIP.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the global EIP.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project id to which the global EIP
        belongs. Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def frozen(self) -> pulumi.Output[_builtins.bool]:
        """
        The global EIP is frozen or not.
        """
        return pulumi.get(self, "frozen")

    @_builtins.property
    @pulumi.getter(name="frozenInfo")
    def frozen_info(self) -> pulumi.Output[_builtins.str]:
        """
        The frozen info of the global EIP.
        """
        return pulumi.get(self, "frozen_info")

    @_builtins.property
    @pulumi.getter(name="geipPoolName")
    def geip_pool_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the global EIP pool name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "geip_pool_name")

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthId")
    def global_connection_bandwidth_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the global connection bandwidth.
        """
        return pulumi.get(self, "global_connection_bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthType")
    def global_connection_bandwidth_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the global connection bandwidth.
        """
        return pulumi.get(self, "global_connection_bandwidth_type")

    @_builtins.property
    @pulumi.getter(name="internetBandwidthId")
    def internet_bandwidth_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the internet bandwidth id which the global EIP use.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "internet_bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        The ip address of the global EIP.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[_builtins.float]:
        """
        The ip version of the global EIP.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def isp(self) -> pulumi.Output[_builtins.str]:
        """
        The the internet service provider of the global EIP.
        """
        return pulumi.get(self, "isp")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the global EIP.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def polluted(self) -> pulumi.Output[_builtins.bool]:
        """
        The global EIP is polluted or not.
        """
        return pulumi.get(self, "polluted")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the global EIP.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the tags of the global EIP.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time of the global EIP.
        """
        return pulumi.get(self, "updated_at")

