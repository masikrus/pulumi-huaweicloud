# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'EipAssociateAssociateInstance',
    'EipAssociateGcBandwidth',
    'GetEipAccessSitesAccessSiteResult',
    'GetEipPoolsGeipPoolResult',
    'GetEipPoolsGeipPoolAllowedBandwidthTypeResult',
    'GetEipQuotasResourceResult',
    'GetEipTagsTagResult',
    'GetEipsGlobalEipResult',
    'GetInternetBandwidthTagsTagResult',
    'GetInternetBandwidthsInternetBandwidthResult',
]

@pulumi.output_type
class EipAssociateAssociateInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "serviceId":
            suggest = "service_id"
        elif key == "serviceType":
            suggest = "service_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EipAssociateAssociateInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EipAssociateAssociateInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EipAssociateAssociateInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: _builtins.str,
                 instance_type: _builtins.str,
                 project_id: _builtins.str,
                 region: _builtins.str,
                 service_id: Optional[_builtins.str] = None,
                 service_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param _builtins.str instance_type: Specifies the instance type. Valid values are **ECS**, **PORT**,
               **NATGW** and **ELB**. If value is **ECS** or **PORT**, make sure the VPC associating with an internet gateway.
               Changing this creates a new resource.
        :param _builtins.str project_id: Specifies the project ID of the region.
               Changing this creates a new resource.
        :param _builtins.str region: Specifies the region of the instance.
               Changing this creates a new resource.
        :param _builtins.str service_id: Specifies the service ID.
               Changing this creates a new resource.
        :param _builtins.str service_type: Specifies the service type.
               Changing this creates a new resource.
               
               <a name="block--gc_bandwidth"></a>
               The `gc_bandwidth` block supports:
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        Specifies the instance type. Valid values are **ECS**, **PORT**,
        **NATGW** and **ELB**. If value is **ECS** or **PORT**, make sure the VPC associating with an internet gateway.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Specifies the project ID of the region.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region of the instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[_builtins.str]:
        """
        Specifies the service ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        """
        Specifies the service type.
        Changing this creates a new resource.

        <a name="block--gc_bandwidth"></a>
        The `gc_bandwidth` block supports:
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class EipAssociateGcBandwidth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chargeMode":
            suggest = "charge_mode"
        elif key == "enterpriseProjectId":
            suggest = "enterprise_project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EipAssociateGcBandwidth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EipAssociateGcBandwidth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EipAssociateGcBandwidth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 charge_mode: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 enterprise_project_id: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 size: Optional[_builtins.int] = None,
                 tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str charge_mode: Specifies the GCB charge mode. When `gc_bandwidth.id` is empty, it is
               **Required** for creating a new GCB.
               
               Valid values are as follows:
               + **bwd**: Billed by bandwidth.
               + **95**: Billed by 95th percentile bandwidth.
               
               Changing this creates a new resource.
        :param _builtins.str description: Specifies the description of GCB.
               Changing this creates a new resource.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of GCB.
               Changing this creates a new resource.
        :param _builtins.str id: Specifies the GCB ID which is existing.
               Changing this creates a new resource.
        :param _builtins.str name: Specifies the GCB name. When `gc_bandwidth.id` is empty, it is **Required** for
               creating a new GCB. Changing this creates a new resource.
        :param _builtins.int size: Specifies the GCB size. When `gc_bandwidth.id` is empty, it is **Required** for
               creating a new GCB. If `gc_bandwidth.charge_mode` is **95**, the range is **100-300 Mbit/s**, otherwise, the range is
               **2-300 Mbit/s**. Changing this creates a new resource.
        :param Mapping[str, _builtins.str] tags: Specifies the tags of GCB.
               Changing this creates a new resource.
        """
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the GCB charge mode. When `gc_bandwidth.id` is empty, it is
        **Required** for creating a new GCB.

        Valid values are as follows:
        + **bwd**: Billed by bandwidth.
        + **95**: Billed by 95th percentile bandwidth.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of GCB.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Specifies the enterprise project ID of GCB.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the GCB ID which is existing.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the GCB name. When `gc_bandwidth.id` is empty, it is **Required** for
        creating a new GCB. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        Specifies the GCB size. When `gc_bandwidth.id` is empty, it is **Required** for
        creating a new GCB. If `gc_bandwidth.charge_mode` is **95**, the range is **100-300 Mbit/s**, otherwise, the range is
        **2-300 Mbit/s**. Changing this creates a new resource.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the tags of GCB.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetEipAccessSitesAccessSiteResult(dict):
    def __init__(__self__, *,
                 cn_name: _builtins.str,
                 created_at: _builtins.str,
                 en_name: _builtins.str,
                 id: _builtins.str,
                 iec_az_code: _builtins.str,
                 name: _builtins.str,
                 proxy_region: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str cn_name: The Chinese name of the access site.
        :param _builtins.str created_at: The create time of the access site.
        :param _builtins.str en_name: The English name of the access site.
        :param _builtins.str id: The ID of the access site.
        :param _builtins.str iec_az_code: Specifies the availability zone code of the edge site.
        :param _builtins.str name: Specifies the name of the access sites.
        :param _builtins.str proxy_region: Specifies the region ID where the pop site is hosted.
        :param _builtins.str updated_at: The update time of the access site.
        """
        pulumi.set(__self__, "cn_name", cn_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "iec_az_code", iec_az_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "proxy_region", proxy_region)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="cnName")
    def cn_name(self) -> _builtins.str:
        """
        The Chinese name of the access site.
        """
        return pulumi.get(self, "cn_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time of the access site.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> _builtins.str:
        """
        The English name of the access site.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the access site.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="iecAzCode")
    def iec_az_code(self) -> _builtins.str:
        """
        Specifies the availability zone code of the edge site.
        """
        return pulumi.get(self, "iec_az_code")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the access sites.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="proxyRegion")
    def proxy_region(self) -> _builtins.str:
        """
        Specifies the region ID where the pop site is hosted.
        """
        return pulumi.get(self, "proxy_region")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the access site.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetEipPoolsGeipPoolResult(dict):
    def __init__(__self__, *,
                 access_site: _builtins.str,
                 allowed_bandwidth_types: Sequence['outputs.GetEipPoolsGeipPoolAllowedBandwidthTypeResult'],
                 cn_name: _builtins.str,
                 created_at: _builtins.str,
                 en_name: _builtins.str,
                 id: _builtins.str,
                 ip_version: _builtins.float,
                 isp: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str access_site: Specifies the access site to which the global EIP pool belongs.
        :param Sequence['GetEipPoolsGeipPoolAllowedBandwidthTypeArgs'] allowed_bandwidth_types: The allowed bandwidth type of the global EIP pool
               The allowed_bandwidth_type structure is documented below.
        :param _builtins.str cn_name: The Chinese name of the allowed bandwidth type.
        :param _builtins.str created_at: The create time of the global EIP pool.
        :param _builtins.str en_name: The English name of the allowed bandwidth type.
        :param _builtins.str id: The id of the global EIP pool.
        :param _builtins.float ip_version: Specifies the ip version. Valid values are `4` and `6`.
        :param _builtins.str isp: Specifies the internet service provider of the global EIP pool.
        :param _builtins.str name: Specifies the name of the global EIP pool.
        :param _builtins.str type: Specifies the type of the global EIP pool.
               
               Valid values are:
               + **GEIP**: global EIP.
               + **GEIP_SEGMENT**: global EIP range.
        :param _builtins.str updated_at: The update time of the global EIP pool.
        """
        pulumi.set(__self__, "access_site", access_site)
        pulumi.set(__self__, "allowed_bandwidth_types", allowed_bandwidth_types)
        pulumi.set(__self__, "cn_name", cn_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "isp", isp)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> _builtins.str:
        """
        Specifies the access site to which the global EIP pool belongs.
        """
        return pulumi.get(self, "access_site")

    @_builtins.property
    @pulumi.getter(name="allowedBandwidthTypes")
    def allowed_bandwidth_types(self) -> Sequence['outputs.GetEipPoolsGeipPoolAllowedBandwidthTypeResult']:
        """
        The allowed bandwidth type of the global EIP pool
        The allowed_bandwidth_type structure is documented below.
        """
        return pulumi.get(self, "allowed_bandwidth_types")

    @_builtins.property
    @pulumi.getter(name="cnName")
    def cn_name(self) -> _builtins.str:
        """
        The Chinese name of the allowed bandwidth type.
        """
        return pulumi.get(self, "cn_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time of the global EIP pool.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> _builtins.str:
        """
        The English name of the allowed bandwidth type.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the global EIP pool.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.float:
        """
        Specifies the ip version. Valid values are `4` and `6`.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def isp(self) -> _builtins.str:
        """
        Specifies the internet service provider of the global EIP pool.
        """
        return pulumi.get(self, "isp")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the global EIP pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the global EIP pool.

        Valid values are:
        + **GEIP**: global EIP.
        + **GEIP_SEGMENT**: global EIP range.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the global EIP pool.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetEipPoolsGeipPoolAllowedBandwidthTypeResult(dict):
    def __init__(__self__, *,
                 cn_name: _builtins.str,
                 en_name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str cn_name: The Chinese name of the allowed bandwidth type.
        :param _builtins.str en_name: The English name of the allowed bandwidth type.
        :param _builtins.str type: Specifies the type of the global EIP pool.
               
               Valid values are:
               + **GEIP**: global EIP.
               + **GEIP_SEGMENT**: global EIP range.
        """
        pulumi.set(__self__, "cn_name", cn_name)
        pulumi.set(__self__, "en_name", en_name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cnName")
    def cn_name(self) -> _builtins.str:
        """
        The Chinese name of the allowed bandwidth type.
        """
        return pulumi.get(self, "cn_name")

    @_builtins.property
    @pulumi.getter(name="enName")
    def en_name(self) -> _builtins.str:
        """
        The English name of the allowed bandwidth type.
        """
        return pulumi.get(self, "en_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the global EIP pool.

        Valid values are:
        + **GEIP**: global EIP.
        + **GEIP_SEGMENT**: global EIP range.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetEipQuotasResourceResult(dict):
    def __init__(__self__, *,
                 min: _builtins.int,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int min: Indicates the min quotas.
        :param _builtins.int quota: Indicates the total quotas.
        :param _builtins.str type: Specifies the resource type.
               Valid values are **geip**, **geip_segment**, **internetBandwidthIP**, **internetBandwidth**.
        :param _builtins.int used: Indicates the used num.
        """
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        Indicates the min quotas.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        Indicates the total quotas.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type.
        Valid values are **geip**, **geip_segment**, **internetBandwidthIP**, **internetBandwidth**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        Indicates the used num.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetEipTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates the tag key.
        :param Sequence[_builtins.str] values: Indicates the list of tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetEipsGlobalEipResult(dict):
    def __init__(__self__, *,
                 access_site: _builtins.str,
                 associate_instance_id: _builtins.str,
                 associate_instance_region: _builtins.str,
                 associate_instance_type: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 frozen: _builtins.bool,
                 frozen_info: _builtins.str,
                 geip_pool_name: _builtins.str,
                 global_connection_bandwidth_id: _builtins.str,
                 global_connection_bandwidth_type: _builtins.str,
                 id: _builtins.str,
                 internet_bandwidth_id: _builtins.str,
                 ip_address: _builtins.str,
                 ip_version: _builtins.int,
                 isp: _builtins.str,
                 name: _builtins.str,
                 polluted: _builtins.bool,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 updated_at: _builtins.str):
        """
        :param _builtins.str access_site: The access site name.
        :param _builtins.str associate_instance_id: Specifies the instance ID which the GEIP associates to.
        :param _builtins.str associate_instance_region: The region of the associate instance.
        :param _builtins.str associate_instance_type: Specifies the type of instance which the GEIP associates to.
        :param _builtins.str created_at: The create time of the global EIP.
        :param _builtins.str description: The description of GEIP.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the GEIP.
        :param _builtins.bool frozen: The global EIP is frozen or not.
        :param _builtins.str frozen_info: The frozen info of the global EIP.
        :param _builtins.str geip_pool_name: The GEIP pool name.
        :param _builtins.str global_connection_bandwidth_id: The ID of the global connection bandwidth.
        :param _builtins.str global_connection_bandwidth_type: The type of the global connection bandwidth.
        :param _builtins.str id: The GEIP ID.
        :param _builtins.str internet_bandwidth_id: Specifies the global internet bandwidth ID which the GEIP associates to.
        :param _builtins.str ip_address: Specifies the GEIP IP address.
        :param _builtins.int ip_version: The IP version of GEIP.
        :param _builtins.str isp: The the internet service provider of the global EIP.
        :param _builtins.str name: Specifies the GEIP name.
        :param _builtins.bool polluted: The global EIP is polluted or not.
        :param _builtins.str status: Specifies the GEIP status.
               
               Valid valus are as follows:
               + **idle**: Not associates with instance.
               + **inuse**: Associates with instance.
               + **pending_create**: Creating.
               + **pending_update**: Updating.
        :param Mapping[str, _builtins.str] tags: Specifies the tags of the GEIP.
        :param _builtins.str updated_at: The update time of the global EIP.
        """
        pulumi.set(__self__, "access_site", access_site)
        pulumi.set(__self__, "associate_instance_id", associate_instance_id)
        pulumi.set(__self__, "associate_instance_region", associate_instance_region)
        pulumi.set(__self__, "associate_instance_type", associate_instance_type)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "frozen", frozen)
        pulumi.set(__self__, "frozen_info", frozen_info)
        pulumi.set(__self__, "geip_pool_name", geip_pool_name)
        pulumi.set(__self__, "global_connection_bandwidth_id", global_connection_bandwidth_id)
        pulumi.set(__self__, "global_connection_bandwidth_type", global_connection_bandwidth_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "internet_bandwidth_id", internet_bandwidth_id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "isp", isp)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "polluted", polluted)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> _builtins.str:
        """
        The access site name.
        """
        return pulumi.get(self, "access_site")

    @_builtins.property
    @pulumi.getter(name="associateInstanceId")
    def associate_instance_id(self) -> _builtins.str:
        """
        Specifies the instance ID which the GEIP associates to.
        """
        return pulumi.get(self, "associate_instance_id")

    @_builtins.property
    @pulumi.getter(name="associateInstanceRegion")
    def associate_instance_region(self) -> _builtins.str:
        """
        The region of the associate instance.
        """
        return pulumi.get(self, "associate_instance_region")

    @_builtins.property
    @pulumi.getter(name="associateInstanceType")
    def associate_instance_type(self) -> _builtins.str:
        """
        Specifies the type of instance which the GEIP associates to.
        """
        return pulumi.get(self, "associate_instance_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time of the global EIP.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of GEIP.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID of the GEIP.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def frozen(self) -> _builtins.bool:
        """
        The global EIP is frozen or not.
        """
        return pulumi.get(self, "frozen")

    @_builtins.property
    @pulumi.getter(name="frozenInfo")
    def frozen_info(self) -> _builtins.str:
        """
        The frozen info of the global EIP.
        """
        return pulumi.get(self, "frozen_info")

    @_builtins.property
    @pulumi.getter(name="geipPoolName")
    def geip_pool_name(self) -> _builtins.str:
        """
        The GEIP pool name.
        """
        return pulumi.get(self, "geip_pool_name")

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthId")
    def global_connection_bandwidth_id(self) -> _builtins.str:
        """
        The ID of the global connection bandwidth.
        """
        return pulumi.get(self, "global_connection_bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="globalConnectionBandwidthType")
    def global_connection_bandwidth_type(self) -> _builtins.str:
        """
        The type of the global connection bandwidth.
        """
        return pulumi.get(self, "global_connection_bandwidth_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The GEIP ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internetBandwidthId")
    def internet_bandwidth_id(self) -> _builtins.str:
        """
        Specifies the global internet bandwidth ID which the GEIP associates to.
        """
        return pulumi.get(self, "internet_bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Specifies the GEIP IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The IP version of GEIP.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def isp(self) -> _builtins.str:
        """
        The the internet service provider of the global EIP.
        """
        return pulumi.get(self, "isp")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the GEIP name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def polluted(self) -> _builtins.bool:
        """
        The global EIP is polluted or not.
        """
        return pulumi.get(self, "polluted")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the GEIP status.

        Valid valus are as follows:
        + **idle**: Not associates with instance.
        + **inuse**: Associates with instance.
        + **pending_create**: Creating.
        + **pending_update**: Updating.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the tags of the GEIP.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the global EIP.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetInternetBandwidthTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates the tag key.
        :param Sequence[_builtins.str] values: Indicates the list of tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInternetBandwidthsInternetBandwidthResult(dict):
    def __init__(__self__, *,
                 access_site: _builtins.str,
                 charge_mode: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 frozen_info: _builtins.str,
                 id: _builtins.str,
                 ingress_size: _builtins.int,
                 isp: _builtins.str,
                 name: _builtins.str,
                 ratio95peak: _builtins.int,
                 size: _builtins.int,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str access_site: Specifies the access site to which the global internet bandwidth belongs.
        :param _builtins.str charge_mode: The charge mode of the global internet bandwidth.
        :param _builtins.str created_at: The create time of the global internet bandwidth.
        :param _builtins.str description: The description of the global internet bandwidth.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the global internet bandwidth.
        :param _builtins.str frozen_info: The frozen info of the global internet bandwidth.
        :param _builtins.str id: The global internet bandwidth ID.
        :param _builtins.int ingress_size: The ingress size of the global internet bandwidth.
        :param _builtins.str isp: The internet service provider of the global internet bandwidth.
        :param _builtins.str name: Specifies the global internet bandwidth name.
        :param _builtins.int ratio95peak: The enhanced 95% guaranteed rate of the global internet bandwidth.
        :param _builtins.int size: Specifies the global internet bandwidth size.
        :param _builtins.str status: Specifies the global internet bandwidth status. Valid values are **freezed** and **normal**.
        :param Mapping[str, _builtins.str] tags: Specifies the global internet bandwidth tags.
        :param _builtins.str type: Specifies the global internet bandwidth type.
        :param _builtins.str updated_at: The update time of the global internet bandwidth.
        """
        pulumi.set(__self__, "access_site", access_site)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "frozen_info", frozen_info)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingress_size", ingress_size)
        pulumi.set(__self__, "isp", isp)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ratio95peak", ratio95peak)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> _builtins.str:
        """
        Specifies the access site to which the global internet bandwidth belongs.
        """
        return pulumi.get(self, "access_site")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        The charge mode of the global internet bandwidth.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time of the global internet bandwidth.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the global internet bandwidth.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID of the global internet bandwidth.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="frozenInfo")
    def frozen_info(self) -> _builtins.str:
        """
        The frozen info of the global internet bandwidth.
        """
        return pulumi.get(self, "frozen_info")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The global internet bandwidth ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ingressSize")
    def ingress_size(self) -> _builtins.int:
        """
        The ingress size of the global internet bandwidth.
        """
        return pulumi.get(self, "ingress_size")

    @_builtins.property
    @pulumi.getter
    def isp(self) -> _builtins.str:
        """
        The internet service provider of the global internet bandwidth.
        """
        return pulumi.get(self, "isp")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the global internet bandwidth name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ratio95peak(self) -> _builtins.int:
        """
        The enhanced 95% guaranteed rate of the global internet bandwidth.
        """
        return pulumi.get(self, "ratio95peak")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the global internet bandwidth size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the global internet bandwidth status. Valid values are **freezed** and **normal**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the global internet bandwidth tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the global internet bandwidth type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the global internet bandwidth.
        """
        return pulumi.get(self, "updated_at")


