# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EipAssociateArgs', 'EipAssociate']

@pulumi.input_type
class EipAssociateArgs:
    def __init__(__self__, *,
                 associate_instance: pulumi.Input['EipAssociateAssociateInstanceArgs'],
                 global_eip_id: pulumi.Input[_builtins.str],
                 is_reserve_gcb: pulumi.Input[_builtins.bool],
                 gc_bandwidth: Optional[pulumi.Input['EipAssociateGcBandwidthArgs']] = None):
        """
        The set of arguments for constructing a EipAssociate resource.
        :param pulumi.Input['EipAssociateAssociateInstanceArgs'] associate_instance: Specifies the information of instance which the GEIP associates to.
               Changing this creates a new resource.
               The associate_instance structure is documented below.
        :param pulumi.Input[_builtins.str] global_eip_id: Specifies the global EIP ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_reserve_gcb: Specifies whether to reserve the GCB when the GEIP disassociates to the instance.
        :param pulumi.Input['EipAssociateGcBandwidthArgs'] gc_bandwidth: Specifies the information of GCB which the GEIP associates to.
               Changing this creates a new resource.
               The gc_bandwidth structure is documented below.
               
               <a name="block--associate_instance"></a>
               The `associate_instance` block supports:
        """
        pulumi.set(__self__, "associate_instance", associate_instance)
        pulumi.set(__self__, "global_eip_id", global_eip_id)
        pulumi.set(__self__, "is_reserve_gcb", is_reserve_gcb)
        if gc_bandwidth is not None:
            pulumi.set(__self__, "gc_bandwidth", gc_bandwidth)

    @_builtins.property
    @pulumi.getter(name="associateInstance")
    def associate_instance(self) -> pulumi.Input['EipAssociateAssociateInstanceArgs']:
        """
        Specifies the information of instance which the GEIP associates to.
        Changing this creates a new resource.
        The associate_instance structure is documented below.
        """
        return pulumi.get(self, "associate_instance")

    @associate_instance.setter
    def associate_instance(self, value: pulumi.Input['EipAssociateAssociateInstanceArgs']):
        pulumi.set(self, "associate_instance", value)

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the global EIP ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "global_eip_id")

    @global_eip_id.setter
    def global_eip_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "global_eip_id", value)

    @_builtins.property
    @pulumi.getter(name="isReserveGcb")
    def is_reserve_gcb(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to reserve the GCB when the GEIP disassociates to the instance.
        """
        return pulumi.get(self, "is_reserve_gcb")

    @is_reserve_gcb.setter
    def is_reserve_gcb(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "is_reserve_gcb", value)

    @_builtins.property
    @pulumi.getter(name="gcBandwidth")
    def gc_bandwidth(self) -> Optional[pulumi.Input['EipAssociateGcBandwidthArgs']]:
        """
        Specifies the information of GCB which the GEIP associates to.
        Changing this creates a new resource.
        The gc_bandwidth structure is documented below.

        <a name="block--associate_instance"></a>
        The `associate_instance` block supports:
        """
        return pulumi.get(self, "gc_bandwidth")

    @gc_bandwidth.setter
    def gc_bandwidth(self, value: Optional[pulumi.Input['EipAssociateGcBandwidthArgs']]):
        pulumi.set(self, "gc_bandwidth", value)


@pulumi.input_type
class _EipAssociateState:
    def __init__(__self__, *,
                 associate_instance: Optional[pulumi.Input['EipAssociateAssociateInstanceArgs']] = None,
                 gc_bandwidth: Optional[pulumi.Input['EipAssociateGcBandwidthArgs']] = None,
                 global_eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_reserve_gcb: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering EipAssociate resources.
        :param pulumi.Input['EipAssociateAssociateInstanceArgs'] associate_instance: Specifies the information of instance which the GEIP associates to.
               Changing this creates a new resource.
               The associate_instance structure is documented below.
        :param pulumi.Input['EipAssociateGcBandwidthArgs'] gc_bandwidth: Specifies the information of GCB which the GEIP associates to.
               Changing this creates a new resource.
               The gc_bandwidth structure is documented below.
               
               <a name="block--associate_instance"></a>
               The `associate_instance` block supports:
        :param pulumi.Input[_builtins.str] global_eip_id: Specifies the global EIP ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_reserve_gcb: Specifies whether to reserve the GCB when the GEIP disassociates to the instance.
        """
        if associate_instance is not None:
            pulumi.set(__self__, "associate_instance", associate_instance)
        if gc_bandwidth is not None:
            pulumi.set(__self__, "gc_bandwidth", gc_bandwidth)
        if global_eip_id is not None:
            pulumi.set(__self__, "global_eip_id", global_eip_id)
        if is_reserve_gcb is not None:
            pulumi.set(__self__, "is_reserve_gcb", is_reserve_gcb)

    @_builtins.property
    @pulumi.getter(name="associateInstance")
    def associate_instance(self) -> Optional[pulumi.Input['EipAssociateAssociateInstanceArgs']]:
        """
        Specifies the information of instance which the GEIP associates to.
        Changing this creates a new resource.
        The associate_instance structure is documented below.
        """
        return pulumi.get(self, "associate_instance")

    @associate_instance.setter
    def associate_instance(self, value: Optional[pulumi.Input['EipAssociateAssociateInstanceArgs']]):
        pulumi.set(self, "associate_instance", value)

    @_builtins.property
    @pulumi.getter(name="gcBandwidth")
    def gc_bandwidth(self) -> Optional[pulumi.Input['EipAssociateGcBandwidthArgs']]:
        """
        Specifies the information of GCB which the GEIP associates to.
        Changing this creates a new resource.
        The gc_bandwidth structure is documented below.

        <a name="block--associate_instance"></a>
        The `associate_instance` block supports:
        """
        return pulumi.get(self, "gc_bandwidth")

    @gc_bandwidth.setter
    def gc_bandwidth(self, value: Optional[pulumi.Input['EipAssociateGcBandwidthArgs']]):
        pulumi.set(self, "gc_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the global EIP ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "global_eip_id")

    @global_eip_id.setter
    def global_eip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_eip_id", value)

    @_builtins.property
    @pulumi.getter(name="isReserveGcb")
    def is_reserve_gcb(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to reserve the GCB when the GEIP disassociates to the instance.
        """
        return pulumi.get(self, "is_reserve_gcb")

    @is_reserve_gcb.setter
    def is_reserve_gcb(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_reserve_gcb", value)


@pulumi.type_token("huaweicloud:global/eipAssociate:EipAssociate")
class EipAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associate_instance: Optional[pulumi.Input[Union['EipAssociateAssociateInstanceArgs', 'EipAssociateAssociateInstanceArgsDict']]] = None,
                 gc_bandwidth: Optional[pulumi.Input[Union['EipAssociateGcBandwidthArgs', 'EipAssociateGcBandwidthArgsDict']]] = None,
                 global_eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_reserve_gcb: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Associates a GEIP to a specified instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        global_eip_id = config.require_object("globalEipId")
        region = config.require_object("region")
        project_id = config.require_object("projectId")
        compute_instance_id = config.require_object("computeInstanceId")
        gc_bandwidth_name = config.require_object("gcBandwidthName")
        test = huaweicloud.global_.EipAssociate("test",
            global_eip_id=global_eip_id,
            is_reserve_gcb=False,
            associate_instance={
                "region": region,
                "project_id": project_id,
                "instance_type": "ECS",
                "instance_id": compute_instance_id,
            },
            gc_bandwidth={
                "name": gc_bandwidth_name,
                "charge_mode": "bwd",
                "size": 5,
            })
        ```

        ## Import

        The global EIP association can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:global/eipAssociate:EipAssociate test <id>
        ```

        Please add the followings if some attributes are missing when importing the resource.

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `is_reserve_gcb`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_global_eip_associate" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              is_reserve_gcb,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['EipAssociateAssociateInstanceArgs', 'EipAssociateAssociateInstanceArgsDict']] associate_instance: Specifies the information of instance which the GEIP associates to.
               Changing this creates a new resource.
               The associate_instance structure is documented below.
        :param pulumi.Input[Union['EipAssociateGcBandwidthArgs', 'EipAssociateGcBandwidthArgsDict']] gc_bandwidth: Specifies the information of GCB which the GEIP associates to.
               Changing this creates a new resource.
               The gc_bandwidth structure is documented below.
               
               <a name="block--associate_instance"></a>
               The `associate_instance` block supports:
        :param pulumi.Input[_builtins.str] global_eip_id: Specifies the global EIP ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_reserve_gcb: Specifies whether to reserve the GCB when the GEIP disassociates to the instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EipAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Associates a GEIP to a specified instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        global_eip_id = config.require_object("globalEipId")
        region = config.require_object("region")
        project_id = config.require_object("projectId")
        compute_instance_id = config.require_object("computeInstanceId")
        gc_bandwidth_name = config.require_object("gcBandwidthName")
        test = huaweicloud.global_.EipAssociate("test",
            global_eip_id=global_eip_id,
            is_reserve_gcb=False,
            associate_instance={
                "region": region,
                "project_id": project_id,
                "instance_type": "ECS",
                "instance_id": compute_instance_id,
            },
            gc_bandwidth={
                "name": gc_bandwidth_name,
                "charge_mode": "bwd",
                "size": 5,
            })
        ```

        ## Import

        The global EIP association can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:global/eipAssociate:EipAssociate test <id>
        ```

        Please add the followings if some attributes are missing when importing the resource.

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `is_reserve_gcb`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the resource, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_global_eip_associate" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              is_reserve_gcb,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param EipAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EipAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associate_instance: Optional[pulumi.Input[Union['EipAssociateAssociateInstanceArgs', 'EipAssociateAssociateInstanceArgsDict']]] = None,
                 gc_bandwidth: Optional[pulumi.Input[Union['EipAssociateGcBandwidthArgs', 'EipAssociateGcBandwidthArgsDict']]] = None,
                 global_eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_reserve_gcb: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EipAssociateArgs.__new__(EipAssociateArgs)

            if associate_instance is None and not opts.urn:
                raise TypeError("Missing required property 'associate_instance'")
            __props__.__dict__["associate_instance"] = associate_instance
            __props__.__dict__["gc_bandwidth"] = gc_bandwidth
            if global_eip_id is None and not opts.urn:
                raise TypeError("Missing required property 'global_eip_id'")
            __props__.__dict__["global_eip_id"] = global_eip_id
            if is_reserve_gcb is None and not opts.urn:
                raise TypeError("Missing required property 'is_reserve_gcb'")
            __props__.__dict__["is_reserve_gcb"] = is_reserve_gcb
        super(EipAssociate, __self__).__init__(
            'huaweicloud:global/eipAssociate:EipAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            associate_instance: Optional[pulumi.Input[Union['EipAssociateAssociateInstanceArgs', 'EipAssociateAssociateInstanceArgsDict']]] = None,
            gc_bandwidth: Optional[pulumi.Input[Union['EipAssociateGcBandwidthArgs', 'EipAssociateGcBandwidthArgsDict']]] = None,
            global_eip_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_reserve_gcb: Optional[pulumi.Input[_builtins.bool]] = None) -> 'EipAssociate':
        """
        Get an existing EipAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['EipAssociateAssociateInstanceArgs', 'EipAssociateAssociateInstanceArgsDict']] associate_instance: Specifies the information of instance which the GEIP associates to.
               Changing this creates a new resource.
               The associate_instance structure is documented below.
        :param pulumi.Input[Union['EipAssociateGcBandwidthArgs', 'EipAssociateGcBandwidthArgsDict']] gc_bandwidth: Specifies the information of GCB which the GEIP associates to.
               Changing this creates a new resource.
               The gc_bandwidth structure is documented below.
               
               <a name="block--associate_instance"></a>
               The `associate_instance` block supports:
        :param pulumi.Input[_builtins.str] global_eip_id: Specifies the global EIP ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] is_reserve_gcb: Specifies whether to reserve the GCB when the GEIP disassociates to the instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EipAssociateState.__new__(_EipAssociateState)

        __props__.__dict__["associate_instance"] = associate_instance
        __props__.__dict__["gc_bandwidth"] = gc_bandwidth
        __props__.__dict__["global_eip_id"] = global_eip_id
        __props__.__dict__["is_reserve_gcb"] = is_reserve_gcb
        return EipAssociate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="associateInstance")
    def associate_instance(self) -> pulumi.Output['outputs.EipAssociateAssociateInstance']:
        """
        Specifies the information of instance which the GEIP associates to.
        Changing this creates a new resource.
        The associate_instance structure is documented below.
        """
        return pulumi.get(self, "associate_instance")

    @_builtins.property
    @pulumi.getter(name="gcBandwidth")
    def gc_bandwidth(self) -> pulumi.Output[Optional['outputs.EipAssociateGcBandwidth']]:
        """
        Specifies the information of GCB which the GEIP associates to.
        Changing this creates a new resource.
        The gc_bandwidth structure is documented below.

        <a name="block--associate_instance"></a>
        The `associate_instance` block supports:
        """
        return pulumi.get(self, "gc_bandwidth")

    @_builtins.property
    @pulumi.getter(name="globalEipId")
    def global_eip_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the global EIP ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "global_eip_id")

    @_builtins.property
    @pulumi.getter(name="isReserveGcb")
    def is_reserve_gcb(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to reserve the GCB when the GEIP disassociates to the instance.
        """
        return pulumi.get(self, "is_reserve_gcb")

