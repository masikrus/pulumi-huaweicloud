# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEipPoolsResult',
    'AwaitableGetEipPoolsResult',
    'get_eip_pools',
    'get_eip_pools_output',
]

@pulumi.output_type
class GetEipPoolsResult:
    """
    A collection of values returned by getEipPools.
    """
    def __init__(__self__, access_site=None, geip_pools=None, id=None, ip_version=None, isp=None, name=None, type=None):
        if access_site and not isinstance(access_site, str):
            raise TypeError("Expected argument 'access_site' to be a str")
        pulumi.set(__self__, "access_site", access_site)
        if geip_pools and not isinstance(geip_pools, list):
            raise TypeError("Expected argument 'geip_pools' to be a list")
        pulumi.set(__self__, "geip_pools", geip_pools)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_version and not isinstance(ip_version, int):
            raise TypeError("Expected argument 'ip_version' to be a int")
        pulumi.set(__self__, "ip_version", ip_version)
        if isp and not isinstance(isp, str):
            raise TypeError("Expected argument 'isp' to be a str")
        pulumi.set(__self__, "isp", isp)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> Optional[_builtins.str]:
        """
        The access site to which the global EIP pool belongs.
        """
        return pulumi.get(self, "access_site")

    @_builtins.property
    @pulumi.getter(name="geipPools")
    def geip_pools(self) -> Sequence['outputs.GetEipPoolsGeipPoolResult']:
        """
        The available global EIP pools list.
        The geip_pools structure is documented below.
        """
        return pulumi.get(self, "geip_pools")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The ip version of the global EIP pool.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def isp(self) -> Optional[_builtins.str]:
        """
        The internet service provider of the global EIP pool.
        """
        return pulumi.get(self, "isp")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the global EIP pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the allowed bandwidth.
        """
        return pulumi.get(self, "type")


class AwaitableGetEipPoolsResult(GetEipPoolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEipPoolsResult(
            access_site=self.access_site,
            geip_pools=self.geip_pools,
            id=self.id,
            ip_version=self.ip_version,
            isp=self.isp,
            name=self.name,
            type=self.type)


def get_eip_pools(access_site: Optional[_builtins.str] = None,
                  ip_version: Optional[_builtins.int] = None,
                  isp: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  type: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEipPoolsResult:
    """
    Use this data source to get a list of global EIP pools available to your account.

    ## Example Usage

    ### Get all available global EIP pools

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all = huaweicloud.global.get_eip_pools()
    ```

    ### Get specific available global EIP pools information

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.global.get_eip_pools(access_site="cn-south-guangzhou")
    ```


    :param _builtins.str access_site: Specifies the access site to which the global EIP pool belongs.
    :param _builtins.int ip_version: Specifies the ip version. Valid values are `4` and `6`.
    :param _builtins.str isp: Specifies the internet service provider of the global EIP pool.
    :param _builtins.str name: Specifies the name of the global EIP pool.
    :param _builtins.str type: Specifies the type of the global EIP pool.
           
           Valid values are:
           + **GEIP**: global EIP.
           + **GEIP_SEGMENT**: global EIP range.
    """
    __args__ = dict()
    __args__['accessSite'] = access_site
    __args__['ipVersion'] = ip_version
    __args__['isp'] = isp
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:global/getEipPools:getEipPools', __args__, opts=opts, typ=GetEipPoolsResult).value

    return AwaitableGetEipPoolsResult(
        access_site=pulumi.get(__ret__, 'access_site'),
        geip_pools=pulumi.get(__ret__, 'geip_pools'),
        id=pulumi.get(__ret__, 'id'),
        ip_version=pulumi.get(__ret__, 'ip_version'),
        isp=pulumi.get(__ret__, 'isp'),
        name=pulumi.get(__ret__, 'name'),
        type=pulumi.get(__ret__, 'type'))
def get_eip_pools_output(access_site: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         ip_version: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         isp: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEipPoolsResult]:
    """
    Use this data source to get a list of global EIP pools available to your account.

    ## Example Usage

    ### Get all available global EIP pools

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all = huaweicloud.global.get_eip_pools()
    ```

    ### Get specific available global EIP pools information

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.global.get_eip_pools(access_site="cn-south-guangzhou")
    ```


    :param _builtins.str access_site: Specifies the access site to which the global EIP pool belongs.
    :param _builtins.int ip_version: Specifies the ip version. Valid values are `4` and `6`.
    :param _builtins.str isp: Specifies the internet service provider of the global EIP pool.
    :param _builtins.str name: Specifies the name of the global EIP pool.
    :param _builtins.str type: Specifies the type of the global EIP pool.
           
           Valid values are:
           + **GEIP**: global EIP.
           + **GEIP_SEGMENT**: global EIP range.
    """
    __args__ = dict()
    __args__['accessSite'] = access_site
    __args__['ipVersion'] = ip_version
    __args__['isp'] = isp
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:global/getEipPools:getEipPools', __args__, opts=opts, typ=GetEipPoolsResult)
    return __ret__.apply(lambda __response__: GetEipPoolsResult(
        access_site=pulumi.get(__response__, 'access_site'),
        geip_pools=pulumi.get(__response__, 'geip_pools'),
        id=pulumi.get(__response__, 'id'),
        ip_version=pulumi.get(__response__, 'ip_version'),
        isp=pulumi.get(__response__, 'isp'),
        name=pulumi.get(__response__, 'name'),
        type=pulumi.get(__response__, 'type')))
