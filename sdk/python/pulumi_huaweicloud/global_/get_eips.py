# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEipsResult',
    'AwaitableGetEipsResult',
    'get_eips',
    'get_eips_output',
]

@pulumi.output_type
class GetEipsResult:
    """
    A collection of values returned by getEips.
    """
    def __init__(__self__, associate_instance_id=None, associate_instance_type=None, enterprise_project_id=None, geip_id=None, global_eips=None, id=None, internet_bandwidth_id=None, ip_address=None, name=None, status=None, tags=None):
        if associate_instance_id and not isinstance(associate_instance_id, str):
            raise TypeError("Expected argument 'associate_instance_id' to be a str")
        pulumi.set(__self__, "associate_instance_id", associate_instance_id)
        if associate_instance_type and not isinstance(associate_instance_type, str):
            raise TypeError("Expected argument 'associate_instance_type' to be a str")
        pulumi.set(__self__, "associate_instance_type", associate_instance_type)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if geip_id and not isinstance(geip_id, str):
            raise TypeError("Expected argument 'geip_id' to be a str")
        pulumi.set(__self__, "geip_id", geip_id)
        if global_eips and not isinstance(global_eips, list):
            raise TypeError("Expected argument 'global_eips' to be a list")
        pulumi.set(__self__, "global_eips", global_eips)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internet_bandwidth_id and not isinstance(internet_bandwidth_id, str):
            raise TypeError("Expected argument 'internet_bandwidth_id' to be a str")
        pulumi.set(__self__, "internet_bandwidth_id", internet_bandwidth_id)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="associateInstanceId")
    def associate_instance_id(self) -> Optional[_builtins.str]:
        """
        The ID of the associate instance.
        """
        return pulumi.get(self, "associate_instance_id")

    @_builtins.property
    @pulumi.getter(name="associateInstanceType")
    def associate_instance_type(self) -> Optional[_builtins.str]:
        """
        The type of the associate instance.
        """
        return pulumi.get(self, "associate_instance_type")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID of GEIP.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="geipId")
    def geip_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "geip_id")

    @_builtins.property
    @pulumi.getter(name="globalEips")
    def global_eips(self) -> Sequence['outputs.GetEipsGlobalEipResult']:
        """
        The GEIP list.
        The global_eips structure is documented below.
        """
        return pulumi.get(self, "global_eips")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internetBandwidthId")
    def internet_bandwidth_id(self) -> Optional[_builtins.str]:
        """
        The global internet bandwidth ID which the GEIP associates to.
        """
        return pulumi.get(self, "internet_bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The IP address of GEIP.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The GEIP name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the global EIP.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The tags of GEIP.
        """
        return pulumi.get(self, "tags")


class AwaitableGetEipsResult(GetEipsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEipsResult(
            associate_instance_id=self.associate_instance_id,
            associate_instance_type=self.associate_instance_type,
            enterprise_project_id=self.enterprise_project_id,
            geip_id=self.geip_id,
            global_eips=self.global_eips,
            id=self.id,
            internet_bandwidth_id=self.internet_bandwidth_id,
            ip_address=self.ip_address,
            name=self.name,
            status=self.status,
            tags=self.tags)


def get_eips(associate_instance_id: Optional[_builtins.str] = None,
             associate_instance_type: Optional[_builtins.str] = None,
             enterprise_project_id: Optional[_builtins.str] = None,
             geip_id: Optional[_builtins.str] = None,
             internet_bandwidth_id: Optional[_builtins.str] = None,
             ip_address: Optional[_builtins.str] = None,
             name: Optional[_builtins.str] = None,
             status: Optional[_builtins.str] = None,
             tags: Optional[Mapping[str, _builtins.str]] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEipsResult:
    """
    Use this data source to get the list of global EIPs.

    ## Example Usage

    ### Get all global EIPs

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all = huaweicloud.global.get_eips()
    ```

    ### Get specific global EIPs

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.global.get_eips(status="inuse")
    ```


    :param _builtins.str associate_instance_id: Specifies the instance ID which the GEIP associates to.
    :param _builtins.str associate_instance_type: Specifies the type of instance which the GEIP associates to.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the GEIP.
    :param _builtins.str geip_id: Specifies the GEIP ID.
    :param _builtins.str internet_bandwidth_id: Specifies the global internet bandwidth ID which the GEIP associates to.
    :param _builtins.str ip_address: Specifies the GEIP IP address.
    :param _builtins.str name: Specifies the GEIP name.
    :param _builtins.str status: Specifies the GEIP status.
           
           Valid valus are as follows:
           + **idle**: Not associates with instance.
           + **inuse**: Associates with instance.
           + **pending_create**: Creating.
           + **pending_update**: Updating.
    :param Mapping[str, _builtins.str] tags: Specifies the tags of the GEIP.
    """
    __args__ = dict()
    __args__['associateInstanceId'] = associate_instance_id
    __args__['associateInstanceType'] = associate_instance_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['geipId'] = geip_id
    __args__['internetBandwidthId'] = internet_bandwidth_id
    __args__['ipAddress'] = ip_address
    __args__['name'] = name
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:global/getEips:getEips', __args__, opts=opts, typ=GetEipsResult).value

    return AwaitableGetEipsResult(
        associate_instance_id=pulumi.get(__ret__, 'associate_instance_id'),
        associate_instance_type=pulumi.get(__ret__, 'associate_instance_type'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        geip_id=pulumi.get(__ret__, 'geip_id'),
        global_eips=pulumi.get(__ret__, 'global_eips'),
        id=pulumi.get(__ret__, 'id'),
        internet_bandwidth_id=pulumi.get(__ret__, 'internet_bandwidth_id'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))
def get_eips_output(associate_instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    associate_instance_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    geip_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    internet_bandwidth_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    ip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEipsResult]:
    """
    Use this data source to get the list of global EIPs.

    ## Example Usage

    ### Get all global EIPs

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all = huaweicloud.global.get_eips()
    ```

    ### Get specific global EIPs

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.global.get_eips(status="inuse")
    ```


    :param _builtins.str associate_instance_id: Specifies the instance ID which the GEIP associates to.
    :param _builtins.str associate_instance_type: Specifies the type of instance which the GEIP associates to.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the GEIP.
    :param _builtins.str geip_id: Specifies the GEIP ID.
    :param _builtins.str internet_bandwidth_id: Specifies the global internet bandwidth ID which the GEIP associates to.
    :param _builtins.str ip_address: Specifies the GEIP IP address.
    :param _builtins.str name: Specifies the GEIP name.
    :param _builtins.str status: Specifies the GEIP status.
           
           Valid valus are as follows:
           + **idle**: Not associates with instance.
           + **inuse**: Associates with instance.
           + **pending_create**: Creating.
           + **pending_update**: Updating.
    :param Mapping[str, _builtins.str] tags: Specifies the tags of the GEIP.
    """
    __args__ = dict()
    __args__['associateInstanceId'] = associate_instance_id
    __args__['associateInstanceType'] = associate_instance_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['geipId'] = geip_id
    __args__['internetBandwidthId'] = internet_bandwidth_id
    __args__['ipAddress'] = ip_address
    __args__['name'] = name
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:global/getEips:getEips', __args__, opts=opts, typ=GetEipsResult)
    return __ret__.apply(lambda __response__: GetEipsResult(
        associate_instance_id=pulumi.get(__response__, 'associate_instance_id'),
        associate_instance_type=pulumi.get(__response__, 'associate_instance_type'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        geip_id=pulumi.get(__response__, 'geip_id'),
        global_eips=pulumi.get(__response__, 'global_eips'),
        id=pulumi.get(__response__, 'id'),
        internet_bandwidth_id=pulumi.get(__response__, 'internet_bandwidth_id'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags')))
