# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInternetBandwidthsResult',
    'AwaitableGetInternetBandwidthsResult',
    'get_internet_bandwidths',
    'get_internet_bandwidths_output',
]

@pulumi.output_type
class GetInternetBandwidthsResult:
    """
    A collection of values returned by getInternetBandwidths.
    """
    def __init__(__self__, access_site=None, bandwidth_id=None, enterprise_project_id=None, id=None, internet_bandwidths=None, name=None, size=None, status=None, tags=None, type=None):
        if access_site and not isinstance(access_site, str):
            raise TypeError("Expected argument 'access_site' to be a str")
        pulumi.set(__self__, "access_site", access_site)
        if bandwidth_id and not isinstance(bandwidth_id, str):
            raise TypeError("Expected argument 'bandwidth_id' to be a str")
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internet_bandwidths and not isinstance(internet_bandwidths, list):
            raise TypeError("Expected argument 'internet_bandwidths' to be a list")
        pulumi.set(__self__, "internet_bandwidths", internet_bandwidths)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if size and not isinstance(size, str):
            raise TypeError("Expected argument 'size' to be a str")
        pulumi.set(__self__, "size", size)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="accessSite")
    def access_site(self) -> Optional[_builtins.str]:
        """
        The access site of the global internet bandwidth.
        """
        return pulumi.get(self, "access_site")

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID of the global internet bandwidth.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internetBandwidths")
    def internet_bandwidths(self) -> Sequence['outputs.GetInternetBandwidthsInternetBandwidthResult']:
        """
        The global internet bandwidths list.
        The internet_bandwidths structure is documented below.
        """
        return pulumi.get(self, "internet_bandwidths")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The global internet bandwidth name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.str]:
        """
        The global internet bandwidth size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the global internet bandwidth.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The tags of the global internet bandwidth.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The global internet bandwidth type.
        """
        return pulumi.get(self, "type")


class AwaitableGetInternetBandwidthsResult(GetInternetBandwidthsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInternetBandwidthsResult(
            access_site=self.access_site,
            bandwidth_id=self.bandwidth_id,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            internet_bandwidths=self.internet_bandwidths,
            name=self.name,
            size=self.size,
            status=self.status,
            tags=self.tags,
            type=self.type)


def get_internet_bandwidths(access_site: Optional[_builtins.str] = None,
                            bandwidth_id: Optional[_builtins.str] = None,
                            enterprise_project_id: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            size: Optional[_builtins.str] = None,
                            status: Optional[_builtins.str] = None,
                            tags: Optional[Mapping[str, _builtins.str]] = None,
                            type: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInternetBandwidthsResult:
    """
    Use this data source to get a list of global internet bandwidths.

    ## Example Usage

    ### Get all global internet bandwidths

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all = huaweicloud.global.get_internet_bandwidths()
    ```

    ### Get specific global internet bandwidths

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.global.get_internet_bandwidths(access_site="cn-south-guangzhou")
    ```


    :param _builtins.str access_site: Specifies the access site to which the global internet bandwidth belongs.
    :param _builtins.str bandwidth_id: Specifies the global internet bandwidth ID.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the global internet bandwidth.
    :param _builtins.str name: Specifies the global internet bandwidth name.
    :param _builtins.str size: Specifies the global internet bandwidth size.
    :param _builtins.str status: Specifies the global internet bandwidth status. Valid values are **freezed** and **normal**.
    :param Mapping[str, _builtins.str] tags: Specifies the global internet bandwidth tags.
    :param _builtins.str type: Specifies the global internet bandwidth type.
    """
    __args__ = dict()
    __args__['accessSite'] = access_site
    __args__['bandwidthId'] = bandwidth_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['size'] = size
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:global/getInternetBandwidths:getInternetBandwidths', __args__, opts=opts, typ=GetInternetBandwidthsResult).value

    return AwaitableGetInternetBandwidthsResult(
        access_site=pulumi.get(__ret__, 'access_site'),
        bandwidth_id=pulumi.get(__ret__, 'bandwidth_id'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        internet_bandwidths=pulumi.get(__ret__, 'internet_bandwidths'),
        name=pulumi.get(__ret__, 'name'),
        size=pulumi.get(__ret__, 'size'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_internet_bandwidths_output(access_site: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   bandwidth_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   size: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                   type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInternetBandwidthsResult]:
    """
    Use this data source to get a list of global internet bandwidths.

    ## Example Usage

    ### Get all global internet bandwidths

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all = huaweicloud.global.get_internet_bandwidths()
    ```

    ### Get specific global internet bandwidths

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.global.get_internet_bandwidths(access_site="cn-south-guangzhou")
    ```


    :param _builtins.str access_site: Specifies the access site to which the global internet bandwidth belongs.
    :param _builtins.str bandwidth_id: Specifies the global internet bandwidth ID.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the global internet bandwidth.
    :param _builtins.str name: Specifies the global internet bandwidth name.
    :param _builtins.str size: Specifies the global internet bandwidth size.
    :param _builtins.str status: Specifies the global internet bandwidth status. Valid values are **freezed** and **normal**.
    :param Mapping[str, _builtins.str] tags: Specifies the global internet bandwidth tags.
    :param _builtins.str type: Specifies the global internet bandwidth type.
    """
    __args__ = dict()
    __args__['accessSite'] = access_site
    __args__['bandwidthId'] = bandwidth_id
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['size'] = size
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:global/getInternetBandwidths:getInternetBandwidths', __args__, opts=opts, typ=GetInternetBandwidthsResult)
    return __ret__.apply(lambda __response__: GetInternetBandwidthsResult(
        access_site=pulumi.get(__response__, 'access_site'),
        bandwidth_id=pulumi.get(__response__, 'bandwidth_id'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        internet_bandwidths=pulumi.get(__response__, 'internet_bandwidths'),
        name=pulumi.get(__response__, 'name'),
        size=pulumi.get(__response__, 'size'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
