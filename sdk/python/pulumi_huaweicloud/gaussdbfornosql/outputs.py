# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'CassandraInstanceBackupStrategy',
    'CassandraInstanceDatastore',
    'CassandraInstanceNode',
    'InfluxInstanceBackupStrategy',
    'InfluxInstanceDatastore',
    'InfluxInstanceNode',
    'MongoInstanceBackupStrategy',
    'MongoInstanceDatastore',
    'MongoInstanceNode',
    'RedisInstanceAvailabilityZoneDetail',
    'RedisInstanceBackupStrategy',
    'RedisInstanceDatastore',
    'RedisInstanceNode',
    'GetCassandraFlavorsFlavorResult',
    'GetCassandraInstanceBackupStrategyResult',
    'GetCassandraInstanceDatastoreResult',
    'GetCassandraInstanceNodeResult',
    'GetCassandraInstancesInstanceResult',
    'GetCassandraInstancesInstanceBackupStrategyResult',
    'GetCassandraInstancesInstanceDatastoreResult',
    'GetCassandraInstancesInstanceNodeResult',
    'GetNosqlFlavorsFlavorResult',
    'GetRedisFlavorsFlavorResult',
    'GetRedisInstanceBackupStrategyResult',
    'GetRedisInstanceDatastoreResult',
    'GetRedisInstanceNodeResult',
]

@pulumi.output_type
class CassandraInstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CassandraInstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CassandraInstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CassandraInstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: _builtins.str,
                 keep_days: Optional[_builtins.int] = None):
        """
        :param _builtins.str start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
               HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
               value: 08:00-09:00, 03:00-04:00.
        :param _builtins.int keep_days: Specifies the number of days to retain the generated backup files. The value ranges from
               0 to 35. If this parameter is set to 0, the automated backup policy is not set. If this parameter is not transferred,
               the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
        HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
        value: 08:00-09:00, 03:00-04:00.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[_builtins.int]:
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        0 to 35. If this parameter is set to 0, the automated backup policy is not set. If this parameter is not transferred,
        the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        return pulumi.get(self, "keep_days")


@pulumi.output_type
class CassandraInstanceDatastore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageEngine":
            suggest = "storage_engine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CassandraInstanceDatastore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CassandraInstanceDatastore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CassandraInstanceDatastore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine: _builtins.str,
                 storage_engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Specifies the database engine. Only "GeminiDB-Cassandra" is supported now.
               Changing this parameter will create a new resource.
        :param _builtins.str storage_engine: Specifies the storage engine. Only "rocksDB" is supported now.
               Changing this parameter will create a new resource.
        :param _builtins.str version: Specifies the database version.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Specifies the database engine. Only "GeminiDB-Cassandra" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> _builtins.str:
        """
        Specifies the storage engine. Only "rocksDB" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the database version.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class CassandraInstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "supportReduce":
            suggest = "support_reduce"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CassandraInstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CassandraInstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CassandraInstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 support_reduce: Optional[_builtins.bool] = None):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the instance name, which can be the same as an existing instance name. The value
               must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only letters,
               digits, hyphens (-), and underscores (_).
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.bool support_reduce: Indicates whether the node support reduce or not.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_reduce is not None:
            pulumi.set(__self__, "support_reduce", support_reduce)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the instance name, which can be the same as an existing instance name. The value
        must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only letters,
        digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the node support reduce or not.
        """
        return pulumi.get(self, "support_reduce")


@pulumi.output_type
class InfluxInstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InfluxInstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InfluxInstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InfluxInstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: _builtins.str,
                 keep_days: Optional[_builtins.int] = None):
        """
        :param _builtins.str start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
               HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
               value: 08:00-09:00, 03:00-04:00.
        :param _builtins.int keep_days: Specifies the number of days to retain the generated backup files. The value ranges from
               `0` to `35`. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not
               transferred, the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
        HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
        value: 08:00-09:00, 03:00-04:00.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[_builtins.int]:
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        `0` to `35`. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not
        transferred, the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        return pulumi.get(self, "keep_days")


@pulumi.output_type
class InfluxInstanceDatastore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageEngine":
            suggest = "storage_engine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InfluxInstanceDatastore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InfluxInstanceDatastore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InfluxInstanceDatastore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine: _builtins.str,
                 storage_engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Specifies the database engine. Only **influxdb** is supported now.
               Changing this parameter will create a new resource.
        :param _builtins.str storage_engine: Specifies the storage engine. Only **rocksDB** is supported now.
               Changing this parameter will create a new resource.
        :param _builtins.str version: Specifies the database version.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Specifies the database engine. Only **influxdb** is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> _builtins.str:
        """
        Specifies the storage engine. Only **rocksDB** is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the database version.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class InfluxInstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "supportReduce":
            suggest = "support_reduce"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InfluxInstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InfluxInstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InfluxInstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 support_reduce: Optional[_builtins.bool] = None):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the instance name, which can be the same as an existing instance name. The
               value must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only
               letters, digits, hyphens (-), and underscores (_).
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.bool support_reduce: Indicates whether the node support reduce or not.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_reduce is not None:
            pulumi.set(__self__, "support_reduce", support_reduce)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the instance name, which can be the same as an existing instance name. The
        value must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only
        letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the node support reduce or not.
        """
        return pulumi.get(self, "support_reduce")


@pulumi.output_type
class MongoInstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MongoInstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MongoInstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MongoInstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: _builtins.str,
                 keep_days: Optional[_builtins.int] = None):
        """
        :param _builtins.str start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
               HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
               value: 08:00-09:00, 03:00-04:00.
        :param _builtins.int keep_days: Specifies the number of days to retain the generated backup files. The value ranges from
               `0` to `35`. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not
               transferred, the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
        HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
        value: 08:00-09:00, 03:00-04:00.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[_builtins.int]:
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        `0` to `35`. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not
        transferred, the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        return pulumi.get(self, "keep_days")


@pulumi.output_type
class MongoInstanceDatastore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageEngine":
            suggest = "storage_engine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MongoInstanceDatastore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MongoInstanceDatastore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MongoInstanceDatastore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine: _builtins.str,
                 storage_engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Specifies the database engine. Only **mongodb** is supported now.
        :param _builtins.str storage_engine: Specifies the storage engine. Only **rocksDB** is supported now.
        :param _builtins.str version: Specifies the database version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Specifies the database engine. Only **mongodb** is supported now.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> _builtins.str:
        """
        Specifies the storage engine. Only **rocksDB** is supported now.
        """
        return pulumi.get(self, "storage_engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MongoInstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "supportReduce":
            suggest = "support_reduce"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MongoInstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MongoInstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MongoInstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 support_reduce: Optional[_builtins.bool] = None):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the instance name, which can be the same as an existing instance name. The
               value must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only
               letters, digits, hyphens (-), and underscores (_).
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.bool support_reduce: Indicates whether the node support reduce or not.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_reduce is not None:
            pulumi.set(__self__, "support_reduce", support_reduce)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the instance name, which can be the same as an existing instance name. The
        value must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only
        letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the node support reduce or not.
        """
        return pulumi.get(self, "support_reduce")


@pulumi.output_type
class RedisInstanceAvailabilityZoneDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryAvailabilityZone":
            suggest = "primary_availability_zone"
        elif key == "secondaryAvailabilityZone":
            suggest = "secondary_availability_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RedisInstanceAvailabilityZoneDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RedisInstanceAvailabilityZoneDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RedisInstanceAvailabilityZoneDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 primary_availability_zone: _builtins.str,
                 secondary_availability_zone: _builtins.str):
        """
        :param _builtins.str primary_availability_zone: Specifies the primary AZ, it must be a single AZ and be
               different from the standby AZ. Changing this parameter will create a new resource.
        :param _builtins.str secondary_availability_zone: Specifies the standby AZ, it must be a single AZ and be
               different from the primary AZ. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "primary_availability_zone", primary_availability_zone)
        pulumi.set(__self__, "secondary_availability_zone", secondary_availability_zone)

    @_builtins.property
    @pulumi.getter(name="primaryAvailabilityZone")
    def primary_availability_zone(self) -> _builtins.str:
        """
        Specifies the primary AZ, it must be a single AZ and be
        different from the standby AZ. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "primary_availability_zone")

    @_builtins.property
    @pulumi.getter(name="secondaryAvailabilityZone")
    def secondary_availability_zone(self) -> _builtins.str:
        """
        Specifies the standby AZ, it must be a single AZ and be
        different from the primary AZ. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "secondary_availability_zone")


@pulumi.output_type
class RedisInstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RedisInstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RedisInstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RedisInstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: _builtins.str,
                 keep_days: Optional[_builtins.int] = None):
        """
        :param _builtins.str start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
               HH value must be `1` greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
               value: **08:00-09:00**, **03:00-04:00**.
        :param _builtins.int keep_days: Specifies the number of days to retain the generated backup files. The value ranges from
               0 to 35. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not transferred,
               the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
        HH value must be `1` greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
        value: **08:00-09:00**, **03:00-04:00**.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[_builtins.int]:
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        0 to 35. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not transferred,
        the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        return pulumi.get(self, "keep_days")


@pulumi.output_type
class RedisInstanceDatastore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageEngine":
            suggest = "storage_engine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RedisInstanceDatastore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RedisInstanceDatastore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RedisInstanceDatastore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine: _builtins.str,
                 storage_engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Specifies the database engine. Only "redis" is supported now.
               Changing this parameter will create a new resource.
        :param _builtins.str storage_engine: Specifies the storage engine. Only "rocksDB" is supported now.
               Changing this parameter will create a new resource.
        :param _builtins.str version: Specifies the database version. Only "5.0" is supported now.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Specifies the database engine. Only "redis" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> _builtins.str:
        """
        Specifies the storage engine. Only "rocksDB" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the database version. Only "5.0" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RedisInstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "supportReduce":
            suggest = "support_reduce"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RedisInstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RedisInstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RedisInstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 support_reduce: Optional[_builtins.bool] = None):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the instance name, which can be the same as an existing instance name. The value
               must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only letters,
               digits, hyphens (-), and underscores (_). Chinese characters must be in UTF-8 or Unicode format.
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str public_ip: Indicates the public IP address of a node.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.bool support_reduce: Indicates whether the node support reduce or not.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_reduce is not None:
            pulumi.set(__self__, "support_reduce", support_reduce)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the instance name, which can be the same as an existing instance name. The value
        must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only letters,
        digits, hyphens (-), and underscores (_). Chinese characters must be in UTF-8 or Unicode format.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the public IP address of a node.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the node support reduce or not.
        """
        return pulumi.get(self, "support_reduce")


@pulumi.output_type
class GetCassandraFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 memory: _builtins.str,
                 name: _builtins.str,
                 vcpus: _builtins.str,
                 version: _builtins.str):
        """
        :param Mapping[str, _builtins.str] az_status: Indicates the flavor status in each availability zone.
        :param _builtins.str memory: Specifies the memory size of the flavors.
        :param _builtins.str name: Indicates the spec code of the flavor.
        :param _builtins.str vcpus: Specifies the count of vcpus of the flavors.
        :param _builtins.str version: Specifies the engine version of the flavors.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vcpus", vcpus)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the flavor status in each availability zone.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Specifies the memory size of the flavors.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the spec code of the flavor.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Specifies the count of vcpus of the flavors.
        """
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the engine version of the flavors.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCassandraInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.int keep_days: Indicates the number of days to retain the generated
        :param _builtins.str start_time: Indicates the backup time window.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Indicates the number of days to retain the generated
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the backup time window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetCassandraInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 storage_engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Indicates the database engine.
        :param _builtins.str storage_engine: Indicates the database storage engine.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> _builtins.str:
        """
        Indicates the database storage engine.
        """
        return pulumi.get(self, "storage_engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCassandraInstanceNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str,
                 status: _builtins.str,
                 support_reduce: _builtins.bool):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.bool support_reduce: Indicates whether the node support reduce.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_reduce", support_reduce)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> _builtins.bool:
        """
        Indicates whether the node support reduce.
        """
        return pulumi.get(self, "support_reduce")


@pulumi.output_type
class GetCassandraInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 backup_strategies: Sequence['outputs.GetCassandraInstancesInstanceBackupStrategyResult'],
                 datastores: Sequence['outputs.GetCassandraInstancesInstanceDatastoreResult'],
                 db_user_name: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 flavor: _builtins.str,
                 id: _builtins.str,
                 mode: _builtins.str,
                 name: _builtins.str,
                 node_num: _builtins.int,
                 nodes: Sequence['outputs.GetCassandraInstancesInstanceNodeResult'],
                 port: _builtins.int,
                 private_ips: Sequence[_builtins.str],
                 region: _builtins.str,
                 security_group_id: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 volume_size: _builtins.int,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param Sequence['GetCassandraInstancesInstanceBackupStrategyArgs'] backup_strategies: Indicates the advanced backup policy. Structure is documented below.
        :param Sequence['GetCassandraInstancesInstanceDatastoreArgs'] datastores: Indicates the database information. Structure is documented below.
        :param _builtins.str db_user_name: Indicates the default username.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project id.
        :param _builtins.str flavor: Indicates the instance specifications.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str mode: Indicates the instance mode.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.int node_num: Indicates the count of the nodes.
        :param Sequence['GetCassandraInstancesInstanceNodeArgs'] nodes: Indicates the instance nodes information. Structure is documented below.
        :param _builtins.int port: Indicates the database port.
        :param Sequence[_builtins.str] private_ips: Indicates the list of private IP address of the nodes.
        :param _builtins.str region: The region in which to obtain the instance. If omitted, the provider-level region will
               be used.
        :param _builtins.str security_group_id: Indicates the security group ID.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str subnet_id: Specifies the network ID of a subnet.
        :param Mapping[str, _builtins.str] tags: Indicates the key/value tags of the instance.
        :param _builtins.int volume_size: Indicates the size of the volume.
        :param _builtins.str vpc_id: Specifies the VPC ID.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "backup_strategies", backup_strategies)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="backupStrategies")
    def backup_strategies(self) -> Sequence['outputs.GetCassandraInstancesInstanceBackupStrategyResult']:
        """
        Indicates the advanced backup policy. Structure is documented below.
        """
        return pulumi.get(self, "backup_strategies")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetCassandraInstancesInstanceDatastoreResult']:
        """
        Indicates the database information. Structure is documented below.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        Indicates the default username.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project id.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        Indicates the instance specifications.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the instance mode.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> _builtins.int:
        """
        Indicates the count of the nodes.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetCassandraInstancesInstanceNodeResult']:
        """
        Indicates the instance nodes information. Structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Indicates the database port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of private IP address of the nodes.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region in which to obtain the instance. If omitted, the provider-level region will
        be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        Indicates the security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the network ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the key/value tags of the instance.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> _builtins.int:
        """
        Indicates the size of the volume.
        """
        return pulumi.get(self, "volume_size")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetCassandraInstancesInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.int keep_days: Indicates the number of days to retain the generated
        :param _builtins.str start_time: Indicates the backup time window.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Indicates the number of days to retain the generated
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the backup time window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetCassandraInstancesInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 storage_engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Indicates the database engine.
        :param _builtins.str storage_engine: Indicates the database storage engine.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> _builtins.str:
        """
        Indicates the database storage engine.
        """
        return pulumi.get(self, "storage_engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCassandraInstancesInstanceNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str,
                 status: _builtins.str,
                 support_reduce: _builtins.bool):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.bool support_reduce: Indicates whether the node support reduce.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_reduce", support_reduce)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> _builtins.bool:
        """
        Indicates whether the node support reduce.
        """
        return pulumi.get(self, "support_reduce")


@pulumi.output_type
class GetNosqlFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[_builtins.str],
                 engine: _builtins.str,
                 engine_version: _builtins.str,
                 memory: _builtins.str,
                 name: _builtins.str,
                 vcpus: _builtins.str):
        """
        :param Sequence[_builtins.str] availability_zones: All available zones (on sale) for current flavor.
        :param _builtins.str engine: Specifies the type of the database engine. The valid values are as follows:
               + **cassandra**: The default value and means to query GaussDB (for Cassandra) instance specifications.
               + **redis**: Means to query GaussDB (for Redis) instance specifications.
               + **mongodb**: Means to query GaussDB (for Mongo) instance specifications.
               + **influxdb**: Means to query GaussDB (for Influx) instance specifications.
        :param _builtins.str engine_version: Specifies the version of the database engine.
        :param _builtins.str memory: Specifies the memory size in gigabytes (GB).
        :param _builtins.str name: The spec code of the flavor.
        :param _builtins.str vcpus: Specifies the number of vCPUs.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        All available zones (on sale) for current flavor.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Specifies the type of the database engine. The valid values are as follows:
        + **cassandra**: The default value and means to query GaussDB (for Cassandra) instance specifications.
        + **redis**: Means to query GaussDB (for Redis) instance specifications.
        + **mongodb**: Means to query GaussDB (for Mongo) instance specifications.
        + **influxdb**: Means to query GaussDB (for Influx) instance specifications.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Specifies the version of the database engine.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Specifies the memory size in gigabytes (GB).
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The spec code of the flavor.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Specifies the number of vCPUs.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetRedisFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 engine_name: _builtins.str,
                 engine_version: _builtins.str,
                 ram: _builtins.str,
                 spec_code: _builtins.str,
                 vcpus: _builtins.str):
        """
        :param Mapping[str, _builtins.str] az_status: Indicates the status of specifications in an AZ. The value can be:
               + **normal**: indicating that the specifications are on sale.
               + **unsupported**: indicating that the specifications are not supported.
               + **sellout**: indicating that the specifications are sold out.
        :param _builtins.str engine_name: Indicates the database type.
        :param _builtins.str engine_version: Indicates the database version.
        :param _builtins.str ram: Indicates the memory size in megabytes (MB).
        :param _builtins.str spec_code: Indicates the resource specification code.
        :param _builtins.str vcpus: Indicates the number of vCPUs.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the status of specifications in an AZ. The value can be:
        + **normal**: indicating that the specifications are on sale.
        + **unsupported**: indicating that the specifications are not supported.
        + **sellout**: indicating that the specifications are sold out.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> _builtins.str:
        """
        Indicates the database type.
        """
        return pulumi.get(self, "engine_name")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.str:
        """
        Indicates the memory size in megabytes (MB).
        """
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        Indicates the resource specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Indicates the number of vCPUs.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetRedisInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.int keep_days: Indicates the number of days to retain the generated
        :param _builtins.str start_time: Indicates the backup time window.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Indicates the number of days to retain the generated
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the backup time window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetRedisInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 storage_engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Indicates the database engine.
        :param _builtins.str storage_engine: Indicates the database storage engine.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> _builtins.str:
        """
        Indicates the database storage engine.
        """
        return pulumi.get(self, "storage_engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetRedisInstanceNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str,
                 status: _builtins.str,
                 support_reduce: _builtins.bool):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.str private_ip: Indicates the private IP address of a node.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.bool support_reduce: Indicates whether the node support reduce.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_reduce", support_reduce)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> _builtins.bool:
        """
        Indicates whether the node support reduce.
        """
        return pulumi.get(self, "support_reduce")


