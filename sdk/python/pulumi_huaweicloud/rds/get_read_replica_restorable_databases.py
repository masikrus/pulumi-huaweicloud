# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetReadReplicaRestorableDatabasesResult',
    'AwaitableGetReadReplicaRestorableDatabasesResult',
    'get_read_replica_restorable_databases',
    'get_read_replica_restorable_databases_output',
]

@pulumi.output_type
class GetReadReplicaRestorableDatabasesResult:
    """
    A collection of values returned by getReadReplicaRestorableDatabases.
    """
    def __init__(__self__, database_limit=None, databases=None, id=None, instance_id=None, region=None, table_limit=None, total_tables=None):
        if database_limit and not isinstance(database_limit, int):
            raise TypeError("Expected argument 'database_limit' to be a int")
        pulumi.set(__self__, "database_limit", database_limit)
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        pulumi.set(__self__, "databases", databases)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if table_limit and not isinstance(table_limit, int):
            raise TypeError("Expected argument 'table_limit' to be a int")
        pulumi.set(__self__, "table_limit", table_limit)
        if total_tables and not isinstance(total_tables, int):
            raise TypeError("Expected argument 'total_tables' to be a int")
        pulumi.set(__self__, "total_tables", total_tables)

    @_builtins.property
    @pulumi.getter(name="databaseLimit")
    def database_limit(self) -> _builtins.int:
        return pulumi.get(self, "database_limit")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetReadReplicaRestorableDatabasesDatabaseResult']:
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tableLimit")
    def table_limit(self) -> _builtins.int:
        return pulumi.get(self, "table_limit")

    @_builtins.property
    @pulumi.getter(name="totalTables")
    def total_tables(self) -> _builtins.int:
        return pulumi.get(self, "total_tables")


class AwaitableGetReadReplicaRestorableDatabasesResult(GetReadReplicaRestorableDatabasesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReadReplicaRestorableDatabasesResult(
            database_limit=self.database_limit,
            databases=self.databases,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            table_limit=self.table_limit,
            total_tables=self.total_tables)


def get_read_replica_restorable_databases(instance_id: Optional[_builtins.str] = None,
                                          region: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReadReplicaRestorableDatabasesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getReadReplicaRestorableDatabases:getReadReplicaRestorableDatabases', __args__, opts=opts, typ=GetReadReplicaRestorableDatabasesResult).value

    return AwaitableGetReadReplicaRestorableDatabasesResult(
        database_limit=pulumi.get(__ret__, 'database_limit'),
        databases=pulumi.get(__ret__, 'databases'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        table_limit=pulumi.get(__ret__, 'table_limit'),
        total_tables=pulumi.get(__ret__, 'total_tables'))
def get_read_replica_restorable_databases_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetReadReplicaRestorableDatabasesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Rds/getReadReplicaRestorableDatabases:getReadReplicaRestorableDatabases', __args__, opts=opts, typ=GetReadReplicaRestorableDatabasesResult)
    return __ret__.apply(lambda __response__: GetReadReplicaRestorableDatabasesResult(
        database_limit=pulumi.get(__response__, 'database_limit'),
        databases=pulumi.get(__response__, 'databases'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        table_limit=pulumi.get(__response__, 'table_limit'),
        total_tables=pulumi.get(__response__, 'total_tables')))
