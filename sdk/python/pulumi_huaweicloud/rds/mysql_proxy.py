# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MysqlProxyArgs', 'MysqlProxy']

@pulumi.input_type
class MysqlProxyArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 node_num: pulumi.Input[_builtins.int],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_weight: Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']] = None,
                 proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 readonly_nodes_weights: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MysqlProxy resource.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the proxy.
               + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RDS MySQL instance.
        :param pulumi.Input[_builtins.int] node_num: Specifies the node number of the proxy nodes.
               + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
               + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
        :param pulumi.Input['MysqlProxyMasterNodeWeightArgs'] master_node_weight: Specifies the read weight of the master node.
               The master_node_weight structure is documented below.
        :param pulumi.Input[_builtins.str] proxy_mode: Specifies the read/write mode of the proxy. Value options:
               + **readwrite(default value)**: read and write.
               + **readonly**: read-only.
        :param pulumi.Input[_builtins.str] proxy_name: Specifies the name of the proxy. The name must start with a letter and
               consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]] readonly_nodes_weights: Specifies the read weight of the read-only node.
               The readonly_nodes_weight structure is documented below.
               
               <a name="node_weight_struct"></a>
               The `master_node_weight` and `readonly_nodes_weight` block supports:
        :param pulumi.Input[_builtins.str] region: The region in which to create the RDS MySQL proxy resource. If omitted,
               the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] route_mode: Specifies the routing policy of the proxy. Value options:
               + **0**: weighted load balancing.
               + **1**: load balancing (The primary node does not process read requests).
               + **2**: load balancing (The primary node processes read requests).
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet.
        """
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "node_num", node_num)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if master_node_weight is not None:
            pulumi.set(__self__, "master_node_weight", master_node_weight)
        if proxy_mode is not None:
            pulumi.set(__self__, "proxy_mode", proxy_mode)
        if proxy_name is not None:
            pulumi.set(__self__, "proxy_name", proxy_name)
        if readonly_nodes_weights is not None:
            pulumi.set(__self__, "readonly_nodes_weights", readonly_nodes_weights)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_mode is not None:
            pulumi.set(__self__, "route_mode", route_mode)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the flavor of the proxy.
        + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the RDS MySQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the node number of the proxy nodes.
        + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
        + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "node_num", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeWeight")
    def master_node_weight(self) -> Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']]:
        """
        Specifies the read weight of the master node.
        The master_node_weight structure is documented below.
        """
        return pulumi.get(self, "master_node_weight")

    @master_node_weight.setter
    def master_node_weight(self, value: Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']]):
        pulumi.set(self, "master_node_weight", value)

    @_builtins.property
    @pulumi.getter(name="proxyMode")
    def proxy_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the read/write mode of the proxy. Value options:
        + **readwrite(default value)**: read and write.
        + **readonly**: read-only.
        """
        return pulumi.get(self, "proxy_mode")

    @proxy_mode.setter
    def proxy_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_mode", value)

    @_builtins.property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the proxy. The name must start with a letter and
        consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
        """
        return pulumi.get(self, "proxy_name")

    @proxy_name.setter
    def proxy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_name", value)

    @_builtins.property
    @pulumi.getter(name="readonlyNodesWeights")
    def readonly_nodes_weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]]:
        """
        Specifies the read weight of the read-only node.
        The readonly_nodes_weight structure is documented below.

        <a name="node_weight_struct"></a>
        The `master_node_weight` and `readonly_nodes_weight` block supports:
        """
        return pulumi.get(self, "readonly_nodes_weights")

    @readonly_nodes_weights.setter
    def readonly_nodes_weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]]):
        pulumi.set(self, "readonly_nodes_weights", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the RDS MySQL proxy resource. If omitted,
        the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the routing policy of the proxy. Value options:
        + **0**: weighted load balancing.
        + **1**: load balancing (The primary node does not process read requests).
        + **2**: load balancing (The primary node processes read requests).
        """
        return pulumi.get(self, "route_mode")

    @route_mode.setter
    def route_mode(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "route_mode", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class _MysqlProxyState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 alt_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 connection_pool_type: Optional[pulumi.Input[_builtins.str]] = None,
                 delay_threshold_in_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 dns_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_group_type: Optional[pulumi.Input[_builtins.str]] = None,
                 force_read_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_weight: Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']] = None,
                 memory: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyNodeArgs']]]] = None,
                 pay_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 readonly_nodes_weights: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 seconds_level_monitor_fun_status: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_option: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 support_balance_route_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 support_proxy_ssl: Optional[pulumi.Input[_builtins.bool]] = None,
                 support_switch_connection_pool_type: Optional[pulumi.Input[_builtins.bool]] = None,
                 support_transaction_split: Optional[pulumi.Input[_builtins.bool]] = None,
                 transaction_split: Optional[pulumi.Input[_builtins.str]] = None,
                 vcpus: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MysqlProxy resources.
        :param pulumi.Input[_builtins.str] address: Indicates the read/write splitting address of the proxy.
        :param pulumi.Input[_builtins.bool] alt_flag: Indicates the ALT switch status.
        :param pulumi.Input[_builtins.str] connection_pool_type: Indicates the connection pool type. The value can be:
               + **CLOSED**: The connection pool is closed.
               + **SESSION**: The session-level connection pool is enabled.
        :param pulumi.Input[_builtins.int] delay_threshold_in_seconds: Indicates the delay threshold, in seconds.
        :param pulumi.Input[_builtins.str] dns_name: Indicates the private domain name for the read/write splitting address of the proxy.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the proxy.
               + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
        :param pulumi.Input[_builtins.str] flavor_group_type: Indicates the CPU architecture. The value can be: **X86**, **ARM**.
        :param pulumi.Input[_builtins.bool] force_read_only: Indicates whether to forcibly route read requests to read replicas.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RDS MySQL instance.
        :param pulumi.Input['MysqlProxyMasterNodeWeightArgs'] master_node_weight: Specifies the read weight of the master node.
               The master_node_weight structure is documented below.
        :param pulumi.Input[_builtins.str] memory: Indicates the memory size of the proxy.
        :param pulumi.Input[_builtins.str] mode: Indicates the proxy mode. The value can be: **Cluster**, **Ha**.
        :param pulumi.Input[_builtins.int] node_num: Specifies the node number of the proxy nodes.
               + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
               + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlProxyNodeArgs']]] nodes: Indicates the list of proxy nodes.
               The nodes structure is documented below.
        :param pulumi.Input[_builtins.str] pay_mode: Indicates the billing mode of the proxy. The value can be:
               + **0**: pay-per-use billing.
               + **1**: yearly/monthly billing.
        :param pulumi.Input[_builtins.int] port: Indicates the port number.
        :param pulumi.Input[_builtins.str] proxy_mode: Specifies the read/write mode of the proxy. Value options:
               + **readwrite(default value)**: read and write.
               + **readonly**: read-only.
        :param pulumi.Input[_builtins.str] proxy_name: Specifies the name of the proxy. The name must start with a letter and
               consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]] readonly_nodes_weights: Specifies the read weight of the read-only node.
               The readonly_nodes_weight structure is documented below.
               
               <a name="node_weight_struct"></a>
               The `master_node_weight` and `readonly_nodes_weight` block supports:
        :param pulumi.Input[_builtins.str] region: The region in which to create the RDS MySQL proxy resource. If omitted,
               the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] route_mode: Specifies the routing policy of the proxy. Value options:
               + **0**: weighted load balancing.
               + **1**: load balancing (The primary node does not process read requests).
               + **2**: load balancing (The primary node processes read requests).
        :param pulumi.Input[_builtins.str] seconds_level_monitor_fun_status: Indicates the status of monitoring by seconds of the proxy. The value can be:
               **on**, **off**.
        :param pulumi.Input[_builtins.bool] ssl_option: Indicates the SSL switch status.
        :param pulumi.Input[_builtins.str] status: Indicates the proxy node status. The values can be:
               + **NORMAL**: The node is normal.
               + **ABNORMAL**: The node is abnormal.
               + **CREATING**: The node is being created.
               + **CREATEFAIL**: The node failed to be created.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet.
        :param pulumi.Input[_builtins.bool] support_balance_route_mode: Indicates whether load balancing can be enabled for the proxy.
        :param pulumi.Input[_builtins.bool] support_proxy_ssl: Indicates whether SSL can be enabled for the proxy.
        :param pulumi.Input[_builtins.bool] support_switch_connection_pool_type: Indicates whether the session connection pool type can be changed for the proxy.
        :param pulumi.Input[_builtins.bool] support_transaction_split: Indicates whether transaction splitting can be enabled for the proxy.
        :param pulumi.Input[_builtins.str] transaction_split: Indicates the status of transaction splitting for the proxy.
        :param pulumi.Input[_builtins.str] vcpus: Indicates the vCPUs of the proxy.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if alt_flag is not None:
            pulumi.set(__self__, "alt_flag", alt_flag)
        if connection_pool_type is not None:
            pulumi.set(__self__, "connection_pool_type", connection_pool_type)
        if delay_threshold_in_seconds is not None:
            pulumi.set(__self__, "delay_threshold_in_seconds", delay_threshold_in_seconds)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if flavor_group_type is not None:
            pulumi.set(__self__, "flavor_group_type", flavor_group_type)
        if force_read_only is not None:
            pulumi.set(__self__, "force_read_only", force_read_only)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if master_node_weight is not None:
            pulumi.set(__self__, "master_node_weight", master_node_weight)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if node_num is not None:
            pulumi.set(__self__, "node_num", node_num)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_mode is not None:
            pulumi.set(__self__, "proxy_mode", proxy_mode)
        if proxy_name is not None:
            pulumi.set(__self__, "proxy_name", proxy_name)
        if readonly_nodes_weights is not None:
            pulumi.set(__self__, "readonly_nodes_weights", readonly_nodes_weights)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_mode is not None:
            pulumi.set(__self__, "route_mode", route_mode)
        if seconds_level_monitor_fun_status is not None:
            pulumi.set(__self__, "seconds_level_monitor_fun_status", seconds_level_monitor_fun_status)
        if ssl_option is not None:
            pulumi.set(__self__, "ssl_option", ssl_option)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if support_balance_route_mode is not None:
            pulumi.set(__self__, "support_balance_route_mode", support_balance_route_mode)
        if support_proxy_ssl is not None:
            pulumi.set(__self__, "support_proxy_ssl", support_proxy_ssl)
        if support_switch_connection_pool_type is not None:
            pulumi.set(__self__, "support_switch_connection_pool_type", support_switch_connection_pool_type)
        if support_transaction_split is not None:
            pulumi.set(__self__, "support_transaction_split", support_transaction_split)
        if transaction_split is not None:
            pulumi.set(__self__, "transaction_split", transaction_split)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the read/write splitting address of the proxy.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="altFlag")
    def alt_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates the ALT switch status.
        """
        return pulumi.get(self, "alt_flag")

    @alt_flag.setter
    def alt_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alt_flag", value)

    @_builtins.property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the connection pool type. The value can be:
        + **CLOSED**: The connection pool is closed.
        + **SESSION**: The session-level connection pool is enabled.
        """
        return pulumi.get(self, "connection_pool_type")

    @connection_pool_type.setter
    def connection_pool_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_pool_type", value)

    @_builtins.property
    @pulumi.getter(name="delayThresholdInSeconds")
    def delay_threshold_in_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the delay threshold, in seconds.
        """
        return pulumi.get(self, "delay_threshold_in_seconds")

    @delay_threshold_in_seconds.setter
    def delay_threshold_in_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "delay_threshold_in_seconds", value)

    @_builtins.property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the private domain name for the read/write splitting address of the proxy.
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the flavor of the proxy.
        + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="flavorGroupType")
    def flavor_group_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the CPU architecture. The value can be: **X86**, **ARM**.
        """
        return pulumi.get(self, "flavor_group_type")

    @flavor_group_type.setter
    def flavor_group_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_group_type", value)

    @_builtins.property
    @pulumi.getter(name="forceReadOnly")
    def force_read_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to forcibly route read requests to read replicas.
        """
        return pulumi.get(self, "force_read_only")

    @force_read_only.setter
    def force_read_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_read_only", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the RDS MySQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeWeight")
    def master_node_weight(self) -> Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']]:
        """
        Specifies the read weight of the master node.
        The master_node_weight structure is documented below.
        """
        return pulumi.get(self, "master_node_weight")

    @master_node_weight.setter
    def master_node_weight(self, value: Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']]):
        pulumi.set(self, "master_node_weight", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the memory size of the proxy.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the proxy mode. The value can be: **Cluster**, **Ha**.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the node number of the proxy nodes.
        + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
        + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "node_num", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyNodeArgs']]]]:
        """
        Indicates the list of proxy nodes.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the billing mode of the proxy. The value can be:
        + **0**: pay-per-use billing.
        + **1**: yearly/monthly billing.
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pay_mode", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the port number.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="proxyMode")
    def proxy_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the read/write mode of the proxy. Value options:
        + **readwrite(default value)**: read and write.
        + **readonly**: read-only.
        """
        return pulumi.get(self, "proxy_mode")

    @proxy_mode.setter
    def proxy_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_mode", value)

    @_builtins.property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the proxy. The name must start with a letter and
        consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
        """
        return pulumi.get(self, "proxy_name")

    @proxy_name.setter
    def proxy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_name", value)

    @_builtins.property
    @pulumi.getter(name="readonlyNodesWeights")
    def readonly_nodes_weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]]:
        """
        Specifies the read weight of the read-only node.
        The readonly_nodes_weight structure is documented below.

        <a name="node_weight_struct"></a>
        The `master_node_weight` and `readonly_nodes_weight` block supports:
        """
        return pulumi.get(self, "readonly_nodes_weights")

    @readonly_nodes_weights.setter
    def readonly_nodes_weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]]):
        pulumi.set(self, "readonly_nodes_weights", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the RDS MySQL proxy resource. If omitted,
        the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the routing policy of the proxy. Value options:
        + **0**: weighted load balancing.
        + **1**: load balancing (The primary node does not process read requests).
        + **2**: load balancing (The primary node processes read requests).
        """
        return pulumi.get(self, "route_mode")

    @route_mode.setter
    def route_mode(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "route_mode", value)

    @_builtins.property
    @pulumi.getter(name="secondsLevelMonitorFunStatus")
    def seconds_level_monitor_fun_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of monitoring by seconds of the proxy. The value can be:
        **on**, **off**.
        """
        return pulumi.get(self, "seconds_level_monitor_fun_status")

    @seconds_level_monitor_fun_status.setter
    def seconds_level_monitor_fun_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "seconds_level_monitor_fun_status", value)

    @_builtins.property
    @pulumi.getter(name="sslOption")
    def ssl_option(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates the SSL switch status.
        """
        return pulumi.get(self, "ssl_option")

    @ssl_option.setter
    def ssl_option(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssl_option", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the proxy node status. The values can be:
        + **NORMAL**: The node is normal.
        + **ABNORMAL**: The node is abnormal.
        + **CREATING**: The node is being created.
        + **CREATEFAIL**: The node failed to be created.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="supportBalanceRouteMode")
    def support_balance_route_mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether load balancing can be enabled for the proxy.
        """
        return pulumi.get(self, "support_balance_route_mode")

    @support_balance_route_mode.setter
    def support_balance_route_mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "support_balance_route_mode", value)

    @_builtins.property
    @pulumi.getter(name="supportProxySsl")
    def support_proxy_ssl(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether SSL can be enabled for the proxy.
        """
        return pulumi.get(self, "support_proxy_ssl")

    @support_proxy_ssl.setter
    def support_proxy_ssl(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "support_proxy_ssl", value)

    @_builtins.property
    @pulumi.getter(name="supportSwitchConnectionPoolType")
    def support_switch_connection_pool_type(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the session connection pool type can be changed for the proxy.
        """
        return pulumi.get(self, "support_switch_connection_pool_type")

    @support_switch_connection_pool_type.setter
    def support_switch_connection_pool_type(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "support_switch_connection_pool_type", value)

    @_builtins.property
    @pulumi.getter(name="supportTransactionSplit")
    def support_transaction_split(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether transaction splitting can be enabled for the proxy.
        """
        return pulumi.get(self, "support_transaction_split")

    @support_transaction_split.setter
    def support_transaction_split(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "support_transaction_split", value)

    @_builtins.property
    @pulumi.getter(name="transactionSplit")
    def transaction_split(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of transaction splitting for the proxy.
        """
        return pulumi.get(self, "transaction_split")

    @transaction_split.setter
    def transaction_split(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transaction_split", value)

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the vCPUs of the proxy.
        """
        return pulumi.get(self, "vcpus")

    @vcpus.setter
    def vcpus(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vcpus", value)


@pulumi.type_token("huaweicloud:Rds/mysqlProxy:MysqlProxy")
class MysqlProxy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_weight: Optional[pulumi.Input[Union['MysqlProxyMasterNodeWeightArgs', 'MysqlProxyMasterNodeWeightArgsDict']]] = None,
                 node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 readonly_nodes_weights: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyReadonlyNodesWeightArgs', 'MysqlProxyReadonlyNodesWeightArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages RDS mysql proxy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        replica_node_id1 = config.require_object("replicaNodeId1")
        replica_node_id2 = config.require_object("replicaNodeId2")
        test = huaweicloud.rds.MysqlProxy("test",
            instance_id=instance_id,
            flavor="rds.proxy.large.2",
            node_num=3,
            route_mode=0,
            master_node_weight={
                "id": instance_id,
                "weight": 10,
            },
            readonly_nodes_weights=[
                {
                    "id": replica_node_id1,
                    "weight": 20,
                },
                {
                    "id": replica_node_id2,
                    "weight": 30,
                },
            ])
        ```

        ## Import

        The RDS MySQL proxy can be imported using the `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Rds/mysqlProxy:MysqlProxy test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the proxy.
               + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RDS MySQL instance.
        :param pulumi.Input[Union['MysqlProxyMasterNodeWeightArgs', 'MysqlProxyMasterNodeWeightArgsDict']] master_node_weight: Specifies the read weight of the master node.
               The master_node_weight structure is documented below.
        :param pulumi.Input[_builtins.int] node_num: Specifies the node number of the proxy nodes.
               + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
               + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
        :param pulumi.Input[_builtins.str] proxy_mode: Specifies the read/write mode of the proxy. Value options:
               + **readwrite(default value)**: read and write.
               + **readonly**: read-only.
        :param pulumi.Input[_builtins.str] proxy_name: Specifies the name of the proxy. The name must start with a letter and
               consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyReadonlyNodesWeightArgs', 'MysqlProxyReadonlyNodesWeightArgsDict']]]] readonly_nodes_weights: Specifies the read weight of the read-only node.
               The readonly_nodes_weight structure is documented below.
               
               <a name="node_weight_struct"></a>
               The `master_node_weight` and `readonly_nodes_weight` block supports:
        :param pulumi.Input[_builtins.str] region: The region in which to create the RDS MySQL proxy resource. If omitted,
               the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] route_mode: Specifies the routing policy of the proxy. Value options:
               + **0**: weighted load balancing.
               + **1**: load balancing (The primary node does not process read requests).
               + **2**: load balancing (The primary node processes read requests).
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MysqlProxyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages RDS mysql proxy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        replica_node_id1 = config.require_object("replicaNodeId1")
        replica_node_id2 = config.require_object("replicaNodeId2")
        test = huaweicloud.rds.MysqlProxy("test",
            instance_id=instance_id,
            flavor="rds.proxy.large.2",
            node_num=3,
            route_mode=0,
            master_node_weight={
                "id": instance_id,
                "weight": 10,
            },
            readonly_nodes_weights=[
                {
                    "id": replica_node_id1,
                    "weight": 20,
                },
                {
                    "id": replica_node_id2,
                    "weight": 30,
                },
            ])
        ```

        ## Import

        The RDS MySQL proxy can be imported using the `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Rds/mysqlProxy:MysqlProxy test <instance_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param MysqlProxyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MysqlProxyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_weight: Optional[pulumi.Input[Union['MysqlProxyMasterNodeWeightArgs', 'MysqlProxyMasterNodeWeightArgsDict']]] = None,
                 node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 readonly_nodes_weights: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyReadonlyNodesWeightArgs', 'MysqlProxyReadonlyNodesWeightArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MysqlProxyArgs.__new__(MysqlProxyArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if flavor is None and not opts.urn:
                raise TypeError("Missing required property 'flavor'")
            __props__.__dict__["flavor"] = flavor
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["master_node_weight"] = master_node_weight
            if node_num is None and not opts.urn:
                raise TypeError("Missing required property 'node_num'")
            __props__.__dict__["node_num"] = node_num
            __props__.__dict__["proxy_mode"] = proxy_mode
            __props__.__dict__["proxy_name"] = proxy_name
            __props__.__dict__["readonly_nodes_weights"] = readonly_nodes_weights
            __props__.__dict__["region"] = region
            __props__.__dict__["route_mode"] = route_mode
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["address"] = None
            __props__.__dict__["alt_flag"] = None
            __props__.__dict__["connection_pool_type"] = None
            __props__.__dict__["delay_threshold_in_seconds"] = None
            __props__.__dict__["dns_name"] = None
            __props__.__dict__["flavor_group_type"] = None
            __props__.__dict__["force_read_only"] = None
            __props__.__dict__["memory"] = None
            __props__.__dict__["mode"] = None
            __props__.__dict__["nodes"] = None
            __props__.__dict__["pay_mode"] = None
            __props__.__dict__["port"] = None
            __props__.__dict__["seconds_level_monitor_fun_status"] = None
            __props__.__dict__["ssl_option"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["support_balance_route_mode"] = None
            __props__.__dict__["support_proxy_ssl"] = None
            __props__.__dict__["support_switch_connection_pool_type"] = None
            __props__.__dict__["support_transaction_split"] = None
            __props__.__dict__["transaction_split"] = None
            __props__.__dict__["vcpus"] = None
        super(MysqlProxy, __self__).__init__(
            'huaweicloud:Rds/mysqlProxy:MysqlProxy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[_builtins.str]] = None,
            alt_flag: Optional[pulumi.Input[_builtins.bool]] = None,
            connection_pool_type: Optional[pulumi.Input[_builtins.str]] = None,
            delay_threshold_in_seconds: Optional[pulumi.Input[_builtins.int]] = None,
            dns_name: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            flavor: Optional[pulumi.Input[_builtins.str]] = None,
            flavor_group_type: Optional[pulumi.Input[_builtins.str]] = None,
            force_read_only: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            master_node_weight: Optional[pulumi.Input[Union['MysqlProxyMasterNodeWeightArgs', 'MysqlProxyMasterNodeWeightArgsDict']]] = None,
            memory: Optional[pulumi.Input[_builtins.str]] = None,
            mode: Optional[pulumi.Input[_builtins.str]] = None,
            node_num: Optional[pulumi.Input[_builtins.int]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyNodeArgs', 'MysqlProxyNodeArgsDict']]]]] = None,
            pay_mode: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.int]] = None,
            proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
            proxy_name: Optional[pulumi.Input[_builtins.str]] = None,
            readonly_nodes_weights: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyReadonlyNodesWeightArgs', 'MysqlProxyReadonlyNodesWeightArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            route_mode: Optional[pulumi.Input[_builtins.int]] = None,
            seconds_level_monitor_fun_status: Optional[pulumi.Input[_builtins.str]] = None,
            ssl_option: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            support_balance_route_mode: Optional[pulumi.Input[_builtins.bool]] = None,
            support_proxy_ssl: Optional[pulumi.Input[_builtins.bool]] = None,
            support_switch_connection_pool_type: Optional[pulumi.Input[_builtins.bool]] = None,
            support_transaction_split: Optional[pulumi.Input[_builtins.bool]] = None,
            transaction_split: Optional[pulumi.Input[_builtins.str]] = None,
            vcpus: Optional[pulumi.Input[_builtins.str]] = None) -> 'MysqlProxy':
        """
        Get an existing MysqlProxy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address: Indicates the read/write splitting address of the proxy.
        :param pulumi.Input[_builtins.bool] alt_flag: Indicates the ALT switch status.
        :param pulumi.Input[_builtins.str] connection_pool_type: Indicates the connection pool type. The value can be:
               + **CLOSED**: The connection pool is closed.
               + **SESSION**: The session-level connection pool is enabled.
        :param pulumi.Input[_builtins.int] delay_threshold_in_seconds: Indicates the delay threshold, in seconds.
        :param pulumi.Input[_builtins.str] dns_name: Indicates the private domain name for the read/write splitting address of the proxy.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the proxy.
               + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
        :param pulumi.Input[_builtins.str] flavor_group_type: Indicates the CPU architecture. The value can be: **X86**, **ARM**.
        :param pulumi.Input[_builtins.bool] force_read_only: Indicates whether to forcibly route read requests to read replicas.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RDS MySQL instance.
        :param pulumi.Input[Union['MysqlProxyMasterNodeWeightArgs', 'MysqlProxyMasterNodeWeightArgsDict']] master_node_weight: Specifies the read weight of the master node.
               The master_node_weight structure is documented below.
        :param pulumi.Input[_builtins.str] memory: Indicates the memory size of the proxy.
        :param pulumi.Input[_builtins.str] mode: Indicates the proxy mode. The value can be: **Cluster**, **Ha**.
        :param pulumi.Input[_builtins.int] node_num: Specifies the node number of the proxy nodes.
               + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
               + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyNodeArgs', 'MysqlProxyNodeArgsDict']]]] nodes: Indicates the list of proxy nodes.
               The nodes structure is documented below.
        :param pulumi.Input[_builtins.str] pay_mode: Indicates the billing mode of the proxy. The value can be:
               + **0**: pay-per-use billing.
               + **1**: yearly/monthly billing.
        :param pulumi.Input[_builtins.int] port: Indicates the port number.
        :param pulumi.Input[_builtins.str] proxy_mode: Specifies the read/write mode of the proxy. Value options:
               + **readwrite(default value)**: read and write.
               + **readonly**: read-only.
        :param pulumi.Input[_builtins.str] proxy_name: Specifies the name of the proxy. The name must start with a letter and
               consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyReadonlyNodesWeightArgs', 'MysqlProxyReadonlyNodesWeightArgsDict']]]] readonly_nodes_weights: Specifies the read weight of the read-only node.
               The readonly_nodes_weight structure is documented below.
               
               <a name="node_weight_struct"></a>
               The `master_node_weight` and `readonly_nodes_weight` block supports:
        :param pulumi.Input[_builtins.str] region: The region in which to create the RDS MySQL proxy resource. If omitted,
               the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] route_mode: Specifies the routing policy of the proxy. Value options:
               + **0**: weighted load balancing.
               + **1**: load balancing (The primary node does not process read requests).
               + **2**: load balancing (The primary node processes read requests).
        :param pulumi.Input[_builtins.str] seconds_level_monitor_fun_status: Indicates the status of monitoring by seconds of the proxy. The value can be:
               **on**, **off**.
        :param pulumi.Input[_builtins.bool] ssl_option: Indicates the SSL switch status.
        :param pulumi.Input[_builtins.str] status: Indicates the proxy node status. The values can be:
               + **NORMAL**: The node is normal.
               + **ABNORMAL**: The node is abnormal.
               + **CREATING**: The node is being created.
               + **CREATEFAIL**: The node failed to be created.
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet.
        :param pulumi.Input[_builtins.bool] support_balance_route_mode: Indicates whether load balancing can be enabled for the proxy.
        :param pulumi.Input[_builtins.bool] support_proxy_ssl: Indicates whether SSL can be enabled for the proxy.
        :param pulumi.Input[_builtins.bool] support_switch_connection_pool_type: Indicates whether the session connection pool type can be changed for the proxy.
        :param pulumi.Input[_builtins.bool] support_transaction_split: Indicates whether transaction splitting can be enabled for the proxy.
        :param pulumi.Input[_builtins.str] transaction_split: Indicates the status of transaction splitting for the proxy.
        :param pulumi.Input[_builtins.str] vcpus: Indicates the vCPUs of the proxy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MysqlProxyState.__new__(_MysqlProxyState)

        __props__.__dict__["address"] = address
        __props__.__dict__["alt_flag"] = alt_flag
        __props__.__dict__["connection_pool_type"] = connection_pool_type
        __props__.__dict__["delay_threshold_in_seconds"] = delay_threshold_in_seconds
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["flavor_group_type"] = flavor_group_type
        __props__.__dict__["force_read_only"] = force_read_only
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["master_node_weight"] = master_node_weight
        __props__.__dict__["memory"] = memory
        __props__.__dict__["mode"] = mode
        __props__.__dict__["node_num"] = node_num
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["pay_mode"] = pay_mode
        __props__.__dict__["port"] = port
        __props__.__dict__["proxy_mode"] = proxy_mode
        __props__.__dict__["proxy_name"] = proxy_name
        __props__.__dict__["readonly_nodes_weights"] = readonly_nodes_weights
        __props__.__dict__["region"] = region
        __props__.__dict__["route_mode"] = route_mode
        __props__.__dict__["seconds_level_monitor_fun_status"] = seconds_level_monitor_fun_status
        __props__.__dict__["ssl_option"] = ssl_option
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["support_balance_route_mode"] = support_balance_route_mode
        __props__.__dict__["support_proxy_ssl"] = support_proxy_ssl
        __props__.__dict__["support_switch_connection_pool_type"] = support_switch_connection_pool_type
        __props__.__dict__["support_transaction_split"] = support_transaction_split
        __props__.__dict__["transaction_split"] = transaction_split
        __props__.__dict__["vcpus"] = vcpus
        return MysqlProxy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def address(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the read/write splitting address of the proxy.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="altFlag")
    def alt_flag(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates the ALT switch status.
        """
        return pulumi.get(self, "alt_flag")

    @_builtins.property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the connection pool type. The value can be:
        + **CLOSED**: The connection pool is closed.
        + **SESSION**: The session-level connection pool is enabled.
        """
        return pulumi.get(self, "connection_pool_type")

    @_builtins.property
    @pulumi.getter(name="delayThresholdInSeconds")
    def delay_threshold_in_seconds(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the delay threshold, in seconds.
        """
        return pulumi.get(self, "delay_threshold_in_seconds")

    @_builtins.property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the private domain name for the read/write splitting address of the proxy.
        """
        return pulumi.get(self, "dns_name")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the flavor of the proxy.
        + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="flavorGroupType")
    def flavor_group_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the CPU architecture. The value can be: **X86**, **ARM**.
        """
        return pulumi.get(self, "flavor_group_type")

    @_builtins.property
    @pulumi.getter(name="forceReadOnly")
    def force_read_only(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether to forcibly route read requests to read replicas.
        """
        return pulumi.get(self, "force_read_only")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the RDS MySQL instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="masterNodeWeight")
    def master_node_weight(self) -> pulumi.Output[Optional['outputs.MysqlProxyMasterNodeWeight']]:
        """
        Specifies the read weight of the master node.
        The master_node_weight structure is documented below.
        """
        return pulumi.get(self, "master_node_weight")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the memory size of the proxy.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the proxy mode. The value can be: **Cluster**, **Ha**.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the node number of the proxy nodes.
        + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
        + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence['outputs.MysqlProxyNode']]:
        """
        Indicates the list of proxy nodes.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the billing mode of the proxy. The value can be:
        + **0**: pay-per-use billing.
        + **1**: yearly/monthly billing.
        """
        return pulumi.get(self, "pay_mode")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the port number.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="proxyMode")
    def proxy_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the read/write mode of the proxy. Value options:
        + **readwrite(default value)**: read and write.
        + **readonly**: read-only.
        """
        return pulumi.get(self, "proxy_mode")

    @_builtins.property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the proxy. The name must start with a letter and
        consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
        """
        return pulumi.get(self, "proxy_name")

    @_builtins.property
    @pulumi.getter(name="readonlyNodesWeights")
    def readonly_nodes_weights(self) -> pulumi.Output[Optional[Sequence['outputs.MysqlProxyReadonlyNodesWeight']]]:
        """
        Specifies the read weight of the read-only node.
        The readonly_nodes_weight structure is documented below.

        <a name="node_weight_struct"></a>
        The `master_node_weight` and `readonly_nodes_weight` block supports:
        """
        return pulumi.get(self, "readonly_nodes_weights")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the RDS MySQL proxy resource. If omitted,
        the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the routing policy of the proxy. Value options:
        + **0**: weighted load balancing.
        + **1**: load balancing (The primary node does not process read requests).
        + **2**: load balancing (The primary node processes read requests).
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="secondsLevelMonitorFunStatus")
    def seconds_level_monitor_fun_status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of monitoring by seconds of the proxy. The value can be:
        **on**, **off**.
        """
        return pulumi.get(self, "seconds_level_monitor_fun_status")

    @_builtins.property
    @pulumi.getter(name="sslOption")
    def ssl_option(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates the SSL switch status.
        """
        return pulumi.get(self, "ssl_option")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the proxy node status. The values can be:
        + **NORMAL**: The node is normal.
        + **ABNORMAL**: The node is abnormal.
        + **CREATING**: The node is being created.
        + **CREATEFAIL**: The node failed to be created.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the network ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="supportBalanceRouteMode")
    def support_balance_route_mode(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether load balancing can be enabled for the proxy.
        """
        return pulumi.get(self, "support_balance_route_mode")

    @_builtins.property
    @pulumi.getter(name="supportProxySsl")
    def support_proxy_ssl(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether SSL can be enabled for the proxy.
        """
        return pulumi.get(self, "support_proxy_ssl")

    @_builtins.property
    @pulumi.getter(name="supportSwitchConnectionPoolType")
    def support_switch_connection_pool_type(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the session connection pool type can be changed for the proxy.
        """
        return pulumi.get(self, "support_switch_connection_pool_type")

    @_builtins.property
    @pulumi.getter(name="supportTransactionSplit")
    def support_transaction_split(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether transaction splitting can be enabled for the proxy.
        """
        return pulumi.get(self, "support_transaction_split")

    @_builtins.property
    @pulumi.getter(name="transactionSplit")
    def transaction_split(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of transaction splitting for the proxy.
        """
        return pulumi.get(self, "transaction_split")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the vCPUs of the proxy.
        """
        return pulumi.get(self, "vcpus")

