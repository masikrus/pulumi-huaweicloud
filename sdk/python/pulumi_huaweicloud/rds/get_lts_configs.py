# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLtsConfigsResult',
    'AwaitableGetLtsConfigsResult',
    'get_lts_configs',
    'get_lts_configs_output',
]

@pulumi.output_type
class GetLtsConfigsResult:
    """
    A collection of values returned by getLtsConfigs.
    """
    def __init__(__self__, engine=None, enterprise_project_id=None, id=None, instance_id=None, instance_lts_configs=None, instance_name=None, instance_status=None, region=None, sort=None):
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_lts_configs and not isinstance(instance_lts_configs, list):
            raise TypeError("Expected argument 'instance_lts_configs' to be a list")
        pulumi.set(__self__, "instance_lts_configs", instance_lts_configs)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if instance_status and not isinstance(instance_status, str):
            raise TypeError("Expected argument 'instance_status' to be a str")
        pulumi.set(__self__, "instance_status", instance_status)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the enterprise project ID associated with the instance.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceLtsConfigs")
    def instance_lts_configs(self) -> Sequence['outputs.GetLtsConfigsInstanceLtsConfigResult']:
        """
        Indicates the list of LTS configuration objects.
        """
        return pulumi.get(self, "instance_lts_configs")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_status")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")


class AwaitableGetLtsConfigsResult(GetLtsConfigsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLtsConfigsResult(
            engine=self.engine,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            instance_id=self.instance_id,
            instance_lts_configs=self.instance_lts_configs,
            instance_name=self.instance_name,
            instance_status=self.instance_status,
            region=self.region,
            sort=self.sort)


def get_lts_configs(engine: Optional[_builtins.str] = None,
                    enterprise_project_id: Optional[_builtins.str] = None,
                    instance_id: Optional[_builtins.str] = None,
                    instance_name: Optional[_builtins.str] = None,
                    instance_status: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    sort: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLtsConfigsResult:
    """
    Use this data source to get the list of log configuration (LTS) configs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    engine = config.require_object("engine")
    test = huaweicloud.Rds.get_lts_configs(engine=engine)
    ```


    :param _builtins.str engine: Specifies the RDS engine type. Value options:
           **mysql**, **postgresql**, **sqlserver**.
    :param _builtins.str enterprise_project_id: Specifies the project ID.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str instance_name: Specifies the instance name.
    :param _builtins.str instance_status: Specifies the instance status.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort: Specifies the sort criteria for the returned instances.
    """
    __args__ = dict()
    __args__['engine'] = engine
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['instanceId'] = instance_id
    __args__['instanceName'] = instance_name
    __args__['instanceStatus'] = instance_status
    __args__['region'] = region
    __args__['sort'] = sort
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getLtsConfigs:getLtsConfigs', __args__, opts=opts, typ=GetLtsConfigsResult).value

    return AwaitableGetLtsConfigsResult(
        engine=pulumi.get(__ret__, 'engine'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_lts_configs=pulumi.get(__ret__, 'instance_lts_configs'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        instance_status=pulumi.get(__ret__, 'instance_status'),
        region=pulumi.get(__ret__, 'region'),
        sort=pulumi.get(__ret__, 'sort'))
def get_lts_configs_output(engine: Optional[pulumi.Input[_builtins.str]] = None,
                           enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           instance_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           instance_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLtsConfigsResult]:
    """
    Use this data source to get the list of log configuration (LTS) configs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    engine = config.require_object("engine")
    test = huaweicloud.Rds.get_lts_configs(engine=engine)
    ```


    :param _builtins.str engine: Specifies the RDS engine type. Value options:
           **mysql**, **postgresql**, **sqlserver**.
    :param _builtins.str enterprise_project_id: Specifies the project ID.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str instance_name: Specifies the instance name.
    :param _builtins.str instance_status: Specifies the instance status.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort: Specifies the sort criteria for the returned instances.
    """
    __args__ = dict()
    __args__['engine'] = engine
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['instanceId'] = instance_id
    __args__['instanceName'] = instance_name
    __args__['instanceStatus'] = instance_status
    __args__['region'] = region
    __args__['sort'] = sort
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Rds/getLtsConfigs:getLtsConfigs', __args__, opts=opts, typ=GetLtsConfigsResult)
    return __ret__.apply(lambda __response__: GetLtsConfigsResult(
        engine=pulumi.get(__response__, 'engine'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instance_lts_configs=pulumi.get(__response__, 'instance_lts_configs'),
        instance_name=pulumi.get(__response__, 'instance_name'),
        instance_status=pulumi.get(__response__, 'instance_status'),
        region=pulumi.get(__response__, 'region'),
        sort=pulumi.get(__response__, 'sort')))
