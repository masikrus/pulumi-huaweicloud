# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'BackupDatabase',
    'Database_privilegeUser',
    'InstanceBackupStrategy',
    'InstanceDb',
    'InstanceMsdtcHost',
    'InstanceNode',
    'InstanceParameter',
    'InstanceRestore',
    'InstanceStorageUsedSpace',
    'InstanceV3BackupStrategy',
    'InstanceV3Db',
    'InstanceV3MsdtcHost',
    'InstanceV3Node',
    'InstanceV3Parameter',
    'InstanceV3Restore',
    'InstanceV3StorageUsedSpace',
    'InstanceV3Volume',
    'InstanceVolume',
    'MysqlDatabasePrivilegeUser',
    'MysqlDatabaseTableRestoreDatabase',
    'MysqlDatabaseTableRestoreRestoreTable',
    'MysqlDatabaseTableRestoreRestoreTableTable',
    'MysqlProxyMasterNodeWeight',
    'MysqlProxyNode',
    'MysqlProxyReadonlyNodesWeight',
    'ParametergroupConfigurationParameter',
    'ParametergroupCopyConfigurationParameter',
    'ParametergroupCopyDatastore',
    'ParametergroupDatastore',
    'ParametergroupV3ConfigurationParameter',
    'ParametergroupV3Datastore',
    'PgAccountAttribute',
    'PgDatabasePrivilegeUser',
    'PgDatabaseRestoreDatabase',
    'PgHbaHostBasedAuthentication',
    'PgTableRestoreDatabase',
    'PgTableRestoreDatabaseSchema',
    'PgTableRestoreDatabaseSchemaTable',
    'ReadReplicaInstanceDb',
    'ReadReplicaInstanceParameter',
    'ReadReplicaInstanceVolume',
    'RestoreReadReplicaDatabaseDatabase',
    'SqlserverDatabasePrivilegeUser',
    'GetAvailableFlavorsOptionalFlavorResult',
    'GetBackupDatabasesDatabaseResult',
    'GetBackupFilesFileResult',
    'GetBackupsBackupResult',
    'GetBackupsBackupDatabaseResult',
    'GetBackupsBackupDatastoreResult',
    'GetCrossRegionBackupInstancesBackupInstanceResult',
    'GetCrossRegionBackupInstancesBackupInstanceDatastoreResult',
    'GetCrossRegionBackupsBackupResult',
    'GetCrossRegionBackupsBackupDatabaseResult',
    'GetCrossRegionBackupsBackupDatastoreResult',
    'GetCrossRegionRestoreTimeRangesRestoreTimeResult',
    'GetDiagnosisDiagnosisResult',
    'GetDiagnosisInstancesInstanceResult',
    'GetDrInstancesInstanceDrRelationResult',
    'GetDrInstancesInstanceDrRelationMasterInstanceResult',
    'GetDrInstancesInstanceDrRelationSlaveInstanceResult',
    'GetDrRelationshipsInstanceDrInfoResult',
    'GetEngineVersionsVersionResult',
    'GetErrorLogsErrorLogResult',
    'GetExtendLogFilesFileResult',
    'GetExtendLogLinksLinkResult',
    'GetFlavorsFlavorResult',
    'GetFlavorsV3FlavorResult',
    'GetInstanceConfigurationsConfigurationParameterResult',
    'GetInstanceParametersHistoriesHistoryResult',
    'GetInstancesInstanceResult',
    'GetInstancesInstanceBackupStrategyResult',
    'GetInstancesInstanceDbResult',
    'GetInstancesInstanceNodeResult',
    'GetInstancesInstanceVolumeResult',
    'GetLtsConfigsInstanceLtsConfigResult',
    'GetLtsConfigsInstanceLtsConfigInstanceResult',
    'GetLtsConfigsInstanceLtsConfigLtsConfigResult',
    'GetMysqlAccountsUserResult',
    'GetMysqlAuthorizedDatabasesDatabaseResult',
    'GetMysqlDatabasePrivilegesUserResult',
    'GetMysqlDatabasesDatabaseResult',
    'GetMysqlProxiesProxyListResult',
    'GetMysqlProxiesProxyListMasterInstanceResult',
    'GetMysqlProxiesProxyListProxyResult',
    'GetMysqlProxiesProxyListProxyFlavorInfoResult',
    'GetMysqlProxiesProxyListProxyNodeResult',
    'GetMysqlProxiesProxyListReadonlyInstanceResult',
    'GetMysqlProxyFlavorsFlavorGroupResult',
    'GetMysqlProxyFlavorsFlavorGroupFlavorResult',
    'GetParametergroupsConfigurationResult',
    'GetPgAccountsUserResult',
    'GetPgAccountsUserAttributeResult',
    'GetPgDatabasesDatabaseResult',
    'GetPgHbaChangeRecordsPgHbaChangeRecordResult',
    'GetPgHbaChangeRecordsPgHbaChangeRecordAfterConfResult',
    'GetPgHbaChangeRecordsPgHbaChangeRecordBeforeConfResult',
    'GetPgPluginsPluginResult',
    'GetPgSchemasDatabaseSchemaResult',
    'GetPgSqlLimitsSqlLimitResult',
    'GetPredefinedTagsTagResult',
    'GetQuotasQuotaResult',
    'GetQuotasQuotaResourceResult',
    'GetReadReplicaRestorableDatabasesDatabaseResult',
    'GetReadReplicaRestorableDatabasesDatabaseSchemaResult',
    'GetReadReplicaRestorableDatabasesDatabaseSchemaTableResult',
    'GetRecyclingInstancesInstanceResult',
    'GetRestoreTimeRangesRestoreTimeResult',
    'GetRestoredDatabasesInstanceResult',
    'GetRestoredDatabasesInstanceDatabaseResult',
    'GetRestoredTablesInstanceResult',
    'GetRestoredTablesInstanceDatabaseResult',
    'GetRestoredTablesInstanceDatabaseSchemaResult',
    'GetRestoredTablesInstanceDatabaseSchemaTableResult',
    'GetSlowLogFilesFileResult',
    'GetSlowLogsSlowLogResult',
    'GetSqlAuditLogsAuditLogResult',
    'GetSqlAuditOperationsOperationResult',
    'GetSqlserverAccountsUserResult',
    'GetSqlserverDatabasePrivilegesUserResult',
    'GetSqlserverDatabasesDatabaseResult',
    'GetSslCertDownloadLinksCertInfoListResult',
    'GetStorageTypesStorageTypeResult',
    'GetTagsTagResult',
    'GetTasksJobResult',
    'GetTasksJobInstanceResult',
]

@pulumi.output_type
class BackupDatabase(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: Database to be backed up for Microsoft SQL Server.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Database to be backed up for Microsoft SQL Server.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class Database_privilegeUser(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 readonly: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the username of the database account.
        :param _builtins.bool readonly: Specifies the read-only permission.
        """
        pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the username of the database account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        """
        Specifies the read-only permission.
        """
        return pulumi.get(self, "readonly")


@pulumi.output_type
class InstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: _builtins.str,
                 keep_days: Optional[_builtins.int] = None,
                 period: Optional[_builtins.str] = None):
        """
        :param _builtins.str start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the **hh:mm-HH:MM**
               format. The current time is in the UTC format. The HH value must be 1 greater than the hh value. The values of mm and
               MM must be the same and must be set to any of the following: 00, 15, 30, or 45. Example value: 08:15-09:15 23:00-00:
               00.
        :param _builtins.int keep_days: Specifies the retention days for specific backup files. The value range is from 0 to 732.
               
               > **NOTE:** Primary/standby DB instances of Microsoft SQL Server do not support disabling the automated backup
               policy.
        :param _builtins.str period: Specifies the backup cycle. Automatic backups will be performed on the specified days of
               the week, except when disabling the automatic backup policy. The value range is a comma-separated number, where each
               number represents a day of the week. For example, a value of 1,2,3,4 would set the backup cycle to Monday, Tuesday,
               Wednesday, and Thursday. The default value is 1,2,3,4,5,6,7.
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the **hh:mm-HH:MM**
        format. The current time is in the UTC format. The HH value must be 1 greater than the hh value. The values of mm and
        MM must be the same and must be set to any of the following: 00, 15, 30, or 45. Example value: 08:15-09:15 23:00-00:
        00.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[_builtins.int]:
        """
        Specifies the retention days for specific backup files. The value range is from 0 to 732.

        > **NOTE:** Primary/standby DB instances of Microsoft SQL Server do not support disabling the automated backup
        policy.
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[_builtins.str]:
        """
        Specifies the backup cycle. Automatic backups will be performed on the specified days of
        the week, except when disabling the automatic backup policy. The value range is a comma-separated number, where each
        number represents a day of the week. For example, a value of 1,2,3,4 would set the backup cycle to Monday, Tuesday,
        Wednesday, and Thursday. The default value is 1,2,3,4,5,6,7.
        """
        return pulumi.get(self, "period")


@pulumi.output_type
class InstanceDb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceDb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceDb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceDb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str,
                 password: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Specifies the DB engine. Available value are **MySQL**, **PostgreSQL**,
               **SQLServer** and **MariaDB**. Changing this parameter will create a new resource.
        :param _builtins.str version: Specifies the database version. Changing this parameter will create a new
               resource. Available values detailed in
               [DB Engines and Versions](https://support.huaweicloud.com/intl/en-us/productdesc-rds/en-us_topic_0043898356.html).
        :param _builtins.str password: Specifies the database password. The value should contain 8 to 32 characters,
               including uppercase and lowercase letters, digits, and the following special characters: ~!@#%^*-_=+? You are advised
               to enter a strong password to improve security, preventing security risks such as brute force cracking.
        :param _builtins.int port: Specifies the database port.
               + The MySQL database port ranges from 1024 to 65535 (excluding 12017 and 33071, which are occupied by the RDS system
               and cannot be used). The default value is 3306.
               + The PostgreSQL database port ranges from 2100 to 9500. The default value is 5432.
               + The Microsoft SQL Server database port can be 1433 or ranges from 2100 to 9500, excluding 5355 and 5985. The
               default value is 1433.
               + The MariaDB database port ranges from 1024 to 65535 (excluding 12017 and 33071, which are occupied by the RDS system
               and cannot be used). The default value is 3306.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the DB engine. Available value are **MySQL**, **PostgreSQL**,
        **SQLServer** and **MariaDB**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the database version. Changing this parameter will create a new
        resource. Available values detailed in
        [DB Engines and Versions](https://support.huaweicloud.com/intl/en-us/productdesc-rds/en-us_topic_0043898356.html).
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Specifies the database password. The value should contain 8 to 32 characters,
        including uppercase and lowercase letters, digits, and the following special characters: ~!@#%^*-_=+? You are advised
        to enter a strong password to improve security, preventing security risks such as brute force cracking.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the database port.
        + The MySQL database port ranges from 1024 to 65535 (excluding 12017 and 33071, which are occupied by the RDS system
        and cannot be used). The default value is 3306.
        + The PostgreSQL database port ranges from 2100 to 9500. The default value is 5432.
        + The Microsoft SQL Server database port can be 1433 or ranges from 2100 to 9500, excluding 5355 and 5985. The
        default value is 1433.
        + The MariaDB database port ranges from 1024 to 65535 (excluding 12017 and 33071, which are occupied by the RDS system
        and cannot be used). The default value is 3306.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class InstanceMsdtcHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceMsdtcHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceMsdtcHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceMsdtcHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: _builtins.str,
                 ip: _builtins.str,
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.str host_name: Specifies the host name.
        :param _builtins.str ip: Specifies the host IP address.
        :param _builtins.str id: Indicates the host ID.
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "ip", ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Specifies the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Specifies the host IP address.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the host ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class InstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str availability_zone: Specifies the list of AZ name.
               + If add standby node az to the list, then the instance will change from Single instance to Primary/Standby instance.
               The value of `flavor` will be changed to the ha mode value, so the value of `flavor` in the script should be changed
               to the ha mode value too.
               + If change the standby node az, then the standby node will migrate to new az.
        :param _builtins.str id: Indicates the host ID.
        :param _builtins.str name: Specifies the DB instance name. The DB instance name of the same type must be unique for
               the same tenant. The value must be 4 to 64 characters in length and start with a letter. It is case-sensitive and can
               contain only letters, digits, hyphens (-), and underscores (_).
        :param _builtins.str role: Indicates the node type. The value can be master or slave, indicating the primary node or standby node
               respectively.
        :param _builtins.str status: Indicates the node status.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        """
        Specifies the list of AZ name.
        + If add standby node az to the list, then the instance will change from Single instance to Primary/Standby instance.
        The value of `flavor` will be changed to the ha mode value, so the value of `flavor` in the script should be changed
        to the ha mode value too.
        + If change the standby node az, then the standby node will migrate to new az.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the host ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the DB instance name. The DB instance name of the same type must be unique for
        the same tenant. The value must be 4 to 64 characters in length and start with a letter. It is case-sensitive and can
        contain only letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Indicates the node type. The value can be master or slave, indicating the primary node or standby node
        respectively.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class InstanceParameter(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the parameter name. Some of them needs the instance to be restarted
               to take effect.
        :param _builtins.str value: Specifies the parameter value.
               
               <a name="RdsInstance_MsdtcHosts"></a>
               The `msdtc_hosts` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter name. Some of them needs the instance to be restarted
        to take effect.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the parameter value.

        <a name="RdsInstance_MsdtcHosts"></a>
        The `msdtc_hosts` block supports:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstanceRestore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceRestore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceRestore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceRestore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: _builtins.str,
                 instance_id: _builtins.str,
                 database_name: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str backup_id: Specifies the ID of the backup used to restore data. Changing this
               parameter will create a new resource.
        :param _builtins.str instance_id: Specifies the source DB instance ID. Changing this parameter will create
               a new resource.
        :param Mapping[str, _builtins.str] database_name: Specifies the database to be restored. This parameter applies only to
               Microsoft SQL Server databases. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "instance_id", instance_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        """
        Specifies the ID of the backup used to restore data. Changing this
        parameter will create a new resource.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the source DB instance ID. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the database to be restored. This parameter applies only to
        Microsoft SQL Server databases. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "database_name")


@pulumi.output_type
class InstanceStorageUsedSpace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeId":
            suggest = "node_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageUsedSpace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageUsedSpace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageUsedSpace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_id: Optional[_builtins.str] = None,
                 used: Optional[_builtins.str] = None):
        """
        :param _builtins.str node_id: Indicates the instance node ID.
        :param _builtins.str used: Indicates the used storage, in GB.
        """
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[_builtins.str]:
        """
        Indicates the instance node ID.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter
    def used(self) -> Optional[_builtins.str]:
        """
        Indicates the used storage, in GB.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class InstanceV3BackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3BackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3BackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3BackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: _builtins.str,
                 keep_days: Optional[_builtins.int] = None,
                 period: Optional[_builtins.str] = None):
        """
        :param _builtins.int keep_days: schema: Required
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[_builtins.int]:
        """
        schema: Required
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "period")


@pulumi.output_type
class InstanceV3Db(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3Db. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3Db.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3Db.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str,
                 password: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 user_name: Optional[_builtins.str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class InstanceV3MsdtcHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3MsdtcHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3MsdtcHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3MsdtcHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: _builtins.str,
                 ip: _builtins.str,
                 id: Optional[_builtins.str] = None):
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "ip", ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class InstanceV3Node(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3Node. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3Node.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3Node.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class InstanceV3Parameter(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InstanceV3Restore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3Restore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3Restore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3Restore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: _builtins.str,
                 instance_id: _builtins.str,
                 database_name: Optional[Mapping[str, _builtins.str]] = None):
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "instance_id", instance_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "database_name")


@pulumi.output_type
class InstanceV3StorageUsedSpace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeId":
            suggest = "node_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3StorageUsedSpace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3StorageUsedSpace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3StorageUsedSpace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_id: Optional[_builtins.str] = None,
                 used: Optional[_builtins.str] = None):
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter
    def used(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "used")


@pulumi.output_type
class InstanceV3Volume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskEncryptionId":
            suggest = "disk_encryption_id"
        elif key == "limitSize":
            suggest = "limit_size"
        elif key == "triggerThreshold":
            suggest = "trigger_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceV3Volume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceV3Volume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceV3Volume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str,
                 disk_encryption_id: Optional[_builtins.str] = None,
                 limit_size: Optional[_builtins.int] = None,
                 trigger_threshold: Optional[_builtins.int] = None):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        if disk_encryption_id is not None:
            pulumi.set(__self__, "disk_encryption_id", disk_encryption_id)
        if limit_size is not None:
            pulumi.set(__self__, "limit_size", limit_size)
        if trigger_threshold is not None:
            pulumi.set(__self__, "trigger_threshold", trigger_threshold)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="diskEncryptionId")
    def disk_encryption_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "disk_encryption_id")

    @_builtins.property
    @pulumi.getter(name="limitSize")
    def limit_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "limit_size")

    @_builtins.property
    @pulumi.getter(name="triggerThreshold")
    def trigger_threshold(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "trigger_threshold")


@pulumi.output_type
class InstanceVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskEncryptionId":
            suggest = "disk_encryption_id"
        elif key == "limitSize":
            suggest = "limit_size"
        elif key == "triggerThreshold":
            suggest = "trigger_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str,
                 disk_encryption_id: Optional[_builtins.str] = None,
                 limit_size: Optional[_builtins.int] = None,
                 trigger_threshold: Optional[_builtins.int] = None):
        """
        :param _builtins.int size: Specifies the volume size. Its value range is from 40 GB to 4000 GB. The value must be a
               multiple of 10 and greater than the original size.
        :param _builtins.str type: Specifies the volume type. Its value can be any of the following and is
               case-sensitive:
               + **ULTRAHIGH**: SSD storage.
               + **LOCALSSD**: local SSD storage.
               + **CLOUDSSD**: cloud SSD storage. This storage type is supported only with general-purpose and dedicated DB
               instances.
               + **ESSD**: extreme SSD storage.
               
               Changing this parameter will create a new resource. For details about volume types, see
               [DB Instance Storage Types](https://support.huaweicloud.com/intl/en-us/productdesc-rds/rds_01_0020.html).
        :param _builtins.str disk_encryption_id: Specifies the key ID for disk encryption.
               Changing this parameter will create a new resource.
        :param _builtins.int limit_size: Specifies the upper limit of automatic expansion of storage, in GB.
        :param _builtins.int trigger_threshold: Specifies the threshold to trigger automatic expansion.  
               If the available storage drops to this threshold or `10` GB, the automatic expansion is triggered.
               The valid values are as follows:
               + **10**
               + **15**
               + **20**
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        if disk_encryption_id is not None:
            pulumi.set(__self__, "disk_encryption_id", disk_encryption_id)
        if limit_size is not None:
            pulumi.set(__self__, "limit_size", limit_size)
        if trigger_threshold is not None:
            pulumi.set(__self__, "trigger_threshold", trigger_threshold)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the volume size. Its value range is from 40 GB to 4000 GB. The value must be a
        multiple of 10 and greater than the original size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the volume type. Its value can be any of the following and is
        case-sensitive:
        + **ULTRAHIGH**: SSD storage.
        + **LOCALSSD**: local SSD storage.
        + **CLOUDSSD**: cloud SSD storage. This storage type is supported only with general-purpose and dedicated DB
        instances.
        + **ESSD**: extreme SSD storage.

        Changing this parameter will create a new resource. For details about volume types, see
        [DB Instance Storage Types](https://support.huaweicloud.com/intl/en-us/productdesc-rds/rds_01_0020.html).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="diskEncryptionId")
    def disk_encryption_id(self) -> Optional[_builtins.str]:
        """
        Specifies the key ID for disk encryption.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "disk_encryption_id")

    @_builtins.property
    @pulumi.getter(name="limitSize")
    def limit_size(self) -> Optional[_builtins.int]:
        """
        Specifies the upper limit of automatic expansion of storage, in GB.
        """
        return pulumi.get(self, "limit_size")

    @_builtins.property
    @pulumi.getter(name="triggerThreshold")
    def trigger_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the threshold to trigger automatic expansion.  
        If the available storage drops to this threshold or `10` GB, the automatic expansion is triggered.
        The valid values are as follows:
        + **10**
        + **15**
        + **20**
        """
        return pulumi.get(self, "trigger_threshold")


@pulumi.output_type
class MysqlDatabasePrivilegeUser(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 readonly: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the username of the database account.
        :param _builtins.bool readonly: Specifies the read-only permission. The value can be:
               + **true**: indicates the read-only permission.
               + **false**: indicates the read and write permission.
               
               The default value is **false**.
        """
        pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the username of the database account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        """
        Specifies the read-only permission. The value can be:
        + **true**: indicates the read-only permission.
        + **false**: indicates the read and write permission.

        The default value is **false**.
        """
        return pulumi.get(self, "readonly")


@pulumi.output_type
class MysqlDatabaseTableRestoreDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlDatabaseTableRestoreDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlDatabaseTableRestoreDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlDatabaseTableRestoreDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: _builtins.str,
                 old_name: _builtins.str):
        """
        :param _builtins.str new_name: Specifies the name of the table after restoration.
               
               Changing this creates a new resource.
        :param _builtins.str old_name: Specifies the name of the table before restoration.
               
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @_builtins.property
    @pulumi.getter(name="newName")
    def new_name(self) -> _builtins.str:
        """
        Specifies the name of the table after restoration.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "new_name")

    @_builtins.property
    @pulumi.getter(name="oldName")
    def old_name(self) -> _builtins.str:
        """
        Specifies the name of the table before restoration.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "old_name")


@pulumi.output_type
class MysqlDatabaseTableRestoreRestoreTable(dict):
    def __init__(__self__, *,
                 database: _builtins.str,
                 tables: Sequence['outputs.MysqlDatabaseTableRestoreRestoreTableTable']):
        """
        :param _builtins.str database: Specifies the database name.
               
               Changing this creates a new resource.
        :param Sequence['MysqlDatabaseTableRestoreRestoreTableTableArgs'] tables: Specifies the tables.
               The tables structure is documented below.
               
               Changing this creates a new resource.
               
               <a name="tables_struct"></a>
               The `tables` block supports:
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "tables", tables)

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Specifies the database name.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.MysqlDatabaseTableRestoreRestoreTableTable']:
        """
        Specifies the tables.
        The tables structure is documented below.

        Changing this creates a new resource.

        <a name="tables_struct"></a>
        The `tables` block supports:
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class MysqlDatabaseTableRestoreRestoreTableTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlDatabaseTableRestoreRestoreTableTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlDatabaseTableRestoreRestoreTableTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlDatabaseTableRestoreRestoreTableTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: _builtins.str,
                 old_name: _builtins.str):
        """
        :param _builtins.str new_name: Specifies the name of the table after restoration.
               
               Changing this creates a new resource.
        :param _builtins.str old_name: Specifies the name of the table before restoration.
               
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @_builtins.property
    @pulumi.getter(name="newName")
    def new_name(self) -> _builtins.str:
        """
        Specifies the name of the table after restoration.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "new_name")

    @_builtins.property
    @pulumi.getter(name="oldName")
    def old_name(self) -> _builtins.str:
        """
        Specifies the name of the table before restoration.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "old_name")


@pulumi.output_type
class MysqlProxyMasterNodeWeight(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str id: Specifies the ID of the node.
        :param _builtins.int weight: Specifies the weight assigned to the node.
               + If `route_mode` is `0`, the value is `0` to `1,000`.
               + If `route_mode` is `1`, the value for the primary node is `0` and the value for read replicas is `0` or `1`.
               + If `route_mode` is `2`, the value for the primary node is `1` and the value for read replicas is `0` or `1`.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the node.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Specifies the weight assigned to the node.
        + If `route_mode` is `0`, the value is `0` to `1,000`.
        + If `route_mode` is `1`, the value for the primary node is `0` and the value for read replicas is `0` or `1`.
        + If `route_mode` is `2`, the value for the primary node is `1` and the value for read replicas is `0` or `1`.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class MysqlProxyNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azCode":
            suggest = "az_code"
        elif key == "frozenFlag":
            suggest = "frozen_flag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlProxyNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlProxyNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlProxyNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 az_code: Optional[_builtins.str] = None,
                 frozen_flag: Optional[_builtins.int] = None,
                 id: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str az_code: Indicates the AZ where the proxy node is located.
        :param _builtins.int frozen_flag: Indicates whether the proxy node is frozen. The values can be:
               + **0**: unfrozen.
               + **1**: frozen.
        :param _builtins.str id: Specifies the ID of the node.
        :param _builtins.str role: Indicates the role of the proxy node. The values can be:
               + **master**: primary node.
               + **slave**: standby node.
        :param _builtins.str status: Indicates the proxy node status. The values can be:
               + **NORMAL**: The node is normal.
               + **ABNORMAL**: The node is abnormal.
               + **CREATING**: The node is being created.
               + **CREATEFAIL**: The node failed to be created.
        """
        if az_code is not None:
            pulumi.set(__self__, "az_code", az_code)
        if frozen_flag is not None:
            pulumi.set(__self__, "frozen_flag", frozen_flag)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="azCode")
    def az_code(self) -> Optional[_builtins.str]:
        """
        Indicates the AZ where the proxy node is located.
        """
        return pulumi.get(self, "az_code")

    @_builtins.property
    @pulumi.getter(name="frozenFlag")
    def frozen_flag(self) -> Optional[_builtins.int]:
        """
        Indicates whether the proxy node is frozen. The values can be:
        + **0**: unfrozen.
        + **1**: frozen.
        """
        return pulumi.get(self, "frozen_flag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the node.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Indicates the role of the proxy node. The values can be:
        + **master**: primary node.
        + **slave**: standby node.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the proxy node status. The values can be:
        + **NORMAL**: The node is normal.
        + **ABNORMAL**: The node is abnormal.
        + **CREATING**: The node is being created.
        + **CREATEFAIL**: The node failed to be created.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class MysqlProxyReadonlyNodesWeight(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str id: Specifies the ID of the node.
        :param _builtins.int weight: Specifies the weight assigned to the node.
               + If `route_mode` is `0`, the value is `0` to `1,000`.
               + If `route_mode` is `1`, the value for the primary node is `0` and the value for read replicas is `0` or `1`.
               + If `route_mode` is `2`, the value for the primary node is `1` and the value for read replicas is `0` or `1`.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the node.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Specifies the weight assigned to the node.
        + If `route_mode` is `0`, the value is `0` to `1,000`.
        + If `route_mode` is `1`, the value for the primary node is `0` and the value for read replicas is `0` or `1`.
        + If `route_mode` is `2`, the value for the primary node is `1` and the value for read replicas is `0` or `1`.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ParametergroupConfigurationParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restartRequired":
            suggest = "restart_required"
        elif key == "valueRange":
            suggest = "value_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParametergroupConfigurationParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParametergroupConfigurationParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParametergroupConfigurationParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 readonly: Optional[_builtins.bool] = None,
                 restart_required: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None,
                 value_range: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the parameter group description. It contains a maximum of 256 characters
               and cannot contain the following special characters:>!<"&'= the value is left blank by default.
        :param _builtins.str name: Specifies the parameter group name. It contains a maximum of 64 characters.
        :param _builtins.bool readonly: Indicates whether the parameter is read-only.
        :param _builtins.bool restart_required: Indicates whether a restart is required.
        :param _builtins.str type: Specifies the DB engine. Currently, MySQL, PostgreSQL, Microsoft SQL Server and
               MariaDB are supported. The value is case-insensitive and can be **mysql**, **postgresql**, **sqlserver**, or **mariadb**.
        :param _builtins.str value: Indicates the parameter value.
        :param _builtins.str value_range: Indicates the parameter value range.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if restart_required is not None:
            pulumi.set(__self__, "restart_required", restart_required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter group description. It contains a maximum of 256 characters
        and cannot contain the following special characters:>!<"&'= the value is left blank by default.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter group name. It contains a maximum of 64 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the parameter is read-only.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> Optional[_builtins.bool]:
        """
        Indicates whether a restart is required.
        """
        return pulumi.get(self, "restart_required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the DB engine. Currently, MySQL, PostgreSQL, Microsoft SQL Server and
        MariaDB are supported. The value is case-insensitive and can be **mysql**, **postgresql**, **sqlserver**, or **mariadb**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value range.
        """
        return pulumi.get(self, "value_range")


@pulumi.output_type
class ParametergroupCopyConfigurationParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restartRequired":
            suggest = "restart_required"
        elif key == "valueRange":
            suggest = "value_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParametergroupCopyConfigurationParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParametergroupCopyConfigurationParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParametergroupCopyConfigurationParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 readonly: Optional[_builtins.bool] = None,
                 restart_required: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None,
                 value_range: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the parameter group description. It contains a maximum of 256 characters
               and cannot contain the following special characters:>!<"&'= the value is left blank by default.
        :param _builtins.str name: Specifies the parameter group name. It contains a maximum of 64 characters.
        :param _builtins.bool readonly: Indicates whether the parameter is read-only.
        :param _builtins.bool restart_required: Indicates whether a restart is required.
        :param _builtins.str type: Indicates the parameter type.
        :param _builtins.str value: Indicates the parameter value.
        :param _builtins.str value_range: Indicates the parameter value range.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if restart_required is not None:
            pulumi.set(__self__, "restart_required", restart_required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter group description. It contains a maximum of 256 characters
        and cannot contain the following special characters:>!<"&'= the value is left blank by default.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter group name. It contains a maximum of 64 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the parameter is read-only.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> Optional[_builtins.bool]:
        """
        Indicates whether a restart is required.
        """
        return pulumi.get(self, "restart_required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value range.
        """
        return pulumi.get(self, "value_range")


@pulumi.output_type
class ParametergroupCopyDatastore(dict):
    def __init__(__self__, *,
                 type: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Indicates the parameter type.
        :param _builtins.str version: Indicates the database version.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ParametergroupDatastore(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str type: Specifies the DB engine. Currently, MySQL, PostgreSQL, Microsoft SQL Server and
               MariaDB are supported. The value is case-insensitive and can be **mysql**, **postgresql**, **sqlserver**, or **mariadb**.
        :param _builtins.str version: Specifies the database version.
               + MySQL databases support MySQL 5.6 and 5.7. Example value: 5.7.
               + PostgreSQL databases support PostgreSQL 9.5 and 9.6. Example value: 9.5.
               + Microsoft SQL Server databases support 2014 SE, 2016 SE, and 2016 EE. Example value: 2014_SE.
               + MariaDB databases support MariaDB 10.5. Example value: 10.5.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the DB engine. Currently, MySQL, PostgreSQL, Microsoft SQL Server and
        MariaDB are supported. The value is case-insensitive and can be **mysql**, **postgresql**, **sqlserver**, or **mariadb**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the database version.
        + MySQL databases support MySQL 5.6 and 5.7. Example value: 5.7.
        + PostgreSQL databases support PostgreSQL 9.5 and 9.6. Example value: 9.5.
        + Microsoft SQL Server databases support 2014 SE, 2016 SE, and 2016 EE. Example value: 2014_SE.
        + MariaDB databases support MariaDB 10.5. Example value: 10.5.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ParametergroupV3ConfigurationParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restartRequired":
            suggest = "restart_required"
        elif key == "valueRange":
            suggest = "value_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParametergroupV3ConfigurationParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParametergroupV3ConfigurationParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParametergroupV3ConfigurationParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 readonly: Optional[_builtins.bool] = None,
                 restart_required: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None,
                 value_range: Optional[_builtins.str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if restart_required is not None:
            pulumi.set(__self__, "restart_required", restart_required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "restart_required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value_range")


@pulumi.output_type
class ParametergroupV3Datastore(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


@pulumi.output_type
class PgAccountAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rolBypassRls":
            suggest = "rol_bypass_rls"
        elif key == "rolCanLogin":
            suggest = "rol_can_login"
        elif key == "rolConnLimit":
            suggest = "rol_conn_limit"
        elif key == "rolCreateDb":
            suggest = "rol_create_db"
        elif key == "rolCreateRole":
            suggest = "rol_create_role"
        elif key == "rolInherit":
            suggest = "rol_inherit"
        elif key == "rolReplication":
            suggest = "rol_replication"
        elif key == "rolSuper":
            suggest = "rol_super"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PgAccountAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PgAccountAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PgAccountAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rol_bypass_rls: Optional[_builtins.bool] = None,
                 rol_can_login: Optional[_builtins.bool] = None,
                 rol_conn_limit: Optional[_builtins.int] = None,
                 rol_create_db: Optional[_builtins.bool] = None,
                 rol_create_role: Optional[_builtins.bool] = None,
                 rol_inherit: Optional[_builtins.bool] = None,
                 rol_replication: Optional[_builtins.bool] = None,
                 rol_super: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool rol_bypass_rls: Indicates whether a user bypasses each row-level security policy.
        :param _builtins.bool rol_can_login: Indicates whether a user can log in to the database.
        :param _builtins.int rol_conn_limit: Indicates the maximum number of concurrent connections to a DB instance.
        :param _builtins.bool rol_create_db: Indicates whether a user can create a database.
        :param _builtins.bool rol_create_role: Indicates whether a user can create other sub-users.
        :param _builtins.bool rol_inherit: Indicates whether a user automatically inherits the permissions of the role to which the user belongs.
        :param _builtins.bool rol_replication: Indicates whether the user is a replication role.
        :param _builtins.bool rol_super: Indicates whether a user has the super-user permission.
        """
        if rol_bypass_rls is not None:
            pulumi.set(__self__, "rol_bypass_rls", rol_bypass_rls)
        if rol_can_login is not None:
            pulumi.set(__self__, "rol_can_login", rol_can_login)
        if rol_conn_limit is not None:
            pulumi.set(__self__, "rol_conn_limit", rol_conn_limit)
        if rol_create_db is not None:
            pulumi.set(__self__, "rol_create_db", rol_create_db)
        if rol_create_role is not None:
            pulumi.set(__self__, "rol_create_role", rol_create_role)
        if rol_inherit is not None:
            pulumi.set(__self__, "rol_inherit", rol_inherit)
        if rol_replication is not None:
            pulumi.set(__self__, "rol_replication", rol_replication)
        if rol_super is not None:
            pulumi.set(__self__, "rol_super", rol_super)

    @_builtins.property
    @pulumi.getter(name="rolBypassRls")
    def rol_bypass_rls(self) -> Optional[_builtins.bool]:
        """
        Indicates whether a user bypasses each row-level security policy.
        """
        return pulumi.get(self, "rol_bypass_rls")

    @_builtins.property
    @pulumi.getter(name="rolCanLogin")
    def rol_can_login(self) -> Optional[_builtins.bool]:
        """
        Indicates whether a user can log in to the database.
        """
        return pulumi.get(self, "rol_can_login")

    @_builtins.property
    @pulumi.getter(name="rolConnLimit")
    def rol_conn_limit(self) -> Optional[_builtins.int]:
        """
        Indicates the maximum number of concurrent connections to a DB instance.
        """
        return pulumi.get(self, "rol_conn_limit")

    @_builtins.property
    @pulumi.getter(name="rolCreateDb")
    def rol_create_db(self) -> Optional[_builtins.bool]:
        """
        Indicates whether a user can create a database.
        """
        return pulumi.get(self, "rol_create_db")

    @_builtins.property
    @pulumi.getter(name="rolCreateRole")
    def rol_create_role(self) -> Optional[_builtins.bool]:
        """
        Indicates whether a user can create other sub-users.
        """
        return pulumi.get(self, "rol_create_role")

    @_builtins.property
    @pulumi.getter(name="rolInherit")
    def rol_inherit(self) -> Optional[_builtins.bool]:
        """
        Indicates whether a user automatically inherits the permissions of the role to which the user belongs.
        """
        return pulumi.get(self, "rol_inherit")

    @_builtins.property
    @pulumi.getter(name="rolReplication")
    def rol_replication(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the user is a replication role.
        """
        return pulumi.get(self, "rol_replication")

    @_builtins.property
    @pulumi.getter(name="rolSuper")
    def rol_super(self) -> Optional[_builtins.bool]:
        """
        Indicates whether a user has the super-user permission.
        """
        return pulumi.get(self, "rol_super")


@pulumi.output_type
class PgDatabasePrivilegeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PgDatabasePrivilegeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PgDatabasePrivilegeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PgDatabasePrivilegeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 readonly: _builtins.bool,
                 schema_name: _builtins.str):
        """
        :param _builtins.str name: Specifies the username of the database account.
        :param _builtins.bool readonly: Specifies the read-only permission. The value can be:
               + **true**: indicates the read-only permission.
               + **false**: indicates the read and write permission.
        :param _builtins.str schema_name: Specifies the name of the schema.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)
        pulumi.set(__self__, "schema_name", schema_name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the username of the database account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        Specifies the read-only permission. The value can be:
        + **true**: indicates the read-only permission.
        + **false**: indicates the read and write permission.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        Specifies the name of the schema.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class PgDatabaseRestoreDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PgDatabaseRestoreDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PgDatabaseRestoreDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PgDatabaseRestoreDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: _builtins.str,
                 old_name: _builtins.str):
        """
        :param _builtins.str new_name: Specifies the name of the database after restoration.
        :param _builtins.str old_name: Specifies the name of the database before restoration.
        """
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @_builtins.property
    @pulumi.getter(name="newName")
    def new_name(self) -> _builtins.str:
        """
        Specifies the name of the database after restoration.
        """
        return pulumi.get(self, "new_name")

    @_builtins.property
    @pulumi.getter(name="oldName")
    def old_name(self) -> _builtins.str:
        """
        Specifies the name of the database before restoration.
        """
        return pulumi.get(self, "old_name")


@pulumi.output_type
class PgHbaHostBasedAuthentication(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 database: _builtins.str,
                 method: _builtins.str,
                 type: _builtins.str,
                 user: _builtins.str,
                 mask: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Specifies the client IP address.
               + **0.0.0.0/0** indicates that the user can access the database from any IP address.
        :param _builtins.str database: Specifies the database name other than **template0** and **template1**.
               + **all** indicates all databases of the DB instance.
               + Use commas (,) to separate multiple databases.
        :param _builtins.str method: Specifies the authentication mode. Value options: **reject**, **md5** and
               **scram-sha-256**.
        :param _builtins.str type: Specifies the connection type. Value options: **host**, **hostssl** and **hostnossl**.
        :param _builtins.str user: Specifies the name of a user other than **rdsAdmin**, **rdsMetric**, **rdsBackup**,
               **rdsRepl** and **rdsProxy**.
               + **all** indicates all database users of the DB instance.
               + Use commas (,) to separate multiple user names.
        :param _builtins.str mask: Specifies the subnet mask. It is mandatory when `address` does not contain mask.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user", user)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Specifies the client IP address.
        + **0.0.0.0/0** indicates that the user can access the database from any IP address.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Specifies the database name other than **template0** and **template1**.
        + **all** indicates all databases of the DB instance.
        + Use commas (,) to separate multiple databases.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter
    def method(self) -> _builtins.str:
        """
        Specifies the authentication mode. Value options: **reject**, **md5** and
        **scram-sha-256**.
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the connection type. Value options: **host**, **hostssl** and **hostnossl**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def user(self) -> _builtins.str:
        """
        Specifies the name of a user other than **rdsAdmin**, **rdsMetric**, **rdsBackup**,
        **rdsRepl** and **rdsProxy**.
        + **all** indicates all database users of the DB instance.
        + Use commas (,) to separate multiple user names.
        """
        return pulumi.get(self, "user")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> Optional[_builtins.str]:
        """
        Specifies the subnet mask. It is mandatory when `address` does not contain mask.
        """
        return pulumi.get(self, "mask")


@pulumi.output_type
class PgTableRestoreDatabase(dict):
    def __init__(__self__, *,
                 database: _builtins.str,
                 schemas: Sequence['outputs.PgTableRestoreDatabaseSchema']):
        """
        :param _builtins.str database: Specifies the name of the database.
        :param Sequence['PgTableRestoreDatabaseSchemaArgs'] schemas: Specifies a list of schemas within the database.
               The schemas structure is documented below.
               
               <a name="schemas_struct"></a>
               The `schemas` block supports:
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "schemas", schemas)

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Specifies the name of the database.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.PgTableRestoreDatabaseSchema']:
        """
        Specifies a list of schemas within the database.
        The schemas structure is documented below.

        <a name="schemas_struct"></a>
        The `schemas` block supports:
        """
        return pulumi.get(self, "schemas")


@pulumi.output_type
class PgTableRestoreDatabaseSchema(dict):
    def __init__(__self__, *,
                 schema: _builtins.str,
                 tables: Sequence['outputs.PgTableRestoreDatabaseSchemaTable']):
        """
        :param _builtins.str schema: Specifies the name of the schema.
        :param Sequence['PgTableRestoreDatabaseSchemaTableArgs'] tables: Specifies a list of tables to be restored.
               The tables structure is documented below.
               
               <a name="tables_struct"></a>
               The `tables` block supports:
        """
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "tables", tables)

    @_builtins.property
    @pulumi.getter
    def schema(self) -> _builtins.str:
        """
        Specifies the name of the schema.
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.PgTableRestoreDatabaseSchemaTable']:
        """
        Specifies a list of tables to be restored.
        The tables structure is documented below.

        <a name="tables_struct"></a>
        The `tables` block supports:
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class PgTableRestoreDatabaseSchemaTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PgTableRestoreDatabaseSchemaTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PgTableRestoreDatabaseSchemaTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PgTableRestoreDatabaseSchemaTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: _builtins.str,
                 old_name: _builtins.str):
        """
        :param _builtins.str new_name: Specifies the name of the table after restoration.
        :param _builtins.str old_name: Specifies the name of the table before restoration.
        """
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @_builtins.property
    @pulumi.getter(name="newName")
    def new_name(self) -> _builtins.str:
        """
        Specifies the name of the table after restoration.
        """
        return pulumi.get(self, "new_name")

    @_builtins.property
    @pulumi.getter(name="oldName")
    def old_name(self) -> _builtins.str:
        """
        Specifies the name of the table before restoration.
        """
        return pulumi.get(self, "old_name")


@pulumi.output_type
class ReadReplicaInstanceDb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReadReplicaInstanceDb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReadReplicaInstanceDb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReadReplicaInstanceDb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.int port: Specifies the database port.
               + The MySQL database port ranges from `1,024` to `65,535` (excluding `12,017` and `33,071`, which are occupied by
               the RDS system and cannot be used). The default value is `3,306`.
               + The PostgreSQL database port ranges from `2,100` to `9,500`. The default value is `5,432`.
               + The Microsoft SQL Server database port can be `1,433` or ranges from `2,100` to `9,500`, excluding `5,355` and
               `5,985`. The default value is `1,433`.
               
               <a name="Rds_volume"></a>
               The `volume` block supports:
        :param _builtins.str type: Specifies the volume type. It must same with the type of the primary instance.
               Its value can be any of the following and is case-sensitive:
               + **ULTRAHIGH**: SSD storage.
               + **LOCALSSD**: local SSD storage.
               + **CLOUDSSD**: cloud SSD storage. This storage type is supported only with general-purpose and dedicated DB
               instances.
               + **ESSD**: extreme SSD storage.
               
               Changing this parameter will create a new resource.
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Specifies the database port.
        + The MySQL database port ranges from `1,024` to `65,535` (excluding `12,017` and `33,071`, which are occupied by
        the RDS system and cannot be used). The default value is `3,306`.
        + The PostgreSQL database port ranges from `2,100` to `9,500`. The default value is `5,432`.
        + The Microsoft SQL Server database port can be `1,433` or ranges from `2,100` to `9,500`, excluding `5,355` and
        `5,985`. The default value is `1,433`.

        <a name="Rds_volume"></a>
        The `volume` block supports:
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the volume type. It must same with the type of the primary instance.
        Its value can be any of the following and is case-sensitive:
        + **ULTRAHIGH**: SSD storage.
        + **LOCALSSD**: local SSD storage.
        + **CLOUDSSD**: cloud SSD storage. This storage type is supported only with general-purpose and dedicated DB
        instances.
        + **ESSD**: extreme SSD storage.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ReadReplicaInstanceParameter(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the parameter name. Some of them needs the instance to be restarted
               to take effect.
        :param _builtins.str value: Specifies the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter name. Some of them needs the instance to be restarted
        to take effect.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ReadReplicaInstanceVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskEncryptionId":
            suggest = "disk_encryption_id"
        elif key == "limitSize":
            suggest = "limit_size"
        elif key == "triggerThreshold":
            suggest = "trigger_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReadReplicaInstanceVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReadReplicaInstanceVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReadReplicaInstanceVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 disk_encryption_id: Optional[_builtins.str] = None,
                 limit_size: Optional[_builtins.int] = None,
                 size: Optional[_builtins.int] = None,
                 trigger_threshold: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Specifies the volume type. It must same with the type of the primary instance.
               Its value can be any of the following and is case-sensitive:
               + **ULTRAHIGH**: SSD storage.
               + **LOCALSSD**: local SSD storage.
               + **CLOUDSSD**: cloud SSD storage. This storage type is supported only with general-purpose and dedicated DB
               instances.
               + **ESSD**: extreme SSD storage.
               
               Changing this parameter will create a new resource.
        :param _builtins.str disk_encryption_id: schema: Computed
        :param _builtins.int limit_size: Specifies the upper limit of automatic expansion of storage, in GB.
        :param _builtins.int size: Specifies the volume size. Its value range is from `40` GB to `4,000` GB. The value must
               be a multiple of 10 and greater than the original size.
        :param _builtins.int trigger_threshold: Specifies the threshold to trigger automatic expansion.  
               If the available storage drops to this threshold or `10` GB, the automatic expansion is triggered.
               The valid values are as follows:
               + **10**
               + **15**
               + **20**
               
               <a name="Rds_parameters"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "type", type)
        if disk_encryption_id is not None:
            pulumi.set(__self__, "disk_encryption_id", disk_encryption_id)
        if limit_size is not None:
            pulumi.set(__self__, "limit_size", limit_size)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if trigger_threshold is not None:
            pulumi.set(__self__, "trigger_threshold", trigger_threshold)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the volume type. It must same with the type of the primary instance.
        Its value can be any of the following and is case-sensitive:
        + **ULTRAHIGH**: SSD storage.
        + **LOCALSSD**: local SSD storage.
        + **CLOUDSSD**: cloud SSD storage. This storage type is supported only with general-purpose and dedicated DB
        instances.
        + **ESSD**: extreme SSD storage.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="diskEncryptionId")
    def disk_encryption_id(self) -> Optional[_builtins.str]:
        """
        schema: Computed
        """
        return pulumi.get(self, "disk_encryption_id")

    @_builtins.property
    @pulumi.getter(name="limitSize")
    def limit_size(self) -> Optional[_builtins.int]:
        """
        Specifies the upper limit of automatic expansion of storage, in GB.
        """
        return pulumi.get(self, "limit_size")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        """
        Specifies the volume size. Its value range is from `40` GB to `4,000` GB. The value must
        be a multiple of 10 and greater than the original size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="triggerThreshold")
    def trigger_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the threshold to trigger automatic expansion.  
        If the available storage drops to this threshold or `10` GB, the automatic expansion is triggered.
        The valid values are as follows:
        + **10**
        + **15**
        + **20**

        <a name="Rds_parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "trigger_threshold")


@pulumi.output_type
class RestoreReadReplicaDatabaseDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RestoreReadReplicaDatabaseDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RestoreReadReplicaDatabaseDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RestoreReadReplicaDatabaseDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: _builtins.str,
                 old_name: _builtins.str):
        """
        :param _builtins.str new_name: Specifies the name of the new database after the restoration.
        :param _builtins.str old_name: Specifies the name of the original database to be restored.
        """
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @_builtins.property
    @pulumi.getter(name="newName")
    def new_name(self) -> _builtins.str:
        """
        Specifies the name of the new database after the restoration.
        """
        return pulumi.get(self, "new_name")

    @_builtins.property
    @pulumi.getter(name="oldName")
    def old_name(self) -> _builtins.str:
        """
        Specifies the name of the original database to be restored.
        """
        return pulumi.get(self, "old_name")


@pulumi.output_type
class SqlserverDatabasePrivilegeUser(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 readonly: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Specifies the username of the database account.
        :param _builtins.bool readonly: Specifies the read-only permission. Value options:
               + **true**: indicates the read-only permission.
               + **false**: indicates the read and write permission.
               
               Defaults to **false**.
        """
        pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the username of the database account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        """
        Specifies the read-only permission. Value options:
        + **true**: indicates the read-only permission.
        + **false**: indicates the read and write permission.

        Defaults to **false**.
        """
        return pulumi.get(self, "readonly")


@pulumi.output_type
class GetAvailableFlavorsOptionalFlavorResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 group_type: _builtins.str,
                 is_ipv6_supported: _builtins.bool,
                 max_connection: _builtins.str,
                 max_volume_size: _builtins.str,
                 min_volume_size: _builtins.str,
                 qps: _builtins.str,
                 ram: _builtins.str,
                 spec_code: _builtins.str,
                 tps: _builtins.str,
                 type_code: _builtins.str,
                 vcpus: _builtins.str):
        """
        :param Mapping[str, _builtins.str] az_status: Indicates the az status.
        :param _builtins.str group_type: Indicates the performance specifications. Its value can be any of the following:
               + **normal**: general-enhanced
               + **normal2**: general-enhanced II
               + **armFlavors**: Kunpeng general-enhanced
               + **dedicicatenormal**: exclusive x86
               + **armlocalssd**: standard Kunpeng
               + **normallocalssd**: standard x86
               + **general**: general-purpose
               + **dedicated**: dedicated, which is only supported for cloud SSDs
               + **rapid**: dedicated, which is only supported for extreme SSDs
               + **bigmen**: Large-memory
        :param _builtins.bool is_ipv6_supported: Indicates whether supported ipv6.
        :param _builtins.str max_connection: Indicates the max connection.
        :param _builtins.str max_volume_size: Indicates the maximum disk capacity in GB.
        :param _builtins.str min_volume_size: Indicates the minimum disk capacity in GB.
        :param _builtins.str qps: Indicates the number of SQL statements executed by the database per second, including **insert**, **select**,
               **update**, **delete** and so on.
        :param _builtins.str ram: Indicates the memory size, in GB.
        :param _builtins.str spec_code: Indicates the resource specification code.
        :param _builtins.str tps: Indicates the number of transactions executed by the database per second, each containing 18 SQL statements.
        :param _builtins.str type_code: Indicates the resource type.
        :param _builtins.str vcpus: Indicates the CPU size.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "group_type", group_type)
        pulumi.set(__self__, "is_ipv6_supported", is_ipv6_supported)
        pulumi.set(__self__, "max_connection", max_connection)
        pulumi.set(__self__, "max_volume_size", max_volume_size)
        pulumi.set(__self__, "min_volume_size", min_volume_size)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "tps", tps)
        pulumi.set(__self__, "type_code", type_code)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the az status.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter(name="groupType")
    def group_type(self) -> _builtins.str:
        """
        Indicates the performance specifications. Its value can be any of the following:
        + **normal**: general-enhanced
        + **normal2**: general-enhanced II
        + **armFlavors**: Kunpeng general-enhanced
        + **dedicicatenormal**: exclusive x86
        + **armlocalssd**: standard Kunpeng
        + **normallocalssd**: standard x86
        + **general**: general-purpose
        + **dedicated**: dedicated, which is only supported for cloud SSDs
        + **rapid**: dedicated, which is only supported for extreme SSDs
        + **bigmen**: Large-memory
        """
        return pulumi.get(self, "group_type")

    @_builtins.property
    @pulumi.getter(name="isIpv6Supported")
    def is_ipv6_supported(self) -> _builtins.bool:
        """
        Indicates whether supported ipv6.
        """
        return pulumi.get(self, "is_ipv6_supported")

    @_builtins.property
    @pulumi.getter(name="maxConnection")
    def max_connection(self) -> _builtins.str:
        """
        Indicates the max connection.
        """
        return pulumi.get(self, "max_connection")

    @_builtins.property
    @pulumi.getter(name="maxVolumeSize")
    def max_volume_size(self) -> _builtins.str:
        """
        Indicates the maximum disk capacity in GB.
        """
        return pulumi.get(self, "max_volume_size")

    @_builtins.property
    @pulumi.getter(name="minVolumeSize")
    def min_volume_size(self) -> _builtins.str:
        """
        Indicates the minimum disk capacity in GB.
        """
        return pulumi.get(self, "min_volume_size")

    @_builtins.property
    @pulumi.getter
    def qps(self) -> _builtins.str:
        """
        Indicates the number of SQL statements executed by the database per second, including **insert**, **select**,
        **update**, **delete** and so on.
        """
        return pulumi.get(self, "qps")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.str:
        """
        Indicates the memory size, in GB.
        """
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        Indicates the resource specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def tps(self) -> _builtins.str:
        """
        Indicates the number of transactions executed by the database per second, each containing 18 SQL statements.
        """
        return pulumi.get(self, "tps")

    @_builtins.property
    @pulumi.getter(name="typeCode")
    def type_code(self) -> _builtins.str:
        """
        Indicates the resource type.
        """
        return pulumi.get(self, "type_code")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Indicates the CPU size.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetBackupDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 backup_file_name: _builtins.str,
                 backup_file_size: _builtins.int,
                 database_name: _builtins.str):
        """
        :param _builtins.str backup_file_name: Indicates the name of the backup file.
        :param _builtins.int backup_file_size: Indicates the size of the backup file, in bytes.
        :param _builtins.str database_name: Indicates the name of the database.
        """
        pulumi.set(__self__, "backup_file_name", backup_file_name)
        pulumi.set(__self__, "backup_file_size", backup_file_size)
        pulumi.set(__self__, "database_name", database_name)

    @_builtins.property
    @pulumi.getter(name="backupFileName")
    def backup_file_name(self) -> _builtins.str:
        """
        Indicates the name of the backup file.
        """
        return pulumi.get(self, "backup_file_name")

    @_builtins.property
    @pulumi.getter(name="backupFileSize")
    def backup_file_size(self) -> _builtins.int:
        """
        Indicates the size of the backup file, in bytes.
        """
        return pulumi.get(self, "backup_file_size")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        """
        Indicates the name of the database.
        """
        return pulumi.get(self, "database_name")


@pulumi.output_type
class GetBackupFilesFileResult(dict):
    def __init__(__self__, *,
                 database_name: _builtins.str,
                 download_link: _builtins.str,
                 link_expired_time: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str database_name: Indicates the name of the database.
        :param _builtins.str download_link: Indicates the link for downloading the backup file.
        :param _builtins.str link_expired_time: Indicates the link expiration time.
        :param _builtins.str name: Indicates the file name.
        :param _builtins.int size: Indicates the file size in KB.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "download_link", download_link)
        pulumi.set(__self__, "link_expired_time", link_expired_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        """
        Indicates the name of the database.
        """
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> _builtins.str:
        """
        Indicates the link for downloading the backup file.
        """
        return pulumi.get(self, "download_link")

    @_builtins.property
    @pulumi.getter(name="linkExpiredTime")
    def link_expired_time(self) -> _builtins.str:
        """
        Indicates the link expiration time.
        """
        return pulumi.get(self, "link_expired_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the file name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the file size in KB.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetBackupsBackupResult(dict):
    def __init__(__self__, *,
                 associated_with_ddm: _builtins.bool,
                 begin_time: _builtins.str,
                 databases: Sequence['outputs.GetBackupsBackupDatabaseResult'],
                 datastores: Sequence['outputs.GetBackupsBackupDatastoreResult'],
                 end_time: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.bool associated_with_ddm: Whether a DDM instance has been associated.
        :param _builtins.str begin_time: Start time in the "yyyy-mm-ddThh:mm:ssZ" format.
        :param Sequence['GetBackupsBackupDatabaseArgs'] databases: Database been backed up.
               The databases structure is documented below.
        :param Sequence['GetBackupsBackupDatastoreArgs'] datastores: The database information.
               The datastore structure is documented below.
        :param _builtins.str end_time: End time in the "yyyy-mm-ddThh:mm:ssZ" format.
        :param _builtins.str id: Backup ID.
        :param _builtins.str instance_id: Instance ID.
        :param _builtins.str name: Backup name.
        :param _builtins.int size: Backup size in KB.
        :param _builtins.str status: Backup status.  
               The options are as follows:
               + **BUILDING**: Backup in progress.
               + **COMPLETED**: Backup completed.
               + **FAILED**: Backup failed.
               + **DELETING**: Backup being deleted.
        :param _builtins.str type: DB engine.  
               The value can be **MySQL**, **PostgreSQL**, **SQLServer**, **MariaDB**.
        """
        pulumi.set(__self__, "associated_with_ddm", associated_with_ddm)
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="associatedWithDdm")
    def associated_with_ddm(self) -> _builtins.bool:
        """
        Whether a DDM instance has been associated.
        """
        return pulumi.get(self, "associated_with_ddm")

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        Start time in the "yyyy-mm-ddThh:mm:ssZ" format.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetBackupsBackupDatabaseResult']:
        """
        Database been backed up.
        The databases structure is documented below.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetBackupsBackupDatastoreResult']:
        """
        The database information.
        The datastore structure is documented below.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        End time in the "yyyy-mm-ddThh:mm:ssZ" format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Backup name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Backup size in KB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Backup status.  
        The options are as follows:
        + **BUILDING**: Backup in progress.
        + **COMPLETED**: Backup completed.
        + **FAILED**: Backup failed.
        + **DELETING**: Backup being deleted.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        DB engine.  
        The value can be **MySQL**, **PostgreSQL**, **SQLServer**, **MariaDB**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBackupsBackupDatabaseResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: Backup name.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Backup name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBackupsBackupDatastoreResult(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str type: DB engine.  
               The value can be **MySQL**, **PostgreSQL**, **SQLServer**, **MariaDB**.
        :param _builtins.str version: DB engine version.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        DB engine.  
        The value can be **MySQL**, **PostgreSQL**, **SQLServer**, **MariaDB**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        DB engine version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCrossRegionBackupInstancesBackupInstanceResult(dict):
    def __init__(__self__, *,
                 datastores: Sequence['outputs.GetCrossRegionBackupInstancesBackupInstanceDatastoreResult'],
                 destination_project_id: _builtins.str,
                 destination_region: _builtins.str,
                 id: _builtins.str,
                 keep_days: _builtins.int,
                 name: _builtins.str,
                 source_project_id: _builtins.str,
                 source_region: _builtins.str):
        """
        :param Sequence['GetCrossRegionBackupInstancesBackupInstanceDatastoreArgs'] datastores: Indicates the database information.
        :param _builtins.str destination_project_id: Specifies the project ID of the target backup region.
        :param _builtins.str destination_region: Specifies the region where the cross-region backup is located.
        :param _builtins.str id: Indicates the ID of the instance.
        :param _builtins.int keep_days: Specifies the number of days to retain cross-region backups.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.str source_project_id: Specifies the project ID of the source backup region.
        :param _builtins.str source_region: Specifies the source backup region.
        """
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_project_id", source_project_id)
        pulumi.set(__self__, "source_region", source_region)

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetCrossRegionBackupInstancesBackupInstanceDatastoreResult']:
        """
        Indicates the database information.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> _builtins.str:
        """
        Specifies the project ID of the target backup region.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        Specifies the region where the cross-region backup is located.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Specifies the number of days to retain cross-region backups.
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceProjectId")
    def source_project_id(self) -> _builtins.str:
        """
        Specifies the project ID of the source backup region.
        """
        return pulumi.get(self, "source_project_id")

    @_builtins.property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> _builtins.str:
        """
        Specifies the source backup region.
        """
        return pulumi.get(self, "source_region")


@pulumi.output_type
class GetCrossRegionBackupInstancesBackupInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str type: Indicates the database engine.
               Its value can be any of the following and is case-insensitive: **MySQL**, **PostgreSQL**, **SQLServer**, **MariaDB**.
        :param _builtins.str version: Indicates the database engine version.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the database engine.
        Its value can be any of the following and is case-insensitive: **MySQL**, **PostgreSQL**, **SQLServer**, **MariaDB**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database engine version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCrossRegionBackupsBackupResult(dict):
    def __init__(__self__, *,
                 associated_with_ddm: _builtins.bool,
                 begin_time: _builtins.str,
                 databases: Sequence['outputs.GetCrossRegionBackupsBackupDatabaseResult'],
                 datastores: Sequence['outputs.GetCrossRegionBackupsBackupDatastoreResult'],
                 end_time: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.bool associated_with_ddm: Indicates whether a DDM instance has been associated.
        :param _builtins.str begin_time: Specifies the start time for obtaining the cross-region backup list.
               The format is **yyyy-mm-ddThh:mm:ssZ**. This parameter must be used together with `end_time`.
        :param Sequence['GetCrossRegionBackupsBackupDatabaseArgs'] databases: Indicates the database to be backed up.
        :param Sequence['GetCrossRegionBackupsBackupDatastoreArgs'] datastores: Indicates the database information
        :param _builtins.str end_time: Specifies the end time for obtaining the cross-region backup list.
               The format is **yyyy-mm-ddThh:mm:ssZ**. The end time must be later than the start time.
               This parameter must be used together with `begin_time`.
        :param _builtins.str id: Indicates the ID of the cross-region backup.
        :param _builtins.str instance_id: Specifies the ID of the RDS instance.
        :param _builtins.str name: Specifies the name of the cross-region backup.
        :param _builtins.int size: Indicates the backup size in KB.
        :param _builtins.str status: Specifies the status of the cross-region backup.
               Value options:
               + **BUILDING**: Backup in progress
               + **COMPLETED**: Backup completed
               + **FAILED**: Backup failed
               + **DELETING**: Backup being deleted
        :param _builtins.str type: Indicates the database engine.
               Its value can be any of the following and is case-insensitive: **MySQL**, **PostgreSQL**, **SQLServer** and **MariaDB**.
        """
        pulumi.set(__self__, "associated_with_ddm", associated_with_ddm)
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="associatedWithDdm")
    def associated_with_ddm(self) -> _builtins.bool:
        """
        Indicates whether a DDM instance has been associated.
        """
        return pulumi.get(self, "associated_with_ddm")

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        Specifies the start time for obtaining the cross-region backup list.
        The format is **yyyy-mm-ddThh:mm:ssZ**. This parameter must be used together with `end_time`.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetCrossRegionBackupsBackupDatabaseResult']:
        """
        Indicates the database to be backed up.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetCrossRegionBackupsBackupDatastoreResult']:
        """
        Indicates the database information
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the end time for obtaining the cross-region backup list.
        The format is **yyyy-mm-ddThh:mm:ssZ**. The end time must be later than the start time.
        This parameter must be used together with `begin_time`.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the cross-region backup.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ID of the RDS instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the cross-region backup.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the backup size in KB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the cross-region backup.
        Value options:
        + **BUILDING**: Backup in progress
        + **COMPLETED**: Backup completed
        + **FAILED**: Backup failed
        + **DELETING**: Backup being deleted
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the database engine.
        Its value can be any of the following and is case-insensitive: **MySQL**, **PostgreSQL**, **SQLServer** and **MariaDB**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCrossRegionBackupsBackupDatabaseResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: Specifies the name of the cross-region backup.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the cross-region backup.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCrossRegionBackupsBackupDatastoreResult(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str type: Indicates the database engine.
               Its value can be any of the following and is case-insensitive: **MySQL**, **PostgreSQL**, **SQLServer** and **MariaDB**.
        :param _builtins.str version: Indicates the database engine version.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the database engine.
        Its value can be any of the following and is case-insensitive: **MySQL**, **PostgreSQL**, **SQLServer** and **MariaDB**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database engine version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCrossRegionRestoreTimeRangesRestoreTimeResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.int,
                 start_time: _builtins.int):
        """
        :param _builtins.int end_time: Indicates the end time of the restoration time range in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC.
        :param _builtins.int start_time: Indicates the start time of the restoration time range in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time of the restoration time range in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time of the restoration time range in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetDiagnosisDiagnosisResult(dict):
    def __init__(__self__, *,
                 count: _builtins.int,
                 name: _builtins.str):
        """
        :param _builtins.int count: Indicates the number of instances.
        :param _builtins.str name: Indicates the diagnosis item.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        Indicates the number of instances.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the diagnosis item.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDiagnosisInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: Indicates the ID of the affected instance.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the affected instance.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDrInstancesInstanceDrRelationResult(dict):
    def __init__(__self__, *,
                 instance_id: _builtins.str,
                 master_instances: Sequence['outputs.GetDrInstancesInstanceDrRelationMasterInstanceResult'],
                 slave_instances: Sequence['outputs.GetDrInstancesInstanceDrRelationSlaveInstanceResult']):
        """
        :param _builtins.str instance_id: Indicates the instance ID.
        :param Sequence['GetDrInstancesInstanceDrRelationMasterInstanceArgs'] master_instances: Indicates the master instance information.
        :param Sequence['GetDrInstancesInstanceDrRelationSlaveInstanceArgs'] slave_instances: Indicates the DR instance information list.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "master_instances", master_instances)
        pulumi.set(__self__, "slave_instances", slave_instances)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="masterInstances")
    def master_instances(self) -> Sequence['outputs.GetDrInstancesInstanceDrRelationMasterInstanceResult']:
        """
        Indicates the master instance information.
        """
        return pulumi.get(self, "master_instances")

    @_builtins.property
    @pulumi.getter(name="slaveInstances")
    def slave_instances(self) -> Sequence['outputs.GetDrInstancesInstanceDrRelationSlaveInstanceResult']:
        """
        Indicates the DR instance information list.
        """
        return pulumi.get(self, "slave_instances")


@pulumi.output_type
class GetDrInstancesInstanceDrRelationMasterInstanceResult(dict):
    def __init__(__self__, *,
                 instance_id: _builtins.str,
                 project_id: _builtins.str,
                 project_name: _builtins.str,
                 region: _builtins.str):
        """
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str project_id: Indicates the project ID.
        :param _builtins.str project_name: Indicates the project name.
        :param _builtins.str region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> _builtins.str:
        """
        Indicates the project name.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region in which to query the resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetDrInstancesInstanceDrRelationSlaveInstanceResult(dict):
    def __init__(__self__, *,
                 instance_id: _builtins.str,
                 project_id: _builtins.str,
                 project_name: _builtins.str,
                 region: _builtins.str):
        """
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str project_id: Indicates the project ID.
        :param _builtins.str project_name: Indicates the project name.
        :param _builtins.str region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> _builtins.str:
        """
        Indicates the project name.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region in which to query the resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetDrRelationshipsInstanceDrInfoResult(dict):
    def __init__(__self__, *,
                 build_process: _builtins.str,
                 failed_message: _builtins.str,
                 id: _builtins.str,
                 master_instance_id: _builtins.str,
                 master_region: _builtins.str,
                 replica_state: _builtins.str,
                 slave_instance_id: _builtins.str,
                 slave_region: _builtins.str,
                 status: _builtins.str,
                 time: _builtins.int,
                 wal_receive_replay_delay_in_ms: _builtins.str,
                 wal_write_receive_delay_in_mb: _builtins.str,
                 wal_write_replay_delay_in_mb: _builtins.str):
        """
        :param _builtins.str build_process: Indicates the process for configuring disaster recovery (DR). The value can be:
               + **master**: process of configuring DR capability for the primary instance.
               + **slave**: process of configuring DR for the DR instance.
        :param _builtins.str failed_message: Indicates the failure message.
        :param _builtins.str id: Indicates the DR relationship ID.
        :param _builtins.str master_instance_id: Specifies the primary instance ID.
        :param _builtins.str master_region: Specifies the region where the primary instance is located.
        :param _builtins.str replica_state: Indicates the synchronization status. The value can be:
               + **0**: indicates that the synchronization is normal.
               + **-1** indicates that the synchronization is abnormal.
        :param _builtins.str slave_instance_id: Specifies the DR instance ID.
        :param _builtins.str slave_region: Specifies the region where the DR instance is located.
        :param _builtins.str status: Specifies the DR configuration status.
        :param _builtins.int time: Indicates the DR configuration time.
        :param _builtins.str wal_receive_replay_delay_in_ms: Indicates the replay delay, in milliseconds, on the DR instance.
        :param _builtins.str wal_write_receive_delay_in_mb: Indicates the WAL send lag volume, in MB. It means the difference between the WAL Log
               Sequence Number (LSN) written by the primary instance and the WAL LSN received by the DR instance.
        :param _builtins.str wal_write_replay_delay_in_mb: Indicates the end-to-end delayed WAL size, in MB. It refers to the difference between
               the WAL LSN written by the primary instance and the WAL LSN replayed by the DR instance.
        """
        pulumi.set(__self__, "build_process", build_process)
        pulumi.set(__self__, "failed_message", failed_message)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "master_instance_id", master_instance_id)
        pulumi.set(__self__, "master_region", master_region)
        pulumi.set(__self__, "replica_state", replica_state)
        pulumi.set(__self__, "slave_instance_id", slave_instance_id)
        pulumi.set(__self__, "slave_region", slave_region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "wal_receive_replay_delay_in_ms", wal_receive_replay_delay_in_ms)
        pulumi.set(__self__, "wal_write_receive_delay_in_mb", wal_write_receive_delay_in_mb)
        pulumi.set(__self__, "wal_write_replay_delay_in_mb", wal_write_replay_delay_in_mb)

    @_builtins.property
    @pulumi.getter(name="buildProcess")
    def build_process(self) -> _builtins.str:
        """
        Indicates the process for configuring disaster recovery (DR). The value can be:
        + **master**: process of configuring DR capability for the primary instance.
        + **slave**: process of configuring DR for the DR instance.
        """
        return pulumi.get(self, "build_process")

    @_builtins.property
    @pulumi.getter(name="failedMessage")
    def failed_message(self) -> _builtins.str:
        """
        Indicates the failure message.
        """
        return pulumi.get(self, "failed_message")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the DR relationship ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="masterInstanceId")
    def master_instance_id(self) -> _builtins.str:
        """
        Specifies the primary instance ID.
        """
        return pulumi.get(self, "master_instance_id")

    @_builtins.property
    @pulumi.getter(name="masterRegion")
    def master_region(self) -> _builtins.str:
        """
        Specifies the region where the primary instance is located.
        """
        return pulumi.get(self, "master_region")

    @_builtins.property
    @pulumi.getter(name="replicaState")
    def replica_state(self) -> _builtins.str:
        """
        Indicates the synchronization status. The value can be:
        + **0**: indicates that the synchronization is normal.
        + **-1** indicates that the synchronization is abnormal.
        """
        return pulumi.get(self, "replica_state")

    @_builtins.property
    @pulumi.getter(name="slaveInstanceId")
    def slave_instance_id(self) -> _builtins.str:
        """
        Specifies the DR instance ID.
        """
        return pulumi.get(self, "slave_instance_id")

    @_builtins.property
    @pulumi.getter(name="slaveRegion")
    def slave_region(self) -> _builtins.str:
        """
        Specifies the region where the DR instance is located.
        """
        return pulumi.get(self, "slave_region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the DR configuration status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        Indicates the DR configuration time.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="walReceiveReplayDelayInMs")
    def wal_receive_replay_delay_in_ms(self) -> _builtins.str:
        """
        Indicates the replay delay, in milliseconds, on the DR instance.
        """
        return pulumi.get(self, "wal_receive_replay_delay_in_ms")

    @_builtins.property
    @pulumi.getter(name="walWriteReceiveDelayInMb")
    def wal_write_receive_delay_in_mb(self) -> _builtins.str:
        """
        Indicates the WAL send lag volume, in MB. It means the difference between the WAL Log
        Sequence Number (LSN) written by the primary instance and the WAL LSN received by the DR instance.
        """
        return pulumi.get(self, "wal_write_receive_delay_in_mb")

    @_builtins.property
    @pulumi.getter(name="walWriteReplayDelayInMb")
    def wal_write_replay_delay_in_mb(self) -> _builtins.str:
        """
        Indicates the end-to-end delayed WAL size, in MB. It refers to the difference between
        the WAL LSN written by the primary instance and the WAL LSN replayed by the DR instance.
        """
        return pulumi.get(self, "wal_write_replay_delay_in_mb")


@pulumi.output_type
class GetEngineVersionsVersionResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: Indicates the version ID.
        :param _builtins.str name: Indicates the version name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the version ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the version name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetErrorLogsErrorLogResult(dict):
    def __init__(__self__, *,
                 content: _builtins.str,
                 level: _builtins.str,
                 time: _builtins.str):
        """
        :param _builtins.str content: Indicates the error log content.
        :param _builtins.str level: Specifies the log level. Value options: **ALL**, **INFO**, **LOG**, **WARNING**,
               **ERROR**, **FATAL**, **PANIC**, **NOTE**. Defaults to **ALL**.
        :param _builtins.str time: Indicates the date and time of the error log in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Indicates the error log content.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        Specifies the log level. Value options: **ALL**, **INFO**, **LOG**, **WARNING**,
        **ERROR**, **FATAL**, **PANIC**, **NOTE**. Defaults to **ALL**.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        Indicates the date and time of the error log in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetExtendLogFilesFileResult(dict):
    def __init__(__self__, *,
                 file_name: _builtins.str,
                 file_size: _builtins.str):
        """
        :param _builtins.str file_name: Indicates the file Name.
        :param _builtins.str file_size: Indicates the file size. Unit: KB.
        """
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_size", file_size)

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        Indicates the file Name.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> _builtins.str:
        """
        Indicates the file size. Unit: KB.
        """
        return pulumi.get(self, "file_size")


@pulumi.output_type
class GetExtendLogLinksLinkResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 file_link: _builtins.str,
                 file_name: _builtins.str,
                 file_size: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: Indicates the creation time.
        :param _builtins.str file_link: Indicates the download link.
        :param _builtins.str file_name: Specifies the name of the file to be downloaded.
        :param _builtins.str file_size: Indicates the file size in KB.
        :param _builtins.str status: Indicates the status of the link. The value can be one of the following:
               + **SUCCESS**: The download link has been generated.
               + **EXPORTING**: The file is being generated.
               + **FAILED**: The log file fails to be prepared.
        :param _builtins.str updated_at: Indicates the last update time.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "file_link", file_link)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_size", file_size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="fileLink")
    def file_link(self) -> _builtins.str:
        """
        Indicates the download link.
        """
        return pulumi.get(self, "file_link")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        Specifies the name of the file to be downloaded.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> _builtins.str:
        """
        Indicates the file size in KB.
        """
        return pulumi.get(self, "file_size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of the link. The value can be one of the following:
        + **SUCCESS**: The download link has been generated.
        + **EXPORTING**: The file is being generated.
        + **FAILED**: The log file fails to be prepared.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the last update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[_builtins.str],
                 az_status: Mapping[str, _builtins.str],
                 db_versions: Sequence[_builtins.str],
                 group_type: _builtins.str,
                 id: _builtins.str,
                 instance_mode: _builtins.str,
                 memory: _builtins.int,
                 mode: _builtins.str,
                 name: _builtins.str,
                 vcpus: _builtins.int):
        """
        :param Sequence[_builtins.str] availability_zones: Indicates the availability zones which the RDS flavor belongs to.
        :param Mapping[str, _builtins.str] az_status: Indicates the specification status in an AZ.~~
        :param Sequence[_builtins.str] db_versions: Indicates the Available versions of the database.
        :param _builtins.str group_type: Specifies the performance specification, the valid values are as follows:
               + **normal**: General enhanced.
               + **normal2**: General enhanced type II.
               + **armFlavors**: KunPeng general enhancement.
               + **dedicatedNormal**: (dedicatedNormalLocalssd): Dedicated for x86.
               + **armLocalssd**: KunPeng general type.
               + **normalLocalssd**: x86 general type.
               + **general**: General type.
               + **dedicated**:
               For MySQL engine: Dedicated type.
               For PostgreSQL and SQL Server engines: Dedicated type, only supported by cloud disk SSD.
               + **rapid**:
               For MySQL engine: Dedicated (discontinued).
               For PostgreSQL and SQL Server engines: Dedicated, only supported by ultra-fast SSDs.
               + **bigmem**: Large memory type.
               + **yunyao**: Flexus RDS type.
        :param _builtins.str id: Indicates the ID of the rds flavor.
        :param _builtins.str instance_mode: Specifies the mode of instance. Value options:
               + **ha**: indicates primary/standby instance
               + **single**: indicates single instance
               + **replica**: indicates read replicas
        :param _builtins.int memory: Specifies the memory size(GB) in the RDS flavor.
        :param _builtins.str name: Indicates the name of the rds flavor.
        :param _builtins.int vcpus: Specifies the number of vCPUs in the RDS flavor.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "db_versions", db_versions)
        pulumi.set(__self__, "group_type", group_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_mode", instance_mode)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the availability zones which the RDS flavor belongs to.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the specification status in an AZ.~~
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter(name="dbVersions")
    def db_versions(self) -> Sequence[_builtins.str]:
        """
        Indicates the Available versions of the database.
        """
        return pulumi.get(self, "db_versions")

    @_builtins.property
    @pulumi.getter(name="groupType")
    def group_type(self) -> _builtins.str:
        """
        Specifies the performance specification, the valid values are as follows:
        + **normal**: General enhanced.
        + **normal2**: General enhanced type II.
        + **armFlavors**: KunPeng general enhancement.
        + **dedicatedNormal**: (dedicatedNormalLocalssd): Dedicated for x86.
        + **armLocalssd**: KunPeng general type.
        + **normalLocalssd**: x86 general type.
        + **general**: General type.
        + **dedicated**:
        For MySQL engine: Dedicated type.
        For PostgreSQL and SQL Server engines: Dedicated type, only supported by cloud disk SSD.
        + **rapid**:
        For MySQL engine: Dedicated (discontinued).
        For PostgreSQL and SQL Server engines: Dedicated, only supported by ultra-fast SSDs.
        + **bigmem**: Large memory type.
        + **yunyao**: Flexus RDS type.
        """
        return pulumi.get(self, "group_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the rds flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> _builtins.str:
        """
        Specifies the mode of instance. Value options:
        + **ha**: indicates primary/standby instance
        + **single**: indicates single instance
        + **replica**: indicates read replicas
        """
        return pulumi.get(self, "instance_mode")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        Specifies the memory size(GB) in the RDS flavor.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""use instance_mode instead""")
    def mode(self) -> _builtins.str:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the rds flavor.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        Specifies the number of vCPUs in the RDS flavor.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetFlavorsV3FlavorResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[_builtins.str],
                 az_status: Mapping[str, _builtins.str],
                 db_versions: Sequence[_builtins.str],
                 group_type: _builtins.str,
                 id: _builtins.str,
                 instance_mode: _builtins.str,
                 memory: _builtins.int,
                 mode: _builtins.str,
                 name: _builtins.str,
                 vcpus: _builtins.int):
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "db_versions", db_versions)
        pulumi.set(__self__, "group_type", group_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_mode", instance_mode)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter(name="dbVersions")
    def db_versions(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "db_versions")

    @_builtins.property
    @pulumi.getter(name="groupType")
    def group_type(self) -> _builtins.str:
        return pulumi.get(self, "group_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> _builtins.str:
        return pulumi.get(self, "instance_mode")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""use instance_mode instead""")
    def mode(self) -> _builtins.str:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstanceConfigurationsConfigurationParameterResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str,
                 readonly: _builtins.bool,
                 restart_required: _builtins.bool,
                 type: _builtins.str,
                 value: _builtins.str,
                 value_range: _builtins.str):
        """
        :param _builtins.str description: Indicates the description of the configuration parameter.
        :param _builtins.str name: Indicates the name of the configuration parameter.
        :param _builtins.bool readonly: Indicates whether the parameter is read-only. Value can be:
               + **true**: Indicates the permission is read-only.
               + **false**: Indicates the permission is read/write.
        :param _builtins.bool restart_required: Indicates whether a restart is required for the parameter to take effect. Value can be:
               + **true**: Indicates that the instance must be restarted for the change to apply.
               + **false**: Indicates that the change takes effect immediately without restart.
        :param _builtins.str type: Indicates the data type of the configuration parameter.
        :param _builtins.str value: Indicates the current value of the configuration parameter.
        :param _builtins.str value_range: Indicates the allowed value range for the parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)
        pulumi.set(__self__, "restart_required", restart_required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the configuration parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the configuration parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        Indicates whether the parameter is read-only. Value can be:
        + **true**: Indicates the permission is read-only.
        + **false**: Indicates the permission is read/write.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> _builtins.bool:
        """
        Indicates whether a restart is required for the parameter to take effect. Value can be:
        + **true**: Indicates that the instance must be restarted for the change to apply.
        + **false**: Indicates that the change takes effect immediately without restart.
        """
        return pulumi.get(self, "restart_required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the data type of the configuration parameter.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the current value of the configuration parameter.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> _builtins.str:
        """
        Indicates the allowed value range for the parameter.
        """
        return pulumi.get(self, "value_range")


@pulumi.output_type
class GetInstanceParametersHistoriesHistoryResult(dict):
    def __init__(__self__, *,
                 applied: _builtins.bool,
                 apply_time: _builtins.str,
                 new_value: _builtins.str,
                 old_value: _builtins.str,
                 parameter_name: _builtins.str,
                 update_result: _builtins.str,
                 update_time: _builtins.str):
        """
        :param _builtins.bool applied: Indicates whether the new value will be applied to the instance.
        :param _builtins.str apply_time: Indicates the end time in the **yyyy-mm-ddThh:mm:ssZ** format. The default value
               is the current time. T is the separator between the calendar and the hourly notation of time.
               Z indicates the time zone offset. For example, in the Beijing time zone, the time zone offset is
               shown as +0800.
        :param _builtins.str new_value: Indicates the parameter value after the change.
        :param _builtins.str old_value: Indicates the parameter value before the change.
        :param _builtins.str parameter_name: Indicates the name of the parameter.
        :param _builtins.str update_result: Indicates the result of the change operation.
               Value can be as follows:
               + **SUCCESS**: Indicates the parameter change succeeded.
               + **FAILED**: Indicates the parameter change failed.
        :param _builtins.str update_time: Indicates the start time in the **yyyy-mm-ddThh:mm:ssZ** format. The default value
               is seven days before the current time. T is the separator between the calendar and the hourly
               notation of time. Z indicates the time zone offset. For example, in the Beijing time zone, the
               time zone offset is shown as +0800.
        """
        pulumi.set(__self__, "applied", applied)
        pulumi.set(__self__, "apply_time", apply_time)
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "update_result", update_result)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter
    def applied(self) -> _builtins.bool:
        """
        Indicates whether the new value will be applied to the instance.
        """
        return pulumi.get(self, "applied")

    @_builtins.property
    @pulumi.getter(name="applyTime")
    def apply_time(self) -> _builtins.str:
        """
        Indicates the end time in the **yyyy-mm-ddThh:mm:ssZ** format. The default value
        is the current time. T is the separator between the calendar and the hourly notation of time.
        Z indicates the time zone offset. For example, in the Beijing time zone, the time zone offset is
        shown as +0800.
        """
        return pulumi.get(self, "apply_time")

    @_builtins.property
    @pulumi.getter(name="newValue")
    def new_value(self) -> _builtins.str:
        """
        Indicates the parameter value after the change.
        """
        return pulumi.get(self, "new_value")

    @_builtins.property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> _builtins.str:
        """
        Indicates the parameter value before the change.
        """
        return pulumi.get(self, "old_value")

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> _builtins.str:
        """
        Indicates the name of the parameter.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="updateResult")
    def update_result(self) -> _builtins.str:
        """
        Indicates the result of the change operation.
        Value can be as follows:
        + **SUCCESS**: Indicates the parameter change succeeded.
        + **FAILED**: Indicates the parameter change failed.
        """
        return pulumi.get(self, "update_result")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        Indicates the start time in the **yyyy-mm-ddThh:mm:ssZ** format. The default value
        is seven days before the current time. T is the separator between the calendar and the hourly
        notation of time. Z indicates the time zone offset. For example, in the Beijing time zone, the
        time zone offset is shown as +0800.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[_builtins.str],
                 backup_strategies: Sequence['outputs.GetInstancesInstanceBackupStrategyResult'],
                 created: _builtins.str,
                 dbs: Sequence['outputs.GetInstancesInstanceDbResult'],
                 enterprise_project_id: _builtins.str,
                 fixed_ip: _builtins.str,
                 flavor: _builtins.str,
                 ha_replication_mode: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 nodes: Sequence['outputs.GetInstancesInstanceNodeResult'],
                 param_group_id: _builtins.str,
                 private_ips: Sequence[_builtins.str],
                 public_ips: Sequence[_builtins.str],
                 region: _builtins.str,
                 security_group_id: _builtins.str,
                 ssl_enable: _builtins.bool,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 time_zone: _builtins.str,
                 type: _builtins.str,
                 volumes: Sequence['outputs.GetInstancesInstanceVolumeResult'],
                 vpc_id: _builtins.str):
        """
        :param Sequence[_builtins.str] availability_zones: Indicates the availability zone where the node resides.
        :param Sequence['GetInstancesInstanceBackupStrategyArgs'] backup_strategies: Indicates the advanced backup policy. Structure is documented below.
        :param _builtins.str created: Indicates the creation time.
        :param Sequence['GetInstancesInstanceDbArgs'] dbs: Indicates the database information. Structure is documented below.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project id.
        :param _builtins.str fixed_ip: Indicates the intranet floating IP address of the instance.
        :param _builtins.str flavor: Indicates the instance specifications.
        :param _builtins.str ha_replication_mode: Indicates the replication mode for the standby DB instance.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the instance.
        :param Sequence['GetInstancesInstanceNodeArgs'] nodes: Indicates the instance nodes information. Structure is documented below.
        :param _builtins.str param_group_id: Indicates the configuration ID.
        :param Sequence[_builtins.str] private_ips: Indicates the private ips in list.
        :param Sequence[_builtins.str] public_ips: Indicates the public ips in list.
        :param _builtins.str region: The region in which to obtain the instances. If omitted, the provider-level region will
               be used.
        :param _builtins.str security_group_id: Indicates the security group ID.
        :param _builtins.bool ssl_enable: Indicates whether to enable SSL.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str subnet_id: Specifies the network ID of a subnet.
        :param Mapping[str, _builtins.str] tags: Indicates the tags of the instance.
        :param _builtins.str time_zone: Indicates the time zone.
        :param _builtins.str type: Specifies the type of the instance. Valid values are **Single**, **Ha**, **Replica**,
               and **Enterprise**.
        :param Sequence['GetInstancesInstanceVolumeArgs'] volumes: Indicates the volume information. Structure is documented below.
        :param _builtins.str vpc_id: Specifies the VPC ID.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "backup_strategies", backup_strategies)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "dbs", dbs)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "fixed_ip", fixed_ip)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "ha_replication_mode", ha_replication_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "param_group_id", param_group_id)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "public_ips", public_ips)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "ssl_enable", ssl_enable)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="backupStrategies")
    def backup_strategies(self) -> Sequence['outputs.GetInstancesInstanceBackupStrategyResult']:
        """
        Indicates the advanced backup policy. Structure is documented below.
        """
        return pulumi.get(self, "backup_strategies")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def dbs(self) -> Sequence['outputs.GetInstancesInstanceDbResult']:
        """
        Indicates the database information. Structure is documented below.
        """
        return pulumi.get(self, "dbs")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project id.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> _builtins.str:
        """
        Indicates the intranet floating IP address of the instance.
        """
        return pulumi.get(self, "fixed_ip")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        Indicates the instance specifications.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="haReplicationMode")
    def ha_replication_mode(self) -> _builtins.str:
        """
        Indicates the replication mode for the standby DB instance.
        """
        return pulumi.get(self, "ha_replication_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetInstancesInstanceNodeResult']:
        """
        Indicates the instance nodes information. Structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="paramGroupId")
    def param_group_id(self) -> _builtins.str:
        """
        Indicates the configuration ID.
        """
        return pulumi.get(self, "param_group_id")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence[_builtins.str]:
        """
        Indicates the private ips in list.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Sequence[_builtins.str]:
        """
        Indicates the public ips in list.
        """
        return pulumi.get(self, "public_ips")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region in which to obtain the instances. If omitted, the provider-level region will
        be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        Indicates the security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> _builtins.bool:
        """
        Indicates whether to enable SSL.
        """
        return pulumi.get(self, "ssl_enable")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the network ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the tags of the instance.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        Indicates the time zone.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the instance. Valid values are **Single**, **Ha**, **Replica**,
        and **Enterprise**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetInstancesInstanceVolumeResult']:
        """
        Indicates the volume information. Structure is documented below.
        """
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstancesInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.int keep_days: Indicates the number of days to retain the generated.
        :param _builtins.str start_time: Indicates the backup time window.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Indicates the number of days to retain the generated.
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the backup time window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetInstancesInstanceDbResult(dict):
    def __init__(__self__, *,
                 port: _builtins.int,
                 type: _builtins.str,
                 user_name: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.int port: Indicates the database port.
        :param _builtins.str type: Specifies the type of the instance. Valid values are **Single**, **Ha**, **Replica**,
               and **Enterprise**.
        :param _builtins.str user_name: Indicates the database user name.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Indicates the database port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the instance. Valid values are **Single**, **Ha**, **Replica**,
        and **Enterprise**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Indicates the database user name.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInstancesInstanceNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 role: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.str role: Indicates the node type.
        :param _builtins.str status: Indicates the node status.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstancesInstanceVolumeResult(dict):
    def __init__(__self__, *,
                 disk_encryption_id: _builtins.str,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str disk_encryption_id: Indicates the kms key id.
        :param _builtins.int size: Indicates the volume size.
        :param _builtins.str type: Specifies the type of the instance. Valid values are **Single**, **Ha**, **Replica**,
               and **Enterprise**.
        """
        pulumi.set(__self__, "disk_encryption_id", disk_encryption_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="diskEncryptionId")
    def disk_encryption_id(self) -> _builtins.str:
        """
        Indicates the kms key id.
        """
        return pulumi.get(self, "disk_encryption_id")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the volume size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the instance. Valid values are **Single**, **Ha**, **Replica**,
        and **Enterprise**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLtsConfigsInstanceLtsConfigResult(dict):
    def __init__(__self__, *,
                 instances: Sequence['outputs.GetLtsConfigsInstanceLtsConfigInstanceResult'],
                 lts_configs: Sequence['outputs.GetLtsConfigsInstanceLtsConfigLtsConfigResult']):
        """
        :param Sequence['GetLtsConfigsInstanceLtsConfigInstanceArgs'] instances: Indicates the detail of instance.
        :param Sequence['GetLtsConfigsInstanceLtsConfigLtsConfigArgs'] lts_configs: Indicates the list of log types and their LTS upload configuration.
        """
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "lts_configs", lts_configs)

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetLtsConfigsInstanceLtsConfigInstanceResult']:
        """
        Indicates the detail of instance.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="ltsConfigs")
    def lts_configs(self) -> Sequence['outputs.GetLtsConfigsInstanceLtsConfigLtsConfigResult']:
        """
        Indicates the list of log types and their LTS upload configuration.
        """
        return pulumi.get(self, "lts_configs")


@pulumi.output_type
class GetLtsConfigsInstanceLtsConfigInstanceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[_builtins.str],
                 engine_category: _builtins.str,
                 engine_name: _builtins.str,
                 engine_version: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str):
        """
        :param Sequence[_builtins.str] actions: Indicates the ongoing actions on the instance.
        :param _builtins.str engine_category: Indicates the category of the engine.
        :param _builtins.str engine_name: Indicates the engine name.
        :param _builtins.str engine_version: Indicates the version of the database engine.
        :param _builtins.str enterprise_project_id: Specifies the project ID.
        :param _builtins.str id: Indicates the ID of the RDS instance.
        :param _builtins.str name: Indicates the name of the RDS instance.
        :param _builtins.str status: Indicates the current status of the instance.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "engine_category", engine_category)
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence[_builtins.str]:
        """
        Indicates the ongoing actions on the instance.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="engineCategory")
    def engine_category(self) -> _builtins.str:
        """
        Indicates the category of the engine.
        """
        return pulumi.get(self, "engine_category")

    @_builtins.property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> _builtins.str:
        """
        Indicates the engine name.
        """
        return pulumi.get(self, "engine_name")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Indicates the version of the database engine.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the RDS instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the RDS instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the current status of the instance.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLtsConfigsInstanceLtsConfigLtsConfigResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 log_type: _builtins.str,
                 lts_group_id: _builtins.str,
                 lts_stream_id: _builtins.str):
        """
        :param _builtins.bool enabled: Indicates whether logs of this type are uploaded to LTS.
        :param _builtins.str log_type: Indicates the type of log.
        :param _builtins.str lts_group_id: Indicates the log group ID associated with LTS.
        :param _builtins.str lts_stream_id: Indicates the log stream ID associated with LTS.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "lts_group_id", lts_group_id)
        pulumi.set(__self__, "lts_stream_id", lts_stream_id)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Indicates whether logs of this type are uploaded to LTS.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="logType")
    def log_type(self) -> _builtins.str:
        """
        Indicates the type of log.
        """
        return pulumi.get(self, "log_type")

    @_builtins.property
    @pulumi.getter(name="ltsGroupId")
    def lts_group_id(self) -> _builtins.str:
        """
        Indicates the log group ID associated with LTS.
        """
        return pulumi.get(self, "lts_group_id")

    @_builtins.property
    @pulumi.getter(name="ltsStreamId")
    def lts_stream_id(self) -> _builtins.str:
        """
        Indicates the log stream ID associated with LTS.
        """
        return pulumi.get(self, "lts_stream_id")


@pulumi.output_type
class GetMysqlAccountsUserResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 hosts: Sequence[_builtins.str],
                 name: _builtins.str):
        """
        :param _builtins.str description: Indicates remarks of the database account.
        :param Sequence[_builtins.str] hosts: Indicates the IP addresses that are allowed to access your DB instance.
        :param _builtins.str name: Specifies the username of the DB account.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates remarks of the database account.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence[_builtins.str]:
        """
        Indicates the IP addresses that are allowed to access your DB instance.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the username of the DB account.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMysqlAuthorizedDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 readonly: _builtins.bool):
        """
        :param _builtins.str name: Indicates the name of the authorized database.
        :param _builtins.bool readonly: Indicates whether the permission is read-only. Value can be:
               + **true**: Indicates the permission is read-only.
               + **false**: Indicates the permission is read/write.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the authorized database.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        Indicates whether the permission is read-only. Value can be:
        + **true**: Indicates the permission is read-only.
        + **false**: Indicates the permission is read/write.
        """
        return pulumi.get(self, "readonly")


@pulumi.output_type
class GetMysqlDatabasePrivilegesUserResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 readonly: _builtins.bool):
        """
        :param _builtins.str name: The username of the database account.
        :param _builtins.bool readonly: Specifies whether the database permission is **read-only**. Values option:
               + **true**: indicates the database is read-only.
               + **false**: indicates the database is readable and writable.
               
               Defaults to **false**.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The username of the database account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        Specifies whether the database permission is **read-only**. Values option:
        + **true**: indicates the database is read-only.
        + **false**: indicates the database is readable and writable.

        Defaults to **false**.
        """
        return pulumi.get(self, "readonly")


@pulumi.output_type
class GetMysqlDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 character_set: _builtins.str,
                 description: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str character_set: Specifies the character set used by the database.
        :param _builtins.str description: Indicates the database description.
        :param _builtins.str name: Specifies the database name.
        """
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> _builtins.str:
        """
        Specifies the character set used by the database.
        """
        return pulumi.get(self, "character_set")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the database description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMysqlProxiesProxyListResult(dict):
    def __init__(__self__, *,
                 master_instances: Sequence['outputs.GetMysqlProxiesProxyListMasterInstanceResult'],
                 proxies: Sequence['outputs.GetMysqlProxiesProxyListProxyResult'],
                 proxy_security_group_check_result: _builtins.bool,
                 readonly_instances: Sequence['outputs.GetMysqlProxiesProxyListReadonlyInstanceResult']):
        """
        :param Sequence['GetMysqlProxiesProxyListMasterInstanceArgs'] master_instances: Indicates the master instance information.
        :param Sequence['GetMysqlProxiesProxyListProxyArgs'] proxies: Indicates the proxy information.
        :param _builtins.bool proxy_security_group_check_result: Indicates whether the security group allows access from the database proxy
               to the database.
        :param Sequence['GetMysqlProxiesProxyListReadonlyInstanceArgs'] readonly_instances: Indicates the read-only instance information.
        """
        pulumi.set(__self__, "master_instances", master_instances)
        pulumi.set(__self__, "proxies", proxies)
        pulumi.set(__self__, "proxy_security_group_check_result", proxy_security_group_check_result)
        pulumi.set(__self__, "readonly_instances", readonly_instances)

    @_builtins.property
    @pulumi.getter(name="masterInstances")
    def master_instances(self) -> Sequence['outputs.GetMysqlProxiesProxyListMasterInstanceResult']:
        """
        Indicates the master instance information.
        """
        return pulumi.get(self, "master_instances")

    @_builtins.property
    @pulumi.getter
    def proxies(self) -> Sequence['outputs.GetMysqlProxiesProxyListProxyResult']:
        """
        Indicates the proxy information.
        """
        return pulumi.get(self, "proxies")

    @_builtins.property
    @pulumi.getter(name="proxySecurityGroupCheckResult")
    def proxy_security_group_check_result(self) -> _builtins.bool:
        """
        Indicates whether the security group allows access from the database proxy
        to the database.
        """
        return pulumi.get(self, "proxy_security_group_check_result")

    @_builtins.property
    @pulumi.getter(name="readonlyInstances")
    def readonly_instances(self) -> Sequence['outputs.GetMysqlProxiesProxyListReadonlyInstanceResult']:
        """
        Indicates the read-only instance information.
        """
        return pulumi.get(self, "readonly_instances")


@pulumi.output_type
class GetMysqlProxiesProxyListMasterInstanceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str id: Indicates the instance ID.
        :param _builtins.int weight: Indicates the read weight of the instance.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Indicates the read weight of the instance.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetMysqlProxiesProxyListProxyResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 alt_flag: _builtins.bool,
                 connection_pool_type: _builtins.str,
                 delay_threshold_in_seconds: _builtins.int,
                 dns_name: _builtins.str,
                 flavor_infos: Sequence['outputs.GetMysqlProxiesProxyListProxyFlavorInfoResult'],
                 force_read_only: _builtins.bool,
                 id: _builtins.str,
                 memory: _builtins.str,
                 mode: _builtins.str,
                 name: _builtins.str,
                 node_num: _builtins.int,
                 nodes: Sequence['outputs.GetMysqlProxiesProxyListProxyNodeResult'],
                 pay_mode: _builtins.str,
                 port: _builtins.int,
                 proxy_mode: _builtins.str,
                 route_mode: _builtins.int,
                 seconds_level_monitor_fun_status: _builtins.str,
                 ssl_option: _builtins.bool,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 support_balance_route_mode: _builtins.bool,
                 support_proxy_ssl: _builtins.bool,
                 support_switch_connection_pool_type: _builtins.bool,
                 support_transaction_split: _builtins.bool,
                 transaction_split: _builtins.str,
                 vcpus: _builtins.str):
        """
        :param _builtins.str address: Indicates the proxy address.
        :param _builtins.bool alt_flag: Indicates the ALT switch status.
        :param _builtins.str connection_pool_type: Indicates the connection pool type.
               The value can be:
               + **CLOSED**: The connection pool is closed.
               + **SESSION**: The session-level connection pool is enabled.
        :param _builtins.int delay_threshold_in_seconds: Indicates the delay threshold, in seconds.
        :param _builtins.str dns_name: Indicates the private domain name for the read/write splitting address of the proxy.
        :param Sequence['GetMysqlProxiesProxyListProxyFlavorInfoArgs'] flavor_infos: Indicates the proxy specifications.
        :param _builtins.bool force_read_only: Indicates whether to forcibly read the route to the read-only mode.
        :param _builtins.str id: Indicates the instance ID.
        :param _builtins.str memory: Indicates the memory size of the proxy.
        :param _builtins.str mode: Indicates the cluster mode of the proxy.
               The value can be: **Cluster**, **Ha**.
        :param _builtins.str name: Indicates the proxy name.
        :param _builtins.int node_num: Indicates the number of proxy nodes.
        :param Sequence['GetMysqlProxiesProxyListProxyNodeArgs'] nodes: Indicates the list of proxy nodes.
        :param _builtins.str pay_mode: Indicates the charging mode of the proxy.
               The value can be:
               + **0**: pay-per-use billing.
               + **1**: yearly/monthly billing.
        :param _builtins.int port: Indicates the port number.
        :param _builtins.str proxy_mode: Indicates the Proxy read/write Mode.
               The value can be:
               + **readwrite(default value)**: read and write.
               + **readonly**: read-only.
        :param _builtins.int route_mode: Indicates the routing policy of the proxy.
               The values can be:
               + **0**: weighted load balancing.
               + **1**: load balancing (The primary node does not process read requests).
               + **2**: load balancing (The primary node processes read requests).
        :param _builtins.str seconds_level_monitor_fun_status: Indicates the second-level monitoring status of the proxy.
        :param _builtins.bool ssl_option: Indicates the SSL switch status.
        :param _builtins.str status: Indicates the status of the proxy node.
               The values can be:
               + **NORMAL**: The node is normal.
               + **ABNORMAL**: The node is abnormal.
               + **CREATING**: The node is being created.
               + **CREATEFAIL**: The node failed to be created.
        :param _builtins.str subnet_id: Indicates the ID of the subnet to which the database proxy belongs.
        :param _builtins.bool support_balance_route_mode: Indicates whether the proxy supports the load balancing routing mode.
        :param _builtins.bool support_proxy_ssl: Indicates whether the database proxy supports the SSL function.
        :param _builtins.bool support_switch_connection_pool_type: Indicates whether the proxy supports the switchover of the session
               connection pool type.
        :param _builtins.bool support_transaction_split: Indicates whether the proxy supports transaction splitting.
        :param _builtins.str transaction_split: Indicates the status of the proxy transaction splitting switch.
        :param _builtins.str vcpus: Indicates the CPU size of the proxy.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "alt_flag", alt_flag)
        pulumi.set(__self__, "connection_pool_type", connection_pool_type)
        pulumi.set(__self__, "delay_threshold_in_seconds", delay_threshold_in_seconds)
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "flavor_infos", flavor_infos)
        pulumi.set(__self__, "force_read_only", force_read_only)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proxy_mode", proxy_mode)
        pulumi.set(__self__, "route_mode", route_mode)
        pulumi.set(__self__, "seconds_level_monitor_fun_status", seconds_level_monitor_fun_status)
        pulumi.set(__self__, "ssl_option", ssl_option)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "support_balance_route_mode", support_balance_route_mode)
        pulumi.set(__self__, "support_proxy_ssl", support_proxy_ssl)
        pulumi.set(__self__, "support_switch_connection_pool_type", support_switch_connection_pool_type)
        pulumi.set(__self__, "support_transaction_split", support_transaction_split)
        pulumi.set(__self__, "transaction_split", transaction_split)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Indicates the proxy address.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="altFlag")
    def alt_flag(self) -> _builtins.bool:
        """
        Indicates the ALT switch status.
        """
        return pulumi.get(self, "alt_flag")

    @_builtins.property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> _builtins.str:
        """
        Indicates the connection pool type.
        The value can be:
        + **CLOSED**: The connection pool is closed.
        + **SESSION**: The session-level connection pool is enabled.
        """
        return pulumi.get(self, "connection_pool_type")

    @_builtins.property
    @pulumi.getter(name="delayThresholdInSeconds")
    def delay_threshold_in_seconds(self) -> _builtins.int:
        """
        Indicates the delay threshold, in seconds.
        """
        return pulumi.get(self, "delay_threshold_in_seconds")

    @_builtins.property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> _builtins.str:
        """
        Indicates the private domain name for the read/write splitting address of the proxy.
        """
        return pulumi.get(self, "dns_name")

    @_builtins.property
    @pulumi.getter(name="flavorInfos")
    def flavor_infos(self) -> Sequence['outputs.GetMysqlProxiesProxyListProxyFlavorInfoResult']:
        """
        Indicates the proxy specifications.
        """
        return pulumi.get(self, "flavor_infos")

    @_builtins.property
    @pulumi.getter(name="forceReadOnly")
    def force_read_only(self) -> _builtins.bool:
        """
        Indicates whether to forcibly read the route to the read-only mode.
        """
        return pulumi.get(self, "force_read_only")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Indicates the memory size of the proxy.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the cluster mode of the proxy.
        The value can be: **Cluster**, **Ha**.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the proxy name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> _builtins.int:
        """
        Indicates the number of proxy nodes.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetMysqlProxiesProxyListProxyNodeResult']:
        """
        Indicates the list of proxy nodes.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> _builtins.str:
        """
        Indicates the charging mode of the proxy.
        The value can be:
        + **0**: pay-per-use billing.
        + **1**: yearly/monthly billing.
        """
        return pulumi.get(self, "pay_mode")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Indicates the port number.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="proxyMode")
    def proxy_mode(self) -> _builtins.str:
        """
        Indicates the Proxy read/write Mode.
        The value can be:
        + **readwrite(default value)**: read and write.
        + **readonly**: read-only.
        """
        return pulumi.get(self, "proxy_mode")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> _builtins.int:
        """
        Indicates the routing policy of the proxy.
        The values can be:
        + **0**: weighted load balancing.
        + **1**: load balancing (The primary node does not process read requests).
        + **2**: load balancing (The primary node processes read requests).
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="secondsLevelMonitorFunStatus")
    def seconds_level_monitor_fun_status(self) -> _builtins.str:
        """
        Indicates the second-level monitoring status of the proxy.
        """
        return pulumi.get(self, "seconds_level_monitor_fun_status")

    @_builtins.property
    @pulumi.getter(name="sslOption")
    def ssl_option(self) -> _builtins.bool:
        """
        Indicates the SSL switch status.
        """
        return pulumi.get(self, "ssl_option")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of the proxy node.
        The values can be:
        + **NORMAL**: The node is normal.
        + **ABNORMAL**: The node is abnormal.
        + **CREATING**: The node is being created.
        + **CREATEFAIL**: The node failed to be created.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Indicates the ID of the subnet to which the database proxy belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="supportBalanceRouteMode")
    def support_balance_route_mode(self) -> _builtins.bool:
        """
        Indicates whether the proxy supports the load balancing routing mode.
        """
        return pulumi.get(self, "support_balance_route_mode")

    @_builtins.property
    @pulumi.getter(name="supportProxySsl")
    def support_proxy_ssl(self) -> _builtins.bool:
        """
        Indicates whether the database proxy supports the SSL function.
        """
        return pulumi.get(self, "support_proxy_ssl")

    @_builtins.property
    @pulumi.getter(name="supportSwitchConnectionPoolType")
    def support_switch_connection_pool_type(self) -> _builtins.bool:
        """
        Indicates whether the proxy supports the switchover of the session
        connection pool type.
        """
        return pulumi.get(self, "support_switch_connection_pool_type")

    @_builtins.property
    @pulumi.getter(name="supportTransactionSplit")
    def support_transaction_split(self) -> _builtins.bool:
        """
        Indicates whether the proxy supports transaction splitting.
        """
        return pulumi.get(self, "support_transaction_split")

    @_builtins.property
    @pulumi.getter(name="transactionSplit")
    def transaction_split(self) -> _builtins.str:
        """
        Indicates the status of the proxy transaction splitting switch.
        """
        return pulumi.get(self, "transaction_split")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Indicates the CPU size of the proxy.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetMysqlProxiesProxyListProxyFlavorInfoResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 group_type: _builtins.str):
        """
        :param _builtins.str code: Indicates the specification code.
        :param _builtins.str group_type: Indicates the flavor group type.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "group_type", group_type)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Indicates the specification code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="groupType")
    def group_type(self) -> _builtins.str:
        """
        Indicates the flavor group type.
        """
        return pulumi.get(self, "group_type")


@pulumi.output_type
class GetMysqlProxiesProxyListProxyNodeResult(dict):
    def __init__(__self__, *,
                 az_code: _builtins.str,
                 frozen_flag: _builtins.int,
                 id: _builtins.str,
                 role: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str az_code: Indicates the AZ where the proxy node is located.
        :param _builtins.int frozen_flag: Indicates whether the proxy node is frozen.
               The values can be:
               + **0**: unfrozen.
               + **1**: frozen.
        :param _builtins.str id: Indicates the instance ID.
        :param _builtins.str role: Indicates the role of the proxy node:
               The values can be:
               + **master**: primary node.
               + **slave**: standby node.
        :param _builtins.str status: Indicates the status of the proxy node.
               The values can be:
               + **NORMAL**: The node is normal.
               + **ABNORMAL**: The node is abnormal.
               + **CREATING**: The node is being created.
               + **CREATEFAIL**: The node failed to be created.
        """
        pulumi.set(__self__, "az_code", az_code)
        pulumi.set(__self__, "frozen_flag", frozen_flag)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="azCode")
    def az_code(self) -> _builtins.str:
        """
        Indicates the AZ where the proxy node is located.
        """
        return pulumi.get(self, "az_code")

    @_builtins.property
    @pulumi.getter(name="frozenFlag")
    def frozen_flag(self) -> _builtins.int:
        """
        Indicates whether the proxy node is frozen.
        The values can be:
        + **0**: unfrozen.
        + **1**: frozen.
        """
        return pulumi.get(self, "frozen_flag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Indicates the role of the proxy node:
        The values can be:
        + **master**: primary node.
        + **slave**: standby node.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of the proxy node.
        The values can be:
        + **NORMAL**: The node is normal.
        + **ABNORMAL**: The node is abnormal.
        + **CREATING**: The node is being created.
        + **CREATEFAIL**: The node failed to be created.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetMysqlProxiesProxyListReadonlyInstanceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str id: Indicates the instance ID.
        :param _builtins.int weight: Indicates the read weight of the instance.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Indicates the read weight of the instance.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetMysqlProxyFlavorsFlavorGroupResult(dict):
    def __init__(__self__, *,
                 flavors: Sequence['outputs.GetMysqlProxyFlavorsFlavorGroupFlavorResult'],
                 group_type: _builtins.str):
        """
        :param Sequence['GetMysqlProxyFlavorsFlavorGroupFlavorArgs'] flavors: Indicates the list of flavors.
        :param _builtins.str group_type: Indicates the specification group type. The value can be **ARM** or **X86**.
        """
        pulumi.set(__self__, "flavors", flavors)
        pulumi.set(__self__, "group_type", group_type)

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetMysqlProxyFlavorsFlavorGroupFlavorResult']:
        """
        Indicates the list of flavors.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter(name="groupType")
    def group_type(self) -> _builtins.str:
        """
        Indicates the specification group type. The value can be **ARM** or **X86**.
        """
        return pulumi.get(self, "group_type")


@pulumi.output_type
class GetMysqlProxyFlavorsFlavorGroupFlavorResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 code: _builtins.str,
                 db_type: _builtins.str,
                 id: _builtins.str,
                 memory: _builtins.str,
                 vcpus: _builtins.str):
        """
        :param Mapping[str, _builtins.str] az_status: Indicates the AZ information. **key** indicates the AZ associated with the specification, and **value**
               indicates the specification status in the AZ. Only the specification status in the AZ where the primary instance is
               located is displayed.
        :param _builtins.str code: Indicates the specification code of the database proxy.
        :param _builtins.str db_type: Indicates the database type.
        :param _builtins.str id: Indicates the specification ID of the database proxy.
        :param _builtins.str memory: Indicates the memory size in GB.
        :param _builtins.str vcpus: Indicates the number of vCPUs.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "db_type", db_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the AZ information. **key** indicates the AZ associated with the specification, and **value**
        indicates the specification status in the AZ. Only the specification status in the AZ where the primary instance is
        located is displayed.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Indicates the specification code of the database proxy.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="dbType")
    def db_type(self) -> _builtins.str:
        """
        Indicates the database type.
        """
        return pulumi.get(self, "db_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the specification ID of the database proxy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Indicates the memory size in GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Indicates the number of vCPUs.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetParametergroupsConfigurationResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 datastore_name: _builtins.str,
                 datastore_version_name: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str,
                 user_defined: _builtins.bool):
        """
        :param _builtins.str created_at: The creation time of the configuration.
        :param _builtins.str datastore_name: Specifies the database name.
        :param _builtins.str datastore_version_name: Specifies the database version name.
        :param _builtins.str description: The parameter template description.
        :param _builtins.str id: The parameter template ID.
        :param _builtins.str name: Specifies the parameter template name.
        :param _builtins.str updated_at: The latest update time of the configuration.
        :param _builtins.bool user_defined: Specifies whether the parameter template is created by users.
               The options are as follows:
               + **false**: The parameter template is a default parameter template.
               + **true**: The parameter template is a custom template.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "datastore_name", datastore_name)
        pulumi.set(__self__, "datastore_version_name", datastore_version_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_defined", user_defined)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the configuration.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> _builtins.str:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "datastore_name")

    @_builtins.property
    @pulumi.getter(name="datastoreVersionName")
    def datastore_version_name(self) -> _builtins.str:
        """
        Specifies the database version name.
        """
        return pulumi.get(self, "datastore_version_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The parameter template description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The parameter template ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the parameter template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the configuration.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userDefined")
    def user_defined(self) -> _builtins.bool:
        """
        Specifies whether the parameter template is created by users.
        The options are as follows:
        + **false**: The parameter template is a default parameter template.
        + **true**: The parameter template is a custom template.
        """
        return pulumi.get(self, "user_defined")


@pulumi.output_type
class GetPgAccountsUserResult(dict):
    def __init__(__self__, *,
                 attributes: Sequence['outputs.GetPgAccountsUserAttributeResult'],
                 description: _builtins.str,
                 memberofs: Sequence[_builtins.str],
                 name: _builtins.str):
        """
        :param Sequence['GetPgAccountsUserAttributeArgs'] attributes: Indicates the permission attributes of a user.
               The attributes structure is documented below.
        :param _builtins.str description: Indicates the remarks of the DB account.
        :param Sequence[_builtins.str] memberofs: Indicates the default rights of a user.
        :param _builtins.str name: Indicates the username of the DB account.
        """
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "memberofs", memberofs)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Sequence['outputs.GetPgAccountsUserAttributeResult']:
        """
        Indicates the permission attributes of a user.
        The attributes structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the remarks of the DB account.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def memberofs(self) -> Sequence[_builtins.str]:
        """
        Indicates the default rights of a user.
        """
        return pulumi.get(self, "memberofs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the username of the DB account.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPgAccountsUserAttributeResult(dict):
    def __init__(__self__, *,
                 rolbypassrls: _builtins.bool,
                 rolcanlogin: _builtins.bool,
                 rolconnlimit: _builtins.int,
                 rolcreatedb: _builtins.bool,
                 rolcreaterole: _builtins.bool,
                 rolinherit: _builtins.bool,
                 rolreplication: _builtins.bool,
                 rolsuper: _builtins.bool):
        """
        :param _builtins.bool rolbypassrls: Indicates whether a user bypasses each row-level security policy. The value can be **true** or **false**.
        :param _builtins.bool rolcanlogin: Indicates whether a user can log in to the database. The value can be **true** or **false**.
        :param _builtins.int rolconnlimit: Indicates the maximum number of concurrent connections to a DB instance. The value **-1** indicates
               that there are no limitations on the number of concurrent connections.
        :param _builtins.bool rolcreatedb: Indicates whether a user can create a database. The value can be **true** or **false**.
        :param _builtins.bool rolcreaterole: Indicates whether a user can create other sub-users. The value can be **true** or **false**.
        :param _builtins.bool rolinherit: Indicates whether a user automatically inherits the permissions of the role to which the user belongs.
               The value can be **true** or **false**.
        :param _builtins.bool rolreplication: Indicates whether the user is a replication role. The value can be **true** or **false**.
        :param _builtins.bool rolsuper: Indicates whether a user has the super user permission. The value is **false**.
        """
        pulumi.set(__self__, "rolbypassrls", rolbypassrls)
        pulumi.set(__self__, "rolcanlogin", rolcanlogin)
        pulumi.set(__self__, "rolconnlimit", rolconnlimit)
        pulumi.set(__self__, "rolcreatedb", rolcreatedb)
        pulumi.set(__self__, "rolcreaterole", rolcreaterole)
        pulumi.set(__self__, "rolinherit", rolinherit)
        pulumi.set(__self__, "rolreplication", rolreplication)
        pulumi.set(__self__, "rolsuper", rolsuper)

    @_builtins.property
    @pulumi.getter
    def rolbypassrls(self) -> _builtins.bool:
        """
        Indicates whether a user bypasses each row-level security policy. The value can be **true** or **false**.
        """
        return pulumi.get(self, "rolbypassrls")

    @_builtins.property
    @pulumi.getter
    def rolcanlogin(self) -> _builtins.bool:
        """
        Indicates whether a user can log in to the database. The value can be **true** or **false**.
        """
        return pulumi.get(self, "rolcanlogin")

    @_builtins.property
    @pulumi.getter
    def rolconnlimit(self) -> _builtins.int:
        """
        Indicates the maximum number of concurrent connections to a DB instance. The value **-1** indicates
        that there are no limitations on the number of concurrent connections.
        """
        return pulumi.get(self, "rolconnlimit")

    @_builtins.property
    @pulumi.getter
    def rolcreatedb(self) -> _builtins.bool:
        """
        Indicates whether a user can create a database. The value can be **true** or **false**.
        """
        return pulumi.get(self, "rolcreatedb")

    @_builtins.property
    @pulumi.getter
    def rolcreaterole(self) -> _builtins.bool:
        """
        Indicates whether a user can create other sub-users. The value can be **true** or **false**.
        """
        return pulumi.get(self, "rolcreaterole")

    @_builtins.property
    @pulumi.getter
    def rolinherit(self) -> _builtins.bool:
        """
        Indicates whether a user automatically inherits the permissions of the role to which the user belongs.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "rolinherit")

    @_builtins.property
    @pulumi.getter
    def rolreplication(self) -> _builtins.bool:
        """
        Indicates whether the user is a replication role. The value can be **true** or **false**.
        """
        return pulumi.get(self, "rolreplication")

    @_builtins.property
    @pulumi.getter
    def rolsuper(self) -> _builtins.bool:
        """
        Indicates whether a user has the super user permission. The value is **false**.
        """
        return pulumi.get(self, "rolsuper")


@pulumi.output_type
class GetPgDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 character_set: _builtins.str,
                 description: _builtins.str,
                 lc_collate: _builtins.str,
                 name: _builtins.str,
                 owner: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str character_set: Specifies the character set used by the database.
               For details, see [documentation](https://www.postgresql.org/docs/16/infoschema-character-sets.html).
        :param _builtins.str description: Indicates the database description.
        :param _builtins.str lc_collate: Specifies the database collation.
               For details, see [documentation](https://support.huaweicloud.com/intl/en-us/bestpractice-rds/rds_pg_0017.html).
        :param _builtins.str name: Specifies the database name.
        :param _builtins.str owner: Specifies the database owner.
        :param _builtins.int size: Specifies the database size, in bytes.
        """
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "lc_collate", lc_collate)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> _builtins.str:
        """
        Specifies the character set used by the database.
        For details, see [documentation](https://www.postgresql.org/docs/16/infoschema-character-sets.html).
        """
        return pulumi.get(self, "character_set")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the database description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> _builtins.str:
        """
        Specifies the database collation.
        For details, see [documentation](https://support.huaweicloud.com/intl/en-us/bestpractice-rds/rds_pg_0017.html).
        """
        return pulumi.get(self, "lc_collate")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        Specifies the database owner.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the database size, in bytes.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetPgHbaChangeRecordsPgHbaChangeRecordResult(dict):
    def __init__(__self__, *,
                 after_confs: Sequence['outputs.GetPgHbaChangeRecordsPgHbaChangeRecordAfterConfResult'],
                 before_confs: Sequence['outputs.GetPgHbaChangeRecordsPgHbaChangeRecordBeforeConfResult'],
                 fail_reason: _builtins.str,
                 status: _builtins.str,
                 time: _builtins.str):
        """
        :param Sequence['GetPgHbaChangeRecordsPgHbaChangeRecordAfterConfArgs'] after_confs: Indicates the new values.
               The after_confs structure is documented below.
        :param Sequence['GetPgHbaChangeRecordsPgHbaChangeRecordBeforeConfArgs'] before_confs: Indicates the original values.
               The before_confs structure is documented below.
        :param _builtins.str fail_reason: Indicates the reason for a change failure.
        :param _builtins.str status: Indicates the change result. The value can be:
               + **success**: The change has taken effect.
               + **failed**: The change did not take effect.
               + **setting**: The change is in progress.
        :param _builtins.str time: Indicates the time when the change was made.
        """
        pulumi.set(__self__, "after_confs", after_confs)
        pulumi.set(__self__, "before_confs", before_confs)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter(name="afterConfs")
    def after_confs(self) -> Sequence['outputs.GetPgHbaChangeRecordsPgHbaChangeRecordAfterConfResult']:
        """
        Indicates the new values.
        The after_confs structure is documented below.
        """
        return pulumi.get(self, "after_confs")

    @_builtins.property
    @pulumi.getter(name="beforeConfs")
    def before_confs(self) -> Sequence['outputs.GetPgHbaChangeRecordsPgHbaChangeRecordBeforeConfResult']:
        """
        Indicates the original values.
        The before_confs structure is documented below.
        """
        return pulumi.get(self, "before_confs")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        Indicates the reason for a change failure.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the change result. The value can be:
        + **success**: The change has taken effect.
        + **failed**: The change did not take effect.
        + **setting**: The change is in progress.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        Indicates the time when the change was made.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetPgHbaChangeRecordsPgHbaChangeRecordAfterConfResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 database: _builtins.str,
                 mask: _builtins.str,
                 method: _builtins.str,
                 priority: _builtins.int,
                 type: _builtins.str,
                 user: _builtins.str):
        """
        :param _builtins.str address: Indicates the client IP address.
        :param _builtins.str database: Indicates the database name.
        :param _builtins.str mask: Indicates the subnet mask.
        :param _builtins.str method: Indicates the authentication mode.
        :param _builtins.int priority: Indicates the configuration priority.
        :param _builtins.str type: Indicates the connection type.
        :param _builtins.str user: Indicates the name of a user.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Indicates the client IP address.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Indicates the database name.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> _builtins.str:
        """
        Indicates the subnet mask.
        """
        return pulumi.get(self, "mask")

    @_builtins.property
    @pulumi.getter
    def method(self) -> _builtins.str:
        """
        Indicates the authentication mode.
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Indicates the configuration priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the connection type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def user(self) -> _builtins.str:
        """
        Indicates the name of a user.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetPgHbaChangeRecordsPgHbaChangeRecordBeforeConfResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 database: _builtins.str,
                 mask: _builtins.str,
                 method: _builtins.str,
                 priority: _builtins.int,
                 type: _builtins.str,
                 user: _builtins.str):
        """
        :param _builtins.str address: Indicates the client IP address.
        :param _builtins.str database: Indicates the database name.
        :param _builtins.str mask: Indicates the subnet mask.
        :param _builtins.str method: Indicates the authentication mode.
        :param _builtins.int priority: Indicates the configuration priority.
        :param _builtins.str type: Indicates the connection type.
        :param _builtins.str user: Indicates the name of a user.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Indicates the client IP address.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Indicates the database name.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> _builtins.str:
        """
        Indicates the subnet mask.
        """
        return pulumi.get(self, "mask")

    @_builtins.property
    @pulumi.getter
    def method(self) -> _builtins.str:
        """
        Indicates the authentication mode.
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Indicates the configuration priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the connection type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def user(self) -> _builtins.str:
        """
        Indicates the name of a user.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetPgPluginsPluginResult(dict):
    def __init__(__self__, *,
                 created: _builtins.bool,
                 description: _builtins.str,
                 name: _builtins.str,
                 shared_preload_libraries: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.bool created: Specifies whether the plugin has been created. Defaults to: **false**.
        :param _builtins.str description: Indicates the plugin description.
        :param _builtins.str name: Specifies the plugin name.
        :param _builtins.str shared_preload_libraries: Indicates the dependent preloaded library.
        :param _builtins.str version: Specifies the plugin version.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "shared_preload_libraries", shared_preload_libraries)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.bool:
        """
        Specifies whether the plugin has been created. Defaults to: **false**.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the plugin description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the plugin name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sharedPreloadLibraries")
    def shared_preload_libraries(self) -> _builtins.str:
        """
        Indicates the dependent preloaded library.
        """
        return pulumi.get(self, "shared_preload_libraries")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the plugin version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPgSchemasDatabaseSchemaResult(dict):
    def __init__(__self__, *,
                 owner: _builtins.str,
                 schema_name: _builtins.str):
        """
        :param _builtins.str owner: Indicates the schema owner.
        :param _builtins.str schema_name: Indicates the schema name.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema_name", schema_name)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        Indicates the schema owner.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        Indicates the schema name.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetPgSqlLimitsSqlLimitResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 is_effective: _builtins.bool,
                 max_concurrency: _builtins.int,
                 max_waiting: _builtins.int,
                 query_id: _builtins.str,
                 query_string: _builtins.str,
                 search_path: _builtins.str):
        """
        :param _builtins.str id: Indicates the ID of SQL limit.
        :param _builtins.bool is_effective: Specifies whether the SQL limit is effective.
        :param _builtins.int max_concurrency: Specifies the number of SQL statements executed simultaneously.
        :param _builtins.int max_waiting: Specifies the max waiting time in seconds.
        :param _builtins.str query_id: Specifies the query ID.
        :param _builtins.str query_string: Specifies the text form of SQL statement.
        :param _builtins.str search_path: Specifies the query order for names that are not schema qualified.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_effective", is_effective)
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "max_waiting", max_waiting)
        pulumi.set(__self__, "query_id", query_id)
        pulumi.set(__self__, "query_string", query_string)
        pulumi.set(__self__, "search_path", search_path)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of SQL limit.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isEffective")
    def is_effective(self) -> _builtins.bool:
        """
        Specifies whether the SQL limit is effective.
        """
        return pulumi.get(self, "is_effective")

    @_builtins.property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> _builtins.int:
        """
        Specifies the number of SQL statements executed simultaneously.
        """
        return pulumi.get(self, "max_concurrency")

    @_builtins.property
    @pulumi.getter(name="maxWaiting")
    def max_waiting(self) -> _builtins.int:
        """
        Specifies the max waiting time in seconds.
        """
        return pulumi.get(self, "max_waiting")

    @_builtins.property
    @pulumi.getter(name="queryId")
    def query_id(self) -> _builtins.str:
        """
        Specifies the query ID.
        """
        return pulumi.get(self, "query_id")

    @_builtins.property
    @pulumi.getter(name="queryString")
    def query_string(self) -> _builtins.str:
        """
        Specifies the text form of SQL statement.
        """
        return pulumi.get(self, "query_string")

    @_builtins.property
    @pulumi.getter(name="searchPath")
    def search_path(self) -> _builtins.str:
        """
        Specifies the query order for names that are not schema qualified.
        """
        return pulumi.get(self, "search_path")


@pulumi.output_type
class GetPredefinedTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates the key of a tag.
        :param Sequence[_builtins.str] values: Indicates the list the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the key of a tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates the list the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetQuotasQuotaResourceResult']):
        """
        :param Sequence['GetQuotasQuotaResourceArgs'] resources: Indicates the resource list objects.
        """
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetQuotasQuotaResourceResult']:
        """
        Indicates the resource list objects.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetQuotasQuotaResourceResult(dict):
    def __init__(__self__, *,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int quota: Indicates the project resource quota.
        :param _builtins.str type: Indicates the project resource type. The value can be **instance**.
        :param _builtins.int used: Indicates the number of used resources.
        """
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        Indicates the project resource quota.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the project resource type. The value can be **instance**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        Indicates the number of used resources.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetReadReplicaRestorableDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 schemas: Sequence['outputs.GetReadReplicaRestorableDatabasesDatabaseSchemaResult'],
                 total_tables: _builtins.int):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "total_tables", total_tables)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.GetReadReplicaRestorableDatabasesDatabaseSchemaResult']:
        return pulumi.get(self, "schemas")

    @_builtins.property
    @pulumi.getter(name="totalTables")
    def total_tables(self) -> _builtins.int:
        return pulumi.get(self, "total_tables")


@pulumi.output_type
class GetReadReplicaRestorableDatabasesDatabaseSchemaResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 tables: Sequence['outputs.GetReadReplicaRestorableDatabasesDatabaseSchemaTableResult'],
                 total_tables: _builtins.int):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tables", tables)
        pulumi.set(__self__, "total_tables", total_tables)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.GetReadReplicaRestorableDatabasesDatabaseSchemaTableResult']:
        return pulumi.get(self, "tables")

    @_builtins.property
    @pulumi.getter(name="totalTables")
    def total_tables(self) -> _builtins.int:
        return pulumi.get(self, "total_tables")


@pulumi.output_type
class GetReadReplicaRestorableDatabasesDatabaseSchemaTableResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRecyclingInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 data_vip: _builtins.str,
                 deleted_at: _builtins.str,
                 engine_name: _builtins.str,
                 engine_version: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 ha_mode: _builtins.str,
                 id: _builtins.str,
                 is_serverless: _builtins.bool,
                 name: _builtins.str,
                 pay_model: _builtins.str,
                 recycle_backup_id: _builtins.str,
                 recycle_status: _builtins.str,
                 retained_until: _builtins.str,
                 volume_size: _builtins.int,
                 volume_type: _builtins.str):
        """
        :param _builtins.str created_at: Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str data_vip: Specifies the floating IP address.
        :param _builtins.str deleted_at: Indicates the deletion time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str engine_name: Specifies the DB engine name.
        :param _builtins.str engine_version: Specifies the DB engine version.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.str ha_mode: Specifies the instance type.
               Value options: **Ha**, **Single**.
        :param _builtins.str id: Indicates the instance ID.
        :param _builtins.bool is_serverless: Specifies whether the instance is a serverless instance.
               Value options: **true**, **false**.
        :param _builtins.str name: Specifies the instance name.
        :param _builtins.str pay_model: Specifies the billing mode.
               Value options: **0** (pay-per-use), **1** (yearly/monthly).
        :param _builtins.str recycle_backup_id: Specifies the backup ID.
        :param _builtins.str recycle_status: Specifies the backup status.
               Value options:
               + **BUILDING**: The instance is being backed up and cannot be rebuilt.
               + **COMPLETED**: The backup is complete and the instance can be rebuilt.
        :param _builtins.str retained_until: Indicates the retention time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.int volume_size: Specifies the storage space in **GB**.
               The value must be a multiple of **10** and the value range is from **40 GB** to **4,000 GB**.
        :param _builtins.str volume_type: Specifies the storage type.
               Value options:
               + **ULTRAHIGH**: ultra-high I/O storage.
               + **ULTRAHIGHPRO**: ultra-high I/O (advanced) storage.
               + **CLOUDSSD**: cloud SSD storage.
               + **LOCALSSD**: local SSD storage.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_vip", data_vip)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "ha_mode", ha_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_serverless", is_serverless)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pay_model", pay_model)
        pulumi.set(__self__, "recycle_backup_id", recycle_backup_id)
        pulumi.set(__self__, "recycle_status", recycle_status)
        pulumi.set(__self__, "retained_until", retained_until)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataVip")
    def data_vip(self) -> _builtins.str:
        """
        Specifies the floating IP address.
        """
        return pulumi.get(self, "data_vip")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.str:
        """
        Indicates the deletion time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> _builtins.str:
        """
        Specifies the DB engine name.
        """
        return pulumi.get(self, "engine_name")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Specifies the DB engine version.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> _builtins.str:
        """
        Specifies the instance type.
        Value options: **Ha**, **Single**.
        """
        return pulumi.get(self, "ha_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isServerless")
    def is_serverless(self) -> _builtins.bool:
        """
        Specifies whether the instance is a serverless instance.
        Value options: **true**, **false**.
        """
        return pulumi.get(self, "is_serverless")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="payModel")
    def pay_model(self) -> _builtins.str:
        """
        Specifies the billing mode.
        Value options: **0** (pay-per-use), **1** (yearly/monthly).
        """
        return pulumi.get(self, "pay_model")

    @_builtins.property
    @pulumi.getter(name="recycleBackupId")
    def recycle_backup_id(self) -> _builtins.str:
        """
        Specifies the backup ID.
        """
        return pulumi.get(self, "recycle_backup_id")

    @_builtins.property
    @pulumi.getter(name="recycleStatus")
    def recycle_status(self) -> _builtins.str:
        """
        Specifies the backup status.
        Value options:
        + **BUILDING**: The instance is being backed up and cannot be rebuilt.
        + **COMPLETED**: The backup is complete and the instance can be rebuilt.
        """
        return pulumi.get(self, "recycle_status")

    @_builtins.property
    @pulumi.getter(name="retainedUntil")
    def retained_until(self) -> _builtins.str:
        """
        Indicates the retention time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "retained_until")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> _builtins.int:
        """
        Specifies the storage space in **GB**.
        The value must be a multiple of **10** and the value range is from **40 GB** to **4,000 GB**.
        """
        return pulumi.get(self, "volume_size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        Specifies the storage type.
        Value options:
        + **ULTRAHIGH**: ultra-high I/O storage.
        + **ULTRAHIGHPRO**: ultra-high I/O (advanced) storage.
        + **CLOUDSSD**: cloud SSD storage.
        + **LOCALSSD**: local SSD storage.
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetRestoreTimeRangesRestoreTimeResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.int,
                 start_time: _builtins.int):
        """
        :param _builtins.int end_time: Indicates the end time of the restoration time range in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC.
        :param _builtins.int start_time: Indicates the start time of the restoration time range in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time of the restoration time range in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time of the restoration time range in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetRestoredDatabasesInstanceResult(dict):
    def __init__(__self__, *,
                 databases: Sequence['outputs.GetRestoredDatabasesInstanceDatabaseResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 total_tables: _builtins.int):
        """
        :param Sequence['GetRestoredDatabasesInstanceDatabaseArgs'] databases: Indicates the database information.
        :param _builtins.str id: Indicates the instance ID.
        :param _builtins.str name: Indicates the database name. Databases whose names contain Chinese characters will be filtered out and cannot
               be restored.
        :param _builtins.int total_tables: Indicates the total number of tables in the database.
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "total_tables", total_tables)

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetRestoredDatabasesInstanceDatabaseResult']:
        """
        Indicates the database information.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the database name. Databases whose names contain Chinese characters will be filtered out and cannot
        be restored.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="totalTables")
    def total_tables(self) -> _builtins.int:
        """
        Indicates the total number of tables in the database.
        """
        return pulumi.get(self, "total_tables")


@pulumi.output_type
class GetRestoredDatabasesInstanceDatabaseResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 total_tables: _builtins.int):
        """
        :param _builtins.str name: Indicates the database name. Databases whose names contain Chinese characters will be filtered out and cannot
               be restored.
        :param _builtins.int total_tables: Indicates the total number of tables in the database.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "total_tables", total_tables)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the database name. Databases whose names contain Chinese characters will be filtered out and cannot
        be restored.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="totalTables")
    def total_tables(self) -> _builtins.int:
        """
        Indicates the total number of tables in the database.
        """
        return pulumi.get(self, "total_tables")


@pulumi.output_type
class GetRestoredTablesInstanceResult(dict):
    def __init__(__self__, *,
                 databases: Sequence['outputs.GetRestoredTablesInstanceDatabaseResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 total_tables: _builtins.int):
        """
        :param Sequence['GetRestoredTablesInstanceDatabaseArgs'] databases: Indicates the database information.
        :param _builtins.str id: Indicates the instance ID.
        :param _builtins.str name: Indicates the table name.
        :param _builtins.int total_tables: Indicates the number of tables that can be restored.
        """
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "total_tables", total_tables)

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetRestoredTablesInstanceDatabaseResult']:
        """
        Indicates the database information.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the table name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="totalTables")
    def total_tables(self) -> _builtins.int:
        """
        Indicates the number of tables that can be restored.
        """
        return pulumi.get(self, "total_tables")


@pulumi.output_type
class GetRestoredTablesInstanceDatabaseResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 schemas: Sequence['outputs.GetRestoredTablesInstanceDatabaseSchemaResult'],
                 total_tables: _builtins.int):
        """
        :param _builtins.str name: Indicates the table name.
        :param Sequence['GetRestoredTablesInstanceDatabaseSchemaArgs'] schemas: Indicates the schema information.
               The schemas structure is documented below.
        :param _builtins.int total_tables: Indicates the number of tables that can be restored.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "total_tables", total_tables)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the table name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.GetRestoredTablesInstanceDatabaseSchemaResult']:
        """
        Indicates the schema information.
        The schemas structure is documented below.
        """
        return pulumi.get(self, "schemas")

    @_builtins.property
    @pulumi.getter(name="totalTables")
    def total_tables(self) -> _builtins.int:
        """
        Indicates the number of tables that can be restored.
        """
        return pulumi.get(self, "total_tables")


@pulumi.output_type
class GetRestoredTablesInstanceDatabaseSchemaResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 tables: Sequence['outputs.GetRestoredTablesInstanceDatabaseSchemaTableResult'],
                 total_tables: _builtins.int):
        """
        :param _builtins.str name: Indicates the table name.
        :param Sequence['GetRestoredTablesInstanceDatabaseSchemaTableArgs'] tables: Indicates the table information.
               The tables structure is documented below.
        :param _builtins.int total_tables: Indicates the number of tables that can be restored.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tables", tables)
        pulumi.set(__self__, "total_tables", total_tables)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the table name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.GetRestoredTablesInstanceDatabaseSchemaTableResult']:
        """
        Indicates the table information.
        The tables structure is documented below.
        """
        return pulumi.get(self, "tables")

    @_builtins.property
    @pulumi.getter(name="totalTables")
    def total_tables(self) -> _builtins.int:
        """
        Indicates the number of tables that can be restored.
        """
        return pulumi.get(self, "total_tables")


@pulumi.output_type
class GetRestoredTablesInstanceDatabaseSchemaTableResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: Indicates the table name.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the table name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSlowLogFilesFileResult(dict):
    def __init__(__self__, *,
                 file_name: _builtins.str,
                 file_size: _builtins.str):
        """
        :param _builtins.str file_name: Indicates the file name.
        :param _builtins.str file_size: Indicates the file size in bytes.
        """
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_size", file_size)

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        Indicates the file name.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> _builtins.str:
        """
        Indicates the file size in bytes.
        """
        return pulumi.get(self, "file_size")


@pulumi.output_type
class GetSlowLogsSlowLogResult(dict):
    def __init__(__self__, *,
                 client_ip: _builtins.str,
                 count: _builtins.str,
                 database: _builtins.str,
                 lock_time: _builtins.str,
                 query_sample: _builtins.str,
                 rows_examined: _builtins.str,
                 rows_sent: _builtins.str,
                 start_time: _builtins.str,
                 time: _builtins.str,
                 type: _builtins.str,
                 users: _builtins.str):
        """
        :param _builtins.str client_ip: Indicates the IP address of the client.
        :param _builtins.str count: Indicates the number of execution times.
        :param _builtins.str database: Specifies the name of the database.
        :param _builtins.str lock_time: Indicates the wait lock time.
        :param _builtins.str query_sample: Indicates the execution syntax.
        :param _builtins.str rows_examined: Indicates the number of rows scanned.
        :param _builtins.str rows_sent: Indicates the number of result lines.
        :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str time: Indicates the execution time.
        :param _builtins.str type: Specifies the statement type. Value options: **INSERT**, **UPDATE**, **SELECT**,
               **DELETE**, **CREATE**.
        :param _builtins.str users: Specifies the name of the account.
        """
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "lock_time", lock_time)
        pulumi.set(__self__, "query_sample", query_sample)
        pulumi.set(__self__, "rows_examined", rows_examined)
        pulumi.set(__self__, "rows_sent", rows_sent)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> _builtins.str:
        """
        Indicates the IP address of the client.
        """
        return pulumi.get(self, "client_ip")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        Indicates the number of execution times.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Specifies the name of the database.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> _builtins.str:
        """
        Indicates the wait lock time.
        """
        return pulumi.get(self, "lock_time")

    @_builtins.property
    @pulumi.getter(name="querySample")
    def query_sample(self) -> _builtins.str:
        """
        Indicates the execution syntax.
        """
        return pulumi.get(self, "query_sample")

    @_builtins.property
    @pulumi.getter(name="rowsExamined")
    def rows_examined(self) -> _builtins.str:
        """
        Indicates the number of rows scanned.
        """
        return pulumi.get(self, "rows_examined")

    @_builtins.property
    @pulumi.getter(name="rowsSent")
    def rows_sent(self) -> _builtins.str:
        """
        Indicates the number of result lines.
        """
        return pulumi.get(self, "rows_sent")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        Indicates the execution time.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the statement type. Value options: **INSERT**, **UPDATE**, **SELECT**,
        **DELETE**, **CREATE**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def users(self) -> _builtins.str:
        """
        Specifies the name of the account.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetSqlAuditLogsAuditLogResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str begin_time: Indicates the start time of the audit log.
        :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
               It must be later than the start time. The time span cannot be longer than 30 days.
        :param _builtins.str id: Indicates the ID of the audit log.
        :param _builtins.str name: Indicates the audit log file name.
        :param _builtins.int size: Indicates the size in KB of the audit log.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        Indicates the start time of the audit log.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        It must be later than the start time. The time span cannot be longer than 30 days.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the audit log.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the audit log file name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the size in KB of the audit log.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetSqlAuditOperationsOperationResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] actions: Indicates the list of the operation actions.
        :param _builtins.str type: Indicates the type of the operation.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of the operation actions.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type of the operation.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSqlserverAccountsUserResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str name: Indicates the username of the database account.
        :param _builtins.str state: Specifies the database user status. Its value can be any of the following:
               + **unavailable**: The database user is unavailable.
               + **available**: The database user is available.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the username of the database account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the database user status. Its value can be any of the following:
        + **unavailable**: The database user is unavailable.
        + **available**: The database user is available.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetSqlserverDatabasePrivilegesUserResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 readonly: _builtins.bool):
        """
        :param _builtins.str name: The username of the database account.
        :param _builtins.bool readonly: Specifies whether the database permission is **read-only**. Values option:
               + **true**: indicates the read-only permission.
               + **false**: indicates the read and write permission.
               
               Defaults to **false**.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The username of the database account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        Specifies whether the database permission is **read-only**. Values option:
        + **true**: indicates the read-only permission.
        + **false**: indicates the read and write permission.

        Defaults to **false**.
        """
        return pulumi.get(self, "readonly")


@pulumi.output_type
class GetSqlserverDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 character_set: _builtins.str,
                 name: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str character_set: Specifies the character set used by the database.
        :param _builtins.str name: Specifies the database name.
        :param _builtins.str state: Specifies the database status.
        """
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> _builtins.str:
        """
        Specifies the character set used by the database.
        """
        return pulumi.get(self, "character_set")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the database status.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetSslCertDownloadLinksCertInfoListResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 download_link: _builtins.str):
        """
        :param _builtins.str category: Indicates the category of certificate.
               The value can be: **international**, **national**.
        :param _builtins.str download_link: Indicates the download link of certificate.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "download_link", download_link)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Indicates the category of certificate.
        The value can be: **international**, **national**.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> _builtins.str:
        """
        Indicates the download link of certificate.
        """
        return pulumi.get(self, "download_link")


@pulumi.output_type
class GetStorageTypesStorageTypeResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 support_compute_group_types: Sequence[_builtins.str]):
        """
        :param Mapping[str, _builtins.str] az_status: The status details of the AZs to which the specification belongs.
               Key indicates the AZ ID, and value indicates the specification status in the AZ.
               The options of value are as follows:
               - **normal**: The specifications in the AZ are available.
               - **unsupported**: The specifications are not supported by the AZ.
               - **sellout**: The specifications in the AZ are sold out.
        :param _builtins.str name: Storage type.  
               The options are as follows:
               - **ULTRAHIGH**: SSD storage.
               - **LOCALSSD**: Local SSD storage.
               - **CLOUDSSD**: Cloud SSD storage.
               This storage type is supported only with general-purpose and dedicated DB instances.
               - **ESSD**: extreme SSD storage.
               This storage type is supported only with dedicated DB instances.
        :param Sequence[_builtins.str] support_compute_group_types: Performance specifications.
               The options are as follows:
               - **normal**: General-enhanced.
               - **normal2**: General-enhanced II.
               - **armFlavors**: Kunpeng general-enhanced.
               - **dedicicatenormal**: Exclusive x86.
               - **armlocalssd**: Standard Kunpeng.
               - **normallocalssd**: Standard x86.
               - **general**: General-purpose.
               - **dedicated**: Dedicated, which is only supported for cloud SSDs.
               - **rapid**: Dedicated, which is only supported for extreme SSDs.
               - **bigmen**: Large-memory.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "support_compute_group_types", support_compute_group_types)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        The status details of the AZs to which the specification belongs.
        Key indicates the AZ ID, and value indicates the specification status in the AZ.
        The options of value are as follows:
        - **normal**: The specifications in the AZ are available.
        - **unsupported**: The specifications are not supported by the AZ.
        - **sellout**: The specifications in the AZ are sold out.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Storage type.  
        The options are as follows:
        - **ULTRAHIGH**: SSD storage.
        - **LOCALSSD**: Local SSD storage.
        - **CLOUDSSD**: Cloud SSD storage.
        This storage type is supported only with general-purpose and dedicated DB instances.
        - **ESSD**: extreme SSD storage.
        This storage type is supported only with dedicated DB instances.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="supportComputeGroupTypes")
    def support_compute_group_types(self) -> Sequence[_builtins.str]:
        """
        Performance specifications.
        The options are as follows:
        - **normal**: General-enhanced.
        - **normal2**: General-enhanced II.
        - **armFlavors**: Kunpeng general-enhanced.
        - **dedicicatenormal**: Exclusive x86.
        - **armlocalssd**: Standard Kunpeng.
        - **normallocalssd**: Standard x86.
        - **general**: General-purpose.
        - **dedicated**: Dedicated, which is only supported for cloud SSDs.
        - **rapid**: Dedicated, which is only supported for extreme SSDs.
        - **bigmen**: Large-memory.
        """
        return pulumi.get(self, "support_compute_group_types")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates the tag key.
        :param Sequence[_builtins.str] values: Indicates the list the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates the list the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTasksJobResult(dict):
    def __init__(__self__, *,
                 created: _builtins.str,
                 ended: _builtins.str,
                 entities: _builtins.str,
                 fail_reason: _builtins.str,
                 id: _builtins.str,
                 instances: Sequence['outputs.GetTasksJobInstanceResult'],
                 name: _builtins.str,
                 process: _builtins.str,
                 status: _builtins.str,
                 task_detail: _builtins.str):
        """
        :param _builtins.str created: Indicates the creation time. The value is in the **yyyy-mm-ddThh:mm:ssZ** format.
               T is the separator between the calendar and the hourly notation of time. Z indicates the time
               zone offset. For example, in the Beijing time zone, the time zone offset is shown as +0800.
        :param _builtins.str ended: Indicates the end time. The value is in the **yyyy-mm-ddThh:mm:ssZ** format. T is
               the separator between the calendar and the hourly notation of time. Z indicates the time
               zone offset. For example, in the Beijing time zone, the time zone offset is shown as +0800.
        :param _builtins.str entities: Indicates the displayed information varies depending on the tasks.
        :param _builtins.str fail_reason: Indicates the error information displayed when a task failed.
        :param _builtins.str id: Indicates the DB instance ID.
        :param Sequence['GetTasksJobInstanceArgs'] instances: Indicates the information of the DB instance on which the task is executed.
        :param _builtins.str name: Indicates the DB instance name.
        :param _builtins.str process: Indicates the task execution progress. The execution progress (such as "60",
               indicating the task execution progress is 60%) is displayed only when the task is being
               executed. Otherwise, "" is returned.
        :param _builtins.str status: Indicates the task execution status.
               + **Running**: Indicates the task is being executed.
               + **Completed**: Indicates the task is successfully executed.
               + **Failed**: Indicates the task fails to be executed.
        :param _builtins.str task_detail: Indicates the displayed information varies depending on the tasks.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "ended", ended)
        pulumi.set(__self__, "entities", entities)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "process", process)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task_detail", task_detail)

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        """
        Indicates the creation time. The value is in the **yyyy-mm-ddThh:mm:ssZ** format.
        T is the separator between the calendar and the hourly notation of time. Z indicates the time
        zone offset. For example, in the Beijing time zone, the time zone offset is shown as +0800.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def ended(self) -> _builtins.str:
        """
        Indicates the end time. The value is in the **yyyy-mm-ddThh:mm:ssZ** format. T is
        the separator between the calendar and the hourly notation of time. Z indicates the time
        zone offset. For example, in the Beijing time zone, the time zone offset is shown as +0800.
        """
        return pulumi.get(self, "ended")

    @_builtins.property
    @pulumi.getter
    def entities(self) -> _builtins.str:
        """
        Indicates the displayed information varies depending on the tasks.
        """
        return pulumi.get(self, "entities")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        Indicates the error information displayed when a task failed.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the DB instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetTasksJobInstanceResult']:
        """
        Indicates the information of the DB instance on which the task is executed.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the DB instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def process(self) -> _builtins.str:
        """
        Indicates the task execution progress. The execution progress (such as "60",
        indicating the task execution progress is 60%) is displayed only when the task is being
        executed. Otherwise, "" is returned.
        """
        return pulumi.get(self, "process")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the task execution status.
        + **Running**: Indicates the task is being executed.
        + **Completed**: Indicates the task is successfully executed.
        + **Failed**: Indicates the task fails to be executed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskDetail")
    def task_detail(self) -> _builtins.str:
        """
        Indicates the displayed information varies depending on the tasks.
        """
        return pulumi.get(self, "task_detail")


@pulumi.output_type
class GetTasksJobInstanceResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: Indicates the DB instance ID.
        :param _builtins.str name: Indicates the DB instance name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the DB instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the DB instance name.
        """
        return pulumi.get(self, "name")


