# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetWalLogReplayDelayStatusResult',
    'AwaitableGetWalLogReplayDelayStatusResult',
    'get_wal_log_replay_delay_status',
    'get_wal_log_replay_delay_status_output',
]

@pulumi.output_type
class GetWalLogReplayDelayStatusResult:
    """
    A collection of values returned by getWalLogReplayDelayStatus.
    """
    def __init__(__self__, cur_delay_time_mills=None, cur_log_replay_paused=None, delay_time_value_range=None, id=None, instance_id=None, latest_receive_log=None, latest_replay_log=None, real_delay_time_mills=None, region=None):
        if cur_delay_time_mills and not isinstance(cur_delay_time_mills, int):
            raise TypeError("Expected argument 'cur_delay_time_mills' to be a int")
        pulumi.set(__self__, "cur_delay_time_mills", cur_delay_time_mills)
        if cur_log_replay_paused and not isinstance(cur_log_replay_paused, bool):
            raise TypeError("Expected argument 'cur_log_replay_paused' to be a bool")
        pulumi.set(__self__, "cur_log_replay_paused", cur_log_replay_paused)
        if delay_time_value_range and not isinstance(delay_time_value_range, str):
            raise TypeError("Expected argument 'delay_time_value_range' to be a str")
        pulumi.set(__self__, "delay_time_value_range", delay_time_value_range)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if latest_receive_log and not isinstance(latest_receive_log, str):
            raise TypeError("Expected argument 'latest_receive_log' to be a str")
        pulumi.set(__self__, "latest_receive_log", latest_receive_log)
        if latest_replay_log and not isinstance(latest_replay_log, str):
            raise TypeError("Expected argument 'latest_replay_log' to be a str")
        pulumi.set(__self__, "latest_replay_log", latest_replay_log)
        if real_delay_time_mills and not isinstance(real_delay_time_mills, int):
            raise TypeError("Expected argument 'real_delay_time_mills' to be a int")
        pulumi.set(__self__, "real_delay_time_mills", real_delay_time_mills)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="curDelayTimeMills")
    def cur_delay_time_mills(self) -> _builtins.int:
        """
        Indicates the current WAL log replay delay time in milliseconds.
        """
        return pulumi.get(self, "cur_delay_time_mills")

    @_builtins.property
    @pulumi.getter(name="curLogReplayPaused")
    def cur_log_replay_paused(self) -> _builtins.bool:
        """
        Indicates whether WAL log replay is currently paused. Value can be as follow:
        + **true**: Indicates that the WAL log replay is paused.
        + **false**: Indicates that the WAL log replay is actively running.
        """
        return pulumi.get(self, "cur_log_replay_paused")

    @_builtins.property
    @pulumi.getter(name="delayTimeValueRange")
    def delay_time_value_range(self) -> _builtins.str:
        """
        Indicates the valid range for the WAL log delay time.
        """
        return pulumi.get(self, "delay_time_value_range")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="latestReceiveLog")
    def latest_receive_log(self) -> _builtins.str:
        """
        Indicates the latest WAL log that has been received by the RDS instance.
        """
        return pulumi.get(self, "latest_receive_log")

    @_builtins.property
    @pulumi.getter(name="latestReplayLog")
    def latest_replay_log(self) -> _builtins.str:
        """
        Indicates the latest WAL log that has been replayed by the RDS instance.
        """
        return pulumi.get(self, "latest_replay_log")

    @_builtins.property
    @pulumi.getter(name="realDelayTimeMills")
    def real_delay_time_mills(self) -> _builtins.int:
        """
        Indicates the actual replay delay time of the WAL log in milliseconds.
        """
        return pulumi.get(self, "real_delay_time_mills")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetWalLogReplayDelayStatusResult(GetWalLogReplayDelayStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWalLogReplayDelayStatusResult(
            cur_delay_time_mills=self.cur_delay_time_mills,
            cur_log_replay_paused=self.cur_log_replay_paused,
            delay_time_value_range=self.delay_time_value_range,
            id=self.id,
            instance_id=self.instance_id,
            latest_receive_log=self.latest_receive_log,
            latest_replay_log=self.latest_replay_log,
            real_delay_time_mills=self.real_delay_time_mills,
            region=self.region)


def get_wal_log_replay_delay_status(instance_id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWalLogReplayDelayStatusResult:
    """
    Use this data source to query the WAL log replay delay status of a specified RDS instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_wal_log_replay_delay_status(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the RDS instance.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getWalLogReplayDelayStatus:getWalLogReplayDelayStatus', __args__, opts=opts, typ=GetWalLogReplayDelayStatusResult).value

    return AwaitableGetWalLogReplayDelayStatusResult(
        cur_delay_time_mills=pulumi.get(__ret__, 'cur_delay_time_mills'),
        cur_log_replay_paused=pulumi.get(__ret__, 'cur_log_replay_paused'),
        delay_time_value_range=pulumi.get(__ret__, 'delay_time_value_range'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        latest_receive_log=pulumi.get(__ret__, 'latest_receive_log'),
        latest_replay_log=pulumi.get(__ret__, 'latest_replay_log'),
        real_delay_time_mills=pulumi.get(__ret__, 'real_delay_time_mills'),
        region=pulumi.get(__ret__, 'region'))
def get_wal_log_replay_delay_status_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWalLogReplayDelayStatusResult]:
    """
    Use this data source to query the WAL log replay delay status of a specified RDS instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_wal_log_replay_delay_status(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the RDS instance.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Rds/getWalLogReplayDelayStatus:getWalLogReplayDelayStatus', __args__, opts=opts, typ=GetWalLogReplayDelayStatusResult)
    return __ret__.apply(lambda __response__: GetWalLogReplayDelayStatusResult(
        cur_delay_time_mills=pulumi.get(__response__, 'cur_delay_time_mills'),
        cur_log_replay_paused=pulumi.get(__response__, 'cur_log_replay_paused'),
        delay_time_value_range=pulumi.get(__response__, 'delay_time_value_range'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        latest_receive_log=pulumi.get(__response__, 'latest_receive_log'),
        latest_replay_log=pulumi.get(__response__, 'latest_replay_log'),
        real_delay_time_mills=pulumi.get(__response__, 'real_delay_time_mills'),
        region=pulumi.get(__response__, 'region')))
