# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPgSchemasResult',
    'AwaitableGetPgSchemasResult',
    'get_pg_schemas',
    'get_pg_schemas_output',
]

@pulumi.output_type
class GetPgSchemasResult:
    """
    A collection of values returned by getPgSchemas.
    """
    def __init__(__self__, database_schemas=None, db_name=None, id=None, instance_id=None, region=None):
        if database_schemas and not isinstance(database_schemas, list):
            raise TypeError("Expected argument 'database_schemas' to be a list")
        pulumi.set(__self__, "database_schemas", database_schemas)
        if db_name and not isinstance(db_name, str):
            raise TypeError("Expected argument 'db_name' to be a str")
        pulumi.set(__self__, "db_name", db_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="databaseSchemas")
    def database_schemas(self) -> Sequence['outputs.GetPgSchemasDatabaseSchemaResult']:
        """
        Indicates the list of database schemas.
        """
        return pulumi.get(self, "database_schemas")

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetPgSchemasResult(GetPgSchemasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPgSchemasResult(
            database_schemas=self.database_schemas,
            db_name=self.db_name,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region)


def get_pg_schemas(db_name: Optional[_builtins.str] = None,
                   instance_id: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPgSchemasResult:
    """
    Use this data source to get the list of RDS PostgreSQL schemas.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_pg_schemas(instance_id=instance_id,
        db_name="test_database_name")
    ```


    :param _builtins.str db_name: Specifies the database name.
    :param _builtins.str instance_id: Specifies the PostgreSQL instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['dbName'] = db_name
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getPgSchemas:getPgSchemas', __args__, opts=opts, typ=GetPgSchemasResult).value

    return AwaitableGetPgSchemasResult(
        database_schemas=pulumi.get(__ret__, 'database_schemas'),
        db_name=pulumi.get(__ret__, 'db_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'))
def get_pg_schemas_output(db_name: Optional[pulumi.Input[_builtins.str]] = None,
                          instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPgSchemasResult]:
    """
    Use this data source to get the list of RDS PostgreSQL schemas.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_pg_schemas(instance_id=instance_id,
        db_name="test_database_name")
    ```


    :param _builtins.str db_name: Specifies the database name.
    :param _builtins.str instance_id: Specifies the PostgreSQL instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['dbName'] = db_name
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Rds/getPgSchemas:getPgSchemas', __args__, opts=opts, typ=GetPgSchemasResult)
    return __ret__.apply(lambda __response__: GetPgSchemasResult(
        database_schemas=pulumi.get(__response__, 'database_schemas'),
        db_name=pulumi.get(__response__, 'db_name'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region')))
