# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBackupDatabasesResult',
    'AwaitableGetBackupDatabasesResult',
    'get_backup_databases',
    'get_backup_databases_output',
]

@pulumi.output_type
class GetBackupDatabasesResult:
    """
    A collection of values returned by getBackupDatabases.
    """
    def __init__(__self__, backup_id=None, bucket_name=None, database_limit=None, databases=None, id=None, instance_id=None, region=None):
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if bucket_name and not isinstance(bucket_name, str):
            raise TypeError("Expected argument 'bucket_name' to be a str")
        pulumi.set(__self__, "bucket_name", bucket_name)
        if database_limit and not isinstance(database_limit, int):
            raise TypeError("Expected argument 'database_limit' to be a int")
        pulumi.set(__self__, "database_limit", database_limit)
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        pulumi.set(__self__, "databases", databases)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> _builtins.str:
        """
        Indicates the name of the backup.
        """
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter(name="databaseLimit")
    def database_limit(self) -> _builtins.int:
        """
        Indicates the maximum number of databases that can be restored.
        """
        return pulumi.get(self, "database_limit")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetBackupDatabasesDatabaseResult']:
        """
        Indicates the list of databases included in the backup.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetBackupDatabasesResult(GetBackupDatabasesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupDatabasesResult(
            backup_id=self.backup_id,
            bucket_name=self.bucket_name,
            database_limit=self.database_limit,
            databases=self.databases,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region)


def get_backup_databases(backup_id: Optional[_builtins.str] = None,
                         instance_id: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupDatabasesResult:
    """
    Use this data source to query databases contained in a database level backup in a specified RDS instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    backup_id = config.require_object("backupId")
    test = huaweicloud.Rds.get_backup_databases(instance_id=instance_id,
        backup_id=backup_id)
    ```


    :param _builtins.str backup_id: Specifies the ID of the backup.
    :param _builtins.str instance_id: Specifies the ID of the RDS instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getBackupDatabases:getBackupDatabases', __args__, opts=opts, typ=GetBackupDatabasesResult).value

    return AwaitableGetBackupDatabasesResult(
        backup_id=pulumi.get(__ret__, 'backup_id'),
        bucket_name=pulumi.get(__ret__, 'bucket_name'),
        database_limit=pulumi.get(__ret__, 'database_limit'),
        databases=pulumi.get(__ret__, 'databases'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'))
def get_backup_databases_output(backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                                instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupDatabasesResult]:
    """
    Use this data source to query databases contained in a database level backup in a specified RDS instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    backup_id = config.require_object("backupId")
    test = huaweicloud.Rds.get_backup_databases(instance_id=instance_id,
        backup_id=backup_id)
    ```


    :param _builtins.str backup_id: Specifies the ID of the backup.
    :param _builtins.str instance_id: Specifies the ID of the RDS instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Rds/getBackupDatabases:getBackupDatabases', __args__, opts=opts, typ=GetBackupDatabasesResult)
    return __ret__.apply(lambda __response__: GetBackupDatabasesResult(
        backup_id=pulumi.get(__response__, 'backup_id'),
        bucket_name=pulumi.get(__response__, 'bucket_name'),
        database_limit=pulumi.get(__response__, 'database_limit'),
        databases=pulumi.get(__response__, 'databases'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region')))
