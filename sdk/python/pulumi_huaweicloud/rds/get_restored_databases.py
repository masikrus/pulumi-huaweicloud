# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRestoredDatabasesResult',
    'AwaitableGetRestoredDatabasesResult',
    'get_restored_databases',
    'get_restored_databases_output',
]

@pulumi.output_type
class GetRestoredDatabasesResult:
    """
    A collection of values returned by getRestoredDatabases.
    """
    def __init__(__self__, database_limit=None, database_name_like=None, engine=None, id=None, instance_ids=None, instance_name_like=None, instances=None, region=None, restore_time=None, table_limit=None):
        if database_limit and not isinstance(database_limit, int):
            raise TypeError("Expected argument 'database_limit' to be a int")
        pulumi.set(__self__, "database_limit", database_limit)
        if database_name_like and not isinstance(database_name_like, str):
            raise TypeError("Expected argument 'database_name_like' to be a str")
        pulumi.set(__self__, "database_name_like", database_name_like)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError("Expected argument 'instance_ids' to be a list")
        pulumi.set(__self__, "instance_ids", instance_ids)
        if instance_name_like and not isinstance(instance_name_like, str):
            raise TypeError("Expected argument 'instance_name_like' to be a str")
        pulumi.set(__self__, "instance_name_like", instance_name_like)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if restore_time and not isinstance(restore_time, str):
            raise TypeError("Expected argument 'restore_time' to be a str")
        pulumi.set(__self__, "restore_time", restore_time)
        if table_limit and not isinstance(table_limit, int):
            raise TypeError("Expected argument 'table_limit' to be a int")
        pulumi.set(__self__, "table_limit", table_limit)

    @_builtins.property
    @pulumi.getter(name="databaseLimit")
    def database_limit(self) -> _builtins.int:
        """
        Indicates the maximum number of databases that can be restored for a single instance. If the number
        of databases queried exceeds this limit, only the databases within this limit are returned to the response.
        """
        return pulumi.get(self, "database_limit")

    @_builtins.property
    @pulumi.getter(name="databaseNameLike")
    def database_name_like(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "database_name_like")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "instance_ids")

    @_builtins.property
    @pulumi.getter(name="instanceNameLike")
    def instance_name_like(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_name_like")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetRestoredDatabasesInstanceResult']:
        """
        Indicates the instance information.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> _builtins.str:
        return pulumi.get(self, "restore_time")

    @_builtins.property
    @pulumi.getter(name="tableLimit")
    def table_limit(self) -> _builtins.int:
        """
        Indicates the maximum number of tables in all databases that can be restored for a single instance. If
        the number of tables queried exceeds this limit, only the databases whose total number of tables is within this limit
        are returned to the response.
        """
        return pulumi.get(self, "table_limit")


class AwaitableGetRestoredDatabasesResult(GetRestoredDatabasesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRestoredDatabasesResult(
            database_limit=self.database_limit,
            database_name_like=self.database_name_like,
            engine=self.engine,
            id=self.id,
            instance_ids=self.instance_ids,
            instance_name_like=self.instance_name_like,
            instances=self.instances,
            region=self.region,
            restore_time=self.restore_time,
            table_limit=self.table_limit)


def get_restored_databases(database_name_like: Optional[_builtins.str] = None,
                           engine: Optional[_builtins.str] = None,
                           instance_ids: Optional[Sequence[_builtins.str]] = None,
                           instance_name_like: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           restore_time: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRestoredDatabasesResult:
    """
    Use this data source to get the databases that can be restored to a specified point in time.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    restore_time = config.require_object("restoreTime")
    test = huaweicloud.Rds.get_restored_databases(engine="postgresql",
        instance_ids=[instance_id],
        restore_time=restore_time)
    ```


    :param _builtins.str database_name_like: Specifies the database name, which can be used for fuzzy query.
    :param _builtins.str engine: Specifies the database engine. The supported engines are as follows, not case-sensitive:
           **postgresql**, **mysql**.
    :param Sequence[_builtins.str] instance_ids: Specifies the RDS instance IDs.
    :param _builtins.str instance_name_like: Specifies the instance name, which can be used for fuzzy query.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str restore_time: Specifies the restoration time point. A timestamp in milliseconds is used.
    """
    __args__ = dict()
    __args__['databaseNameLike'] = database_name_like
    __args__['engine'] = engine
    __args__['instanceIds'] = instance_ids
    __args__['instanceNameLike'] = instance_name_like
    __args__['region'] = region
    __args__['restoreTime'] = restore_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getRestoredDatabases:getRestoredDatabases', __args__, opts=opts, typ=GetRestoredDatabasesResult).value

    return AwaitableGetRestoredDatabasesResult(
        database_limit=pulumi.get(__ret__, 'database_limit'),
        database_name_like=pulumi.get(__ret__, 'database_name_like'),
        engine=pulumi.get(__ret__, 'engine'),
        id=pulumi.get(__ret__, 'id'),
        instance_ids=pulumi.get(__ret__, 'instance_ids'),
        instance_name_like=pulumi.get(__ret__, 'instance_name_like'),
        instances=pulumi.get(__ret__, 'instances'),
        region=pulumi.get(__ret__, 'region'),
        restore_time=pulumi.get(__ret__, 'restore_time'),
        table_limit=pulumi.get(__ret__, 'table_limit'))
def get_restored_databases_output(database_name_like: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  engine: Optional[pulumi.Input[_builtins.str]] = None,
                                  instance_ids: Optional[pulumi.Input[Sequence[_builtins.str]]] = None,
                                  instance_name_like: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  restore_time: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRestoredDatabasesResult]:
    """
    Use this data source to get the databases that can be restored to a specified point in time.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    restore_time = config.require_object("restoreTime")
    test = huaweicloud.Rds.get_restored_databases(engine="postgresql",
        instance_ids=[instance_id],
        restore_time=restore_time)
    ```


    :param _builtins.str database_name_like: Specifies the database name, which can be used for fuzzy query.
    :param _builtins.str engine: Specifies the database engine. The supported engines are as follows, not case-sensitive:
           **postgresql**, **mysql**.
    :param Sequence[_builtins.str] instance_ids: Specifies the RDS instance IDs.
    :param _builtins.str instance_name_like: Specifies the instance name, which can be used for fuzzy query.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str restore_time: Specifies the restoration time point. A timestamp in milliseconds is used.
    """
    __args__ = dict()
    __args__['databaseNameLike'] = database_name_like
    __args__['engine'] = engine
    __args__['instanceIds'] = instance_ids
    __args__['instanceNameLike'] = instance_name_like
    __args__['region'] = region
    __args__['restoreTime'] = restore_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Rds/getRestoredDatabases:getRestoredDatabases', __args__, opts=opts, typ=GetRestoredDatabasesResult)
    return __ret__.apply(lambda __response__: GetRestoredDatabasesResult(
        database_limit=pulumi.get(__response__, 'database_limit'),
        database_name_like=pulumi.get(__response__, 'database_name_like'),
        engine=pulumi.get(__response__, 'engine'),
        id=pulumi.get(__response__, 'id'),
        instance_ids=pulumi.get(__response__, 'instance_ids'),
        instance_name_like=pulumi.get(__response__, 'instance_name_like'),
        instances=pulumi.get(__response__, 'instances'),
        region=pulumi.get(__response__, 'region'),
        restore_time=pulumi.get(__response__, 'restore_time'),
        table_limit=pulumi.get(__response__, 'table_limit')))
