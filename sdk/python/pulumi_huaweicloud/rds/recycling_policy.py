# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['RecyclingPolicyArgs', 'RecyclingPolicy']

@pulumi.input_type
class RecyclingPolicyArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_period_in_days: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a RecyclingPolicy resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the recycling policy resource. If omitted, the
               provider-level region will be used. Changing this creates a new rds instance resource.
        :param pulumi.Input[_builtins.int] retention_period_in_days: Specifies the period of retaining deleted DB instances. Value ranges
               from `1` day to `7` days. Defaults to `7`.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if retention_period_in_days is not None:
            pulumi.set(__self__, "retention_period_in_days", retention_period_in_days)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the recycling policy resource. If omitted, the
        provider-level region will be used. Changing this creates a new rds instance resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="retentionPeriodInDays")
    def retention_period_in_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the period of retaining deleted DB instances. Value ranges
        from `1` day to `7` days. Defaults to `7`.
        """
        return pulumi.get(self, "retention_period_in_days")

    @retention_period_in_days.setter
    def retention_period_in_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_period_in_days", value)


@pulumi.input_type
class _RecyclingPolicyState:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_period_in_days: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering RecyclingPolicy resources.
        :param pulumi.Input[_builtins.str] region: The region in which to create the recycling policy resource. If omitted, the
               provider-level region will be used. Changing this creates a new rds instance resource.
        :param pulumi.Input[_builtins.int] retention_period_in_days: Specifies the period of retaining deleted DB instances. Value ranges
               from `1` day to `7` days. Defaults to `7`.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if retention_period_in_days is not None:
            pulumi.set(__self__, "retention_period_in_days", retention_period_in_days)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the recycling policy resource. If omitted, the
        provider-level region will be used. Changing this creates a new rds instance resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="retentionPeriodInDays")
    def retention_period_in_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the period of retaining deleted DB instances. Value ranges
        from `1` day to `7` days. Defaults to `7`.
        """
        return pulumi.get(self, "retention_period_in_days")

    @retention_period_in_days.setter
    def retention_period_in_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_period_in_days", value)


@pulumi.type_token("huaweicloud:Rds/recyclingPolicy:RecyclingPolicy")
class RecyclingPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_period_in_days: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manage an RDS recycling policy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.rds.RecyclingPolicy("test", retention_period_in_days=5)
        ```

        ## Import

        The RDS recycling policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Rds/recyclingPolicy:RecyclingPolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the recycling policy resource. If omitted, the
               provider-level region will be used. Changing this creates a new rds instance resource.
        :param pulumi.Input[_builtins.int] retention_period_in_days: Specifies the period of retaining deleted DB instances. Value ranges
               from `1` day to `7` days. Defaults to `7`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RecyclingPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage an RDS recycling policy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.rds.RecyclingPolicy("test", retention_period_in_days=5)
        ```

        ## Import

        The RDS recycling policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Rds/recyclingPolicy:RecyclingPolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param RecyclingPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RecyclingPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_period_in_days: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RecyclingPolicyArgs.__new__(RecyclingPolicyArgs)

            __props__.__dict__["region"] = region
            __props__.__dict__["retention_period_in_days"] = retention_period_in_days
        super(RecyclingPolicy, __self__).__init__(
            'huaweicloud:Rds/recyclingPolicy:RecyclingPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            retention_period_in_days: Optional[pulumi.Input[_builtins.int]] = None) -> 'RecyclingPolicy':
        """
        Get an existing RecyclingPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: The region in which to create the recycling policy resource. If omitted, the
               provider-level region will be used. Changing this creates a new rds instance resource.
        :param pulumi.Input[_builtins.int] retention_period_in_days: Specifies the period of retaining deleted DB instances. Value ranges
               from `1` day to `7` days. Defaults to `7`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RecyclingPolicyState.__new__(_RecyclingPolicyState)

        __props__.__dict__["region"] = region
        __props__.__dict__["retention_period_in_days"] = retention_period_in_days
        return RecyclingPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the recycling policy resource. If omitted, the
        provider-level region will be used. Changing this creates a new rds instance resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="retentionPeriodInDays")
    def retention_period_in_days(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the period of retaining deleted DB instances. Value ranges
        from `1` day to `7` days. Defaults to `7`.
        """
        return pulumi.get(self, "retention_period_in_days")

