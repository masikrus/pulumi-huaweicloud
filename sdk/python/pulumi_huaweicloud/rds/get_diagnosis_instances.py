# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDiagnosisInstancesResult',
    'AwaitableGetDiagnosisInstancesResult',
    'get_diagnosis_instances',
    'get_diagnosis_instances_output',
]

@pulumi.output_type
class GetDiagnosisInstancesResult:
    """
    A collection of values returned by getDiagnosisInstances.
    """
    def __init__(__self__, diagnosis=None, engine=None, id=None, instances=None, region=None):
        if diagnosis and not isinstance(diagnosis, str):
            raise TypeError("Expected argument 'diagnosis' to be a str")
        pulumi.set(__self__, "diagnosis", diagnosis)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def diagnosis(self) -> _builtins.str:
        return pulumi.get(self, "diagnosis")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetDiagnosisInstancesInstanceResult']:
        """
        Indicates the list of instance objects affected by the diagnosis result.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDiagnosisInstancesResult(GetDiagnosisInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiagnosisInstancesResult(
            diagnosis=self.diagnosis,
            engine=self.engine,
            id=self.id,
            instances=self.instances,
            region=self.region)


def get_diagnosis_instances(diagnosis: Optional[_builtins.str] = None,
                            engine: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiagnosisInstancesResult:
    """
    Use this data source to obtain the diagnosis result of a specified diagnosis item for RDS instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    engine = config.require_object("engine")
    diagnosis = config.require_object("diagnosis")
    test = huaweicloud.Rds.get_diagnosis_instances(engine=engine,
        diagnosis=diagnosis)
    ```


    :param _builtins.str diagnosis: Specifies the diagnosis item. The valid values are:
           **high_pressure**, **lock_wait**, **insufficient_capacity**, **slow_sql_frequency**, **age_exceed**,
           **disk_performance_cap**, **mem_overrun**, **connections_exceed**.
    :param _builtins.str engine: Specifies the RDS engine type. The valid values are:
           **mysql**, **postgresql**, **sqlserver**.
    :param _builtins.str region: Specifies the region in which to query the resource. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['diagnosis'] = diagnosis
    __args__['engine'] = engine
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getDiagnosisInstances:getDiagnosisInstances', __args__, opts=opts, typ=GetDiagnosisInstancesResult).value

    return AwaitableGetDiagnosisInstancesResult(
        diagnosis=pulumi.get(__ret__, 'diagnosis'),
        engine=pulumi.get(__ret__, 'engine'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        region=pulumi.get(__ret__, 'region'))
def get_diagnosis_instances_output(diagnosis: Optional[pulumi.Input[_builtins.str]] = None,
                                   engine: Optional[pulumi.Input[_builtins.str]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDiagnosisInstancesResult]:
    """
    Use this data source to obtain the diagnosis result of a specified diagnosis item for RDS instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    engine = config.require_object("engine")
    diagnosis = config.require_object("diagnosis")
    test = huaweicloud.Rds.get_diagnosis_instances(engine=engine,
        diagnosis=diagnosis)
    ```


    :param _builtins.str diagnosis: Specifies the diagnosis item. The valid values are:
           **high_pressure**, **lock_wait**, **insufficient_capacity**, **slow_sql_frequency**, **age_exceed**,
           **disk_performance_cap**, **mem_overrun**, **connections_exceed**.
    :param _builtins.str engine: Specifies the RDS engine type. The valid values are:
           **mysql**, **postgresql**, **sqlserver**.
    :param _builtins.str region: Specifies the region in which to query the resource. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['diagnosis'] = diagnosis
    __args__['engine'] = engine
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Rds/getDiagnosisInstances:getDiagnosisInstances', __args__, opts=opts, typ=GetDiagnosisInstancesResult)
    return __ret__.apply(lambda __response__: GetDiagnosisInstancesResult(
        diagnosis=pulumi.get(__response__, 'diagnosis'),
        engine=pulumi.get(__response__, 'engine'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        region=pulumi.get(__response__, 'region')))
