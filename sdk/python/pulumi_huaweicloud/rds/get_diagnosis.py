# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDiagnosisResult',
    'AwaitableGetDiagnosisResult',
    'get_diagnosis',
    'get_diagnosis_output',
]

@pulumi.output_type
class GetDiagnosisResult:
    """
    A collection of values returned by getDiagnosis.
    """
    def __init__(__self__, diagnoses=None, engine=None, id=None, region=None):
        if diagnoses and not isinstance(diagnoses, list):
            raise TypeError("Expected argument 'diagnoses' to be a list")
        pulumi.set(__self__, "diagnoses", diagnoses)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def diagnoses(self) -> Sequence['outputs.GetDiagnosisDiagnosisResult']:
        """
        Indicates the list of diagnosis result objects.
        """
        return pulumi.get(self, "diagnoses")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDiagnosisResult(GetDiagnosisResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiagnosisResult(
            diagnoses=self.diagnoses,
            engine=self.engine,
            id=self.id,
            region=self.region)


def get_diagnosis(engine: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiagnosisResult:
    """
    Use this data source to query the number of diagnosed RDS instances by diagnosis type for a specific database engine.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    engine = config.require_object("engine")
    test = huaweicloud.Rds.get_diagnosis(engine=engine)
    ```


    :param _builtins.str engine: Specifies the RDS engine type.
           The valid values are **mysql**, **postgresql**, **sqlserver**.
    :param _builtins.str region: Specifies the region in which to query the resource. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['engine'] = engine
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getDiagnosis:getDiagnosis', __args__, opts=opts, typ=GetDiagnosisResult).value

    return AwaitableGetDiagnosisResult(
        diagnoses=pulumi.get(__ret__, 'diagnoses'),
        engine=pulumi.get(__ret__, 'engine'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_diagnosis_output(engine: Optional[pulumi.Input[_builtins.str]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDiagnosisResult]:
    """
    Use this data source to query the number of diagnosed RDS instances by diagnosis type for a specific database engine.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    engine = config.require_object("engine")
    test = huaweicloud.Rds.get_diagnosis(engine=engine)
    ```


    :param _builtins.str engine: Specifies the RDS engine type.
           The valid values are **mysql**, **postgresql**, **sqlserver**.
    :param _builtins.str region: Specifies the region in which to query the resource. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['engine'] = engine
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Rds/getDiagnosis:getDiagnosis', __args__, opts=opts, typ=GetDiagnosisResult)
    return __ret__.apply(lambda __response__: GetDiagnosisResult(
        diagnoses=pulumi.get(__response__, 'diagnoses'),
        engine=pulumi.get(__response__, 'engine'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
