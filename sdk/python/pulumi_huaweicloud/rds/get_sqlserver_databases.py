# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSqlserverDatabasesResult',
    'AwaitableGetSqlserverDatabasesResult',
    'get_sqlserver_databases',
    'get_sqlserver_databases_output',
]

@pulumi.output_type
class GetSqlserverDatabasesResult:
    """
    A collection of values returned by getSqlserverDatabases.
    """
    def __init__(__self__, character_set=None, databases=None, id=None, instance_id=None, name=None, region=None, state=None):
        if character_set and not isinstance(character_set, str):
            raise TypeError("Expected argument 'character_set' to be a str")
        pulumi.set(__self__, "character_set", character_set)
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        pulumi.set(__self__, "databases", databases)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> Optional[_builtins.str]:
        """
        Indicates the character set used by the database.
        """
        return pulumi.get(self, "character_set")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetSqlserverDatabasesDatabaseResult']:
        """
        The list of databases.
        The databases structure is documented below.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the database name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        Indicates the database status.
        """
        return pulumi.get(self, "state")


class AwaitableGetSqlserverDatabasesResult(GetSqlserverDatabasesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSqlserverDatabasesResult(
            character_set=self.character_set,
            databases=self.databases,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            state=self.state)


def get_sqlserver_databases(character_set: Optional[_builtins.str] = None,
                            instance_id: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            state: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSqlserverDatabasesResult:
    """
    Use this data source to get the list of RDS SQLServer databases.


    :param _builtins.str character_set: Specifies the character set used by the database.
    :param _builtins.str instance_id: Specifies the ID of the RDS SQLServer instance.
    :param _builtins.str name: Specifies the database name.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str state: Specifies the database status.
    """
    __args__ = dict()
    __args__['characterSet'] = character_set
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getSqlserverDatabases:getSqlserverDatabases', __args__, opts=opts, typ=GetSqlserverDatabasesResult).value

    return AwaitableGetSqlserverDatabasesResult(
        character_set=pulumi.get(__ret__, 'character_set'),
        databases=pulumi.get(__ret__, 'databases'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        state=pulumi.get(__ret__, 'state'))
def get_sqlserver_databases_output(character_set: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSqlserverDatabasesResult]:
    """
    Use this data source to get the list of RDS SQLServer databases.


    :param _builtins.str character_set: Specifies the character set used by the database.
    :param _builtins.str instance_id: Specifies the ID of the RDS SQLServer instance.
    :param _builtins.str name: Specifies the database name.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str state: Specifies the database status.
    """
    __args__ = dict()
    __args__['characterSet'] = character_set
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['state'] = state
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Rds/getSqlserverDatabases:getSqlserverDatabases', __args__, opts=opts, typ=GetSqlserverDatabasesResult)
    return __ret__.apply(lambda __response__: GetSqlserverDatabasesResult(
        character_set=pulumi.get(__response__, 'character_set'),
        databases=pulumi.get(__response__, 'databases'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        state=pulumi.get(__response__, 'state')))
