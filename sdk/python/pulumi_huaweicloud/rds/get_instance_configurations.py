# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceConfigurationsResult',
    'AwaitableGetInstanceConfigurationsResult',
    'get_instance_configurations',
    'get_instance_configurations_output',
]

@pulumi.output_type
class GetInstanceConfigurationsResult:
    """
    A collection of values returned by getInstanceConfigurations.
    """
    def __init__(__self__, configuration_parameters=None, created=None, datastore_name=None, datastore_version_name=None, id=None, instance_id=None, region=None, updated=None):
        if configuration_parameters and not isinstance(configuration_parameters, list):
            raise TypeError("Expected argument 'configuration_parameters' to be a list")
        pulumi.set(__self__, "configuration_parameters", configuration_parameters)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if datastore_name and not isinstance(datastore_name, str):
            raise TypeError("Expected argument 'datastore_name' to be a str")
        pulumi.set(__self__, "datastore_name", datastore_name)
        if datastore_version_name and not isinstance(datastore_version_name, str):
            raise TypeError("Expected argument 'datastore_version_name' to be a str")
        pulumi.set(__self__, "datastore_version_name", datastore_version_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)

    @_builtins.property
    @pulumi.getter(name="configurationParameters")
    def configuration_parameters(self) -> Sequence['outputs.GetInstanceConfigurationsConfigurationParameterResult']:
        """
        Indicates the list of configuration parameters for the RDS instance.
        """
        return pulumi.get(self, "configuration_parameters")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        """
        Indicates the creation time. The value is in the **yyyy-mm-ddThh:mm:ssZ** format.
        T is the separator between the calendar and the hourly notation of time. Z indicates the time
        zone offset. For example, in the Beijing time zone, the time zone offset is shown as +0800.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> _builtins.str:
        """
        Indicates the database engine type.
        """
        return pulumi.get(self, "datastore_name")

    @_builtins.property
    @pulumi.getter(name="datastoreVersionName")
    def datastore_version_name(self) -> _builtins.str:
        """
        Indicates the database engine version.
        """
        return pulumi.get(self, "datastore_version_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        """
        Indicates the last update time of the configuration. The value is in the **yyyy-mm-ddThh:mm:ssZ** format.
        T is the separator between the calendar and the hourly notation of time. Z indicates the time
        zone offset. For example, in the Beijing time zone, the time zone offset is shown as +0800.
        """
        return pulumi.get(self, "updated")


class AwaitableGetInstanceConfigurationsResult(GetInstanceConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceConfigurationsResult(
            configuration_parameters=self.configuration_parameters,
            created=self.created,
            datastore_name=self.datastore_name,
            datastore_version_name=self.datastore_version_name,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            updated=self.updated)


def get_instance_configurations(instance_id: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceConfigurationsResult:
    """
    Use this data source to retrieve the configuration parameters of a specific RDS instance in HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_instance_configurations(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the RDS instance.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getInstanceConfigurations:getInstanceConfigurations', __args__, opts=opts, typ=GetInstanceConfigurationsResult).value

    return AwaitableGetInstanceConfigurationsResult(
        configuration_parameters=pulumi.get(__ret__, 'configuration_parameters'),
        created=pulumi.get(__ret__, 'created'),
        datastore_name=pulumi.get(__ret__, 'datastore_name'),
        datastore_version_name=pulumi.get(__ret__, 'datastore_version_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        updated=pulumi.get(__ret__, 'updated'))
def get_instance_configurations_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstanceConfigurationsResult]:
    """
    Use this data source to retrieve the configuration parameters of a specific RDS instance in HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_instance_configurations(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the RDS instance.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Rds/getInstanceConfigurations:getInstanceConfigurations', __args__, opts=opts, typ=GetInstanceConfigurationsResult)
    return __ret__.apply(lambda __response__: GetInstanceConfigurationsResult(
        configuration_parameters=pulumi.get(__response__, 'configuration_parameters'),
        created=pulumi.get(__response__, 'created'),
        datastore_name=pulumi.get(__response__, 'datastore_name'),
        datastore_version_name=pulumi.get(__response__, 'datastore_version_name'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        updated=pulumi.get(__response__, 'updated')))
