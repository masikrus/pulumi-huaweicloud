# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OpengaussParameterTemplateArgs', 'OpengaussParameterTemplate']

@pulumi.input_type
class OpengaussParameterTemplateArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussParameterTemplateParameterArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_configuration_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a OpengaussParameterTemplate resource.
        :param pulumi.Input[_builtins.str] description: Specifies the Parameter template description. This parameter is left blank
               by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
               allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] engine_version: Specifies the DB engine version.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `instance_mode` is specified, and can not be specified when `source_configuration_id`
               is specified.
        :param pulumi.Input[_builtins.str] instance_mode: Specifies the deployment model.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `engine_version` is specified, and can not be specified when `source_configuration_id`
               is specified.
        :param pulumi.Input[_builtins.str] name: Specifies the name of a specific parameter.
        :param pulumi.Input[Sequence[pulumi.Input['OpengaussParameterTemplateParameterArgs']]] parameters: Specifies the list of the template parameters.
               The parameters structure is documented below.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It can not be specified when `source_configuration_id` is specified.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_configuration_id: Specifies the source parameter template ID.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It can not be specified when `engine_version`, `instance_mode` or `parameters` are specified.
               
               > **NOTE:** Exactly one of `engine_version` and `source_configuration_id` must be provided.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if instance_mode is not None:
            pulumi.set(__self__, "instance_mode", instance_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_configuration_id is not None:
            pulumi.set(__self__, "source_configuration_id", source_configuration_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Parameter template description. This parameter is left blank
        by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
        allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DB engine version.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `instance_mode` is specified, and can not be specified when `source_configuration_id`
        is specified.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_version", value)

    @_builtins.property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the deployment model.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `engine_version` is specified, and can not be specified when `source_configuration_id`
        is specified.
        """
        return pulumi.get(self, "instance_mode")

    @instance_mode.setter
    def instance_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of a specific parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussParameterTemplateParameterArgs']]]]:
        """
        Specifies the list of the template parameters.
        The parameters structure is documented below.

        Changing this parameter will create a new resource.

        > **NOTE:** It can not be specified when `source_configuration_id` is specified.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussParameterTemplateParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceConfigurationId")
    def source_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source parameter template ID.

        Changing this parameter will create a new resource.

        > **NOTE:** It can not be specified when `engine_version`, `instance_mode` or `parameters` are specified.

        > **NOTE:** Exactly one of `engine_version` and `source_configuration_id` must be provided.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "source_configuration_id")

    @source_configuration_id.setter
    def source_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_configuration_id", value)


@pulumi.input_type
class _OpengaussParameterTemplateState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussParameterTemplateParameterArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering OpengaussParameterTemplate resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param pulumi.Input[_builtins.str] description: Specifies the Parameter template description. This parameter is left blank
               by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
               allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] engine_version: Specifies the DB engine version.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `instance_mode` is specified, and can not be specified when `source_configuration_id`
               is specified.
        :param pulumi.Input[_builtins.str] instance_mode: Specifies the deployment model.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `engine_version` is specified, and can not be specified when `source_configuration_id`
               is specified.
        :param pulumi.Input[_builtins.str] name: Specifies the name of a specific parameter.
        :param pulumi.Input[Sequence[pulumi.Input['OpengaussParameterTemplateParameterArgs']]] parameters: Specifies the list of the template parameters.
               The parameters structure is documented below.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It can not be specified when `source_configuration_id` is specified.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_configuration_id: Specifies the source parameter template ID.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It can not be specified when `engine_version`, `instance_mode` or `parameters` are specified.
               
               > **NOTE:** Exactly one of `engine_version` and `source_configuration_id` must be provided.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] updated_at: Indicates the modification time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if instance_mode is not None:
            pulumi.set(__self__, "instance_mode", instance_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_configuration_id is not None:
            pulumi.set(__self__, "source_configuration_id", source_configuration_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Parameter template description. This parameter is left blank
        by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
        allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DB engine version.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `instance_mode` is specified, and can not be specified when `source_configuration_id`
        is specified.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_version", value)

    @_builtins.property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the deployment model.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `engine_version` is specified, and can not be specified when `source_configuration_id`
        is specified.
        """
        return pulumi.get(self, "instance_mode")

    @instance_mode.setter
    def instance_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of a specific parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussParameterTemplateParameterArgs']]]]:
        """
        Specifies the list of the template parameters.
        The parameters structure is documented below.

        Changing this parameter will create a new resource.

        > **NOTE:** It can not be specified when `source_configuration_id` is specified.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussParameterTemplateParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceConfigurationId")
    def source_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source parameter template ID.

        Changing this parameter will create a new resource.

        > **NOTE:** It can not be specified when `engine_version`, `instance_mode` or `parameters` are specified.

        > **NOTE:** Exactly one of `engine_version` and `source_configuration_id` must be provided.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "source_configuration_id")

    @source_configuration_id.setter
    def source_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the modification time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:GaussDBforOpenGauss/opengaussParameterTemplate:OpengaussParameterTemplate")
class OpengaussParameterTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OpengaussParameterTemplateParameterArgs', 'OpengaussParameterTemplateParameterArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB OpenGauss parameter template resource within HuaweiCloud.

        ## Example Usage

        ### create parameter template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.gaussdbforopengauss.OpengaussParameterTemplate("test",
            name="test_gaussdb_opengauss_parameter_template",
            engine_version="8.201",
            instance_mode="independent",
            parameters=[
                {
                    "name": "audit_system_object",
                    "value": "100",
                },
                {
                    "name": "cms:enable_finishredo_retrieve",
                    "value": "on",
                },
            ])
        ```

        ### replica parameter template from existed configuration

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_configuration_id = config.require_object("sourceConfigurationId")
        test = huaweicloud.gaussdbforopengauss.OpengaussParameterTemplate("test",
            name="test_copy_from_configuration",
            source_configuration_id=source_configuration_id)
        ```

        ## Import

        The GaussDB OpenGauss parameter template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDBforOpenGauss/opengaussParameterTemplate:OpengaussParameterTemplate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `source_configuration_id` and `parameters`.

        It is generally recommended running `pulumi preview` after importing a GaussDB OpenGauss parameter template. You can then

        decide if changes should be applied to the GaussDB OpenGauss parameter template, or the resource definition should be

        updated to align with the GaussDB OpenGauss parameter template. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_gaussdb_opengauss_parameter_template" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              source_configuration_id, parameters,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the Parameter template description. This parameter is left blank
               by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
               allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] engine_version: Specifies the DB engine version.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `instance_mode` is specified, and can not be specified when `source_configuration_id`
               is specified.
        :param pulumi.Input[_builtins.str] instance_mode: Specifies the deployment model.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `engine_version` is specified, and can not be specified when `source_configuration_id`
               is specified.
        :param pulumi.Input[_builtins.str] name: Specifies the name of a specific parameter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OpengaussParameterTemplateParameterArgs', 'OpengaussParameterTemplateParameterArgsDict']]]] parameters: Specifies the list of the template parameters.
               The parameters structure is documented below.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It can not be specified when `source_configuration_id` is specified.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_configuration_id: Specifies the source parameter template ID.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It can not be specified when `engine_version`, `instance_mode` or `parameters` are specified.
               
               > **NOTE:** Exactly one of `engine_version` and `source_configuration_id` must be provided.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OpengaussParameterTemplateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB OpenGauss parameter template resource within HuaweiCloud.

        ## Example Usage

        ### create parameter template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.gaussdbforopengauss.OpengaussParameterTemplate("test",
            name="test_gaussdb_opengauss_parameter_template",
            engine_version="8.201",
            instance_mode="independent",
            parameters=[
                {
                    "name": "audit_system_object",
                    "value": "100",
                },
                {
                    "name": "cms:enable_finishredo_retrieve",
                    "value": "on",
                },
            ])
        ```

        ### replica parameter template from existed configuration

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_configuration_id = config.require_object("sourceConfigurationId")
        test = huaweicloud.gaussdbforopengauss.OpengaussParameterTemplate("test",
            name="test_copy_from_configuration",
            source_configuration_id=source_configuration_id)
        ```

        ## Import

        The GaussDB OpenGauss parameter template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDBforOpenGauss/opengaussParameterTemplate:OpengaussParameterTemplate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `source_configuration_id` and `parameters`.

        It is generally recommended running `pulumi preview` after importing a GaussDB OpenGauss parameter template. You can then

        decide if changes should be applied to the GaussDB OpenGauss parameter template, or the resource definition should be

        updated to align with the GaussDB OpenGauss parameter template. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_gaussdb_opengauss_parameter_template" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              source_configuration_id, parameters,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param OpengaussParameterTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OpengaussParameterTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OpengaussParameterTemplateParameterArgs', 'OpengaussParameterTemplateParameterArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OpengaussParameterTemplateArgs.__new__(OpengaussParameterTemplateArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["instance_mode"] = instance_mode
            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["region"] = region
            __props__.__dict__["source_configuration_id"] = source_configuration_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(OpengaussParameterTemplate, __self__).__init__(
            'huaweicloud:GaussDBforOpenGauss/opengaussParameterTemplate:OpengaussParameterTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            engine_version: Optional[pulumi.Input[_builtins.str]] = None,
            instance_mode: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OpengaussParameterTemplateParameterArgs', 'OpengaussParameterTemplateParameterArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'OpengaussParameterTemplate':
        """
        Get an existing OpengaussParameterTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param pulumi.Input[_builtins.str] description: Specifies the Parameter template description. This parameter is left blank
               by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
               allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] engine_version: Specifies the DB engine version.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `instance_mode` is specified, and can not be specified when `source_configuration_id`
               is specified.
        :param pulumi.Input[_builtins.str] instance_mode: Specifies the deployment model.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `engine_version` is specified, and can not be specified when `source_configuration_id`
               is specified.
        :param pulumi.Input[_builtins.str] name: Specifies the name of a specific parameter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OpengaussParameterTemplateParameterArgs', 'OpengaussParameterTemplateParameterArgsDict']]]] parameters: Specifies the list of the template parameters.
               The parameters structure is documented below.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It can not be specified when `source_configuration_id` is specified.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_configuration_id: Specifies the source parameter template ID.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It can not be specified when `engine_version`, `instance_mode` or `parameters` are specified.
               
               > **NOTE:** Exactly one of `engine_version` and `source_configuration_id` must be provided.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] updated_at: Indicates the modification time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OpengaussParameterTemplateState.__new__(_OpengaussParameterTemplateState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["instance_mode"] = instance_mode
        __props__.__dict__["name"] = name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["region"] = region
        __props__.__dict__["source_configuration_id"] = source_configuration_id
        __props__.__dict__["updated_at"] = updated_at
        return OpengaussParameterTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the Parameter template description. This parameter is left blank
        by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
        allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DB engine version.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `instance_mode` is specified, and can not be specified when `source_configuration_id`
        is specified.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the deployment model.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `engine_version` is specified, and can not be specified when `source_configuration_id`
        is specified.
        """
        return pulumi.get(self, "instance_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of a specific parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Sequence['outputs.OpengaussParameterTemplateParameter']]:
        """
        Specifies the list of the template parameters.
        The parameters structure is documented below.

        Changing this parameter will create a new resource.

        > **NOTE:** It can not be specified when `source_configuration_id` is specified.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sourceConfigurationId")
    def source_configuration_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the source parameter template ID.

        Changing this parameter will create a new resource.

        > **NOTE:** It can not be specified when `engine_version`, `instance_mode` or `parameters` are specified.

        > **NOTE:** Exactly one of `engine_version` and `source_configuration_id` must be provided.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "source_configuration_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the modification time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "updated_at")

