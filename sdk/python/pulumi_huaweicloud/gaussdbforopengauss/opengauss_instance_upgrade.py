# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['OpengaussInstanceUpgradeArgs', 'OpengaussInstanceUpgrade']

@pulumi.input_type
class OpengaussInstanceUpgradeArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 upgrade_type: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_action: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_az: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_shard_num: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a OpengaussInstanceUpgrade resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_type: Specifies the instance upgrade type. Value options:
               + **inplace**: In-place upgrade
               + **grey**: Gray upgrade
               + **hotfix**: Hot patch update
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_version: Specifies the target version that the instance will be upgraded to.
               In a hot patch update, multiple hot patch versions can be configured.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_action: Specifies the instance upgrade action. Value options:
               + **upgradeAutoCommit**: Auto-commit
               + **upgrade**: Rolling upgrade
               + **commit**: Commit
               + **rollback**: Rollback
               
               > **NOTE:** If `upgrade_type` is set to **inplace**, this parameter is optional.
               <br>If `upgrade_type` is set to **grey**, this parameter can be set to **upgradeAutoCommit**, **upgrade**, **commit**,
               or **rollback**.
               <br>If `upgrade_type` is set to **hotfix**, this parameter can be set to **upgradeAutoCommit** or **rollback**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_az: Specifies the AZ to be upgraded in a gray upgrade. It is mandatory when
               `upgrade_action` is set to **upgrade**. Multiple AZs can be upgraded at the same time. Use commas(,) to separate AZs.
               You cannot enter an AZ that does not belong to the instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] upgrade_shard_num: Specifies the number of shards to be upgraded in a gray upgrade for
               a distributed instance. It is mandatory when `upgrade_action` is set to **upgrade**. The value cannot be greater than
               the number of shards that have not been upgraded.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "upgrade_type", upgrade_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)
        if upgrade_action is not None:
            pulumi.set(__self__, "upgrade_action", upgrade_action)
        if upgrade_az is not None:
            pulumi.set(__self__, "upgrade_az", upgrade_az)
        if upgrade_shard_num is not None:
            pulumi.set(__self__, "upgrade_shard_num", upgrade_shard_num)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the GaussDB OpenGauss instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="upgradeType")
    def upgrade_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the instance upgrade type. Value options:
        + **inplace**: In-place upgrade
        + **grey**: Gray upgrade
        + **hotfix**: Hot patch update

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_type")

    @upgrade_type.setter
    def upgrade_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "upgrade_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target version that the instance will be upgraded to.
        In a hot patch update, multiple hot patch versions can be configured.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_version")

    @target_version.setter
    def target_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_version", value)

    @_builtins.property
    @pulumi.getter(name="upgradeAction")
    def upgrade_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the instance upgrade action. Value options:
        + **upgradeAutoCommit**: Auto-commit
        + **upgrade**: Rolling upgrade
        + **commit**: Commit
        + **rollback**: Rollback

        > **NOTE:** If `upgrade_type` is set to **inplace**, this parameter is optional.
        <br>If `upgrade_type` is set to **grey**, this parameter can be set to **upgradeAutoCommit**, **upgrade**, **commit**,
        or **rollback**.
        <br>If `upgrade_type` is set to **hotfix**, this parameter can be set to **upgradeAutoCommit** or **rollback**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_action")

    @upgrade_action.setter
    def upgrade_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "upgrade_action", value)

    @_builtins.property
    @pulumi.getter(name="upgradeAz")
    def upgrade_az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AZ to be upgraded in a gray upgrade. It is mandatory when
        `upgrade_action` is set to **upgrade**. Multiple AZs can be upgraded at the same time. Use commas(,) to separate AZs.
        You cannot enter an AZ that does not belong to the instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_az")

    @upgrade_az.setter
    def upgrade_az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "upgrade_az", value)

    @_builtins.property
    @pulumi.getter(name="upgradeShardNum")
    def upgrade_shard_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of shards to be upgraded in a gray upgrade for
        a distributed instance. It is mandatory when `upgrade_action` is set to **upgrade**. The value cannot be greater than
        the number of shards that have not been upgraded.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_shard_num")

    @upgrade_shard_num.setter
    def upgrade_shard_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "upgrade_shard_num", value)


@pulumi.input_type
class _OpengaussInstanceUpgradeState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_action: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_az: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_shard_num: Optional[pulumi.Input[_builtins.int]] = None,
                 upgrade_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering OpengaussInstanceUpgrade resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_version: Specifies the target version that the instance will be upgraded to.
               In a hot patch update, multiple hot patch versions can be configured.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_action: Specifies the instance upgrade action. Value options:
               + **upgradeAutoCommit**: Auto-commit
               + **upgrade**: Rolling upgrade
               + **commit**: Commit
               + **rollback**: Rollback
               
               > **NOTE:** If `upgrade_type` is set to **inplace**, this parameter is optional.
               <br>If `upgrade_type` is set to **grey**, this parameter can be set to **upgradeAutoCommit**, **upgrade**, **commit**,
               or **rollback**.
               <br>If `upgrade_type` is set to **hotfix**, this parameter can be set to **upgradeAutoCommit** or **rollback**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_az: Specifies the AZ to be upgraded in a gray upgrade. It is mandatory when
               `upgrade_action` is set to **upgrade**. Multiple AZs can be upgraded at the same time. Use commas(,) to separate AZs.
               You cannot enter an AZ that does not belong to the instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] upgrade_shard_num: Specifies the number of shards to be upgraded in a gray upgrade for
               a distributed instance. It is mandatory when `upgrade_action` is set to **upgrade**. The value cannot be greater than
               the number of shards that have not been upgraded.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_type: Specifies the instance upgrade type. Value options:
               + **inplace**: In-place upgrade
               + **grey**: Gray upgrade
               + **hotfix**: Hot patch update
               
               Changing this parameter will create a new resource.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)
        if upgrade_action is not None:
            pulumi.set(__self__, "upgrade_action", upgrade_action)
        if upgrade_az is not None:
            pulumi.set(__self__, "upgrade_az", upgrade_az)
        if upgrade_shard_num is not None:
            pulumi.set(__self__, "upgrade_shard_num", upgrade_shard_num)
        if upgrade_type is not None:
            pulumi.set(__self__, "upgrade_type", upgrade_type)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB OpenGauss instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target version that the instance will be upgraded to.
        In a hot patch update, multiple hot patch versions can be configured.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_version")

    @target_version.setter
    def target_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_version", value)

    @_builtins.property
    @pulumi.getter(name="upgradeAction")
    def upgrade_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the instance upgrade action. Value options:
        + **upgradeAutoCommit**: Auto-commit
        + **upgrade**: Rolling upgrade
        + **commit**: Commit
        + **rollback**: Rollback

        > **NOTE:** If `upgrade_type` is set to **inplace**, this parameter is optional.
        <br>If `upgrade_type` is set to **grey**, this parameter can be set to **upgradeAutoCommit**, **upgrade**, **commit**,
        or **rollback**.
        <br>If `upgrade_type` is set to **hotfix**, this parameter can be set to **upgradeAutoCommit** or **rollback**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_action")

    @upgrade_action.setter
    def upgrade_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "upgrade_action", value)

    @_builtins.property
    @pulumi.getter(name="upgradeAz")
    def upgrade_az(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the AZ to be upgraded in a gray upgrade. It is mandatory when
        `upgrade_action` is set to **upgrade**. Multiple AZs can be upgraded at the same time. Use commas(,) to separate AZs.
        You cannot enter an AZ that does not belong to the instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_az")

    @upgrade_az.setter
    def upgrade_az(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "upgrade_az", value)

    @_builtins.property
    @pulumi.getter(name="upgradeShardNum")
    def upgrade_shard_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of shards to be upgraded in a gray upgrade for
        a distributed instance. It is mandatory when `upgrade_action` is set to **upgrade**. The value cannot be greater than
        the number of shards that have not been upgraded.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_shard_num")

    @upgrade_shard_num.setter
    def upgrade_shard_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "upgrade_shard_num", value)

    @_builtins.property
    @pulumi.getter(name="upgradeType")
    def upgrade_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the instance upgrade type. Value options:
        + **inplace**: In-place upgrade
        + **grey**: Gray upgrade
        + **hotfix**: Hot patch update

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_type")

    @upgrade_type.setter
    def upgrade_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "upgrade_type", value)


@pulumi.type_token("huaweicloud:GaussDBforOpenGauss/opengaussInstanceUpgrade:OpengaussInstanceUpgrade")
class OpengaussInstanceUpgrade(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_action: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_az: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_shard_num: Optional[pulumi.Input[_builtins.int]] = None,
                 upgrade_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB OpenGauss instance upgrade resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdbforopengauss.OpengaussInstanceUpgrade("test",
            instance_id=instance_id,
            upgrade_type="inplace")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_version: Specifies the target version that the instance will be upgraded to.
               In a hot patch update, multiple hot patch versions can be configured.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_action: Specifies the instance upgrade action. Value options:
               + **upgradeAutoCommit**: Auto-commit
               + **upgrade**: Rolling upgrade
               + **commit**: Commit
               + **rollback**: Rollback
               
               > **NOTE:** If `upgrade_type` is set to **inplace**, this parameter is optional.
               <br>If `upgrade_type` is set to **grey**, this parameter can be set to **upgradeAutoCommit**, **upgrade**, **commit**,
               or **rollback**.
               <br>If `upgrade_type` is set to **hotfix**, this parameter can be set to **upgradeAutoCommit** or **rollback**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_az: Specifies the AZ to be upgraded in a gray upgrade. It is mandatory when
               `upgrade_action` is set to **upgrade**. Multiple AZs can be upgraded at the same time. Use commas(,) to separate AZs.
               You cannot enter an AZ that does not belong to the instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] upgrade_shard_num: Specifies the number of shards to be upgraded in a gray upgrade for
               a distributed instance. It is mandatory when `upgrade_action` is set to **upgrade**. The value cannot be greater than
               the number of shards that have not been upgraded.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_type: Specifies the instance upgrade type. Value options:
               + **inplace**: In-place upgrade
               + **grey**: Gray upgrade
               + **hotfix**: Hot patch update
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OpengaussInstanceUpgradeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB OpenGauss instance upgrade resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdbforopengauss.OpengaussInstanceUpgrade("test",
            instance_id=instance_id,
            upgrade_type="inplace")
        ```

        :param str resource_name: The name of the resource.
        :param OpengaussInstanceUpgradeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OpengaussInstanceUpgradeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_action: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_az: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_shard_num: Optional[pulumi.Input[_builtins.int]] = None,
                 upgrade_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OpengaussInstanceUpgradeArgs.__new__(OpengaussInstanceUpgradeArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["target_version"] = target_version
            __props__.__dict__["upgrade_action"] = upgrade_action
            __props__.__dict__["upgrade_az"] = upgrade_az
            __props__.__dict__["upgrade_shard_num"] = upgrade_shard_num
            if upgrade_type is None and not opts.urn:
                raise TypeError("Missing required property 'upgrade_type'")
            __props__.__dict__["upgrade_type"] = upgrade_type
        super(OpengaussInstanceUpgrade, __self__).__init__(
            'huaweicloud:GaussDBforOpenGauss/opengaussInstanceUpgrade:OpengaussInstanceUpgrade',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            target_version: Optional[pulumi.Input[_builtins.str]] = None,
            upgrade_action: Optional[pulumi.Input[_builtins.str]] = None,
            upgrade_az: Optional[pulumi.Input[_builtins.str]] = None,
            upgrade_shard_num: Optional[pulumi.Input[_builtins.int]] = None,
            upgrade_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'OpengaussInstanceUpgrade':
        """
        Get an existing OpengaussInstanceUpgrade resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] target_version: Specifies the target version that the instance will be upgraded to.
               In a hot patch update, multiple hot patch versions can be configured.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_action: Specifies the instance upgrade action. Value options:
               + **upgradeAutoCommit**: Auto-commit
               + **upgrade**: Rolling upgrade
               + **commit**: Commit
               + **rollback**: Rollback
               
               > **NOTE:** If `upgrade_type` is set to **inplace**, this parameter is optional.
               <br>If `upgrade_type` is set to **grey**, this parameter can be set to **upgradeAutoCommit**, **upgrade**, **commit**,
               or **rollback**.
               <br>If `upgrade_type` is set to **hotfix**, this parameter can be set to **upgradeAutoCommit** or **rollback**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_az: Specifies the AZ to be upgraded in a gray upgrade. It is mandatory when
               `upgrade_action` is set to **upgrade**. Multiple AZs can be upgraded at the same time. Use commas(,) to separate AZs.
               You cannot enter an AZ that does not belong to the instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] upgrade_shard_num: Specifies the number of shards to be upgraded in a gray upgrade for
               a distributed instance. It is mandatory when `upgrade_action` is set to **upgrade**. The value cannot be greater than
               the number of shards that have not been upgraded.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] upgrade_type: Specifies the instance upgrade type. Value options:
               + **inplace**: In-place upgrade
               + **grey**: Gray upgrade
               + **hotfix**: Hot patch update
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OpengaussInstanceUpgradeState.__new__(_OpengaussInstanceUpgradeState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["target_version"] = target_version
        __props__.__dict__["upgrade_action"] = upgrade_action
        __props__.__dict__["upgrade_az"] = upgrade_az
        __props__.__dict__["upgrade_shard_num"] = upgrade_shard_num
        __props__.__dict__["upgrade_type"] = upgrade_type
        return OpengaussInstanceUpgrade(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the GaussDB OpenGauss instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the target version that the instance will be upgraded to.
        In a hot patch update, multiple hot patch versions can be configured.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "target_version")

    @_builtins.property
    @pulumi.getter(name="upgradeAction")
    def upgrade_action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the instance upgrade action. Value options:
        + **upgradeAutoCommit**: Auto-commit
        + **upgrade**: Rolling upgrade
        + **commit**: Commit
        + **rollback**: Rollback

        > **NOTE:** If `upgrade_type` is set to **inplace**, this parameter is optional.
        <br>If `upgrade_type` is set to **grey**, this parameter can be set to **upgradeAutoCommit**, **upgrade**, **commit**,
        or **rollback**.
        <br>If `upgrade_type` is set to **hotfix**, this parameter can be set to **upgradeAutoCommit** or **rollback**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_action")

    @_builtins.property
    @pulumi.getter(name="upgradeAz")
    def upgrade_az(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the AZ to be upgraded in a gray upgrade. It is mandatory when
        `upgrade_action` is set to **upgrade**. Multiple AZs can be upgraded at the same time. Use commas(,) to separate AZs.
        You cannot enter an AZ that does not belong to the instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_az")

    @_builtins.property
    @pulumi.getter(name="upgradeShardNum")
    def upgrade_shard_num(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the number of shards to be upgraded in a gray upgrade for
        a distributed instance. It is mandatory when `upgrade_action` is set to **upgrade**. The value cannot be greater than
        the number of shards that have not been upgraded.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_shard_num")

    @_builtins.property
    @pulumi.getter(name="upgradeType")
    def upgrade_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the instance upgrade type. Value options:
        + **inplace**: In-place upgrade
        + **grey**: Gray upgrade
        + **hotfix**: Hot patch update

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "upgrade_type")

