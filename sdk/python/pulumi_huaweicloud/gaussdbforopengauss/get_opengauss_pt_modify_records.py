# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOpengaussPtModifyRecordsResult',
    'AwaitableGetOpengaussPtModifyRecordsResult',
    'get_opengauss_pt_modify_records',
    'get_opengauss_pt_modify_records_output',
]

@pulumi.output_type
class GetOpengaussPtModifyRecordsResult:
    """
    A collection of values returned by getOpengaussPtModifyRecords.
    """
    def __init__(__self__, config_id=None, histories=None, id=None, region=None):
        if config_id and not isinstance(config_id, str):
            raise TypeError("Expected argument 'config_id' to be a str")
        pulumi.set(__self__, "config_id", config_id)
        if histories and not isinstance(histories, list):
            raise TypeError("Expected argument 'histories' to be a list")
        pulumi.set(__self__, "histories", histories)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="configId")
    def config_id(self) -> _builtins.str:
        return pulumi.get(self, "config_id")

    @_builtins.property
    @pulumi.getter
    def histories(self) -> Sequence['outputs.GetOpengaussPtModifyRecordsHistoryResult']:
        """
        Indicates the parameter modify records.
        """
        return pulumi.get(self, "histories")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetOpengaussPtModifyRecordsResult(GetOpengaussPtModifyRecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussPtModifyRecordsResult(
            config_id=self.config_id,
            histories=self.histories,
            id=self.id,
            region=self.region)


def get_opengauss_pt_modify_records(config_id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussPtModifyRecordsResult:
    """
    Use this data source to get the change history of a parameter template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    config_id = config.require_object("configId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_pt_modify_records(config_id=config_id)
    ```


    :param _builtins.str config_id: Specifies the parameter template ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['configId'] = config_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussPtModifyRecords:getOpengaussPtModifyRecords', __args__, opts=opts, typ=GetOpengaussPtModifyRecordsResult).value

    return AwaitableGetOpengaussPtModifyRecordsResult(
        config_id=pulumi.get(__ret__, 'config_id'),
        histories=pulumi.get(__ret__, 'histories'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_opengauss_pt_modify_records_output(config_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussPtModifyRecordsResult]:
    """
    Use this data source to get the change history of a parameter template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    config_id = config.require_object("configId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_pt_modify_records(config_id=config_id)
    ```


    :param _builtins.str config_id: Specifies the parameter template ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['configId'] = config_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussPtModifyRecords:getOpengaussPtModifyRecords', __args__, opts=opts, typ=GetOpengaussPtModifyRecordsResult)
    return __ret__.apply(lambda __response__: GetOpengaussPtModifyRecordsResult(
        config_id=pulumi.get(__response__, 'config_id'),
        histories=pulumi.get(__response__, 'histories'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
