# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOpengaussUpgradeVersionsResult',
    'AwaitableGetOpengaussUpgradeVersionsResult',
    'get_opengauss_upgrade_versions',
    'get_opengauss_upgrade_versions_output',
]

@pulumi.output_type
class GetOpengaussUpgradeVersionsResult:
    """
    A collection of values returned by getOpengaussUpgradeVersions.
    """
    def __init__(__self__, hotfix_rollback_candidate_versions=None, hotfix_rollback_infos=None, hotfix_upgrade_candidate_versions=None, hotfix_upgrade_infos=None, id=None, instance_id=None, region=None, roll_upgrade_progresses=None, rollback_enabled=None, source_version=None, target_version=None, upgrade_candidate_versions=None, upgrade_type_lists=None):
        if hotfix_rollback_candidate_versions and not isinstance(hotfix_rollback_candidate_versions, list):
            raise TypeError("Expected argument 'hotfix_rollback_candidate_versions' to be a list")
        pulumi.set(__self__, "hotfix_rollback_candidate_versions", hotfix_rollback_candidate_versions)
        if hotfix_rollback_infos and not isinstance(hotfix_rollback_infos, list):
            raise TypeError("Expected argument 'hotfix_rollback_infos' to be a list")
        pulumi.set(__self__, "hotfix_rollback_infos", hotfix_rollback_infos)
        if hotfix_upgrade_candidate_versions and not isinstance(hotfix_upgrade_candidate_versions, list):
            raise TypeError("Expected argument 'hotfix_upgrade_candidate_versions' to be a list")
        pulumi.set(__self__, "hotfix_upgrade_candidate_versions", hotfix_upgrade_candidate_versions)
        if hotfix_upgrade_infos and not isinstance(hotfix_upgrade_infos, list):
            raise TypeError("Expected argument 'hotfix_upgrade_infos' to be a list")
        pulumi.set(__self__, "hotfix_upgrade_infos", hotfix_upgrade_infos)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if roll_upgrade_progresses and not isinstance(roll_upgrade_progresses, list):
            raise TypeError("Expected argument 'roll_upgrade_progresses' to be a list")
        pulumi.set(__self__, "roll_upgrade_progresses", roll_upgrade_progresses)
        if rollback_enabled and not isinstance(rollback_enabled, bool):
            raise TypeError("Expected argument 'rollback_enabled' to be a bool")
        pulumi.set(__self__, "rollback_enabled", rollback_enabled)
        if source_version and not isinstance(source_version, str):
            raise TypeError("Expected argument 'source_version' to be a str")
        pulumi.set(__self__, "source_version", source_version)
        if target_version and not isinstance(target_version, str):
            raise TypeError("Expected argument 'target_version' to be a str")
        pulumi.set(__self__, "target_version", target_version)
        if upgrade_candidate_versions and not isinstance(upgrade_candidate_versions, list):
            raise TypeError("Expected argument 'upgrade_candidate_versions' to be a list")
        pulumi.set(__self__, "upgrade_candidate_versions", upgrade_candidate_versions)
        if upgrade_type_lists and not isinstance(upgrade_type_lists, list):
            raise TypeError("Expected argument 'upgrade_type_lists' to be a list")
        pulumi.set(__self__, "upgrade_type_lists", upgrade_type_lists)

    @_builtins.property
    @pulumi.getter(name="hotfixRollbackCandidateVersions")
    def hotfix_rollback_candidate_versions(self) -> Sequence[_builtins.str]:
        """
        Indicates the hot patch versions that can be rolled back.
        An empty array is returned during a rolling upgrade.
        """
        return pulumi.get(self, "hotfix_rollback_candidate_versions")

    @_builtins.property
    @pulumi.getter(name="hotfixRollbackInfos")
    def hotfix_rollback_infos(self) -> Sequence['outputs.GetOpengaussUpgradeVersionsHotfixRollbackInfoResult']:
        """
        Indicates the information about hot patch versions that can be rolled back.
        """
        return pulumi.get(self, "hotfix_rollback_infos")

    @_builtins.property
    @pulumi.getter(name="hotfixUpgradeCandidateVersions")
    def hotfix_upgrade_candidate_versions(self) -> Sequence[_builtins.str]:
        """
        Indicates the hot patch versions that can be updated.
        An empty array is returned during a rolling upgrade.
        """
        return pulumi.get(self, "hotfix_upgrade_candidate_versions")

    @_builtins.property
    @pulumi.getter(name="hotfixUpgradeInfos")
    def hotfix_upgrade_infos(self) -> Sequence['outputs.GetOpengaussUpgradeVersionsHotfixUpgradeInfoResult']:
        """
        Indicates the information about hot patch versions that can be installed.
        """
        return pulumi.get(self, "hotfix_upgrade_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rollUpgradeProgresses")
    def roll_upgrade_progresses(self) -> Sequence['outputs.GetOpengaussUpgradeVersionsRollUpgradeProgressResult']:
        """
        Indicates the DN or AZ information during the rolling upgrade.
        """
        return pulumi.get(self, "roll_upgrade_progresses")

    @_builtins.property
    @pulumi.getter(name="rollbackEnabled")
    def rollback_enabled(self) -> _builtins.bool:
        """
        Indicates whether rollback is supported.
        """
        return pulumi.get(self, "rollback_enabled")

    @_builtins.property
    @pulumi.getter(name="sourceVersion")
    def source_version(self) -> _builtins.str:
        """
        Indicates the source instance version.
        """
        return pulumi.get(self, "source_version")

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> _builtins.str:
        """
        Indicates the target version.
        The target version is only returned when the instance is in the rolling upgrade phase, or no information is returned.
        """
        return pulumi.get(self, "target_version")

    @_builtins.property
    @pulumi.getter(name="upgradeCandidateVersions")
    def upgrade_candidate_versions(self) -> Sequence[_builtins.str]:
        """
        Indicates the versions that can be upgraded to, including minor and major versions.
        An empty array is returned during a rolling upgrade.
        """
        return pulumi.get(self, "upgrade_candidate_versions")

    @_builtins.property
    @pulumi.getter(name="upgradeTypeLists")
    def upgrade_type_lists(self) -> Sequence['outputs.GetOpengaussUpgradeVersionsUpgradeTypeListResult']:
        """
        Indicates the list of upgrade types.
        """
        return pulumi.get(self, "upgrade_type_lists")


class AwaitableGetOpengaussUpgradeVersionsResult(GetOpengaussUpgradeVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussUpgradeVersionsResult(
            hotfix_rollback_candidate_versions=self.hotfix_rollback_candidate_versions,
            hotfix_rollback_infos=self.hotfix_rollback_infos,
            hotfix_upgrade_candidate_versions=self.hotfix_upgrade_candidate_versions,
            hotfix_upgrade_infos=self.hotfix_upgrade_infos,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            roll_upgrade_progresses=self.roll_upgrade_progresses,
            rollback_enabled=self.rollback_enabled,
            source_version=self.source_version,
            target_version=self.target_version,
            upgrade_candidate_versions=self.upgrade_candidate_versions,
            upgrade_type_lists=self.upgrade_type_lists)


def get_opengauss_upgrade_versions(instance_id: Optional[_builtins.str] = None,
                                   region: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussUpgradeVersionsResult:
    """
    Use this data source to get the versions that a GaussDb OpenGauss instance can be upgraded to.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_upgrade_versions(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the GaussDB OpenGauss instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussUpgradeVersions:getOpengaussUpgradeVersions', __args__, opts=opts, typ=GetOpengaussUpgradeVersionsResult).value

    return AwaitableGetOpengaussUpgradeVersionsResult(
        hotfix_rollback_candidate_versions=pulumi.get(__ret__, 'hotfix_rollback_candidate_versions'),
        hotfix_rollback_infos=pulumi.get(__ret__, 'hotfix_rollback_infos'),
        hotfix_upgrade_candidate_versions=pulumi.get(__ret__, 'hotfix_upgrade_candidate_versions'),
        hotfix_upgrade_infos=pulumi.get(__ret__, 'hotfix_upgrade_infos'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        roll_upgrade_progresses=pulumi.get(__ret__, 'roll_upgrade_progresses'),
        rollback_enabled=pulumi.get(__ret__, 'rollback_enabled'),
        source_version=pulumi.get(__ret__, 'source_version'),
        target_version=pulumi.get(__ret__, 'target_version'),
        upgrade_candidate_versions=pulumi.get(__ret__, 'upgrade_candidate_versions'),
        upgrade_type_lists=pulumi.get(__ret__, 'upgrade_type_lists'))
def get_opengauss_upgrade_versions_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussUpgradeVersionsResult]:
    """
    Use this data source to get the versions that a GaussDb OpenGauss instance can be upgraded to.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_upgrade_versions(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the GaussDB OpenGauss instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussUpgradeVersions:getOpengaussUpgradeVersions', __args__, opts=opts, typ=GetOpengaussUpgradeVersionsResult)
    return __ret__.apply(lambda __response__: GetOpengaussUpgradeVersionsResult(
        hotfix_rollback_candidate_versions=pulumi.get(__response__, 'hotfix_rollback_candidate_versions'),
        hotfix_rollback_infos=pulumi.get(__response__, 'hotfix_rollback_infos'),
        hotfix_upgrade_candidate_versions=pulumi.get(__response__, 'hotfix_upgrade_candidate_versions'),
        hotfix_upgrade_infos=pulumi.get(__response__, 'hotfix_upgrade_infos'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        roll_upgrade_progresses=pulumi.get(__response__, 'roll_upgrade_progresses'),
        rollback_enabled=pulumi.get(__response__, 'rollback_enabled'),
        source_version=pulumi.get(__response__, 'source_version'),
        target_version=pulumi.get(__response__, 'target_version'),
        upgrade_candidate_versions=pulumi.get(__response__, 'upgrade_candidate_versions'),
        upgrade_type_lists=pulumi.get(__response__, 'upgrade_type_lists')))
