# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOpengaussFlavorsResult',
    'AwaitableGetOpengaussFlavorsResult',
    'get_opengauss_flavors',
    'get_opengauss_flavors_output',
]

@pulumi.output_type
class GetOpengaussFlavorsResult:
    """
    A collection of values returned by getOpengaussFlavors.
    """
    def __init__(__self__, flavors=None, ha_mode=None, id=None, region=None, spec_code=None, version=None):
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if ha_mode and not isinstance(ha_mode, str):
            raise TypeError("Expected argument 'ha_mode' to be a str")
        pulumi.set(__self__, "ha_mode", ha_mode)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if spec_code and not isinstance(spec_code, str):
            raise TypeError("Expected argument 'spec_code' to be a str")
        pulumi.set(__self__, "spec_code", spec_code)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetOpengaussFlavorsFlavorResult']:
        """
        Indicates the list of the flavors.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ha_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> Optional[_builtins.str]:
        """
        Indicates the specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Indicates the DB engine version supported by the specifications.
        """
        return pulumi.get(self, "version")


class AwaitableGetOpengaussFlavorsResult(GetOpengaussFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussFlavorsResult(
            flavors=self.flavors,
            ha_mode=self.ha_mode,
            id=self.id,
            region=self.region,
            spec_code=self.spec_code,
            version=self.version)


def get_opengauss_flavors(ha_mode: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          spec_code: Optional[_builtins.str] = None,
                          version: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussFlavorsResult:
    """
    Use this data source to get the list of GaussDB OpenGauss flavors.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_flavors()
    ```


    :param _builtins.str ha_mode: Specifies the instance type.
           Value options:
           + **centralization_standard**: Primary/standby
           + **enterprise**: Distributed (independent deployment)
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str spec_code: Specifies the specification code.
    :param _builtins.str version: Specifies the version of the GaussDB OpenGauss.
    """
    __args__ = dict()
    __args__['haMode'] = ha_mode
    __args__['region'] = region
    __args__['specCode'] = spec_code
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussFlavors:getOpengaussFlavors', __args__, opts=opts, typ=GetOpengaussFlavorsResult).value

    return AwaitableGetOpengaussFlavorsResult(
        flavors=pulumi.get(__ret__, 'flavors'),
        ha_mode=pulumi.get(__ret__, 'ha_mode'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        spec_code=pulumi.get(__ret__, 'spec_code'),
        version=pulumi.get(__ret__, 'version'))
def get_opengauss_flavors_output(ha_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 spec_code: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussFlavorsResult]:
    """
    Use this data source to get the list of GaussDB OpenGauss flavors.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_flavors()
    ```


    :param _builtins.str ha_mode: Specifies the instance type.
           Value options:
           + **centralization_standard**: Primary/standby
           + **enterprise**: Distributed (independent deployment)
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str spec_code: Specifies the specification code.
    :param _builtins.str version: Specifies the version of the GaussDB OpenGauss.
    """
    __args__ = dict()
    __args__['haMode'] = ha_mode
    __args__['region'] = region
    __args__['specCode'] = spec_code
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussFlavors:getOpengaussFlavors', __args__, opts=opts, typ=GetOpengaussFlavorsResult)
    return __ret__.apply(lambda __response__: GetOpengaussFlavorsResult(
        flavors=pulumi.get(__response__, 'flavors'),
        ha_mode=pulumi.get(__response__, 'ha_mode'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        spec_code=pulumi.get(__response__, 'spec_code'),
        version=pulumi.get(__response__, 'version')))
