# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOpengaussRestorableInstancesResult',
    'AwaitableGetOpengaussRestorableInstancesResult',
    'get_opengauss_restorable_instances',
    'get_opengauss_restorable_instances_output',
]

@pulumi.output_type
class GetOpengaussRestorableInstancesResult:
    """
    A collection of values returned by getOpengaussRestorableInstances.
    """
    def __init__(__self__, backup_id=None, id=None, instances=None, region=None, restore_time=None, source_instance_id=None):
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if restore_time and not isinstance(restore_time, str):
            raise TypeError("Expected argument 'restore_time' to be a str")
        pulumi.set(__self__, "restore_time", restore_time)
        if source_instance_id and not isinstance(source_instance_id, str):
            raise TypeError("Expected argument 'source_instance_id' to be a str")
        pulumi.set(__self__, "source_instance_id", source_instance_id)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetOpengaussRestorableInstancesInstanceResult']:
        """
        Indicates the instances that can be used for backups and restorations.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "restore_time")

    @_builtins.property
    @pulumi.getter(name="sourceInstanceId")
    def source_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "source_instance_id")


class AwaitableGetOpengaussRestorableInstancesResult(GetOpengaussRestorableInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussRestorableInstancesResult(
            backup_id=self.backup_id,
            id=self.id,
            instances=self.instances,
            region=self.region,
            restore_time=self.restore_time,
            source_instance_id=self.source_instance_id)


def get_opengauss_restorable_instances(backup_id: Optional[_builtins.str] = None,
                                       region: Optional[_builtins.str] = None,
                                       restore_time: Optional[_builtins.str] = None,
                                       source_instance_id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussRestorableInstancesResult:
    """
    Use this data source to get the instances that can be used for backups and restorations.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    source_instance_id = config.require_object("sourceInstanceId")
    backup_id = config.require_object("backupId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_restorable_instances(source_instance_id=source_instance_id,
        backup_id=backup_id)
    ```


    :param _builtins.str backup_id: Specifies the instance backup ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str restore_time: Specifies the time point of data restoration in the UNIX timestamp format.
           If the `backup_id` is left blank, this parameter is used to query the instance topology information and filter
           the queried instances.
    :param _builtins.str source_instance_id: Specifies the ID of the GaussDB OpenGauss instance to be restored.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['region'] = region
    __args__['restoreTime'] = restore_time
    __args__['sourceInstanceId'] = source_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussRestorableInstances:getOpengaussRestorableInstances', __args__, opts=opts, typ=GetOpengaussRestorableInstancesResult).value

    return AwaitableGetOpengaussRestorableInstancesResult(
        backup_id=pulumi.get(__ret__, 'backup_id'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        region=pulumi.get(__ret__, 'region'),
        restore_time=pulumi.get(__ret__, 'restore_time'),
        source_instance_id=pulumi.get(__ret__, 'source_instance_id'))
def get_opengauss_restorable_instances_output(backup_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              restore_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              source_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussRestorableInstancesResult]:
    """
    Use this data source to get the instances that can be used for backups and restorations.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    source_instance_id = config.require_object("sourceInstanceId")
    backup_id = config.require_object("backupId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_restorable_instances(source_instance_id=source_instance_id,
        backup_id=backup_id)
    ```


    :param _builtins.str backup_id: Specifies the instance backup ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str restore_time: Specifies the time point of data restoration in the UNIX timestamp format.
           If the `backup_id` is left blank, this parameter is used to query the instance topology information and filter
           the queried instances.
    :param _builtins.str source_instance_id: Specifies the ID of the GaussDB OpenGauss instance to be restored.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['region'] = region
    __args__['restoreTime'] = restore_time
    __args__['sourceInstanceId'] = source_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussRestorableInstances:getOpengaussRestorableInstances', __args__, opts=opts, typ=GetOpengaussRestorableInstancesResult)
    return __ret__.apply(lambda __response__: GetOpengaussRestorableInstancesResult(
        backup_id=pulumi.get(__response__, 'backup_id'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        region=pulumi.get(__response__, 'region'),
        restore_time=pulumi.get(__response__, 'restore_time'),
        source_instance_id=pulumi.get(__response__, 'source_instance_id')))
