# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOpengaussTopIoTrafficsResult',
    'AwaitableGetOpengaussTopIoTrafficsResult',
    'get_opengauss_top_io_traffics',
    'get_opengauss_top_io_traffics_output',
]

@pulumi.output_type
class GetOpengaussTopIoTrafficsResult:
    """
    A collection of values returned by getOpengaussTopIoTraffics.
    """
    def __init__(__self__, component_id=None, id=None, instance_id=None, node_id=None, region=None, sort_condition=None, top_io_infos=None, top_io_num=None):
        if component_id and not isinstance(component_id, str):
            raise TypeError("Expected argument 'component_id' to be a str")
        pulumi.set(__self__, "component_id", component_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if node_id and not isinstance(node_id, str):
            raise TypeError("Expected argument 'node_id' to be a str")
        pulumi.set(__self__, "node_id", node_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_condition and not isinstance(sort_condition, str):
            raise TypeError("Expected argument 'sort_condition' to be a str")
        pulumi.set(__self__, "sort_condition", sort_condition)
        if top_io_infos and not isinstance(top_io_infos, list):
            raise TypeError("Expected argument 'top_io_infos' to be a list")
        pulumi.set(__self__, "top_io_infos", top_io_infos)
        if top_io_num and not isinstance(top_io_num, int):
            raise TypeError("Expected argument 'top_io_num' to be a int")
        pulumi.set(__self__, "top_io_num", top_io_num)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> _builtins.str:
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortCondition")
    def sort_condition(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_condition")

    @_builtins.property
    @pulumi.getter(name="topIoInfos")
    def top_io_infos(self) -> Sequence['outputs.GetOpengaussTopIoTrafficsTopIoInfoResult']:
        """
        Indicates the I/O information.
        """
        return pulumi.get(self, "top_io_infos")

    @_builtins.property
    @pulumi.getter(name="topIoNum")
    def top_io_num(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "top_io_num")


class AwaitableGetOpengaussTopIoTrafficsResult(GetOpengaussTopIoTrafficsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussTopIoTrafficsResult(
            component_id=self.component_id,
            id=self.id,
            instance_id=self.instance_id,
            node_id=self.node_id,
            region=self.region,
            sort_condition=self.sort_condition,
            top_io_infos=self.top_io_infos,
            top_io_num=self.top_io_num)


def get_opengauss_top_io_traffics(component_id: Optional[_builtins.str] = None,
                                  instance_id: Optional[_builtins.str] = None,
                                  node_id: Optional[_builtins.str] = None,
                                  region: Optional[_builtins.str] = None,
                                  sort_condition: Optional[_builtins.str] = None,
                                  top_io_num: Optional[_builtins.int] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussTopIoTrafficsResult:
    """
    Use this data source to get the top I/O statistics of instance database processes and return the results associated with
    session information.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    node_id = config.require_object("nodeId")
    component_id = config.require_object("componentId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_top_io_traffics(instance_id=instance_id,
        node_id=node_id,
        component_id=component_id)
    ```


    :param _builtins.str component_id: Specifies the component ID.
           It must be a CN or a DN component of a non-log role.
    :param _builtins.str instance_id: Specifies the GaussDB OpenGauss instance ID.
    :param _builtins.str node_id: Specifies the node ID.
           It must be a DN node of a non-log role or a CN node, and the node status must be normal.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_condition: Specifies the top I/O sorting condition.
           Value options: **read**, **write**.
    :param _builtins.int top_io_num: Specifies the number of top I/O threads to be queried in the database process.
    """
    __args__ = dict()
    __args__['componentId'] = component_id
    __args__['instanceId'] = instance_id
    __args__['nodeId'] = node_id
    __args__['region'] = region
    __args__['sortCondition'] = sort_condition
    __args__['topIoNum'] = top_io_num
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussTopIoTraffics:getOpengaussTopIoTraffics', __args__, opts=opts, typ=GetOpengaussTopIoTrafficsResult).value

    return AwaitableGetOpengaussTopIoTrafficsResult(
        component_id=pulumi.get(__ret__, 'component_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        node_id=pulumi.get(__ret__, 'node_id'),
        region=pulumi.get(__ret__, 'region'),
        sort_condition=pulumi.get(__ret__, 'sort_condition'),
        top_io_infos=pulumi.get(__ret__, 'top_io_infos'),
        top_io_num=pulumi.get(__ret__, 'top_io_num'))
def get_opengauss_top_io_traffics_output(component_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         node_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         sort_condition: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         top_io_num: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussTopIoTrafficsResult]:
    """
    Use this data source to get the top I/O statistics of instance database processes and return the results associated with
    session information.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    node_id = config.require_object("nodeId")
    component_id = config.require_object("componentId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_top_io_traffics(instance_id=instance_id,
        node_id=node_id,
        component_id=component_id)
    ```


    :param _builtins.str component_id: Specifies the component ID.
           It must be a CN or a DN component of a non-log role.
    :param _builtins.str instance_id: Specifies the GaussDB OpenGauss instance ID.
    :param _builtins.str node_id: Specifies the node ID.
           It must be a DN node of a non-log role or a CN node, and the node status must be normal.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_condition: Specifies the top I/O sorting condition.
           Value options: **read**, **write**.
    :param _builtins.int top_io_num: Specifies the number of top I/O threads to be queried in the database process.
    """
    __args__ = dict()
    __args__['componentId'] = component_id
    __args__['instanceId'] = instance_id
    __args__['nodeId'] = node_id
    __args__['region'] = region
    __args__['sortCondition'] = sort_condition
    __args__['topIoNum'] = top_io_num
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussTopIoTraffics:getOpengaussTopIoTraffics', __args__, opts=opts, typ=GetOpengaussTopIoTrafficsResult)
    return __ret__.apply(lambda __response__: GetOpengaussTopIoTrafficsResult(
        component_id=pulumi.get(__response__, 'component_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        node_id=pulumi.get(__response__, 'node_id'),
        region=pulumi.get(__response__, 'region'),
        sort_condition=pulumi.get(__response__, 'sort_condition'),
        top_io_infos=pulumi.get(__response__, 'top_io_infos'),
        top_io_num=pulumi.get(__response__, 'top_io_num')))
