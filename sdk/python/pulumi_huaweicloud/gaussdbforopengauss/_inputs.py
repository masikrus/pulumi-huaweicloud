# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'OpengaussBackupDatastoreArgs',
    'OpengaussBackupDatastoreArgsDict',
    'OpengaussInstanceAdvanceFeatureArgs',
    'OpengaussInstanceAdvanceFeatureArgsDict',
    'OpengaussInstanceBackupStrategyArgs',
    'OpengaussInstanceBackupStrategyArgsDict',
    'OpengaussInstanceDatastoreArgs',
    'OpengaussInstanceDatastoreArgsDict',
    'OpengaussInstanceHaArgs',
    'OpengaussInstanceHaArgsDict',
    'OpengaussInstanceNodeArgs',
    'OpengaussInstanceNodeArgsDict',
    'OpengaussInstanceParameterArgs',
    'OpengaussInstanceParameterArgsDict',
    'OpengaussInstanceVolumeArgs',
    'OpengaussInstanceVolumeArgsDict',
    'OpengaussParameterTemplateCompareDifferenceArgs',
    'OpengaussParameterTemplateCompareDifferenceArgsDict',
    'OpengaussParameterTemplateParameterArgs',
    'OpengaussParameterTemplateParameterArgsDict',
    'OpengaussPrimaryStandbySwitchShardArgs',
    'OpengaussPrimaryStandbySwitchShardArgsDict',
    'OpengaussSqlThrottlingTaskNodeInfoArgs',
    'OpengaussSqlThrottlingTaskNodeInfoArgsDict',
]

MYPY = False

if not MYPY:
    class OpengaussBackupDatastoreArgsDict(TypedDict):
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the database engine.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the database version.
        """
elif False:
    OpengaussBackupDatastoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussBackupDatastoreArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Indicates the database engine.
        :param pulumi.Input[_builtins.str] version: Indicates the database version.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class OpengaussInstanceAdvanceFeatureArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the advance feature.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the advance feature.
        """
elif False:
    OpengaussInstanceAdvanceFeatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussInstanceAdvanceFeatureArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the advance feature.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the advance feature.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the advance feature.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the advance feature.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OpengaussInstanceBackupStrategyArgsDict(TypedDict):
        start_time: pulumi.Input[_builtins.str]
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the **hh:mm-HH:MM** format. The current time is in the UTC format. The
        **HH** value must be `1` greater than the **hh** value. The values of mm and MM must be the same and must be set to
        **00**. Example value: **08:00-09:00**, **23:00-00:00**.
        """
        keep_days: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        `0` to `732`. If this parameter is set to `0`, the automated backup policy is not set.
        If this parameter is not transferred, the automated backup policy is enabled by default.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
elif False:
    OpengaussInstanceBackupStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussInstanceBackupStrategyArgs:
    def __init__(__self__, *,
                 start_time: pulumi.Input[_builtins.str],
                 keep_days: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the **hh:mm-HH:MM** format. The current time is in the UTC format. The
               **HH** value must be `1` greater than the **hh** value. The values of mm and MM must be the same and must be set to
               **00**. Example value: **08:00-09:00**, **23:00-00:00**.
        :param pulumi.Input[_builtins.int] keep_days: Specifies the number of days to retain the generated backup files. The value ranges from
               `0` to `732`. If this parameter is set to `0`, the automated backup policy is not set.
               If this parameter is not transferred, the automated backup policy is enabled by default.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the **hh:mm-HH:MM** format. The current time is in the UTC format. The
        **HH** value must be `1` greater than the **hh** value. The values of mm and MM must be the same and must be set to
        **00**. Example value: **08:00-09:00**, **23:00-00:00**.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        `0` to `732`. If this parameter is set to `0`, the automated backup policy is not set.
        If this parameter is not transferred, the automated backup policy is enabled by default.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keep_days", value)


if not MYPY:
    class OpengaussInstanceDatastoreArgsDict(TypedDict):
        engine: pulumi.Input[_builtins.str]
        """
        Specifies the database engine. Only **GaussDB(for openGauss)** is supported
        now. Changing this parameter will create a new resource.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the database version. Defaults to the latest version. Please
        reference to the API docs for valid options. Changing this parameter will create a new resource.

        <a name="opengauss_backup_strategy"></a>
        The `backup_strategy` block supports:
        """
elif False:
    OpengaussInstanceDatastoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussInstanceDatastoreArgs:
    def __init__(__self__, *,
                 engine: pulumi.Input[_builtins.str],
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] engine: Specifies the database engine. Only **GaussDB(for openGauss)** is supported
               now. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] version: Specifies the database version. Defaults to the latest version. Please
               reference to the API docs for valid options. Changing this parameter will create a new resource.
               
               <a name="opengauss_backup_strategy"></a>
               The `backup_strategy` block supports:
        """
        pulumi.set(__self__, "engine", engine)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the database engine. Only **GaussDB(for openGauss)** is supported
        now. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "engine", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database version. Defaults to the latest version. Please
        reference to the API docs for valid options. Changing this parameter will create a new resource.

        <a name="opengauss_backup_strategy"></a>
        The `backup_strategy` block supports:
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class OpengaussInstanceHaArgsDict(TypedDict):
        mode: pulumi.Input[_builtins.str]
        """
        Specifies the deployment model.
        The valid values are **enterprise** and **centralization_standard**.
        Changing this parameter will create a new resource.
        """
        replication_mode: pulumi.Input[_builtins.str]
        """
        Specifies the database replication mode.
        Only **sync** is supported now. Changing this parameter will create a new resource.
        """
        consistency: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the database consistency mode.
        The valid values are **strong** and **eventual**, not case-sensitive.
        Changing this parameter will create a new resource.
        """
        instance_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the product type of the instance. Value options:
        + **enterprise**: The instance of the enterprise edition will be created.
        + **basic**: The instance of the basic edition will be created.
        + **ecology**: The instance of the ecosystem edition will be created.

        Changing this parameter will create a new resource.

        <a name="opengauss_volume"></a>
        The `volume` block supports:
        """
elif False:
    OpengaussInstanceHaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussInstanceHaArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[_builtins.str],
                 replication_mode: pulumi.Input[_builtins.str],
                 consistency: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_mode: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] mode: Specifies the deployment model.
               The valid values are **enterprise** and **centralization_standard**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] replication_mode: Specifies the database replication mode.
               Only **sync** is supported now. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] consistency: Specifies the database consistency mode.
               The valid values are **strong** and **eventual**, not case-sensitive.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_mode: Specifies the product type of the instance. Value options:
               + **enterprise**: The instance of the enterprise edition will be created.
               + **basic**: The instance of the basic edition will be created.
               + **ecology**: The instance of the ecosystem edition will be created.
               
               Changing this parameter will create a new resource.
               
               <a name="opengauss_volume"></a>
               The `volume` block supports:
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "replication_mode", replication_mode)
        if consistency is not None:
            pulumi.set(__self__, "consistency", consistency)
        if instance_mode is not None:
            pulumi.set(__self__, "instance_mode", instance_mode)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the deployment model.
        The valid values are **enterprise** and **centralization_standard**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter(name="replicationMode")
    def replication_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the database replication mode.
        Only **sync** is supported now. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "replication_mode")

    @replication_mode.setter
    def replication_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "replication_mode", value)

    @_builtins.property
    @pulumi.getter
    def consistency(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database consistency mode.
        The valid values are **strong** and **eventual**, not case-sensitive.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "consistency")

    @consistency.setter
    def consistency(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "consistency", value)

    @_builtins.property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the product type of the instance. Value options:
        + **enterprise**: The instance of the enterprise edition will be created.
        + **basic**: The instance of the basic edition will be created.
        + **ecology**: The instance of the ecosystem edition will be created.

        Changing this parameter will create a new resource.

        <a name="opengauss_volume"></a>
        The `volume` block supports:
        """
        return pulumi.get(self, "instance_mode")

    @instance_mode.setter
    def instance_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_mode", value)


if not MYPY:
    class OpengaussInstanceNodeArgsDict(TypedDict):
        availability_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the availability zone information, can be three same or
        different az like **cn-north-4a,cn-north-4a,cn-north-4a**. Changing this parameter will create a new resource.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the advance feature.
        """
        private_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the private IP address of the node.
        """
        public_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the EIP that has been bound.
        """
        role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node role.
        + **master**.
        + **slave**.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the node status.
        """
elif False:
    OpengaussInstanceNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussInstanceNodeArgs:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] availability_zone: Specifies the availability zone information, can be three same or
               different az like **cn-north-4a,cn-north-4a,cn-north-4a**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] id: Indicates the node ID.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the advance feature.
        :param pulumi.Input[_builtins.str] private_ip: Indicates the private IP address of the node.
        :param pulumi.Input[_builtins.str] public_ip: Indicates the EIP that has been bound.
        :param pulumi.Input[_builtins.str] role: Indicates the node role.
               + **master**.
               + **slave**.
        :param pulumi.Input[_builtins.str] status: Indicates the node status.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the availability zone information, can be three same or
        different az like **cn-north-4a,cn-north-4a,cn-north-4a**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the advance feature.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the private IP address of the node.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the EIP that has been bound.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node role.
        + **master**.
        + **slave**.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class OpengaussInstanceParameterArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the advance feature.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the advance feature.
        """
elif False:
    OpengaussInstanceParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussInstanceParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the advance feature.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the advance feature.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the advance feature.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the advance feature.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OpengaussInstanceVolumeArgsDict(TypedDict):
        size: pulumi.Input[_builtins.int]
        """
        Specifies the volume size (in gigabytes). The valid value is range form `40` to `4,000`.

        <a name="opengauss_datastore"></a>
        The `datastore` block supports:
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the volume type. Only **ULTRAHIGH** is supported now.
        Changing this parameter will create a new resource.
        """
elif False:
    OpengaussInstanceVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussInstanceVolumeArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[_builtins.int],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.int] size: Specifies the volume size (in gigabytes). The valid value is range form `40` to `4,000`.
               
               <a name="opengauss_datastore"></a>
               The `datastore` block supports:
        :param pulumi.Input[_builtins.str] type: Specifies the volume type. Only **ULTRAHIGH** is supported now.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the volume size (in gigabytes). The valid value is range form `40` to `4,000`.

        <a name="opengauss_datastore"></a>
        The `datastore` block supports:
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the volume type. Only **ULTRAHIGH** is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class OpengaussParameterTemplateCompareDifferenceArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter name.
        """
        source_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter value in the source parameter template.
        """
        target_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter value in the destination parameter template.
        """
elif False:
    OpengaussParameterTemplateCompareDifferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussParameterTemplateCompareDifferenceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_value: Optional[pulumi.Input[_builtins.str]] = None,
                 target_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Indicates the parameter name.
        :param pulumi.Input[_builtins.str] source_value: Indicates the parameter value in the source parameter template.
        :param pulumi.Input[_builtins.str] target_value: Indicates the parameter value in the destination parameter template.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_value is not None:
            pulumi.set(__self__, "source_value", source_value)
        if target_value is not None:
            pulumi.set(__self__, "target_value", target_value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sourceValue")
    def source_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter value in the source parameter template.
        """
        return pulumi.get(self, "source_value")

    @source_value.setter
    def source_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_value", value)

    @_builtins.property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter value in the destination parameter template.
        """
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_value", value)


if not MYPY:
    class OpengaussParameterTemplateParameterArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of a specific parameter.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of a specific parameter.
        """
        data_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the data type. The value can be **string**, **integer**, **boolean**, **list**, **all**,
        or **float**.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the Parameter template description. This parameter is left blank
        by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
        allowed.

        Changing this parameter will create a new resource.
        """
        need_restart: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the instance needs to be rebooted.
        """
        readonly: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the parameter is read-only.
        """
        value_range: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the parameter value range.
        """
elif False:
    OpengaussParameterTemplateParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussParameterTemplateParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 data_type: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 need_restart: Optional[pulumi.Input[_builtins.bool]] = None,
                 readonly: Optional[pulumi.Input[_builtins.bool]] = None,
                 value_range: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of a specific parameter.
        :param pulumi.Input[_builtins.str] value: Specifies the value of a specific parameter.
        :param pulumi.Input[_builtins.str] data_type: Indicates the data type. The value can be **string**, **integer**, **boolean**, **list**, **all**,
               or **float**.
        :param pulumi.Input[_builtins.str] description: Specifies the Parameter template description. This parameter is left blank
               by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
               allowed.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] need_restart: Indicates whether the instance needs to be rebooted.
        :param pulumi.Input[_builtins.bool] readonly: Indicates whether the parameter is read-only.
        :param pulumi.Input[_builtins.str] value_range: Indicates the parameter value range.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if need_restart is not None:
            pulumi.set(__self__, "need_restart", need_restart)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of a specific parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of a specific parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the data type. The value can be **string**, **integer**, **boolean**, **list**, **all**,
        or **float**.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Parameter template description. This parameter is left blank
        by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
        allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the instance needs to be rebooted.
        """
        return pulumi.get(self, "need_restart")

    @need_restart.setter
    def need_restart(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "need_restart", value)

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the parameter is read-only.
        """
        return pulumi.get(self, "readonly")

    @readonly.setter
    def readonly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "readonly", value)

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the parameter value range.
        """
        return pulumi.get(self, "value_range")

    @value_range.setter
    def value_range(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value_range", value)


if not MYPY:
    class OpengaussPrimaryStandbySwitchShardArgsDict(TypedDict):
        component_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the standby DN to be promoted to primary.

        Changing this parameter will create a new resource.
        """
        node_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the node where the standby DN to be promoted to primary is
        deployed.

        Changing this parameter will create a new resource.
        """
elif False:
    OpengaussPrimaryStandbySwitchShardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussPrimaryStandbySwitchShardArgs:
    def __init__(__self__, *,
                 component_id: pulumi.Input[_builtins.str],
                 node_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] component_id: Specifies the ID of the standby DN to be promoted to primary.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] node_id: Specifies the ID of the node where the standby DN to be promoted to primary is
               deployed.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "component_id", component_id)
        pulumi.set(__self__, "node_id", node_id)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the standby DN to be promoted to primary.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "component_id", value)

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the node where the standby DN to be promoted to primary is
        deployed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "node_id", value)


if not MYPY:
    class OpengaussSqlThrottlingTaskNodeInfoArgsDict(TypedDict):
        node_id: pulumi.Input[_builtins.str]
        """
        Specifies the node ID.

        Changing this parameter will create a new resource.
        """
        sql_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the SQL statement executed on the node. If `limit_type` is
        set to **SQL_ID**, the value of this parameter must be the same as that of `limit_type_value`.

        Changing this parameter will create a new resource.
        """
elif False:
    OpengaussSqlThrottlingTaskNodeInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpengaussSqlThrottlingTaskNodeInfoArgs:
    def __init__(__self__, *,
                 node_id: pulumi.Input[_builtins.str],
                 sql_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] node_id: Specifies the node ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] sql_id: Specifies the ID of the SQL statement executed on the node. If `limit_type` is
               set to **SQL_ID**, the value of this parameter must be the same as that of `limit_type_value`.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "sql_id", sql_id)

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the node ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "node_id", value)

    @_builtins.property
    @pulumi.getter(name="sqlId")
    def sql_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the SQL statement executed on the node. If `limit_type` is
        set to **SQL_ID**, the value of this parameter must be the same as that of `limit_type_value`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "sql_id")

    @sql_id.setter
    def sql_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "sql_id", value)


