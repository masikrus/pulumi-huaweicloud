# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OpengaussSqlThrottlingTaskArgs', 'OpengaussSqlThrottlingTask']

@pulumi.input_type
class OpengaussSqlThrottlingTaskArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 limit_type: pulumi.Input[_builtins.str],
                 limit_type_value: pulumi.Input[_builtins.str],
                 parallel_size: pulumi.Input[_builtins.int],
                 task_name: pulumi.Input[_builtins.str],
                 task_scope: pulumi.Input[_builtins.str],
                 cpu_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 databases: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 key_words: Optional[pulumi.Input[_builtins.str]] = None,
                 memory_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 node_infos: Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussSqlThrottlingTaskNodeInfoArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sql_model: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a OpengaussSqlThrottlingTask resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] limit_type: Specifies the throttling type.
               + When `task_scope` is set to **SQL**, the value can be **SQL_ID** or **SQL_TYPE**.
               + When `task_scope` is set to **SESSION**, the value can be **SESSION_ACTIVE_MAX_COUNT**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] limit_type_value: Specifies the throttling type value.
               + When `limit_type` is set to **SQL_ID**, the value of this parameter is the SQL ID of the selected template.
               + When `limit_type` is set to **SQL_TYPE**, the value of this parameter can be **select**, **update**, **insert**,
               **delete**, or **merge**.
               + When `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**, the value of this parameter can only be **CPU_OR_MEMORY**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] parallel_size: Specifies the maximum concurrency. The value can be **0** or a positive integer.
               Value range: **0** to **2147483647**.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the SQL throttling task. The value can contain up to
               **100** characters. Only uppercase letters, lowercase letters, underscores (_), digits, and dollar signs ($) are allowed.
        :param pulumi.Input[_builtins.str] task_scope: Specifies the task scope. Currently, **SQL** and **SESSION** are supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] cpu_utilization: Specifies the CPU usage threshold. The value is an integer ranging from **0** to
               **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and `memory_utilization`
               cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to **0**.
        :param pulumi.Input[_builtins.str] databases: Specifies the databases of the instance. Databases are separated by commas (,). It is
               mandatory when `limit_type` is set to **SQL_TYPE**.
        :param pulumi.Input[_builtins.str] end_time: Specifies the task end time. It is mandatory when `task_scope` is set to **SQL**.
               Value range: later than the task start time. The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        :param pulumi.Input[_builtins.str] key_words: Specifies the keyword. It is mandatory when `limit_type` is set to **SQL_TYPE**. You
               can enter **2** to **100** keywords and separate multiple keywords by commas (,). Each keyword can contain **2** to
               **64** characters and cannot start and end with a space. The specifical characters ("\\{}) and null are not allowed.
        :param pulumi.Input[_builtins.int] memory_utilization: Specifies the Memory usage threshold. The value is an integer ranging from **0**
               to **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and
               `cpu_utilization` cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to
               **0**.
        :param pulumi.Input[Sequence[pulumi.Input['OpengaussSqlThrottlingTaskNodeInfoArgs']]] node_infos: Specifies the CN information. It is mandatory when `limit_type` is set to
               **SQL_ID**. The node_infos structure is documented below.
               
               Changing this parameter will create a new resource.
               
               <a name="node_infos_struct"></a>
               The `node_infos` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] sql_model: Specifies the SQL template. It is mandatory when `limit_type` is set to
               **SQL_ID**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the task start time. It is mandatory when `task_scope` is set to **SQL**.
               Value range: two minutes later than or equal to the current time (UTC time). The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "limit_type", limit_type)
        pulumi.set(__self__, "limit_type_value", limit_type_value)
        pulumi.set(__self__, "parallel_size", parallel_size)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_scope", task_scope)
        if cpu_utilization is not None:
            pulumi.set(__self__, "cpu_utilization", cpu_utilization)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if key_words is not None:
            pulumi.set(__self__, "key_words", key_words)
        if memory_utilization is not None:
            pulumi.set(__self__, "memory_utilization", memory_utilization)
        if node_infos is not None:
            pulumi.set(__self__, "node_infos", node_infos)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sql_model is not None:
            pulumi.set(__self__, "sql_model", sql_model)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the GaussDB OpenGauss instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the throttling type.
        + When `task_scope` is set to **SQL**, the value can be **SQL_ID** or **SQL_TYPE**.
        + When `task_scope` is set to **SESSION**, the value can be **SESSION_ACTIVE_MAX_COUNT**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "limit_type", value)

    @_builtins.property
    @pulumi.getter(name="limitTypeValue")
    def limit_type_value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the throttling type value.
        + When `limit_type` is set to **SQL_ID**, the value of this parameter is the SQL ID of the selected template.
        + When `limit_type` is set to **SQL_TYPE**, the value of this parameter can be **select**, **update**, **insert**,
        **delete**, or **merge**.
        + When `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**, the value of this parameter can only be **CPU_OR_MEMORY**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "limit_type_value")

    @limit_type_value.setter
    def limit_type_value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "limit_type_value", value)

    @_builtins.property
    @pulumi.getter(name="parallelSize")
    def parallel_size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the maximum concurrency. The value can be **0** or a positive integer.
        Value range: **0** to **2147483647**.
        """
        return pulumi.get(self, "parallel_size")

    @parallel_size.setter
    def parallel_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "parallel_size", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the SQL throttling task. The value can contain up to
        **100** characters. Only uppercase letters, lowercase letters, underscores (_), digits, and dollar signs ($) are allowed.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="taskScope")
    def task_scope(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the task scope. Currently, **SQL** and **SESSION** are supported.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "task_scope")

    @task_scope.setter
    def task_scope(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "task_scope", value)

    @_builtins.property
    @pulumi.getter(name="cpuUtilization")
    def cpu_utilization(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the CPU usage threshold. The value is an integer ranging from **0** to
        **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and `memory_utilization`
        cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to **0**.
        """
        return pulumi.get(self, "cpu_utilization")

    @cpu_utilization.setter
    def cpu_utilization(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cpu_utilization", value)

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the databases of the instance. Databases are separated by commas (,). It is
        mandatory when `limit_type` is set to **SQL_TYPE**.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "databases", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task end time. It is mandatory when `task_scope` is set to **SQL**.
        Value range: later than the task start time. The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="keyWords")
    def key_words(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the keyword. It is mandatory when `limit_type` is set to **SQL_TYPE**. You
        can enter **2** to **100** keywords and separate multiple keywords by commas (,). Each keyword can contain **2** to
        **64** characters and cannot start and end with a space. The specifical characters ("\\{}) and null are not allowed.
        """
        return pulumi.get(self, "key_words")

    @key_words.setter
    def key_words(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_words", value)

    @_builtins.property
    @pulumi.getter(name="memoryUtilization")
    def memory_utilization(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the Memory usage threshold. The value is an integer ranging from **0**
        to **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and
        `cpu_utilization` cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to
        **0**.
        """
        return pulumi.get(self, "memory_utilization")

    @memory_utilization.setter
    def memory_utilization(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "memory_utilization", value)

    @_builtins.property
    @pulumi.getter(name="nodeInfos")
    def node_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussSqlThrottlingTaskNodeInfoArgs']]]]:
        """
        Specifies the CN information. It is mandatory when `limit_type` is set to
        **SQL_ID**. The node_infos structure is documented below.

        Changing this parameter will create a new resource.

        <a name="node_infos_struct"></a>
        The `node_infos` block supports:
        """
        return pulumi.get(self, "node_infos")

    @node_infos.setter
    def node_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussSqlThrottlingTaskNodeInfoArgs']]]]):
        pulumi.set(self, "node_infos", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sqlModel")
    def sql_model(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the SQL template. It is mandatory when `limit_type` is set to
        **SQL_ID**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "sql_model")

    @sql_model.setter
    def sql_model(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sql_model", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task start time. It is mandatory when `task_scope` is set to **SQL**.
        Value range: two minutes later than or equal to the current time (UTC time). The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class _OpengaussSqlThrottlingTaskState:
    def __init__(__self__, *,
                 cpu_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 creator: Optional[pulumi.Input[_builtins.str]] = None,
                 databases: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_words: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_type: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_type_value: Optional[pulumi.Input[_builtins.str]] = None,
                 memory_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 modifier: Optional[pulumi.Input[_builtins.str]] = None,
                 node_infos: Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussSqlThrottlingTaskNodeInfoArgs']]]] = None,
                 parallel_size: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 sql_model: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering OpengaussSqlThrottlingTask resources.
        :param pulumi.Input[_builtins.int] cpu_utilization: Specifies the CPU usage threshold. The value is an integer ranging from **0** to
               **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and `memory_utilization`
               cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to **0**.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        :param pulumi.Input[_builtins.str] creator: Indicates the creator.
        :param pulumi.Input[_builtins.str] databases: Specifies the databases of the instance. Databases are separated by commas (,). It is
               mandatory when `limit_type` is set to **SQL_TYPE**.
        :param pulumi.Input[_builtins.str] end_time: Specifies the task end time. It is mandatory when `task_scope` is set to **SQL**.
               Value range: later than the task start time. The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_words: Specifies the keyword. It is mandatory when `limit_type` is set to **SQL_TYPE**. You
               can enter **2** to **100** keywords and separate multiple keywords by commas (,). Each keyword can contain **2** to
               **64** characters and cannot start and end with a space. The specifical characters ("\\{}) and null are not allowed.
        :param pulumi.Input[_builtins.str] limit_type: Specifies the throttling type.
               + When `task_scope` is set to **SQL**, the value can be **SQL_ID** or **SQL_TYPE**.
               + When `task_scope` is set to **SESSION**, the value can be **SESSION_ACTIVE_MAX_COUNT**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] limit_type_value: Specifies the throttling type value.
               + When `limit_type` is set to **SQL_ID**, the value of this parameter is the SQL ID of the selected template.
               + When `limit_type` is set to **SQL_TYPE**, the value of this parameter can be **select**, **update**, **insert**,
               **delete**, or **merge**.
               + When `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**, the value of this parameter can only be **CPU_OR_MEMORY**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] memory_utilization: Specifies the Memory usage threshold. The value is an integer ranging from **0**
               to **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and
               `cpu_utilization` cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to
               **0**.
        :param pulumi.Input[_builtins.str] modifier: Indicates the modifier.
        :param pulumi.Input[Sequence[pulumi.Input['OpengaussSqlThrottlingTaskNodeInfoArgs']]] node_infos: Specifies the CN information. It is mandatory when `limit_type` is set to
               **SQL_ID**. The node_infos structure is documented below.
               
               Changing this parameter will create a new resource.
               
               <a name="node_infos_struct"></a>
               The `node_infos` block supports:
        :param pulumi.Input[_builtins.int] parallel_size: Specifies the maximum concurrency. The value can be **0** or a positive integer.
               Value range: **0** to **2147483647**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] rule_name: Indicates the rule name.
        :param pulumi.Input[_builtins.str] sql_model: Specifies the SQL template. It is mandatory when `limit_type` is set to
               **SQL_ID**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the task start time. It is mandatory when `task_scope` is set to **SQL**.
               Value range: two minutes later than or equal to the current time (UTC time). The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the SQL throttling task. The value can contain up to
               **100** characters. Only uppercase letters, lowercase letters, underscores (_), digits, and dollar signs ($) are allowed.
        :param pulumi.Input[_builtins.str] task_scope: Specifies the task scope. Currently, **SQL** and **SESSION** are supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the update time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        if cpu_utilization is not None:
            pulumi.set(__self__, "cpu_utilization", cpu_utilization)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if creator is not None:
            pulumi.set(__self__, "creator", creator)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key_words is not None:
            pulumi.set(__self__, "key_words", key_words)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)
        if limit_type_value is not None:
            pulumi.set(__self__, "limit_type_value", limit_type_value)
        if memory_utilization is not None:
            pulumi.set(__self__, "memory_utilization", memory_utilization)
        if modifier is not None:
            pulumi.set(__self__, "modifier", modifier)
        if node_infos is not None:
            pulumi.set(__self__, "node_infos", node_infos)
        if parallel_size is not None:
            pulumi.set(__self__, "parallel_size", parallel_size)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if sql_model is not None:
            pulumi.set(__self__, "sql_model", sql_model)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if task_scope is not None:
            pulumi.set(__self__, "task_scope", task_scope)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="cpuUtilization")
    def cpu_utilization(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the CPU usage threshold. The value is an integer ranging from **0** to
        **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and `memory_utilization`
        cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to **0**.
        """
        return pulumi.get(self, "cpu_utilization")

    @cpu_utilization.setter
    def cpu_utilization(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cpu_utilization", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def creator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creator.
        """
        return pulumi.get(self, "creator")

    @creator.setter
    def creator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creator", value)

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the databases of the instance. Databases are separated by commas (,). It is
        mandatory when `limit_type` is set to **SQL_TYPE**.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "databases", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task end time. It is mandatory when `task_scope` is set to **SQL**.
        Value range: later than the task start time. The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB OpenGauss instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="keyWords")
    def key_words(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the keyword. It is mandatory when `limit_type` is set to **SQL_TYPE**. You
        can enter **2** to **100** keywords and separate multiple keywords by commas (,). Each keyword can contain **2** to
        **64** characters and cannot start and end with a space. The specifical characters ("\\{}) and null are not allowed.
        """
        return pulumi.get(self, "key_words")

    @key_words.setter
    def key_words(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_words", value)

    @_builtins.property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the throttling type.
        + When `task_scope` is set to **SQL**, the value can be **SQL_ID** or **SQL_TYPE**.
        + When `task_scope` is set to **SESSION**, the value can be **SESSION_ACTIVE_MAX_COUNT**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "limit_type", value)

    @_builtins.property
    @pulumi.getter(name="limitTypeValue")
    def limit_type_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the throttling type value.
        + When `limit_type` is set to **SQL_ID**, the value of this parameter is the SQL ID of the selected template.
        + When `limit_type` is set to **SQL_TYPE**, the value of this parameter can be **select**, **update**, **insert**,
        **delete**, or **merge**.
        + When `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**, the value of this parameter can only be **CPU_OR_MEMORY**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "limit_type_value")

    @limit_type_value.setter
    def limit_type_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "limit_type_value", value)

    @_builtins.property
    @pulumi.getter(name="memoryUtilization")
    def memory_utilization(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the Memory usage threshold. The value is an integer ranging from **0**
        to **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and
        `cpu_utilization` cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to
        **0**.
        """
        return pulumi.get(self, "memory_utilization")

    @memory_utilization.setter
    def memory_utilization(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "memory_utilization", value)

    @_builtins.property
    @pulumi.getter
    def modifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the modifier.
        """
        return pulumi.get(self, "modifier")

    @modifier.setter
    def modifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modifier", value)

    @_builtins.property
    @pulumi.getter(name="nodeInfos")
    def node_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussSqlThrottlingTaskNodeInfoArgs']]]]:
        """
        Specifies the CN information. It is mandatory when `limit_type` is set to
        **SQL_ID**. The node_infos structure is documented below.

        Changing this parameter will create a new resource.

        <a name="node_infos_struct"></a>
        The `node_infos` block supports:
        """
        return pulumi.get(self, "node_infos")

    @node_infos.setter
    def node_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussSqlThrottlingTaskNodeInfoArgs']]]]):
        pulumi.set(self, "node_infos", value)

    @_builtins.property
    @pulumi.getter(name="parallelSize")
    def parallel_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum concurrency. The value can be **0** or a positive integer.
        Value range: **0** to **2147483647**.
        """
        return pulumi.get(self, "parallel_size")

    @parallel_size.setter
    def parallel_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "parallel_size", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_name", value)

    @_builtins.property
    @pulumi.getter(name="sqlModel")
    def sql_model(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the SQL template. It is mandatory when `limit_type` is set to
        **SQL_ID**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "sql_model")

    @sql_model.setter
    def sql_model(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sql_model", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task start time. It is mandatory when `task_scope` is set to **SQL**.
        Value range: two minutes later than or equal to the current time (UTC time). The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the SQL throttling task. The value can contain up to
        **100** characters. Only uppercase letters, lowercase letters, underscores (_), digits, and dollar signs ($) are allowed.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_name", value)

    @_builtins.property
    @pulumi.getter(name="taskScope")
    def task_scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task scope. Currently, **SQL** and **SESSION** are supported.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "task_scope")

    @task_scope.setter
    def task_scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_scope", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the update time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:GaussDBforOpenGauss/opengaussSqlThrottlingTask:OpengaussSqlThrottlingTask")
class OpengaussSqlThrottlingTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 databases: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_words: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_type: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_type_value: Optional[pulumi.Input[_builtins.str]] = None,
                 memory_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 node_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OpengaussSqlThrottlingTaskNodeInfoArgs', 'OpengaussSqlThrottlingTaskNodeInfoArgsDict']]]]] = None,
                 parallel_size: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sql_model: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB OpenGauss SQL throttling task resource within HuaweiCloud.

        ## Example Usage

        ### Create by SQL_ID

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        node_id = config.require_object("nodeId")
        sql_id = config.require_object("sqlId")
        source = huaweicloud.gaussdbforopengauss.OpengaussSqlThrottlingTask("source",
            instance_id=instance_id,
            task_scope="SQL",
            limit_type="SQL_ID",
            limit_type_value=sql_id,
            task_name="test_task_name",
            parallel_size=4,
            start_time="2025-02-12T11:47:20+0800",
            end_time="2025-02-13T11:47:20+0800",
            sql_model="select name, setting from pg_settings where name in (1...n)",
            node_infos=[{
                "node_id": node_id,
                "sql_id": sql_id,
            }])
        ```

        ### Create by SQL_TYPE

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdbforopengauss.OpengaussSqlThrottlingTask("test",
            instance_id=instance_id,
            task_scope="SQL",
            limit_type="SQL_TYPE",
            limit_type_value="update",
            task_name="test_task_name",
            parallel_size=4,
            start_time="2025-02-12T11:47:20+0800",
            end_time="2025-02-13T11:47:20+0800",
            key_words="aaa,bbb,ccc",
            databases="test_db_111")
        ```

        ### Create by SESSION

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdbforopengauss.OpengaussSqlThrottlingTask("test",
            instance_id=instance_id,
            task_scope="SESSION",
            limit_type="SESSION_ACTIVE_MAX_COUNT",
            limit_type_value="CPU_OR_MEMORY",
            task_name="test_task_name",
            parallel_size=4,
            cpu_utilization=20,
            memory_utilization=40)
        ```

        ## Import

        The GaussDB OpenGauss SQL throttling task can be imported using `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDBforOpenGauss/opengaussSqlThrottlingTask:OpengaussSqlThrottlingTask test <instance_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to the attribute missing from the

        API response. The missing attribute is: `start_time` `end_time`. It is generally recommended running `pulumi preview`

        after importing a GaussDB OpenGauss SQL throttling task. You can then decide if changes should be applied to the GaussDB

        OpenGauss SQL throttling task, or the resource definition should be updated to align with the GaussDB OpenGauss SQL

        throttling task. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_gaussdb_opengauss_sql_throttling_task" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              start_time, end_time,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] cpu_utilization: Specifies the CPU usage threshold. The value is an integer ranging from **0** to
               **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and `memory_utilization`
               cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to **0**.
        :param pulumi.Input[_builtins.str] databases: Specifies the databases of the instance. Databases are separated by commas (,). It is
               mandatory when `limit_type` is set to **SQL_TYPE**.
        :param pulumi.Input[_builtins.str] end_time: Specifies the task end time. It is mandatory when `task_scope` is set to **SQL**.
               Value range: later than the task start time. The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_words: Specifies the keyword. It is mandatory when `limit_type` is set to **SQL_TYPE**. You
               can enter **2** to **100** keywords and separate multiple keywords by commas (,). Each keyword can contain **2** to
               **64** characters and cannot start and end with a space. The specifical characters ("\\{}) and null are not allowed.
        :param pulumi.Input[_builtins.str] limit_type: Specifies the throttling type.
               + When `task_scope` is set to **SQL**, the value can be **SQL_ID** or **SQL_TYPE**.
               + When `task_scope` is set to **SESSION**, the value can be **SESSION_ACTIVE_MAX_COUNT**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] limit_type_value: Specifies the throttling type value.
               + When `limit_type` is set to **SQL_ID**, the value of this parameter is the SQL ID of the selected template.
               + When `limit_type` is set to **SQL_TYPE**, the value of this parameter can be **select**, **update**, **insert**,
               **delete**, or **merge**.
               + When `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**, the value of this parameter can only be **CPU_OR_MEMORY**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] memory_utilization: Specifies the Memory usage threshold. The value is an integer ranging from **0**
               to **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and
               `cpu_utilization` cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to
               **0**.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OpengaussSqlThrottlingTaskNodeInfoArgs', 'OpengaussSqlThrottlingTaskNodeInfoArgsDict']]]] node_infos: Specifies the CN information. It is mandatory when `limit_type` is set to
               **SQL_ID**. The node_infos structure is documented below.
               
               Changing this parameter will create a new resource.
               
               <a name="node_infos_struct"></a>
               The `node_infos` block supports:
        :param pulumi.Input[_builtins.int] parallel_size: Specifies the maximum concurrency. The value can be **0** or a positive integer.
               Value range: **0** to **2147483647**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] sql_model: Specifies the SQL template. It is mandatory when `limit_type` is set to
               **SQL_ID**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the task start time. It is mandatory when `task_scope` is set to **SQL**.
               Value range: two minutes later than or equal to the current time (UTC time). The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the SQL throttling task. The value can contain up to
               **100** characters. Only uppercase letters, lowercase letters, underscores (_), digits, and dollar signs ($) are allowed.
        :param pulumi.Input[_builtins.str] task_scope: Specifies the task scope. Currently, **SQL** and **SESSION** are supported.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OpengaussSqlThrottlingTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB OpenGauss SQL throttling task resource within HuaweiCloud.

        ## Example Usage

        ### Create by SQL_ID

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        node_id = config.require_object("nodeId")
        sql_id = config.require_object("sqlId")
        source = huaweicloud.gaussdbforopengauss.OpengaussSqlThrottlingTask("source",
            instance_id=instance_id,
            task_scope="SQL",
            limit_type="SQL_ID",
            limit_type_value=sql_id,
            task_name="test_task_name",
            parallel_size=4,
            start_time="2025-02-12T11:47:20+0800",
            end_time="2025-02-13T11:47:20+0800",
            sql_model="select name, setting from pg_settings where name in (1...n)",
            node_infos=[{
                "node_id": node_id,
                "sql_id": sql_id,
            }])
        ```

        ### Create by SQL_TYPE

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdbforopengauss.OpengaussSqlThrottlingTask("test",
            instance_id=instance_id,
            task_scope="SQL",
            limit_type="SQL_TYPE",
            limit_type_value="update",
            task_name="test_task_name",
            parallel_size=4,
            start_time="2025-02-12T11:47:20+0800",
            end_time="2025-02-13T11:47:20+0800",
            key_words="aaa,bbb,ccc",
            databases="test_db_111")
        ```

        ### Create by SESSION

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdbforopengauss.OpengaussSqlThrottlingTask("test",
            instance_id=instance_id,
            task_scope="SESSION",
            limit_type="SESSION_ACTIVE_MAX_COUNT",
            limit_type_value="CPU_OR_MEMORY",
            task_name="test_task_name",
            parallel_size=4,
            cpu_utilization=20,
            memory_utilization=40)
        ```

        ## Import

        The GaussDB OpenGauss SQL throttling task can be imported using `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDBforOpenGauss/opengaussSqlThrottlingTask:OpengaussSqlThrottlingTask test <instance_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to the attribute missing from the

        API response. The missing attribute is: `start_time` `end_time`. It is generally recommended running `pulumi preview`

        after importing a GaussDB OpenGauss SQL throttling task. You can then decide if changes should be applied to the GaussDB

        OpenGauss SQL throttling task, or the resource definition should be updated to align with the GaussDB OpenGauss SQL

        throttling task. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_gaussdb_opengauss_sql_throttling_task" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              start_time, end_time,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param OpengaussSqlThrottlingTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OpengaussSqlThrottlingTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 databases: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_words: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_type: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_type_value: Optional[pulumi.Input[_builtins.str]] = None,
                 memory_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 node_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OpengaussSqlThrottlingTaskNodeInfoArgs', 'OpengaussSqlThrottlingTaskNodeInfoArgsDict']]]]] = None,
                 parallel_size: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sql_model: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 task_name: Optional[pulumi.Input[_builtins.str]] = None,
                 task_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OpengaussSqlThrottlingTaskArgs.__new__(OpengaussSqlThrottlingTaskArgs)

            __props__.__dict__["cpu_utilization"] = cpu_utilization
            __props__.__dict__["databases"] = databases
            __props__.__dict__["end_time"] = end_time
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["key_words"] = key_words
            if limit_type is None and not opts.urn:
                raise TypeError("Missing required property 'limit_type'")
            __props__.__dict__["limit_type"] = limit_type
            if limit_type_value is None and not opts.urn:
                raise TypeError("Missing required property 'limit_type_value'")
            __props__.__dict__["limit_type_value"] = limit_type_value
            __props__.__dict__["memory_utilization"] = memory_utilization
            __props__.__dict__["node_infos"] = node_infos
            if parallel_size is None and not opts.urn:
                raise TypeError("Missing required property 'parallel_size'")
            __props__.__dict__["parallel_size"] = parallel_size
            __props__.__dict__["region"] = region
            __props__.__dict__["sql_model"] = sql_model
            __props__.__dict__["start_time"] = start_time
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            if task_scope is None and not opts.urn:
                raise TypeError("Missing required property 'task_scope'")
            __props__.__dict__["task_scope"] = task_scope
            __props__.__dict__["created_at"] = None
            __props__.__dict__["creator"] = None
            __props__.__dict__["modifier"] = None
            __props__.__dict__["rule_name"] = None
            __props__.__dict__["updated_at"] = None
        super(OpengaussSqlThrottlingTask, __self__).__init__(
            'huaweicloud:GaussDBforOpenGauss/opengaussSqlThrottlingTask:OpengaussSqlThrottlingTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cpu_utilization: Optional[pulumi.Input[_builtins.int]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            creator: Optional[pulumi.Input[_builtins.str]] = None,
            databases: Optional[pulumi.Input[_builtins.str]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            key_words: Optional[pulumi.Input[_builtins.str]] = None,
            limit_type: Optional[pulumi.Input[_builtins.str]] = None,
            limit_type_value: Optional[pulumi.Input[_builtins.str]] = None,
            memory_utilization: Optional[pulumi.Input[_builtins.int]] = None,
            modifier: Optional[pulumi.Input[_builtins.str]] = None,
            node_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OpengaussSqlThrottlingTaskNodeInfoArgs', 'OpengaussSqlThrottlingTaskNodeInfoArgsDict']]]]] = None,
            parallel_size: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rule_name: Optional[pulumi.Input[_builtins.str]] = None,
            sql_model: Optional[pulumi.Input[_builtins.str]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None,
            task_name: Optional[pulumi.Input[_builtins.str]] = None,
            task_scope: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'OpengaussSqlThrottlingTask':
        """
        Get an existing OpengaussSqlThrottlingTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] cpu_utilization: Specifies the CPU usage threshold. The value is an integer ranging from **0** to
               **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and `memory_utilization`
               cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to **0**.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        :param pulumi.Input[_builtins.str] creator: Indicates the creator.
        :param pulumi.Input[_builtins.str] databases: Specifies the databases of the instance. Databases are separated by commas (,). It is
               mandatory when `limit_type` is set to **SQL_TYPE**.
        :param pulumi.Input[_builtins.str] end_time: Specifies the task end time. It is mandatory when `task_scope` is set to **SQL**.
               Value range: later than the task start time. The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key_words: Specifies the keyword. It is mandatory when `limit_type` is set to **SQL_TYPE**. You
               can enter **2** to **100** keywords and separate multiple keywords by commas (,). Each keyword can contain **2** to
               **64** characters and cannot start and end with a space. The specifical characters ("\\{}) and null are not allowed.
        :param pulumi.Input[_builtins.str] limit_type: Specifies the throttling type.
               + When `task_scope` is set to **SQL**, the value can be **SQL_ID** or **SQL_TYPE**.
               + When `task_scope` is set to **SESSION**, the value can be **SESSION_ACTIVE_MAX_COUNT**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] limit_type_value: Specifies the throttling type value.
               + When `limit_type` is set to **SQL_ID**, the value of this parameter is the SQL ID of the selected template.
               + When `limit_type` is set to **SQL_TYPE**, the value of this parameter can be **select**, **update**, **insert**,
               **delete**, or **merge**.
               + When `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**, the value of this parameter can only be **CPU_OR_MEMORY**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] memory_utilization: Specifies the Memory usage threshold. The value is an integer ranging from **0**
               to **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and
               `cpu_utilization` cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to
               **0**.
        :param pulumi.Input[_builtins.str] modifier: Indicates the modifier.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OpengaussSqlThrottlingTaskNodeInfoArgs', 'OpengaussSqlThrottlingTaskNodeInfoArgsDict']]]] node_infos: Specifies the CN information. It is mandatory when `limit_type` is set to
               **SQL_ID**. The node_infos structure is documented below.
               
               Changing this parameter will create a new resource.
               
               <a name="node_infos_struct"></a>
               The `node_infos` block supports:
        :param pulumi.Input[_builtins.int] parallel_size: Specifies the maximum concurrency. The value can be **0** or a positive integer.
               Value range: **0** to **2147483647**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] rule_name: Indicates the rule name.
        :param pulumi.Input[_builtins.str] sql_model: Specifies the SQL template. It is mandatory when `limit_type` is set to
               **SQL_ID**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Specifies the task start time. It is mandatory when `task_scope` is set to **SQL**.
               Value range: two minutes later than or equal to the current time (UTC time). The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        :param pulumi.Input[_builtins.str] task_name: Specifies the name of the SQL throttling task. The value can contain up to
               **100** characters. Only uppercase letters, lowercase letters, underscores (_), digits, and dollar signs ($) are allowed.
        :param pulumi.Input[_builtins.str] task_scope: Specifies the task scope. Currently, **SQL** and **SESSION** are supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the update time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OpengaussSqlThrottlingTaskState.__new__(_OpengaussSqlThrottlingTaskState)

        __props__.__dict__["cpu_utilization"] = cpu_utilization
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["creator"] = creator
        __props__.__dict__["databases"] = databases
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["key_words"] = key_words
        __props__.__dict__["limit_type"] = limit_type
        __props__.__dict__["limit_type_value"] = limit_type_value
        __props__.__dict__["memory_utilization"] = memory_utilization
        __props__.__dict__["modifier"] = modifier
        __props__.__dict__["node_infos"] = node_infos
        __props__.__dict__["parallel_size"] = parallel_size
        __props__.__dict__["region"] = region
        __props__.__dict__["rule_name"] = rule_name
        __props__.__dict__["sql_model"] = sql_model
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["task_scope"] = task_scope
        __props__.__dict__["updated_at"] = updated_at
        return OpengaussSqlThrottlingTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cpuUtilization")
    def cpu_utilization(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the CPU usage threshold. The value is an integer ranging from **0** to
        **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and `memory_utilization`
        cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to **0**.
        """
        return pulumi.get(self, "cpu_utilization")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creation time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the databases of the instance. Databases are separated by commas (,). It is
        mandatory when `limit_type` is set to **SQL_TYPE**.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the task end time. It is mandatory when `task_scope` is set to **SQL**.
        Value range: later than the task start time. The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the GaussDB OpenGauss instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keyWords")
    def key_words(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the keyword. It is mandatory when `limit_type` is set to **SQL_TYPE**. You
        can enter **2** to **100** keywords and separate multiple keywords by commas (,). Each keyword can contain **2** to
        **64** characters and cannot start and end with a space. The specifical characters ("\\{}) and null are not allowed.
        """
        return pulumi.get(self, "key_words")

    @_builtins.property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the throttling type.
        + When `task_scope` is set to **SQL**, the value can be **SQL_ID** or **SQL_TYPE**.
        + When `task_scope` is set to **SESSION**, the value can be **SESSION_ACTIVE_MAX_COUNT**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "limit_type")

    @_builtins.property
    @pulumi.getter(name="limitTypeValue")
    def limit_type_value(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the throttling type value.
        + When `limit_type` is set to **SQL_ID**, the value of this parameter is the SQL ID of the selected template.
        + When `limit_type` is set to **SQL_TYPE**, the value of this parameter can be **select**, **update**, **insert**,
        **delete**, or **merge**.
        + When `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**, the value of this parameter can only be **CPU_OR_MEMORY**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "limit_type_value")

    @_builtins.property
    @pulumi.getter(name="memoryUtilization")
    def memory_utilization(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the Memory usage threshold. The value is an integer ranging from **0**
        to **100**. It is mandatory when `limit_type` is set to **SESSION_ACTIVE_MAX_COUNT**. This parameter and
        `cpu_utilization` cannot be both set to **0**. If you only need one of them for throttling, set the other threshold to
        **0**.
        """
        return pulumi.get(self, "memory_utilization")

    @_builtins.property
    @pulumi.getter
    def modifier(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the modifier.
        """
        return pulumi.get(self, "modifier")

    @_builtins.property
    @pulumi.getter(name="nodeInfos")
    def node_infos(self) -> pulumi.Output[Sequence['outputs.OpengaussSqlThrottlingTaskNodeInfo']]:
        """
        Specifies the CN information. It is mandatory when `limit_type` is set to
        **SQL_ID**. The node_infos structure is documented below.

        Changing this parameter will create a new resource.

        <a name="node_infos_struct"></a>
        The `node_infos` block supports:
        """
        return pulumi.get(self, "node_infos")

    @_builtins.property
    @pulumi.getter(name="parallelSize")
    def parallel_size(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the maximum concurrency. The value can be **0** or a positive integer.
        Value range: **0** to **2147483647**.
        """
        return pulumi.get(self, "parallel_size")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the rule name.
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="sqlModel")
    def sql_model(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the SQL template. It is mandatory when `limit_type` is set to
        **SQL_ID**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "sql_model")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the task start time. It is mandatory when `task_scope` is set to **SQL**.
        Value range: two minutes later than or equal to the current time (UTC time). The format must be **yyyy-mm-ddThh:mm:ss+0000**.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the SQL throttling task. The value can contain up to
        **100** characters. Only uppercase letters, lowercase letters, underscores (_), digits, and dollar signs ($) are allowed.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskScope")
    def task_scope(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the task scope. Currently, **SQL** and **SESSION** are supported.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "task_scope")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the update time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "updated_at")

