# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetOpengaussSolutionTemplateSettingResult',
    'AwaitableGetOpengaussSolutionTemplateSettingResult',
    'get_opengauss_solution_template_setting',
    'get_opengauss_solution_template_setting_output',
]

@pulumi.output_type
class GetOpengaussSolutionTemplateSettingResult:
    """
    A collection of values returned by getOpengaussSolutionTemplateSetting.
    """
    def __init__(__self__, id=None, initial_node_num=None, instance_id=None, region=None, replica_num=None, shard_num=None, solution=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if initial_node_num and not isinstance(initial_node_num, int):
            raise TypeError("Expected argument 'initial_node_num' to be a int")
        pulumi.set(__self__, "initial_node_num", initial_node_num)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if replica_num and not isinstance(replica_num, int):
            raise TypeError("Expected argument 'replica_num' to be a int")
        pulumi.set(__self__, "replica_num", replica_num)
        if shard_num and not isinstance(shard_num, int):
            raise TypeError("Expected argument 'shard_num' to be a int")
        pulumi.set(__self__, "shard_num", shard_num)
        if solution and not isinstance(solution, str):
            raise TypeError("Expected argument 'solution' to be a str")
        pulumi.set(__self__, "solution", solution)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="initialNodeNum")
    def initial_node_num(self) -> _builtins.int:
        """
        Indicates the number of initial nodes.
        If `solution` is set to **triset**, this parameter is returned. Otherwise, **null** is returned.
        """
        return pulumi.get(self, "initial_node_num")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="replicaNum")
    def replica_num(self) -> _builtins.int:
        """
        Indicates the number of replicas.
        """
        return pulumi.get(self, "replica_num")

    @_builtins.property
    @pulumi.getter(name="shardNum")
    def shard_num(self) -> _builtins.int:
        """
        Indicates the number of shards.
        """
        return pulumi.get(self, "shard_num")

    @_builtins.property
    @pulumi.getter
    def solution(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "solution")


class AwaitableGetOpengaussSolutionTemplateSettingResult(GetOpengaussSolutionTemplateSettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussSolutionTemplateSettingResult(
            id=self.id,
            initial_node_num=self.initial_node_num,
            instance_id=self.instance_id,
            region=self.region,
            replica_num=self.replica_num,
            shard_num=self.shard_num,
            solution=self.solution)


def get_opengauss_solution_template_setting(instance_id: Optional[_builtins.str] = None,
                                            region: Optional[_builtins.str] = None,
                                            solution: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussSolutionTemplateSettingResult:
    """
    Use this data source to get the number of replicas, shards, and nodes corresponding to a specified instance or
    deployment mode.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_solution_template_setting(solution="single")
    ```


    :param _builtins.str instance_id: Specifies the GaussDB OpenGauss instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str solution: Specifies the solution template name.
           Value options: **triset**, **single**.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['solution'] = solution
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussSolutionTemplateSetting:getOpengaussSolutionTemplateSetting', __args__, opts=opts, typ=GetOpengaussSolutionTemplateSettingResult).value

    return AwaitableGetOpengaussSolutionTemplateSettingResult(
        id=pulumi.get(__ret__, 'id'),
        initial_node_num=pulumi.get(__ret__, 'initial_node_num'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        replica_num=pulumi.get(__ret__, 'replica_num'),
        shard_num=pulumi.get(__ret__, 'shard_num'),
        solution=pulumi.get(__ret__, 'solution'))
def get_opengauss_solution_template_setting_output(instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   solution: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussSolutionTemplateSettingResult]:
    """
    Use this data source to get the number of replicas, shards, and nodes corresponding to a specified instance or
    deployment mode.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_solution_template_setting(solution="single")
    ```


    :param _builtins.str instance_id: Specifies the GaussDB OpenGauss instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str solution: Specifies the solution template name.
           Value options: **triset**, **single**.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['solution'] = solution
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussSolutionTemplateSetting:getOpengaussSolutionTemplateSetting', __args__, opts=opts, typ=GetOpengaussSolutionTemplateSettingResult)
    return __ret__.apply(lambda __response__: GetOpengaussSolutionTemplateSettingResult(
        id=pulumi.get(__response__, 'id'),
        initial_node_num=pulumi.get(__response__, 'initial_node_num'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        replica_num=pulumi.get(__response__, 'replica_num'),
        shard_num=pulumi.get(__response__, 'shard_num'),
        solution=pulumi.get(__response__, 'solution')))
