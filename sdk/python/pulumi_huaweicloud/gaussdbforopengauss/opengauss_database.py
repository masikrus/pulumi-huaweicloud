# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['OpengaussDatabaseArgs', 'OpengaussDatabase']

@pulumi.input_type
class OpengaussDatabaseArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 character_set: Optional[pulumi.Input[_builtins.str]] = None,
                 lc_collate: Optional[pulumi.Input[_builtins.str]] = None,
                 lc_ctype: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 template: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a OpengaussDatabase resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] character_set: Specifies the database character set. Defaults to **UTF8**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] lc_collate: Specifies the database collation. Defaults to **C**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] lc_ctype: Specifies the database classification. Defaults to **C**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the database name. The name can contain `1` to `63` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed. It cannot start with **pg** or a digit, and must
               be different from template database names. Template databases include **postgres**, **template0**, **template1** and
               **templatem**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] owner: Specifies the Database user. Defaults to **root**. The value must be an existing
               username and must be different from system usernames. System users: **rdsAdmin**, **rdsMetric**, **rdsBackup** and
               **rdsRepl**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template: Specifies the name of the database template. The value can be **template0**.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if character_set is not None:
            pulumi.set(__self__, "character_set", character_set)
        if lc_collate is not None:
            pulumi.set(__self__, "lc_collate", lc_collate)
        if lc_ctype is not None:
            pulumi.set(__self__, "lc_ctype", lc_ctype)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the GaussDB instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database character set. Defaults to **UTF8**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "character_set")

    @character_set.setter
    def character_set(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "character_set", value)

    @_builtins.property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database collation. Defaults to **C**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "lc_collate")

    @lc_collate.setter
    def lc_collate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lc_collate", value)

    @_builtins.property
    @pulumi.getter(name="lcCtype")
    def lc_ctype(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database classification. Defaults to **C**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "lc_ctype")

    @lc_ctype.setter
    def lc_ctype(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lc_ctype", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database name. The name can contain `1` to `63` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed. It cannot start with **pg** or a digit, and must
        be different from template database names. Template databases include **postgres**, **template0**, **template1** and
        **templatem**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Database user. Defaults to **root**. The value must be an existing
        username and must be different from system usernames. System users: **rdsAdmin**, **rdsMetric**, **rdsBackup** and
        **rdsRepl**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the database template. The value can be **template0**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class _OpengaussDatabaseState:
    def __init__(__self__, *,
                 character_set: Optional[pulumi.Input[_builtins.str]] = None,
                 compatibility_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lc_collate: Optional[pulumi.Input[_builtins.str]] = None,
                 lc_ctype: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None,
                 template: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering OpengaussDatabase resources.
        :param pulumi.Input[_builtins.str] character_set: Specifies the database character set. Defaults to **UTF8**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] compatibility_type: Indicates the database compatibility type.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] lc_collate: Specifies the database collation. Defaults to **C**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] lc_ctype: Specifies the database classification. Defaults to **C**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the database name. The name can contain `1` to `63` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed. It cannot start with **pg** or a digit, and must
               be different from template database names. Template databases include **postgres**, **template0**, **template1** and
               **templatem**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] owner: Specifies the Database user. Defaults to **root**. The value must be an existing
               username and must be different from system usernames. System users: **rdsAdmin**, **rdsMetric**, **rdsBackup** and
               **rdsRepl**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] size: Indicates the database size.
        :param pulumi.Input[_builtins.str] template: Specifies the name of the database template. The value can be **template0**.
               
               Changing this parameter will create a new resource.
        """
        if character_set is not None:
            pulumi.set(__self__, "character_set", character_set)
        if compatibility_type is not None:
            pulumi.set(__self__, "compatibility_type", compatibility_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if lc_collate is not None:
            pulumi.set(__self__, "lc_collate", lc_collate)
        if lc_ctype is not None:
            pulumi.set(__self__, "lc_ctype", lc_ctype)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @_builtins.property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database character set. Defaults to **UTF8**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "character_set")

    @character_set.setter
    def character_set(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "character_set", value)

    @_builtins.property
    @pulumi.getter(name="compatibilityType")
    def compatibility_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the database compatibility type.
        """
        return pulumi.get(self, "compatibility_type")

    @compatibility_type.setter
    def compatibility_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compatibility_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database collation. Defaults to **C**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "lc_collate")

    @lc_collate.setter
    def lc_collate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lc_collate", value)

    @_builtins.property
    @pulumi.getter(name="lcCtype")
    def lc_ctype(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database classification. Defaults to **C**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "lc_ctype")

    @lc_ctype.setter
    def lc_ctype(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lc_ctype", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database name. The name can contain `1` to `63` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed. It cannot start with **pg** or a digit, and must
        be different from template database names. Template databases include **postgres**, **template0**, **template1** and
        **templatem**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Database user. Defaults to **root**. The value must be an existing
        username and must be different from system usernames. System users: **rdsAdmin**, **rdsMetric**, **rdsBackup** and
        **rdsRepl**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the database size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the database template. The value can be **template0**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template", value)


@pulumi.type_token("huaweicloud:GaussDBforOpenGauss/opengaussDatabase:OpengaussDatabase")
class OpengaussDatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 character_set: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lc_collate: Optional[pulumi.Input[_builtins.str]] = None,
                 lc_ctype: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 template: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB database resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdbforopengauss.OpengaussDatabase("test",
            instance_id=instance_id,
            name="test_db_name")
        ```

        ## Import

        The GaussDB database can be imported using the `instance_id` and `name` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDBforOpenGauss/opengaussDatabase:OpengaussDatabase test <instance_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `template` and `lc_ctype`. It is generally

        recommended running `pulumi preview` after importing a GaussDB database. You can then decide if changes should be applied

        to the GaussDB database, or the resource definition should be updated to align with the GaussDB database. Also, you can

        ignore changes as below.

        hcl

        resource "huaweicloud_gaussdb_opengauss_database" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              template, lc_ctype,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] character_set: Specifies the database character set. Defaults to **UTF8**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] lc_collate: Specifies the database collation. Defaults to **C**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] lc_ctype: Specifies the database classification. Defaults to **C**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the database name. The name can contain `1` to `63` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed. It cannot start with **pg** or a digit, and must
               be different from template database names. Template databases include **postgres**, **template0**, **template1** and
               **templatem**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] owner: Specifies the Database user. Defaults to **root**. The value must be an existing
               username and must be different from system usernames. System users: **rdsAdmin**, **rdsMetric**, **rdsBackup** and
               **rdsRepl**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template: Specifies the name of the database template. The value can be **template0**.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OpengaussDatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB database resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdbforopengauss.OpengaussDatabase("test",
            instance_id=instance_id,
            name="test_db_name")
        ```

        ## Import

        The GaussDB database can be imported using the `instance_id` and `name` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDBforOpenGauss/opengaussDatabase:OpengaussDatabase test <instance_id>/<name>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `template` and `lc_ctype`. It is generally

        recommended running `pulumi preview` after importing a GaussDB database. You can then decide if changes should be applied

        to the GaussDB database, or the resource definition should be updated to align with the GaussDB database. Also, you can

        ignore changes as below.

        hcl

        resource "huaweicloud_gaussdb_opengauss_database" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              template, lc_ctype,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param OpengaussDatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OpengaussDatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 character_set: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lc_collate: Optional[pulumi.Input[_builtins.str]] = None,
                 lc_ctype: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 template: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OpengaussDatabaseArgs.__new__(OpengaussDatabaseArgs)

            __props__.__dict__["character_set"] = character_set
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["lc_collate"] = lc_collate
            __props__.__dict__["lc_ctype"] = lc_ctype
            __props__.__dict__["name"] = name
            __props__.__dict__["owner"] = owner
            __props__.__dict__["region"] = region
            __props__.__dict__["template"] = template
            __props__.__dict__["compatibility_type"] = None
            __props__.__dict__["size"] = None
        super(OpengaussDatabase, __self__).__init__(
            'huaweicloud:GaussDBforOpenGauss/opengaussDatabase:OpengaussDatabase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            character_set: Optional[pulumi.Input[_builtins.str]] = None,
            compatibility_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            lc_collate: Optional[pulumi.Input[_builtins.str]] = None,
            lc_ctype: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.str]] = None,
            template: Optional[pulumi.Input[_builtins.str]] = None) -> 'OpengaussDatabase':
        """
        Get an existing OpengaussDatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] character_set: Specifies the database character set. Defaults to **UTF8**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] compatibility_type: Indicates the database compatibility type.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] lc_collate: Specifies the database collation. Defaults to **C**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] lc_ctype: Specifies the database classification. Defaults to **C**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the database name. The name can contain `1` to `63` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed. It cannot start with **pg** or a digit, and must
               be different from template database names. Template databases include **postgres**, **template0**, **template1** and
               **templatem**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] owner: Specifies the Database user. Defaults to **root**. The value must be an existing
               username and must be different from system usernames. System users: **rdsAdmin**, **rdsMetric**, **rdsBackup** and
               **rdsRepl**.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] size: Indicates the database size.
        :param pulumi.Input[_builtins.str] template: Specifies the name of the database template. The value can be **template0**.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OpengaussDatabaseState.__new__(_OpengaussDatabaseState)

        __props__.__dict__["character_set"] = character_set
        __props__.__dict__["compatibility_type"] = compatibility_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["lc_collate"] = lc_collate
        __props__.__dict__["lc_ctype"] = lc_ctype
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["region"] = region
        __props__.__dict__["size"] = size
        __props__.__dict__["template"] = template
        return OpengaussDatabase(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the database character set. Defaults to **UTF8**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "character_set")

    @_builtins.property
    @pulumi.getter(name="compatibilityType")
    def compatibility_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the database compatibility type.
        """
        return pulumi.get(self, "compatibility_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the GaussDB instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the database collation. Defaults to **C**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "lc_collate")

    @_builtins.property
    @pulumi.getter(name="lcCtype")
    def lc_ctype(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the database classification. Defaults to **C**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "lc_ctype")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the database name. The name can contain `1` to `63` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed. It cannot start with **pg** or a digit, and must
        be different from template database names. Template databases include **postgres**, **template0**, **template1** and
        **templatem**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the Database user. Defaults to **root**. The value must be an existing
        username and must be different from system usernames. System users: **rdsAdmin**, **rdsMetric**, **rdsBackup** and
        **rdsRepl**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the database size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def template(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the database template. The value can be **template0**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template")

