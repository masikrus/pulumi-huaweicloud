# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOpengaussTasksResult',
    'AwaitableGetOpengaussTasksResult',
    'get_opengauss_tasks',
    'get_opengauss_tasks_output',
]

@pulumi.output_type
class GetOpengaussTasksResult:
    """
    A collection of values returned by getOpengaussTasks.
    """
    def __init__(__self__, end_time=None, id=None, name=None, region=None, start_time=None, status=None, tasks=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the task name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the task execution status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetOpengaussTasksTaskResult']:
        """
        Indicates the task list.
        """
        return pulumi.get(self, "tasks")


class AwaitableGetOpengaussTasksResult(GetOpengaussTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussTasksResult(
            end_time=self.end_time,
            id=self.id,
            name=self.name,
            region=self.region,
            start_time=self.start_time,
            status=self.status,
            tasks=self.tasks)


def get_opengauss_tasks(end_time: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        start_time: Optional[_builtins.str] = None,
                        status: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussTasksResult:
    """
    Use this data source to get the list of GaussDB OpenGauss tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_tasks()
    ```


    :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str name: Specifies the task name. Value options:
           + **CreateGaussDBV5Instance**: Creating a DB instance.
           + **BackupSnapshotGaussDBV5InInstance**: Creating a manual backup.
           + **CloneGaussDBV5NewInstance**: Restoring data to a new DB instance.
           + **RestoreGaussDBV5InInstance**: Restoring data to the original DB instance.
           + **RestoreGaussDBV5InInstanceToExistedInst**: Restoring data to an existing DB instance.
           + **DeleteGaussDBV5Instance**: Deleting a DB instance.
           + **EnlargeGaussDBV5Volume**: Scaling up storage.
           + **ResizeGaussDBV5Flavor**: Changing specifications.
           + **GaussDBV5ExpandClusterCN**: Adding coordinator nodes.
           + **GaussDBV5ExpandClusterDN**: Adding shards.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str status: Specifies the task execution status. Value options:
           + **Running**: The task is being executed.
           + **Completed**: The task is successfully executed.
           + **Failed**: The task failed to be executed.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['name'] = name
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussTasks:getOpengaussTasks', __args__, opts=opts, typ=GetOpengaussTasksResult).value

    return AwaitableGetOpengaussTasksResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        tasks=pulumi.get(__ret__, 'tasks'))
def get_opengauss_tasks_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussTasksResult]:
    """
    Use this data source to get the list of GaussDB OpenGauss tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_tasks()
    ```


    :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str name: Specifies the task name. Value options:
           + **CreateGaussDBV5Instance**: Creating a DB instance.
           + **BackupSnapshotGaussDBV5InInstance**: Creating a manual backup.
           + **CloneGaussDBV5NewInstance**: Restoring data to a new DB instance.
           + **RestoreGaussDBV5InInstance**: Restoring data to the original DB instance.
           + **RestoreGaussDBV5InInstanceToExistedInst**: Restoring data to an existing DB instance.
           + **DeleteGaussDBV5Instance**: Deleting a DB instance.
           + **EnlargeGaussDBV5Volume**: Scaling up storage.
           + **ResizeGaussDBV5Flavor**: Changing specifications.
           + **GaussDBV5ExpandClusterCN**: Adding coordinator nodes.
           + **GaussDBV5ExpandClusterDN**: Adding shards.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str status: Specifies the task execution status. Value options:
           + **Running**: The task is being executed.
           + **Completed**: The task is successfully executed.
           + **Failed**: The task failed to be executed.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['name'] = name
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussTasks:getOpengaussTasks', __args__, opts=opts, typ=GetOpengaussTasksResult)
    return __ret__.apply(lambda __response__: GetOpengaussTasksResult(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        tasks=pulumi.get(__response__, 'tasks')))
