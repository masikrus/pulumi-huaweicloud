# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'OpengaussBackupDatastore',
    'OpengaussInstanceAdvanceFeature',
    'OpengaussInstanceBackupStrategy',
    'OpengaussInstanceDatastore',
    'OpengaussInstanceHa',
    'OpengaussInstanceNode',
    'OpengaussInstanceParameter',
    'OpengaussInstanceVolume',
    'OpengaussParameterTemplateCompareDifference',
    'OpengaussParameterTemplateParameter',
    'OpengaussPrimaryStandbySwitchShard',
    'OpengaussSqlThrottlingTaskNodeInfo',
    'GetOpengaussAvailableFlavorsFlavorResult',
    'GetOpengaussBackupFilesFileResult',
    'GetOpengaussBackupsBackupResult',
    'GetOpengaussBackupsBackupDatastoreResult',
    'GetOpengaussDatabasesDatabaseResult',
    'GetOpengaussDatastoresDatastoreResult',
    'GetOpengaussErrorLogsLogFileResult',
    'GetOpengaussFlavorsFlavorResult',
    'GetOpengaussInstanceBackupStrategyResult',
    'GetOpengaussInstanceCoordinatorsNodeResult',
    'GetOpengaussInstanceDatastoreResult',
    'GetOpengaussInstanceFeaturesFeatureResult',
    'GetOpengaussInstanceHaResult',
    'GetOpengaussInstanceNodeResult',
    'GetOpengaussInstanceNodesNodeResult',
    'GetOpengaussInstanceNodesNodeComponentResult',
    'GetOpengaussInstanceVolumeResult',
    'GetOpengaussInstancesInstanceResult',
    'GetOpengaussInstancesInstanceBackupStrategyResult',
    'GetOpengaussInstancesInstanceDatastoreResult',
    'GetOpengaussInstancesInstanceHaResult',
    'GetOpengaussInstancesInstanceNodeResult',
    'GetOpengaussInstancesInstanceVolumeResult',
    'GetOpengaussParameterTemplatesConfigurationResult',
    'GetOpengaussPredefinedTagsTagResult',
    'GetOpengaussProjectQuotasQuotaResult',
    'GetOpengaussProjectQuotasQuotaResourceResult',
    'GetOpengaussPtApplicableInstancesInstanceResult',
    'GetOpengaussPtApplyRecordsHistoryResult',
    'GetOpengaussPtModifyRecordsHistoryResult',
    'GetOpengaussQuotasEpsQuotaResult',
    'GetOpengaussRecyclingInstancesInstanceResult',
    'GetOpengaussRestorableInstancesInstanceResult',
    'GetOpengaussRestoreTimeRangesRestoreTimeResult',
    'GetOpengaussSchemasDatabaseSchemaResult',
    'GetOpengaussSlowLogsListResult',
    'GetOpengaussSqlTemplatesNodeLimitSqlModelListResult',
    'GetOpengaussSqlThrottlingTasksLimitTaskListResult',
    'GetOpengaussSqlThrottlingTasksLimitTaskListNodeInfoResult',
    'GetOpengaussStorageTypesStorageTypeResult',
    'GetOpengaussTagsTagResult',
    'GetOpengaussTasksTaskResult',
    'GetOpengaussTopIoTrafficsTopIoInfoResult',
    'GetOpengaussUpgradeVersionsHotfixRollbackInfoResult',
    'GetOpengaussUpgradeVersionsHotfixUpgradeInfoResult',
    'GetOpengaussUpgradeVersionsRollUpgradeProgressResult',
    'GetOpengaussUpgradeVersionsUpgradeTypeListResult',
    'GetOpengaussUpgradeVersionsUpgradeTypeListUpgradeActionListResult',
]

@pulumi.output_type
class OpengaussBackupDatastore(dict):
    def __init__(__self__, *,
                 type: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Indicates the database engine.
        :param _builtins.str version: Indicates the database version.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class OpengaussInstanceAdvanceFeature(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the name of the advance feature.
        :param _builtins.str value: Specifies the value of the advance feature.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the advance feature.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the advance feature.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class OpengaussInstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpengaussInstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpengaussInstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpengaussInstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: _builtins.str,
                 keep_days: Optional[_builtins.int] = None):
        """
        :param _builtins.str start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the **hh:mm-HH:MM** format. The current time is in the UTC format. The
               **HH** value must be `1` greater than the **hh** value. The values of mm and MM must be the same and must be set to
               **00**. Example value: **08:00-09:00**, **23:00-00:00**.
        :param _builtins.int keep_days: Specifies the number of days to retain the generated backup files. The value ranges from
               `0` to `732`. If this parameter is set to `0`, the automated backup policy is not set.
               If this parameter is not transferred, the automated backup policy is enabled by default.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the **hh:mm-HH:MM** format. The current time is in the UTC format. The
        **HH** value must be `1` greater than the **hh** value. The values of mm and MM must be the same and must be set to
        **00**. Example value: **08:00-09:00**, **23:00-00:00**.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[_builtins.int]:
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        `0` to `732`. If this parameter is set to `0`, the automated backup policy is not set.
        If this parameter is not transferred, the automated backup policy is enabled by default.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "keep_days")


@pulumi.output_type
class OpengaussInstanceDatastore(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str engine: Specifies the database engine. Only **GaussDB(for openGauss)** is supported
               now. Changing this parameter will create a new resource.
        :param _builtins.str version: Specifies the database version. Defaults to the latest version. Please
               reference to the API docs for valid options. Changing this parameter will create a new resource.
               
               <a name="opengauss_backup_strategy"></a>
               The `backup_strategy` block supports:
        """
        pulumi.set(__self__, "engine", engine)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Specifies the database engine. Only **GaussDB(for openGauss)** is supported
        now. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Specifies the database version. Defaults to the latest version. Please
        reference to the API docs for valid options. Changing this parameter will create a new resource.

        <a name="opengauss_backup_strategy"></a>
        The `backup_strategy` block supports:
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class OpengaussInstanceHa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationMode":
            suggest = "replication_mode"
        elif key == "instanceMode":
            suggest = "instance_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpengaussInstanceHa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpengaussInstanceHa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpengaussInstanceHa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: _builtins.str,
                 replication_mode: _builtins.str,
                 consistency: Optional[_builtins.str] = None,
                 instance_mode: Optional[_builtins.str] = None):
        """
        :param _builtins.str mode: Specifies the deployment model.
               The valid values are **enterprise** and **centralization_standard**.
               Changing this parameter will create a new resource.
        :param _builtins.str replication_mode: Specifies the database replication mode.
               Only **sync** is supported now. Changing this parameter will create a new resource.
        :param _builtins.str consistency: Specifies the database consistency mode.
               The valid values are **strong** and **eventual**, not case-sensitive.
               Changing this parameter will create a new resource.
        :param _builtins.str instance_mode: Specifies the product type of the instance. Value options:
               + **enterprise**: The instance of the enterprise edition will be created.
               + **basic**: The instance of the basic edition will be created.
               + **ecology**: The instance of the ecosystem edition will be created.
               
               Changing this parameter will create a new resource.
               
               <a name="opengauss_volume"></a>
               The `volume` block supports:
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "replication_mode", replication_mode)
        if consistency is not None:
            pulumi.set(__self__, "consistency", consistency)
        if instance_mode is not None:
            pulumi.set(__self__, "instance_mode", instance_mode)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Specifies the deployment model.
        The valid values are **enterprise** and **centralization_standard**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter(name="replicationMode")
    def replication_mode(self) -> _builtins.str:
        """
        Specifies the database replication mode.
        Only **sync** is supported now. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "replication_mode")

    @_builtins.property
    @pulumi.getter
    def consistency(self) -> Optional[_builtins.str]:
        """
        Specifies the database consistency mode.
        The valid values are **strong** and **eventual**, not case-sensitive.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "consistency")

    @_builtins.property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> Optional[_builtins.str]:
        """
        Specifies the product type of the instance. Value options:
        + **enterprise**: The instance of the enterprise edition will be created.
        + **basic**: The instance of the basic edition will be created.
        + **ecology**: The instance of the ecosystem edition will be created.

        Changing this parameter will create a new resource.

        <a name="opengauss_volume"></a>
        The `volume` block supports:
        """
        return pulumi.get(self, "instance_mode")


@pulumi.output_type
class OpengaussInstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpengaussInstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpengaussInstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpengaussInstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str availability_zone: Specifies the availability zone information, can be three same or
               different az like **cn-north-4a,cn-north-4a,cn-north-4a**. Changing this parameter will create a new resource.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the advance feature.
        :param _builtins.str private_ip: Indicates the private IP address of the node.
        :param _builtins.str public_ip: Indicates the EIP that has been bound.
        :param _builtins.str role: Indicates the node role.
               + **master**.
               + **slave**.
        :param _builtins.str status: Indicates the node status.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        """
        Specifies the availability zone information, can be three same or
        different az like **cn-north-4a,cn-north-4a,cn-north-4a**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the advance feature.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the private IP address of the node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the EIP that has been bound.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Indicates the node role.
        + **master**.
        + **slave**.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class OpengaussInstanceParameter(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the name of the advance feature.
        :param _builtins.str value: Specifies the value of the advance feature.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the advance feature.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the advance feature.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class OpengaussInstanceVolume(dict):
    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int size: Specifies the volume size (in gigabytes). The valid value is range form `40` to `4,000`.
               
               <a name="opengauss_datastore"></a>
               The `datastore` block supports:
        :param _builtins.str type: Specifies the volume type. Only **ULTRAHIGH** is supported now.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the volume size (in gigabytes). The valid value is range form `40` to `4,000`.

        <a name="opengauss_datastore"></a>
        The `datastore` block supports:
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the volume type. Only **ULTRAHIGH** is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class OpengaussParameterTemplateCompareDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceValue":
            suggest = "source_value"
        elif key == "targetValue":
            suggest = "target_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpengaussParameterTemplateCompareDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpengaussParameterTemplateCompareDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpengaussParameterTemplateCompareDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 source_value: Optional[_builtins.str] = None,
                 target_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Indicates the parameter name.
        :param _builtins.str source_value: Indicates the parameter value in the source parameter template.
        :param _builtins.str target_value: Indicates the parameter value in the destination parameter template.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_value is not None:
            pulumi.set(__self__, "source_value", source_value)
        if target_value is not None:
            pulumi.set(__self__, "target_value", target_value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceValue")
    def source_value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value in the source parameter template.
        """
        return pulumi.get(self, "source_value")

    @_builtins.property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value in the destination parameter template.
        """
        return pulumi.get(self, "target_value")


@pulumi.output_type
class OpengaussParameterTemplateParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "needRestart":
            suggest = "need_restart"
        elif key == "valueRange":
            suggest = "value_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpengaussParameterTemplateParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpengaussParameterTemplateParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpengaussParameterTemplateParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str,
                 data_type: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 need_restart: Optional[_builtins.bool] = None,
                 readonly: Optional[_builtins.bool] = None,
                 value_range: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the name of a specific parameter.
        :param _builtins.str value: Specifies the value of a specific parameter.
        :param _builtins.str data_type: Indicates the data type. The value can be **string**, **integer**, **boolean**, **list**, **all**,
               or **float**.
        :param _builtins.str description: Specifies the Parameter template description. This parameter is left blank
               by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
               allowed.
               
               Changing this parameter will create a new resource.
        :param _builtins.bool need_restart: Indicates whether the instance needs to be rebooted.
        :param _builtins.bool readonly: Indicates whether the parameter is read-only.
        :param _builtins.str value_range: Indicates the parameter value range.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if need_restart is not None:
            pulumi.set(__self__, "need_restart", need_restart)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of a specific parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of a specific parameter.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[_builtins.str]:
        """
        Indicates the data type. The value can be **string**, **integer**, **boolean**, **list**, **all**,
        or **float**.
        """
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the Parameter template description. This parameter is left blank
        by default. Up to **256** characters are displayed. Carriage return characters or special characters (>!<"&'=) are not
        allowed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the instance needs to be rebooted.
        """
        return pulumi.get(self, "need_restart")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the parameter is read-only.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value range.
        """
        return pulumi.get(self, "value_range")


@pulumi.output_type
class OpengaussPrimaryStandbySwitchShard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentId":
            suggest = "component_id"
        elif key == "nodeId":
            suggest = "node_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpengaussPrimaryStandbySwitchShard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpengaussPrimaryStandbySwitchShard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpengaussPrimaryStandbySwitchShard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_id: _builtins.str,
                 node_id: _builtins.str):
        """
        :param _builtins.str component_id: Specifies the ID of the standby DN to be promoted to primary.
               
               Changing this parameter will create a new resource.
        :param _builtins.str node_id: Specifies the ID of the node where the standby DN to be promoted to primary is
               deployed.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "component_id", component_id)
        pulumi.set(__self__, "node_id", node_id)

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> _builtins.str:
        """
        Specifies the ID of the standby DN to be promoted to primary.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Specifies the ID of the node where the standby DN to be promoted to primary is
        deployed.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "node_id")


@pulumi.output_type
class OpengaussSqlThrottlingTaskNodeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeId":
            suggest = "node_id"
        elif key == "sqlId":
            suggest = "sql_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpengaussSqlThrottlingTaskNodeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpengaussSqlThrottlingTaskNodeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpengaussSqlThrottlingTaskNodeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_id: _builtins.str,
                 sql_id: _builtins.str):
        """
        :param _builtins.str node_id: Specifies the node ID.
               
               Changing this parameter will create a new resource.
        :param _builtins.str sql_id: Specifies the ID of the SQL statement executed on the node. If `limit_type` is
               set to **SQL_ID**, the value of this parameter must be the same as that of `limit_type_value`.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "sql_id", sql_id)

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Specifies the node ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter(name="sqlId")
    def sql_id(self) -> _builtins.str:
        """
        Specifies the ID of the SQL statement executed on the node. If `limit_type` is
        set to **SQL_ID**, the value of this parameter must be the same as that of `limit_type_value`.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "sql_id")


@pulumi.output_type
class GetOpengaussAvailableFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 ram: _builtins.str,
                 spec_code: _builtins.str,
                 vcpus: _builtins.str):
        """
        :param Mapping[str, _builtins.str] az_status: Indicates the key/value pairs of the availability zone status.
               **key** indicates the AZ ID, and **value** indicates the specification status in the AZ.
               The **value** can be any of the following:
               + **normal**: available.
               + **unsupported**: not supported.
               + **sellout**: sold out.
        :param _builtins.str ram: Indicates the memory size in GB.
        :param _builtins.str spec_code: Indicates the resource specification code.
        :param _builtins.str vcpus: Indicates the number of vCPUs.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the key/value pairs of the availability zone status.
        **key** indicates the AZ ID, and **value** indicates the specification status in the AZ.
        The **value** can be any of the following:
        + **normal**: available.
        + **unsupported**: not supported.
        + **sellout**: sold out.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.str:
        """
        Indicates the memory size in GB.
        """
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        Indicates the resource specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Indicates the number of vCPUs.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetOpengaussBackupFilesFileResult(dict):
    def __init__(__self__, *,
                 download_link: _builtins.str,
                 link_expired_time: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.float):
        """
        :param _builtins.str download_link: Indicates the download link.
        :param _builtins.str link_expired_time: Indicates the link expired time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str name: Indicates the file name.
        :param _builtins.float size: Indicates the file size.
        """
        pulumi.set(__self__, "download_link", download_link)
        pulumi.set(__self__, "link_expired_time", link_expired_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> _builtins.str:
        """
        Indicates the download link.
        """
        return pulumi.get(self, "download_link")

    @_builtins.property
    @pulumi.getter(name="linkExpiredTime")
    def link_expired_time(self) -> _builtins.str:
        """
        Indicates the link expired time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "link_expired_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the file name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        """
        Indicates the file size.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetOpengaussBackupsBackupResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 datastores: Sequence['outputs.GetOpengaussBackupsBackupDatastoreResult'],
                 description: _builtins.str,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.float,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str begin_time: Specifies the query start time in the **yyyy-mm-ddThh:mm:ssZ** format.
               It can be used together with `end_time`. If `end_time` is not used, the backups created after begin_time are
               returned. If `end_time` is used, the backups created between `begin_time` and `end_time` are returned.
        :param Sequence['GetOpengaussBackupsBackupDatastoreArgs'] datastores: Indicates the database information.
        :param _builtins.str description: Indicates the description of the backup.
        :param _builtins.str end_time: Specifies the query end time in the **yyyy-mm-ddThh:mm:ssZ** format.
               It must be later than the start time. It can be used together with `begin_time`. If `begin_time` is not used, the
               backups created before `end_time` are returned. If `begin_time` is used, the backups created between
               `begin_time` and `end_time` are returned.
        :param _builtins.str id: Indicates the ID of the backup.
        :param _builtins.str instance_id: Specifies the ID of the GaussDB OpenGauss instance
        :param _builtins.str name: Indicates the name of the backup.
        :param _builtins.float size: Indicates the backup size in MB.
        :param _builtins.str status: Indicates the backup status.
               The value can be:
               + **BUILDING**: Backup in progress
               + **COMPLETED**: Backup completed
               + **FAILED**: Backup failed
        :param _builtins.str type: Indicates the DB engine.
               The value is case-insensitive and can be: **GaussDB**.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        Specifies the query start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        It can be used together with `end_time`. If `end_time` is not used, the backups created after begin_time are
        returned. If `end_time` is used, the backups created between `begin_time` and `end_time` are returned.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetOpengaussBackupsBackupDatastoreResult']:
        """
        Indicates the database information.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the backup.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the query end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        It must be later than the start time. It can be used together with `begin_time`. If `begin_time` is not used, the
        backups created before `end_time` are returned. If `begin_time` is used, the backups created between
        `begin_time` and `end_time` are returned.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the backup.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ID of the GaussDB OpenGauss instance
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the backup.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        """
        Indicates the backup size in MB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the backup status.
        The value can be:
        + **BUILDING**: Backup in progress
        + **COMPLETED**: Backup completed
        + **FAILED**: Backup failed
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the DB engine.
        The value is case-insensitive and can be: **GaussDB**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOpengaussBackupsBackupDatastoreResult(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str type: Indicates the DB engine.
               The value is case-insensitive and can be: **GaussDB**.
        :param _builtins.str version: Indicates the DB engine version
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the DB engine.
        The value is case-insensitive and can be: **GaussDB**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the DB engine version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetOpengaussDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 character_set: _builtins.str,
                 compatibility_type: _builtins.str,
                 lc_collate: _builtins.str,
                 name: _builtins.str,
                 owner: _builtins.str,
                 size: _builtins.str):
        """
        :param _builtins.str character_set: Indicates the database character set.
        :param _builtins.str compatibility_type: Indicates the database compatibility type.
        :param _builtins.str lc_collate: Indicates the database collation.
        :param _builtins.str name: Indicates the database name.
        :param _builtins.str owner: Indicates the database user.
        :param _builtins.str size: Indicates the database size.
        """
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "compatibility_type", compatibility_type)
        pulumi.set(__self__, "lc_collate", lc_collate)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> _builtins.str:
        """
        Indicates the database character set.
        """
        return pulumi.get(self, "character_set")

    @_builtins.property
    @pulumi.getter(name="compatibilityType")
    def compatibility_type(self) -> _builtins.str:
        """
        Indicates the database compatibility type.
        """
        return pulumi.get(self, "compatibility_type")

    @_builtins.property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> _builtins.str:
        """
        Indicates the database collation.
        """
        return pulumi.get(self, "lc_collate")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the database name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        Indicates the database user.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.str:
        """
        Indicates the database size.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetOpengaussDatastoresDatastoreResult(dict):
    def __init__(__self__, *,
                 instance_mode: _builtins.str,
                 supported_versions: Sequence[_builtins.str]):
        """
        :param _builtins.str instance_mode: Specifies the deployment model.
               The value can be:
               + **ha**: primary/standby
               + **independent**: independent
        :param Sequence[_builtins.str] supported_versions: Specifies the engine versions supported by the deployment model.
        """
        pulumi.set(__self__, "instance_mode", instance_mode)
        pulumi.set(__self__, "supported_versions", supported_versions)

    @_builtins.property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> _builtins.str:
        """
        Specifies the deployment model.
        The value can be:
        + **ha**: primary/standby
        + **independent**: independent
        """
        return pulumi.get(self, "instance_mode")

    @_builtins.property
    @pulumi.getter(name="supportedVersions")
    def supported_versions(self) -> Sequence[_builtins.str]:
        """
        Specifies the engine versions supported by the deployment model.
        """
        return pulumi.get(self, "supported_versions")


@pulumi.output_type
class GetOpengaussErrorLogsLogFileResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.str,
                 file_link: _builtins.str,
                 file_name: _builtins.str,
                 file_size: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
               Only error logs generated in the past 30 days can be queried.
        :param _builtins.str file_link: Indicates the link for downloading the log file.
        :param _builtins.str file_name: Indicates the log file name.
        :param _builtins.str file_size: Indicates the log file size in KB.
        :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str status: Indicates the log collection status.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "file_link", file_link)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_size", file_size)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        Only error logs generated in the past 30 days can be queried.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="fileLink")
    def file_link(self) -> _builtins.str:
        """
        Indicates the link for downloading the log file.
        """
        return pulumi.get(self, "file_link")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        Indicates the log file name.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> _builtins.str:
        """
        Indicates the log file size in KB.
        """
        return pulumi.get(self, "file_size")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the log collection status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetOpengaussFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[_builtins.str],
                 az_status: Mapping[str, _builtins.str],
                 group_type: _builtins.str,
                 name: _builtins.str,
                 ram: _builtins.str,
                 spec_code: _builtins.str,
                 vcpus: _builtins.str,
                 version: _builtins.str):
        """
        :param Sequence[_builtins.str] availability_zones: Indicates the AZ supported by the specifications.
        :param Mapping[str, _builtins.str] az_status: Indicates the key/value pairs of the availability zone status.
               **key** indicates the AZ ID, and **value** indicates the specification status in the AZ.
        :param _builtins.str group_type: Performance specifications.
               The value can be:
               + **normal**: dedicated (1:8)
               + **normal2**: dedicated (1:4)
               + **armFlavors**: Kunpeng dedicated (1:8)
               + **exclusive**: Dedicated (1:4) It is only suitable for primary/standby instances of the basic edition.
               + **armExclusive**: Kunpeng dedicated (1:4) It is only suitable for primary/standby instances of the basic edition.
               + **economical**: Favored (1:4)
               + **economical2**: Favored (1:8)
               + **armFlavors2**: Kunpeng dedicated (1:4)
               + **general**: general-purpose (1:4)
        :param _builtins.str name: Indicates the DB engine.
        :param _builtins.str ram: Indicates the memory size in GB.
        :param _builtins.str spec_code: Specifies the specification code.
        :param _builtins.str vcpus: Indicates the number of vCPUs.
        :param _builtins.str version: Specifies the version of the GaussDB OpenGauss.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "group_type", group_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "vcpus", vcpus)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the AZ supported by the specifications.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the key/value pairs of the availability zone status.
        **key** indicates the AZ ID, and **value** indicates the specification status in the AZ.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter(name="groupType")
    def group_type(self) -> _builtins.str:
        """
        Performance specifications.
        The value can be:
        + **normal**: dedicated (1:8)
        + **normal2**: dedicated (1:4)
        + **armFlavors**: Kunpeng dedicated (1:8)
        + **exclusive**: Dedicated (1:4) It is only suitable for primary/standby instances of the basic edition.
        + **armExclusive**: Kunpeng dedicated (1:4) It is only suitable for primary/standby instances of the basic edition.
        + **economical**: Favored (1:4)
        + **economical2**: Favored (1:8)
        + **armFlavors2**: Kunpeng dedicated (1:4)
        + **general**: general-purpose (1:4)
        """
        return pulumi.get(self, "group_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the DB engine.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.str:
        """
        Indicates the memory size in GB.
        """
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        Specifies the specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Indicates the number of vCPUs.
        """
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the version of the GaussDB OpenGauss.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetOpengaussInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.int keep_days: Indicates the number of days to retain the generated
        :param _builtins.str start_time: Indicates the backup time window.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Indicates the number of days to retain the generated
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the backup time window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetOpengaussInstanceCoordinatorsNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 support_reduce: _builtins.bool):
        """
        :param _builtins.str availability_zone: Indicates the availability zone.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Indicates the node name.
        :param _builtins.str status: Indicates the node status.
               The value can be:
               + **normal**: The node is normal.
               + **abnormal**: The node is abnormal.
               + **creating**: The node is being created.
               + **createfail**: The node fails to be created.
        :param _builtins.bool support_reduce: Indicates whether the node can be deleted.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_reduce", support_reduce)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        The value can be:
        + **normal**: The node is normal.
        + **abnormal**: The node is abnormal.
        + **creating**: The node is being created.
        + **createfail**: The node fails to be created.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> _builtins.bool:
        """
        Indicates whether the node can be deleted.
        """
        return pulumi.get(self, "support_reduce")


@pulumi.output_type
class GetOpengaussInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Indicates the database engine.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetOpengaussInstanceFeaturesFeatureResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str,
                 range: _builtins.str,
                 range_description: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: Indicates the feature description.
        :param _builtins.str name: Indicates the feature name.
        :param _builtins.str range: Indicates the feature value range.
        :param _builtins.str range_description: Indicates the feature scope description.
        :param _builtins.str status: Indicates whether the feature is enabled.
        :param _builtins.str type: Indicates the feature value type.
               The value can be: **integer**, **string**, **boolean**.
        :param _builtins.str value: Indicates the feature value.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "range", range)
        pulumi.set(__self__, "range_description", range_description)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the feature description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the feature name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def range(self) -> _builtins.str:
        """
        Indicates the feature value range.
        """
        return pulumi.get(self, "range")

    @_builtins.property
    @pulumi.getter(name="rangeDescription")
    def range_description(self) -> _builtins.str:
        """
        Indicates the feature scope description.
        """
        return pulumi.get(self, "range_description")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates whether the feature is enabled.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the feature value type.
        The value can be: **integer**, **string**, **boolean**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the feature value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOpengaussInstanceHaResult(dict):
    def __init__(__self__, *,
                 replication_mode: _builtins.str):
        """
        :param _builtins.str replication_mode: Indicates the replication mode.
        """
        pulumi.set(__self__, "replication_mode", replication_mode)

    @_builtins.property
    @pulumi.getter(name="replicationMode")
    def replication_mode(self) -> _builtins.str:
        """
        Indicates the replication mode.
        """
        return pulumi.get(self, "replication_mode")


@pulumi.output_type
class GetOpengaussInstanceNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 role: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.str role: Indicates whether the node support reduce.
        :param _builtins.str status: Indicates the node status.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Indicates whether the node support reduce.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetOpengaussInstanceNodesNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone_id: _builtins.str,
                 components: Sequence['outputs.GetOpengaussInstanceNodesNodeComponentResult'],
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str availability_zone_id: Specifies the ID of the AZ where the primary component is located.
               + The default value is **ALL**, indicating that component information of nodes in all AZs of the instance is queried.
               + When you query the AZ where a primary DN is located, the information of all DNs in the same shard as the primary DN
               is displayed.
               + When you query the AZ where a CN is located, only the CN information in the AZ is displayed.
               + When you query the AZ where a component (except CNs or DNs) is located, information about all components of the same
               type is returned. If there is no such a component, no information is returned.
        :param Sequence['GetOpengaussInstanceNodesNodeComponentArgs'] components: Indicates the list of components.
        :param _builtins.str description: Indicates the node description.
        :param _builtins.str id: Indicates the component ID.
               + **Global Transaction Manager (GTM)**: manages the status of transactions.
               + **Cluster Management Server (CMS)**: manages the instance status.
               + **Data node (DN)**: stores and queries table data.
               + **Coordinator node (CN)**: stores database metadata, distributes and executes query tasks, and then returns the query
               results from DNs to applications.
               + **Editable Text Configuration Daemon (ETCD)**: serves as a distributed key-value storage system used for configuration
               sharing and service discovery (registration and search).
        :param _builtins.str name: Indicates the node name.
        :param _builtins.str status: Indicates the component status.
               + **Primary**: The component is primary.
               + **Normal**: The component is normal.
               + **Down**: The component is down.
               + **Standby**: The component is standby.
               + **StateFollower**: The ETCD is standby.
               + **StateLeader**: The ETCD is primary.
               + **StateCandidate**: The ETCD is in arbitration.
        """
        pulumi.set(__self__, "availability_zone_id", availability_zone_id)
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availabilityZoneId")
    def availability_zone_id(self) -> _builtins.str:
        """
        Specifies the ID of the AZ where the primary component is located.
        + The default value is **ALL**, indicating that component information of nodes in all AZs of the instance is queried.
        + When you query the AZ where a primary DN is located, the information of all DNs in the same shard as the primary DN
        is displayed.
        + When you query the AZ where a CN is located, only the CN information in the AZ is displayed.
        + When you query the AZ where a component (except CNs or DNs) is located, information about all components of the same
        type is returned. If there is no such a component, no information is returned.
        """
        return pulumi.get(self, "availability_zone_id")

    @_builtins.property
    @pulumi.getter
    def components(self) -> Sequence['outputs.GetOpengaussInstanceNodesNodeComponentResult']:
        """
        Indicates the list of components.
        """
        return pulumi.get(self, "components")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the node description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the component ID.
        + **Global Transaction Manager (GTM)**: manages the status of transactions.
        + **Cluster Management Server (CMS)**: manages the instance status.
        + **Data node (DN)**: stores and queries table data.
        + **Coordinator node (CN)**: stores database metadata, distributes and executes query tasks, and then returns the query
        results from DNs to applications.
        + **Editable Text Configuration Daemon (ETCD)**: serves as a distributed key-value storage system used for configuration
        sharing and service discovery (registration and search).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the component status.
        + **Primary**: The component is primary.
        + **Normal**: The component is normal.
        + **Down**: The component is down.
        + **Standby**: The component is standby.
        + **StateFollower**: The ETCD is standby.
        + **StateLeader**: The ETCD is primary.
        + **StateCandidate**: The ETCD is in arbitration.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetOpengaussInstanceNodesNodeComponentResult(dict):
    def __init__(__self__, *,
                 detail: _builtins.str,
                 distributed_id: _builtins.str,
                 id: _builtins.str,
                 role: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str detail: Indicates the node details.
        :param _builtins.str distributed_id: Indicates the Group ID, which is used to identify whether DNs are in the same shard.
               This parameter is suitable only for DNs. For other components, the value is an empty string.
        :param _builtins.str id: Indicates the component ID.
               + **Global Transaction Manager (GTM)**: manages the status of transactions.
               + **Cluster Management Server (CMS)**: manages the instance status.
               + **Data node (DN)**: stores and queries table data.
               + **Coordinator node (CN)**: stores database metadata, distributes and executes query tasks, and then returns the query
               results from DNs to applications.
               + **Editable Text Configuration Daemon (ETCD)**: serves as a distributed key-value storage system used for configuration
               sharing and service discovery (registration and search).
        :param _builtins.str role: Indicates the node type.
               The value can be **master** or **slave**, indicating the primary node and standby node respectively.
        :param _builtins.str status: Indicates the component status.
               + **Primary**: The component is primary.
               + **Normal**: The component is normal.
               + **Down**: The component is down.
               + **Standby**: The component is standby.
               + **StateFollower**: The ETCD is standby.
               + **StateLeader**: The ETCD is primary.
               + **StateCandidate**: The ETCD is in arbitration.
        :param _builtins.str type: Indicates the node type.
               The value can be **DN**, **CN**, **GTM**, **CM**, **ETCD**.
        """
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "distributed_id", distributed_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def detail(self) -> _builtins.str:
        """
        Indicates the node details.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter(name="distributedId")
    def distributed_id(self) -> _builtins.str:
        """
        Indicates the Group ID, which is used to identify whether DNs are in the same shard.
        This parameter is suitable only for DNs. For other components, the value is an empty string.
        """
        return pulumi.get(self, "distributed_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the component ID.
        + **Global Transaction Manager (GTM)**: manages the status of transactions.
        + **Cluster Management Server (CMS)**: manages the instance status.
        + **Data node (DN)**: stores and queries table data.
        + **Coordinator node (CN)**: stores database metadata, distributes and executes query tasks, and then returns the query
        results from DNs to applications.
        + **Editable Text Configuration Daemon (ETCD)**: serves as a distributed key-value storage system used for configuration
        sharing and service discovery (registration and search).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Indicates the node type.
        The value can be **master** or **slave**, indicating the primary node and standby node respectively.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the component status.
        + **Primary**: The component is primary.
        + **Normal**: The component is normal.
        + **Down**: The component is down.
        + **Standby**: The component is standby.
        + **StateFollower**: The ETCD is standby.
        + **StateLeader**: The ETCD is primary.
        + **StateCandidate**: The ETCD is in arbitration.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the node type.
        The value can be **DN**, **CN**, **GTM**, **CM**, **ETCD**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOpengaussInstanceVolumeResult(dict):
    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int size: Indicates the volume size. For ECS deployment: The value is from (Number of shards x 40 GB) to (Number of
               shards x 24 TB) and must be a multiple of (Number of shards x 4 GB).
        :param _builtins.str type: Indicates the volume type. Value options: **ULTRAHIGH**, **ESSD**.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the volume size. For ECS deployment: The value is from (Number of shards x 40 GB) to (Number of
        shards x 24 TB) and must be a multiple of (Number of shards x 4 GB).
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the volume type. Value options: **ULTRAHIGH**, **ESSD**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOpengaussInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 backup_strategies: Sequence['outputs.GetOpengaussInstancesInstanceBackupStrategyResult'],
                 coordinator_num: _builtins.int,
                 datastores: Sequence['outputs.GetOpengaussInstancesInstanceDatastoreResult'],
                 db_user_name: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 flavor: _builtins.str,
                 has: Sequence['outputs.GetOpengaussInstancesInstanceHaResult'],
                 id: _builtins.str,
                 maintenance_window: _builtins.str,
                 mysql_compatibility_port: _builtins.str,
                 name: _builtins.str,
                 nodes: Sequence['outputs.GetOpengaussInstancesInstanceNodeResult'],
                 port: _builtins.int,
                 private_ips: Sequence[_builtins.str],
                 public_ips: Sequence[_builtins.str],
                 region: _builtins.str,
                 replica_num: _builtins.int,
                 security_group_id: _builtins.str,
                 sharding_num: _builtins.int,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 switch_strategy: _builtins.str,
                 time_zone: _builtins.str,
                 type: _builtins.str,
                 volumes: Sequence['outputs.GetOpengaussInstancesInstanceVolumeResult'],
                 vpc_id: _builtins.str):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param Sequence['GetOpengaussInstancesInstanceBackupStrategyArgs'] backup_strategies: Indicates the advanced backup policy. Structure is documented below.
        :param _builtins.int coordinator_num: Indicates the count of coordinator node.
        :param Sequence['GetOpengaussInstancesInstanceDatastoreArgs'] datastores: Indicates the database information. Structure is documented below.
        :param _builtins.str db_user_name: Indicates the default username.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project id.
        :param _builtins.str flavor: Indicates the instance specifications.
        :param Sequence['GetOpengaussInstancesInstanceHaArgs'] has: Indicates the instance ha information. Structure is documented below.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str maintenance_window: Indicates the maintenance window.
        :param _builtins.str mysql_compatibility_port: Indicates the port for MySQL compatibility.
        :param _builtins.str name: Specifies the name of the instance.
        :param Sequence['GetOpengaussInstancesInstanceNodeArgs'] nodes: Indicates the instance nodes information. Structure is documented below.
        :param _builtins.int port: Indicates the database port.
        :param Sequence[_builtins.str] private_ips: Indicates the list of private IP address of the nodes.
        :param Sequence[_builtins.str] public_ips: Indicates the public IP address of the DB instance.
        :param _builtins.str region: The region in which to obtain the instance. If omitted, the provider-level region will
               be used.
        :param _builtins.int replica_num: Indicates the replica num.
        :param _builtins.str security_group_id: Indicates the security group ID.
        :param _builtins.int sharding_num: Indicates the sharding num.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str subnet_id: Specifies the network ID of a subnet.
        :param _builtins.str switch_strategy: Indicates the switch strategy.
        :param _builtins.str time_zone: Indicates the default username.
        :param _builtins.str type: Indicates the volume type.
        :param Sequence['GetOpengaussInstancesInstanceVolumeArgs'] volumes: Indicates the volume information. Structure is documented below.
        :param _builtins.str vpc_id: Specifies the VPC ID.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "backup_strategies", backup_strategies)
        pulumi.set(__self__, "coordinator_num", coordinator_num)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "has", has)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "maintenance_window", maintenance_window)
        pulumi.set(__self__, "mysql_compatibility_port", mysql_compatibility_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "public_ips", public_ips)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "replica_num", replica_num)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "sharding_num", sharding_num)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "switch_strategy", switch_strategy)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="backupStrategies")
    def backup_strategies(self) -> Sequence['outputs.GetOpengaussInstancesInstanceBackupStrategyResult']:
        """
        Indicates the advanced backup policy. Structure is documented below.
        """
        return pulumi.get(self, "backup_strategies")

    @_builtins.property
    @pulumi.getter(name="coordinatorNum")
    def coordinator_num(self) -> _builtins.int:
        """
        Indicates the count of coordinator node.
        """
        return pulumi.get(self, "coordinator_num")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetOpengaussInstancesInstanceDatastoreResult']:
        """
        Indicates the database information. Structure is documented below.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        Indicates the default username.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project id.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        Indicates the instance specifications.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def has(self) -> Sequence['outputs.GetOpengaussInstancesInstanceHaResult']:
        """
        Indicates the instance ha information. Structure is documented below.
        """
        return pulumi.get(self, "has")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> _builtins.str:
        """
        Indicates the maintenance window.
        """
        return pulumi.get(self, "maintenance_window")

    @_builtins.property
    @pulumi.getter(name="mysqlCompatibilityPort")
    def mysql_compatibility_port(self) -> _builtins.str:
        """
        Indicates the port for MySQL compatibility.
        """
        return pulumi.get(self, "mysql_compatibility_port")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetOpengaussInstancesInstanceNodeResult']:
        """
        Indicates the instance nodes information. Structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Indicates the database port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of private IP address of the nodes.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Sequence[_builtins.str]:
        """
        Indicates the public IP address of the DB instance.
        """
        return pulumi.get(self, "public_ips")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region in which to obtain the instance. If omitted, the provider-level region will
        be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="replicaNum")
    def replica_num(self) -> _builtins.int:
        """
        Indicates the replica num.
        """
        return pulumi.get(self, "replica_num")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        Indicates the security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="shardingNum")
    def sharding_num(self) -> _builtins.int:
        """
        Indicates the sharding num.
        """
        return pulumi.get(self, "sharding_num")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the network ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="switchStrategy")
    def switch_strategy(self) -> _builtins.str:
        """
        Indicates the switch strategy.
        """
        return pulumi.get(self, "switch_strategy")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        Indicates the default username.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the volume type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetOpengaussInstancesInstanceVolumeResult']:
        """
        Indicates the volume information. Structure is documented below.
        """
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetOpengaussInstancesInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.int keep_days: Indicates the number of days to retain the generated
        :param _builtins.str start_time: Indicates the backup time window.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Indicates the number of days to retain the generated
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the backup time window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetOpengaussInstancesInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Indicates the database engine.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetOpengaussInstancesInstanceHaResult(dict):
    def __init__(__self__, *,
                 replication_mode: _builtins.str):
        """
        :param _builtins.str replication_mode: Indicates the replication mode.
        """
        pulumi.set(__self__, "replication_mode", replication_mode)

    @_builtins.property
    @pulumi.getter(name="replicationMode")
    def replication_mode(self) -> _builtins.str:
        """
        Indicates the replication mode.
        """
        return pulumi.get(self, "replication_mode")


@pulumi.output_type
class GetOpengaussInstancesInstanceNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 role: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.str role: Indicates whether the node support reduce.
        :param _builtins.str status: Indicates the node status.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Indicates whether the node support reduce.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetOpengaussInstancesInstanceVolumeResult(dict):
    def __init__(__self__, *,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int size: Indicates the volume size.
        :param _builtins.str type: Indicates the volume type.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the volume size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the volume type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOpengaussParameterTemplatesConfigurationResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 datastore_name: _builtins.str,
                 datastore_version: _builtins.str,
                 description: _builtins.str,
                 ha_mode: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str,
                 user_defined: _builtins.bool):
        """
        :param _builtins.str created_at: Indicates the creation time in the **yyyy-MM-dd HH:mm:ss** format.
        :param _builtins.str datastore_name: Indicates the engine name.
        :param _builtins.str datastore_version: Indicates the engine version.
        :param _builtins.str description: Indicates the parameter template description.
        :param _builtins.str ha_mode: Indicates the instance type.
        :param _builtins.str id: Indicates the parameter template ID, which is the unique ID of a parameter template.
        :param _builtins.str name: Indicates the parameter template name.
        :param _builtins.str updated_at: Indicates the update time in the **yyyy-MM-dd HH:mm:ss** format.
        :param _builtins.bool user_defined: Indicates whether the parameter template is a custom template.
               The value can be:
               + **false**: The parameter template is a default template.
               + **true**: The parameter template is a custom template.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "datastore_name", datastore_name)
        pulumi.set(__self__, "datastore_version", datastore_version)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ha_mode", ha_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_defined", user_defined)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time in the **yyyy-MM-dd HH:mm:ss** format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> _builtins.str:
        """
        Indicates the engine name.
        """
        return pulumi.get(self, "datastore_name")

    @_builtins.property
    @pulumi.getter(name="datastoreVersion")
    def datastore_version(self) -> _builtins.str:
        """
        Indicates the engine version.
        """
        return pulumi.get(self, "datastore_version")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the parameter template description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> _builtins.str:
        """
        Indicates the instance type.
        """
        return pulumi.get(self, "ha_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the parameter template ID, which is the unique ID of a parameter template.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the parameter template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time in the **yyyy-MM-dd HH:mm:ss** format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userDefined")
    def user_defined(self) -> _builtins.bool:
        """
        Indicates whether the parameter template is a custom template.
        The value can be:
        + **false**: The parameter template is a default template.
        + **true**: The parameter template is a custom template.
        """
        return pulumi.get(self, "user_defined")


@pulumi.output_type
class GetOpengaussPredefinedTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates the tag key.
        :param Sequence[_builtins.str] values: Indicates the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetOpengaussProjectQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetOpengaussProjectQuotasQuotaResourceResult']):
        """
        :param Sequence['GetOpengaussProjectQuotasQuotaResourceArgs'] resources: Indicates the resource objects.
        """
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetOpengaussProjectQuotasQuotaResourceResult']:
        """
        Indicates the resource objects.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetOpengaussProjectQuotasQuotaResourceResult(dict):
    def __init__(__self__, *,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int quota: Indicates the maximum resource quota.
        :param _builtins.str type: Specifies the resource type used to filter quotas. Value options: **instance**.
        :param _builtins.int used: Indicates the number of created resources.
        """
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        Indicates the maximum resource quota.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type used to filter quotas. Value options: **instance**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        Indicates the number of created resources.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetOpengaussPtApplicableInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str):
        """
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str instance_name: Indicates the instance name.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")


@pulumi.output_type
class GetOpengaussPtApplyRecordsHistoryResult(dict):
    def __init__(__self__, *,
                 applied_at: _builtins.str,
                 apply_result: _builtins.str,
                 error_code: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str):
        """
        :param _builtins.str applied_at: Indicates the application time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str apply_result: Indicates the application status.
               The value can be: **SUCCESS**, **FAILED**, **APPLYING**.
        :param _builtins.str error_code: Indicates the error code of the failure cause.
        :param _builtins.str instance_id: Indicates the GaussDB OpenGauss instance ID.
        :param _builtins.str instance_name: Indicates the GaussDB OpenGauss instance name.
        """
        pulumi.set(__self__, "applied_at", applied_at)
        pulumi.set(__self__, "apply_result", apply_result)
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)

    @_builtins.property
    @pulumi.getter(name="appliedAt")
    def applied_at(self) -> _builtins.str:
        """
        Indicates the application time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "applied_at")

    @_builtins.property
    @pulumi.getter(name="applyResult")
    def apply_result(self) -> _builtins.str:
        """
        Indicates the application status.
        The value can be: **SUCCESS**, **FAILED**, **APPLYING**.
        """
        return pulumi.get(self, "apply_result")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> _builtins.str:
        """
        Indicates the error code of the failure cause.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the GaussDB OpenGauss instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the GaussDB OpenGauss instance name.
        """
        return pulumi.get(self, "instance_name")


@pulumi.output_type
class GetOpengaussPtModifyRecordsHistoryResult(dict):
    def __init__(__self__, *,
                 new_value: _builtins.str,
                 old_value: _builtins.str,
                 parameter_name: _builtins.str,
                 update_result: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str new_value: Indicates the new parameter value.
        :param _builtins.str old_value: Indicates the old parameter value.
        :param _builtins.str parameter_name: Indicates the parameter name.
        :param _builtins.str update_result: Indicates the change status.
               The value can be **SUCCESS** or **FAILED**.
        :param _builtins.str updated_at: Indicates the modification time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "update_result", update_result)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="newValue")
    def new_value(self) -> _builtins.str:
        """
        Indicates the new parameter value.
        """
        return pulumi.get(self, "new_value")

    @_builtins.property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> _builtins.str:
        """
        Indicates the old parameter value.
        """
        return pulumi.get(self, "old_value")

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> _builtins.str:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="updateResult")
    def update_result(self) -> _builtins.str:
        """
        Indicates the change status.
        The value can be **SUCCESS** or **FAILED**.
        """
        return pulumi.get(self, "update_result")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the modification time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetOpengaussQuotasEpsQuotaResult(dict):
    def __init__(__self__, *,
                 enterprise_project_id: _builtins.str,
                 enterprise_project_name: _builtins.str,
                 instance_eps_quota: _builtins.int,
                 instance_used: _builtins.int,
                 ram_eps_quota: _builtins.int,
                 ram_used: _builtins.int,
                 vcpus_eps_quota: _builtins.int,
                 vcpus_used: _builtins.int,
                 volume_eps_quota: _builtins.int,
                 volume_used: _builtins.int):
        """
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.str enterprise_project_name: Indicates the enterprise project name.
        :param _builtins.int instance_eps_quota: Indicates the instance quantity quota.
        :param _builtins.int instance_used: Indicates the used EPS instance quota.
        :param _builtins.int ram_eps_quota: Indicates the memory quota in GB.
        :param _builtins.int ram_used: Indicates the used EPS memory quota in GB.
        :param _builtins.int vcpus_eps_quota: Indicates the vCPU quota.
        :param _builtins.int vcpus_used: Indicates the used EPS compute quota.
        :param _builtins.int volume_eps_quota: Indicates the storage quota in GB.
        :param _builtins.int volume_used: Indicates the used EPS storage quota, in GB.
        """
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        pulumi.set(__self__, "instance_eps_quota", instance_eps_quota)
        pulumi.set(__self__, "instance_used", instance_used)
        pulumi.set(__self__, "ram_eps_quota", ram_eps_quota)
        pulumi.set(__self__, "ram_used", ram_used)
        pulumi.set(__self__, "vcpus_eps_quota", vcpus_eps_quota)
        pulumi.set(__self__, "vcpus_used", vcpus_used)
        pulumi.set(__self__, "volume_eps_quota", volume_eps_quota)
        pulumi.set(__self__, "volume_used", volume_used)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> _builtins.str:
        """
        Indicates the enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter(name="instanceEpsQuota")
    def instance_eps_quota(self) -> _builtins.int:
        """
        Indicates the instance quantity quota.
        """
        return pulumi.get(self, "instance_eps_quota")

    @_builtins.property
    @pulumi.getter(name="instanceUsed")
    def instance_used(self) -> _builtins.int:
        """
        Indicates the used EPS instance quota.
        """
        return pulumi.get(self, "instance_used")

    @_builtins.property
    @pulumi.getter(name="ramEpsQuota")
    def ram_eps_quota(self) -> _builtins.int:
        """
        Indicates the memory quota in GB.
        """
        return pulumi.get(self, "ram_eps_quota")

    @_builtins.property
    @pulumi.getter(name="ramUsed")
    def ram_used(self) -> _builtins.int:
        """
        Indicates the used EPS memory quota in GB.
        """
        return pulumi.get(self, "ram_used")

    @_builtins.property
    @pulumi.getter(name="vcpusEpsQuota")
    def vcpus_eps_quota(self) -> _builtins.int:
        """
        Indicates the vCPU quota.
        """
        return pulumi.get(self, "vcpus_eps_quota")

    @_builtins.property
    @pulumi.getter(name="vcpusUsed")
    def vcpus_used(self) -> _builtins.int:
        """
        Indicates the used EPS compute quota.
        """
        return pulumi.get(self, "vcpus_used")

    @_builtins.property
    @pulumi.getter(name="volumeEpsQuota")
    def volume_eps_quota(self) -> _builtins.int:
        """
        Indicates the storage quota in GB.
        """
        return pulumi.get(self, "volume_eps_quota")

    @_builtins.property
    @pulumi.getter(name="volumeUsed")
    def volume_used(self) -> _builtins.int:
        """
        Indicates the used EPS storage quota, in GB.
        """
        return pulumi.get(self, "volume_used")


@pulumi.output_type
class GetOpengaussRecyclingInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 backup_level: _builtins.str,
                 created_at: _builtins.str,
                 data_vip: _builtins.str,
                 deleted_at: _builtins.str,
                 engine_name: _builtins.str,
                 engine_version: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 enterprise_project_name: _builtins.str,
                 ha_mode: _builtins.str,
                 id: _builtins.str,
                 mode: _builtins.str,
                 name: _builtins.str,
                 pay_model: _builtins.str,
                 recycle_backup_id: _builtins.str,
                 recycle_status: _builtins.str,
                 volume_size: _builtins.str,
                 volume_type: _builtins.str):
        """
        :param _builtins.str backup_level: Indicates the backup level.
        :param _builtins.str created_at: Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str data_vip: Indicates the private IP address.
        :param _builtins.str deleted_at: Indicates the deletion time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str engine_name: Indicates the engine name.
        :param _builtins.str engine_version: Indicates the engine version.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project ID.
        :param _builtins.str enterprise_project_name: Indicates the enterprise project name.
        :param _builtins.str ha_mode: Indicates the deployment model.
               The value can be:
               + **Ha**: primary/standby deployment
               + **Independent**: independent deployment
               + **Combined**: combined deployment
        :param _builtins.str id: Indicates the instance ID.
        :param _builtins.str mode: Indicates the product type.
               The value can be:
               + **basic**: basic edition
               + **standard**: standard edition
               + **enterprise**: enterprise edition
        :param _builtins.str name: Indicates the instance name.
        :param _builtins.str pay_model: Indicates the billing mode.
               The value can be:
               + **0**: pay-per-use
               + **1**: yearly/monthly
        :param _builtins.str recycle_backup_id: Indicates the backup ID.
        :param _builtins.str recycle_status: Indicates the backup status in the recycle bin.
               The value can be: **Running**, **Active**.
        :param _builtins.str volume_size: Indicates the disk size.
        :param _builtins.str volume_type: Indicates the disk type.
               The value can be:
               + **high**: high I/O
               + **ultrahigh**: ultra-high I/O
               + **essd**: extreme SSD
        """
        pulumi.set(__self__, "backup_level", backup_level)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_vip", data_vip)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        pulumi.set(__self__, "ha_mode", ha_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pay_model", pay_model)
        pulumi.set(__self__, "recycle_backup_id", recycle_backup_id)
        pulumi.set(__self__, "recycle_status", recycle_status)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="backupLevel")
    def backup_level(self) -> _builtins.str:
        """
        Indicates the backup level.
        """
        return pulumi.get(self, "backup_level")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataVip")
    def data_vip(self) -> _builtins.str:
        """
        Indicates the private IP address.
        """
        return pulumi.get(self, "data_vip")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.str:
        """
        Indicates the deletion time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> _builtins.str:
        """
        Indicates the engine name.
        """
        return pulumi.get(self, "engine_name")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Indicates the engine version.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> _builtins.str:
        """
        Indicates the enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> _builtins.str:
        """
        Indicates the deployment model.
        The value can be:
        + **Ha**: primary/standby deployment
        + **Independent**: independent deployment
        + **Combined**: combined deployment
        """
        return pulumi.get(self, "ha_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the product type.
        The value can be:
        + **basic**: basic edition
        + **standard**: standard edition
        + **enterprise**: enterprise edition
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="payModel")
    def pay_model(self) -> _builtins.str:
        """
        Indicates the billing mode.
        The value can be:
        + **0**: pay-per-use
        + **1**: yearly/monthly
        """
        return pulumi.get(self, "pay_model")

    @_builtins.property
    @pulumi.getter(name="recycleBackupId")
    def recycle_backup_id(self) -> _builtins.str:
        """
        Indicates the backup ID.
        """
        return pulumi.get(self, "recycle_backup_id")

    @_builtins.property
    @pulumi.getter(name="recycleStatus")
    def recycle_status(self) -> _builtins.str:
        """
        Indicates the backup status in the recycle bin.
        The value can be: **Running**, **Active**.
        """
        return pulumi.get(self, "recycle_status")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> _builtins.str:
        """
        Indicates the disk size.
        """
        return pulumi.get(self, "volume_size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        Indicates the disk type.
        The value can be:
        + **high**: high I/O
        + **ultrahigh**: ultra-high I/O
        + **essd**: extreme SSD
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetOpengaussRestorableInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 data_volume_size: _builtins.float,
                 instance_id: _builtins.str,
                 instance_mode: _builtins.str,
                 instance_name: _builtins.str,
                 mode: _builtins.str,
                 version: _builtins.str,
                 volume_type: _builtins.str):
        """
        :param _builtins.float data_volume_size: Indicates the storage space, in GB
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str instance_mode: Indicates the instance model.
               + **enterprise**: enterprise edition
               + **standard**: standard edition
               + **basic**: basic edition
        :param _builtins.str instance_name: Indicates the instance name.
        :param _builtins.str mode: Indicates the deployment model.
               + **Ha**: primary/standby deployment
               + **Independent**: independent deployment
        :param _builtins.str version: Indicates the instance version
        :param _builtins.str volume_type: Indicates the storage type.
        """
        pulumi.set(__self__, "data_volume_size", data_volume_size)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_mode", instance_mode)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> _builtins.float:
        """
        Indicates the storage space, in GB
        """
        return pulumi.get(self, "data_volume_size")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> _builtins.str:
        """
        Indicates the instance model.
        + **enterprise**: enterprise edition
        + **standard**: standard edition
        + **basic**: basic edition
        """
        return pulumi.get(self, "instance_mode")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the deployment model.
        + **Ha**: primary/standby deployment
        + **Independent**: independent deployment
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the instance version
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        Indicates the storage type.
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetOpengaussRestoreTimeRangesRestoreTimeResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.int,
                 start_time: _builtins.int):
        """
        :param _builtins.int end_time: Indicates the end time of the restoration time range in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC.
        :param _builtins.int start_time: Indicates the start time of the restoration time range in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time of the restoration time range in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time of the restoration time range in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetOpengaussSchemasDatabaseSchemaResult(dict):
    def __init__(__self__, *,
                 owner: _builtins.str,
                 schema_name: _builtins.str):
        """
        :param _builtins.str owner: Indicates the owner of the schema.
        :param _builtins.str schema_name: Indicates the schema name.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema_name", schema_name)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        Indicates the owner of the schema.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        Indicates the schema name.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetOpengaussSlowLogsListResult(dict):
    def __init__(__self__, *,
                 bucket_name: _builtins.str,
                 created_at: _builtins.str,
                 file_link: _builtins.str,
                 file_name: _builtins.str,
                 file_size: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 message: _builtins.str,
                 node_id: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 version: _builtins.str,
                 workflow_id: _builtins.str):
        """
        :param _builtins.str bucket_name: Indicates the bucket name.
        :param _builtins.str created_at: Indicates the creation time.
        :param _builtins.str file_link: Indicates the link for downloading the file.
        :param _builtins.str file_name: Indicates the file name.
        :param _builtins.str file_size: Indicates the file size in bytes.
        :param _builtins.str id: Indicates the slow query log ID.
        :param _builtins.str instance_id: Specifies the ID of the GaussDB OpenGauss instance.
        :param _builtins.str message: Indicates the message.
        :param _builtins.str node_id: Indicates the node ID.
        :param _builtins.str status: Indicates the status.
        :param _builtins.str updated_at: Indicates the update time.
        :param _builtins.str version: Indicates the version.
        :param _builtins.str workflow_id: Indicates the workflow ID.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "file_link", file_link)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_size", file_size)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "workflow_id", workflow_id)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> _builtins.str:
        """
        Indicates the bucket name.
        """
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="fileLink")
    def file_link(self) -> _builtins.str:
        """
        Indicates the link for downloading the file.
        """
        return pulumi.get(self, "file_link")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        Indicates the file name.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> _builtins.str:
        """
        Indicates the file size in bytes.
        """
        return pulumi.get(self, "file_size")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the slow query log ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ID of the GaussDB OpenGauss instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Indicates the message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> _builtins.str:
        """
        Indicates the workflow ID.
        """
        return pulumi.get(self, "workflow_id")


@pulumi.output_type
class GetOpengaussSqlTemplatesNodeLimitSqlModelListResult(dict):
    def __init__(__self__, *,
                 sql_id: _builtins.str,
                 sql_model: _builtins.str):
        """
        :param _builtins.str sql_id: Indicates the SQL ID of the throttling task.
        :param _builtins.str sql_model: Specifies the SQL template.
               The value can contain only uppercase letters, lowercase letters, underscores (_), digits, spaces,
               and the following special characters $*?=+;()><,.".
        """
        pulumi.set(__self__, "sql_id", sql_id)
        pulumi.set(__self__, "sql_model", sql_model)

    @_builtins.property
    @pulumi.getter(name="sqlId")
    def sql_id(self) -> _builtins.str:
        """
        Indicates the SQL ID of the throttling task.
        """
        return pulumi.get(self, "sql_id")

    @_builtins.property
    @pulumi.getter(name="sqlModel")
    def sql_model(self) -> _builtins.str:
        """
        Specifies the SQL template.
        The value can contain only uppercase letters, lowercase letters, underscores (_), digits, spaces,
        and the following special characters $*?=+;()><,.".
        """
        return pulumi.get(self, "sql_model")


@pulumi.output_type
class GetOpengaussSqlThrottlingTasksLimitTaskListResult(dict):
    def __init__(__self__, *,
                 cpu_utilization: _builtins.int,
                 created_at: _builtins.str,
                 creator: _builtins.str,
                 databases: _builtins.str,
                 end_time: _builtins.str,
                 instance_id: _builtins.str,
                 key_words: _builtins.str,
                 limit_type: _builtins.str,
                 limit_type_value: _builtins.str,
                 memory_utilization: _builtins.int,
                 modifier: _builtins.str,
                 node_infos: Sequence['outputs.GetOpengaussSqlThrottlingTasksLimitTaskListNodeInfoResult'],
                 parallel_size: _builtins.int,
                 rule_name: _builtins.str,
                 sql_model: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 task_id: _builtins.str,
                 task_name: _builtins.str,
                 task_scope: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.int cpu_utilization: Indicates the CPU usage.
               This parameter is returned only when the `limit_type` is **SESSION_ACTIVE_MAX_COUNT**.
        :param _builtins.str created_at: Indicates the creation time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        :param _builtins.str creator: Indicates the creator.
        :param _builtins.str databases: Indicates the databases of the instance.
               Databases are separated by commas (,).
        :param _builtins.str end_time: Specifies the end time of the throttling task in the format of **yyy-mm-ddThh:mm:ss+0000**.
        :param _builtins.str instance_id: Specifies the ID of the GaussDB OpenGauss instance.
        :param _builtins.str key_words: Indicates the keyword.
               This parameter is returned only when the `limit_type` is **SQL_TYPE**.
        :param _builtins.str limit_type: Specifies the throttling type.
               The value can be **SQL_ID**, **SQL_TYPE** or **SESSION_ACTIVE_MAX_COUNT**.
        :param _builtins.str limit_type_value: Specifies the throttling type value. Fuzzy match is supported.
        :param _builtins.int memory_utilization: Indicates the memory usage.
               This parameter is returned only when the `limit_type` is **SESSION_ACTIVE_MAX_COUNT**.
        :param _builtins.str modifier: Indicates the modifier.
        :param Sequence['GetOpengaussSqlThrottlingTasksLimitTaskListNodeInfoArgs'] node_infos: Indicates the CN information.
        :param _builtins.int parallel_size: Indicates the maximum concurrency.
        :param _builtins.str rule_name: Specifies the rule name.
        :param _builtins.str sql_model: Specifies the SQL template. Fuzzy match is supported.
        :param _builtins.str start_time: Specifies the start time of the throttling task in the format of **yyy-mm-ddThh:mm:ss+0000**.
        :param _builtins.str status: Indicates the throttling task status.
               The value can be **CREATING**, **UPDATING**, **DELETING**, **WAIT_EXCUTE**, **EXCUTING**, **TIME_OVER**, **DELETED**,
               **CREATE_FAILED**, **UPDATE_FAILED**, **DELETE_FAILED**, **EXCEPTION** or **NODE_SHUT_DOWN**.
        :param _builtins.str task_id: Indicates the throttling task ID.
        :param _builtins.str task_name: Specifies the throttling task name. Fuzzy match is supported.
        :param _builtins.str task_scope: Specifies the throttling task scope.
               Currently, **SQL** and **SESSION** are supported.
        :param _builtins.str updated_at: Indicates the update time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        pulumi.set(__self__, "cpu_utilization", cpu_utilization)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "key_words", key_words)
        pulumi.set(__self__, "limit_type", limit_type)
        pulumi.set(__self__, "limit_type_value", limit_type_value)
        pulumi.set(__self__, "memory_utilization", memory_utilization)
        pulumi.set(__self__, "modifier", modifier)
        pulumi.set(__self__, "node_infos", node_infos)
        pulumi.set(__self__, "parallel_size", parallel_size)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "sql_model", sql_model)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_scope", task_scope)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="cpuUtilization")
    def cpu_utilization(self) -> _builtins.int:
        """
        Indicates the CPU usage.
        This parameter is returned only when the `limit_type` is **SESSION_ACTIVE_MAX_COUNT**.
        """
        return pulumi.get(self, "cpu_utilization")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        Indicates the creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> _builtins.str:
        """
        Indicates the databases of the instance.
        Databases are separated by commas (,).
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the end time of the throttling task in the format of **yyy-mm-ddThh:mm:ss+0000**.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ID of the GaussDB OpenGauss instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keyWords")
    def key_words(self) -> _builtins.str:
        """
        Indicates the keyword.
        This parameter is returned only when the `limit_type` is **SQL_TYPE**.
        """
        return pulumi.get(self, "key_words")

    @_builtins.property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> _builtins.str:
        """
        Specifies the throttling type.
        The value can be **SQL_ID**, **SQL_TYPE** or **SESSION_ACTIVE_MAX_COUNT**.
        """
        return pulumi.get(self, "limit_type")

    @_builtins.property
    @pulumi.getter(name="limitTypeValue")
    def limit_type_value(self) -> _builtins.str:
        """
        Specifies the throttling type value. Fuzzy match is supported.
        """
        return pulumi.get(self, "limit_type_value")

    @_builtins.property
    @pulumi.getter(name="memoryUtilization")
    def memory_utilization(self) -> _builtins.int:
        """
        Indicates the memory usage.
        This parameter is returned only when the `limit_type` is **SESSION_ACTIVE_MAX_COUNT**.
        """
        return pulumi.get(self, "memory_utilization")

    @_builtins.property
    @pulumi.getter
    def modifier(self) -> _builtins.str:
        """
        Indicates the modifier.
        """
        return pulumi.get(self, "modifier")

    @_builtins.property
    @pulumi.getter(name="nodeInfos")
    def node_infos(self) -> Sequence['outputs.GetOpengaussSqlThrottlingTasksLimitTaskListNodeInfoResult']:
        """
        Indicates the CN information.
        """
        return pulumi.get(self, "node_infos")

    @_builtins.property
    @pulumi.getter(name="parallelSize")
    def parallel_size(self) -> _builtins.int:
        """
        Indicates the maximum concurrency.
        """
        return pulumi.get(self, "parallel_size")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> _builtins.str:
        """
        Specifies the rule name.
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="sqlModel")
    def sql_model(self) -> _builtins.str:
        """
        Specifies the SQL template. Fuzzy match is supported.
        """
        return pulumi.get(self, "sql_model")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the start time of the throttling task in the format of **yyy-mm-ddThh:mm:ss+0000**.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the throttling task status.
        The value can be **CREATING**, **UPDATING**, **DELETING**, **WAIT_EXCUTE**, **EXCUTING**, **TIME_OVER**, **DELETED**,
        **CREATE_FAILED**, **UPDATE_FAILED**, **DELETE_FAILED**, **EXCEPTION** or **NODE_SHUT_DOWN**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        """
        Indicates the throttling task ID.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> _builtins.str:
        """
        Specifies the throttling task name. Fuzzy match is supported.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskScope")
    def task_scope(self) -> _builtins.str:
        """
        Specifies the throttling task scope.
        Currently, **SQL** and **SESSION** are supported.
        """
        return pulumi.get(self, "task_scope")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetOpengaussSqlThrottlingTasksLimitTaskListNodeInfoResult(dict):
    def __init__(__self__, *,
                 node_id: _builtins.str,
                 sql_id: _builtins.str):
        """
        :param _builtins.str node_id: Indicates the node ID.
        :param _builtins.str sql_id: Indicates the ID of the SQL statement executed on the node.
        """
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "sql_id", sql_id)

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter(name="sqlId")
    def sql_id(self) -> _builtins.str:
        """
        Indicates the ID of the SQL statement executed on the node.
        """
        return pulumi.get(self, "sql_id")


@pulumi.output_type
class GetOpengaussStorageTypesStorageTypeResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 support_compute_group_types: Sequence[_builtins.str]):
        """
        :param Mapping[str, _builtins.str] az_status: Indicates the status details of the AZs to which the specification belongs.
               Key indicates the AZ ID, and value indicates the specification status in the AZ.
               The value can be:
               + **normal**: on sale.
               + **unsupported**: not supported.
               + **sellout**: sold out.
        :param _builtins.str name: Indicates the storage type.
               The value can be:
               + **ULTRAHIGH**: SSD storage.
               + **ESSD**: extreme SSD storage.
        :param Sequence[_builtins.str] support_compute_group_types: Indicates the performance specifications.
               The value can be:
               + **normal:** dedicated (1:8).
               + **normal2**: dedicated (1:4).
               + **armFlavors**: Kunpeng dedicated (1:8).
               + **armFlavors2**: Kunpeng dedicated (1:4).
               + **armFlavors2Shared**: Kunpeng general computing-plus II (shared).
               + **general**: General-purpose (1:4).
               + **exclusive**: Dedicated (1:4) It is only suitable for primary/standby instances of the basic edition.
               + **armExclusive**: Kunpeng dedicated (1:4) It is only suitable for primary/standby instances of the basic edition.
               + **economical**: Favored (1:4).
               + **economical2**: Favored (1:8).
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "support_compute_group_types", support_compute_group_types)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the status details of the AZs to which the specification belongs.
        Key indicates the AZ ID, and value indicates the specification status in the AZ.
        The value can be:
        + **normal**: on sale.
        + **unsupported**: not supported.
        + **sellout**: sold out.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the storage type.
        The value can be:
        + **ULTRAHIGH**: SSD storage.
        + **ESSD**: extreme SSD storage.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="supportComputeGroupTypes")
    def support_compute_group_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the performance specifications.
        The value can be:
        + **normal:** dedicated (1:8).
        + **normal2**: dedicated (1:4).
        + **armFlavors**: Kunpeng dedicated (1:8).
        + **armFlavors2**: Kunpeng dedicated (1:4).
        + **armFlavors2Shared**: Kunpeng general computing-plus II (shared).
        + **general**: General-purpose (1:4).
        + **exclusive**: Dedicated (1:4) It is only suitable for primary/standby instances of the basic edition.
        + **armExclusive**: Kunpeng dedicated (1:4) It is only suitable for primary/standby instances of the basic edition.
        + **economical**: Favored (1:4).
        + **economical2**: Favored (1:8).
        """
        return pulumi.get(self, "support_compute_group_types")


@pulumi.output_type
class GetOpengaussTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates the tag key.
        :param Sequence[_builtins.str] values: Indicates the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetOpengaussTasksTaskResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 ended_at: _builtins.str,
                 fail_reason: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 instance_status: _builtins.str,
                 job_id: _builtins.str,
                 name: _builtins.str,
                 process: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str created_at: Indicates the task creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str ended_at: Indicates the task end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str fail_reason: Indicates the task failure cause.
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str instance_name: Indicates the instance name.
        :param _builtins.str instance_status: Indicates the iInstance status.
        :param _builtins.str job_id: Indicates the task ID.
        :param _builtins.str name: Specifies the task name. Value options:
               + **CreateGaussDBV5Instance**: Creating a DB instance.
               + **BackupSnapshotGaussDBV5InInstance**: Creating a manual backup.
               + **CloneGaussDBV5NewInstance**: Restoring data to a new DB instance.
               + **RestoreGaussDBV5InInstance**: Restoring data to the original DB instance.
               + **RestoreGaussDBV5InInstanceToExistedInst**: Restoring data to an existing DB instance.
               + **DeleteGaussDBV5Instance**: Deleting a DB instance.
               + **EnlargeGaussDBV5Volume**: Scaling up storage.
               + **ResizeGaussDBV5Flavor**: Changing specifications.
               + **GaussDBV5ExpandClusterCN**: Adding coordinator nodes.
               + **GaussDBV5ExpandClusterDN**: Adding shards.
        :param _builtins.str process: Indicates the task progress.
        :param _builtins.str status: Specifies the task execution status. Value options:
               + **Running**: The task is being executed.
               + **Completed**: The task is successfully executed.
               + **Failed**: The task failed to be executed.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "ended_at", ended_at)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "process", process)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the task creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="endedAt")
    def ended_at(self) -> _builtins.str:
        """
        Indicates the task end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "ended_at")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        Indicates the task failure cause.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> _builtins.str:
        """
        Indicates the iInstance status.
        """
        return pulumi.get(self, "instance_status")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        Indicates the task ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the task name. Value options:
        + **CreateGaussDBV5Instance**: Creating a DB instance.
        + **BackupSnapshotGaussDBV5InInstance**: Creating a manual backup.
        + **CloneGaussDBV5NewInstance**: Restoring data to a new DB instance.
        + **RestoreGaussDBV5InInstance**: Restoring data to the original DB instance.
        + **RestoreGaussDBV5InInstanceToExistedInst**: Restoring data to an existing DB instance.
        + **DeleteGaussDBV5Instance**: Deleting a DB instance.
        + **EnlargeGaussDBV5Volume**: Scaling up storage.
        + **ResizeGaussDBV5Flavor**: Changing specifications.
        + **GaussDBV5ExpandClusterCN**: Adding coordinator nodes.
        + **GaussDBV5ExpandClusterDN**: Adding shards.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def process(self) -> _builtins.str:
        """
        Indicates the task progress.
        """
        return pulumi.get(self, "process")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the task execution status. Value options:
        + **Running**: The task is being executed.
        + **Completed**: The task is successfully executed.
        + **Failed**: The task failed to be executed.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetOpengaussTopIoTrafficsTopIoInfoResult(dict):
    def __init__(__self__, *,
                 client_ip: _builtins.str,
                 database_name: _builtins.str,
                 disk_read_rate: _builtins.int,
                 disk_write_rate: _builtins.int,
                 session_id: _builtins.str,
                 sql_start: _builtins.int,
                 state: _builtins.str,
                 thread_id: _builtins.str,
                 thread_type: _builtins.str,
                 unique_sql_id: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str client_ip: Indicates the IP address of the client.
        :param _builtins.str database_name: Indicates the database name.
        :param _builtins.int disk_read_rate: Indicates the rate of reading data from disks, in KB/s.
        :param _builtins.int disk_write_rate: Indicates the rate of writing data to the disk, in KB/s.
        :param _builtins.str session_id: Indicates the session ID.
        :param _builtins.int sql_start: Indicates the start time of the statement.
        :param _builtins.str state: Indicates the status.
        :param _builtins.str thread_id: Indicates the thread ID.
        :param _builtins.str thread_type: Indicates the thread type.
               The value can be **worker** or **background**.
        :param _builtins.str unique_sql_id: Indicates the SQL ID.
        :param _builtins.str user_name: Indicates the username.
        """
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "disk_read_rate", disk_read_rate)
        pulumi.set(__self__, "disk_write_rate", disk_write_rate)
        pulumi.set(__self__, "session_id", session_id)
        pulumi.set(__self__, "sql_start", sql_start)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "thread_id", thread_id)
        pulumi.set(__self__, "thread_type", thread_type)
        pulumi.set(__self__, "unique_sql_id", unique_sql_id)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> _builtins.str:
        """
        Indicates the IP address of the client.
        """
        return pulumi.get(self, "client_ip")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        """
        Indicates the database name.
        """
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="diskReadRate")
    def disk_read_rate(self) -> _builtins.int:
        """
        Indicates the rate of reading data from disks, in KB/s.
        """
        return pulumi.get(self, "disk_read_rate")

    @_builtins.property
    @pulumi.getter(name="diskWriteRate")
    def disk_write_rate(self) -> _builtins.int:
        """
        Indicates the rate of writing data to the disk, in KB/s.
        """
        return pulumi.get(self, "disk_write_rate")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> _builtins.str:
        """
        Indicates the session ID.
        """
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter(name="sqlStart")
    def sql_start(self) -> _builtins.int:
        """
        Indicates the start time of the statement.
        """
        return pulumi.get(self, "sql_start")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Indicates the status.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="threadId")
    def thread_id(self) -> _builtins.str:
        """
        Indicates the thread ID.
        """
        return pulumi.get(self, "thread_id")

    @_builtins.property
    @pulumi.getter(name="threadType")
    def thread_type(self) -> _builtins.str:
        """
        Indicates the thread type.
        The value can be **worker** or **background**.
        """
        return pulumi.get(self, "thread_type")

    @_builtins.property
    @pulumi.getter(name="uniqueSqlId")
    def unique_sql_id(self) -> _builtins.str:
        """
        Indicates the SQL ID.
        """
        return pulumi.get(self, "unique_sql_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Indicates the username.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetOpengaussUpgradeVersionsHotfixRollbackInfoResult(dict):
    def __init__(__self__, *,
                 backup_sensitive: _builtins.bool,
                 common_patch: _builtins.str,
                 descripition: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.bool backup_sensitive: Indicates whether the patch is related to backups.
        :param _builtins.str common_patch: Indicates the patch type.
               The value can be:
               + **common**: common patch
               + **certain**: custom patch
        :param _builtins.str descripition: Indicates the description of the patch.
        :param _builtins.str version: Indicates the hot patch version.
        """
        pulumi.set(__self__, "backup_sensitive", backup_sensitive)
        pulumi.set(__self__, "common_patch", common_patch)
        pulumi.set(__self__, "descripition", descripition)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="backupSensitive")
    def backup_sensitive(self) -> _builtins.bool:
        """
        Indicates whether the patch is related to backups.
        """
        return pulumi.get(self, "backup_sensitive")

    @_builtins.property
    @pulumi.getter(name="commonPatch")
    def common_patch(self) -> _builtins.str:
        """
        Indicates the patch type.
        The value can be:
        + **common**: common patch
        + **certain**: custom patch
        """
        return pulumi.get(self, "common_patch")

    @_builtins.property
    @pulumi.getter
    def descripition(self) -> _builtins.str:
        """
        Indicates the description of the patch.
        """
        return pulumi.get(self, "descripition")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the hot patch version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetOpengaussUpgradeVersionsHotfixUpgradeInfoResult(dict):
    def __init__(__self__, *,
                 backup_sensitive: _builtins.bool,
                 common_patch: _builtins.str,
                 descripition: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.bool backup_sensitive: Indicates whether the patch is related to backups.
        :param _builtins.str common_patch: Indicates the patch type.
               The value can be:
               + **common**: common patch
               + **certain**: custom patch
        :param _builtins.str descripition: Indicates the description of the patch.
        :param _builtins.str version: Indicates the hot patch version.
        """
        pulumi.set(__self__, "backup_sensitive", backup_sensitive)
        pulumi.set(__self__, "common_patch", common_patch)
        pulumi.set(__self__, "descripition", descripition)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="backupSensitive")
    def backup_sensitive(self) -> _builtins.bool:
        """
        Indicates whether the patch is related to backups.
        """
        return pulumi.get(self, "backup_sensitive")

    @_builtins.property
    @pulumi.getter(name="commonPatch")
    def common_patch(self) -> _builtins.str:
        """
        Indicates the patch type.
        The value can be:
        + **common**: common patch
        + **certain**: custom patch
        """
        return pulumi.get(self, "common_patch")

    @_builtins.property
    @pulumi.getter
    def descripition(self) -> _builtins.str:
        """
        Indicates the description of the patch.
        """
        return pulumi.get(self, "descripition")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the hot patch version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetOpengaussUpgradeVersionsRollUpgradeProgressResult(dict):
    def __init__(__self__, *,
                 already_upgraded_az: _builtins.str,
                 az_description_map: Mapping[str, _builtins.str],
                 not_fully_upgraded_az: _builtins.str,
                 total_dn_group_numbers: _builtins.str,
                 upgraded_dn_group_numbers: _builtins.str):
        """
        :param _builtins.str already_upgraded_az: Indicates the AZs that have upgraded.
               Multiple AZs are separated by commas (,). For instances in the independent deployment, null is returned.
        :param Mapping[str, _builtins.str] az_description_map: Indicates the AZ description.
        :param _builtins.str not_fully_upgraded_az: Indicates the AZs that have not been upgraded.
               Multiple AZs are separated by commas (,). For instances in the independent deployment, null is returned.
        :param _builtins.str total_dn_group_numbers: Indicates the total number of shards.
        :param _builtins.str upgraded_dn_group_numbers: Indicates the number of shards that have been upgraded.
        """
        pulumi.set(__self__, "already_upgraded_az", already_upgraded_az)
        pulumi.set(__self__, "az_description_map", az_description_map)
        pulumi.set(__self__, "not_fully_upgraded_az", not_fully_upgraded_az)
        pulumi.set(__self__, "total_dn_group_numbers", total_dn_group_numbers)
        pulumi.set(__self__, "upgraded_dn_group_numbers", upgraded_dn_group_numbers)

    @_builtins.property
    @pulumi.getter(name="alreadyUpgradedAz")
    def already_upgraded_az(self) -> _builtins.str:
        """
        Indicates the AZs that have upgraded.
        Multiple AZs are separated by commas (,). For instances in the independent deployment, null is returned.
        """
        return pulumi.get(self, "already_upgraded_az")

    @_builtins.property
    @pulumi.getter(name="azDescriptionMap")
    def az_description_map(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the AZ description.
        """
        return pulumi.get(self, "az_description_map")

    @_builtins.property
    @pulumi.getter(name="notFullyUpgradedAz")
    def not_fully_upgraded_az(self) -> _builtins.str:
        """
        Indicates the AZs that have not been upgraded.
        Multiple AZs are separated by commas (,). For instances in the independent deployment, null is returned.
        """
        return pulumi.get(self, "not_fully_upgraded_az")

    @_builtins.property
    @pulumi.getter(name="totalDnGroupNumbers")
    def total_dn_group_numbers(self) -> _builtins.str:
        """
        Indicates the total number of shards.
        """
        return pulumi.get(self, "total_dn_group_numbers")

    @_builtins.property
    @pulumi.getter(name="upgradedDnGroupNumbers")
    def upgraded_dn_group_numbers(self) -> _builtins.str:
        """
        Indicates the number of shards that have been upgraded.
        """
        return pulumi.get(self, "upgraded_dn_group_numbers")


@pulumi.output_type
class GetOpengaussUpgradeVersionsUpgradeTypeListResult(dict):
    def __init__(__self__, *,
                 enable: _builtins.bool,
                 is_parallel_upgrade: _builtins.bool,
                 upgrade_action_lists: Sequence['outputs.GetOpengaussUpgradeVersionsUpgradeTypeListUpgradeActionListResult'],
                 upgrade_type: _builtins.str):
        """
        :param _builtins.bool enable: Indicates whether the upgrade action is available.
        :param _builtins.bool is_parallel_upgrade: Indicates whether intra-AZ parallel upgrade is supported.
               The value can be:
               + **true**: The current instance is in the rolling upgrade phase of the gray upgrade. The intra-AZ parallel
               upgrade is supported. Once this parameter is configured, it cannot be changed later.
               + **false**: The current instance is being upgraded. The intra-AZ parallel upgrade is not supported. Once
               this parameter is configured, it cannot be changed later.
               + **null**: The current instance is not in the upgrade process.
        :param Sequence['GetOpengaussUpgradeVersionsUpgradeTypeListUpgradeActionListArgs'] upgrade_action_lists: Indicates the upgrade actions.
        :param _builtins.str upgrade_type: Indicates the upgrade type.
               The value can be:
               + **grey**: Gray upgrade
               + **inplace**: In-place upgrade
               + **hotfix**: Hot patch update
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "is_parallel_upgrade", is_parallel_upgrade)
        pulumi.set(__self__, "upgrade_action_lists", upgrade_action_lists)
        pulumi.set(__self__, "upgrade_type", upgrade_type)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> _builtins.bool:
        """
        Indicates whether the upgrade action is available.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="isParallelUpgrade")
    def is_parallel_upgrade(self) -> _builtins.bool:
        """
        Indicates whether intra-AZ parallel upgrade is supported.
        The value can be:
        + **true**: The current instance is in the rolling upgrade phase of the gray upgrade. The intra-AZ parallel
        upgrade is supported. Once this parameter is configured, it cannot be changed later.
        + **false**: The current instance is being upgraded. The intra-AZ parallel upgrade is not supported. Once
        this parameter is configured, it cannot be changed later.
        + **null**: The current instance is not in the upgrade process.
        """
        return pulumi.get(self, "is_parallel_upgrade")

    @_builtins.property
    @pulumi.getter(name="upgradeActionLists")
    def upgrade_action_lists(self) -> Sequence['outputs.GetOpengaussUpgradeVersionsUpgradeTypeListUpgradeActionListResult']:
        """
        Indicates the upgrade actions.
        """
        return pulumi.get(self, "upgrade_action_lists")

    @_builtins.property
    @pulumi.getter(name="upgradeType")
    def upgrade_type(self) -> _builtins.str:
        """
        Indicates the upgrade type.
        The value can be:
        + **grey**: Gray upgrade
        + **inplace**: In-place upgrade
        + **hotfix**: Hot patch update
        """
        return pulumi.get(self, "upgrade_type")


@pulumi.output_type
class GetOpengaussUpgradeVersionsUpgradeTypeListUpgradeActionListResult(dict):
    def __init__(__self__, *,
                 enable: _builtins.bool,
                 upgrade_action: _builtins.str):
        """
        :param _builtins.bool enable: Indicates whether the upgrade action is available.
        :param _builtins.str upgrade_action: Indicates the upgrade action.
               The value can be:
               + **upgrade**: Rolling upgrade
               + **upgradeAutoCommit**: Auto-commit
               + **commit**: Commit
               + **rollback**: Rollback
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "upgrade_action", upgrade_action)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> _builtins.bool:
        """
        Indicates whether the upgrade action is available.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="upgradeAction")
    def upgrade_action(self) -> _builtins.str:
        """
        Indicates the upgrade action.
        The value can be:
        + **upgrade**: Rolling upgrade
        + **upgradeAutoCommit**: Auto-commit
        + **commit**: Commit
        + **rollback**: Rollback
        """
        return pulumi.get(self, "upgrade_action")


