# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetOpengaussSslCertDownloadLinkResult',
    'AwaitableGetOpengaussSslCertDownloadLinkResult',
    'get_opengauss_ssl_cert_download_link',
    'get_opengauss_ssl_cert_download_link_output',
]

@pulumi.output_type
class GetOpengaussSslCertDownloadLinkResult:
    """
    A collection of values returned by getOpengaussSslCertDownloadLink.
    """
    def __init__(__self__, download_link=None, id=None, instance_id=None, region=None):
        if download_link and not isinstance(download_link, str):
            raise TypeError("Expected argument 'download_link' to be a str")
        pulumi.set(__self__, "download_link", download_link)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> _builtins.str:
        """
        Indicates the download address of the SSL certificate.
        """
        return pulumi.get(self, "download_link")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetOpengaussSslCertDownloadLinkResult(GetOpengaussSslCertDownloadLinkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussSslCertDownloadLinkResult(
            download_link=self.download_link,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region)


def get_opengauss_ssl_cert_download_link(instance_id: Optional[_builtins.str] = None,
                                         region: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussSslCertDownloadLinkResult:
    """
    Use this data source to get the address for downloading the SSL certificate of a GaussDB OpenGauss instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_ssl_cert_download_link(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the GaussDB OpenGauss instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussSslCertDownloadLink:getOpengaussSslCertDownloadLink', __args__, opts=opts, typ=GetOpengaussSslCertDownloadLinkResult).value

    return AwaitableGetOpengaussSslCertDownloadLinkResult(
        download_link=pulumi.get(__ret__, 'download_link'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'))
def get_opengauss_ssl_cert_download_link_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussSslCertDownloadLinkResult]:
    """
    Use this data source to get the address for downloading the SSL certificate of a GaussDB OpenGauss instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_ssl_cert_download_link(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of the GaussDB OpenGauss instance.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussSslCertDownloadLink:getOpengaussSslCertDownloadLink', __args__, opts=opts, typ=GetOpengaussSslCertDownloadLinkResult)
    return __ret__.apply(lambda __response__: GetOpengaussSslCertDownloadLinkResult(
        download_link=pulumi.get(__response__, 'download_link'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region')))
