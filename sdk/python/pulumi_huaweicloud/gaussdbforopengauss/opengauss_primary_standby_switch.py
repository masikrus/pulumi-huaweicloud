# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OpengaussPrimaryStandbySwitchArgs', 'OpengaussPrimaryStandbySwitch']

@pulumi.input_type
class OpengaussPrimaryStandbySwitchArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 shards: pulumi.Input[Sequence[pulumi.Input['OpengaussPrimaryStandbySwitchShardArgs']]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a OpengaussPrimaryStandbySwitch resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['OpengaussPrimaryStandbySwitchShardArgs']]] shards: Specifies the nodes. You can switch standby DNs of multiple shards to primary DNs.
               The node information is the node IDs and component IDs of shards whose standby DNs are promoted to primary.
               The shards structure is documented below.
               
               Changing this parameter will create a new resource.
               
               <a name="shards_struct"></a>
               The `shards` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "shards", shards)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the GaussDB OpenGauss instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def shards(self) -> pulumi.Input[Sequence[pulumi.Input['OpengaussPrimaryStandbySwitchShardArgs']]]:
        """
        Specifies the nodes. You can switch standby DNs of multiple shards to primary DNs.
        The node information is the node IDs and component IDs of shards whose standby DNs are promoted to primary.
        The shards structure is documented below.

        Changing this parameter will create a new resource.

        <a name="shards_struct"></a>
        The `shards` block supports:
        """
        return pulumi.get(self, "shards")

    @shards.setter
    def shards(self, value: pulumi.Input[Sequence[pulumi.Input['OpengaussPrimaryStandbySwitchShardArgs']]]):
        pulumi.set(self, "shards", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _OpengaussPrimaryStandbySwitchState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 shards: Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussPrimaryStandbySwitchShardArgs']]]] = None):
        """
        Input properties used for looking up and filtering OpengaussPrimaryStandbySwitch resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['OpengaussPrimaryStandbySwitchShardArgs']]] shards: Specifies the nodes. You can switch standby DNs of multiple shards to primary DNs.
               The node information is the node IDs and component IDs of shards whose standby DNs are promoted to primary.
               The shards structure is documented below.
               
               Changing this parameter will create a new resource.
               
               <a name="shards_struct"></a>
               The `shards` block supports:
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if shards is not None:
            pulumi.set(__self__, "shards", shards)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB OpenGauss instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def shards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussPrimaryStandbySwitchShardArgs']]]]:
        """
        Specifies the nodes. You can switch standby DNs of multiple shards to primary DNs.
        The node information is the node IDs and component IDs of shards whose standby DNs are promoted to primary.
        The shards structure is documented below.

        Changing this parameter will create a new resource.

        <a name="shards_struct"></a>
        The `shards` block supports:
        """
        return pulumi.get(self, "shards")

    @shards.setter
    def shards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OpengaussPrimaryStandbySwitchShardArgs']]]]):
        pulumi.set(self, "shards", value)


@pulumi.type_token("huaweicloud:GaussDBforOpenGauss/opengaussPrimaryStandbySwitch:OpengaussPrimaryStandbySwitch")
class OpengaussPrimaryStandbySwitch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 shards: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OpengaussPrimaryStandbySwitchShardArgs', 'OpengaussPrimaryStandbySwitchShardArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a GaussDB OpenGauss primary standby switch resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        node_id = config.require_object("nodeId")
        component_id = config.require_object("componentId")
        test = huaweicloud.gaussdbforopengauss.OpengaussPrimaryStandbySwitch("test",
            instance_id=instance_id,
            shards=[{
                "node_id": node_id,
                "component_id": component_id,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OpengaussPrimaryStandbySwitchShardArgs', 'OpengaussPrimaryStandbySwitchShardArgsDict']]]] shards: Specifies the nodes. You can switch standby DNs of multiple shards to primary DNs.
               The node information is the node IDs and component IDs of shards whose standby DNs are promoted to primary.
               The shards structure is documented below.
               
               Changing this parameter will create a new resource.
               
               <a name="shards_struct"></a>
               The `shards` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OpengaussPrimaryStandbySwitchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB OpenGauss primary standby switch resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        node_id = config.require_object("nodeId")
        component_id = config.require_object("componentId")
        test = huaweicloud.gaussdbforopengauss.OpengaussPrimaryStandbySwitch("test",
            instance_id=instance_id,
            shards=[{
                "node_id": node_id,
                "component_id": component_id,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param OpengaussPrimaryStandbySwitchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OpengaussPrimaryStandbySwitchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 shards: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OpengaussPrimaryStandbySwitchShardArgs', 'OpengaussPrimaryStandbySwitchShardArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OpengaussPrimaryStandbySwitchArgs.__new__(OpengaussPrimaryStandbySwitchArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if shards is None and not opts.urn:
                raise TypeError("Missing required property 'shards'")
            __props__.__dict__["shards"] = shards
        super(OpengaussPrimaryStandbySwitch, __self__).__init__(
            'huaweicloud:GaussDBforOpenGauss/opengaussPrimaryStandbySwitch:OpengaussPrimaryStandbySwitch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            shards: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OpengaussPrimaryStandbySwitchShardArgs', 'OpengaussPrimaryStandbySwitchShardArgsDict']]]]] = None) -> 'OpengaussPrimaryStandbySwitch':
        """
        Get an existing OpengaussPrimaryStandbySwitch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB OpenGauss instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OpengaussPrimaryStandbySwitchShardArgs', 'OpengaussPrimaryStandbySwitchShardArgsDict']]]] shards: Specifies the nodes. You can switch standby DNs of multiple shards to primary DNs.
               The node information is the node IDs and component IDs of shards whose standby DNs are promoted to primary.
               The shards structure is documented below.
               
               Changing this parameter will create a new resource.
               
               <a name="shards_struct"></a>
               The `shards` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OpengaussPrimaryStandbySwitchState.__new__(_OpengaussPrimaryStandbySwitchState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["shards"] = shards
        return OpengaussPrimaryStandbySwitch(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the GaussDB OpenGauss instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def shards(self) -> pulumi.Output[Sequence['outputs.OpengaussPrimaryStandbySwitchShard']]:
        """
        Specifies the nodes. You can switch standby DNs of multiple shards to primary DNs.
        The node information is the node IDs and component IDs of shards whose standby DNs are promoted to primary.
        The shards structure is documented below.

        Changing this parameter will create a new resource.

        <a name="shards_struct"></a>
        The `shards` block supports:
        """
        return pulumi.get(self, "shards")

