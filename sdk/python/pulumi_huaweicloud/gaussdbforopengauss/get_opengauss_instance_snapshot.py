# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetOpengaussInstanceSnapshotResult',
    'AwaitableGetOpengaussInstanceSnapshotResult',
    'get_opengauss_instance_snapshot',
    'get_opengauss_instance_snapshot_output',
]

@pulumi.output_type
class GetOpengaussInstanceSnapshotResult:
    """
    A collection of values returned by getOpengaussInstanceSnapshot.
    """
    def __init__(__self__, backup_id=None, cluster_mode=None, coordinator_num=None, data_volume_size=None, engine_version=None, id=None, instance_id=None, instance_mode=None, node_num=None, region=None, replica_num=None, restore_time=None, sharding_num=None, solution=None):
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if cluster_mode and not isinstance(cluster_mode, str):
            raise TypeError("Expected argument 'cluster_mode' to be a str")
        pulumi.set(__self__, "cluster_mode", cluster_mode)
        if coordinator_num and not isinstance(coordinator_num, int):
            raise TypeError("Expected argument 'coordinator_num' to be a int")
        pulumi.set(__self__, "coordinator_num", coordinator_num)
        if data_volume_size and not isinstance(data_volume_size, str):
            raise TypeError("Expected argument 'data_volume_size' to be a str")
        pulumi.set(__self__, "data_volume_size", data_volume_size)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_mode and not isinstance(instance_mode, str):
            raise TypeError("Expected argument 'instance_mode' to be a str")
        pulumi.set(__self__, "instance_mode", instance_mode)
        if node_num and not isinstance(node_num, int):
            raise TypeError("Expected argument 'node_num' to be a int")
        pulumi.set(__self__, "node_num", node_num)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if replica_num and not isinstance(replica_num, int):
            raise TypeError("Expected argument 'replica_num' to be a int")
        pulumi.set(__self__, "replica_num", replica_num)
        if restore_time and not isinstance(restore_time, str):
            raise TypeError("Expected argument 'restore_time' to be a str")
        pulumi.set(__self__, "restore_time", restore_time)
        if sharding_num and not isinstance(sharding_num, int):
            raise TypeError("Expected argument 'sharding_num' to be a int")
        pulumi.set(__self__, "sharding_num", sharding_num)
        if solution and not isinstance(solution, str):
            raise TypeError("Expected argument 'solution' to be a str")
        pulumi.set(__self__, "solution", solution)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="clusterMode")
    def cluster_mode(self) -> _builtins.str:
        """
        Indicates the instance deployment model.
        The value can be:
        + **Ha**: primary/standby deployment
        + **Independent**: independent deployment
        + **Combined**: combined deployment
        """
        return pulumi.get(self, "cluster_mode")

    @_builtins.property
    @pulumi.getter(name="coordinatorNum")
    def coordinator_num(self) -> _builtins.int:
        """
        Indicates the number of CNs.
        """
        return pulumi.get(self, "coordinator_num")

    @_builtins.property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> _builtins.str:
        """
        Indicates the storage space, in GB
        """
        return pulumi.get(self, "data_volume_size")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Indicates the engine version.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> _builtins.str:
        """
        Indicates the instance model.
        The value can be:
        + **basic**: basic edition
        + **standard**: standard edition
        + **enterprise**: enterprise edition
        """
        return pulumi.get(self, "instance_mode")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> _builtins.int:
        """
        Indicates the number of nodes.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="replicaNum")
    def replica_num(self) -> _builtins.int:
        """
        Indicates the number of replicas.
        """
        return pulumi.get(self, "replica_num")

    @_builtins.property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "restore_time")

    @_builtins.property
    @pulumi.getter(name="shardingNum")
    def sharding_num(self) -> _builtins.int:
        """
        Indicates the number of shards.
        """
        return pulumi.get(self, "sharding_num")

    @_builtins.property
    @pulumi.getter
    def solution(self) -> _builtins.str:
        """
        Indicates the solution template type.
        The value can be:
        + **single**: single node
        + **double**: 1 primary + 1 standby (2 nodes)
        + **triset**: 1 primary + 2 standby
        + **logger**: 1 primary + 1 standby + 1 log
        + **loggerdorado**: 1 primary + 1 standby + 1 log (shared storage)
        + **quadruset**: 1 primary + 3 standby
        + **hws**: distributed (independent deployment)
        """
        return pulumi.get(self, "solution")


class AwaitableGetOpengaussInstanceSnapshotResult(GetOpengaussInstanceSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussInstanceSnapshotResult(
            backup_id=self.backup_id,
            cluster_mode=self.cluster_mode,
            coordinator_num=self.coordinator_num,
            data_volume_size=self.data_volume_size,
            engine_version=self.engine_version,
            id=self.id,
            instance_id=self.instance_id,
            instance_mode=self.instance_mode,
            node_num=self.node_num,
            region=self.region,
            replica_num=self.replica_num,
            restore_time=self.restore_time,
            sharding_num=self.sharding_num,
            solution=self.solution)


def get_opengauss_instance_snapshot(backup_id: Optional[_builtins.str] = None,
                                    instance_id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    restore_time: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussInstanceSnapshotResult:
    """
    Use this data source to get the information About the Original Instance Based on a Specific Point of Time or a Backup File.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    backup_id = config.require_object("backupId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_instance_snapshot(backup_id=backup_id)
    ```


    :param _builtins.str backup_id: Specifies the backup ID.
           It is mandatory when a DB instance is restored using a backup ID.
    :param _builtins.str instance_id: Specifies the original instance ID.
           It is mandatory if `restore_time` is specified.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str restore_time: Specifies the instance information at a time point.
           It is in the UNIX timestamp format, in milliseconds. The time zone is UTC. It is mandatory when you want to view DB
           instance backups based on a specified point in time.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['restoreTime'] = restore_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussInstanceSnapshot:getOpengaussInstanceSnapshot', __args__, opts=opts, typ=GetOpengaussInstanceSnapshotResult).value

    return AwaitableGetOpengaussInstanceSnapshotResult(
        backup_id=pulumi.get(__ret__, 'backup_id'),
        cluster_mode=pulumi.get(__ret__, 'cluster_mode'),
        coordinator_num=pulumi.get(__ret__, 'coordinator_num'),
        data_volume_size=pulumi.get(__ret__, 'data_volume_size'),
        engine_version=pulumi.get(__ret__, 'engine_version'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_mode=pulumi.get(__ret__, 'instance_mode'),
        node_num=pulumi.get(__ret__, 'node_num'),
        region=pulumi.get(__ret__, 'region'),
        replica_num=pulumi.get(__ret__, 'replica_num'),
        restore_time=pulumi.get(__ret__, 'restore_time'),
        sharding_num=pulumi.get(__ret__, 'sharding_num'),
        solution=pulumi.get(__ret__, 'solution'))
def get_opengauss_instance_snapshot_output(backup_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           restore_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussInstanceSnapshotResult]:
    """
    Use this data source to get the information About the Original Instance Based on a Specific Point of Time or a Backup File.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    backup_id = config.require_object("backupId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_instance_snapshot(backup_id=backup_id)
    ```


    :param _builtins.str backup_id: Specifies the backup ID.
           It is mandatory when a DB instance is restored using a backup ID.
    :param _builtins.str instance_id: Specifies the original instance ID.
           It is mandatory if `restore_time` is specified.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str restore_time: Specifies the instance information at a time point.
           It is in the UNIX timestamp format, in milliseconds. The time zone is UTC. It is mandatory when you want to view DB
           instance backups based on a specified point in time.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['restoreTime'] = restore_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussInstanceSnapshot:getOpengaussInstanceSnapshot', __args__, opts=opts, typ=GetOpengaussInstanceSnapshotResult)
    return __ret__.apply(lambda __response__: GetOpengaussInstanceSnapshotResult(
        backup_id=pulumi.get(__response__, 'backup_id'),
        cluster_mode=pulumi.get(__response__, 'cluster_mode'),
        coordinator_num=pulumi.get(__response__, 'coordinator_num'),
        data_volume_size=pulumi.get(__response__, 'data_volume_size'),
        engine_version=pulumi.get(__response__, 'engine_version'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instance_mode=pulumi.get(__response__, 'instance_mode'),
        node_num=pulumi.get(__response__, 'node_num'),
        region=pulumi.get(__response__, 'region'),
        replica_num=pulumi.get(__response__, 'replica_num'),
        restore_time=pulumi.get(__response__, 'restore_time'),
        sharding_num=pulumi.get(__response__, 'sharding_num'),
        solution=pulumi.get(__response__, 'solution')))
