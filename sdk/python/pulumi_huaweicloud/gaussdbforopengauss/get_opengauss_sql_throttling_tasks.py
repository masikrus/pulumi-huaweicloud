# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOpengaussSqlThrottlingTasksResult',
    'AwaitableGetOpengaussSqlThrottlingTasksResult',
    'get_opengauss_sql_throttling_tasks',
    'get_opengauss_sql_throttling_tasks_output',
]

@pulumi.output_type
class GetOpengaussSqlThrottlingTasksResult:
    """
    A collection of values returned by getOpengaussSqlThrottlingTasks.
    """
    def __init__(__self__, end_time=None, id=None, instance_id=None, limit_task_lists=None, limit_type=None, limit_type_value=None, region=None, rule_name=None, sql_model=None, start_time=None, task_name=None, task_scope=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if limit_task_lists and not isinstance(limit_task_lists, list):
            raise TypeError("Expected argument 'limit_task_lists' to be a list")
        pulumi.set(__self__, "limit_task_lists", limit_task_lists)
        if limit_type and not isinstance(limit_type, str):
            raise TypeError("Expected argument 'limit_type' to be a str")
        pulumi.set(__self__, "limit_type", limit_type)
        if limit_type_value and not isinstance(limit_type_value, str):
            raise TypeError("Expected argument 'limit_type_value' to be a str")
        pulumi.set(__self__, "limit_type_value", limit_type_value)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_name and not isinstance(rule_name, str):
            raise TypeError("Expected argument 'rule_name' to be a str")
        pulumi.set(__self__, "rule_name", rule_name)
        if sql_model and not isinstance(sql_model, str):
            raise TypeError("Expected argument 'sql_model' to be a str")
        pulumi.set(__self__, "sql_model", sql_model)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if task_name and not isinstance(task_name, str):
            raise TypeError("Expected argument 'task_name' to be a str")
        pulumi.set(__self__, "task_name", task_name)
        if task_scope and not isinstance(task_scope, str):
            raise TypeError("Expected argument 'task_scope' to be a str")
        pulumi.set(__self__, "task_scope", task_scope)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Indicates the end time of the throttling task in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="limitTaskLists")
    def limit_task_lists(self) -> Sequence['outputs.GetOpengaussSqlThrottlingTasksLimitTaskListResult']:
        """
        Indicates the list of throttling tasks.
        """
        return pulumi.get(self, "limit_task_lists")

    @_builtins.property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[_builtins.str]:
        """
        Indicates the throttling task type.
        """
        return pulumi.get(self, "limit_type")

    @_builtins.property
    @pulumi.getter(name="limitTypeValue")
    def limit_type_value(self) -> Optional[_builtins.str]:
        """
        Indicates the throttling task type value.
        """
        return pulumi.get(self, "limit_type_value")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[_builtins.str]:
        """
        Indicates the rule name.
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="sqlModel")
    def sql_model(self) -> Optional[_builtins.str]:
        """
        Indicates the SQL template.
        This parameter is returned only when the `limit_type` is **SQL_ID**.
        """
        return pulumi.get(self, "sql_model")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        Indicates the start time of the throttling task in the format of **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[_builtins.str]:
        """
        Indicates the throttling task name.
        """
        return pulumi.get(self, "task_name")

    @_builtins.property
    @pulumi.getter(name="taskScope")
    def task_scope(self) -> Optional[_builtins.str]:
        """
        Indicates the throttling task scope.
        """
        return pulumi.get(self, "task_scope")


class AwaitableGetOpengaussSqlThrottlingTasksResult(GetOpengaussSqlThrottlingTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussSqlThrottlingTasksResult(
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            limit_task_lists=self.limit_task_lists,
            limit_type=self.limit_type,
            limit_type_value=self.limit_type_value,
            region=self.region,
            rule_name=self.rule_name,
            sql_model=self.sql_model,
            start_time=self.start_time,
            task_name=self.task_name,
            task_scope=self.task_scope)


def get_opengauss_sql_throttling_tasks(end_time: Optional[_builtins.str] = None,
                                       instance_id: Optional[_builtins.str] = None,
                                       limit_type: Optional[_builtins.str] = None,
                                       limit_type_value: Optional[_builtins.str] = None,
                                       region: Optional[_builtins.str] = None,
                                       rule_name: Optional[_builtins.str] = None,
                                       sql_model: Optional[_builtins.str] = None,
                                       start_time: Optional[_builtins.str] = None,
                                       task_name: Optional[_builtins.str] = None,
                                       task_scope: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussSqlThrottlingTasksResult:
    """
    Use this data source to get the SQL throttling tasks based on search criteria.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_sql_throttling_tasks(instance_id=instance_id)
    ```


    :param _builtins.str end_time: Specifies the end time of the throttling task in the format of **yyy-mm-ddThh:mm:ss+0000**.
    :param _builtins.str instance_id: Specifies the ID of the GaussDB OpenGauss instance.
    :param _builtins.str limit_type: Specifies the throttling type.
           The value can be **SQL_ID**, **SQL_TYPE** or **SESSION_ACTIVE_MAX_COUNT**.
    :param _builtins.str limit_type_value: Specifies the throttling type value. Fuzzy match is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_name: Specifies the rule name.
    :param _builtins.str sql_model: Specifies the SQL template. Fuzzy match is supported.
    :param _builtins.str start_time: Specifies the start time of the throttling task in the format of **yyy-mm-ddThh:mm:ss+0000**.
    :param _builtins.str task_name: Specifies the throttling task name. Fuzzy match is supported.
    :param _builtins.str task_scope: Specifies the throttling task scope.
           Currently, **SQL** and **SESSION** are supported.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['limitType'] = limit_type
    __args__['limitTypeValue'] = limit_type_value
    __args__['region'] = region
    __args__['ruleName'] = rule_name
    __args__['sqlModel'] = sql_model
    __args__['startTime'] = start_time
    __args__['taskName'] = task_name
    __args__['taskScope'] = task_scope
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussSqlThrottlingTasks:getOpengaussSqlThrottlingTasks', __args__, opts=opts, typ=GetOpengaussSqlThrottlingTasksResult).value

    return AwaitableGetOpengaussSqlThrottlingTasksResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        limit_task_lists=pulumi.get(__ret__, 'limit_task_lists'),
        limit_type=pulumi.get(__ret__, 'limit_type'),
        limit_type_value=pulumi.get(__ret__, 'limit_type_value'),
        region=pulumi.get(__ret__, 'region'),
        rule_name=pulumi.get(__ret__, 'rule_name'),
        sql_model=pulumi.get(__ret__, 'sql_model'),
        start_time=pulumi.get(__ret__, 'start_time'),
        task_name=pulumi.get(__ret__, 'task_name'),
        task_scope=pulumi.get(__ret__, 'task_scope'))
def get_opengauss_sql_throttling_tasks_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              limit_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              limit_type_value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              rule_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              sql_model: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              task_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              task_scope: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussSqlThrottlingTasksResult]:
    """
    Use this data source to get the SQL throttling tasks based on search criteria.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_sql_throttling_tasks(instance_id=instance_id)
    ```


    :param _builtins.str end_time: Specifies the end time of the throttling task in the format of **yyy-mm-ddThh:mm:ss+0000**.
    :param _builtins.str instance_id: Specifies the ID of the GaussDB OpenGauss instance.
    :param _builtins.str limit_type: Specifies the throttling type.
           The value can be **SQL_ID**, **SQL_TYPE** or **SESSION_ACTIVE_MAX_COUNT**.
    :param _builtins.str limit_type_value: Specifies the throttling type value. Fuzzy match is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_name: Specifies the rule name.
    :param _builtins.str sql_model: Specifies the SQL template. Fuzzy match is supported.
    :param _builtins.str start_time: Specifies the start time of the throttling task in the format of **yyy-mm-ddThh:mm:ss+0000**.
    :param _builtins.str task_name: Specifies the throttling task name. Fuzzy match is supported.
    :param _builtins.str task_scope: Specifies the throttling task scope.
           Currently, **SQL** and **SESSION** are supported.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['limitType'] = limit_type
    __args__['limitTypeValue'] = limit_type_value
    __args__['region'] = region
    __args__['ruleName'] = rule_name
    __args__['sqlModel'] = sql_model
    __args__['startTime'] = start_time
    __args__['taskName'] = task_name
    __args__['taskScope'] = task_scope
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussSqlThrottlingTasks:getOpengaussSqlThrottlingTasks', __args__, opts=opts, typ=GetOpengaussSqlThrottlingTasksResult)
    return __ret__.apply(lambda __response__: GetOpengaussSqlThrottlingTasksResult(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        limit_task_lists=pulumi.get(__response__, 'limit_task_lists'),
        limit_type=pulumi.get(__response__, 'limit_type'),
        limit_type_value=pulumi.get(__response__, 'limit_type_value'),
        region=pulumi.get(__response__, 'region'),
        rule_name=pulumi.get(__response__, 'rule_name'),
        sql_model=pulumi.get(__response__, 'sql_model'),
        start_time=pulumi.get(__response__, 'start_time'),
        task_name=pulumi.get(__response__, 'task_name'),
        task_scope=pulumi.get(__response__, 'task_scope')))
