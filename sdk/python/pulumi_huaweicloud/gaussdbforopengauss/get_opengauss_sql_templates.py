# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOpengaussSqlTemplatesResult',
    'AwaitableGetOpengaussSqlTemplatesResult',
    'get_opengauss_sql_templates',
    'get_opengauss_sql_templates_output',
]

@pulumi.output_type
class GetOpengaussSqlTemplatesResult:
    """
    A collection of values returned by getOpengaussSqlTemplates.
    """
    def __init__(__self__, id=None, instance_id=None, node_id=None, node_limit_sql_model_lists=None, region=None, sql_model=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if node_id and not isinstance(node_id, str):
            raise TypeError("Expected argument 'node_id' to be a str")
        pulumi.set(__self__, "node_id", node_id)
        if node_limit_sql_model_lists and not isinstance(node_limit_sql_model_lists, list):
            raise TypeError("Expected argument 'node_limit_sql_model_lists' to be a list")
        pulumi.set(__self__, "node_limit_sql_model_lists", node_limit_sql_model_lists)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sql_model and not isinstance(sql_model, str):
            raise TypeError("Expected argument 'sql_model' to be a str")
        pulumi.set(__self__, "sql_model", sql_model)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter(name="nodeLimitSqlModelLists")
    def node_limit_sql_model_lists(self) -> Sequence['outputs.GetOpengaussSqlTemplatesNodeLimitSqlModelListResult']:
        """
        Indicates the information about the SQL template for SQL throttling.
        """
        return pulumi.get(self, "node_limit_sql_model_lists")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sqlModel")
    def sql_model(self) -> Optional[_builtins.str]:
        """
        Indicates the SQL template of the throttling task.
        """
        return pulumi.get(self, "sql_model")


class AwaitableGetOpengaussSqlTemplatesResult(GetOpengaussSqlTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOpengaussSqlTemplatesResult(
            id=self.id,
            instance_id=self.instance_id,
            node_id=self.node_id,
            node_limit_sql_model_lists=self.node_limit_sql_model_lists,
            region=self.region,
            sql_model=self.sql_model)


def get_opengauss_sql_templates(instance_id: Optional[_builtins.str] = None,
                                node_id: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                sql_model: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOpengaussSqlTemplatesResult:
    """
    Use this data source to get the SQL templates of a specified node.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    node_id = config.require_object("nodeId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_sql_templates(instance_id=instance_id,
        node_id=node_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of a GaussDB OpenGauss instance.
    :param _builtins.str node_id: Specifies the ID of a GaussDB OpenGauss instance node.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sql_model: Specifies the SQL template.
           The value can contain only uppercase letters, lowercase letters, underscores (_), digits, spaces,
           and the following special characters $*?=+;()><,.".
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['nodeId'] = node_id
    __args__['region'] = region
    __args__['sqlModel'] = sql_model
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDBforOpenGauss/getOpengaussSqlTemplates:getOpengaussSqlTemplates', __args__, opts=opts, typ=GetOpengaussSqlTemplatesResult).value

    return AwaitableGetOpengaussSqlTemplatesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        node_id=pulumi.get(__ret__, 'node_id'),
        node_limit_sql_model_lists=pulumi.get(__ret__, 'node_limit_sql_model_lists'),
        region=pulumi.get(__ret__, 'region'),
        sql_model=pulumi.get(__ret__, 'sql_model'))
def get_opengauss_sql_templates_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       node_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       sql_model: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOpengaussSqlTemplatesResult]:
    """
    Use this data source to get the SQL templates of a specified node.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    node_id = config.require_object("nodeId")
    test = huaweicloud.GaussDBforOpenGauss.get_opengauss_sql_templates(instance_id=instance_id,
        node_id=node_id)
    ```


    :param _builtins.str instance_id: Specifies the ID of a GaussDB OpenGauss instance.
    :param _builtins.str node_id: Specifies the ID of a GaussDB OpenGauss instance node.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str sql_model: Specifies the SQL template.
           The value can contain only uppercase letters, lowercase letters, underscores (_), digits, spaces,
           and the following special characters $*?=+;()><,.".
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['nodeId'] = node_id
    __args__['region'] = region
    __args__['sqlModel'] = sql_model
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDBforOpenGauss/getOpengaussSqlTemplates:getOpengaussSqlTemplates', __args__, opts=opts, typ=GetOpengaussSqlTemplatesResult)
    return __ret__.apply(lambda __response__: GetOpengaussSqlTemplatesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        node_id=pulumi.get(__response__, 'node_id'),
        node_limit_sql_model_lists=pulumi.get(__response__, 'node_limit_sql_model_lists'),
        region=pulumi.get(__response__, 'region'),
        sql_model=pulumi.get(__response__, 'sql_model')))
