# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'DocumentExecuteExecutionParameter',
    'DocumentExecuteParameter',
    'DocumentExecuteSysTag',
    'DocumentExecuteTarget',
    'DocumentVersion',
    'IncidentEnumDataList',
    'ScriptExecuteParameter',
    'ScriptParameter',
    'WarRoomIncident',
    'WarRoomScheduleGroup',
    'WarRoomWarRoomStatus',
    'GetApplicationViewsDataResult',
    'GetApplicationsDataResult',
    'GetComponentsDataResult',
    'GetDocumentAtomicDetailInputResult',
    'GetDocumentAtomicDetailOutputResult',
    'GetDocumentAtomicsDataResult',
    'GetDocumentsDataResult',
    'GetPatchComplianceReportItemsComplianceItemResult',
    'GetPatchComplianceReportItemsComplianceItemPatchDetailResult',
    'GetPatchComplianceReportsInstanceCompliantResult',
    'GetPatchComplianceReportsInstanceCompliantCompliantSummaryResult',
    'GetPatchComplianceReportsInstanceCompliantCompliantSummarySeveritySummaryResult',
    'GetPatchComplianceReportsInstanceCompliantExecutionSummaryResult',
    'GetPatchComplianceReportsInstanceCompliantNonCompliantSummaryResult',
    'GetPatchComplianceReportsInstanceCompliantNonCompliantSummarySeveritySummaryResult',
    'GetPublicScriptDetailPropertyResult',
    'GetPublicScriptDetailScriptParamResult',
    'GetPublicScriptsDataResult',
    'GetPublicScriptsDataPropertyResult',
    'GetResourcesDataResult',
    'GetResourcesDataTagResult',
    'GetScriptOrderBatchDetailsExecuteInstanceResult',
    'GetScriptOrderBatchDetailsExecuteInstanceTargetInstanceResult',
    'GetScriptOrderBatchDetailsExecuteInstanceTargetInstanceCustomAttributeResult',
    'GetScriptOrderBatchDetailsExecuteInstanceTargetInstancePropertyResult',
    'GetScriptOrderBatchesDataResult',
    'GetScriptOrderStatisticsExecuteStatisticResult',
    'GetScriptOrdersDataResult',
    'GetScriptOrdersDataPropertyResult',
    'GetScriptsDataResult',
    'GetScriptsDataPropertyResult',
    'GetScriptsDataPropertyReviewerResult',
    'GetScriptsDataResourceTagResult',
    'GetWarRoomsListResult',
    'GetWarRoomsListImpactedApplicationResult',
    'GetWarRoomsListIncidentResult',
    'GetWarRoomsListRegionResult',
    'GetWarRoomsListWarRoomStatusResult',
]

@pulumi.output_type
class DocumentExecuteExecutionParameter(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the dimension of the instantiated execution target.
               The enumeration value as **InstanceValues**, **BatchValues**.
        :param _builtins.str value: Specifies the value.
               
               <a name="targets_struct"></a>
               The `targets` blocks support:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value.

        <a name="targets_struct"></a>
        The `targets` blocks support:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DocumentExecuteParameter(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the dimension of the instantiated execution target.
               The enumeration value as **InstanceValues**, **BatchValues**.
        :param _builtins.str value: Specifies the value.
               
               <a name="targets_struct"></a>
               The `targets` blocks support:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value.

        <a name="targets_struct"></a>
        The `targets` blocks support:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DocumentExecuteSysTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the dimension of the instantiated execution target.
               The enumeration value as **InstanceValues**, **BatchValues**.
        :param _builtins.str value: Specifies the value.
               
               <a name="targets_struct"></a>
               The `targets` blocks support:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value.

        <a name="targets_struct"></a>
        The `targets` blocks support:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DocumentExecuteTarget(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the dimension of the instantiated execution target.
               The enumeration value as **InstanceValues**, **BatchValues**.
        :param _builtins.str values: Specifies the target instance to be executed based on the global parameter
               specified by `target_parameter_name`.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[_builtins.str]:
        """
        Specifies the target instance to be executed based on the global parameter
        specified by `target_parameter_name`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class DocumentVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "versionUuid":
            suggest = "version_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DocumentVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DocumentVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DocumentVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_time: Optional[_builtins.int] = None,
                 version: Optional[_builtins.str] = None,
                 version_uuid: Optional[_builtins.str] = None):
        """
        :param _builtins.int create_time: Indicates the version creation time.
        :param _builtins.str version: Indicates the version number, such as **v1**.
        :param _builtins.str version_uuid: Indicates the version ID.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_uuid is not None:
            pulumi.set(__self__, "version_uuid", version_uuid)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[_builtins.int]:
        """
        Indicates the version creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Indicates the version number, such as **v1**.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionUuid")
    def version_uuid(self) -> Optional[_builtins.str]:
        """
        Indicates the version ID.
        """
        return pulumi.get(self, "version_uuid")


@pulumi.output_type
class IncidentEnumDataList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumKey":
            suggest = "enum_key"
        elif key == "filedKey":
            suggest = "filed_key"
        elif key == "nameEn":
            suggest = "name_en"
        elif key == "nameZh":
            suggest = "name_zh"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IncidentEnumDataList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IncidentEnumDataList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IncidentEnumDataList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enum_key: Optional[_builtins.str] = None,
                 filed_key: Optional[_builtins.str] = None,
                 name_en: Optional[_builtins.str] = None,
                 name_zh: Optional[_builtins.str] = None):
        """
        :param _builtins.str enum_key: Indicates the enum key.
        :param _builtins.str filed_key: Indicates the filed key.
        :param _builtins.str name_en: Indicates the English name.
        :param _builtins.str name_zh: Indicates the Chinese name.
        """
        if enum_key is not None:
            pulumi.set(__self__, "enum_key", enum_key)
        if filed_key is not None:
            pulumi.set(__self__, "filed_key", filed_key)
        if name_en is not None:
            pulumi.set(__self__, "name_en", name_en)
        if name_zh is not None:
            pulumi.set(__self__, "name_zh", name_zh)

    @_builtins.property
    @pulumi.getter(name="enumKey")
    def enum_key(self) -> Optional[_builtins.str]:
        """
        Indicates the enum key.
        """
        return pulumi.get(self, "enum_key")

    @_builtins.property
    @pulumi.getter(name="filedKey")
    def filed_key(self) -> Optional[_builtins.str]:
        """
        Indicates the filed key.
        """
        return pulumi.get(self, "filed_key")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> Optional[_builtins.str]:
        """
        Indicates the English name.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter(name="nameZh")
    def name_zh(self) -> Optional[_builtins.str]:
        """
        Indicates the Chinese name.
        """
        return pulumi.get(self, "name_zh")


@pulumi.output_type
class ScriptExecuteParameter(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the name of the parameter.
        :param _builtins.str value: Specifies the value of the parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ScriptParameter(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str,
                 value: _builtins.str,
                 sensitive: Optional[_builtins.bool] = None):
        """
        :param _builtins.str description: Specifies the description of the parameter.
        :param _builtins.str name: Specifies the name of the parameter.
        :param _builtins.str value: Specifies the **default** value of the parameter.
        :param _builtins.bool sensitive: Specifies whether the parameter is sensitive.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the **default** value of the parameter.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def sensitive(self) -> Optional[_builtins.bool]:
        """
        Specifies whether the parameter is sensitive.
        """
        return pulumi.get(self, "sensitive")


@pulumi.output_type
class WarRoomIncident(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureLevel":
            suggest = "failure_level"
        elif key == "incidentId":
            suggest = "incident_id"
        elif key == "incidentUrl":
            suggest = "incident_url"
        elif key == "isChangeEvent":
            suggest = "is_change_event"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WarRoomIncident. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WarRoomIncident.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WarRoomIncident.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_level: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 incident_id: Optional[_builtins.str] = None,
                 incident_url: Optional[_builtins.str] = None,
                 is_change_event: Optional[_builtins.bool] = None):
        """
        :param _builtins.str failure_level: Indicates the incident level.
        :param _builtins.str id: Indicates the war room status enumeration value ID .
        :param _builtins.str incident_id: Indicates the incident ID.
        :param _builtins.str incident_url: Indicates the incident URL.
        :param _builtins.bool is_change_event: Indicates whether the incident is a change incident.
        """
        if failure_level is not None:
            pulumi.set(__self__, "failure_level", failure_level)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if incident_id is not None:
            pulumi.set(__self__, "incident_id", incident_id)
        if incident_url is not None:
            pulumi.set(__self__, "incident_url", incident_url)
        if is_change_event is not None:
            pulumi.set(__self__, "is_change_event", is_change_event)

    @_builtins.property
    @pulumi.getter(name="failureLevel")
    def failure_level(self) -> Optional[_builtins.str]:
        """
        Indicates the incident level.
        """
        return pulumi.get(self, "failure_level")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the war room status enumeration value ID .
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="incidentId")
    def incident_id(self) -> Optional[_builtins.str]:
        """
        Indicates the incident ID.
        """
        return pulumi.get(self, "incident_id")

    @_builtins.property
    @pulumi.getter(name="incidentUrl")
    def incident_url(self) -> Optional[_builtins.str]:
        """
        Indicates the incident URL.
        """
        return pulumi.get(self, "incident_url")

    @_builtins.property
    @pulumi.getter(name="isChangeEvent")
    def is_change_event(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the incident is a change incident.
        """
        return pulumi.get(self, "is_change_event")


@pulumi.output_type
class WarRoomScheduleGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleId":
            suggest = "role_id"
        elif key == "sceneId":
            suggest = "scene_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WarRoomScheduleGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WarRoomScheduleGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WarRoomScheduleGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_id: _builtins.str,
                 scene_id: _builtins.str):
        """
        :param _builtins.str role_id: Specifies the role ID.
        :param _builtins.str scene_id: Specifies the scenario ID.
        """
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "scene_id", scene_id)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> _builtins.str:
        """
        Specifies the role ID.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="sceneId")
    def scene_id(self) -> _builtins.str:
        """
        Specifies the scenario ID.
        """
        return pulumi.get(self, "scene_id")


@pulumi.output_type
class WarRoomWarRoomStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameEn":
            suggest = "name_en"
        elif key == "nameZh":
            suggest = "name_zh"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WarRoomWarRoomStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WarRoomWarRoomStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WarRoomWarRoomStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name_en: Optional[_builtins.str] = None,
                 name_zh: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Indicates the war room status enumeration value ID .
        :param _builtins.str name_en: Indicates the English name of the war room status enumeration value.
        :param _builtins.str name_zh: Indicates the Chinese name of the war room status enumeration value.
        :param _builtins.str type: Indicates the war room status enumeration type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name_en is not None:
            pulumi.set(__self__, "name_en", name_en)
        if name_zh is not None:
            pulumi.set(__self__, "name_zh", name_zh)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the war room status enumeration value ID .
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> Optional[_builtins.str]:
        """
        Indicates the English name of the war room status enumeration value.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter(name="nameZh")
    def name_zh(self) -> Optional[_builtins.str]:
        """
        Indicates the Chinese name of the war room status enumeration value.
        """
        return pulumi.get(self, "name_zh")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the war room status enumeration type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApplicationViewsDataResult(dict):
    def __init__(__self__, *,
                 application_id: _builtins.str,
                 code: _builtins.str,
                 component_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 parent_id: _builtins.str,
                 path: _builtins.str,
                 related_domain_id: _builtins.str,
                 type: _builtins.str,
                 vendor: _builtins.str):
        """
        :param _builtins.str application_id: Indicates the application ID.
        :param _builtins.str code: Indicates the application, component or group code.
        :param _builtins.str component_id: Indicates the component ID.
        :param _builtins.str id: Indicates the application view ID.
        :param _builtins.str name: Indicates the application, component or group name.
        :param _builtins.str parent_id: Indicates the parent ID.
        :param _builtins.str path: Indicates the path where the node is located, consisting of application, component, group and other IDs.
        :param _builtins.str related_domain_id: Indicates the domain ID to which the cross-account resource belongs.
        :param _builtins.str type: Indicates the type.
        :param _builtins.str vendor: Indicates cloud vendor information.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "component_id", component_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "related_domain_id", related_domain_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vendor", vendor)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> _builtins.str:
        """
        Indicates the application ID.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Indicates the application, component or group code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> _builtins.str:
        """
        Indicates the component ID.
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the application view ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the application, component or group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        Indicates the parent ID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Indicates the path where the node is located, consisting of application, component, group and other IDs.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="relatedDomainId")
    def related_domain_id(self) -> _builtins.str:
        """
        Indicates the domain ID to which the cross-account resource belongs.
        """
        return pulumi.get(self, "related_domain_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vendor(self) -> _builtins.str:
        """
        Indicates cloud vendor information.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetApplicationsDataResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 id: _builtins.str,
                 is_collection: _builtins.bool,
                 name: _builtins.str,
                 parent_id: _builtins.str,
                 path: _builtins.str,
                 update_time: _builtins.str):
        """
        :param _builtins.str code: Specifies the application code.
        :param _builtins.str create_time: Indicates the creation time.
        :param _builtins.str description: Indicates the application description.
        :param _builtins.str domain_id: Indicates the domain ID.
        :param _builtins.str id: Indicates the application ID.
        :param _builtins.bool is_collection: Indicates whether the application is a favorite application.
        :param _builtins.str name: Indicates the application name.
        :param _builtins.str parent_id: Specifies the parent application ID.
        :param _builtins.str path: Indicates the application path.
        :param _builtins.str update_time: Indicates the modification time.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_collection", is_collection)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Specifies the application code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the application description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        Indicates the domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the application ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCollection")
    def is_collection(self) -> _builtins.bool:
        """
        Indicates whether the application is a favorite application.
        """
        return pulumi.get(self, "is_collection")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the application name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        Specifies the parent application ID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Indicates the application path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        Indicates the modification time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetComponentsDataResult(dict):
    def __init__(__self__, *,
                 application_id: _builtins.str,
                 code: _builtins.str,
                 ep_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str application_id: Specifies the application ID.
        :param _builtins.str code: Indicates the component code.
        :param _builtins.str ep_id: Indicates the enterprise project ID.
        :param _builtins.str id: Indicates the UUID assigned by the CMDB.
        :param _builtins.str name: Indicates the component name.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "ep_id", ep_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> _builtins.str:
        """
        Specifies the application ID.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Indicates the component code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="epId")
    def ep_id(self) -> _builtins.str:
        """
        Indicates the enterprise project ID.
        """
        return pulumi.get(self, "ep_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the UUID assigned by the CMDB.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the component name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDocumentAtomicDetailInputResult(dict):
    def __init__(__self__, *,
                 max: _builtins.int,
                 max_len: _builtins.int,
                 min: _builtins.int,
                 min_len: _builtins.int,
                 param_key: _builtins.str,
                 param_name_en: _builtins.str,
                 param_name_zh: _builtins.str,
                 param_type: _builtins.str,
                 pattern: _builtins.str,
                 required: _builtins.bool):
        """
        :param _builtins.int max: Indicates the maximum value.
        :param _builtins.int max_len: Indicates the maximum length.
        :param _builtins.int min: Indicates the minimum value.
        :param _builtins.int min_len: Indicates the minimum length.
        :param _builtins.str param_key: Indicates the parameter variable name.
        :param _builtins.str param_name_en: Indicates the English name of the parameter.
        :param _builtins.str param_name_zh: Indicates the Chinese name of the parameter.
        :param _builtins.str param_type: Indicates the parameter type: constant/dictionary.
        :param _builtins.str pattern: Indicates the regular restriction expression.
        :param _builtins.bool required: Indicates whether the field is required.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "max_len", max_len)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "min_len", min_len)
        pulumi.set(__self__, "param_key", param_key)
        pulumi.set(__self__, "param_name_en", param_name_en)
        pulumi.set(__self__, "param_name_zh", param_name_zh)
        pulumi.set(__self__, "param_type", param_type)
        pulumi.set(__self__, "pattern", pattern)
        pulumi.set(__self__, "required", required)

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.int:
        """
        Indicates the maximum value.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter(name="maxLen")
    def max_len(self) -> _builtins.int:
        """
        Indicates the maximum length.
        """
        return pulumi.get(self, "max_len")

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        Indicates the minimum value.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter(name="minLen")
    def min_len(self) -> _builtins.int:
        """
        Indicates the minimum length.
        """
        return pulumi.get(self, "min_len")

    @_builtins.property
    @pulumi.getter(name="paramKey")
    def param_key(self) -> _builtins.str:
        """
        Indicates the parameter variable name.
        """
        return pulumi.get(self, "param_key")

    @_builtins.property
    @pulumi.getter(name="paramNameEn")
    def param_name_en(self) -> _builtins.str:
        """
        Indicates the English name of the parameter.
        """
        return pulumi.get(self, "param_name_en")

    @_builtins.property
    @pulumi.getter(name="paramNameZh")
    def param_name_zh(self) -> _builtins.str:
        """
        Indicates the Chinese name of the parameter.
        """
        return pulumi.get(self, "param_name_zh")

    @_builtins.property
    @pulumi.getter(name="paramType")
    def param_type(self) -> _builtins.str:
        """
        Indicates the parameter type: constant/dictionary.
        """
        return pulumi.get(self, "param_type")

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> _builtins.str:
        """
        Indicates the regular restriction expression.
        """
        return pulumi.get(self, "pattern")

    @_builtins.property
    @pulumi.getter
    def required(self) -> _builtins.bool:
        """
        Indicates whether the field is required.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetDocumentAtomicDetailOutputResult(dict):
    def __init__(__self__, *,
                 supported: _builtins.bool,
                 type: _builtins.str):
        """
        :param _builtins.bool supported: Indicates whether output is supported.
        :param _builtins.str type: Indicates the output type.
        """
        pulumi.set(__self__, "supported", supported)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def supported(self) -> _builtins.bool:
        """
        Indicates whether output is supported.
        """
        return pulumi.get(self, "supported")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the output type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDocumentAtomicsDataResult(dict):
    def __init__(__self__, *,
                 atomic_name_en: _builtins.str,
                 atomic_name_zh: _builtins.str,
                 atomic_unique_key: _builtins.str,
                 tags: Sequence[_builtins.str]):
        """
        :param _builtins.str atomic_name_en: Indicates the atomic English name.
        :param _builtins.str atomic_name_zh: Indicates the atomic Chinese name.
        :param _builtins.str atomic_unique_key: Indicates the unique identifier of an atomic capability.
        :param Sequence[_builtins.str] tags: Indicates the tag information.
               The value can be **CLOUD_API**, **FUNCTION**.
        """
        pulumi.set(__self__, "atomic_name_en", atomic_name_en)
        pulumi.set(__self__, "atomic_name_zh", atomic_name_zh)
        pulumi.set(__self__, "atomic_unique_key", atomic_unique_key)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="atomicNameEn")
    def atomic_name_en(self) -> _builtins.str:
        """
        Indicates the atomic English name.
        """
        return pulumi.get(self, "atomic_name_en")

    @_builtins.property
    @pulumi.getter(name="atomicNameZh")
    def atomic_name_zh(self) -> _builtins.str:
        """
        Indicates the atomic Chinese name.
        """
        return pulumi.get(self, "atomic_name_zh")

    @_builtins.property
    @pulumi.getter(name="atomicUniqueKey")
    def atomic_unique_key(self) -> _builtins.str:
        """
        Indicates the unique identifier of an atomic capability.
        """
        return pulumi.get(self, "atomic_unique_key")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        Indicates the tag information.
        The value can be **CLOUD_API**, **FUNCTION**.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDocumentsDataResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.int,
                 creator: _builtins.str,
                 document_id: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 modifier: _builtins.str,
                 name: _builtins.str,
                 update_time: _builtins.int,
                 version: _builtins.str):
        """
        :param _builtins.int create_time: Indicates the creation time.
        :param _builtins.str creator: Specifies the creator.
        :param _builtins.str document_id: Indicates the document ID.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.str modifier: Indicates the modifier.
        :param _builtins.str name: Indicates the document name.
        :param _builtins.int update_time: Indicates the update time.
        :param _builtins.str version: Indicates the document version, such as **v1**.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "document_id", document_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "modifier", modifier)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        Specifies the creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="documentId")
    def document_id(self) -> _builtins.str:
        """
        Indicates the document ID.
        """
        return pulumi.get(self, "document_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def modifier(self) -> _builtins.str:
        """
        Indicates the modifier.
        """
        return pulumi.get(self, "modifier")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the document name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.int:
        """
        Indicates the update time.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the document version, such as **v1**.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPatchComplianceReportItemsComplianceItemResult(dict):
    def __init__(__self__, *,
                 classification: _builtins.str,
                 compliance_level: _builtins.str,
                 instance_id: _builtins.str,
                 patch_details: Sequence['outputs.GetPatchComplianceReportItemsComplianceItemPatchDetailResult'],
                 severity_level: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str classification: Specifies the category.
        :param _builtins.str compliance_level: Specifies the compliance level.
        :param _builtins.str instance_id: Indicates the node ID.
        :param Sequence['GetPatchComplianceReportItemsComplianceItemPatchDetailArgs'] patch_details: Indicates the patch details.
        :param _builtins.str severity_level: Specifies the severity level.
        :param _builtins.str title: Specifies the patch name.
        """
        pulumi.set(__self__, "classification", classification)
        pulumi.set(__self__, "compliance_level", compliance_level)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "patch_details", patch_details)
        pulumi.set(__self__, "severity_level", severity_level)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter
    def classification(self) -> _builtins.str:
        """
        Specifies the category.
        """
        return pulumi.get(self, "classification")

    @_builtins.property
    @pulumi.getter(name="complianceLevel")
    def compliance_level(self) -> _builtins.str:
        """
        Specifies the compliance level.
        """
        return pulumi.get(self, "compliance_level")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="patchDetails")
    def patch_details(self) -> Sequence['outputs.GetPatchComplianceReportItemsComplianceItemPatchDetailResult']:
        """
        Indicates the patch details.
        """
        return pulumi.get(self, "patch_details")

    @_builtins.property
    @pulumi.getter(name="severityLevel")
    def severity_level(self) -> _builtins.str:
        """
        Specifies the severity level.
        """
        return pulumi.get(self, "severity_level")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        Specifies the patch name.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetPatchComplianceReportItemsComplianceItemPatchDetailResult(dict):
    def __init__(__self__, *,
                 installed_time: _builtins.int,
                 patch_baseline_id: _builtins.str,
                 patch_baseline_name: _builtins.str,
                 patch_status: _builtins.str):
        """
        :param _builtins.int installed_time: Indicates the installation time.
        :param _builtins.str patch_baseline_id: Indicates the patch baseline ID.
        :param _builtins.str patch_baseline_name: Indicates the patch baseline name.
        :param _builtins.str patch_status: Specifies the patch status.
               Values can be as follows:
               + **INSTALLED**: A patch has been installed.
               + **INSTALLED_OTHER**: Other patches have been installed.
               + **MISSING**: A patch is missing.
               + **REJECT**: A patch is rejected.
               + **FAILED**: A patch fails to be installed.
               + **PENDING_REBOOT**: A patch has been installed and is waiting to be restarted.
        """
        pulumi.set(__self__, "installed_time", installed_time)
        pulumi.set(__self__, "patch_baseline_id", patch_baseline_id)
        pulumi.set(__self__, "patch_baseline_name", patch_baseline_name)
        pulumi.set(__self__, "patch_status", patch_status)

    @_builtins.property
    @pulumi.getter(name="installedTime")
    def installed_time(self) -> _builtins.int:
        """
        Indicates the installation time.
        """
        return pulumi.get(self, "installed_time")

    @_builtins.property
    @pulumi.getter(name="patchBaselineId")
    def patch_baseline_id(self) -> _builtins.str:
        """
        Indicates the patch baseline ID.
        """
        return pulumi.get(self, "patch_baseline_id")

    @_builtins.property
    @pulumi.getter(name="patchBaselineName")
    def patch_baseline_name(self) -> _builtins.str:
        """
        Indicates the patch baseline name.
        """
        return pulumi.get(self, "patch_baseline_name")

    @_builtins.property
    @pulumi.getter(name="patchStatus")
    def patch_status(self) -> _builtins.str:
        """
        Specifies the patch status.
        Values can be as follows:
        + **INSTALLED**: A patch has been installed.
        + **INSTALLED_OTHER**: Other patches have been installed.
        + **MISSING**: A patch is missing.
        + **REJECT**: A patch is rejected.
        + **FAILED**: A patch fails to be installed.
        + **PENDING_REBOOT**: A patch has been installed and is waiting to be restarted.
        """
        return pulumi.get(self, "patch_status")


@pulumi.output_type
class GetPatchComplianceReportsInstanceCompliantResult(dict):
    def __init__(__self__, *,
                 baseline_id: _builtins.str,
                 baseline_name: _builtins.str,
                 cce_info_id: _builtins.str,
                 compliant_summaries: Sequence['outputs.GetPatchComplianceReportsInstanceCompliantCompliantSummaryResult'],
                 eip: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 execution_summaries: Sequence['outputs.GetPatchComplianceReportsInstanceCompliantExecutionSummaryResult'],
                 group: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 ip: _builtins.str,
                 name: _builtins.str,
                 node_id: _builtins.str,
                 non_compliant_summaries: Sequence['outputs.GetPatchComplianceReportsInstanceCompliantNonCompliantSummaryResult'],
                 operating_system: _builtins.str,
                 region: _builtins.str,
                 report_scene: _builtins.str,
                 rule_type: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str baseline_id: Indicates the baseline ID.
        :param _builtins.str baseline_name: Indicates the baseline name.
        :param _builtins.str cce_info_id: Specifies the CCE cluster information ID.
        :param Sequence['GetPatchComplianceReportsInstanceCompliantCompliantSummaryArgs'] compliant_summaries: Indicates the compliance patch information.
        :param _builtins.str eip: Specifies the elastic IP address.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param Sequence['GetPatchComplianceReportsInstanceCompliantExecutionSummaryArgs'] execution_summaries: Indicates the execution information.
        :param _builtins.str group: Specifies the group.
        :param _builtins.str id: Indicates the ID.
        :param _builtins.str instance_id: Specifies the ECS instance ID.
        :param _builtins.str ip: Specifies the internal network IP address.
        :param _builtins.str name: Specifies the name.
        :param _builtins.str node_id: Indicates the CCE cluster node ID.
        :param Sequence['GetPatchComplianceReportsInstanceCompliantNonCompliantSummaryArgs'] non_compliant_summaries: Indicates the non-compliant patch information.
        :param _builtins.str operating_system: Specifies the OS.
               Values can be **HuaweiCloudEulerOS**, **CentOS** and **EulerOS**.
        :param _builtins.str region: Specifies the region.
        :param _builtins.str report_scene: Specifies the report scenario.
               Values can be **CCE** and **ECS**.
        :param _builtins.str rule_type: Indicates the baseline rule type.
        :param _builtins.str status: Indicates the compliance status.
        """
        pulumi.set(__self__, "baseline_id", baseline_id)
        pulumi.set(__self__, "baseline_name", baseline_name)
        pulumi.set(__self__, "cce_info_id", cce_info_id)
        pulumi.set(__self__, "compliant_summaries", compliant_summaries)
        pulumi.set(__self__, "eip", eip)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "execution_summaries", execution_summaries)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "non_compliant_summaries", non_compliant_summaries)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "report_scene", report_scene)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="baselineId")
    def baseline_id(self) -> _builtins.str:
        """
        Indicates the baseline ID.
        """
        return pulumi.get(self, "baseline_id")

    @_builtins.property
    @pulumi.getter(name="baselineName")
    def baseline_name(self) -> _builtins.str:
        """
        Indicates the baseline name.
        """
        return pulumi.get(self, "baseline_name")

    @_builtins.property
    @pulumi.getter(name="cceInfoId")
    def cce_info_id(self) -> _builtins.str:
        """
        Specifies the CCE cluster information ID.
        """
        return pulumi.get(self, "cce_info_id")

    @_builtins.property
    @pulumi.getter(name="compliantSummaries")
    def compliant_summaries(self) -> Sequence['outputs.GetPatchComplianceReportsInstanceCompliantCompliantSummaryResult']:
        """
        Indicates the compliance patch information.
        """
        return pulumi.get(self, "compliant_summaries")

    @_builtins.property
    @pulumi.getter
    def eip(self) -> _builtins.str:
        """
        Specifies the elastic IP address.
        """
        return pulumi.get(self, "eip")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="executionSummaries")
    def execution_summaries(self) -> Sequence['outputs.GetPatchComplianceReportsInstanceCompliantExecutionSummaryResult']:
        """
        Indicates the execution information.
        """
        return pulumi.get(self, "execution_summaries")

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        """
        Specifies the group.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ECS instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Specifies the internal network IP address.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Indicates the CCE cluster node ID.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter(name="nonCompliantSummaries")
    def non_compliant_summaries(self) -> Sequence['outputs.GetPatchComplianceReportsInstanceCompliantNonCompliantSummaryResult']:
        """
        Indicates the non-compliant patch information.
        """
        return pulumi.get(self, "non_compliant_summaries")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> _builtins.str:
        """
        Specifies the OS.
        Values can be **HuaweiCloudEulerOS**, **CentOS** and **EulerOS**.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="reportScene")
    def report_scene(self) -> _builtins.str:
        """
        Specifies the report scenario.
        Values can be **CCE** and **ECS**.
        """
        return pulumi.get(self, "report_scene")

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> _builtins.str:
        """
        Indicates the baseline rule type.
        """
        return pulumi.get(self, "rule_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the compliance status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetPatchComplianceReportsInstanceCompliantCompliantSummaryResult(dict):
    def __init__(__self__, *,
                 compliant_count: _builtins.int,
                 severity_summaries: Sequence['outputs.GetPatchComplianceReportsInstanceCompliantCompliantSummarySeveritySummaryResult']):
        """
        :param _builtins.int compliant_count: Indicates the number of compliant patches.
        :param Sequence['GetPatchComplianceReportsInstanceCompliantCompliantSummarySeveritySummaryArgs'] severity_summaries: Indicates the compliance summary.
        """
        pulumi.set(__self__, "compliant_count", compliant_count)
        pulumi.set(__self__, "severity_summaries", severity_summaries)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.int:
        """
        Indicates the number of compliant patches.
        """
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="severitySummaries")
    def severity_summaries(self) -> Sequence['outputs.GetPatchComplianceReportsInstanceCompliantCompliantSummarySeveritySummaryResult']:
        """
        Indicates the compliance summary.
        """
        return pulumi.get(self, "severity_summaries")


@pulumi.output_type
class GetPatchComplianceReportsInstanceCompliantCompliantSummarySeveritySummaryResult(dict):
    def __init__(__self__, *,
                 critical_count: _builtins.int,
                 high_count: _builtins.int,
                 informational_count: _builtins.int,
                 low_count: _builtins.int,
                 medium_count: _builtins.int,
                 unspecified_count: _builtins.int):
        """
        :param _builtins.int critical_count: Indicates the number of major compliance reports.
        :param _builtins.int high_count: Indicates the number of high compliance reports.
        :param _builtins.int informational_count: Indicates the number of informational compliance reports.
        :param _builtins.int low_count: Indicates the number of low compliance reports.
        :param _builtins.int medium_count: Indicates the number of medium compliance reports.
        :param _builtins.int unspecified_count: Indicates the number of unspecified compliance reports.
        """
        pulumi.set(__self__, "critical_count", critical_count)
        pulumi.set(__self__, "high_count", high_count)
        pulumi.set(__self__, "informational_count", informational_count)
        pulumi.set(__self__, "low_count", low_count)
        pulumi.set(__self__, "medium_count", medium_count)
        pulumi.set(__self__, "unspecified_count", unspecified_count)

    @_builtins.property
    @pulumi.getter(name="criticalCount")
    def critical_count(self) -> _builtins.int:
        """
        Indicates the number of major compliance reports.
        """
        return pulumi.get(self, "critical_count")

    @_builtins.property
    @pulumi.getter(name="highCount")
    def high_count(self) -> _builtins.int:
        """
        Indicates the number of high compliance reports.
        """
        return pulumi.get(self, "high_count")

    @_builtins.property
    @pulumi.getter(name="informationalCount")
    def informational_count(self) -> _builtins.int:
        """
        Indicates the number of informational compliance reports.
        """
        return pulumi.get(self, "informational_count")

    @_builtins.property
    @pulumi.getter(name="lowCount")
    def low_count(self) -> _builtins.int:
        """
        Indicates the number of low compliance reports.
        """
        return pulumi.get(self, "low_count")

    @_builtins.property
    @pulumi.getter(name="mediumCount")
    def medium_count(self) -> _builtins.int:
        """
        Indicates the number of medium compliance reports.
        """
        return pulumi.get(self, "medium_count")

    @_builtins.property
    @pulumi.getter(name="unspecifiedCount")
    def unspecified_count(self) -> _builtins.int:
        """
        Indicates the number of unspecified compliance reports.
        """
        return pulumi.get(self, "unspecified_count")


@pulumi.output_type
class GetPatchComplianceReportsInstanceCompliantExecutionSummaryResult(dict):
    def __init__(__self__, *,
                 job_id: _builtins.str,
                 order_id: _builtins.str,
                 report_time: _builtins.int):
        """
        :param _builtins.str job_id: Indicates the script execution ID.
        :param _builtins.str order_id: Specifies the service ticket ID.
        :param _builtins.int report_time: Indicates the reporting time.
        """
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "report_time", report_time)

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        Indicates the script execution ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        Specifies the service ticket ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="reportTime")
    def report_time(self) -> _builtins.int:
        """
        Indicates the reporting time.
        """
        return pulumi.get(self, "report_time")


@pulumi.output_type
class GetPatchComplianceReportsInstanceCompliantNonCompliantSummaryResult(dict):
    def __init__(__self__, *,
                 non_compliant_count: _builtins.int,
                 severity_summaries: Sequence['outputs.GetPatchComplianceReportsInstanceCompliantNonCompliantSummarySeveritySummaryResult']):
        """
        :param _builtins.int non_compliant_count: Indicates the number of non-compliant patches.
        :param Sequence['GetPatchComplianceReportsInstanceCompliantNonCompliantSummarySeveritySummaryArgs'] severity_summaries: Indicates the compliance summary.
        """
        pulumi.set(__self__, "non_compliant_count", non_compliant_count)
        pulumi.set(__self__, "severity_summaries", severity_summaries)

    @_builtins.property
    @pulumi.getter(name="nonCompliantCount")
    def non_compliant_count(self) -> _builtins.int:
        """
        Indicates the number of non-compliant patches.
        """
        return pulumi.get(self, "non_compliant_count")

    @_builtins.property
    @pulumi.getter(name="severitySummaries")
    def severity_summaries(self) -> Sequence['outputs.GetPatchComplianceReportsInstanceCompliantNonCompliantSummarySeveritySummaryResult']:
        """
        Indicates the compliance summary.
        """
        return pulumi.get(self, "severity_summaries")


@pulumi.output_type
class GetPatchComplianceReportsInstanceCompliantNonCompliantSummarySeveritySummaryResult(dict):
    def __init__(__self__, *,
                 critical_count: _builtins.int,
                 high_count: _builtins.int,
                 informational_count: _builtins.int,
                 low_count: _builtins.int,
                 medium_count: _builtins.int,
                 unspecified_count: _builtins.int):
        """
        :param _builtins.int critical_count: Indicates the number of major compliance reports.
        :param _builtins.int high_count: Indicates the number of high compliance reports.
        :param _builtins.int informational_count: Indicates the number of informational compliance reports.
        :param _builtins.int low_count: Indicates the number of low compliance reports.
        :param _builtins.int medium_count: Indicates the number of medium compliance reports.
        :param _builtins.int unspecified_count: Indicates the number of unspecified compliance reports.
        """
        pulumi.set(__self__, "critical_count", critical_count)
        pulumi.set(__self__, "high_count", high_count)
        pulumi.set(__self__, "informational_count", informational_count)
        pulumi.set(__self__, "low_count", low_count)
        pulumi.set(__self__, "medium_count", medium_count)
        pulumi.set(__self__, "unspecified_count", unspecified_count)

    @_builtins.property
    @pulumi.getter(name="criticalCount")
    def critical_count(self) -> _builtins.int:
        """
        Indicates the number of major compliance reports.
        """
        return pulumi.get(self, "critical_count")

    @_builtins.property
    @pulumi.getter(name="highCount")
    def high_count(self) -> _builtins.int:
        """
        Indicates the number of high compliance reports.
        """
        return pulumi.get(self, "high_count")

    @_builtins.property
    @pulumi.getter(name="informationalCount")
    def informational_count(self) -> _builtins.int:
        """
        Indicates the number of informational compliance reports.
        """
        return pulumi.get(self, "informational_count")

    @_builtins.property
    @pulumi.getter(name="lowCount")
    def low_count(self) -> _builtins.int:
        """
        Indicates the number of low compliance reports.
        """
        return pulumi.get(self, "low_count")

    @_builtins.property
    @pulumi.getter(name="mediumCount")
    def medium_count(self) -> _builtins.int:
        """
        Indicates the number of medium compliance reports.
        """
        return pulumi.get(self, "medium_count")

    @_builtins.property
    @pulumi.getter(name="unspecifiedCount")
    def unspecified_count(self) -> _builtins.int:
        """
        Indicates the number of unspecified compliance reports.
        """
        return pulumi.get(self, "unspecified_count")


@pulumi.output_type
class GetPublicScriptDetailPropertyResult(dict):
    def __init__(__self__, *,
                 risk_level: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str risk_level: Indicates the risk level.
        :param _builtins.str version: Indicates the script version number.
        """
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> _builtins.str:
        """
        Indicates the risk level.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the script version number.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPublicScriptDetailScriptParamResult(dict):
    def __init__(__self__, *,
                 param_description: _builtins.str,
                 param_name: _builtins.str,
                 param_order: _builtins.int,
                 param_value: _builtins.str,
                 sensitive: _builtins.bool):
        """
        :param _builtins.str param_description: Indicates the parameter description.
        :param _builtins.str param_name: Indicates the parameter name.
        :param _builtins.int param_order: Indicates the order of parameters.
        :param _builtins.str param_value: Indicates the parameter value.
        :param _builtins.bool sensitive: Indicates whether it is a sensitive parameter.
        """
        pulumi.set(__self__, "param_description", param_description)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "param_order", param_order)
        pulumi.set(__self__, "param_value", param_value)
        pulumi.set(__self__, "sensitive", sensitive)

    @_builtins.property
    @pulumi.getter(name="paramDescription")
    def param_description(self) -> _builtins.str:
        """
        Indicates the parameter description.
        """
        return pulumi.get(self, "param_description")

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> _builtins.str:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "param_name")

    @_builtins.property
    @pulumi.getter(name="paramOrder")
    def param_order(self) -> _builtins.int:
        """
        Indicates the order of parameters.
        """
        return pulumi.get(self, "param_order")

    @_builtins.property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> _builtins.str:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "param_value")

    @_builtins.property
    @pulumi.getter
    def sensitive(self) -> _builtins.bool:
        """
        Indicates whether it is a sensitive parameter.
        """
        return pulumi.get(self, "sensitive")


@pulumi.output_type
class GetPublicScriptsDataResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 gmt_created: _builtins.int,
                 id: _builtins.int,
                 name: _builtins.str,
                 properties: Sequence['outputs.GetPublicScriptsDataPropertyResult'],
                 script_uuid: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str description: Indicates the script description.
        :param _builtins.int gmt_created: Indicates the creation time.
        :param _builtins.int id: Indicates the auto-increment ID of a script.
        :param _builtins.str name: Specifies the script name.
        :param Sequence['GetPublicScriptsDataPropertyArgs'] properties: Indicates the script additional properties.
        :param _builtins.str script_uuid: Indicates the script UUID.
        :param _builtins.str type: Specifies the script type.
               Values can be as follows:
               + **SHELL**: Shell script.
               + **PYTHON**: Python script.
               + **BAT**: Bat script.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "gmt_created", gmt_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "script_uuid", script_uuid)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the script description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="gmtCreated")
    def gmt_created(self) -> _builtins.int:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "gmt_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Indicates the auto-increment ID of a script.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the script name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetPublicScriptsDataPropertyResult']:
        """
        Indicates the script additional properties.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="scriptUuid")
    def script_uuid(self) -> _builtins.str:
        """
        Indicates the script UUID.
        """
        return pulumi.get(self, "script_uuid")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the script type.
        Values can be as follows:
        + **SHELL**: Shell script.
        + **PYTHON**: Python script.
        + **BAT**: Bat script.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPublicScriptsDataPropertyResult(dict):
    def __init__(__self__, *,
                 risk_level: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str risk_level: Specifies the risk level.
               Values can be as follows:
               + **LOW**: Low risk.
               + **MEDIUM**: Medium risk.
               + **HIGH**: High risk.
        :param _builtins.str version: Indicates the script version number.
        """
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> _builtins.str:
        """
        Specifies the risk level.
        Values can be as follows:
        + **LOW**: Low risk.
        + **MEDIUM**: Medium risk.
        + **HIGH**: High risk.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the script version number.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetResourcesDataResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 agent_state: _builtins.str,
                 cloud_service_name: _builtins.str,
                 domain_id: _builtins.str,
                 ep_id: _builtins.str,
                 id: _builtins.str,
                 ingest_properties: Mapping[str, _builtins.str],
                 is_delegated: _builtins.bool,
                 name: _builtins.str,
                 operable: _builtins.str,
                 project_id: _builtins.str,
                 properties: Mapping[str, _builtins.str],
                 region_id: _builtins.str,
                 resource_id: _builtins.str,
                 tags: Sequence['outputs.GetResourcesDataTagResult'],
                 type: _builtins.str):
        """
        :param _builtins.str agent_id: Indicates the ID assigned by unified agent.
        :param _builtins.str agent_state: Specifies the unified agent status.
        :param _builtins.str cloud_service_name: Specifies the cloud service name.
        :param _builtins.str domain_id: Indicates the tenant ID.
        :param _builtins.str ep_id: Specifies the enterprise project ID.
        :param _builtins.str id: Indicates the resource ID assigned by the CMDB.
        :param Mapping[str, _builtins.str] ingest_properties: Indicates the ingest attributes of the resource.
        :param _builtins.bool is_delegated: Specifies whether the resource is delegated.
        :param _builtins.str name: Specifies the cloud resource name.
        :param _builtins.str operable: Specifies whether the user defined resource can operate the instance. If the value
               is **enable**, it is enabled; if the current field does not exist, it is not enabled.
        :param _builtins.str project_id: Specifies the project ID.
        :param Mapping[str, _builtins.str] properties: Indicates the resource properties.
        :param _builtins.str region_id: Specifies the region ID.
        :param _builtins.str resource_id: Indicates the resource ID.
        :param Sequence['GetResourcesDataTagArgs'] tags: Indicates the resource tags.
        :param _builtins.str type: Specifies the resource type name.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "agent_state", agent_state)
        pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "ep_id", ep_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingest_properties", ingest_properties)
        pulumi.set(__self__, "is_delegated", is_delegated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operable", operable)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        Indicates the ID assigned by unified agent.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="agentState")
    def agent_state(self) -> _builtins.str:
        """
        Specifies the unified agent status.
        """
        return pulumi.get(self, "agent_state")

    @_builtins.property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> _builtins.str:
        """
        Specifies the cloud service name.
        """
        return pulumi.get(self, "cloud_service_name")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        Indicates the tenant ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="epId")
    def ep_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "ep_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the resource ID assigned by the CMDB.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ingestProperties")
    def ingest_properties(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the ingest attributes of the resource.
        """
        return pulumi.get(self, "ingest_properties")

    @_builtins.property
    @pulumi.getter(name="isDelegated")
    def is_delegated(self) -> _builtins.bool:
        """
        Specifies whether the resource is delegated.
        """
        return pulumi.get(self, "is_delegated")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the cloud resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def operable(self) -> _builtins.str:
        """
        Specifies whether the user defined resource can operate the instance. If the value
        is **enable**, it is enabled; if the current field does not exist, it is not enabled.
        """
        return pulumi.get(self, "operable")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Specifies the project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the resource properties.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Specifies the region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Indicates the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetResourcesDataTagResult']:
        """
        Indicates the resource tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type name.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResourcesDataTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Indicates the key of the tag.
        :param _builtins.str value: Indicates the value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetScriptOrderBatchDetailsExecuteInstanceResult(dict):
    def __init__(__self__, *,
                 execute_costs: _builtins.int,
                 gmt_created: _builtins.int,
                 gmt_finished: _builtins.int,
                 id: _builtins.int,
                 message: _builtins.str,
                 status: _builtins.str,
                 target_instances: Sequence['outputs.GetScriptOrderBatchDetailsExecuteInstanceTargetInstanceResult']):
        """
        :param _builtins.int execute_costs: Indicates the time consumed in seconds.
        :param _builtins.int gmt_created: Indicates the creation time.
        :param _builtins.int gmt_finished: Indicates the completion time.
        :param _builtins.int id: Indicates the primary key ID.
        :param _builtins.str message: Indicates the instance execution logs.
        :param _builtins.str status: Specifies instance execution status.
               Values can be as follows:
               + **READY**: The operation is to be performed.
               + **PROCESSING**: The operation is in progress.
               + **ABNORMAL**: Abnormal.
               + **CANCELED**: Canceled.
               + **FINISHED**: Success.
        :param Sequence['GetScriptOrderBatchDetailsExecuteInstanceTargetInstanceArgs'] target_instances: Indicates the destination instance.
        """
        pulumi.set(__self__, "execute_costs", execute_costs)
        pulumi.set(__self__, "gmt_created", gmt_created)
        pulumi.set(__self__, "gmt_finished", gmt_finished)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_instances", target_instances)

    @_builtins.property
    @pulumi.getter(name="executeCosts")
    def execute_costs(self) -> _builtins.int:
        """
        Indicates the time consumed in seconds.
        """
        return pulumi.get(self, "execute_costs")

    @_builtins.property
    @pulumi.getter(name="gmtCreated")
    def gmt_created(self) -> _builtins.int:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "gmt_created")

    @_builtins.property
    @pulumi.getter(name="gmtFinished")
    def gmt_finished(self) -> _builtins.int:
        """
        Indicates the completion time.
        """
        return pulumi.get(self, "gmt_finished")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Indicates the primary key ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Indicates the instance execution logs.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies instance execution status.
        Values can be as follows:
        + **READY**: The operation is to be performed.
        + **PROCESSING**: The operation is in progress.
        + **ABNORMAL**: Abnormal.
        + **CANCELED**: Canceled.
        + **FINISHED**: Success.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="targetInstances")
    def target_instances(self) -> Sequence['outputs.GetScriptOrderBatchDetailsExecuteInstanceTargetInstanceResult']:
        """
        Indicates the destination instance.
        """
        return pulumi.get(self, "target_instances")


@pulumi.output_type
class GetScriptOrderBatchDetailsExecuteInstanceTargetInstanceResult(dict):
    def __init__(__self__, *,
                 agent_sn: _builtins.str,
                 agent_status: _builtins.str,
                 custom_attributes: Sequence['outputs.GetScriptOrderBatchDetailsExecuteInstanceTargetInstanceCustomAttributeResult'],
                 properties: Sequence['outputs.GetScriptOrderBatchDetailsExecuteInstanceTargetInstancePropertyResult'],
                 provider: _builtins.str,
                 region_id: _builtins.str,
                 resource_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str agent_sn: Indicates the agent management ID.
        :param _builtins.str agent_status: Indicates the agent management status.
        :param Sequence['GetScriptOrderBatchDetailsExecuteInstanceTargetInstanceCustomAttributeArgs'] custom_attributes: Indicates that users are allowed to customize five attributes in the key/value format.
        :param Sequence['GetScriptOrderBatchDetailsExecuteInstanceTargetInstancePropertyArgs'] properties: Indicates the additional attributes of the host.
        :param _builtins.str provider: Indicates the resource provider.
        :param _builtins.str region_id: Indicates the regions.
        :param _builtins.str resource_id: Indicates the unique ID of an instance.
        :param _builtins.str type: Indicates the resource type of the resource provider.
               Values can be as follows:
               + **CLOUDSERVER**: Indicates the cloud server type.
        """
        pulumi.set(__self__, "agent_sn", agent_sn)
        pulumi.set(__self__, "agent_status", agent_status)
        pulumi.set(__self__, "custom_attributes", custom_attributes)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="agentSn")
    def agent_sn(self) -> _builtins.str:
        """
        Indicates the agent management ID.
        """
        return pulumi.get(self, "agent_sn")

    @_builtins.property
    @pulumi.getter(name="agentStatus")
    def agent_status(self) -> _builtins.str:
        """
        Indicates the agent management status.
        """
        return pulumi.get(self, "agent_status")

    @_builtins.property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Sequence['outputs.GetScriptOrderBatchDetailsExecuteInstanceTargetInstanceCustomAttributeResult']:
        """
        Indicates that users are allowed to customize five attributes in the key/value format.
        """
        return pulumi.get(self, "custom_attributes")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetScriptOrderBatchDetailsExecuteInstanceTargetInstancePropertyResult']:
        """
        Indicates the additional attributes of the host.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def provider(self) -> _builtins.str:
        """
        Indicates the resource provider.
        """
        return pulumi.get(self, "provider")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Indicates the regions.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Indicates the unique ID of an instance.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the resource type of the resource provider.
        Values can be as follows:
        + **CLOUDSERVER**: Indicates the cloud server type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetScriptOrderBatchDetailsExecuteInstanceTargetInstanceCustomAttributeResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Indicates the user-defined attribute key.
        :param _builtins.str value: Indicates the value of a custom property.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the user-defined attribute key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the value of a custom property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetScriptOrderBatchDetailsExecuteInstanceTargetInstancePropertyResult(dict):
    def __init__(__self__, *,
                 application: _builtins.str,
                 fixed_ip: _builtins.str,
                 floating_ip: _builtins.str,
                 group: _builtins.str,
                 host_name: _builtins.str,
                 project_id: _builtins.str,
                 region_id: _builtins.str,
                 zone_id: _builtins.str):
        """
        :param _builtins.str application: Indicates the CMDB application.
        :param _builtins.str fixed_ip: Indicates the internal network IP address.
        :param _builtins.str floating_ip: Indicates the elastic IP address.
        :param _builtins.str group: Indicates the CMDB group.
        :param _builtins.str host_name: Indicates the host name.
        :param _builtins.str project_id: Indicates the project ID of an instance.
        :param _builtins.str region_id: Indicates the regions.
        :param _builtins.str zone_id: Indicates the availability zone.
        """
        pulumi.set(__self__, "application", application)
        pulumi.set(__self__, "fixed_ip", fixed_ip)
        pulumi.set(__self__, "floating_ip", floating_ip)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter
    def application(self) -> _builtins.str:
        """
        Indicates the CMDB application.
        """
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> _builtins.str:
        """
        Indicates the internal network IP address.
        """
        return pulumi.get(self, "fixed_ip")

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> _builtins.str:
        """
        Indicates the elastic IP address.
        """
        return pulumi.get(self, "floating_ip")

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        """
        Indicates the CMDB group.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Indicates the host name.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the project ID of an instance.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Indicates the regions.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        """
        Indicates the availability zone.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetScriptOrderBatchesDataResult(dict):
    def __init__(__self__, *,
                 batch_index: _builtins.int,
                 properties: _builtins.str,
                 rotation_strategy: _builtins.str,
                 total_instances: _builtins.int):
        """
        :param _builtins.int batch_index: Indicates the batch index.
        :param _builtins.str properties: Indicates the batch label.
        :param _builtins.str rotation_strategy: Indicates suspension and resumption policy.
        :param _builtins.int total_instances: Indicates the number of instance nodes in the batch.
        """
        pulumi.set(__self__, "batch_index", batch_index)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "rotation_strategy", rotation_strategy)
        pulumi.set(__self__, "total_instances", total_instances)

    @_builtins.property
    @pulumi.getter(name="batchIndex")
    def batch_index(self) -> _builtins.int:
        """
        Indicates the batch index.
        """
        return pulumi.get(self, "batch_index")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> _builtins.str:
        """
        Indicates the batch label.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="rotationStrategy")
    def rotation_strategy(self) -> _builtins.str:
        """
        Indicates suspension and resumption policy.
        """
        return pulumi.get(self, "rotation_strategy")

    @_builtins.property
    @pulumi.getter(name="totalInstances")
    def total_instances(self) -> _builtins.int:
        """
        Indicates the number of instance nodes in the batch.
        """
        return pulumi.get(self, "total_instances")


@pulumi.output_type
class GetScriptOrderStatisticsExecuteStatisticResult(dict):
    def __init__(__self__, *,
                 batch_indexes: Sequence[_builtins.int],
                 instance_count: _builtins.int,
                 instance_status: _builtins.str):
        """
        :param Sequence[_builtins.int] batch_indexes: Indicates a list of batch indexes in this state.
        :param _builtins.int instance_count: Indicates the number of instances executed in this state.
        :param _builtins.str instance_status: Indicates the status of the execution instance.
        """
        pulumi.set(__self__, "batch_indexes", batch_indexes)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_status", instance_status)

    @_builtins.property
    @pulumi.getter(name="batchIndexes")
    def batch_indexes(self) -> Sequence[_builtins.int]:
        """
        Indicates a list of batch indexes in this state.
        """
        return pulumi.get(self, "batch_indexes")

    @_builtins.property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> _builtins.int:
        """
        Indicates the number of instances executed in this state.
        """
        return pulumi.get(self, "instance_count")

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> _builtins.str:
        """
        Indicates the status of the execution instance.
        """
        return pulumi.get(self, "instance_status")


@pulumi.output_type
class GetScriptOrdersDataResult(dict):
    def __init__(__self__, *,
                 creator: _builtins.str,
                 execute_costs: _builtins.int,
                 execute_uuid: _builtins.str,
                 gmt_created: _builtins.int,
                 gmt_finished: _builtins.int,
                 order_id: _builtins.int,
                 order_name: _builtins.str,
                 properties: Sequence['outputs.GetScriptOrdersDataPropertyResult'],
                 status: _builtins.str):
        """
        :param _builtins.str creator: Specifies the creator.
        :param _builtins.int execute_costs: Indicates the execution duration in seconds.
        :param _builtins.str execute_uuid: Indicates this UUID is used when the list is redirected to the details page.
        :param _builtins.int gmt_created: Indicates the creation time.
        :param _builtins.int gmt_finished: Indicates the completion time.
        :param _builtins.int order_id: Indicates the primary key ID.
        :param _builtins.str order_name: Indicates the script order name.
        :param Sequence['GetScriptOrdersDataPropertyArgs'] properties: Indicates the label.
        :param _builtins.str status: Specifies the script order status.
               Values can be as follows:
               + **READY**: Prepare.
               + **PROCESSING**: The operation is in progress.
               + **ABNORMAL**: Abnormal.
               + **PAUSED**: Paused.
               + **CANCELED**: Canceled.
               + **FINISHED**: Success.
        """
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "execute_costs", execute_costs)
        pulumi.set(__self__, "execute_uuid", execute_uuid)
        pulumi.set(__self__, "gmt_created", gmt_created)
        pulumi.set(__self__, "gmt_finished", gmt_finished)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "order_name", order_name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        Specifies the creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="executeCosts")
    def execute_costs(self) -> _builtins.int:
        """
        Indicates the execution duration in seconds.
        """
        return pulumi.get(self, "execute_costs")

    @_builtins.property
    @pulumi.getter(name="executeUuid")
    def execute_uuid(self) -> _builtins.str:
        """
        Indicates this UUID is used when the list is redirected to the details page.
        """
        return pulumi.get(self, "execute_uuid")

    @_builtins.property
    @pulumi.getter(name="gmtCreated")
    def gmt_created(self) -> _builtins.int:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "gmt_created")

    @_builtins.property
    @pulumi.getter(name="gmtFinished")
    def gmt_finished(self) -> _builtins.int:
        """
        Indicates the completion time.
        """
        return pulumi.get(self, "gmt_finished")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.int:
        """
        Indicates the primary key ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="orderName")
    def order_name(self) -> _builtins.str:
        """
        Indicates the script order name.
        """
        return pulumi.get(self, "order_name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetScriptOrdersDataPropertyResult']:
        """
        Indicates the label.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the script order status.
        Values can be as follows:
        + **READY**: Prepare.
        + **PROCESSING**: The operation is in progress.
        + **ABNORMAL**: Abnormal.
        + **PAUSED**: Paused.
        + **CANCELED**: Canceled.
        + **FINISHED**: Success.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetScriptOrdersDataPropertyResult(dict):
    def __init__(__self__, *,
                 region_ids: _builtins.str):
        """
        :param _builtins.str region_ids: Indicates the region ID of the Cloud CMDB service instance.
        """
        pulumi.set(__self__, "region_ids", region_ids)

    @_builtins.property
    @pulumi.getter(name="regionIds")
    def region_ids(self) -> _builtins.str:
        """
        Indicates the region ID of the Cloud CMDB service instance.
        """
        return pulumi.get(self, "region_ids")


@pulumi.output_type
class GetScriptsDataResult(dict):
    def __init__(__self__, *,
                 creator: _builtins.str,
                 creator_id: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 gmt_created: _builtins.int,
                 gmt_modified: _builtins.int,
                 id: _builtins.int,
                 name: _builtins.str,
                 operator: _builtins.str,
                 properties: Sequence['outputs.GetScriptsDataPropertyResult'],
                 resource_tags: Sequence['outputs.GetScriptsDataResourceTagResult'],
                 script_uuid: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 usage_count: _builtins.int):
        """
        :param _builtins.str creator: Specifies the creator.
        :param _builtins.str creator_id: Indicates the creator ID.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
        :param _builtins.int gmt_created: Indicates the creation time.
        :param _builtins.int gmt_modified: Indicates the modification time.
        :param _builtins.int id: Indicates the script ID.
        :param _builtins.str name: Indicates the script name.
        :param _builtins.str operator: Indicates the modifier.
        :param Sequence['GetScriptsDataPropertyArgs'] properties: Indicates the script label.
        :param Sequence['GetScriptsDataResourceTagArgs'] resource_tags: Indicates the resource tags.
        :param _builtins.str script_uuid: Indicates the script UUID.
        :param _builtins.str status: Indicates the script status.
               Values can be as follows:
               + **PENDING_APPROVE**: To be approved.
               + **APPROVED**: Normal (approved).
               + **REJECTED**: Rejected (indicates that the script is rejected by the approver).
        :param _builtins.str type: Specifies the script type.
               Values can be as follows:
               + **SHELL**: Shell script.
               + **PYTHON**: Python script.
               + **BAT**: Bat script.
        :param _builtins.int usage_count: Indicates the usage count.
        """
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "creator_id", creator_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "gmt_created", gmt_created)
        pulumi.set(__self__, "gmt_modified", gmt_modified)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "resource_tags", resource_tags)
        pulumi.set(__self__, "script_uuid", script_uuid)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "usage_count", usage_count)

    @_builtins.property
    @pulumi.getter
    def creator(self) -> _builtins.str:
        """
        Specifies the creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> _builtins.str:
        """
        Indicates the creator ID.
        """
        return pulumi.get(self, "creator_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gmtCreated")
    def gmt_created(self) -> _builtins.int:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "gmt_created")

    @_builtins.property
    @pulumi.getter(name="gmtModified")
    def gmt_modified(self) -> _builtins.int:
        """
        Indicates the modification time.
        """
        return pulumi.get(self, "gmt_modified")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Indicates the script ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the script name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Indicates the modifier.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetScriptsDataPropertyResult']:
        """
        Indicates the script label.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Sequence['outputs.GetScriptsDataResourceTagResult']:
        """
        Indicates the resource tags.
        """
        return pulumi.get(self, "resource_tags")

    @_builtins.property
    @pulumi.getter(name="scriptUuid")
    def script_uuid(self) -> _builtins.str:
        """
        Indicates the script UUID.
        """
        return pulumi.get(self, "script_uuid")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the script status.
        Values can be as follows:
        + **PENDING_APPROVE**: To be approved.
        + **APPROVED**: Normal (approved).
        + **REJECTED**: Rejected (indicates that the script is rejected by the approver).
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the script type.
        Values can be as follows:
        + **SHELL**: Shell script.
        + **PYTHON**: Python script.
        + **BAT**: Bat script.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="usageCount")
    def usage_count(self) -> _builtins.int:
        """
        Indicates the usage count.
        """
        return pulumi.get(self, "usage_count")


@pulumi.output_type
class GetScriptsDataPropertyResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 reviewers: Sequence['outputs.GetScriptsDataPropertyReviewerResult'],
                 risk_level: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str protocol: Indicates the approval message notification agreement, which is used to notify approvers.
               Values can be as follows:
               + **DEFAULT**: Default value.
               + **SMS**: Sms.
               + **EMAIL**: Email.
               + **DING_TALK**: DingTalk.
               + **WE_LINK**: WeLink.
               + **WECHAT**: WeChat.
               + **CALLNOTIFY**: Voice.
               + **NOT_TO_NOTIFY**: Not notify.
        :param Sequence['GetScriptsDataPropertyReviewerArgs'] reviewers: Indicates the reviewers.
        :param _builtins.str risk_level: Specifies the risk level.
               Values can be as follows:
               + **LOW**: Low risk.
               + **MEDIUM**: Medium risk.
               + **HIGH**: High risk.
        :param _builtins.str version: Indicates the script version number.
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "reviewers", reviewers)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Indicates the approval message notification agreement, which is used to notify approvers.
        Values can be as follows:
        + **DEFAULT**: Default value.
        + **SMS**: Sms.
        + **EMAIL**: Email.
        + **DING_TALK**: DingTalk.
        + **WE_LINK**: WeLink.
        + **WECHAT**: WeChat.
        + **CALLNOTIFY**: Voice.
        + **NOT_TO_NOTIFY**: Not notify.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def reviewers(self) -> Sequence['outputs.GetScriptsDataPropertyReviewerResult']:
        """
        Indicates the reviewers.
        """
        return pulumi.get(self, "reviewers")

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> _builtins.str:
        """
        Specifies the risk level.
        Values can be as follows:
        + **LOW**: Low risk.
        + **MEDIUM**: Medium risk.
        + **HIGH**: High risk.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the script version number.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetScriptsDataPropertyReviewerResult(dict):
    def __init__(__self__, *,
                 reviewer_id: _builtins.str,
                 reviewer_name: _builtins.str):
        """
        :param _builtins.str reviewer_id: Indicates the reviewer ID (IAM user ID).
        :param _builtins.str reviewer_name: Indicates the reviewer name (IAM username).
        """
        pulumi.set(__self__, "reviewer_id", reviewer_id)
        pulumi.set(__self__, "reviewer_name", reviewer_name)

    @_builtins.property
    @pulumi.getter(name="reviewerId")
    def reviewer_id(self) -> _builtins.str:
        """
        Indicates the reviewer ID (IAM user ID).
        """
        return pulumi.get(self, "reviewer_id")

    @_builtins.property
    @pulumi.getter(name="reviewerName")
    def reviewer_name(self) -> _builtins.str:
        """
        Indicates the reviewer name (IAM username).
        """
        return pulumi.get(self, "reviewer_name")


@pulumi.output_type
class GetScriptsDataResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Indicates the resource tag key.
        :param _builtins.str value: Indicates the resource tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the resource tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the resource tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWarRoomsListResult(dict):
    def __init__(__self__, *,
                 admin: _builtins.str,
                 change_num: _builtins.str,
                 circular_level: _builtins.str,
                 create_time: _builtins.int,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 fault_cause: _builtins.str,
                 fault_impact: _builtins.str,
                 first_report_time: _builtins.int,
                 id: _builtins.str,
                 impacted_applications: Sequence['outputs.GetWarRoomsListImpactedApplicationResult'],
                 incidents: Sequence['outputs.GetWarRoomsListIncidentResult'],
                 occur_time: _builtins.int,
                 processing_duration: _builtins.int,
                 recover_leaders: Sequence[_builtins.str],
                 recover_members: Sequence[_builtins.str],
                 recover_time: _builtins.int,
                 recovery_notification_time: _builtins.int,
                 regions: Sequence['outputs.GetWarRoomsListRegionResult'],
                 restoration_duration: _builtins.int,
                 source: _builtins.str,
                 title: _builtins.str,
                 war_room_num: _builtins.str,
                 war_room_statuses: Sequence['outputs.GetWarRoomsListWarRoomStatusResult']):
        """
        :param _builtins.str admin: Specifies the war room administrator user ID.
        :param _builtins.str change_num: Indicates the change ticket number.
        :param _builtins.str circular_level: Indicates the notification level. The notification level is the same as the incident level in the
               tenant zone.
        :param _builtins.int create_time: Indicates the creation time.
        :param _builtins.str description: Indicates the war room description.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project ID.
        :param _builtins.str fault_cause: Indicates the fault cause.
        :param _builtins.str fault_impact: Indicates the impact of the fault.
        :param _builtins.int first_report_time: Indicates the first notification time.
        :param _builtins.str id: Indicates the affected application primary key.
        :param Sequence['GetWarRoomsListImpactedApplicationArgs'] impacted_applications: Indicates the affected applications.
        :param Sequence['GetWarRoomsListIncidentArgs'] incidents: Indicates the incident.
        :param _builtins.int occur_time: Indicates the occurrence start time.
        :param _builtins.int processing_duration: Indicates the handling duration, the unit is minutes.
        :param Sequence[_builtins.str] recover_leaders: Indicates the primary recovery owner.
        :param Sequence[_builtins.str] recover_members: Indicates the members of recovery.
        :param _builtins.int recover_time: Indicates the fault recovery time.
        :param _builtins.int recovery_notification_time: Indicates the recovery notification time.
        :param Sequence['GetWarRoomsListRegionArgs'] regions: Indicates the affected regions.
        :param _builtins.int restoration_duration: Indicates the recovery duration, the unit is minutes.
        :param _builtins.str source: Indicates the incident source.
        :param _builtins.str title: Specifies the war room name.
        :param _builtins.str war_room_num: Specifies the war room ticket number.
        :param Sequence['GetWarRoomsListWarRoomStatusArgs'] war_room_statuses: Indicates the war room status.
        """
        pulumi.set(__self__, "admin", admin)
        pulumi.set(__self__, "change_num", change_num)
        pulumi.set(__self__, "circular_level", circular_level)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "fault_cause", fault_cause)
        pulumi.set(__self__, "fault_impact", fault_impact)
        pulumi.set(__self__, "first_report_time", first_report_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "impacted_applications", impacted_applications)
        pulumi.set(__self__, "incidents", incidents)
        pulumi.set(__self__, "occur_time", occur_time)
        pulumi.set(__self__, "processing_duration", processing_duration)
        pulumi.set(__self__, "recover_leaders", recover_leaders)
        pulumi.set(__self__, "recover_members", recover_members)
        pulumi.set(__self__, "recover_time", recover_time)
        pulumi.set(__self__, "recovery_notification_time", recovery_notification_time)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "restoration_duration", restoration_duration)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "war_room_num", war_room_num)
        pulumi.set(__self__, "war_room_statuses", war_room_statuses)

    @_builtins.property
    @pulumi.getter
    def admin(self) -> _builtins.str:
        """
        Specifies the war room administrator user ID.
        """
        return pulumi.get(self, "admin")

    @_builtins.property
    @pulumi.getter(name="changeNum")
    def change_num(self) -> _builtins.str:
        """
        Indicates the change ticket number.
        """
        return pulumi.get(self, "change_num")

    @_builtins.property
    @pulumi.getter(name="circularLevel")
    def circular_level(self) -> _builtins.str:
        """
        Indicates the notification level. The notification level is the same as the incident level in the
        tenant zone.
        """
        return pulumi.get(self, "circular_level")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.int:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the war room description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="faultCause")
    def fault_cause(self) -> _builtins.str:
        """
        Indicates the fault cause.
        """
        return pulumi.get(self, "fault_cause")

    @_builtins.property
    @pulumi.getter(name="faultImpact")
    def fault_impact(self) -> _builtins.str:
        """
        Indicates the impact of the fault.
        """
        return pulumi.get(self, "fault_impact")

    @_builtins.property
    @pulumi.getter(name="firstReportTime")
    def first_report_time(self) -> _builtins.int:
        """
        Indicates the first notification time.
        """
        return pulumi.get(self, "first_report_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the affected application primary key.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="impactedApplications")
    def impacted_applications(self) -> Sequence['outputs.GetWarRoomsListImpactedApplicationResult']:
        """
        Indicates the affected applications.
        """
        return pulumi.get(self, "impacted_applications")

    @_builtins.property
    @pulumi.getter
    def incidents(self) -> Sequence['outputs.GetWarRoomsListIncidentResult']:
        """
        Indicates the incident.
        """
        return pulumi.get(self, "incidents")

    @_builtins.property
    @pulumi.getter(name="occurTime")
    def occur_time(self) -> _builtins.int:
        """
        Indicates the occurrence start time.
        """
        return pulumi.get(self, "occur_time")

    @_builtins.property
    @pulumi.getter(name="processingDuration")
    def processing_duration(self) -> _builtins.int:
        """
        Indicates the handling duration, the unit is minutes.
        """
        return pulumi.get(self, "processing_duration")

    @_builtins.property
    @pulumi.getter(name="recoverLeaders")
    def recover_leaders(self) -> Sequence[_builtins.str]:
        """
        Indicates the primary recovery owner.
        """
        return pulumi.get(self, "recover_leaders")

    @_builtins.property
    @pulumi.getter(name="recoverMembers")
    def recover_members(self) -> Sequence[_builtins.str]:
        """
        Indicates the members of recovery.
        """
        return pulumi.get(self, "recover_members")

    @_builtins.property
    @pulumi.getter(name="recoverTime")
    def recover_time(self) -> _builtins.int:
        """
        Indicates the fault recovery time.
        """
        return pulumi.get(self, "recover_time")

    @_builtins.property
    @pulumi.getter(name="recoveryNotificationTime")
    def recovery_notification_time(self) -> _builtins.int:
        """
        Indicates the recovery notification time.
        """
        return pulumi.get(self, "recovery_notification_time")

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Sequence['outputs.GetWarRoomsListRegionResult']:
        """
        Indicates the affected regions.
        """
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter(name="restorationDuration")
    def restoration_duration(self) -> _builtins.int:
        """
        Indicates the recovery duration, the unit is minutes.
        """
        return pulumi.get(self, "restoration_duration")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        Indicates the incident source.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        Specifies the war room name.
        """
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter(name="warRoomNum")
    def war_room_num(self) -> _builtins.str:
        """
        Specifies the war room ticket number.
        """
        return pulumi.get(self, "war_room_num")

    @_builtins.property
    @pulumi.getter(name="warRoomStatuses")
    def war_room_statuses(self) -> Sequence['outputs.GetWarRoomsListWarRoomStatusResult']:
        """
        Indicates the war room status.
        """
        return pulumi.get(self, "war_room_statuses")


@pulumi.output_type
class GetWarRoomsListImpactedApplicationResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: Indicates the affected application primary key.
        :param _builtins.str name: Indicates the affected application name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the affected application primary key.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the affected application name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWarRoomsListIncidentResult(dict):
    def __init__(__self__, *,
                 failure_level: _builtins.str,
                 id: _builtins.str,
                 incident_id: _builtins.str,
                 incident_url: _builtins.str,
                 is_change_event: _builtins.bool):
        """
        :param _builtins.str failure_level: Indicates the incident level.
        :param _builtins.str id: Indicates the affected application primary key.
        :param _builtins.str incident_id: Indicates the incident ID.
        :param _builtins.str incident_url: Indicates the incident URL.
        :param _builtins.bool is_change_event: Indicates whether the incident is a change incident.
        """
        pulumi.set(__self__, "failure_level", failure_level)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "incident_id", incident_id)
        pulumi.set(__self__, "incident_url", incident_url)
        pulumi.set(__self__, "is_change_event", is_change_event)

    @_builtins.property
    @pulumi.getter(name="failureLevel")
    def failure_level(self) -> _builtins.str:
        """
        Indicates the incident level.
        """
        return pulumi.get(self, "failure_level")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the affected application primary key.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="incidentId")
    def incident_id(self) -> _builtins.str:
        """
        Indicates the incident ID.
        """
        return pulumi.get(self, "incident_id")

    @_builtins.property
    @pulumi.getter(name="incidentUrl")
    def incident_url(self) -> _builtins.str:
        """
        Indicates the incident URL.
        """
        return pulumi.get(self, "incident_url")

    @_builtins.property
    @pulumi.getter(name="isChangeEvent")
    def is_change_event(self) -> _builtins.bool:
        """
        Indicates whether the incident is a change incident.
        """
        return pulumi.get(self, "is_change_event")


@pulumi.output_type
class GetWarRoomsListRegionResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str code: Indicates the region primary key.
        :param _builtins.str name: Indicates the affected application name.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Indicates the region primary key.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the affected application name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWarRoomsListWarRoomStatusResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name_en: _builtins.str,
                 name_zh: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Indicates the affected application primary key.
        :param _builtins.str name_en: Indicates the English name of the war room status enumeration value.
        :param _builtins.str name_zh: Indicates the Chinese name of the war room status enumeration value.
        :param _builtins.str type: Indicates the war room status enumeration type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name_en", name_en)
        pulumi.set(__self__, "name_zh", name_zh)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the affected application primary key.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> _builtins.str:
        """
        Indicates the English name of the war room status enumeration value.
        """
        return pulumi.get(self, "name_en")

    @_builtins.property
    @pulumi.getter(name="nameZh")
    def name_zh(self) -> _builtins.str:
        """
        Indicates the Chinese name of the war room status enumeration value.
        """
        return pulumi.get(self, "name_zh")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the war room status enumeration type.
        """
        return pulumi.get(self, "type")


