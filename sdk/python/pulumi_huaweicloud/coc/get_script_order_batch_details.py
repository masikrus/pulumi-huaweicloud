# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetScriptOrderBatchDetailsResult',
    'AwaitableGetScriptOrderBatchDetailsResult',
    'get_script_order_batch_details',
    'get_script_order_batch_details_output',
]

@pulumi.output_type
class GetScriptOrderBatchDetailsResult:
    """
    A collection of values returned by getScriptOrderBatchDetails.
    """
    def __init__(__self__, batch_index=None, execute_instances=None, execute_uuid=None, id=None, status=None):
        if batch_index and not isinstance(batch_index, int):
            raise TypeError("Expected argument 'batch_index' to be a int")
        pulumi.set(__self__, "batch_index", batch_index)
        if execute_instances and not isinstance(execute_instances, list):
            raise TypeError("Expected argument 'execute_instances' to be a list")
        pulumi.set(__self__, "execute_instances", execute_instances)
        if execute_uuid and not isinstance(execute_uuid, str):
            raise TypeError("Expected argument 'execute_uuid' to be a str")
        pulumi.set(__self__, "execute_uuid", execute_uuid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="batchIndex")
    def batch_index(self) -> _builtins.int:
        return pulumi.get(self, "batch_index")

    @_builtins.property
    @pulumi.getter(name="executeInstances")
    def execute_instances(self) -> Sequence['outputs.GetScriptOrderBatchDetailsExecuteInstanceResult']:
        """
        Indicates a list of executed instances.
        """
        return pulumi.get(self, "execute_instances")

    @_builtins.property
    @pulumi.getter(name="executeUuid")
    def execute_uuid(self) -> _builtins.str:
        return pulumi.get(self, "execute_uuid")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the instance execution status.
        Values can be as follows:
        + **READY**: The operation is to be performed.
        + **PROCESSING**: The operation is in progress.
        + **ABNORMAL**: Abnormal.
        + **CANCELED**: Canceled.
        + **FINISHED**: Success.
        """
        return pulumi.get(self, "status")


class AwaitableGetScriptOrderBatchDetailsResult(GetScriptOrderBatchDetailsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScriptOrderBatchDetailsResult(
            batch_index=self.batch_index,
            execute_instances=self.execute_instances,
            execute_uuid=self.execute_uuid,
            id=self.id,
            status=self.status)


def get_script_order_batch_details(batch_index: Optional[_builtins.int] = None,
                                   execute_uuid: Optional[_builtins.str] = None,
                                   status: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScriptOrderBatchDetailsResult:
    """
    Use this data source to get the instance list of COC script orders in a batch.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    execute_uuid = config.require_object("executeUuid")
    test = huaweicloud.coc.get_script_order_batch_details(execute_uuid=execute_uuid,
        batch_index=1)
    ```


    :param _builtins.int batch_index: Specifies the batch index.
    :param _builtins.str execute_uuid: Specifies the execution ID of the script order.
    :param _builtins.str status: Specifies instance execution status.
           Values can be as follows:
           + **READY**: The operation is to be performed.
           + **PROCESSING**: The operation is in progress.
           + **ABNORMAL**: Abnormal.
           + **CANCELED**: Canceled.
           + **FINISHED**: Success.
    """
    __args__ = dict()
    __args__['batchIndex'] = batch_index
    __args__['executeUuid'] = execute_uuid
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:coc/getScriptOrderBatchDetails:getScriptOrderBatchDetails', __args__, opts=opts, typ=GetScriptOrderBatchDetailsResult).value

    return AwaitableGetScriptOrderBatchDetailsResult(
        batch_index=pulumi.get(__ret__, 'batch_index'),
        execute_instances=pulumi.get(__ret__, 'execute_instances'),
        execute_uuid=pulumi.get(__ret__, 'execute_uuid'),
        id=pulumi.get(__ret__, 'id'),
        status=pulumi.get(__ret__, 'status'))
def get_script_order_batch_details_output(batch_index: Optional[pulumi.Input[_builtins.int]] = None,
                                          execute_uuid: Optional[pulumi.Input[_builtins.str]] = None,
                                          status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetScriptOrderBatchDetailsResult]:
    """
    Use this data source to get the instance list of COC script orders in a batch.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    execute_uuid = config.require_object("executeUuid")
    test = huaweicloud.coc.get_script_order_batch_details(execute_uuid=execute_uuid,
        batch_index=1)
    ```


    :param _builtins.int batch_index: Specifies the batch index.
    :param _builtins.str execute_uuid: Specifies the execution ID of the script order.
    :param _builtins.str status: Specifies instance execution status.
           Values can be as follows:
           + **READY**: The operation is to be performed.
           + **PROCESSING**: The operation is in progress.
           + **ABNORMAL**: Abnormal.
           + **CANCELED**: Canceled.
           + **FINISHED**: Success.
    """
    __args__ = dict()
    __args__['batchIndex'] = batch_index
    __args__['executeUuid'] = execute_uuid
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:coc/getScriptOrderBatchDetails:getScriptOrderBatchDetails', __args__, opts=opts, typ=GetScriptOrderBatchDetailsResult)
    return __ret__.apply(lambda __response__: GetScriptOrderBatchDetailsResult(
        batch_index=pulumi.get(__response__, 'batch_index'),
        execute_instances=pulumi.get(__response__, 'execute_instances'),
        execute_uuid=pulumi.get(__response__, 'execute_uuid'),
        id=pulumi.get(__response__, 'id'),
        status=pulumi.get(__response__, 'status')))
