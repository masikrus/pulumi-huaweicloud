# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWarRoomsResult',
    'AwaitableGetWarRoomsResult',
    'get_war_rooms',
    'get_war_rooms_output',
]

@pulumi.output_type
class GetWarRoomsResult:
    """
    A collection of values returned by getWarRooms.
    """
    def __init__(__self__, admins=None, closed_num=None, current_users=None, enterprise_project_ids=None, id=None, impacted_application_ids=None, incident_levels=None, incident_num=None, lists=None, notification_levels=None, occur_end_time=None, occur_start_time=None, recover_end_time=None, recover_start_time=None, region_code_lists=None, running_num=None, statistic_flag=None, statuses=None, title=None, total_num=None, triggered_end_time=None, triggered_start_time=None, war_room_num=None, war_room_nums=None):
        if admins and not isinstance(admins, list):
            raise TypeError("Expected argument 'admins' to be a list")
        pulumi.set(__self__, "admins", admins)
        if closed_num and not isinstance(closed_num, int):
            raise TypeError("Expected argument 'closed_num' to be a int")
        pulumi.set(__self__, "closed_num", closed_num)
        if current_users and not isinstance(current_users, list):
            raise TypeError("Expected argument 'current_users' to be a list")
        pulumi.set(__self__, "current_users", current_users)
        if enterprise_project_ids and not isinstance(enterprise_project_ids, list):
            raise TypeError("Expected argument 'enterprise_project_ids' to be a list")
        pulumi.set(__self__, "enterprise_project_ids", enterprise_project_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if impacted_application_ids and not isinstance(impacted_application_ids, list):
            raise TypeError("Expected argument 'impacted_application_ids' to be a list")
        pulumi.set(__self__, "impacted_application_ids", impacted_application_ids)
        if incident_levels and not isinstance(incident_levels, list):
            raise TypeError("Expected argument 'incident_levels' to be a list")
        pulumi.set(__self__, "incident_levels", incident_levels)
        if incident_num and not isinstance(incident_num, str):
            raise TypeError("Expected argument 'incident_num' to be a str")
        pulumi.set(__self__, "incident_num", incident_num)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if notification_levels and not isinstance(notification_levels, list):
            raise TypeError("Expected argument 'notification_levels' to be a list")
        pulumi.set(__self__, "notification_levels", notification_levels)
        if occur_end_time and not isinstance(occur_end_time, int):
            raise TypeError("Expected argument 'occur_end_time' to be a int")
        pulumi.set(__self__, "occur_end_time", occur_end_time)
        if occur_start_time and not isinstance(occur_start_time, int):
            raise TypeError("Expected argument 'occur_start_time' to be a int")
        pulumi.set(__self__, "occur_start_time", occur_start_time)
        if recover_end_time and not isinstance(recover_end_time, int):
            raise TypeError("Expected argument 'recover_end_time' to be a int")
        pulumi.set(__self__, "recover_end_time", recover_end_time)
        if recover_start_time and not isinstance(recover_start_time, int):
            raise TypeError("Expected argument 'recover_start_time' to be a int")
        pulumi.set(__self__, "recover_start_time", recover_start_time)
        if region_code_lists and not isinstance(region_code_lists, list):
            raise TypeError("Expected argument 'region_code_lists' to be a list")
        pulumi.set(__self__, "region_code_lists", region_code_lists)
        if running_num and not isinstance(running_num, int):
            raise TypeError("Expected argument 'running_num' to be a int")
        pulumi.set(__self__, "running_num", running_num)
        if statistic_flag and not isinstance(statistic_flag, bool):
            raise TypeError("Expected argument 'statistic_flag' to be a bool")
        pulumi.set(__self__, "statistic_flag", statistic_flag)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)
        if total_num and not isinstance(total_num, int):
            raise TypeError("Expected argument 'total_num' to be a int")
        pulumi.set(__self__, "total_num", total_num)
        if triggered_end_time and not isinstance(triggered_end_time, int):
            raise TypeError("Expected argument 'triggered_end_time' to be a int")
        pulumi.set(__self__, "triggered_end_time", triggered_end_time)
        if triggered_start_time and not isinstance(triggered_start_time, int):
            raise TypeError("Expected argument 'triggered_start_time' to be a int")
        pulumi.set(__self__, "triggered_start_time", triggered_start_time)
        if war_room_num and not isinstance(war_room_num, str):
            raise TypeError("Expected argument 'war_room_num' to be a str")
        pulumi.set(__self__, "war_room_num", war_room_num)
        if war_room_nums and not isinstance(war_room_nums, list):
            raise TypeError("Expected argument 'war_room_nums' to be a list")
        pulumi.set(__self__, "war_room_nums", war_room_nums)

    @_builtins.property
    @pulumi.getter
    def admins(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the war room administrator user ID.
        """
        return pulumi.get(self, "admins")

    @_builtins.property
    @pulumi.getter(name="closedNum")
    def closed_num(self) -> _builtins.int:
        """
        Indicates the total number of closed war rooms.
        """
        return pulumi.get(self, "closed_num")

    @_builtins.property
    @pulumi.getter(name="currentUsers")
    def current_users(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "current_users")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectIds")
    def enterprise_project_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "enterprise_project_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="impactedApplicationIds")
    def impacted_application_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "impacted_application_ids")

    @_builtins.property
    @pulumi.getter(name="incidentLevels")
    def incident_levels(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "incident_levels")

    @_builtins.property
    @pulumi.getter(name="incidentNum")
    def incident_num(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "incident_num")

    @_builtins.property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetWarRoomsListResult']:
        """
        Indicates the war room information.
        """
        return pulumi.get(self, "lists")

    @_builtins.property
    @pulumi.getter(name="notificationLevels")
    def notification_levels(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "notification_levels")

    @_builtins.property
    @pulumi.getter(name="occurEndTime")
    def occur_end_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "occur_end_time")

    @_builtins.property
    @pulumi.getter(name="occurStartTime")
    def occur_start_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "occur_start_time")

    @_builtins.property
    @pulumi.getter(name="recoverEndTime")
    def recover_end_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "recover_end_time")

    @_builtins.property
    @pulumi.getter(name="recoverStartTime")
    def recover_start_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "recover_start_time")

    @_builtins.property
    @pulumi.getter(name="regionCodeLists")
    def region_code_lists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "region_code_lists")

    @_builtins.property
    @pulumi.getter(name="runningNum")
    def running_num(self) -> _builtins.int:
        """
        Indicates the total number of war rooms in progress.
        """
        return pulumi.get(self, "running_num")

    @_builtins.property
    @pulumi.getter(name="statisticFlag")
    def statistic_flag(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "statistic_flag")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[_builtins.str]:
        """
        Indicates the title.
        """
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter(name="totalNum")
    def total_num(self) -> _builtins.int:
        """
        Indicates the total number of war rooms.
        """
        return pulumi.get(self, "total_num")

    @_builtins.property
    @pulumi.getter(name="triggeredEndTime")
    def triggered_end_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "triggered_end_time")

    @_builtins.property
    @pulumi.getter(name="triggeredStartTime")
    def triggered_start_time(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "triggered_start_time")

    @_builtins.property
    @pulumi.getter(name="warRoomNum")
    def war_room_num(self) -> Optional[_builtins.str]:
        """
        Indicates the war room ticket number.
        """
        return pulumi.get(self, "war_room_num")

    @_builtins.property
    @pulumi.getter(name="warRoomNums")
    def war_room_nums(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "war_room_nums")


class AwaitableGetWarRoomsResult(GetWarRoomsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWarRoomsResult(
            admins=self.admins,
            closed_num=self.closed_num,
            current_users=self.current_users,
            enterprise_project_ids=self.enterprise_project_ids,
            id=self.id,
            impacted_application_ids=self.impacted_application_ids,
            incident_levels=self.incident_levels,
            incident_num=self.incident_num,
            lists=self.lists,
            notification_levels=self.notification_levels,
            occur_end_time=self.occur_end_time,
            occur_start_time=self.occur_start_time,
            recover_end_time=self.recover_end_time,
            recover_start_time=self.recover_start_time,
            region_code_lists=self.region_code_lists,
            running_num=self.running_num,
            statistic_flag=self.statistic_flag,
            statuses=self.statuses,
            title=self.title,
            total_num=self.total_num,
            triggered_end_time=self.triggered_end_time,
            triggered_start_time=self.triggered_start_time,
            war_room_num=self.war_room_num,
            war_room_nums=self.war_room_nums)


def get_war_rooms(admins: Optional[Sequence[_builtins.str]] = None,
                  current_users: Optional[Sequence[_builtins.str]] = None,
                  enterprise_project_ids: Optional[Sequence[_builtins.str]] = None,
                  impacted_application_ids: Optional[Sequence[_builtins.str]] = None,
                  incident_levels: Optional[Sequence[_builtins.str]] = None,
                  incident_num: Optional[_builtins.str] = None,
                  notification_levels: Optional[Sequence[_builtins.str]] = None,
                  occur_end_time: Optional[_builtins.int] = None,
                  occur_start_time: Optional[_builtins.int] = None,
                  recover_end_time: Optional[_builtins.int] = None,
                  recover_start_time: Optional[_builtins.int] = None,
                  region_code_lists: Optional[Sequence[_builtins.str]] = None,
                  statistic_flag: Optional[_builtins.bool] = None,
                  statuses: Optional[Sequence[_builtins.str]] = None,
                  title: Optional[_builtins.str] = None,
                  triggered_end_time: Optional[_builtins.int] = None,
                  triggered_start_time: Optional[_builtins.int] = None,
                  war_room_num: Optional[_builtins.str] = None,
                  war_room_nums: Optional[Sequence[_builtins.str]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWarRoomsResult:
    """
    Use this data source to get the list of COC war rooms.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.coc.get_war_rooms()
    ```


    :param Sequence[_builtins.str] admins: Specifies the war room administrator user ID.
    :param Sequence[_builtins.str] current_users: Specifies the current user ID.
    :param Sequence[_builtins.str] enterprise_project_ids: Specifies the enterprise project ID.
    :param Sequence[_builtins.str] impacted_application_ids: Specifies the ID of the affected application.
    :param Sequence[_builtins.str] incident_levels: Specifies the incident level.
           Values can be as follows:
           + **level_10**: P1.
           + **level_20**: P2.
           + **level_30**: P3.
           + **level_40**: P4.
           + **level_50**: P5.
    :param _builtins.str incident_num: Specifies the incident ticket number.
    :param Sequence[_builtins.str] notification_levels: Specifies the notification level.
           Values can be as follows:
           + **level_10**: P1.
           + **level_20**: P2.
           + **level_30**: P3.
           + **level_40**: P4.
           + **level_50**: P5.
    :param _builtins.int occur_end_time: Specifies the occurrence end time.
    :param _builtins.int occur_start_time: Specifies the occurrence start time.
    :param _builtins.int recover_end_time: Specifies the recovery end time.
    :param _builtins.int recover_start_time: Specifies the recovery start time.
    :param Sequence[_builtins.str] region_code_lists: Specifies the regions.
    :param _builtins.bool statistic_flag: Specifies whether to collect statistics. If the value is **false**, basic
           information is returned. If the value is **true**, only the statistics result, including `total_num`, `running_num`,
           and `closed_num`, is returned. The default value is **false**.
    :param Sequence[_builtins.str] statuses: Specifies the war room status.
           Values can be as follows:
           + **1**: Start war room.
           + **3**: Fault definition.
           + **7**: The fault has been recovered.
           + **20**: Close war room.
    :param _builtins.str title: Specifies the war room name.
    :param _builtins.int triggered_end_time: Specifies the trigger end time of the war room. The default value is current
           time.
    :param _builtins.int triggered_start_time: Specifies the trigger start time of the war room. The default value is 30
           days before the start time.
    :param _builtins.str war_room_num: Specifies the war room ticket number.
    :param Sequence[_builtins.str] war_room_nums: Specifies the war room ticket number. When this filter is present, other filter
           conditions are ignored.
    """
    __args__ = dict()
    __args__['admins'] = admins
    __args__['currentUsers'] = current_users
    __args__['enterpriseProjectIds'] = enterprise_project_ids
    __args__['impactedApplicationIds'] = impacted_application_ids
    __args__['incidentLevels'] = incident_levels
    __args__['incidentNum'] = incident_num
    __args__['notificationLevels'] = notification_levels
    __args__['occurEndTime'] = occur_end_time
    __args__['occurStartTime'] = occur_start_time
    __args__['recoverEndTime'] = recover_end_time
    __args__['recoverStartTime'] = recover_start_time
    __args__['regionCodeLists'] = region_code_lists
    __args__['statisticFlag'] = statistic_flag
    __args__['statuses'] = statuses
    __args__['title'] = title
    __args__['triggeredEndTime'] = triggered_end_time
    __args__['triggeredStartTime'] = triggered_start_time
    __args__['warRoomNum'] = war_room_num
    __args__['warRoomNums'] = war_room_nums
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:coc/getWarRooms:getWarRooms', __args__, opts=opts, typ=GetWarRoomsResult).value

    return AwaitableGetWarRoomsResult(
        admins=pulumi.get(__ret__, 'admins'),
        closed_num=pulumi.get(__ret__, 'closed_num'),
        current_users=pulumi.get(__ret__, 'current_users'),
        enterprise_project_ids=pulumi.get(__ret__, 'enterprise_project_ids'),
        id=pulumi.get(__ret__, 'id'),
        impacted_application_ids=pulumi.get(__ret__, 'impacted_application_ids'),
        incident_levels=pulumi.get(__ret__, 'incident_levels'),
        incident_num=pulumi.get(__ret__, 'incident_num'),
        lists=pulumi.get(__ret__, 'lists'),
        notification_levels=pulumi.get(__ret__, 'notification_levels'),
        occur_end_time=pulumi.get(__ret__, 'occur_end_time'),
        occur_start_time=pulumi.get(__ret__, 'occur_start_time'),
        recover_end_time=pulumi.get(__ret__, 'recover_end_time'),
        recover_start_time=pulumi.get(__ret__, 'recover_start_time'),
        region_code_lists=pulumi.get(__ret__, 'region_code_lists'),
        running_num=pulumi.get(__ret__, 'running_num'),
        statistic_flag=pulumi.get(__ret__, 'statistic_flag'),
        statuses=pulumi.get(__ret__, 'statuses'),
        title=pulumi.get(__ret__, 'title'),
        total_num=pulumi.get(__ret__, 'total_num'),
        triggered_end_time=pulumi.get(__ret__, 'triggered_end_time'),
        triggered_start_time=pulumi.get(__ret__, 'triggered_start_time'),
        war_room_num=pulumi.get(__ret__, 'war_room_num'),
        war_room_nums=pulumi.get(__ret__, 'war_room_nums'))
def get_war_rooms_output(admins: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         current_users: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         enterprise_project_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         impacted_application_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         incident_levels: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         incident_num: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         notification_levels: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         occur_end_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         occur_start_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         recover_end_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         recover_start_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         region_code_lists: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         statistic_flag: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                         statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         title: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         triggered_end_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         triggered_start_time: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                         war_room_num: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         war_room_nums: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWarRoomsResult]:
    """
    Use this data source to get the list of COC war rooms.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.coc.get_war_rooms()
    ```


    :param Sequence[_builtins.str] admins: Specifies the war room administrator user ID.
    :param Sequence[_builtins.str] current_users: Specifies the current user ID.
    :param Sequence[_builtins.str] enterprise_project_ids: Specifies the enterprise project ID.
    :param Sequence[_builtins.str] impacted_application_ids: Specifies the ID of the affected application.
    :param Sequence[_builtins.str] incident_levels: Specifies the incident level.
           Values can be as follows:
           + **level_10**: P1.
           + **level_20**: P2.
           + **level_30**: P3.
           + **level_40**: P4.
           + **level_50**: P5.
    :param _builtins.str incident_num: Specifies the incident ticket number.
    :param Sequence[_builtins.str] notification_levels: Specifies the notification level.
           Values can be as follows:
           + **level_10**: P1.
           + **level_20**: P2.
           + **level_30**: P3.
           + **level_40**: P4.
           + **level_50**: P5.
    :param _builtins.int occur_end_time: Specifies the occurrence end time.
    :param _builtins.int occur_start_time: Specifies the occurrence start time.
    :param _builtins.int recover_end_time: Specifies the recovery end time.
    :param _builtins.int recover_start_time: Specifies the recovery start time.
    :param Sequence[_builtins.str] region_code_lists: Specifies the regions.
    :param _builtins.bool statistic_flag: Specifies whether to collect statistics. If the value is **false**, basic
           information is returned. If the value is **true**, only the statistics result, including `total_num`, `running_num`,
           and `closed_num`, is returned. The default value is **false**.
    :param Sequence[_builtins.str] statuses: Specifies the war room status.
           Values can be as follows:
           + **1**: Start war room.
           + **3**: Fault definition.
           + **7**: The fault has been recovered.
           + **20**: Close war room.
    :param _builtins.str title: Specifies the war room name.
    :param _builtins.int triggered_end_time: Specifies the trigger end time of the war room. The default value is current
           time.
    :param _builtins.int triggered_start_time: Specifies the trigger start time of the war room. The default value is 30
           days before the start time.
    :param _builtins.str war_room_num: Specifies the war room ticket number.
    :param Sequence[_builtins.str] war_room_nums: Specifies the war room ticket number. When this filter is present, other filter
           conditions are ignored.
    """
    __args__ = dict()
    __args__['admins'] = admins
    __args__['currentUsers'] = current_users
    __args__['enterpriseProjectIds'] = enterprise_project_ids
    __args__['impactedApplicationIds'] = impacted_application_ids
    __args__['incidentLevels'] = incident_levels
    __args__['incidentNum'] = incident_num
    __args__['notificationLevels'] = notification_levels
    __args__['occurEndTime'] = occur_end_time
    __args__['occurStartTime'] = occur_start_time
    __args__['recoverEndTime'] = recover_end_time
    __args__['recoverStartTime'] = recover_start_time
    __args__['regionCodeLists'] = region_code_lists
    __args__['statisticFlag'] = statistic_flag
    __args__['statuses'] = statuses
    __args__['title'] = title
    __args__['triggeredEndTime'] = triggered_end_time
    __args__['triggeredStartTime'] = triggered_start_time
    __args__['warRoomNum'] = war_room_num
    __args__['warRoomNums'] = war_room_nums
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:coc/getWarRooms:getWarRooms', __args__, opts=opts, typ=GetWarRoomsResult)
    return __ret__.apply(lambda __response__: GetWarRoomsResult(
        admins=pulumi.get(__response__, 'admins'),
        closed_num=pulumi.get(__response__, 'closed_num'),
        current_users=pulumi.get(__response__, 'current_users'),
        enterprise_project_ids=pulumi.get(__response__, 'enterprise_project_ids'),
        id=pulumi.get(__response__, 'id'),
        impacted_application_ids=pulumi.get(__response__, 'impacted_application_ids'),
        incident_levels=pulumi.get(__response__, 'incident_levels'),
        incident_num=pulumi.get(__response__, 'incident_num'),
        lists=pulumi.get(__response__, 'lists'),
        notification_levels=pulumi.get(__response__, 'notification_levels'),
        occur_end_time=pulumi.get(__response__, 'occur_end_time'),
        occur_start_time=pulumi.get(__response__, 'occur_start_time'),
        recover_end_time=pulumi.get(__response__, 'recover_end_time'),
        recover_start_time=pulumi.get(__response__, 'recover_start_time'),
        region_code_lists=pulumi.get(__response__, 'region_code_lists'),
        running_num=pulumi.get(__response__, 'running_num'),
        statistic_flag=pulumi.get(__response__, 'statistic_flag'),
        statuses=pulumi.get(__response__, 'statuses'),
        title=pulumi.get(__response__, 'title'),
        total_num=pulumi.get(__response__, 'total_num'),
        triggered_end_time=pulumi.get(__response__, 'triggered_end_time'),
        triggered_start_time=pulumi.get(__response__, 'triggered_start_time'),
        war_room_num=pulumi.get(__response__, 'war_room_num'),
        war_room_nums=pulumi.get(__response__, 'war_room_nums')))
