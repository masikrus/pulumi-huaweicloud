# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPublicScriptsResult',
    'AwaitableGetPublicScriptsResult',
    'get_public_scripts',
    'get_public_scripts_output',
]

@pulumi.output_type
class GetPublicScriptsResult:
    """
    A collection of values returned by getPublicScripts.
    """
    def __init__(__self__, datas=None, id=None, name=None, name_like=None, risk_level=None, type=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_like and not isinstance(name_like, str):
            raise TypeError("Expected argument 'name_like' to be a str")
        pulumi.set(__self__, "name_like", name_like)
        if risk_level and not isinstance(risk_level, str):
            raise TypeError("Expected argument 'risk_level' to be a str")
        pulumi.set(__self__, "risk_level", risk_level)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetPublicScriptsDataResult']:
        """
        Indicates the list of public scripts.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the script name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameLike")
    def name_like(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name_like")

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[_builtins.str]:
        """
        Indicates the risk level.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the script type.
        """
        return pulumi.get(self, "type")


class AwaitableGetPublicScriptsResult(GetPublicScriptsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicScriptsResult(
            datas=self.datas,
            id=self.id,
            name=self.name,
            name_like=self.name_like,
            risk_level=self.risk_level,
            type=self.type)


def get_public_scripts(name: Optional[_builtins.str] = None,
                       name_like: Optional[_builtins.str] = None,
                       risk_level: Optional[_builtins.str] = None,
                       type: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicScriptsResult:
    """
    Use this data source to get the list of COC public scripts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.coc.get_public_scripts()
    ```


    :param _builtins.str name: Specifies the script name.
    :param _builtins.str name_like: Specifies the script name, only right fuzzy search is supported.
    :param _builtins.str risk_level: Specifies the risk level.
           Values can be as follows:
           + **LOW**: Low risk.
           + **MEDIUM**: Medium risk.
           + **HIGH**: High risk.
    :param _builtins.str type: Specifies the script type.
           Values can be as follows:
           + **SHELL**: Shell script.
           + **PYTHON**: Python script.
           + **BAT**: Bat script.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nameLike'] = name_like
    __args__['riskLevel'] = risk_level
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:coc/getPublicScripts:getPublicScripts', __args__, opts=opts, typ=GetPublicScriptsResult).value

    return AwaitableGetPublicScriptsResult(
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        name_like=pulumi.get(__ret__, 'name_like'),
        risk_level=pulumi.get(__ret__, 'risk_level'),
        type=pulumi.get(__ret__, 'type'))
def get_public_scripts_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name_like: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              risk_level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPublicScriptsResult]:
    """
    Use this data source to get the list of COC public scripts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.coc.get_public_scripts()
    ```


    :param _builtins.str name: Specifies the script name.
    :param _builtins.str name_like: Specifies the script name, only right fuzzy search is supported.
    :param _builtins.str risk_level: Specifies the risk level.
           Values can be as follows:
           + **LOW**: Low risk.
           + **MEDIUM**: Medium risk.
           + **HIGH**: High risk.
    :param _builtins.str type: Specifies the script type.
           Values can be as follows:
           + **SHELL**: Shell script.
           + **PYTHON**: Python script.
           + **BAT**: Bat script.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nameLike'] = name_like
    __args__['riskLevel'] = risk_level
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:coc/getPublicScripts:getPublicScripts', __args__, opts=opts, typ=GetPublicScriptsResult)
    return __ret__.apply(lambda __response__: GetPublicScriptsResult(
        datas=pulumi.get(__response__, 'datas'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        name_like=pulumi.get(__response__, 'name_like'),
        risk_level=pulumi.get(__response__, 'risk_level'),
        type=pulumi.get(__response__, 'type')))
