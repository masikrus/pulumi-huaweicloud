# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetApplicationViewsResult',
    'AwaitableGetApplicationViewsResult',
    'get_application_views',
    'get_application_views_output',
]

@pulumi.output_type
class GetApplicationViewsResult:
    """
    A collection of values returned by getApplicationViews.
    """
    def __init__(__self__, code_lists=None, datas=None, id=None, is_collection=None, name_like=None):
        if code_lists and not isinstance(code_lists, list):
            raise TypeError("Expected argument 'code_lists' to be a list")
        pulumi.set(__self__, "code_lists", code_lists)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_collection and not isinstance(is_collection, bool):
            raise TypeError("Expected argument 'is_collection' to be a bool")
        pulumi.set(__self__, "is_collection", is_collection)
        if name_like and not isinstance(name_like, str):
            raise TypeError("Expected argument 'name_like' to be a str")
        pulumi.set(__self__, "name_like", name_like)

    @_builtins.property
    @pulumi.getter(name="codeLists")
    def code_lists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "code_lists")

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetApplicationViewsDataResult']:
        """
        Indicates the list of the application views.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCollection")
    def is_collection(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_collection")

    @_builtins.property
    @pulumi.getter(name="nameLike")
    def name_like(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name_like")


class AwaitableGetApplicationViewsResult(GetApplicationViewsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApplicationViewsResult(
            code_lists=self.code_lists,
            datas=self.datas,
            id=self.id,
            is_collection=self.is_collection,
            name_like=self.name_like)


def get_application_views(code_lists: Optional[Sequence[_builtins.str]] = None,
                          is_collection: Optional[_builtins.bool] = None,
                          name_like: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApplicationViewsResult:
    """
    Use this data source to get the list of COC application views.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.coc.get_application_views()
    ```


    :param Sequence[_builtins.str] code_lists: Specifies the application, component and group code list.
    :param _builtins.bool is_collection: Specifies whether to add to collection. The default value is **true**.
           Values can be as follows:
           + **true**: Search for apps, components or groups in my favorites.
           + **false**: Search for apps, components or groups in all apps.
    :param _builtins.str name_like: Specifies the fuzzy query application view name.
    """
    __args__ = dict()
    __args__['codeLists'] = code_lists
    __args__['isCollection'] = is_collection
    __args__['nameLike'] = name_like
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:coc/getApplicationViews:getApplicationViews', __args__, opts=opts, typ=GetApplicationViewsResult).value

    return AwaitableGetApplicationViewsResult(
        code_lists=pulumi.get(__ret__, 'code_lists'),
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        is_collection=pulumi.get(__ret__, 'is_collection'),
        name_like=pulumi.get(__ret__, 'name_like'))
def get_application_views_output(code_lists: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                 is_collection: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 name_like: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApplicationViewsResult]:
    """
    Use this data source to get the list of COC application views.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.coc.get_application_views()
    ```


    :param Sequence[_builtins.str] code_lists: Specifies the application, component and group code list.
    :param _builtins.bool is_collection: Specifies whether to add to collection. The default value is **true**.
           Values can be as follows:
           + **true**: Search for apps, components or groups in my favorites.
           + **false**: Search for apps, components or groups in all apps.
    :param _builtins.str name_like: Specifies the fuzzy query application view name.
    """
    __args__ = dict()
    __args__['codeLists'] = code_lists
    __args__['isCollection'] = is_collection
    __args__['nameLike'] = name_like
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:coc/getApplicationViews:getApplicationViews', __args__, opts=opts, typ=GetApplicationViewsResult)
    return __ret__.apply(lambda __response__: GetApplicationViewsResult(
        code_lists=pulumi.get(__response__, 'code_lists'),
        datas=pulumi.get(__response__, 'datas'),
        id=pulumi.get(__response__, 'id'),
        is_collection=pulumi.get(__response__, 'is_collection'),
        name_like=pulumi.get(__response__, 'name_like')))
