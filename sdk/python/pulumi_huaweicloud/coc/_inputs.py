# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DocumentExecuteExecutionParameterArgs',
    'DocumentExecuteExecutionParameterArgsDict',
    'DocumentExecuteParameterArgs',
    'DocumentExecuteParameterArgsDict',
    'DocumentExecuteSysTagArgs',
    'DocumentExecuteSysTagArgsDict',
    'DocumentExecuteTargetArgs',
    'DocumentExecuteTargetArgsDict',
    'DocumentVersionArgs',
    'DocumentVersionArgsDict',
    'IncidentEnumDataListArgs',
    'IncidentEnumDataListArgsDict',
    'ScriptExecuteParameterArgs',
    'ScriptExecuteParameterArgsDict',
    'ScriptParameterArgs',
    'ScriptParameterArgsDict',
    'WarRoomIncidentArgs',
    'WarRoomIncidentArgsDict',
    'WarRoomScheduleGroupArgs',
    'WarRoomScheduleGroupArgsDict',
    'WarRoomWarRoomStatusArgs',
    'WarRoomWarRoomStatusArgsDict',
]

MYPY = False

if not MYPY:
    class DocumentExecuteExecutionParameterArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value.

        <a name="targets_struct"></a>
        The `targets` blocks support:
        """
elif False:
    DocumentExecuteExecutionParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DocumentExecuteExecutionParameterArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the dimension of the instantiated execution target.
               The enumeration value as **InstanceValues**, **BatchValues**.
        :param pulumi.Input[_builtins.str] value: Specifies the value.
               
               <a name="targets_struct"></a>
               The `targets` blocks support:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value.

        <a name="targets_struct"></a>
        The `targets` blocks support:
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DocumentExecuteParameterArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value.

        <a name="targets_struct"></a>
        The `targets` blocks support:
        """
elif False:
    DocumentExecuteParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DocumentExecuteParameterArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the dimension of the instantiated execution target.
               The enumeration value as **InstanceValues**, **BatchValues**.
        :param pulumi.Input[_builtins.str] value: Specifies the value.
               
               <a name="targets_struct"></a>
               The `targets` blocks support:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value.

        <a name="targets_struct"></a>
        The `targets` blocks support:
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DocumentExecuteSysTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value.

        <a name="targets_struct"></a>
        The `targets` blocks support:
        """
elif False:
    DocumentExecuteSysTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DocumentExecuteSysTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the dimension of the instantiated execution target.
               The enumeration value as **InstanceValues**, **BatchValues**.
        :param pulumi.Input[_builtins.str] value: Specifies the value.
               
               <a name="targets_struct"></a>
               The `targets` blocks support:
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value.

        <a name="targets_struct"></a>
        The `targets` blocks support:
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DocumentExecuteTargetArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        values: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the target instance to be executed based on the global parameter
        specified by `target_parameter_name`.
        """
elif False:
    DocumentExecuteTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DocumentExecuteTargetArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the dimension of the instantiated execution target.
               The enumeration value as **InstanceValues**, **BatchValues**.
        :param pulumi.Input[_builtins.str] values: Specifies the target instance to be executed based on the global parameter
               specified by `target_parameter_name`.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the dimension of the instantiated execution target.
        The enumeration value as **InstanceValues**, **BatchValues**.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the target instance to be executed based on the global parameter
        specified by `target_parameter_name`.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class DocumentVersionArgsDict(TypedDict):
        create_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the version creation time.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the version number, such as **v1**.
        """
        version_uuid: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the version ID.
        """
elif False:
    DocumentVersionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DocumentVersionArgs:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[_builtins.int]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_uuid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] create_time: Indicates the version creation time.
        :param pulumi.Input[_builtins.str] version: Indicates the version number, such as **v1**.
        :param pulumi.Input[_builtins.str] version_uuid: Indicates the version ID.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_uuid is not None:
            pulumi.set(__self__, "version_uuid", version_uuid)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the version creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the version number, such as **v1**.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionUuid")
    def version_uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the version ID.
        """
        return pulumi.get(self, "version_uuid")

    @version_uuid.setter
    def version_uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_uuid", value)


if not MYPY:
    class IncidentEnumDataListArgsDict(TypedDict):
        enum_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the enum key.
        """
        filed_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the filed key.
        """
        name_en: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the English name.
        """
        name_zh: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the Chinese name.
        """
elif False:
    IncidentEnumDataListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IncidentEnumDataListArgs:
    def __init__(__self__, *,
                 enum_key: Optional[pulumi.Input[_builtins.str]] = None,
                 filed_key: Optional[pulumi.Input[_builtins.str]] = None,
                 name_en: Optional[pulumi.Input[_builtins.str]] = None,
                 name_zh: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] enum_key: Indicates the enum key.
        :param pulumi.Input[_builtins.str] filed_key: Indicates the filed key.
        :param pulumi.Input[_builtins.str] name_en: Indicates the English name.
        :param pulumi.Input[_builtins.str] name_zh: Indicates the Chinese name.
        """
        if enum_key is not None:
            pulumi.set(__self__, "enum_key", enum_key)
        if filed_key is not None:
            pulumi.set(__self__, "filed_key", filed_key)
        if name_en is not None:
            pulumi.set(__self__, "name_en", name_en)
        if name_zh is not None:
            pulumi.set(__self__, "name_zh", name_zh)

    @_builtins.property
    @pulumi.getter(name="enumKey")
    def enum_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the enum key.
        """
        return pulumi.get(self, "enum_key")

    @enum_key.setter
    def enum_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enum_key", value)

    @_builtins.property
    @pulumi.getter(name="filedKey")
    def filed_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the filed key.
        """
        return pulumi.get(self, "filed_key")

    @filed_key.setter
    def filed_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filed_key", value)

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the English name.
        """
        return pulumi.get(self, "name_en")

    @name_en.setter
    def name_en(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_en", value)

    @_builtins.property
    @pulumi.getter(name="nameZh")
    def name_zh(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the Chinese name.
        """
        return pulumi.get(self, "name_zh")

    @name_zh.setter
    def name_zh(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_zh", value)


if not MYPY:
    class ScriptExecuteParameterArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the parameter.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value of the parameter.
        """
elif False:
    ScriptExecuteParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScriptExecuteParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parameter.
        :param pulumi.Input[_builtins.str] value: Specifies the value of the parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value of the parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ScriptParameterArgsDict(TypedDict):
        description: pulumi.Input[_builtins.str]
        """
        Specifies the description of the parameter.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the parameter.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the **default** value of the parameter.
        """
        sensitive: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether the parameter is sensitive.
        """
elif False:
    ScriptParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScriptParameterArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 sensitive: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] description: Specifies the description of the parameter.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parameter.
        :param pulumi.Input[_builtins.str] value: Specifies the **default** value of the parameter.
        :param pulumi.Input[_builtins.bool] sensitive: Specifies whether the parameter is sensitive.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the description of the parameter.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the **default** value of the parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def sensitive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the parameter is sensitive.
        """
        return pulumi.get(self, "sensitive")

    @sensitive.setter
    def sensitive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sensitive", value)


if not MYPY:
    class WarRoomIncidentArgsDict(TypedDict):
        failure_level: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the incident level.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the war room status enumeration value ID .
        """
        incident_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the incident ID.
        """
        incident_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the incident URL.
        """
        is_change_event: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether the incident is a change incident.
        """
elif False:
    WarRoomIncidentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WarRoomIncidentArgs:
    def __init__(__self__, *,
                 failure_level: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 incident_id: Optional[pulumi.Input[_builtins.str]] = None,
                 incident_url: Optional[pulumi.Input[_builtins.str]] = None,
                 is_change_event: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] failure_level: Indicates the incident level.
        :param pulumi.Input[_builtins.str] id: Indicates the war room status enumeration value ID .
        :param pulumi.Input[_builtins.str] incident_id: Indicates the incident ID.
        :param pulumi.Input[_builtins.str] incident_url: Indicates the incident URL.
        :param pulumi.Input[_builtins.bool] is_change_event: Indicates whether the incident is a change incident.
        """
        if failure_level is not None:
            pulumi.set(__self__, "failure_level", failure_level)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if incident_id is not None:
            pulumi.set(__self__, "incident_id", incident_id)
        if incident_url is not None:
            pulumi.set(__self__, "incident_url", incident_url)
        if is_change_event is not None:
            pulumi.set(__self__, "is_change_event", is_change_event)

    @_builtins.property
    @pulumi.getter(name="failureLevel")
    def failure_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the incident level.
        """
        return pulumi.get(self, "failure_level")

    @failure_level.setter
    def failure_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "failure_level", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the war room status enumeration value ID .
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="incidentId")
    def incident_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the incident ID.
        """
        return pulumi.get(self, "incident_id")

    @incident_id.setter
    def incident_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "incident_id", value)

    @_builtins.property
    @pulumi.getter(name="incidentUrl")
    def incident_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the incident URL.
        """
        return pulumi.get(self, "incident_url")

    @incident_url.setter
    def incident_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "incident_url", value)

    @_builtins.property
    @pulumi.getter(name="isChangeEvent")
    def is_change_event(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the incident is a change incident.
        """
        return pulumi.get(self, "is_change_event")

    @is_change_event.setter
    def is_change_event(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_change_event", value)


if not MYPY:
    class WarRoomScheduleGroupArgsDict(TypedDict):
        role_id: pulumi.Input[_builtins.str]
        """
        Specifies the role ID.
        """
        scene_id: pulumi.Input[_builtins.str]
        """
        Specifies the scenario ID.
        """
elif False:
    WarRoomScheduleGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WarRoomScheduleGroupArgs:
    def __init__(__self__, *,
                 role_id: pulumi.Input[_builtins.str],
                 scene_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] role_id: Specifies the role ID.
        :param pulumi.Input[_builtins.str] scene_id: Specifies the scenario ID.
        """
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "scene_id", scene_id)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the role ID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="sceneId")
    def scene_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the scenario ID.
        """
        return pulumi.get(self, "scene_id")

    @scene_id.setter
    def scene_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scene_id", value)


if not MYPY:
    class WarRoomWarRoomStatusArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the war room status enumeration value ID .
        """
        name_en: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the English name of the war room status enumeration value.
        """
        name_zh: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the Chinese name of the war room status enumeration value.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the war room status enumeration type.
        """
elif False:
    WarRoomWarRoomStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WarRoomWarRoomStatusArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name_en: Optional[pulumi.Input[_builtins.str]] = None,
                 name_zh: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Indicates the war room status enumeration value ID .
        :param pulumi.Input[_builtins.str] name_en: Indicates the English name of the war room status enumeration value.
        :param pulumi.Input[_builtins.str] name_zh: Indicates the Chinese name of the war room status enumeration value.
        :param pulumi.Input[_builtins.str] type: Indicates the war room status enumeration type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name_en is not None:
            pulumi.set(__self__, "name_en", name_en)
        if name_zh is not None:
            pulumi.set(__self__, "name_zh", name_zh)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the war room status enumeration value ID .
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="nameEn")
    def name_en(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the English name of the war room status enumeration value.
        """
        return pulumi.get(self, "name_en")

    @name_en.setter
    def name_en(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_en", value)

    @_builtins.property
    @pulumi.getter(name="nameZh")
    def name_zh(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the Chinese name of the war room status enumeration value.
        """
        return pulumi.get(self, "name_zh")

    @name_zh.setter
    def name_zh(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_zh", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the war room status enumeration type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


