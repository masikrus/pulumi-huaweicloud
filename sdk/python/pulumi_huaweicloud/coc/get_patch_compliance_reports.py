# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPatchComplianceReportsResult',
    'AwaitableGetPatchComplianceReportsResult',
    'get_patch_compliance_reports',
    'get_patch_compliance_reports_output',
]

@pulumi.output_type
class GetPatchComplianceReportsResult:
    """
    A collection of values returned by getPatchComplianceReports.
    """
    def __init__(__self__, cce_info_id=None, compliant_status=None, eip=None, enterprise_project_id=None, group=None, id=None, instance_compliants=None, instance_id=None, ip=None, name=None, operating_system=None, order_id=None, region=None, report_scene=None, sort_dir=None, sort_key=None):
        if cce_info_id and not isinstance(cce_info_id, str):
            raise TypeError("Expected argument 'cce_info_id' to be a str")
        pulumi.set(__self__, "cce_info_id", cce_info_id)
        if compliant_status and not isinstance(compliant_status, str):
            raise TypeError("Expected argument 'compliant_status' to be a str")
        pulumi.set(__self__, "compliant_status", compliant_status)
        if eip and not isinstance(eip, str):
            raise TypeError("Expected argument 'eip' to be a str")
        pulumi.set(__self__, "eip", eip)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group and not isinstance(group, str):
            raise TypeError("Expected argument 'group' to be a str")
        pulumi.set(__self__, "group", group)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_compliants and not isinstance(instance_compliants, list):
            raise TypeError("Expected argument 'instance_compliants' to be a list")
        pulumi.set(__self__, "instance_compliants", instance_compliants)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operating_system and not isinstance(operating_system, str):
            raise TypeError("Expected argument 'operating_system' to be a str")
        pulumi.set(__self__, "operating_system", operating_system)
        if order_id and not isinstance(order_id, str):
            raise TypeError("Expected argument 'order_id' to be a str")
        pulumi.set(__self__, "order_id", order_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if report_scene and not isinstance(report_scene, str):
            raise TypeError("Expected argument 'report_scene' to be a str")
        pulumi.set(__self__, "report_scene", report_scene)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)

    @_builtins.property
    @pulumi.getter(name="cceInfoId")
    def cce_info_id(self) -> Optional[_builtins.str]:
        """
        Indicates the CCE cluster information ID.
        """
        return pulumi.get(self, "cce_info_id")

    @_builtins.property
    @pulumi.getter(name="compliantStatus")
    def compliant_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compliant_status")

    @_builtins.property
    @pulumi.getter
    def eip(self) -> Optional[_builtins.str]:
        """
        Indicates the elastic IP address.
        """
        return pulumi.get(self, "eip")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[_builtins.str]:
        """
        Indicates the group.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceCompliants")
    def instance_compliants(self) -> Sequence['outputs.GetPatchComplianceReportsInstanceCompliantResult']:
        """
        Indicates the node compliance report.
        """
        return pulumi.get(self, "instance_compliants")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        """
        Indicates the node IP address.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[_builtins.str]:
        """
        Indicates the OS.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[_builtins.str]:
        """
        Indicates the service ticket ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Indicates the region.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="reportScene")
    def report_scene(self) -> Optional[_builtins.str]:
        """
        Indicates the reporting scenario, CCE or ECS.
        """
        return pulumi.get(self, "report_scene")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")


class AwaitableGetPatchComplianceReportsResult(GetPatchComplianceReportsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPatchComplianceReportsResult(
            cce_info_id=self.cce_info_id,
            compliant_status=self.compliant_status,
            eip=self.eip,
            enterprise_project_id=self.enterprise_project_id,
            group=self.group,
            id=self.id,
            instance_compliants=self.instance_compliants,
            instance_id=self.instance_id,
            ip=self.ip,
            name=self.name,
            operating_system=self.operating_system,
            order_id=self.order_id,
            region=self.region,
            report_scene=self.report_scene,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key)


def get_patch_compliance_reports(cce_info_id: Optional[_builtins.str] = None,
                                 compliant_status: Optional[_builtins.str] = None,
                                 eip: Optional[_builtins.str] = None,
                                 enterprise_project_id: Optional[_builtins.str] = None,
                                 group: Optional[_builtins.str] = None,
                                 instance_id: Optional[_builtins.str] = None,
                                 ip: Optional[_builtins.str] = None,
                                 name: Optional[_builtins.str] = None,
                                 operating_system: Optional[_builtins.str] = None,
                                 order_id: Optional[_builtins.str] = None,
                                 region: Optional[_builtins.str] = None,
                                 report_scene: Optional[_builtins.str] = None,
                                 sort_dir: Optional[_builtins.str] = None,
                                 sort_key: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPatchComplianceReportsResult:
    """
    Use this data source to get the list of COC patch compliance reports.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.coc.get_patch_compliance_reports()
    ```


    :param _builtins.str cce_info_id: Specifies the CCE cluster information ID.
    :param _builtins.str compliant_status: Specifies the compliance status.
           Values can be **non_compliant** and **compliant**.
    :param _builtins.str eip: Specifies the elastic IP address.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str group: Specifies the group.
    :param _builtins.str instance_id: Specifies the ECS instance ID.
    :param _builtins.str ip: Specifies the internal network IP address.
    :param _builtins.str name: Specifies the name.
    :param _builtins.str operating_system: Specifies the OS.
           Values can be **HuaweiCloudEulerOS**, **CentOS** and **EulerOS**.
    :param _builtins.str order_id: Specifies the service ticket ID.
    :param _builtins.str region: Specifies the region.
    :param _builtins.str report_scene: Specifies the report scenario.
           Values can be **CCE** and **ECS**.
    :param _builtins.str sort_dir: Specifies the sorting order.
           Values can be as follows:
           + **asc**: The query results are displayed in ascending order.
           + **desc**: The query results are displayed in the descending order.
    :param _builtins.str sort_key: Specifies the sorting field.
           Values can be **report_time**.
    """
    __args__ = dict()
    __args__['cceInfoId'] = cce_info_id
    __args__['compliantStatus'] = compliant_status
    __args__['eip'] = eip
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['group'] = group
    __args__['instanceId'] = instance_id
    __args__['ip'] = ip
    __args__['name'] = name
    __args__['operatingSystem'] = operating_system
    __args__['orderId'] = order_id
    __args__['region'] = region
    __args__['reportScene'] = report_scene
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:coc/getPatchComplianceReports:getPatchComplianceReports', __args__, opts=opts, typ=GetPatchComplianceReportsResult).value

    return AwaitableGetPatchComplianceReportsResult(
        cce_info_id=pulumi.get(__ret__, 'cce_info_id'),
        compliant_status=pulumi.get(__ret__, 'compliant_status'),
        eip=pulumi.get(__ret__, 'eip'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        group=pulumi.get(__ret__, 'group'),
        id=pulumi.get(__ret__, 'id'),
        instance_compliants=pulumi.get(__ret__, 'instance_compliants'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        ip=pulumi.get(__ret__, 'ip'),
        name=pulumi.get(__ret__, 'name'),
        operating_system=pulumi.get(__ret__, 'operating_system'),
        order_id=pulumi.get(__ret__, 'order_id'),
        region=pulumi.get(__ret__, 'region'),
        report_scene=pulumi.get(__ret__, 'report_scene'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'))
def get_patch_compliance_reports_output(cce_info_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        compliant_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        eip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        operating_system: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        order_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        report_scene: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPatchComplianceReportsResult]:
    """
    Use this data source to get the list of COC patch compliance reports.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.coc.get_patch_compliance_reports()
    ```


    :param _builtins.str cce_info_id: Specifies the CCE cluster information ID.
    :param _builtins.str compliant_status: Specifies the compliance status.
           Values can be **non_compliant** and **compliant**.
    :param _builtins.str eip: Specifies the elastic IP address.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str group: Specifies the group.
    :param _builtins.str instance_id: Specifies the ECS instance ID.
    :param _builtins.str ip: Specifies the internal network IP address.
    :param _builtins.str name: Specifies the name.
    :param _builtins.str operating_system: Specifies the OS.
           Values can be **HuaweiCloudEulerOS**, **CentOS** and **EulerOS**.
    :param _builtins.str order_id: Specifies the service ticket ID.
    :param _builtins.str region: Specifies the region.
    :param _builtins.str report_scene: Specifies the report scenario.
           Values can be **CCE** and **ECS**.
    :param _builtins.str sort_dir: Specifies the sorting order.
           Values can be as follows:
           + **asc**: The query results are displayed in ascending order.
           + **desc**: The query results are displayed in the descending order.
    :param _builtins.str sort_key: Specifies the sorting field.
           Values can be **report_time**.
    """
    __args__ = dict()
    __args__['cceInfoId'] = cce_info_id
    __args__['compliantStatus'] = compliant_status
    __args__['eip'] = eip
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['group'] = group
    __args__['instanceId'] = instance_id
    __args__['ip'] = ip
    __args__['name'] = name
    __args__['operatingSystem'] = operating_system
    __args__['orderId'] = order_id
    __args__['region'] = region
    __args__['reportScene'] = report_scene
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:coc/getPatchComplianceReports:getPatchComplianceReports', __args__, opts=opts, typ=GetPatchComplianceReportsResult)
    return __ret__.apply(lambda __response__: GetPatchComplianceReportsResult(
        cce_info_id=pulumi.get(__response__, 'cce_info_id'),
        compliant_status=pulumi.get(__response__, 'compliant_status'),
        eip=pulumi.get(__response__, 'eip'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        group=pulumi.get(__response__, 'group'),
        id=pulumi.get(__response__, 'id'),
        instance_compliants=pulumi.get(__response__, 'instance_compliants'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        ip=pulumi.get(__response__, 'ip'),
        name=pulumi.get(__response__, 'name'),
        operating_system=pulumi.get(__response__, 'operating_system'),
        order_id=pulumi.get(__response__, 'order_id'),
        region=pulumi.get(__response__, 'region'),
        report_scene=pulumi.get(__response__, 'report_scene'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key')))
