# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDocumentsResult',
    'AwaitableGetDocumentsResult',
    'get_documents',
    'get_documents_output',
]

@pulumi.output_type
class GetDocumentsResult:
    """
    A collection of values returned by getDocuments.
    """
    def __init__(__self__, creator=None, datas=None, document_type=None, enterprise_project_id=None, id=None, name_like=None):
        if creator and not isinstance(creator, str):
            raise TypeError("Expected argument 'creator' to be a str")
        pulumi.set(__self__, "creator", creator)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if document_type and not isinstance(document_type, str):
            raise TypeError("Expected argument 'document_type' to be a str")
        pulumi.set(__self__, "document_type", document_type)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_like and not isinstance(name_like, str):
            raise TypeError("Expected argument 'name_like' to be a str")
        pulumi.set(__self__, "name_like", name_like)

    @_builtins.property
    @pulumi.getter
    def creator(self) -> Optional[_builtins.str]:
        """
        Indicates the creator.
        """
        return pulumi.get(self, "creator")

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetDocumentsDataResult']:
        """
        Indicates the documents list.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter(name="documentType")
    def document_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "document_type")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nameLike")
    def name_like(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name_like")


class AwaitableGetDocumentsResult(GetDocumentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDocumentsResult(
            creator=self.creator,
            datas=self.datas,
            document_type=self.document_type,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name_like=self.name_like)


def get_documents(creator: Optional[_builtins.str] = None,
                  document_type: Optional[_builtins.str] = None,
                  enterprise_project_id: Optional[_builtins.str] = None,
                  name_like: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDocumentsResult:
    """
    Use this data source to get the list of COC documents.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.coc.get_documents()
    ```


    :param _builtins.str creator: Specifies the creator.
    :param _builtins.str document_type: Specifies the type of document being executed.
           The value can be **PUBLIC** or **NORMAL**. The default value is **NORMAL**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str name_like: Specifies the document name and support fuzzy query.
    """
    __args__ = dict()
    __args__['creator'] = creator
    __args__['documentType'] = document_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['nameLike'] = name_like
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:coc/getDocuments:getDocuments', __args__, opts=opts, typ=GetDocumentsResult).value

    return AwaitableGetDocumentsResult(
        creator=pulumi.get(__ret__, 'creator'),
        datas=pulumi.get(__ret__, 'datas'),
        document_type=pulumi.get(__ret__, 'document_type'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name_like=pulumi.get(__ret__, 'name_like'))
def get_documents_output(creator: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         document_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name_like: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDocumentsResult]:
    """
    Use this data source to get the list of COC documents.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.coc.get_documents()
    ```


    :param _builtins.str creator: Specifies the creator.
    :param _builtins.str document_type: Specifies the type of document being executed.
           The value can be **PUBLIC** or **NORMAL**. The default value is **NORMAL**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str name_like: Specifies the document name and support fuzzy query.
    """
    __args__ = dict()
    __args__['creator'] = creator
    __args__['documentType'] = document_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['nameLike'] = name_like
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:coc/getDocuments:getDocuments', __args__, opts=opts, typ=GetDocumentsResult)
    return __ret__.apply(lambda __response__: GetDocumentsResult(
        creator=pulumi.get(__response__, 'creator'),
        datas=pulumi.get(__response__, 'datas'),
        document_type=pulumi.get(__response__, 'document_type'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name_like=pulumi.get(__response__, 'name_like')))
