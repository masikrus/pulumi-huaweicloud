# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPatchComplianceReportItemsResult',
    'AwaitableGetPatchComplianceReportItemsResult',
    'get_patch_compliance_report_items',
    'get_patch_compliance_report_items_output',
]

@pulumi.output_type
class GetPatchComplianceReportItemsResult:
    """
    A collection of values returned by getPatchComplianceReportItems.
    """
    def __init__(__self__, classification=None, compliance_items=None, compliance_level=None, id=None, instance_compliant_id=None, patch_status=None, severity_level=None, sort_dir=None, sort_key=None, title=None):
        if classification and not isinstance(classification, str):
            raise TypeError("Expected argument 'classification' to be a str")
        pulumi.set(__self__, "classification", classification)
        if compliance_items and not isinstance(compliance_items, list):
            raise TypeError("Expected argument 'compliance_items' to be a list")
        pulumi.set(__self__, "compliance_items", compliance_items)
        if compliance_level and not isinstance(compliance_level, str):
            raise TypeError("Expected argument 'compliance_level' to be a str")
        pulumi.set(__self__, "compliance_level", compliance_level)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_compliant_id and not isinstance(instance_compliant_id, str):
            raise TypeError("Expected argument 'instance_compliant_id' to be a str")
        pulumi.set(__self__, "instance_compliant_id", instance_compliant_id)
        if patch_status and not isinstance(patch_status, str):
            raise TypeError("Expected argument 'patch_status' to be a str")
        pulumi.set(__self__, "patch_status", patch_status)
        if severity_level and not isinstance(severity_level, str):
            raise TypeError("Expected argument 'severity_level' to be a str")
        pulumi.set(__self__, "severity_level", severity_level)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter
    def classification(self) -> Optional[_builtins.str]:
        """
        Indicates the category.
        """
        return pulumi.get(self, "classification")

    @_builtins.property
    @pulumi.getter(name="complianceItems")
    def compliance_items(self) -> Sequence['outputs.GetPatchComplianceReportItemsComplianceItemResult']:
        """
        Indicates the patch compliance information.
        """
        return pulumi.get(self, "compliance_items")

    @_builtins.property
    @pulumi.getter(name="complianceLevel")
    def compliance_level(self) -> Optional[_builtins.str]:
        """
        Indicates the compliance level.
        """
        return pulumi.get(self, "compliance_level")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceCompliantId")
    def instance_compliant_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_compliant_id")

    @_builtins.property
    @pulumi.getter(name="patchStatus")
    def patch_status(self) -> Optional[_builtins.str]:
        """
        Indicates the patch status.
        """
        return pulumi.get(self, "patch_status")

    @_builtins.property
    @pulumi.getter(name="severityLevel")
    def severity_level(self) -> Optional[_builtins.str]:
        """
        Indicates the severity level.
        """
        return pulumi.get(self, "severity_level")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[_builtins.str]:
        """
        Indicates the patch name.
        """
        return pulumi.get(self, "title")


class AwaitableGetPatchComplianceReportItemsResult(GetPatchComplianceReportItemsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPatchComplianceReportItemsResult(
            classification=self.classification,
            compliance_items=self.compliance_items,
            compliance_level=self.compliance_level,
            id=self.id,
            instance_compliant_id=self.instance_compliant_id,
            patch_status=self.patch_status,
            severity_level=self.severity_level,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            title=self.title)


def get_patch_compliance_report_items(classification: Optional[_builtins.str] = None,
                                      compliance_level: Optional[_builtins.str] = None,
                                      instance_compliant_id: Optional[_builtins.str] = None,
                                      patch_status: Optional[_builtins.str] = None,
                                      severity_level: Optional[_builtins.str] = None,
                                      sort_dir: Optional[_builtins.str] = None,
                                      sort_key: Optional[_builtins.str] = None,
                                      title: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPatchComplianceReportItemsResult:
    """
    Use this data source to get the list of COC patch compliance report items.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_compliant_id = config.require_object("instanceCompliantId")
    test = huaweicloud.coc.get_patch_compliance_report_items(instance_compliant_id=instance_compliant_id)
    ```


    :param _builtins.str classification: Specifies the category.
    :param _builtins.str compliance_level: Specifies the compliance level.
    :param _builtins.str instance_compliant_id: Specifies the compliance report ID.
    :param _builtins.str patch_status: Specifies the patch status.
           Values can be as follows:
           + **INSTALLED**: A patch has been installed.
           + **INSTALLED_OTHER**: Other patches have been installed.
           + **MISSING**: A patch is missing.
           + **REJECT**: A patch is rejected.
           + **FAILED**: A patch fails to be installed.
           + **PENDING_REBOOT**: A patch has been installed and is waiting to be restarted.
    :param _builtins.str severity_level: Specifies the severity level.
    :param _builtins.str sort_dir: Specifies the sorting order.
           Values can be as follows:
           + **asc**: The query results are displayed in ascending order.
           + **desc**: The query results are displayed in the descending order.
    :param _builtins.str sort_key: Specifies the sorting field.
           Values can be **installed_time**.
    :param _builtins.str title: Specifies the patch name.
    """
    __args__ = dict()
    __args__['classification'] = classification
    __args__['complianceLevel'] = compliance_level
    __args__['instanceCompliantId'] = instance_compliant_id
    __args__['patchStatus'] = patch_status
    __args__['severityLevel'] = severity_level
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['title'] = title
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:coc/getPatchComplianceReportItems:getPatchComplianceReportItems', __args__, opts=opts, typ=GetPatchComplianceReportItemsResult).value

    return AwaitableGetPatchComplianceReportItemsResult(
        classification=pulumi.get(__ret__, 'classification'),
        compliance_items=pulumi.get(__ret__, 'compliance_items'),
        compliance_level=pulumi.get(__ret__, 'compliance_level'),
        id=pulumi.get(__ret__, 'id'),
        instance_compliant_id=pulumi.get(__ret__, 'instance_compliant_id'),
        patch_status=pulumi.get(__ret__, 'patch_status'),
        severity_level=pulumi.get(__ret__, 'severity_level'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        title=pulumi.get(__ret__, 'title'))
def get_patch_compliance_report_items_output(classification: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             compliance_level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             instance_compliant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                             patch_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             severity_level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             title: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPatchComplianceReportItemsResult]:
    """
    Use this data source to get the list of COC patch compliance report items.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_compliant_id = config.require_object("instanceCompliantId")
    test = huaweicloud.coc.get_patch_compliance_report_items(instance_compliant_id=instance_compliant_id)
    ```


    :param _builtins.str classification: Specifies the category.
    :param _builtins.str compliance_level: Specifies the compliance level.
    :param _builtins.str instance_compliant_id: Specifies the compliance report ID.
    :param _builtins.str patch_status: Specifies the patch status.
           Values can be as follows:
           + **INSTALLED**: A patch has been installed.
           + **INSTALLED_OTHER**: Other patches have been installed.
           + **MISSING**: A patch is missing.
           + **REJECT**: A patch is rejected.
           + **FAILED**: A patch fails to be installed.
           + **PENDING_REBOOT**: A patch has been installed and is waiting to be restarted.
    :param _builtins.str severity_level: Specifies the severity level.
    :param _builtins.str sort_dir: Specifies the sorting order.
           Values can be as follows:
           + **asc**: The query results are displayed in ascending order.
           + **desc**: The query results are displayed in the descending order.
    :param _builtins.str sort_key: Specifies the sorting field.
           Values can be **installed_time**.
    :param _builtins.str title: Specifies the patch name.
    """
    __args__ = dict()
    __args__['classification'] = classification
    __args__['complianceLevel'] = compliance_level
    __args__['instanceCompliantId'] = instance_compliant_id
    __args__['patchStatus'] = patch_status
    __args__['severityLevel'] = severity_level
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['title'] = title
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:coc/getPatchComplianceReportItems:getPatchComplianceReportItems', __args__, opts=opts, typ=GetPatchComplianceReportItemsResult)
    return __ret__.apply(lambda __response__: GetPatchComplianceReportItemsResult(
        classification=pulumi.get(__response__, 'classification'),
        compliance_items=pulumi.get(__response__, 'compliance_items'),
        compliance_level=pulumi.get(__response__, 'compliance_level'),
        id=pulumi.get(__response__, 'id'),
        instance_compliant_id=pulumi.get(__response__, 'instance_compliant_id'),
        patch_status=pulumi.get(__response__, 'patch_status'),
        severity_level=pulumi.get(__response__, 'severity_level'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        title=pulumi.get(__response__, 'title')))
