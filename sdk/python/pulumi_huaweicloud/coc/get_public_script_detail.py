# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPublicScriptDetailResult',
    'AwaitableGetPublicScriptDetailResult',
    'get_public_script_detail',
    'get_public_script_detail_output',
]

@pulumi.output_type
class GetPublicScriptDetailResult:
    """
    A collection of values returned by getPublicScriptDetail.
    """
    def __init__(__self__, content=None, description=None, gmt_created=None, id=None, name=None, properties=None, script_params=None, script_uuid=None, type=None):
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        pulumi.set(__self__, "content", content)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if gmt_created and not isinstance(gmt_created, int):
            raise TypeError("Expected argument 'gmt_created' to be a int")
        pulumi.set(__self__, "gmt_created", gmt_created)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if properties and not isinstance(properties, list):
            raise TypeError("Expected argument 'properties' to be a list")
        pulumi.set(__self__, "properties", properties)
        if script_params and not isinstance(script_params, list):
            raise TypeError("Expected argument 'script_params' to be a list")
        pulumi.set(__self__, "script_params", script_params)
        if script_uuid and not isinstance(script_uuid, str):
            raise TypeError("Expected argument 'script_uuid' to be a str")
        pulumi.set(__self__, "script_uuid", script_uuid)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Indicates the script content.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the script description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="gmtCreated")
    def gmt_created(self) -> _builtins.int:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "gmt_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the script name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetPublicScriptDetailPropertyResult']:
        """
        Indicates the script attachment property.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="scriptParams")
    def script_params(self) -> Sequence['outputs.GetPublicScriptDetailScriptParamResult']:
        """
        Indicates the script input parameters.
        """
        return pulumi.get(self, "script_params")

    @_builtins.property
    @pulumi.getter(name="scriptUuid")
    def script_uuid(self) -> _builtins.str:
        return pulumi.get(self, "script_uuid")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the script type.
        """
        return pulumi.get(self, "type")


class AwaitableGetPublicScriptDetailResult(GetPublicScriptDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicScriptDetailResult(
            content=self.content,
            description=self.description,
            gmt_created=self.gmt_created,
            id=self.id,
            name=self.name,
            properties=self.properties,
            script_params=self.script_params,
            script_uuid=self.script_uuid,
            type=self.type)


def get_public_script_detail(script_uuid: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicScriptDetailResult:
    """
    Use this data source to get the COC public script detail.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    script_uuid = config.require_object("scriptUuid")
    test = huaweicloud.coc.get_public_script_detail(script_uuid=script_uuid)
    ```


    :param _builtins.str script_uuid: Specifies the public script UUID.
    """
    __args__ = dict()
    __args__['scriptUuid'] = script_uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:coc/getPublicScriptDetail:getPublicScriptDetail', __args__, opts=opts, typ=GetPublicScriptDetailResult).value

    return AwaitableGetPublicScriptDetailResult(
        content=pulumi.get(__ret__, 'content'),
        description=pulumi.get(__ret__, 'description'),
        gmt_created=pulumi.get(__ret__, 'gmt_created'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        properties=pulumi.get(__ret__, 'properties'),
        script_params=pulumi.get(__ret__, 'script_params'),
        script_uuid=pulumi.get(__ret__, 'script_uuid'),
        type=pulumi.get(__ret__, 'type'))
def get_public_script_detail_output(script_uuid: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPublicScriptDetailResult]:
    """
    Use this data source to get the COC public script detail.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    script_uuid = config.require_object("scriptUuid")
    test = huaweicloud.coc.get_public_script_detail(script_uuid=script_uuid)
    ```


    :param _builtins.str script_uuid: Specifies the public script UUID.
    """
    __args__ = dict()
    __args__['scriptUuid'] = script_uuid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:coc/getPublicScriptDetail:getPublicScriptDetail', __args__, opts=opts, typ=GetPublicScriptDetailResult)
    return __ret__.apply(lambda __response__: GetPublicScriptDetailResult(
        content=pulumi.get(__response__, 'content'),
        description=pulumi.get(__response__, 'description'),
        gmt_created=pulumi.get(__response__, 'gmt_created'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        properties=pulumi.get(__response__, 'properties'),
        script_params=pulumi.get(__response__, 'script_params'),
        script_uuid=pulumi.get(__response__, 'script_uuid'),
        type=pulumi.get(__response__, 'type')))
