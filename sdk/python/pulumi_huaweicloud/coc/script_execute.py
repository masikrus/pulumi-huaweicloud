# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScriptExecuteArgs', 'ScriptExecute']

@pulumi.input_type
class ScriptExecuteArgs:
    def __init__(__self__, *,
                 execute_user: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 script_id: pulumi.Input[_builtins.str],
                 timeout: pulumi.Input[_builtins.int],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_sync: Optional[pulumi.Input[_builtins.bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ScriptExecuteParameterArgs']]]] = None):
        """
        The set of arguments for constructing a ScriptExecute resource.
        :param pulumi.Input[_builtins.str] execute_user: Specifies the user to execute the script.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ECS instance ID.
        :param pulumi.Input[_builtins.str] script_id: Specifies the COC script ID.
        :param pulumi.Input[_builtins.int] timeout: Specifies the maximum time to execute the script in seconds.
        :param pulumi.Input[_builtins.bool] is_sync: Specifies whether sync data before execute the script. Defaults to **true**.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['ScriptExecuteParameterArgs']]] parameters: Specifies the input parameters of the script.
               Up to 20 script parameters can be added.
               The parameters structure is documented below.
        """
        pulumi.set(__self__, "execute_user", execute_user)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "script_id", script_id)
        pulumi.set(__self__, "timeout", timeout)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_sync is not None:
            pulumi.set(__self__, "is_sync", is_sync)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter(name="executeUser")
    def execute_user(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the user to execute the script.
        """
        return pulumi.get(self, "execute_user")

    @execute_user.setter
    def execute_user(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "execute_user", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ECS instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the COC script ID.
        """
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "script_id", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the maximum time to execute the script in seconds.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isSync")
    def is_sync(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether sync data before execute the script. Defaults to **true**.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "is_sync")

    @is_sync.setter
    def is_sync(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_sync", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScriptExecuteParameterArgs']]]]:
        """
        Specifies the input parameters of the script.
        Up to 20 script parameters can be added.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScriptExecuteParameterArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class _ScriptExecuteState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 execute_user: Optional[pulumi.Input[_builtins.str]] = None,
                 finished_at: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_sync: Optional[pulumi.Input[_builtins.bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ScriptExecuteParameterArgs']]]] = None,
                 script_id: Optional[pulumi.Input[_builtins.str]] = None,
                 script_name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering ScriptExecute resources.
        :param pulumi.Input[_builtins.str] created_at: The start time of the script execution.
        :param pulumi.Input[_builtins.str] execute_user: Specifies the user to execute the script.
        :param pulumi.Input[_builtins.str] finished_at: The end time of the script execution.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ECS instance ID.
        :param pulumi.Input[_builtins.bool] is_sync: Specifies whether sync data before execute the script. Defaults to **true**.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['ScriptExecuteParameterArgs']]] parameters: Specifies the input parameters of the script.
               Up to 20 script parameters can be added.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.str] script_id: Specifies the COC script ID.
        :param pulumi.Input[_builtins.str] script_name: The script name.
        :param pulumi.Input[_builtins.str] status: The status of the script execution.
        :param pulumi.Input[_builtins.int] timeout: Specifies the maximum time to execute the script in seconds.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if execute_user is not None:
            pulumi.set(__self__, "execute_user", execute_user)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_sync is not None:
            pulumi.set(__self__, "is_sync", is_sync)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if script_name is not None:
            pulumi.set(__self__, "script_name", script_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The start time of the script execution.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="executeUser")
    def execute_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user to execute the script.
        """
        return pulumi.get(self, "execute_user")

    @execute_user.setter
    def execute_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "execute_user", value)

    @_builtins.property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The end time of the script execution.
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "finished_at", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ECS instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="isSync")
    def is_sync(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether sync data before execute the script. Defaults to **true**.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "is_sync")

    @is_sync.setter
    def is_sync(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_sync", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScriptExecuteParameterArgs']]]]:
        """
        Specifies the input parameters of the script.
        Up to 20 script parameters can be added.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScriptExecuteParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the COC script ID.
        """
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "script_id", value)

    @_builtins.property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The script name.
        """
        return pulumi.get(self, "script_name")

    @script_name.setter
    def script_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "script_name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the script execution.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum time to execute the script in seconds.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)


@pulumi.type_token("huaweicloud:coc/scriptExecute:ScriptExecute")
class ScriptExecute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 execute_user: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_sync: Optional[pulumi.Input[_builtins.bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScriptExecuteParameterArgs', 'ScriptExecuteParameterArgsDict']]]]] = None,
                 script_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Execute a COC script on a specified ECS instance within HuaweiCloud.

        > Please make sure the ECS instance has installed the [UniAgent](https://support.huaweicloud.com/intl/en-us/usermanual-aom2/agent_01_0005.html).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        script_id = config.require_object("scriptId")
        instance_id = config.require_object("instanceId")
        test = huaweicloud.coc.ScriptExecute("test",
            script_id=script_id,
            instance_id=instance_id,
            timeout=600,
            execute_user="root",
            parameters=[
                {
                    "name": "param1",
                    "value": "value1",
                },
                {
                    "name": "param2",
                    "value": "value2",
                },
            ])
        ```

        ## Import

        The COC script execution can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:coc/scriptExecute:ScriptExecute test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include `instance_id`, `parameters` and `is_sync`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_coc_script_execute" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              instance_id, parameters, is_sync
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] execute_user: Specifies the user to execute the script.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ECS instance ID.
        :param pulumi.Input[_builtins.bool] is_sync: Specifies whether sync data before execute the script. Defaults to **true**.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScriptExecuteParameterArgs', 'ScriptExecuteParameterArgsDict']]]] parameters: Specifies the input parameters of the script.
               Up to 20 script parameters can be added.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.str] script_id: Specifies the COC script ID.
        :param pulumi.Input[_builtins.int] timeout: Specifies the maximum time to execute the script in seconds.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScriptExecuteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Execute a COC script on a specified ECS instance within HuaweiCloud.

        > Please make sure the ECS instance has installed the [UniAgent](https://support.huaweicloud.com/intl/en-us/usermanual-aom2/agent_01_0005.html).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        script_id = config.require_object("scriptId")
        instance_id = config.require_object("instanceId")
        test = huaweicloud.coc.ScriptExecute("test",
            script_id=script_id,
            instance_id=instance_id,
            timeout=600,
            execute_user="root",
            parameters=[
                {
                    "name": "param1",
                    "value": "value1",
                },
                {
                    "name": "param2",
                    "value": "value2",
                },
            ])
        ```

        ## Import

        The COC script execution can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:coc/scriptExecute:ScriptExecute test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include `instance_id`, `parameters` and `is_sync`.

        It is generally recommended running `pulumi preview` after importing the resource.

        You can then decide if changes should be applied to the instance, or the resource definition should be updated to

        align with the resource. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_coc_script_execute" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              instance_id, parameters, is_sync
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ScriptExecuteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScriptExecuteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 execute_user: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_sync: Optional[pulumi.Input[_builtins.bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScriptExecuteParameterArgs', 'ScriptExecuteParameterArgsDict']]]]] = None,
                 script_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScriptExecuteArgs.__new__(ScriptExecuteArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if execute_user is None and not opts.urn:
                raise TypeError("Missing required property 'execute_user'")
            __props__.__dict__["execute_user"] = execute_user
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["is_sync"] = is_sync
            __props__.__dict__["parameters"] = parameters
            if script_id is None and not opts.urn:
                raise TypeError("Missing required property 'script_id'")
            __props__.__dict__["script_id"] = script_id
            if timeout is None and not opts.urn:
                raise TypeError("Missing required property 'timeout'")
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["created_at"] = None
            __props__.__dict__["finished_at"] = None
            __props__.__dict__["script_name"] = None
            __props__.__dict__["status"] = None
        super(ScriptExecute, __self__).__init__(
            'huaweicloud:coc/scriptExecute:ScriptExecute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            execute_user: Optional[pulumi.Input[_builtins.str]] = None,
            finished_at: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_sync: Optional[pulumi.Input[_builtins.bool]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScriptExecuteParameterArgs', 'ScriptExecuteParameterArgsDict']]]]] = None,
            script_id: Optional[pulumi.Input[_builtins.str]] = None,
            script_name: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeout: Optional[pulumi.Input[_builtins.int]] = None) -> 'ScriptExecute':
        """
        Get an existing ScriptExecute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The start time of the script execution.
        :param pulumi.Input[_builtins.str] execute_user: Specifies the user to execute the script.
        :param pulumi.Input[_builtins.str] finished_at: The end time of the script execution.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ECS instance ID.
        :param pulumi.Input[_builtins.bool] is_sync: Specifies whether sync data before execute the script. Defaults to **true**.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScriptExecuteParameterArgs', 'ScriptExecuteParameterArgsDict']]]] parameters: Specifies the input parameters of the script.
               Up to 20 script parameters can be added.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.str] script_id: Specifies the COC script ID.
        :param pulumi.Input[_builtins.str] script_name: The script name.
        :param pulumi.Input[_builtins.str] status: The status of the script execution.
        :param pulumi.Input[_builtins.int] timeout: Specifies the maximum time to execute the script in seconds.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScriptExecuteState.__new__(_ScriptExecuteState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["execute_user"] = execute_user
        __props__.__dict__["finished_at"] = finished_at
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_sync"] = is_sync
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["script_id"] = script_id
        __props__.__dict__["script_name"] = script_name
        __props__.__dict__["status"] = status
        __props__.__dict__["timeout"] = timeout
        return ScriptExecute(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The start time of the script execution.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="executeUser")
    def execute_user(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the user to execute the script.
        """
        return pulumi.get(self, "execute_user")

    @_builtins.property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> pulumi.Output[_builtins.str]:
        """
        The end time of the script execution.
        """
        return pulumi.get(self, "finished_at")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ECS instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isSync")
    def is_sync(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether sync data before execute the script. Defaults to **true**.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "is_sync")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Sequence['outputs.ScriptExecuteParameter']]]:
        """
        Specifies the input parameters of the script.
        Up to 20 script parameters can be added.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the COC script ID.
        """
        return pulumi.get(self, "script_id")

    @_builtins.property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> pulumi.Output[_builtins.str]:
        """
        The script name.
        """
        return pulumi.get(self, "script_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the script execution.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the maximum time to execute the script in seconds.
        """
        return pulumi.get(self, "timeout")

