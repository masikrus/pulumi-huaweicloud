# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScriptArgs', 'Script']

@pulumi.input_type
class ScriptArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[_builtins.str],
                 description: pulumi.Input[_builtins.str],
                 risk_level: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ScriptParameterArgs']]]] = None):
        """
        The set of arguments for constructing a Script resource.
        :param pulumi.Input[_builtins.str] content: Specifies the content of the script.
               The value can consist of up to 4096 characters.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the parameter.
        :param pulumi.Input[_builtins.str] risk_level: Specifies the risk level. The valid values are **LOW**, **MEDIUM** and **HIGH**.
        :param pulumi.Input[_builtins.str] type: Specifies the content type of the script.
               The valid values are **SHELL**, **PYTHON** and **BAT**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the script. For example, **1.0.0** or **1.1.0**.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parameter.
        :param pulumi.Input[Sequence[pulumi.Input['ScriptParameterArgs']]] parameters: Specifies the input parameters of the script.
               Up to 20 script parameters can be added. The parameters structure is documented below.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the content of the script.
        The value can consist of up to 4096 characters.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the description of the parameter.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the risk level. The valid values are **LOW**, **MEDIUM** and **HIGH**.
        """
        return pulumi.get(self, "risk_level")

    @risk_level.setter
    def risk_level(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "risk_level", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the content type of the script.
        The valid values are **SHELL**, **PYTHON** and **BAT**. Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the version of the script. For example, **1.0.0** or **1.1.0**.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScriptParameterArgs']]]]:
        """
        Specifies the input parameters of the script.
        Up to 20 script parameters can be added. The parameters structure is documented below.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScriptParameterArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class _ScriptState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ScriptParameterArgs']]]] = None,
                 risk_level: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Script resources.
        :param pulumi.Input[_builtins.str] content: Specifies the content of the script.
               The value can consist of up to 4096 characters.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the script.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the parameter.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parameter.
        :param pulumi.Input[Sequence[pulumi.Input['ScriptParameterArgs']]] parameters: Specifies the input parameters of the script.
               Up to 20 script parameters can be added. The parameters structure is documented below.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] risk_level: Specifies the risk level. The valid values are **LOW**, **MEDIUM** and **HIGH**.
        :param pulumi.Input[_builtins.str] status: The status of the script.
        :param pulumi.Input[_builtins.str] type: Specifies the content type of the script.
               The valid values are **SHELL**, **PYTHON** and **BAT**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the script.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the script. For example, **1.0.0** or **1.1.0**.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the content of the script.
        The value can consist of up to 4096 characters.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the script.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the parameter.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScriptParameterArgs']]]]:
        """
        Specifies the input parameters of the script.
        Up to 20 script parameters can be added. The parameters structure is documented below.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScriptParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the risk level. The valid values are **LOW**, **MEDIUM** and **HIGH**.
        """
        return pulumi.get(self, "risk_level")

    @risk_level.setter
    def risk_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "risk_level", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the script.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the content type of the script.
        The valid values are **SHELL**, **PYTHON** and **BAT**. Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the script.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the script. For example, **1.0.0** or **1.1.0**.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("huaweicloud:coc/script:Script")
class Script(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScriptParameterArgs', 'ScriptParameterArgsDict']]]]] = None,
                 risk_level: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a COC script resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.coc.Script("test",
            name="demo",
            description="a demo script",
            risk_level="LOW",
            version="1.0.0",
            type="SHELL",
            content=\"\"\"#! /bin/bash
        echo "hello ${name}!"
        \"\"\",
            parameters=[{
                "name": "name",
                "value": "world",
                "description": "the first parameter",
            }])
        ```

        ## Import

        The COC script can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:coc/script:Script test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] content: Specifies the content of the script.
               The value can consist of up to 4096 characters.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the parameter.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parameter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScriptParameterArgs', 'ScriptParameterArgsDict']]]] parameters: Specifies the input parameters of the script.
               Up to 20 script parameters can be added. The parameters structure is documented below.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] risk_level: Specifies the risk level. The valid values are **LOW**, **MEDIUM** and **HIGH**.
        :param pulumi.Input[_builtins.str] type: Specifies the content type of the script.
               The valid values are **SHELL**, **PYTHON** and **BAT**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the script. For example, **1.0.0** or **1.1.0**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScriptArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a COC script resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.coc.Script("test",
            name="demo",
            description="a demo script",
            risk_level="LOW",
            version="1.0.0",
            type="SHELL",
            content=\"\"\"#! /bin/bash
        echo "hello ${name}!"
        \"\"\",
            parameters=[{
                "name": "name",
                "value": "world",
                "description": "the first parameter",
            }])
        ```

        ## Import

        The COC script can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:coc/script:Script test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ScriptArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScriptArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScriptParameterArgs', 'ScriptParameterArgsDict']]]]] = None,
                 risk_level: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScriptArgs.__new__(ScriptArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = parameters
            if risk_level is None and not opts.urn:
                raise TypeError("Missing required property 'risk_level'")
            __props__.__dict__["risk_level"] = risk_level
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(Script, __self__).__init__(
            'huaweicloud:coc/script:Script',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ScriptParameterArgs', 'ScriptParameterArgsDict']]]]] = None,
            risk_level: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'Script':
        """
        Get an existing Script resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] content: Specifies the content of the script.
               The value can consist of up to 4096 characters.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the script.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the parameter.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the parameter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ScriptParameterArgs', 'ScriptParameterArgsDict']]]] parameters: Specifies the input parameters of the script.
               Up to 20 script parameters can be added. The parameters structure is documented below.
               
               <a name="block--parameters"></a>
               The `parameters` block supports:
        :param pulumi.Input[_builtins.str] risk_level: Specifies the risk level. The valid values are **LOW**, **MEDIUM** and **HIGH**.
        :param pulumi.Input[_builtins.str] status: The status of the script.
        :param pulumi.Input[_builtins.str] type: Specifies the content type of the script.
               The valid values are **SHELL**, **PYTHON** and **BAT**. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the script.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the script. For example, **1.0.0** or **1.1.0**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScriptState.__new__(_ScriptState)

        __props__.__dict__["content"] = content
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["risk_level"] = risk_level
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version"] = version
        return Script(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the content of the script.
        The value can consist of up to 4096 characters.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the script.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Sequence['outputs.ScriptParameter']]]:
        """
        Specifies the input parameters of the script.
        Up to 20 script parameters can be added. The parameters structure is documented below.

        <a name="block--parameters"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the risk level. The valid values are **LOW**, **MEDIUM** and **HIGH**.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the script.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the content type of the script.
        The valid values are **SHELL**, **PYTHON** and **BAT**. Changing this creates a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the script.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the version of the script. For example, **1.0.0** or **1.1.0**.
        """
        return pulumi.get(self, "version")

