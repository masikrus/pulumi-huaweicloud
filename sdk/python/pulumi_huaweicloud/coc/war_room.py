# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WarRoomArgs', 'WarRoom']

@pulumi.input_type
class WarRoomArgs:
    def __init__(__self__, *,
                 application_id_lists: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 enterprise_project_id: pulumi.Input[_builtins.str],
                 incident_number: pulumi.Input[_builtins.str],
                 schedule_groups: pulumi.Input[Sequence[pulumi.Input['WarRoomScheduleGroupArgs']]],
                 war_room_admin: pulumi.Input[_builtins.str],
                 war_room_name: pulumi.Input[_builtins.str],
                 application_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_type: Optional[pulumi.Input[_builtins.str]] = None,
                 participants: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region_code_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a WarRoom resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_id_lists: Specifies the ID list of the affected applications.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[_builtins.str] incident_number: Specifies the incident ticket ID.
        :param pulumi.Input[Sequence[pulumi.Input['WarRoomScheduleGroupArgs']]] schedule_groups: Specifies the scheduling group information.
               The schedule_group structure is documented below.
        :param pulumi.Input[_builtins.str] war_room_admin: Specifies the war room administrator user ID.
        :param pulumi.Input[_builtins.str] war_room_name: Specifies the war room name.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_names: Specifies the application name list.
        :param pulumi.Input[_builtins.str] description: Specifies the war room description.
        :param pulumi.Input[_builtins.str] notification_type: Specifies the group creation mode.
               Values can be as follows:
               + **WECHAT**: WeChat.
               + **DING_TALK**: DingTalk.
               + **LARK**: Lark.
               + **NULL_GROUP**: No notification is sent to the group.
               
               <a name="block--schedule_group"></a>
               The `schedule_group` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] participants: Specifies the user ID list of participants.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_code_lists: Specifies the ID list of regions.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_names: Specifies the region names.
        """
        pulumi.set(__self__, "application_id_lists", application_id_lists)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "incident_number", incident_number)
        pulumi.set(__self__, "schedule_groups", schedule_groups)
        pulumi.set(__self__, "war_room_admin", war_room_admin)
        pulumi.set(__self__, "war_room_name", war_room_name)
        if application_names is not None:
            pulumi.set(__self__, "application_names", application_names)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if participants is not None:
            pulumi.set(__self__, "participants", participants)
        if region_code_lists is not None:
            pulumi.set(__self__, "region_code_lists", region_code_lists)
        if region_names is not None:
            pulumi.set(__self__, "region_names", region_names)

    @_builtins.property
    @pulumi.getter(name="applicationIdLists")
    def application_id_lists(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the ID list of the affected applications.
        """
        return pulumi.get(self, "application_id_lists")

    @application_id_lists.setter
    def application_id_lists(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "application_id_lists", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="incidentNumber")
    def incident_number(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the incident ticket ID.
        """
        return pulumi.get(self, "incident_number")

    @incident_number.setter
    def incident_number(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "incident_number", value)

    @_builtins.property
    @pulumi.getter(name="scheduleGroups")
    def schedule_groups(self) -> pulumi.Input[Sequence[pulumi.Input['WarRoomScheduleGroupArgs']]]:
        """
        Specifies the scheduling group information.
        The schedule_group structure is documented below.
        """
        return pulumi.get(self, "schedule_groups")

    @schedule_groups.setter
    def schedule_groups(self, value: pulumi.Input[Sequence[pulumi.Input['WarRoomScheduleGroupArgs']]]):
        pulumi.set(self, "schedule_groups", value)

    @_builtins.property
    @pulumi.getter(name="warRoomAdmin")
    def war_room_admin(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the war room administrator user ID.
        """
        return pulumi.get(self, "war_room_admin")

    @war_room_admin.setter
    def war_room_admin(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "war_room_admin", value)

    @_builtins.property
    @pulumi.getter(name="warRoomName")
    def war_room_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the war room name.
        """
        return pulumi.get(self, "war_room_name")

    @war_room_name.setter
    def war_room_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "war_room_name", value)

    @_builtins.property
    @pulumi.getter(name="applicationNames")
    def application_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the application name list.
        """
        return pulumi.get(self, "application_names")

    @application_names.setter
    def application_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "application_names", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the war room description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group creation mode.
        Values can be as follows:
        + **WECHAT**: WeChat.
        + **DING_TALK**: DingTalk.
        + **LARK**: Lark.
        + **NULL_GROUP**: No notification is sent to the group.

        <a name="block--schedule_group"></a>
        The `schedule_group` block supports:
        """
        return pulumi.get(self, "notification_type")

    @notification_type.setter
    def notification_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_type", value)

    @_builtins.property
    @pulumi.getter
    def participants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the user ID list of participants.
        """
        return pulumi.get(self, "participants")

    @participants.setter
    def participants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "participants", value)

    @_builtins.property
    @pulumi.getter(name="regionCodeLists")
    def region_code_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID list of regions.
        """
        return pulumi.get(self, "region_code_lists")

    @region_code_lists.setter
    def region_code_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "region_code_lists", value)

    @_builtins.property
    @pulumi.getter(name="regionNames")
    def region_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the region names.
        """
        return pulumi.get(self, "region_names")

    @region_names.setter
    def region_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "region_names", value)


@pulumi.input_type
class _WarRoomState:
    def __init__(__self__, *,
                 application_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 application_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 change_num: Optional[pulumi.Input[_builtins.str]] = None,
                 circular_level: Optional[pulumi.Input[_builtins.str]] = None,
                 create_time: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 fault_cause: Optional[pulumi.Input[_builtins.str]] = None,
                 fault_impact: Optional[pulumi.Input[_builtins.str]] = None,
                 first_report_time: Optional[pulumi.Input[_builtins.int]] = None,
                 incident_number: Optional[pulumi.Input[_builtins.str]] = None,
                 incidents: Optional[pulumi.Input[Sequence[pulumi.Input['WarRoomIncidentArgs']]]] = None,
                 notification_type: Optional[pulumi.Input[_builtins.str]] = None,
                 occur_time: Optional[pulumi.Input[_builtins.int]] = None,
                 participants: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 processing_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 recover_leaders: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 recover_members: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 recover_time: Optional[pulumi.Input[_builtins.int]] = None,
                 recovery_notification_time: Optional[pulumi.Input[_builtins.int]] = None,
                 region_code_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 restoration_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 schedule_groups: Optional[pulumi.Input[Sequence[pulumi.Input['WarRoomScheduleGroupArgs']]]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 war_room_admin: Optional[pulumi.Input[_builtins.str]] = None,
                 war_room_id: Optional[pulumi.Input[_builtins.str]] = None,
                 war_room_name: Optional[pulumi.Input[_builtins.str]] = None,
                 war_room_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['WarRoomWarRoomStatusArgs']]]] = None):
        """
        Input properties used for looking up and filtering WarRoom resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_id_lists: Specifies the ID list of the affected applications.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_names: Specifies the application name list.
        :param pulumi.Input[_builtins.str] change_num: Indicates the change ticket number.
        :param pulumi.Input[_builtins.str] circular_level: Indicates the notification level. The notification level is the same as the incident level in the
               tenant zone.
        :param pulumi.Input[_builtins.int] create_time: Indicates the creation time.
        :param pulumi.Input[_builtins.str] description: Specifies the war room description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[_builtins.str] fault_cause: Indicates the fault cause.
        :param pulumi.Input[_builtins.str] fault_impact: Indicates the impact of the fault.
        :param pulumi.Input[_builtins.int] first_report_time: Indicates the first notification time.
        :param pulumi.Input[_builtins.str] incident_number: Specifies the incident ticket ID.
        :param pulumi.Input[Sequence[pulumi.Input['WarRoomIncidentArgs']]] incidents: Indicates the incident.
        :param pulumi.Input[_builtins.str] notification_type: Specifies the group creation mode.
               Values can be as follows:
               + **WECHAT**: WeChat.
               + **DING_TALK**: DingTalk.
               + **LARK**: Lark.
               + **NULL_GROUP**: No notification is sent to the group.
               
               <a name="block--schedule_group"></a>
               The `schedule_group` block supports:
        :param pulumi.Input[_builtins.int] occur_time: Indicates the occurrence start time.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] participants: Specifies the user ID list of participants.
        :param pulumi.Input[_builtins.int] processing_duration: Indicates the handling duration, the unit is minutes.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] recover_leaders: Indicates the primary recovery owner.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] recover_members: Indicates the members of recovery.
        :param pulumi.Input[_builtins.int] recover_time: Indicates the fault recovery time.
        :param pulumi.Input[_builtins.int] recovery_notification_time: Indicates the recovery notification time.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_code_lists: Specifies the ID list of regions.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_names: Specifies the region names.
        :param pulumi.Input[_builtins.int] restoration_duration: Indicates the recovery duration, the unit is minutes.
        :param pulumi.Input[Sequence[pulumi.Input['WarRoomScheduleGroupArgs']]] schedule_groups: Specifies the scheduling group information.
               The schedule_group structure is documented below.
        :param pulumi.Input[_builtins.str] source: Indicates the incident source.
        :param pulumi.Input[_builtins.str] war_room_admin: Specifies the war room administrator user ID.
        :param pulumi.Input[_builtins.str] war_room_id: Indicates the war room ID.
        :param pulumi.Input[_builtins.str] war_room_name: Specifies the war room name.
        :param pulumi.Input[Sequence[pulumi.Input['WarRoomWarRoomStatusArgs']]] war_room_statuses: Indicates the war room status.
        """
        if application_id_lists is not None:
            pulumi.set(__self__, "application_id_lists", application_id_lists)
        if application_names is not None:
            pulumi.set(__self__, "application_names", application_names)
        if change_num is not None:
            pulumi.set(__self__, "change_num", change_num)
        if circular_level is not None:
            pulumi.set(__self__, "circular_level", circular_level)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if fault_cause is not None:
            pulumi.set(__self__, "fault_cause", fault_cause)
        if fault_impact is not None:
            pulumi.set(__self__, "fault_impact", fault_impact)
        if first_report_time is not None:
            pulumi.set(__self__, "first_report_time", first_report_time)
        if incident_number is not None:
            pulumi.set(__self__, "incident_number", incident_number)
        if incidents is not None:
            pulumi.set(__self__, "incidents", incidents)
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if occur_time is not None:
            pulumi.set(__self__, "occur_time", occur_time)
        if participants is not None:
            pulumi.set(__self__, "participants", participants)
        if processing_duration is not None:
            pulumi.set(__self__, "processing_duration", processing_duration)
        if recover_leaders is not None:
            pulumi.set(__self__, "recover_leaders", recover_leaders)
        if recover_members is not None:
            pulumi.set(__self__, "recover_members", recover_members)
        if recover_time is not None:
            pulumi.set(__self__, "recover_time", recover_time)
        if recovery_notification_time is not None:
            pulumi.set(__self__, "recovery_notification_time", recovery_notification_time)
        if region_code_lists is not None:
            pulumi.set(__self__, "region_code_lists", region_code_lists)
        if region_names is not None:
            pulumi.set(__self__, "region_names", region_names)
        if restoration_duration is not None:
            pulumi.set(__self__, "restoration_duration", restoration_duration)
        if schedule_groups is not None:
            pulumi.set(__self__, "schedule_groups", schedule_groups)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if war_room_admin is not None:
            pulumi.set(__self__, "war_room_admin", war_room_admin)
        if war_room_id is not None:
            pulumi.set(__self__, "war_room_id", war_room_id)
        if war_room_name is not None:
            pulumi.set(__self__, "war_room_name", war_room_name)
        if war_room_statuses is not None:
            pulumi.set(__self__, "war_room_statuses", war_room_statuses)

    @_builtins.property
    @pulumi.getter(name="applicationIdLists")
    def application_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID list of the affected applications.
        """
        return pulumi.get(self, "application_id_lists")

    @application_id_lists.setter
    def application_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "application_id_lists", value)

    @_builtins.property
    @pulumi.getter(name="applicationNames")
    def application_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the application name list.
        """
        return pulumi.get(self, "application_names")

    @application_names.setter
    def application_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "application_names", value)

    @_builtins.property
    @pulumi.getter(name="changeNum")
    def change_num(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the change ticket number.
        """
        return pulumi.get(self, "change_num")

    @change_num.setter
    def change_num(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "change_num", value)

    @_builtins.property
    @pulumi.getter(name="circularLevel")
    def circular_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the notification level. The notification level is the same as the incident level in the
        tenant zone.
        """
        return pulumi.get(self, "circular_level")

    @circular_level.setter
    def circular_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "circular_level", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the war room description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="faultCause")
    def fault_cause(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the fault cause.
        """
        return pulumi.get(self, "fault_cause")

    @fault_cause.setter
    def fault_cause(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fault_cause", value)

    @_builtins.property
    @pulumi.getter(name="faultImpact")
    def fault_impact(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the impact of the fault.
        """
        return pulumi.get(self, "fault_impact")

    @fault_impact.setter
    def fault_impact(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fault_impact", value)

    @_builtins.property
    @pulumi.getter(name="firstReportTime")
    def first_report_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the first notification time.
        """
        return pulumi.get(self, "first_report_time")

    @first_report_time.setter
    def first_report_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "first_report_time", value)

    @_builtins.property
    @pulumi.getter(name="incidentNumber")
    def incident_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the incident ticket ID.
        """
        return pulumi.get(self, "incident_number")

    @incident_number.setter
    def incident_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "incident_number", value)

    @_builtins.property
    @pulumi.getter
    def incidents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WarRoomIncidentArgs']]]]:
        """
        Indicates the incident.
        """
        return pulumi.get(self, "incidents")

    @incidents.setter
    def incidents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WarRoomIncidentArgs']]]]):
        pulumi.set(self, "incidents", value)

    @_builtins.property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group creation mode.
        Values can be as follows:
        + **WECHAT**: WeChat.
        + **DING_TALK**: DingTalk.
        + **LARK**: Lark.
        + **NULL_GROUP**: No notification is sent to the group.

        <a name="block--schedule_group"></a>
        The `schedule_group` block supports:
        """
        return pulumi.get(self, "notification_type")

    @notification_type.setter
    def notification_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_type", value)

    @_builtins.property
    @pulumi.getter(name="occurTime")
    def occur_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the occurrence start time.
        """
        return pulumi.get(self, "occur_time")

    @occur_time.setter
    def occur_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "occur_time", value)

    @_builtins.property
    @pulumi.getter
    def participants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the user ID list of participants.
        """
        return pulumi.get(self, "participants")

    @participants.setter
    def participants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "participants", value)

    @_builtins.property
    @pulumi.getter(name="processingDuration")
    def processing_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the handling duration, the unit is minutes.
        """
        return pulumi.get(self, "processing_duration")

    @processing_duration.setter
    def processing_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "processing_duration", value)

    @_builtins.property
    @pulumi.getter(name="recoverLeaders")
    def recover_leaders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the primary recovery owner.
        """
        return pulumi.get(self, "recover_leaders")

    @recover_leaders.setter
    def recover_leaders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "recover_leaders", value)

    @_builtins.property
    @pulumi.getter(name="recoverMembers")
    def recover_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the members of recovery.
        """
        return pulumi.get(self, "recover_members")

    @recover_members.setter
    def recover_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "recover_members", value)

    @_builtins.property
    @pulumi.getter(name="recoverTime")
    def recover_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the fault recovery time.
        """
        return pulumi.get(self, "recover_time")

    @recover_time.setter
    def recover_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "recover_time", value)

    @_builtins.property
    @pulumi.getter(name="recoveryNotificationTime")
    def recovery_notification_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the recovery notification time.
        """
        return pulumi.get(self, "recovery_notification_time")

    @recovery_notification_time.setter
    def recovery_notification_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "recovery_notification_time", value)

    @_builtins.property
    @pulumi.getter(name="regionCodeLists")
    def region_code_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the ID list of regions.
        """
        return pulumi.get(self, "region_code_lists")

    @region_code_lists.setter
    def region_code_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "region_code_lists", value)

    @_builtins.property
    @pulumi.getter(name="regionNames")
    def region_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the region names.
        """
        return pulumi.get(self, "region_names")

    @region_names.setter
    def region_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "region_names", value)

    @_builtins.property
    @pulumi.getter(name="restorationDuration")
    def restoration_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the recovery duration, the unit is minutes.
        """
        return pulumi.get(self, "restoration_duration")

    @restoration_duration.setter
    def restoration_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "restoration_duration", value)

    @_builtins.property
    @pulumi.getter(name="scheduleGroups")
    def schedule_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WarRoomScheduleGroupArgs']]]]:
        """
        Specifies the scheduling group information.
        The schedule_group structure is documented below.
        """
        return pulumi.get(self, "schedule_groups")

    @schedule_groups.setter
    def schedule_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WarRoomScheduleGroupArgs']]]]):
        pulumi.set(self, "schedule_groups", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the incident source.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="warRoomAdmin")
    def war_room_admin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the war room administrator user ID.
        """
        return pulumi.get(self, "war_room_admin")

    @war_room_admin.setter
    def war_room_admin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "war_room_admin", value)

    @_builtins.property
    @pulumi.getter(name="warRoomId")
    def war_room_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the war room ID.
        """
        return pulumi.get(self, "war_room_id")

    @war_room_id.setter
    def war_room_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "war_room_id", value)

    @_builtins.property
    @pulumi.getter(name="warRoomName")
    def war_room_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the war room name.
        """
        return pulumi.get(self, "war_room_name")

    @war_room_name.setter
    def war_room_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "war_room_name", value)

    @_builtins.property
    @pulumi.getter(name="warRoomStatuses")
    def war_room_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WarRoomWarRoomStatusArgs']]]]:
        """
        Indicates the war room status.
        """
        return pulumi.get(self, "war_room_statuses")

    @war_room_statuses.setter
    def war_room_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WarRoomWarRoomStatusArgs']]]]):
        pulumi.set(self, "war_room_statuses", value)


@pulumi.type_token("huaweicloud:coc/warRoom:WarRoom")
class WarRoom(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 application_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 incident_number: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_type: Optional[pulumi.Input[_builtins.str]] = None,
                 participants: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region_code_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 schedule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WarRoomScheduleGroupArgs', 'WarRoomScheduleGroupArgsDict']]]]] = None,
                 war_room_admin: Optional[pulumi.Input[_builtins.str]] = None,
                 war_room_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a COC war room resource within HuaweiCloud.

        > Deleting war room resource is not supported, it will only be removed from the state.

        ## Import

        The COC war room can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:coc/warRoom:WarRoom test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `schedule_group`, `participant` and `notification_type`.

        It is generally recommended running `pulumi preview`  after importing a war room.

        You can then decide if changes should be applied to the war room, or the resource definition should be updated to

        align with the war room. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_coc_war_room" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              schedule_group, participant, notification_type,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_id_lists: Specifies the ID list of the affected applications.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_names: Specifies the application name list.
        :param pulumi.Input[_builtins.str] description: Specifies the war room description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[_builtins.str] incident_number: Specifies the incident ticket ID.
        :param pulumi.Input[_builtins.str] notification_type: Specifies the group creation mode.
               Values can be as follows:
               + **WECHAT**: WeChat.
               + **DING_TALK**: DingTalk.
               + **LARK**: Lark.
               + **NULL_GROUP**: No notification is sent to the group.
               
               <a name="block--schedule_group"></a>
               The `schedule_group` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] participants: Specifies the user ID list of participants.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_code_lists: Specifies the ID list of regions.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_names: Specifies the region names.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WarRoomScheduleGroupArgs', 'WarRoomScheduleGroupArgsDict']]]] schedule_groups: Specifies the scheduling group information.
               The schedule_group structure is documented below.
        :param pulumi.Input[_builtins.str] war_room_admin: Specifies the war room administrator user ID.
        :param pulumi.Input[_builtins.str] war_room_name: Specifies the war room name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WarRoomArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a COC war room resource within HuaweiCloud.

        > Deleting war room resource is not supported, it will only be removed from the state.

        ## Import

        The COC war room can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:coc/warRoom:WarRoom test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason.

        The missing attributes include: `schedule_group`, `participant` and `notification_type`.

        It is generally recommended running `pulumi preview`  after importing a war room.

        You can then decide if changes should be applied to the war room, or the resource definition should be updated to

        align with the war room. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_coc_war_room" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              schedule_group, participant, notification_type,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param WarRoomArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WarRoomArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 application_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 incident_number: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_type: Optional[pulumi.Input[_builtins.str]] = None,
                 participants: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region_code_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 schedule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WarRoomScheduleGroupArgs', 'WarRoomScheduleGroupArgsDict']]]]] = None,
                 war_room_admin: Optional[pulumi.Input[_builtins.str]] = None,
                 war_room_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WarRoomArgs.__new__(WarRoomArgs)

            if application_id_lists is None and not opts.urn:
                raise TypeError("Missing required property 'application_id_lists'")
            __props__.__dict__["application_id_lists"] = application_id_lists
            __props__.__dict__["application_names"] = application_names
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_force_new"] = enable_force_new
            if enterprise_project_id is None and not opts.urn:
                raise TypeError("Missing required property 'enterprise_project_id'")
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if incident_number is None and not opts.urn:
                raise TypeError("Missing required property 'incident_number'")
            __props__.__dict__["incident_number"] = incident_number
            __props__.__dict__["notification_type"] = notification_type
            __props__.__dict__["participants"] = participants
            __props__.__dict__["region_code_lists"] = region_code_lists
            __props__.__dict__["region_names"] = region_names
            if schedule_groups is None and not opts.urn:
                raise TypeError("Missing required property 'schedule_groups'")
            __props__.__dict__["schedule_groups"] = schedule_groups
            if war_room_admin is None and not opts.urn:
                raise TypeError("Missing required property 'war_room_admin'")
            __props__.__dict__["war_room_admin"] = war_room_admin
            if war_room_name is None and not opts.urn:
                raise TypeError("Missing required property 'war_room_name'")
            __props__.__dict__["war_room_name"] = war_room_name
            __props__.__dict__["change_num"] = None
            __props__.__dict__["circular_level"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["fault_cause"] = None
            __props__.__dict__["fault_impact"] = None
            __props__.__dict__["first_report_time"] = None
            __props__.__dict__["incidents"] = None
            __props__.__dict__["occur_time"] = None
            __props__.__dict__["processing_duration"] = None
            __props__.__dict__["recover_leaders"] = None
            __props__.__dict__["recover_members"] = None
            __props__.__dict__["recover_time"] = None
            __props__.__dict__["recovery_notification_time"] = None
            __props__.__dict__["restoration_duration"] = None
            __props__.__dict__["source"] = None
            __props__.__dict__["war_room_id"] = None
            __props__.__dict__["war_room_statuses"] = None
        super(WarRoom, __self__).__init__(
            'huaweicloud:coc/warRoom:WarRoom',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            application_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            change_num: Optional[pulumi.Input[_builtins.str]] = None,
            circular_level: Optional[pulumi.Input[_builtins.str]] = None,
            create_time: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            fault_cause: Optional[pulumi.Input[_builtins.str]] = None,
            fault_impact: Optional[pulumi.Input[_builtins.str]] = None,
            first_report_time: Optional[pulumi.Input[_builtins.int]] = None,
            incident_number: Optional[pulumi.Input[_builtins.str]] = None,
            incidents: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WarRoomIncidentArgs', 'WarRoomIncidentArgsDict']]]]] = None,
            notification_type: Optional[pulumi.Input[_builtins.str]] = None,
            occur_time: Optional[pulumi.Input[_builtins.int]] = None,
            participants: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            processing_duration: Optional[pulumi.Input[_builtins.int]] = None,
            recover_leaders: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            recover_members: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            recover_time: Optional[pulumi.Input[_builtins.int]] = None,
            recovery_notification_time: Optional[pulumi.Input[_builtins.int]] = None,
            region_code_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            restoration_duration: Optional[pulumi.Input[_builtins.int]] = None,
            schedule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WarRoomScheduleGroupArgs', 'WarRoomScheduleGroupArgsDict']]]]] = None,
            source: Optional[pulumi.Input[_builtins.str]] = None,
            war_room_admin: Optional[pulumi.Input[_builtins.str]] = None,
            war_room_id: Optional[pulumi.Input[_builtins.str]] = None,
            war_room_name: Optional[pulumi.Input[_builtins.str]] = None,
            war_room_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WarRoomWarRoomStatusArgs', 'WarRoomWarRoomStatusArgsDict']]]]] = None) -> 'WarRoom':
        """
        Get an existing WarRoom resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_id_lists: Specifies the ID list of the affected applications.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] application_names: Specifies the application name list.
        :param pulumi.Input[_builtins.str] change_num: Indicates the change ticket number.
        :param pulumi.Input[_builtins.str] circular_level: Indicates the notification level. The notification level is the same as the incident level in the
               tenant zone.
        :param pulumi.Input[_builtins.int] create_time: Indicates the creation time.
        :param pulumi.Input[_builtins.str] description: Specifies the war room description.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID.
        :param pulumi.Input[_builtins.str] fault_cause: Indicates the fault cause.
        :param pulumi.Input[_builtins.str] fault_impact: Indicates the impact of the fault.
        :param pulumi.Input[_builtins.int] first_report_time: Indicates the first notification time.
        :param pulumi.Input[_builtins.str] incident_number: Specifies the incident ticket ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WarRoomIncidentArgs', 'WarRoomIncidentArgsDict']]]] incidents: Indicates the incident.
        :param pulumi.Input[_builtins.str] notification_type: Specifies the group creation mode.
               Values can be as follows:
               + **WECHAT**: WeChat.
               + **DING_TALK**: DingTalk.
               + **LARK**: Lark.
               + **NULL_GROUP**: No notification is sent to the group.
               
               <a name="block--schedule_group"></a>
               The `schedule_group` block supports:
        :param pulumi.Input[_builtins.int] occur_time: Indicates the occurrence start time.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] participants: Specifies the user ID list of participants.
        :param pulumi.Input[_builtins.int] processing_duration: Indicates the handling duration, the unit is minutes.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] recover_leaders: Indicates the primary recovery owner.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] recover_members: Indicates the members of recovery.
        :param pulumi.Input[_builtins.int] recover_time: Indicates the fault recovery time.
        :param pulumi.Input[_builtins.int] recovery_notification_time: Indicates the recovery notification time.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_code_lists: Specifies the ID list of regions.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_names: Specifies the region names.
        :param pulumi.Input[_builtins.int] restoration_duration: Indicates the recovery duration, the unit is minutes.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WarRoomScheduleGroupArgs', 'WarRoomScheduleGroupArgsDict']]]] schedule_groups: Specifies the scheduling group information.
               The schedule_group structure is documented below.
        :param pulumi.Input[_builtins.str] source: Indicates the incident source.
        :param pulumi.Input[_builtins.str] war_room_admin: Specifies the war room administrator user ID.
        :param pulumi.Input[_builtins.str] war_room_id: Indicates the war room ID.
        :param pulumi.Input[_builtins.str] war_room_name: Specifies the war room name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WarRoomWarRoomStatusArgs', 'WarRoomWarRoomStatusArgsDict']]]] war_room_statuses: Indicates the war room status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WarRoomState.__new__(_WarRoomState)

        __props__.__dict__["application_id_lists"] = application_id_lists
        __props__.__dict__["application_names"] = application_names
        __props__.__dict__["change_num"] = change_num
        __props__.__dict__["circular_level"] = circular_level
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["fault_cause"] = fault_cause
        __props__.__dict__["fault_impact"] = fault_impact
        __props__.__dict__["first_report_time"] = first_report_time
        __props__.__dict__["incident_number"] = incident_number
        __props__.__dict__["incidents"] = incidents
        __props__.__dict__["notification_type"] = notification_type
        __props__.__dict__["occur_time"] = occur_time
        __props__.__dict__["participants"] = participants
        __props__.__dict__["processing_duration"] = processing_duration
        __props__.__dict__["recover_leaders"] = recover_leaders
        __props__.__dict__["recover_members"] = recover_members
        __props__.__dict__["recover_time"] = recover_time
        __props__.__dict__["recovery_notification_time"] = recovery_notification_time
        __props__.__dict__["region_code_lists"] = region_code_lists
        __props__.__dict__["region_names"] = region_names
        __props__.__dict__["restoration_duration"] = restoration_duration
        __props__.__dict__["schedule_groups"] = schedule_groups
        __props__.__dict__["source"] = source
        __props__.__dict__["war_room_admin"] = war_room_admin
        __props__.__dict__["war_room_id"] = war_room_id
        __props__.__dict__["war_room_name"] = war_room_name
        __props__.__dict__["war_room_statuses"] = war_room_statuses
        return WarRoom(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationIdLists")
    def application_id_lists(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the ID list of the affected applications.
        """
        return pulumi.get(self, "application_id_lists")

    @_builtins.property
    @pulumi.getter(name="applicationNames")
    def application_names(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the application name list.
        """
        return pulumi.get(self, "application_names")

    @_builtins.property
    @pulumi.getter(name="changeNum")
    def change_num(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the change ticket number.
        """
        return pulumi.get(self, "change_num")

    @_builtins.property
    @pulumi.getter(name="circularLevel")
    def circular_level(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the notification level. The notification level is the same as the incident level in the
        tenant zone.
        """
        return pulumi.get(self, "circular_level")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the war room description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="faultCause")
    def fault_cause(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the fault cause.
        """
        return pulumi.get(self, "fault_cause")

    @_builtins.property
    @pulumi.getter(name="faultImpact")
    def fault_impact(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the impact of the fault.
        """
        return pulumi.get(self, "fault_impact")

    @_builtins.property
    @pulumi.getter(name="firstReportTime")
    def first_report_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the first notification time.
        """
        return pulumi.get(self, "first_report_time")

    @_builtins.property
    @pulumi.getter(name="incidentNumber")
    def incident_number(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the incident ticket ID.
        """
        return pulumi.get(self, "incident_number")

    @_builtins.property
    @pulumi.getter
    def incidents(self) -> pulumi.Output[Sequence['outputs.WarRoomIncident']]:
        """
        Indicates the incident.
        """
        return pulumi.get(self, "incidents")

    @_builtins.property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the group creation mode.
        Values can be as follows:
        + **WECHAT**: WeChat.
        + **DING_TALK**: DingTalk.
        + **LARK**: Lark.
        + **NULL_GROUP**: No notification is sent to the group.

        <a name="block--schedule_group"></a>
        The `schedule_group` block supports:
        """
        return pulumi.get(self, "notification_type")

    @_builtins.property
    @pulumi.getter(name="occurTime")
    def occur_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the occurrence start time.
        """
        return pulumi.get(self, "occur_time")

    @_builtins.property
    @pulumi.getter
    def participants(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the user ID list of participants.
        """
        return pulumi.get(self, "participants")

    @_builtins.property
    @pulumi.getter(name="processingDuration")
    def processing_duration(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the handling duration, the unit is minutes.
        """
        return pulumi.get(self, "processing_duration")

    @_builtins.property
    @pulumi.getter(name="recoverLeaders")
    def recover_leaders(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the primary recovery owner.
        """
        return pulumi.get(self, "recover_leaders")

    @_builtins.property
    @pulumi.getter(name="recoverMembers")
    def recover_members(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Indicates the members of recovery.
        """
        return pulumi.get(self, "recover_members")

    @_builtins.property
    @pulumi.getter(name="recoverTime")
    def recover_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the fault recovery time.
        """
        return pulumi.get(self, "recover_time")

    @_builtins.property
    @pulumi.getter(name="recoveryNotificationTime")
    def recovery_notification_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the recovery notification time.
        """
        return pulumi.get(self, "recovery_notification_time")

    @_builtins.property
    @pulumi.getter(name="regionCodeLists")
    def region_code_lists(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the ID list of regions.
        """
        return pulumi.get(self, "region_code_lists")

    @_builtins.property
    @pulumi.getter(name="regionNames")
    def region_names(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the region names.
        """
        return pulumi.get(self, "region_names")

    @_builtins.property
    @pulumi.getter(name="restorationDuration")
    def restoration_duration(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the recovery duration, the unit is minutes.
        """
        return pulumi.get(self, "restoration_duration")

    @_builtins.property
    @pulumi.getter(name="scheduleGroups")
    def schedule_groups(self) -> pulumi.Output[Sequence['outputs.WarRoomScheduleGroup']]:
        """
        Specifies the scheduling group information.
        The schedule_group structure is documented below.
        """
        return pulumi.get(self, "schedule_groups")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the incident source.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="warRoomAdmin")
    def war_room_admin(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the war room administrator user ID.
        """
        return pulumi.get(self, "war_room_admin")

    @_builtins.property
    @pulumi.getter(name="warRoomId")
    def war_room_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the war room ID.
        """
        return pulumi.get(self, "war_room_id")

    @_builtins.property
    @pulumi.getter(name="warRoomName")
    def war_room_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the war room name.
        """
        return pulumi.get(self, "war_room_name")

    @_builtins.property
    @pulumi.getter(name="warRoomStatuses")
    def war_room_statuses(self) -> pulumi.Output[Sequence['outputs.WarRoomWarRoomStatus']]:
        """
        Indicates the war room status.
        """
        return pulumi.get(self, "war_room_statuses")

