# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDocumentAtomicDetailResult',
    'AwaitableGetDocumentAtomicDetailResult',
    'get_document_atomic_detail',
    'get_document_atomic_detail_output',
]

@pulumi.output_type
class GetDocumentAtomicDetailResult:
    """
    A collection of values returned by getDocumentAtomicDetail.
    """
    def __init__(__self__, atomic_name_en=None, atomic_name_zh=None, atomic_unique_key=None, id=None, inputs=None, outputs=None, tags=None):
        if atomic_name_en and not isinstance(atomic_name_en, str):
            raise TypeError("Expected argument 'atomic_name_en' to be a str")
        pulumi.set(__self__, "atomic_name_en", atomic_name_en)
        if atomic_name_zh and not isinstance(atomic_name_zh, str):
            raise TypeError("Expected argument 'atomic_name_zh' to be a str")
        pulumi.set(__self__, "atomic_name_zh", atomic_name_zh)
        if atomic_unique_key and not isinstance(atomic_unique_key, str):
            raise TypeError("Expected argument 'atomic_unique_key' to be a str")
        pulumi.set(__self__, "atomic_unique_key", atomic_unique_key)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inputs and not isinstance(inputs, list):
            raise TypeError("Expected argument 'inputs' to be a list")
        pulumi.set(__self__, "inputs", inputs)
        if outputs and not isinstance(outputs, list):
            raise TypeError("Expected argument 'outputs' to be a list")
        pulumi.set(__self__, "outputs", outputs)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="atomicNameEn")
    def atomic_name_en(self) -> _builtins.str:
        """
        Indicates the English name.
        """
        return pulumi.get(self, "atomic_name_en")

    @_builtins.property
    @pulumi.getter(name="atomicNameZh")
    def atomic_name_zh(self) -> _builtins.str:
        """
        Indicates the Chinese name.
        """
        return pulumi.get(self, "atomic_name_zh")

    @_builtins.property
    @pulumi.getter(name="atomicUniqueKey")
    def atomic_unique_key(self) -> _builtins.str:
        return pulumi.get(self, "atomic_unique_key")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def inputs(self) -> Sequence['outputs.GetDocumentAtomicDetailInputResult']:
        """
        Indicates the atomic capability input.
        """
        return pulumi.get(self, "inputs")

    @_builtins.property
    @pulumi.getter
    def outputs(self) -> Sequence['outputs.GetDocumentAtomicDetailOutputResult']:
        """
        Indicates the atomic capability output.
        """
        return pulumi.get(self, "outputs")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        Indicates the tag information.
        """
        return pulumi.get(self, "tags")


class AwaitableGetDocumentAtomicDetailResult(GetDocumentAtomicDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDocumentAtomicDetailResult(
            atomic_name_en=self.atomic_name_en,
            atomic_name_zh=self.atomic_name_zh,
            atomic_unique_key=self.atomic_unique_key,
            id=self.id,
            inputs=self.inputs,
            outputs=self.outputs,
            tags=self.tags)


def get_document_atomic_detail(atomic_unique_key: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDocumentAtomicDetailResult:
    """
    Use this data source to get the document atomic detail.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    atomic_unique_key = config.require_object("atomicUniqueKey")
    test = huaweicloud.coc.get_document_atomic_detail(atomic_unique_key=atomic_unique_key)
    ```


    :param _builtins.str atomic_unique_key: Specifies the unique identifier of an atomic capability.
    """
    __args__ = dict()
    __args__['atomicUniqueKey'] = atomic_unique_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:coc/getDocumentAtomicDetail:getDocumentAtomicDetail', __args__, opts=opts, typ=GetDocumentAtomicDetailResult).value

    return AwaitableGetDocumentAtomicDetailResult(
        atomic_name_en=pulumi.get(__ret__, 'atomic_name_en'),
        atomic_name_zh=pulumi.get(__ret__, 'atomic_name_zh'),
        atomic_unique_key=pulumi.get(__ret__, 'atomic_unique_key'),
        id=pulumi.get(__ret__, 'id'),
        inputs=pulumi.get(__ret__, 'inputs'),
        outputs=pulumi.get(__ret__, 'outputs'),
        tags=pulumi.get(__ret__, 'tags'))
def get_document_atomic_detail_output(atomic_unique_key: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDocumentAtomicDetailResult]:
    """
    Use this data source to get the document atomic detail.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    atomic_unique_key = config.require_object("atomicUniqueKey")
    test = huaweicloud.coc.get_document_atomic_detail(atomic_unique_key=atomic_unique_key)
    ```


    :param _builtins.str atomic_unique_key: Specifies the unique identifier of an atomic capability.
    """
    __args__ = dict()
    __args__['atomicUniqueKey'] = atomic_unique_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:coc/getDocumentAtomicDetail:getDocumentAtomicDetail', __args__, opts=opts, typ=GetDocumentAtomicDetailResult)
    return __ret__.apply(lambda __response__: GetDocumentAtomicDetailResult(
        atomic_name_en=pulumi.get(__response__, 'atomic_name_en'),
        atomic_name_zh=pulumi.get(__response__, 'atomic_name_zh'),
        atomic_unique_key=pulumi.get(__response__, 'atomic_unique_key'),
        id=pulumi.get(__response__, 'id'),
        inputs=pulumi.get(__response__, 'inputs'),
        outputs=pulumi.get(__response__, 'outputs'),
        tags=pulumi.get(__response__, 'tags')))
