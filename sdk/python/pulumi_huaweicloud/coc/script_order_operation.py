# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ScriptOrderOperationArgs', 'ScriptOrderOperation']

@pulumi.input_type
class ScriptOrderOperationArgs:
    def __init__(__self__, *,
                 execute_uuid: pulumi.Input[_builtins.str],
                 operation_type: pulumi.Input[_builtins.str],
                 batch_index: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a ScriptOrderOperation resource.
        :param pulumi.Input[_builtins.str] execute_uuid: Specifies the script order ID.
        :param pulumi.Input[_builtins.str] operation_type: Specifies the operation type.
               Values can be as follows:
               + **CANCEL_INSTANCE**: Cancel an instance.
               + **SKIP_BATCH**: Skip batch.
               + **CANCEL_ORDER**: Cancel the script order.
               + **PAUSE_ORDER**: Pause the script order.
               + **CONTINUE_ORDER**: Continue the script order.
        :param pulumi.Input[_builtins.int] batch_index: Specifies the batch index.
        :param pulumi.Input[_builtins.int] instance_id: Specifies the instance ID.
        """
        pulumi.set(__self__, "execute_uuid", execute_uuid)
        pulumi.set(__self__, "operation_type", operation_type)
        if batch_index is not None:
            pulumi.set(__self__, "batch_index", batch_index)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @_builtins.property
    @pulumi.getter(name="executeUuid")
    def execute_uuid(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the script order ID.
        """
        return pulumi.get(self, "execute_uuid")

    @execute_uuid.setter
    def execute_uuid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "execute_uuid", value)

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operation type.
        Values can be as follows:
        + **CANCEL_INSTANCE**: Cancel an instance.
        + **SKIP_BATCH**: Skip batch.
        + **CANCEL_ORDER**: Cancel the script order.
        + **PAUSE_ORDER**: Pause the script order.
        + **CONTINUE_ORDER**: Continue the script order.
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operation_type", value)

    @_builtins.property
    @pulumi.getter(name="batchIndex")
    def batch_index(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the batch index.
        """
        return pulumi.get(self, "batch_index")

    @batch_index.setter
    def batch_index(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "batch_index", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "instance_id", value)


@pulumi.input_type
class _ScriptOrderOperationState:
    def __init__(__self__, *,
                 batch_index: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 execute_uuid: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.int]] = None,
                 operation_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ScriptOrderOperation resources.
        :param pulumi.Input[_builtins.int] batch_index: Specifies the batch index.
        :param pulumi.Input[_builtins.str] execute_uuid: Specifies the script order ID.
        :param pulumi.Input[_builtins.int] instance_id: Specifies the instance ID.
        :param pulumi.Input[_builtins.str] operation_type: Specifies the operation type.
               Values can be as follows:
               + **CANCEL_INSTANCE**: Cancel an instance.
               + **SKIP_BATCH**: Skip batch.
               + **CANCEL_ORDER**: Cancel the script order.
               + **PAUSE_ORDER**: Pause the script order.
               + **CONTINUE_ORDER**: Continue the script order.
        """
        if batch_index is not None:
            pulumi.set(__self__, "batch_index", batch_index)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if execute_uuid is not None:
            pulumi.set(__self__, "execute_uuid", execute_uuid)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)

    @_builtins.property
    @pulumi.getter(name="batchIndex")
    def batch_index(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the batch index.
        """
        return pulumi.get(self, "batch_index")

    @batch_index.setter
    def batch_index(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "batch_index", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="executeUuid")
    def execute_uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the script order ID.
        """
        return pulumi.get(self, "execute_uuid")

    @execute_uuid.setter
    def execute_uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "execute_uuid", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation type.
        Values can be as follows:
        + **CANCEL_INSTANCE**: Cancel an instance.
        + **SKIP_BATCH**: Skip batch.
        + **CANCEL_ORDER**: Cancel the script order.
        + **PAUSE_ORDER**: Pause the script order.
        + **CONTINUE_ORDER**: Continue the script order.
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operation_type", value)


@pulumi.type_token("huaweicloud:coc/scriptOrderOperation:ScriptOrderOperation")
class ScriptOrderOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 batch_index: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 execute_uuid: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.int]] = None,
                 operation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a COC script order operation resource within HuaweiCloud.

        > Deleting script order operation resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        execute_uuid = config.require_object("executeUuid")
        operation_type = config.require_object("operationType")
        test = huaweicloud.coc.ScriptOrderOperation("test",
            execute_uuid=execute_uuid,
            operation_type=operation_type)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] batch_index: Specifies the batch index.
        :param pulumi.Input[_builtins.str] execute_uuid: Specifies the script order ID.
        :param pulumi.Input[_builtins.int] instance_id: Specifies the instance ID.
        :param pulumi.Input[_builtins.str] operation_type: Specifies the operation type.
               Values can be as follows:
               + **CANCEL_INSTANCE**: Cancel an instance.
               + **SKIP_BATCH**: Skip batch.
               + **CANCEL_ORDER**: Cancel the script order.
               + **PAUSE_ORDER**: Pause the script order.
               + **CONTINUE_ORDER**: Continue the script order.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScriptOrderOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a COC script order operation resource within HuaweiCloud.

        > Deleting script order operation resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        execute_uuid = config.require_object("executeUuid")
        operation_type = config.require_object("operationType")
        test = huaweicloud.coc.ScriptOrderOperation("test",
            execute_uuid=execute_uuid,
            operation_type=operation_type)
        ```

        :param str resource_name: The name of the resource.
        :param ScriptOrderOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScriptOrderOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 batch_index: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 execute_uuid: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.int]] = None,
                 operation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScriptOrderOperationArgs.__new__(ScriptOrderOperationArgs)

            __props__.__dict__["batch_index"] = batch_index
            __props__.__dict__["enable_force_new"] = enable_force_new
            if execute_uuid is None and not opts.urn:
                raise TypeError("Missing required property 'execute_uuid'")
            __props__.__dict__["execute_uuid"] = execute_uuid
            __props__.__dict__["instance_id"] = instance_id
            if operation_type is None and not opts.urn:
                raise TypeError("Missing required property 'operation_type'")
            __props__.__dict__["operation_type"] = operation_type
        super(ScriptOrderOperation, __self__).__init__(
            'huaweicloud:coc/scriptOrderOperation:ScriptOrderOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            batch_index: Optional[pulumi.Input[_builtins.int]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            execute_uuid: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.int]] = None,
            operation_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'ScriptOrderOperation':
        """
        Get an existing ScriptOrderOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] batch_index: Specifies the batch index.
        :param pulumi.Input[_builtins.str] execute_uuid: Specifies the script order ID.
        :param pulumi.Input[_builtins.int] instance_id: Specifies the instance ID.
        :param pulumi.Input[_builtins.str] operation_type: Specifies the operation type.
               Values can be as follows:
               + **CANCEL_INSTANCE**: Cancel an instance.
               + **SKIP_BATCH**: Skip batch.
               + **CANCEL_ORDER**: Cancel the script order.
               + **PAUSE_ORDER**: Pause the script order.
               + **CONTINUE_ORDER**: Continue the script order.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScriptOrderOperationState.__new__(_ScriptOrderOperationState)

        __props__.__dict__["batch_index"] = batch_index
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["execute_uuid"] = execute_uuid
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["operation_type"] = operation_type
        return ScriptOrderOperation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="batchIndex")
    def batch_index(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the batch index.
        """
        return pulumi.get(self, "batch_index")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="executeUuid")
    def execute_uuid(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the script order ID.
        """
        return pulumi.get(self, "execute_uuid")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operation type.
        Values can be as follows:
        + **CANCEL_INSTANCE**: Cancel an instance.
        + **SKIP_BATCH**: Skip batch.
        + **CANCEL_ORDER**: Cancel the script order.
        + **PAUSE_ORDER**: Pause the script order.
        + **CONTINUE_ORDER**: Continue the script order.
        """
        return pulumi.get(self, "operation_type")

