# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CustomEventReportArgs', 'CustomEventReport']

@pulumi.input_type
class CustomEventReportArgs:
    def __init__(__self__, *,
                 alarm_desc: pulumi.Input[_builtins.str],
                 alarm_id: pulumi.Input[_builtins.str],
                 alarm_level: pulumi.Input[_builtins.str],
                 alarm_name: pulumi.Input[_builtins.str],
                 alarm_source: pulumi.Input[_builtins.str],
                 application_id: pulumi.Input[_builtins.str],
                 integration_key: pulumi.Input[_builtins.str],
                 namespace: pulumi.Input[_builtins.str],
                 time: pulumi.Input[_builtins.int],
                 additional: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_status: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CustomEventReport resource.
        :param pulumi.Input[_builtins.str] alarm_desc: Specifies the alarm description.
        :param pulumi.Input[_builtins.str] alarm_id: Specifies the alarm ID.
        :param pulumi.Input[_builtins.str] alarm_level: Specifies the alarm level.
               Values can be as follows:
               + **Critical**: Critical.
               + **Major**: Major.
               + **Minor**: Minor.
               + **Info**: Info.
        :param pulumi.Input[_builtins.str] alarm_name: Specifies the alarm name.
        :param pulumi.Input[_builtins.str] alarm_source: Specifies the alarm source.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
        :param pulumi.Input[_builtins.str] integration_key: Specifies the integration key.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace of the service.
        :param pulumi.Input[_builtins.int] time: Specifies the alarm occurrence time.
        :param pulumi.Input[_builtins.str] additional: Specifies the additional alarm information.
               
               > The value of `additional` is a json string.
        :param pulumi.Input[_builtins.str] alarm_status: Specifies the alarm status.
               Values can be as follows:
               + **alarm**: Warning.
               + **ok**: Restored.
        :param pulumi.Input[_builtins.str] region_id: Specifies the area where the alarm occurs.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the resource ID.
        :param pulumi.Input[_builtins.str] resource_name: Specifies the resource name.
        :param pulumi.Input[_builtins.str] url: Specifies the original alert URL.
        """
        pulumi.set(__self__, "alarm_desc", alarm_desc)
        pulumi.set(__self__, "alarm_id", alarm_id)
        pulumi.set(__self__, "alarm_level", alarm_level)
        pulumi.set(__self__, "alarm_name", alarm_name)
        pulumi.set(__self__, "alarm_source", alarm_source)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "time", time)
        if additional is not None:
            pulumi.set(__self__, "additional", additional)
        if alarm_status is not None:
            pulumi.set(__self__, "alarm_status", alarm_status)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="alarmDesc")
    def alarm_desc(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm description.
        """
        return pulumi.get(self, "alarm_desc")

    @alarm_desc.setter
    def alarm_desc(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_desc", value)

    @_builtins.property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm ID.
        """
        return pulumi.get(self, "alarm_id")

    @alarm_id.setter
    def alarm_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_id", value)

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm level.
        Values can be as follows:
        + **Critical**: Critical.
        + **Major**: Major.
        + **Minor**: Minor.
        + **Info**: Info.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_level", value)

    @_builtins.property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm name.
        """
        return pulumi.get(self, "alarm_name")

    @alarm_name.setter
    def alarm_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_name", value)

    @_builtins.property
    @pulumi.getter(name="alarmSource")
    def alarm_source(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the alarm source.
        """
        return pulumi.get(self, "alarm_source")

    @alarm_source.setter
    def alarm_source(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alarm_source", value)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the application ID.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the integration key.
        """
        return pulumi.get(self, "integration_key")

    @integration_key.setter
    def integration_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "integration_key", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the namespace of the service.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def time(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the alarm occurrence time.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "time", value)

    @_builtins.property
    @pulumi.getter
    def additional(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the additional alarm information.

        > The value of `additional` is a json string.
        """
        return pulumi.get(self, "additional")

    @additional.setter
    def additional(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "additional", value)

    @_builtins.property
    @pulumi.getter(name="alarmStatus")
    def alarm_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm status.
        Values can be as follows:
        + **alarm**: Warning.
        + **ok**: Restored.
        """
        return pulumi.get(self, "alarm_status")

    @alarm_status.setter
    def alarm_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_status", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the area where the alarm occurs.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the original alert URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class _CustomEventReportState:
    def __init__(__self__, *,
                 additional: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_desc: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_source: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_status: Optional[pulumi.Input[_builtins.str]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 integration_key: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 time: Optional[pulumi.Input[_builtins.int]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CustomEventReport resources.
        :param pulumi.Input[_builtins.str] additional: Specifies the additional alarm information.
               
               > The value of `additional` is a json string.
        :param pulumi.Input[_builtins.str] alarm_desc: Specifies the alarm description.
        :param pulumi.Input[_builtins.str] alarm_id: Specifies the alarm ID.
        :param pulumi.Input[_builtins.str] alarm_level: Specifies the alarm level.
               Values can be as follows:
               + **Critical**: Critical.
               + **Major**: Major.
               + **Minor**: Minor.
               + **Info**: Info.
        :param pulumi.Input[_builtins.str] alarm_name: Specifies the alarm name.
        :param pulumi.Input[_builtins.str] alarm_source: Specifies the alarm source.
        :param pulumi.Input[_builtins.str] alarm_status: Specifies the alarm status.
               Values can be as follows:
               + **alarm**: Warning.
               + **ok**: Restored.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
        :param pulumi.Input[_builtins.str] integration_key: Specifies the integration key.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace of the service.
        :param pulumi.Input[_builtins.str] region_id: Specifies the area where the alarm occurs.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the resource ID.
        :param pulumi.Input[_builtins.str] resource_name: Specifies the resource name.
        :param pulumi.Input[_builtins.int] time: Specifies the alarm occurrence time.
        :param pulumi.Input[_builtins.str] url: Specifies the original alert URL.
        """
        if additional is not None:
            pulumi.set(__self__, "additional", additional)
        if alarm_desc is not None:
            pulumi.set(__self__, "alarm_desc", alarm_desc)
        if alarm_id is not None:
            pulumi.set(__self__, "alarm_id", alarm_id)
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if alarm_name is not None:
            pulumi.set(__self__, "alarm_name", alarm_name)
        if alarm_source is not None:
            pulumi.set(__self__, "alarm_source", alarm_source)
        if alarm_status is not None:
            pulumi.set(__self__, "alarm_status", alarm_status)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if integration_key is not None:
            pulumi.set(__self__, "integration_key", integration_key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def additional(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the additional alarm information.

        > The value of `additional` is a json string.
        """
        return pulumi.get(self, "additional")

    @additional.setter
    def additional(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "additional", value)

    @_builtins.property
    @pulumi.getter(name="alarmDesc")
    def alarm_desc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm description.
        """
        return pulumi.get(self, "alarm_desc")

    @alarm_desc.setter
    def alarm_desc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_desc", value)

    @_builtins.property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm ID.
        """
        return pulumi.get(self, "alarm_id")

    @alarm_id.setter
    def alarm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_id", value)

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm level.
        Values can be as follows:
        + **Critical**: Critical.
        + **Major**: Major.
        + **Minor**: Minor.
        + **Info**: Info.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_level", value)

    @_builtins.property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm name.
        """
        return pulumi.get(self, "alarm_name")

    @alarm_name.setter
    def alarm_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_name", value)

    @_builtins.property
    @pulumi.getter(name="alarmSource")
    def alarm_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm source.
        """
        return pulumi.get(self, "alarm_source")

    @alarm_source.setter
    def alarm_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_source", value)

    @_builtins.property
    @pulumi.getter(name="alarmStatus")
    def alarm_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the alarm status.
        Values can be as follows:
        + **alarm**: Warning.
        + **ok**: Restored.
        """
        return pulumi.get(self, "alarm_status")

    @alarm_status.setter
    def alarm_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alarm_status", value)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the application ID.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the integration key.
        """
        return pulumi.get(self, "integration_key")

    @integration_key.setter
    def integration_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "integration_key", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the namespace of the service.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the area where the alarm occurs.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the alarm occurrence time.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "time", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the original alert URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.type_token("huaweicloud:coc/customEventReport:CustomEventReport")
class CustomEventReport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_desc: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_source: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_status: Optional[pulumi.Input[_builtins.str]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 integration_key: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
                 time: Optional[pulumi.Input[_builtins.int]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a COC custom event report resource within HuaweiCloud.

        > Deleting custom event report resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        integration_key = config.require_object("integrationKey")
        alarm_id = config.require_object("alarmId")
        alarm_name = config.require_object("alarmName")
        application_id = config.require_object("applicationId")
        alarm_desc = config.require_object("alarmDesc")
        test = huaweicloud.coc.CustomEventReport("test",
            integration_key=integration_key,
            alarm_id=alarm_id,
            alarm_name=alarm_name,
            alarm_level="Critical",
            time=1709118444540,
            namespace="shanghai",
            application_id=application_id,
            alarm_desc=alarm_desc,
            alarm_source="coc",
            additional=json.dumps({
                "key": "test",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] additional: Specifies the additional alarm information.
               
               > The value of `additional` is a json string.
        :param pulumi.Input[_builtins.str] alarm_desc: Specifies the alarm description.
        :param pulumi.Input[_builtins.str] alarm_id: Specifies the alarm ID.
        :param pulumi.Input[_builtins.str] alarm_level: Specifies the alarm level.
               Values can be as follows:
               + **Critical**: Critical.
               + **Major**: Major.
               + **Minor**: Minor.
               + **Info**: Info.
        :param pulumi.Input[_builtins.str] alarm_name: Specifies the alarm name.
        :param pulumi.Input[_builtins.str] alarm_source: Specifies the alarm source.
        :param pulumi.Input[_builtins.str] alarm_status: Specifies the alarm status.
               Values can be as follows:
               + **alarm**: Warning.
               + **ok**: Restored.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
        :param pulumi.Input[_builtins.str] integration_key: Specifies the integration key.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace of the service.
        :param pulumi.Input[_builtins.str] region_id: Specifies the area where the alarm occurs.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the resource ID.
        :param pulumi.Input[_builtins.str] resource_name_: Specifies the resource name.
        :param pulumi.Input[_builtins.int] time: Specifies the alarm occurrence time.
        :param pulumi.Input[_builtins.str] url: Specifies the original alert URL.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomEventReportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a COC custom event report resource within HuaweiCloud.

        > Deleting custom event report resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        integration_key = config.require_object("integrationKey")
        alarm_id = config.require_object("alarmId")
        alarm_name = config.require_object("alarmName")
        application_id = config.require_object("applicationId")
        alarm_desc = config.require_object("alarmDesc")
        test = huaweicloud.coc.CustomEventReport("test",
            integration_key=integration_key,
            alarm_id=alarm_id,
            alarm_name=alarm_name,
            alarm_level="Critical",
            time=1709118444540,
            namespace="shanghai",
            application_id=application_id,
            alarm_desc=alarm_desc,
            alarm_source="coc",
            additional=json.dumps({
                "key": "test",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param CustomEventReportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomEventReportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_desc: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_name: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_source: Optional[pulumi.Input[_builtins.str]] = None,
                 alarm_status: Optional[pulumi.Input[_builtins.str]] = None,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 integration_key: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
                 time: Optional[pulumi.Input[_builtins.int]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomEventReportArgs.__new__(CustomEventReportArgs)

            __props__.__dict__["additional"] = additional
            if alarm_desc is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_desc'")
            __props__.__dict__["alarm_desc"] = alarm_desc
            if alarm_id is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_id'")
            __props__.__dict__["alarm_id"] = alarm_id
            if alarm_level is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_level'")
            __props__.__dict__["alarm_level"] = alarm_level
            if alarm_name is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_name'")
            __props__.__dict__["alarm_name"] = alarm_name
            if alarm_source is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_source'")
            __props__.__dict__["alarm_source"] = alarm_source
            __props__.__dict__["alarm_status"] = alarm_status
            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            if integration_key is None and not opts.urn:
                raise TypeError("Missing required property 'integration_key'")
            __props__.__dict__["integration_key"] = integration_key
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["region_id"] = region_id
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["resource_name"] = resource_name_
            if time is None and not opts.urn:
                raise TypeError("Missing required property 'time'")
            __props__.__dict__["time"] = time
            __props__.__dict__["url"] = url
        super(CustomEventReport, __self__).__init__(
            'huaweicloud:coc/customEventReport:CustomEventReport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_desc: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_id: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_level: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_name: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_source: Optional[pulumi.Input[_builtins.str]] = None,
            alarm_status: Optional[pulumi.Input[_builtins.str]] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            integration_key: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            region_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            time: Optional[pulumi.Input[_builtins.int]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None) -> 'CustomEventReport':
        """
        Get an existing CustomEventReport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] additional: Specifies the additional alarm information.
               
               > The value of `additional` is a json string.
        :param pulumi.Input[_builtins.str] alarm_desc: Specifies the alarm description.
        :param pulumi.Input[_builtins.str] alarm_id: Specifies the alarm ID.
        :param pulumi.Input[_builtins.str] alarm_level: Specifies the alarm level.
               Values can be as follows:
               + **Critical**: Critical.
               + **Major**: Major.
               + **Minor**: Minor.
               + **Info**: Info.
        :param pulumi.Input[_builtins.str] alarm_name: Specifies the alarm name.
        :param pulumi.Input[_builtins.str] alarm_source: Specifies the alarm source.
        :param pulumi.Input[_builtins.str] alarm_status: Specifies the alarm status.
               Values can be as follows:
               + **alarm**: Warning.
               + **ok**: Restored.
        :param pulumi.Input[_builtins.str] application_id: Specifies the application ID.
        :param pulumi.Input[_builtins.str] integration_key: Specifies the integration key.
        :param pulumi.Input[_builtins.str] namespace: Specifies the namespace of the service.
        :param pulumi.Input[_builtins.str] region_id: Specifies the area where the alarm occurs.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the resource ID.
        :param pulumi.Input[_builtins.str] resource_name_: Specifies the resource name.
        :param pulumi.Input[_builtins.int] time: Specifies the alarm occurrence time.
        :param pulumi.Input[_builtins.str] url: Specifies the original alert URL.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomEventReportState.__new__(_CustomEventReportState)

        __props__.__dict__["additional"] = additional
        __props__.__dict__["alarm_desc"] = alarm_desc
        __props__.__dict__["alarm_id"] = alarm_id
        __props__.__dict__["alarm_level"] = alarm_level
        __props__.__dict__["alarm_name"] = alarm_name
        __props__.__dict__["alarm_source"] = alarm_source
        __props__.__dict__["alarm_status"] = alarm_status
        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["integration_key"] = integration_key
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["time"] = time
        __props__.__dict__["url"] = url
        return CustomEventReport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def additional(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the additional alarm information.

        > The value of `additional` is a json string.
        """
        return pulumi.get(self, "additional")

    @_builtins.property
    @pulumi.getter(name="alarmDesc")
    def alarm_desc(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm description.
        """
        return pulumi.get(self, "alarm_desc")

    @_builtins.property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm ID.
        """
        return pulumi.get(self, "alarm_id")

    @_builtins.property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm level.
        Values can be as follows:
        + **Critical**: Critical.
        + **Major**: Major.
        + **Minor**: Minor.
        + **Info**: Info.
        """
        return pulumi.get(self, "alarm_level")

    @_builtins.property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm name.
        """
        return pulumi.get(self, "alarm_name")

    @_builtins.property
    @pulumi.getter(name="alarmSource")
    def alarm_source(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the alarm source.
        """
        return pulumi.get(self, "alarm_source")

    @_builtins.property
    @pulumi.getter(name="alarmStatus")
    def alarm_status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the alarm status.
        Values can be as follows:
        + **alarm**: Warning.
        + **ok**: Restored.
        """
        return pulumi.get(self, "alarm_status")

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the application ID.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the integration key.
        """
        return pulumi.get(self, "integration_key")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the namespace of the service.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the area where the alarm occurs.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def time(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the alarm occurrence time.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the original alert URL.
        """
        return pulumi.get(self, "url")

