# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourcesResult',
    'AwaitableGetResourcesResult',
    'get_resources',
    'get_resources_output',
]

@pulumi.output_type
class GetResourcesResult:
    """
    A collection of values returned by getResources.
    """
    def __init__(__self__, agent_state=None, application_id=None, az_id=None, cce_cluster_id=None, charging_mode=None, cloud_service_name=None, component_id=None, datas=None, ep_id=None, flavor_name=None, group_id=None, id=None, image_name=None, ip=None, ip_lists=None, ip_type=None, is_collected=None, is_delegated=None, name=None, operable=None, os_type=None, project_id=None, region_id=None, resource_id_lists=None, status=None, tag=None, tag_key=None, type=None, vpc_id=None):
        if agent_state and not isinstance(agent_state, str):
            raise TypeError("Expected argument 'agent_state' to be a str")
        pulumi.set(__self__, "agent_state", agent_state)
        if application_id and not isinstance(application_id, str):
            raise TypeError("Expected argument 'application_id' to be a str")
        pulumi.set(__self__, "application_id", application_id)
        if az_id and not isinstance(az_id, str):
            raise TypeError("Expected argument 'az_id' to be a str")
        pulumi.set(__self__, "az_id", az_id)
        if cce_cluster_id and not isinstance(cce_cluster_id, str):
            raise TypeError("Expected argument 'cce_cluster_id' to be a str")
        pulumi.set(__self__, "cce_cluster_id", cce_cluster_id)
        if charging_mode and not isinstance(charging_mode, str):
            raise TypeError("Expected argument 'charging_mode' to be a str")
        pulumi.set(__self__, "charging_mode", charging_mode)
        if cloud_service_name and not isinstance(cloud_service_name, str):
            raise TypeError("Expected argument 'cloud_service_name' to be a str")
        pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if component_id and not isinstance(component_id, str):
            raise TypeError("Expected argument 'component_id' to be a str")
        pulumi.set(__self__, "component_id", component_id)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if ep_id and not isinstance(ep_id, str):
            raise TypeError("Expected argument 'ep_id' to be a str")
        pulumi.set(__self__, "ep_id", ep_id)
        if flavor_name and not isinstance(flavor_name, str):
            raise TypeError("Expected argument 'flavor_name' to be a str")
        pulumi.set(__self__, "flavor_name", flavor_name)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_name and not isinstance(image_name, str):
            raise TypeError("Expected argument 'image_name' to be a str")
        pulumi.set(__self__, "image_name", image_name)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if ip_lists and not isinstance(ip_lists, list):
            raise TypeError("Expected argument 'ip_lists' to be a list")
        pulumi.set(__self__, "ip_lists", ip_lists)
        if ip_type and not isinstance(ip_type, str):
            raise TypeError("Expected argument 'ip_type' to be a str")
        pulumi.set(__self__, "ip_type", ip_type)
        if is_collected and not isinstance(is_collected, bool):
            raise TypeError("Expected argument 'is_collected' to be a bool")
        pulumi.set(__self__, "is_collected", is_collected)
        if is_delegated and not isinstance(is_delegated, bool):
            raise TypeError("Expected argument 'is_delegated' to be a bool")
        pulumi.set(__self__, "is_delegated", is_delegated)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operable and not isinstance(operable, str):
            raise TypeError("Expected argument 'operable' to be a str")
        pulumi.set(__self__, "operable", operable)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region_id and not isinstance(region_id, str):
            raise TypeError("Expected argument 'region_id' to be a str")
        pulumi.set(__self__, "region_id", region_id)
        if resource_id_lists and not isinstance(resource_id_lists, list):
            raise TypeError("Expected argument 'resource_id_lists' to be a list")
        pulumi.set(__self__, "resource_id_lists", resource_id_lists)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tag and not isinstance(tag, str):
            raise TypeError("Expected argument 'tag' to be a str")
        pulumi.set(__self__, "tag", tag)
        if tag_key and not isinstance(tag_key, str):
            raise TypeError("Expected argument 'tag_key' to be a str")
        pulumi.set(__self__, "tag_key", tag_key)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="agentState")
    def agent_state(self) -> Optional[_builtins.str]:
        """
        Indicates the unified agent status.
        """
        return pulumi.get(self, "agent_state")

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="azId")
    def az_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "az_id")

    @_builtins.property
    @pulumi.getter(name="cceClusterId")
    def cce_cluster_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cce_cluster_id")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> _builtins.str:
        """
        Indicates the cloud service name.
        """
        return pulumi.get(self, "cloud_service_name")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetResourcesDataResult']:
        """
        Indicates the resource list.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter(name="epId")
    def ep_id(self) -> Optional[_builtins.str]:
        """
        Indicates the enterprise project ID.
        """
        return pulumi.get(self, "ep_id")

    @_builtins.property
    @pulumi.getter(name="flavorName")
    def flavor_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "flavor_name")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "ip_lists")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_type")

    @_builtins.property
    @pulumi.getter(name="isCollected")
    def is_collected(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_collected")

    @_builtins.property
    @pulumi.getter(name="isDelegated")
    def is_delegated(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the resource is delegated.
        """
        return pulumi.get(self, "is_delegated")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def operable(self) -> Optional[_builtins.str]:
        """
        Indicates whether the user defined resource can operate the instance. If the value is **enable**, it is
        enabled; if the current field does not exist, it is not enabled.
        """
        return pulumi.get(self, "operable")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        Indicates the project ID in OpenStack.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[_builtins.str]:
        """
        Indicates the region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceIdLists")
    def resource_id_lists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "resource_id_lists")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tag_key")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the resource type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_id")


class AwaitableGetResourcesResult(GetResourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourcesResult(
            agent_state=self.agent_state,
            application_id=self.application_id,
            az_id=self.az_id,
            cce_cluster_id=self.cce_cluster_id,
            charging_mode=self.charging_mode,
            cloud_service_name=self.cloud_service_name,
            component_id=self.component_id,
            datas=self.datas,
            ep_id=self.ep_id,
            flavor_name=self.flavor_name,
            group_id=self.group_id,
            id=self.id,
            image_name=self.image_name,
            ip=self.ip,
            ip_lists=self.ip_lists,
            ip_type=self.ip_type,
            is_collected=self.is_collected,
            is_delegated=self.is_delegated,
            name=self.name,
            operable=self.operable,
            os_type=self.os_type,
            project_id=self.project_id,
            region_id=self.region_id,
            resource_id_lists=self.resource_id_lists,
            status=self.status,
            tag=self.tag,
            tag_key=self.tag_key,
            type=self.type,
            vpc_id=self.vpc_id)


def get_resources(agent_state: Optional[_builtins.str] = None,
                  application_id: Optional[_builtins.str] = None,
                  az_id: Optional[_builtins.str] = None,
                  cce_cluster_id: Optional[_builtins.str] = None,
                  charging_mode: Optional[_builtins.str] = None,
                  cloud_service_name: Optional[_builtins.str] = None,
                  component_id: Optional[_builtins.str] = None,
                  ep_id: Optional[_builtins.str] = None,
                  flavor_name: Optional[_builtins.str] = None,
                  group_id: Optional[_builtins.str] = None,
                  image_name: Optional[_builtins.str] = None,
                  ip: Optional[_builtins.str] = None,
                  ip_lists: Optional[Sequence[_builtins.str]] = None,
                  ip_type: Optional[_builtins.str] = None,
                  is_collected: Optional[_builtins.bool] = None,
                  is_delegated: Optional[_builtins.bool] = None,
                  name: Optional[_builtins.str] = None,
                  operable: Optional[_builtins.str] = None,
                  os_type: Optional[_builtins.str] = None,
                  project_id: Optional[_builtins.str] = None,
                  region_id: Optional[_builtins.str] = None,
                  resource_id_lists: Optional[Sequence[_builtins.str]] = None,
                  status: Optional[_builtins.str] = None,
                  tag: Optional[_builtins.str] = None,
                  tag_key: Optional[_builtins.str] = None,
                  type: Optional[_builtins.str] = None,
                  vpc_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourcesResult:
    """
    Use this data source to get the list of COC resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cloud_service_name = config.require_object("cloudServiceName")
    type = config.require_object("type")
    test = huaweicloud.coc.get_resources(cloud_service_name=cloud_service_name,
        type=type)
    ```


    :param _builtins.str agent_state: Specifies the unified agent status.
    :param _builtins.str application_id: Specifies the application ID of the cloud resource.
    :param _builtins.str az_id: Specifies the availability zone ID.
    :param _builtins.str cce_cluster_id: Specifies the CCE cluster ID.
    :param _builtins.str charging_mode: Specifies the billing type for the cloud server.
           Values can be as follows:
           + **0**: On demand billing.
           + **1**: Yearly package or monthly package.
           + **2**: Award based billing.
    :param _builtins.str cloud_service_name: Specifies the cloud service name.
    :param _builtins.str component_id: Specifies the component ID of the cloud resource.
    :param _builtins.str ep_id: Specifies the enterprise project ID.
    :param _builtins.str flavor_name: Specifies the cloud resource specification name.
    :param _builtins.str group_id: Specifies the group ID of the cloud resource.
    :param _builtins.str image_name: Specifies the image name.
    :param _builtins.str ip: Specifies the cloud resource IP.
    :param Sequence[_builtins.str] ip_lists: Specifies the cloud resource IP list.
    :param _builtins.str ip_type: Specifies the IP type.
           Values can be as follows:
           + **fixed**: Intranet IP.
           + **floating**: Elastic public IP.
    :param _builtins.bool is_collected: Specifies whether it is a favorite.
    :param _builtins.bool is_delegated: Specifies whether the resource is delegated.
    :param _builtins.str name: Specifies the cloud resource name.
    :param _builtins.str operable: Specifies whether the user defined resource can operate the instance. If the value
           is **enable**, it is enabled; if the current field does not exist, it is not enabled.
    :param _builtins.str os_type: Specifies the cloud resource operating system type.
    :param _builtins.str project_id: Specifies the project ID.
    :param _builtins.str region_id: Specifies the region ID.
    :param Sequence[_builtins.str] resource_id_lists: Specifies the resource ID list.
    :param _builtins.str status: Specifies the resource status.
           
           For details, see [status](https://support.huaweicloud.com/api-ecs/ecs_08_0002.html)
    :param _builtins.str tag: Specifies the tags for cloud resources. The format of the tag is **key.value**.
           When naming tags, the following requirements must be met:
           + The **key** of the tag can only contain uppercase letters (A~Z), lowercase letters (a~z), numbers (0-9),
           underscores (\\_), hyphens (-), and Chinese characters.
           + The **value** of the tag can only contain uppercase letters (A~Z),lowercase letters (a~z), numbers (0-9),
           underscores (\\_), hyphens (-), decimal points (.), and Chinese characters.
    :param _builtins.str tag_key: Specifies the tag key of the cloud resource.
    :param _builtins.str type: Specifies the resource type name.
    :param _builtins.str vpc_id: Specifies the virtual private cloud ID.
    """
    __args__ = dict()
    __args__['agentState'] = agent_state
    __args__['applicationId'] = application_id
    __args__['azId'] = az_id
    __args__['cceClusterId'] = cce_cluster_id
    __args__['chargingMode'] = charging_mode
    __args__['cloudServiceName'] = cloud_service_name
    __args__['componentId'] = component_id
    __args__['epId'] = ep_id
    __args__['flavorName'] = flavor_name
    __args__['groupId'] = group_id
    __args__['imageName'] = image_name
    __args__['ip'] = ip
    __args__['ipLists'] = ip_lists
    __args__['ipType'] = ip_type
    __args__['isCollected'] = is_collected
    __args__['isDelegated'] = is_delegated
    __args__['name'] = name
    __args__['operable'] = operable
    __args__['osType'] = os_type
    __args__['projectId'] = project_id
    __args__['regionId'] = region_id
    __args__['resourceIdLists'] = resource_id_lists
    __args__['status'] = status
    __args__['tag'] = tag
    __args__['tagKey'] = tag_key
    __args__['type'] = type
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:coc/getResources:getResources', __args__, opts=opts, typ=GetResourcesResult).value

    return AwaitableGetResourcesResult(
        agent_state=pulumi.get(__ret__, 'agent_state'),
        application_id=pulumi.get(__ret__, 'application_id'),
        az_id=pulumi.get(__ret__, 'az_id'),
        cce_cluster_id=pulumi.get(__ret__, 'cce_cluster_id'),
        charging_mode=pulumi.get(__ret__, 'charging_mode'),
        cloud_service_name=pulumi.get(__ret__, 'cloud_service_name'),
        component_id=pulumi.get(__ret__, 'component_id'),
        datas=pulumi.get(__ret__, 'datas'),
        ep_id=pulumi.get(__ret__, 'ep_id'),
        flavor_name=pulumi.get(__ret__, 'flavor_name'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        image_name=pulumi.get(__ret__, 'image_name'),
        ip=pulumi.get(__ret__, 'ip'),
        ip_lists=pulumi.get(__ret__, 'ip_lists'),
        ip_type=pulumi.get(__ret__, 'ip_type'),
        is_collected=pulumi.get(__ret__, 'is_collected'),
        is_delegated=pulumi.get(__ret__, 'is_delegated'),
        name=pulumi.get(__ret__, 'name'),
        operable=pulumi.get(__ret__, 'operable'),
        os_type=pulumi.get(__ret__, 'os_type'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region_id=pulumi.get(__ret__, 'region_id'),
        resource_id_lists=pulumi.get(__ret__, 'resource_id_lists'),
        status=pulumi.get(__ret__, 'status'),
        tag=pulumi.get(__ret__, 'tag'),
        tag_key=pulumi.get(__ret__, 'tag_key'),
        type=pulumi.get(__ret__, 'type'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_resources_output(agent_state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         application_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         az_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         cce_cluster_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         charging_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         cloud_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                         component_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         ep_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         flavor_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         image_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         ip_lists: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         ip_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         is_collected: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                         is_delegated: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         operable: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         os_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         resource_id_lists: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         tag: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         tag_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         type: Optional[pulumi.Input[_builtins.str]] = None,
                         vpc_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourcesResult]:
    """
    Use this data source to get the list of COC resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cloud_service_name = config.require_object("cloudServiceName")
    type = config.require_object("type")
    test = huaweicloud.coc.get_resources(cloud_service_name=cloud_service_name,
        type=type)
    ```


    :param _builtins.str agent_state: Specifies the unified agent status.
    :param _builtins.str application_id: Specifies the application ID of the cloud resource.
    :param _builtins.str az_id: Specifies the availability zone ID.
    :param _builtins.str cce_cluster_id: Specifies the CCE cluster ID.
    :param _builtins.str charging_mode: Specifies the billing type for the cloud server.
           Values can be as follows:
           + **0**: On demand billing.
           + **1**: Yearly package or monthly package.
           + **2**: Award based billing.
    :param _builtins.str cloud_service_name: Specifies the cloud service name.
    :param _builtins.str component_id: Specifies the component ID of the cloud resource.
    :param _builtins.str ep_id: Specifies the enterprise project ID.
    :param _builtins.str flavor_name: Specifies the cloud resource specification name.
    :param _builtins.str group_id: Specifies the group ID of the cloud resource.
    :param _builtins.str image_name: Specifies the image name.
    :param _builtins.str ip: Specifies the cloud resource IP.
    :param Sequence[_builtins.str] ip_lists: Specifies the cloud resource IP list.
    :param _builtins.str ip_type: Specifies the IP type.
           Values can be as follows:
           + **fixed**: Intranet IP.
           + **floating**: Elastic public IP.
    :param _builtins.bool is_collected: Specifies whether it is a favorite.
    :param _builtins.bool is_delegated: Specifies whether the resource is delegated.
    :param _builtins.str name: Specifies the cloud resource name.
    :param _builtins.str operable: Specifies whether the user defined resource can operate the instance. If the value
           is **enable**, it is enabled; if the current field does not exist, it is not enabled.
    :param _builtins.str os_type: Specifies the cloud resource operating system type.
    :param _builtins.str project_id: Specifies the project ID.
    :param _builtins.str region_id: Specifies the region ID.
    :param Sequence[_builtins.str] resource_id_lists: Specifies the resource ID list.
    :param _builtins.str status: Specifies the resource status.
           
           For details, see [status](https://support.huaweicloud.com/api-ecs/ecs_08_0002.html)
    :param _builtins.str tag: Specifies the tags for cloud resources. The format of the tag is **key.value**.
           When naming tags, the following requirements must be met:
           + The **key** of the tag can only contain uppercase letters (A~Z), lowercase letters (a~z), numbers (0-9),
           underscores (\\_), hyphens (-), and Chinese characters.
           + The **value** of the tag can only contain uppercase letters (A~Z),lowercase letters (a~z), numbers (0-9),
           underscores (\\_), hyphens (-), decimal points (.), and Chinese characters.
    :param _builtins.str tag_key: Specifies the tag key of the cloud resource.
    :param _builtins.str type: Specifies the resource type name.
    :param _builtins.str vpc_id: Specifies the virtual private cloud ID.
    """
    __args__ = dict()
    __args__['agentState'] = agent_state
    __args__['applicationId'] = application_id
    __args__['azId'] = az_id
    __args__['cceClusterId'] = cce_cluster_id
    __args__['chargingMode'] = charging_mode
    __args__['cloudServiceName'] = cloud_service_name
    __args__['componentId'] = component_id
    __args__['epId'] = ep_id
    __args__['flavorName'] = flavor_name
    __args__['groupId'] = group_id
    __args__['imageName'] = image_name
    __args__['ip'] = ip
    __args__['ipLists'] = ip_lists
    __args__['ipType'] = ip_type
    __args__['isCollected'] = is_collected
    __args__['isDelegated'] = is_delegated
    __args__['name'] = name
    __args__['operable'] = operable
    __args__['osType'] = os_type
    __args__['projectId'] = project_id
    __args__['regionId'] = region_id
    __args__['resourceIdLists'] = resource_id_lists
    __args__['status'] = status
    __args__['tag'] = tag
    __args__['tagKey'] = tag_key
    __args__['type'] = type
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:coc/getResources:getResources', __args__, opts=opts, typ=GetResourcesResult)
    return __ret__.apply(lambda __response__: GetResourcesResult(
        agent_state=pulumi.get(__response__, 'agent_state'),
        application_id=pulumi.get(__response__, 'application_id'),
        az_id=pulumi.get(__response__, 'az_id'),
        cce_cluster_id=pulumi.get(__response__, 'cce_cluster_id'),
        charging_mode=pulumi.get(__response__, 'charging_mode'),
        cloud_service_name=pulumi.get(__response__, 'cloud_service_name'),
        component_id=pulumi.get(__response__, 'component_id'),
        datas=pulumi.get(__response__, 'datas'),
        ep_id=pulumi.get(__response__, 'ep_id'),
        flavor_name=pulumi.get(__response__, 'flavor_name'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        image_name=pulumi.get(__response__, 'image_name'),
        ip=pulumi.get(__response__, 'ip'),
        ip_lists=pulumi.get(__response__, 'ip_lists'),
        ip_type=pulumi.get(__response__, 'ip_type'),
        is_collected=pulumi.get(__response__, 'is_collected'),
        is_delegated=pulumi.get(__response__, 'is_delegated'),
        name=pulumi.get(__response__, 'name'),
        operable=pulumi.get(__response__, 'operable'),
        os_type=pulumi.get(__response__, 'os_type'),
        project_id=pulumi.get(__response__, 'project_id'),
        region_id=pulumi.get(__response__, 'region_id'),
        resource_id_lists=pulumi.get(__response__, 'resource_id_lists'),
        status=pulumi.get(__response__, 'status'),
        tag=pulumi.get(__response__, 'tag'),
        tag_key=pulumi.get(__response__, 'tag_key'),
        type=pulumi.get(__response__, 'type'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
