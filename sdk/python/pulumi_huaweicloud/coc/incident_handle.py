# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['IncidentHandleArgs', 'IncidentHandle']

@pulumi.input_type
class IncidentHandleArgs:
    def __init__(__self__, *,
                 incident_num: pulumi.Input[_builtins.str],
                 operate_key: pulumi.Input[_builtins.str],
                 operator: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a IncidentHandle resource.
        :param pulumi.Input[_builtins.str] incident_num: Specifies the incident number.
        :param pulumi.Input[_builtins.str] operate_key: Specifies the operation type.
               The following scenarios can be applied, and the default values are different in different scenarios:
               + **Accepting an incident ticket**: The value is fixed to `acceptedIncident1`.
               + **Submitting an incident ticket solution**: The value is `commitSolution1`.
               + **Verifying the incident handling result**: The value is `confirm`.
        :param pulumi.Input[_builtins.str] operator: Specifies the user ID of operator.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameter: Specifies the parameter.
               The following scenarios can be applied, and different scenarios contain different fields:
               + Accepting an incident ticket: Leave this parameter empty.
               + Submitting an incident ticket solution:
               - **mtm_type**: Incident type.
               For details, see [mtm_type](https://support.huaweicloud.com/intl/en-us/api-coc/coc_api_04_03_001_006_02.html).
               - **is_service_interrupt**: Whether the service is interrupted. The value can be `true` or `false`.
               - **cause**: Reason.
               - **solution**: Solution.
               - **start_time**: The fault occurrence timestamp. Required when `is_service_interrupt` is `true`.
               - **fault_recovery_time**: The fault recovery timestamp. Required when `is_service_interrupt` is `true`.
               + Verifying the incident handling result:
               - **virtual_confirm_result**: Verification result. The value can be `true` (default) or `false`.
               - **virtual_confirm_comment**: Verification description.
        """
        pulumi.set(__self__, "incident_num", incident_num)
        pulumi.set(__self__, "operate_key", operate_key)
        pulumi.set(__self__, "operator", operator)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)

    @_builtins.property
    @pulumi.getter(name="incidentNum")
    def incident_num(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the incident number.
        """
        return pulumi.get(self, "incident_num")

    @incident_num.setter
    def incident_num(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "incident_num", value)

    @_builtins.property
    @pulumi.getter(name="operateKey")
    def operate_key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the operation type.
        The following scenarios can be applied, and the default values are different in different scenarios:
        + **Accepting an incident ticket**: The value is fixed to `acceptedIncident1`.
        + **Submitting an incident ticket solution**: The value is `commitSolution1`.
        + **Verifying the incident handling result**: The value is `confirm`.
        """
        return pulumi.get(self, "operate_key")

    @operate_key.setter
    def operate_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operate_key", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the user ID of operator.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operator", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the parameter.
        The following scenarios can be applied, and different scenarios contain different fields:
        + Accepting an incident ticket: Leave this parameter empty.
        + Submitting an incident ticket solution:
        - **mtm_type**: Incident type.
        For details, see [mtm_type](https://support.huaweicloud.com/intl/en-us/api-coc/coc_api_04_03_001_006_02.html).
        - **is_service_interrupt**: Whether the service is interrupted. The value can be `true` or `false`.
        - **cause**: Reason.
        - **solution**: Solution.
        - **start_time**: The fault occurrence timestamp. Required when `is_service_interrupt` is `true`.
        - **fault_recovery_time**: The fault recovery timestamp. Required when `is_service_interrupt` is `true`.
        + Verifying the incident handling result:
        - **virtual_confirm_result**: Verification result. The value can be `true` (default) or `false`.
        - **virtual_confirm_comment**: Verification description.
        """
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameter", value)


@pulumi.input_type
class _IncidentHandleState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 incident_num: Optional[pulumi.Input[_builtins.str]] = None,
                 operate_key: Optional[pulumi.Input[_builtins.str]] = None,
                 operator: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering IncidentHandle resources.
        :param pulumi.Input[_builtins.str] incident_num: Specifies the incident number.
        :param pulumi.Input[_builtins.str] operate_key: Specifies the operation type.
               The following scenarios can be applied, and the default values are different in different scenarios:
               + **Accepting an incident ticket**: The value is fixed to `acceptedIncident1`.
               + **Submitting an incident ticket solution**: The value is `commitSolution1`.
               + **Verifying the incident handling result**: The value is `confirm`.
        :param pulumi.Input[_builtins.str] operator: Specifies the user ID of operator.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameter: Specifies the parameter.
               The following scenarios can be applied, and different scenarios contain different fields:
               + Accepting an incident ticket: Leave this parameter empty.
               + Submitting an incident ticket solution:
               - **mtm_type**: Incident type.
               For details, see [mtm_type](https://support.huaweicloud.com/intl/en-us/api-coc/coc_api_04_03_001_006_02.html).
               - **is_service_interrupt**: Whether the service is interrupted. The value can be `true` or `false`.
               - **cause**: Reason.
               - **solution**: Solution.
               - **start_time**: The fault occurrence timestamp. Required when `is_service_interrupt` is `true`.
               - **fault_recovery_time**: The fault recovery timestamp. Required when `is_service_interrupt` is `true`.
               + Verifying the incident handling result:
               - **virtual_confirm_result**: Verification result. The value can be `true` (default) or `false`.
               - **virtual_confirm_comment**: Verification description.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if incident_num is not None:
            pulumi.set(__self__, "incident_num", incident_num)
        if operate_key is not None:
            pulumi.set(__self__, "operate_key", operate_key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="incidentNum")
    def incident_num(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the incident number.
        """
        return pulumi.get(self, "incident_num")

    @incident_num.setter
    def incident_num(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "incident_num", value)

    @_builtins.property
    @pulumi.getter(name="operateKey")
    def operate_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operation type.
        The following scenarios can be applied, and the default values are different in different scenarios:
        + **Accepting an incident ticket**: The value is fixed to `acceptedIncident1`.
        + **Submitting an incident ticket solution**: The value is `commitSolution1`.
        + **Verifying the incident handling result**: The value is `confirm`.
        """
        return pulumi.get(self, "operate_key")

    @operate_key.setter
    def operate_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operate_key", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the user ID of operator.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operator", value)

    @_builtins.property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the parameter.
        The following scenarios can be applied, and different scenarios contain different fields:
        + Accepting an incident ticket: Leave this parameter empty.
        + Submitting an incident ticket solution:
        - **mtm_type**: Incident type.
        For details, see [mtm_type](https://support.huaweicloud.com/intl/en-us/api-coc/coc_api_04_03_001_006_02.html).
        - **is_service_interrupt**: Whether the service is interrupted. The value can be `true` or `false`.
        - **cause**: Reason.
        - **solution**: Solution.
        - **start_time**: The fault occurrence timestamp. Required when `is_service_interrupt` is `true`.
        - **fault_recovery_time**: The fault recovery timestamp. Required when `is_service_interrupt` is `true`.
        + Verifying the incident handling result:
        - **virtual_confirm_result**: Verification result. The value can be `true` (default) or `false`.
        - **virtual_confirm_comment**: Verification description.
        """
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameter", value)


@pulumi.type_token("huaweicloud:coc/incidentHandle:IncidentHandle")
class IncidentHandle(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 incident_num: Optional[pulumi.Input[_builtins.str]] = None,
                 operate_key: Optional[pulumi.Input[_builtins.str]] = None,
                 operator: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a COC incident handle resource within HuaweiCloud.

        > Deleting incident handle resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        incident_num = config.require_object("incidentNum")
        user_id = config.require_object("userId")
        test = huaweicloud.coc.IncidentHandle("test",
            incident_num=incident_num,
            operator=user_id,
            operate_key="acceptedIncident1")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] incident_num: Specifies the incident number.
        :param pulumi.Input[_builtins.str] operate_key: Specifies the operation type.
               The following scenarios can be applied, and the default values are different in different scenarios:
               + **Accepting an incident ticket**: The value is fixed to `acceptedIncident1`.
               + **Submitting an incident ticket solution**: The value is `commitSolution1`.
               + **Verifying the incident handling result**: The value is `confirm`.
        :param pulumi.Input[_builtins.str] operator: Specifies the user ID of operator.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameter: Specifies the parameter.
               The following scenarios can be applied, and different scenarios contain different fields:
               + Accepting an incident ticket: Leave this parameter empty.
               + Submitting an incident ticket solution:
               - **mtm_type**: Incident type.
               For details, see [mtm_type](https://support.huaweicloud.com/intl/en-us/api-coc/coc_api_04_03_001_006_02.html).
               - **is_service_interrupt**: Whether the service is interrupted. The value can be `true` or `false`.
               - **cause**: Reason.
               - **solution**: Solution.
               - **start_time**: The fault occurrence timestamp. Required when `is_service_interrupt` is `true`.
               - **fault_recovery_time**: The fault recovery timestamp. Required when `is_service_interrupt` is `true`.
               + Verifying the incident handling result:
               - **virtual_confirm_result**: Verification result. The value can be `true` (default) or `false`.
               - **virtual_confirm_comment**: Verification description.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IncidentHandleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a COC incident handle resource within HuaweiCloud.

        > Deleting incident handle resource is not supported, it will only be removed from the state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        incident_num = config.require_object("incidentNum")
        user_id = config.require_object("userId")
        test = huaweicloud.coc.IncidentHandle("test",
            incident_num=incident_num,
            operator=user_id,
            operate_key="acceptedIncident1")
        ```

        :param str resource_name: The name of the resource.
        :param IncidentHandleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IncidentHandleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 incident_num: Optional[pulumi.Input[_builtins.str]] = None,
                 operate_key: Optional[pulumi.Input[_builtins.str]] = None,
                 operator: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IncidentHandleArgs.__new__(IncidentHandleArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if incident_num is None and not opts.urn:
                raise TypeError("Missing required property 'incident_num'")
            __props__.__dict__["incident_num"] = incident_num
            if operate_key is None and not opts.urn:
                raise TypeError("Missing required property 'operate_key'")
            __props__.__dict__["operate_key"] = operate_key
            if operator is None and not opts.urn:
                raise TypeError("Missing required property 'operator'")
            __props__.__dict__["operator"] = operator
            __props__.__dict__["parameter"] = parameter
        super(IncidentHandle, __self__).__init__(
            'huaweicloud:coc/incidentHandle:IncidentHandle',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            incident_num: Optional[pulumi.Input[_builtins.str]] = None,
            operate_key: Optional[pulumi.Input[_builtins.str]] = None,
            operator: Optional[pulumi.Input[_builtins.str]] = None,
            parameter: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'IncidentHandle':
        """
        Get an existing IncidentHandle resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] incident_num: Specifies the incident number.
        :param pulumi.Input[_builtins.str] operate_key: Specifies the operation type.
               The following scenarios can be applied, and the default values are different in different scenarios:
               + **Accepting an incident ticket**: The value is fixed to `acceptedIncident1`.
               + **Submitting an incident ticket solution**: The value is `commitSolution1`.
               + **Verifying the incident handling result**: The value is `confirm`.
        :param pulumi.Input[_builtins.str] operator: Specifies the user ID of operator.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameter: Specifies the parameter.
               The following scenarios can be applied, and different scenarios contain different fields:
               + Accepting an incident ticket: Leave this parameter empty.
               + Submitting an incident ticket solution:
               - **mtm_type**: Incident type.
               For details, see [mtm_type](https://support.huaweicloud.com/intl/en-us/api-coc/coc_api_04_03_001_006_02.html).
               - **is_service_interrupt**: Whether the service is interrupted. The value can be `true` or `false`.
               - **cause**: Reason.
               - **solution**: Solution.
               - **start_time**: The fault occurrence timestamp. Required when `is_service_interrupt` is `true`.
               - **fault_recovery_time**: The fault recovery timestamp. Required when `is_service_interrupt` is `true`.
               + Verifying the incident handling result:
               - **virtual_confirm_result**: Verification result. The value can be `true` (default) or `false`.
               - **virtual_confirm_comment**: Verification description.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IncidentHandleState.__new__(_IncidentHandleState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["incident_num"] = incident_num
        __props__.__dict__["operate_key"] = operate_key
        __props__.__dict__["operator"] = operator
        __props__.__dict__["parameter"] = parameter
        return IncidentHandle(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="incidentNum")
    def incident_num(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the incident number.
        """
        return pulumi.get(self, "incident_num")

    @_builtins.property
    @pulumi.getter(name="operateKey")
    def operate_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operation type.
        The following scenarios can be applied, and the default values are different in different scenarios:
        + **Accepting an incident ticket**: The value is fixed to `acceptedIncident1`.
        + **Submitting an incident ticket solution**: The value is `commitSolution1`.
        + **Verifying the incident handling result**: The value is `confirm`.
        """
        return pulumi.get(self, "operate_key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the user ID of operator.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def parameter(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Specifies the parameter.
        The following scenarios can be applied, and different scenarios contain different fields:
        + Accepting an incident ticket: Leave this parameter empty.
        + Submitting an incident ticket solution:
        - **mtm_type**: Incident type.
        For details, see [mtm_type](https://support.huaweicloud.com/intl/en-us/api-coc/coc_api_04_03_001_006_02.html).
        - **is_service_interrupt**: Whether the service is interrupted. The value can be `true` or `false`.
        - **cause**: Reason.
        - **solution**: Solution.
        - **start_time**: The fault occurrence timestamp. Required when `is_service_interrupt` is `true`.
        - **fault_recovery_time**: The fault recovery timestamp. Required when `is_service_interrupt` is `true`.
        + Verifying the incident handling result:
        - **virtual_confirm_result**: Verification result. The value can be `true` (default) or `false`.
        - **virtual_confirm_comment**: Verification description.
        """
        return pulumi.get(self, "parameter")

