# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['FirewallGroupV2Args', 'FirewallGroupV2']

@pulumi.input_type
class FirewallGroupV2Args:
    def __init__(__self__, *,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a FirewallGroupV2 resource.
        :param pulumi.Input[_builtins.bool] admin_state_up: Administrative up/down status for the firewall group
               (must be "true" or "false" if provided - defaults to "true"). Changing this updates the `admin_state_up` of an
               existing firewall group.
        :param pulumi.Input[_builtins.str] description: A description for the firewall group. Changing this updates the `description` of an
               existing firewall group.
        :param pulumi.Input[_builtins.str] egress_policy_id: The egress policy resource id for the firewall group. Changing this updates
               the `egress_policy_id` of an existing firewall group.
        :param pulumi.Input[_builtins.str] ingress_policy_id: The ingress policy resource id for the firewall group. Changing this updates
               the `ingress_policy_id` of an existing firewall group.
        :param pulumi.Input[_builtins.str] name: A name for the firewall group. Changing this updates the `name` of an existing firewall
               group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ports: Port(s) to associate this firewall group instance with. Must be a list of strings.
               Changing this updates the associated routers of an existing firewall group.
        :param pulumi.Input[_builtins.str] region: The region in which to create the v2 networking client. A networking client is
               needed to create a firewall group. If omitted, the
               `region` argument of the provider is used. Changing this creates a new firewall group.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if egress_policy_id is not None:
            pulumi.set(__self__, "egress_policy_id", egress_policy_id)
        if ingress_policy_id is not None:
            pulumi.set(__self__, "ingress_policy_id", ingress_policy_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative up/down status for the firewall group
        (must be "true" or "false" if provided - defaults to "true"). Changing this updates the `admin_state_up` of an
        existing firewall group.
        """
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A description for the firewall group. Changing this updates the `description` of an
        existing firewall group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="egressPolicyId")
    def egress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The egress policy resource id for the firewall group. Changing this updates
        the `egress_policy_id` of an existing firewall group.
        """
        return pulumi.get(self, "egress_policy_id")

    @egress_policy_id.setter
    def egress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "egress_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="ingressPolicyId")
    def ingress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ingress policy resource id for the firewall group. Changing this updates
        the `ingress_policy_id` of an existing firewall group.
        """
        return pulumi.get(self, "ingress_policy_id")

    @ingress_policy_id.setter
    def ingress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A name for the firewall group. Changing this updates the `name` of an existing firewall
        group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Port(s) to associate this firewall group instance with. Must be a list of strings.
        Changing this updates the associated routers of an existing firewall group.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ports", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the v2 networking client. A networking client is
        needed to create a firewall group. If omitted, the
        `region` argument of the provider is used. Changing this creates a new firewall group.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.input_type
class _FirewallGroupV2State:
    def __init__(__self__, *,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering FirewallGroupV2 resources.
        :param pulumi.Input[_builtins.bool] admin_state_up: Administrative up/down status for the firewall group
               (must be "true" or "false" if provided - defaults to "true"). Changing this updates the `admin_state_up` of an
               existing firewall group.
        :param pulumi.Input[_builtins.str] description: A description for the firewall group. Changing this updates the `description` of an
               existing firewall group.
        :param pulumi.Input[_builtins.str] egress_policy_id: The egress policy resource id for the firewall group. Changing this updates
               the `egress_policy_id` of an existing firewall group.
        :param pulumi.Input[_builtins.str] ingress_policy_id: The ingress policy resource id for the firewall group. Changing this updates
               the `ingress_policy_id` of an existing firewall group.
        :param pulumi.Input[_builtins.str] name: A name for the firewall group. Changing this updates the `name` of an existing firewall
               group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ports: Port(s) to associate this firewall group instance with. Must be a list of strings.
               Changing this updates the associated routers of an existing firewall group.
        :param pulumi.Input[_builtins.str] region: The region in which to create the v2 networking client. A networking client is
               needed to create a firewall group. If omitted, the
               `region` argument of the provider is used. Changing this creates a new firewall group.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if egress_policy_id is not None:
            pulumi.set(__self__, "egress_policy_id", egress_policy_id)
        if ingress_policy_id is not None:
            pulumi.set(__self__, "ingress_policy_id", ingress_policy_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative up/down status for the firewall group
        (must be "true" or "false" if provided - defaults to "true"). Changing this updates the `admin_state_up` of an
        existing firewall group.
        """
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A description for the firewall group. Changing this updates the `description` of an
        existing firewall group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="egressPolicyId")
    def egress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The egress policy resource id for the firewall group. Changing this updates
        the `egress_policy_id` of an existing firewall group.
        """
        return pulumi.get(self, "egress_policy_id")

    @egress_policy_id.setter
    def egress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "egress_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="ingressPolicyId")
    def ingress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ingress policy resource id for the firewall group. Changing this updates
        the `ingress_policy_id` of an existing firewall group.
        """
        return pulumi.get(self, "ingress_policy_id")

    @ingress_policy_id.setter
    def ingress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A name for the firewall group. Changing this updates the `name` of an existing firewall
        group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Port(s) to associate this firewall group instance with. Must be a list of strings.
        Changing this updates the associated routers of an existing firewall group.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ports", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the v2 networking client. A networking client is
        needed to create a firewall group. If omitted, the
        `region` argument of the provider is used. Changing this creates a new firewall group.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.type_token("huaweicloud:fw/firewallGroupV2:FirewallGroupV2")
class FirewallGroupV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a v2 firewall group resource within HuaweiCloud.

        !> **WARNING:** It has been deprecated, use `NetworkAcl.Acl` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        rule1 = huaweicloud.fw.RuleV2("rule_1",
            name="my-rule-1",
            description="drop TELNET traffic",
            action="deny",
            protocol="tcp",
            destination_port="23",
            enabled=True)
        rule2 = huaweicloud.fw.RuleV2("rule_2",
            name="my-rule-2",
            description="drop NTP traffic",
            action="deny",
            protocol="udp",
            destination_port="123",
            enabled=False)
        policy1 = huaweicloud.fw.PolicyV2("policy_1",
            name="my-policy",
            rules=[
                rule1.id,
                rule2.id,
            ])
        firewall_group1 = huaweicloud.fw.FirewallGroupV2("firewall_group_1",
            name="my-firewall-group",
            ingress_policy_id=policy1.id)
        ```

        ## Import

        Firewall Groups can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:fw/firewallGroupV2:FirewallGroupV2 firewall_group_1 c9e39fb2-ce20-46c8-a964-25f3898c7a97
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] admin_state_up: Administrative up/down status for the firewall group
               (must be "true" or "false" if provided - defaults to "true"). Changing this updates the `admin_state_up` of an
               existing firewall group.
        :param pulumi.Input[_builtins.str] description: A description for the firewall group. Changing this updates the `description` of an
               existing firewall group.
        :param pulumi.Input[_builtins.str] egress_policy_id: The egress policy resource id for the firewall group. Changing this updates
               the `egress_policy_id` of an existing firewall group.
        :param pulumi.Input[_builtins.str] ingress_policy_id: The ingress policy resource id for the firewall group. Changing this updates
               the `ingress_policy_id` of an existing firewall group.
        :param pulumi.Input[_builtins.str] name: A name for the firewall group. Changing this updates the `name` of an existing firewall
               group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ports: Port(s) to associate this firewall group instance with. Must be a list of strings.
               Changing this updates the associated routers of an existing firewall group.
        :param pulumi.Input[_builtins.str] region: The region in which to create the v2 networking client. A networking client is
               needed to create a firewall group. If omitted, the
               `region` argument of the provider is used. Changing this creates a new firewall group.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallGroupV2Args] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a v2 firewall group resource within HuaweiCloud.

        !> **WARNING:** It has been deprecated, use `NetworkAcl.Acl` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        rule1 = huaweicloud.fw.RuleV2("rule_1",
            name="my-rule-1",
            description="drop TELNET traffic",
            action="deny",
            protocol="tcp",
            destination_port="23",
            enabled=True)
        rule2 = huaweicloud.fw.RuleV2("rule_2",
            name="my-rule-2",
            description="drop NTP traffic",
            action="deny",
            protocol="udp",
            destination_port="123",
            enabled=False)
        policy1 = huaweicloud.fw.PolicyV2("policy_1",
            name="my-policy",
            rules=[
                rule1.id,
                rule2.id,
            ])
        firewall_group1 = huaweicloud.fw.FirewallGroupV2("firewall_group_1",
            name="my-firewall-group",
            ingress_policy_id=policy1.id)
        ```

        ## Import

        Firewall Groups can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:fw/firewallGroupV2:FirewallGroupV2 firewall_group_1 c9e39fb2-ce20-46c8-a964-25f3898c7a97
        ```

        :param str resource_name: The name of the resource.
        :param FirewallGroupV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallGroupV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallGroupV2Args.__new__(FirewallGroupV2Args)

            __props__.__dict__["admin_state_up"] = admin_state_up
            __props__.__dict__["description"] = description
            __props__.__dict__["egress_policy_id"] = egress_policy_id
            __props__.__dict__["ingress_policy_id"] = ingress_policy_id
            __props__.__dict__["name"] = name
            __props__.__dict__["ports"] = ports
            __props__.__dict__["region"] = region
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["value_specs"] = value_specs
        super(FirewallGroupV2, __self__).__init__(
            'huaweicloud:fw/firewallGroupV2:FirewallGroupV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            ports: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            value_specs: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'FirewallGroupV2':
        """
        Get an existing FirewallGroupV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] admin_state_up: Administrative up/down status for the firewall group
               (must be "true" or "false" if provided - defaults to "true"). Changing this updates the `admin_state_up` of an
               existing firewall group.
        :param pulumi.Input[_builtins.str] description: A description for the firewall group. Changing this updates the `description` of an
               existing firewall group.
        :param pulumi.Input[_builtins.str] egress_policy_id: The egress policy resource id for the firewall group. Changing this updates
               the `egress_policy_id` of an existing firewall group.
        :param pulumi.Input[_builtins.str] ingress_policy_id: The ingress policy resource id for the firewall group. Changing this updates
               the `ingress_policy_id` of an existing firewall group.
        :param pulumi.Input[_builtins.str] name: A name for the firewall group. Changing this updates the `name` of an existing firewall
               group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ports: Port(s) to associate this firewall group instance with. Must be a list of strings.
               Changing this updates the associated routers of an existing firewall group.
        :param pulumi.Input[_builtins.str] region: The region in which to create the v2 networking client. A networking client is
               needed to create a firewall group. If omitted, the
               `region` argument of the provider is used. Changing this creates a new firewall group.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] value_specs: Map of additional options.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallGroupV2State.__new__(_FirewallGroupV2State)

        __props__.__dict__["admin_state_up"] = admin_state_up
        __props__.__dict__["description"] = description
        __props__.__dict__["egress_policy_id"] = egress_policy_id
        __props__.__dict__["ingress_policy_id"] = ingress_policy_id
        __props__.__dict__["name"] = name
        __props__.__dict__["ports"] = ports
        __props__.__dict__["region"] = region
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["value_specs"] = value_specs
        return FirewallGroupV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Administrative up/down status for the firewall group
        (must be "true" or "false" if provided - defaults to "true"). Changing this updates the `admin_state_up` of an
        existing firewall group.
        """
        return pulumi.get(self, "admin_state_up")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A description for the firewall group. Changing this updates the `description` of an
        existing firewall group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="egressPolicyId")
    def egress_policy_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The egress policy resource id for the firewall group. Changing this updates
        the `egress_policy_id` of an existing firewall group.
        """
        return pulumi.get(self, "egress_policy_id")

    @_builtins.property
    @pulumi.getter(name="ingressPolicyId")
    def ingress_policy_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ingress policy resource id for the firewall group. Changing this updates
        the `ingress_policy_id` of an existing firewall group.
        """
        return pulumi.get(self, "ingress_policy_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A name for the firewall group. Changing this updates the `name` of an existing firewall
        group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Port(s) to associate this firewall group instance with. Must be a list of strings.
        Changing this updates the associated routers of an existing firewall group.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the v2 networking client. A networking client is
        needed to create a firewall group. If omitted, the
        `region` argument of the provider is used. Changing this creates a new firewall group.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Map of additional options.
        """
        return pulumi.get(self, "value_specs")

