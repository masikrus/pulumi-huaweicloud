# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCustomLinesResult',
    'AwaitableGetCustomLinesResult',
    'get_custom_lines',
    'get_custom_lines_output',
]

@pulumi.output_type
class GetCustomLinesResult:
    """
    A collection of values returned by getCustomLines.
    """
    def __init__(__self__, id=None, ip=None, line_id=None, lines=None, name=None, region=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if line_id and not isinstance(line_id, str):
            raise TypeError("Expected argument 'line_id' to be a str")
        pulumi.set(__self__, "line_id", line_id)
        if lines and not isinstance(lines, list):
            raise TypeError("Expected argument 'lines' to be a list")
        pulumi.set(__self__, "lines", lines)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="lineId")
    def line_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "line_id")

    @_builtins.property
    @pulumi.getter
    def lines(self) -> Sequence['outputs.GetCustomLinesLineResult']:
        """
        All custom lines that match the filter parameters.
        """
        return pulumi.get(self, "lines")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the custom line.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The current status of the custom line.
        """
        return pulumi.get(self, "status")


class AwaitableGetCustomLinesResult(GetCustomLinesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomLinesResult(
            id=self.id,
            ip=self.ip,
            line_id=self.line_id,
            lines=self.lines,
            name=self.name,
            region=self.region,
            status=self.status)


def get_custom_lines(ip: Optional[_builtins.str] = None,
                     line_id: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     status: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCustomLinesResult:
    """
    Use this data source to get the list of DNS custom lines within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dns.get_custom_lines()
    ```


    :param _builtins.str ip: Specifies the IP address used to query custom line which is in the IP address range.
    :param _builtins.str line_id: Specifies the ID of the custom line. Fuzzy search is supported.
    :param _builtins.str name: Specifies the name of the custom line. Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the custom line.  
           The valid values are as follows:
           + **ACTIVE**
           + **FREEZE**
           + **DISABLE**
           + **ERROR**
    """
    __args__ = dict()
    __args__['ip'] = ip
    __args__['lineId'] = line_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dns/getCustomLines:getCustomLines', __args__, opts=opts, typ=GetCustomLinesResult).value

    return AwaitableGetCustomLinesResult(
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        line_id=pulumi.get(__ret__, 'line_id'),
        lines=pulumi.get(__ret__, 'lines'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_custom_lines_output(ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            line_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCustomLinesResult]:
    """
    Use this data source to get the list of DNS custom lines within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dns.get_custom_lines()
    ```


    :param _builtins.str ip: Specifies the IP address used to query custom line which is in the IP address range.
    :param _builtins.str line_id: Specifies the ID of the custom line. Fuzzy search is supported.
    :param _builtins.str name: Specifies the name of the custom line. Fuzzy search is supported.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the custom line.  
           The valid values are as follows:
           + **ACTIVE**
           + **FREEZE**
           + **DISABLE**
           + **ERROR**
    """
    __args__ = dict()
    __args__['ip'] = ip
    __args__['lineId'] = line_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dns/getCustomLines:getCustomLines', __args__, opts=opts, typ=GetCustomLinesResult)
    return __ret__.apply(lambda __response__: GetCustomLinesResult(
        id=pulumi.get(__response__, 'id'),
        ip=pulumi.get(__response__, 'ip'),
        line_id=pulumi.get(__response__, 'line_id'),
        lines=pulumi.get(__response__, 'lines'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
