# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNameserversResult',
    'AwaitableGetNameserversResult',
    'get_nameservers',
    'get_nameservers_output',
]

@pulumi.output_type
class GetNameserversResult:
    """
    A collection of values returned by getNameservers.
    """
    def __init__(__self__, id=None, nameservers=None, region=None, server_region=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nameservers and not isinstance(nameservers, list):
            raise TypeError("Expected argument 'nameservers' to be a list")
        pulumi.set(__self__, "nameservers", nameservers)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_region and not isinstance(server_region, str):
            raise TypeError("Expected argument 'server_region' to be a str")
        pulumi.set(__self__, "server_region", server_region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def nameservers(self) -> Sequence['outputs.GetNameserversNameserverResult']:
        """
        All name servers that match the filter parameters.
        """
        return pulumi.get(self, "nameservers")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region where the name server is located.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serverRegion")
    def server_region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server_region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the name server.
        """
        return pulumi.get(self, "type")


class AwaitableGetNameserversResult(GetNameserversResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNameserversResult(
            id=self.id,
            nameservers=self.nameservers,
            region=self.region,
            server_region=self.server_region,
            type=self.type)


def get_nameservers(region: Optional[_builtins.str] = None,
                    server_region: Optional[_builtins.str] = None,
                    type: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNameserversResult:
    """
    Use this data source to get the list of DNS name servers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dns.get_nameservers(type="public")
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_region: Specifies the region to which the name server belongs.
           This parameter cannot be set when `type` is `public`.
    :param _builtins.str type: Specifies the type of the name server.
           The valid values are as follows:
           + **public**
           + **private**
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['serverRegion'] = server_region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dns/getNameservers:getNameservers', __args__, opts=opts, typ=GetNameserversResult).value

    return AwaitableGetNameserversResult(
        id=pulumi.get(__ret__, 'id'),
        nameservers=pulumi.get(__ret__, 'nameservers'),
        region=pulumi.get(__ret__, 'region'),
        server_region=pulumi.get(__ret__, 'server_region'),
        type=pulumi.get(__ret__, 'type'))
def get_nameservers_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           server_region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNameserversResult]:
    """
    Use this data source to get the list of DNS name servers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dns.get_nameservers(type="public")
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str server_region: Specifies the region to which the name server belongs.
           This parameter cannot be set when `type` is `public`.
    :param _builtins.str type: Specifies the type of the name server.
           The valid values are as follows:
           + **public**
           + **private**
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['serverRegion'] = server_region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dns/getNameservers:getNameservers', __args__, opts=opts, typ=GetNameserversResult)
    return __ret__.apply(lambda __response__: GetNameserversResult(
        id=pulumi.get(__response__, 'id'),
        nameservers=pulumi.get(__response__, 'nameservers'),
        region=pulumi.get(__response__, 'region'),
        server_region=pulumi.get(__response__, 'server_region'),
        type=pulumi.get(__response__, 'type')))
