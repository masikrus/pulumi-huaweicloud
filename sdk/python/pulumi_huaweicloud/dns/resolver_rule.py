# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResolverRuleArgs', 'ResolverRule']

@pulumi.input_type
class ResolverRuleArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[_builtins.str],
                 endpoint_id: pulumi.Input[_builtins.str],
                 ip_addresses: pulumi.Input[Sequence[pulumi.Input['ResolverRuleIpAddressArgs']]],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ResolverRule resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name.  
               The maximum length of the domain name is `254` characters.
               The domain name consists of multiple strings separated by dots (.), and the maximum length of a single string is `63` characters.
               Only Chinese and English characters, digits, and hyphens (-) allowed, and it cannot start or end with a hyphen.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the ID of the DNS endpoint to which the resolver rule belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResolverRuleIpAddressArgs']]] ip_addresses: Specifies the IP address list of the DNS resolver rule.  
               The ip_address structure is documented below.
               
               <a name="resolver_rule_ip_addresses"></a>
               The `ip_address` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the resolver rule name.  
               The valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_), hyphens (-)
               and dots (.) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the DNS resolver rule.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the domain name.  
        The maximum length of the domain name is `254` characters.
        The domain name consists of multiple strings separated by dots (.), and the maximum length of a single string is `63` characters.
        Only Chinese and English characters, digits, and hyphens (-) allowed, and it cannot start or end with a hyphen.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the DNS endpoint to which the resolver rule belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> pulumi.Input[Sequence[pulumi.Input['ResolverRuleIpAddressArgs']]]:
        """
        Specifies the IP address list of the DNS resolver rule.  
        The ip_address structure is documented below.

        <a name="resolver_rule_ip_addresses"></a>
        The `ip_address` block supports:
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: pulumi.Input[Sequence[pulumi.Input['ResolverRuleIpAddressArgs']]]):
        pulumi.set(self, "ip_addresses", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resolver rule name.  
        The valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_), hyphens (-)
        and dots (.) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the DNS resolver rule.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ResolverRuleState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleIpAddressArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]]] = None):
        """
        Input properties used for looking up and filtering ResolverRule resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the resolver rule.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name.  
               The maximum length of the domain name is `254` characters.
               The domain name consists of multiple strings separated by dots (.), and the maximum length of a single string is `63` characters.
               Only Chinese and English characters, digits, and hyphens (-) allowed, and it cannot start or end with a hyphen.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the ID of the DNS endpoint to which the resolver rule belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResolverRuleIpAddressArgs']]] ip_addresses: Specifies the IP address list of the DNS resolver rule.  
               The ip_address structure is documented below.
               
               <a name="resolver_rule_ip_addresses"></a>
               The `ip_address` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the resolver rule name.  
               The valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_), hyphens (-)
               and dots (.) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the DNS resolver rule.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] rule_type: The rule type of the resolver rule.
        :param pulumi.Input[_builtins.str] status: The status of the VPC.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the resolver rule.
        :param pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]] vpcs: The list of the VPCs to which the resolver rule is bound.
               The vpcs structure is documented below.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vpcs is not None:
            pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the resolver rule.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain name.  
        The maximum length of the domain name is `254` characters.
        The domain name consists of multiple strings separated by dots (.), and the maximum length of a single string is `63` characters.
        Only Chinese and English characters, digits, and hyphens (-) allowed, and it cannot start or end with a hyphen.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the DNS endpoint to which the resolver rule belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleIpAddressArgs']]]]:
        """
        Specifies the IP address list of the DNS resolver rule.  
        The ip_address structure is documented below.

        <a name="resolver_rule_ip_addresses"></a>
        The `ip_address` block supports:
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleIpAddressArgs']]]]):
        pulumi.set(self, "ip_addresses", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resolver rule name.  
        The valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_), hyphens (-)
        and dots (.) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the DNS resolver rule.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The rule type of the resolver rule.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the VPC.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the resolver rule.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]]]:
        """
        The list of the VPCs to which the resolver rule is bound.
        The vpcs structure is documented below.
        """
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]]]):
        pulumi.set(self, "vpcs", value)


@pulumi.type_token("huaweicloud:Dns/resolverRule:ResolverRule")
class ResolverRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResolverRuleIpAddressArgs', 'ResolverRuleIpAddressArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DNS resolver rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        endpoint_id = config.require_object("endpointId")
        resolver_rule_name = config.require_object("resolverRuleName")
        domain_name = config.require_object("domainName")
        ip_address_list = config.require_object("ipAddressList")
        test = huaweicloud.dns.ResolverRule("test",
            ip_addresses=[{
                "ip": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in ip_address_list]],
            endpoint_id=endpoint_id,
            name=resolver_rule_name,
            domain_name=domain_name)
        ```

        ## Import

        The resolver rule can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dns/resolverRule:ResolverRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name.  
               The maximum length of the domain name is `254` characters.
               The domain name consists of multiple strings separated by dots (.), and the maximum length of a single string is `63` characters.
               Only Chinese and English characters, digits, and hyphens (-) allowed, and it cannot start or end with a hyphen.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the ID of the DNS endpoint to which the resolver rule belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResolverRuleIpAddressArgs', 'ResolverRuleIpAddressArgsDict']]]] ip_addresses: Specifies the IP address list of the DNS resolver rule.  
               The ip_address structure is documented below.
               
               <a name="resolver_rule_ip_addresses"></a>
               The `ip_address` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the resolver rule name.  
               The valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_), hyphens (-)
               and dots (.) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the DNS resolver rule.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResolverRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DNS resolver rule resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        endpoint_id = config.require_object("endpointId")
        resolver_rule_name = config.require_object("resolverRuleName")
        domain_name = config.require_object("domainName")
        ip_address_list = config.require_object("ipAddressList")
        test = huaweicloud.dns.ResolverRule("test",
            ip_addresses=[{
                "ip": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in ip_address_list]],
            endpoint_id=endpoint_id,
            name=resolver_rule_name,
            domain_name=domain_name)
        ```

        ## Import

        The resolver rule can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dns/resolverRule:ResolverRule test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ResolverRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResolverRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResolverRuleIpAddressArgs', 'ResolverRuleIpAddressArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResolverRuleArgs.__new__(ResolverRuleArgs)

            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            if endpoint_id is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint_id'")
            __props__.__dict__["endpoint_id"] = endpoint_id
            if ip_addresses is None and not opts.urn:
                raise TypeError("Missing required property 'ip_addresses'")
            __props__.__dict__["ip_addresses"] = ip_addresses
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["rule_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["vpcs"] = None
        super(ResolverRule, __self__).__init__(
            'huaweicloud:Dns/resolverRule:ResolverRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
            ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResolverRuleIpAddressArgs', 'ResolverRuleIpAddressArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rule_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResolverRuleVpcArgs', 'ResolverRuleVpcArgsDict']]]]] = None) -> 'ResolverRule':
        """
        Get an existing ResolverRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the resolver rule.
        :param pulumi.Input[_builtins.str] domain_name: Specifies the domain name.  
               The maximum length of the domain name is `254` characters.
               The domain name consists of multiple strings separated by dots (.), and the maximum length of a single string is `63` characters.
               Only Chinese and English characters, digits, and hyphens (-) allowed, and it cannot start or end with a hyphen.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] endpoint_id: Specifies the ID of the DNS endpoint to which the resolver rule belongs.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResolverRuleIpAddressArgs', 'ResolverRuleIpAddressArgsDict']]]] ip_addresses: Specifies the IP address list of the DNS resolver rule.  
               The ip_address structure is documented below.
               
               <a name="resolver_rule_ip_addresses"></a>
               The `ip_address` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the resolver rule name.  
               The valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_), hyphens (-)
               and dots (.) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the DNS resolver rule.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] rule_type: The rule type of the resolver rule.
        :param pulumi.Input[_builtins.str] status: The status of the VPC.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the resolver rule.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResolverRuleVpcArgs', 'ResolverRuleVpcArgsDict']]]] vpcs: The list of the VPCs to which the resolver rule is bound.
               The vpcs structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResolverRuleState.__new__(_ResolverRuleState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["endpoint_id"] = endpoint_id
        __props__.__dict__["ip_addresses"] = ip_addresses
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["rule_type"] = rule_type
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vpcs"] = vpcs
        return ResolverRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the resolver rule.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the domain name.  
        The maximum length of the domain name is `254` characters.
        The domain name consists of multiple strings separated by dots (.), and the maximum length of a single string is `63` characters.
        Only Chinese and English characters, digits, and hyphens (-) allowed, and it cannot start or end with a hyphen.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the DNS endpoint to which the resolver rule belongs.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> pulumi.Output[Sequence['outputs.ResolverRuleIpAddress']]:
        """
        Specifies the IP address list of the DNS resolver rule.  
        The ip_address structure is documented below.

        <a name="resolver_rule_ip_addresses"></a>
        The `ip_address` block supports:
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the resolver rule name.  
        The valid length is limited from `1` to `64`, only Chinese and English characters, digits, underscores (_), hyphens (-)
        and dots (.) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the DNS resolver rule.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Output[_builtins.str]:
        """
        The rule type of the resolver rule.
        """
        return pulumi.get(self, "rule_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the VPC.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the resolver rule.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> pulumi.Output[Sequence['outputs.ResolverRuleVpc']]:
        """
        The list of the VPCs to which the resolver rule is bound.
        The vpcs structure is documented below.
        """
        return pulumi.get(self, "vpcs")

