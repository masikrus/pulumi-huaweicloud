# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetFloatingPtrrecordsResult',
    'AwaitableGetFloatingPtrrecordsResult',
    'get_floating_ptrrecords',
    'get_floating_ptrrecords_output',
]

@pulumi.output_type
class GetFloatingPtrrecordsResult:
    """
    A collection of values returned by getFloatingPtrrecords.
    """
    def __init__(__self__, domain_name=None, enterprise_project_id=None, id=None, ptrrecords=None, public_ip=None, record_id=None, region=None, status=None, tags=None):
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ptrrecords and not isinstance(ptrrecords, list):
            raise TypeError("Expected argument 'ptrrecords' to be a list")
        pulumi.set(__self__, "ptrrecords", ptrrecords)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if record_id and not isinstance(record_id, str):
            raise TypeError("Expected argument 'record_id' to be a str")
        pulumi.set(__self__, "record_id", record_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        """
        The domain name of the PTR record.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID corresponding to the PTR record.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ptrrecords(self) -> Sequence['outputs.GetFloatingPtrrecordsPtrrecordResult']:
        """
        The list of the PTR records.
        """
        return pulumi.get(self, "ptrrecords")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The EIP address corresponding to the PTR record.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "record_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The current status of the PTR record.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The key/value pairs to associate with the PTR record.
        """
        return pulumi.get(self, "tags")


class AwaitableGetFloatingPtrrecordsResult(GetFloatingPtrrecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFloatingPtrrecordsResult(
            domain_name=self.domain_name,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            ptrrecords=self.ptrrecords,
            public_ip=self.public_ip,
            record_id=self.record_id,
            region=self.region,
            status=self.status,
            tags=self.tags)


def get_floating_ptrrecords(domain_name: Optional[_builtins.str] = None,
                            enterprise_project_id: Optional[_builtins.str] = None,
                            public_ip: Optional[_builtins.str] = None,
                            record_id: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            status: Optional[_builtins.str] = None,
                            tags: Optional[Mapping[str, _builtins.str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFloatingPtrrecordsResult:
    """
    Use this data source to get the list of DNS PTR records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_name = config.require_object("domainName")
    test = huaweicloud.Dns.get_floating_ptrrecords(domain_name=domain_name)
    ```


    :param _builtins.str domain_name: Specifies the domain name of the PTR record.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID corresponding to the PTR record.
    :param _builtins.str public_ip: Specifies the EIP address of the PTR record.
    :param _builtins.str record_id: Specifies the ID of the PTR record.
           The format is `{region}:{floatingip_id}`, `floatingip_id` indicates the EIP ID corresponding to the PTR record.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the PTR record.
           The valid values are **ACTIVE**, **ERROR**, **FREEZE** and **DISABLE**.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the PTR record.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['publicIp'] = public_ip
    __args__['recordId'] = record_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dns/getFloatingPtrrecords:getFloatingPtrrecords', __args__, opts=opts, typ=GetFloatingPtrrecordsResult).value

    return AwaitableGetFloatingPtrrecordsResult(
        domain_name=pulumi.get(__ret__, 'domain_name'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        ptrrecords=pulumi.get(__ret__, 'ptrrecords'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        record_id=pulumi.get(__ret__, 'record_id'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))
def get_floating_ptrrecords_output(domain_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   public_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   record_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFloatingPtrrecordsResult]:
    """
    Use this data source to get the list of DNS PTR records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_name = config.require_object("domainName")
    test = huaweicloud.Dns.get_floating_ptrrecords(domain_name=domain_name)
    ```


    :param _builtins.str domain_name: Specifies the domain name of the PTR record.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID corresponding to the PTR record.
    :param _builtins.str public_ip: Specifies the EIP address of the PTR record.
    :param _builtins.str record_id: Specifies the ID of the PTR record.
           The format is `{region}:{floatingip_id}`, `floatingip_id` indicates the EIP ID corresponding to the PTR record.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the PTR record.
           The valid values are **ACTIVE**, **ERROR**, **FREEZE** and **DISABLE**.
    :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the PTR record.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['publicIp'] = public_ip
    __args__['recordId'] = record_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dns/getFloatingPtrrecords:getFloatingPtrrecords', __args__, opts=opts, typ=GetFloatingPtrrecordsResult)
    return __ret__.apply(lambda __response__: GetFloatingPtrrecordsResult(
        domain_name=pulumi.get(__response__, 'domain_name'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        ptrrecords=pulumi.get(__response__, 'ptrrecords'),
        public_ip=pulumi.get(__response__, 'public_ip'),
        record_id=pulumi.get(__response__, 'record_id'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags')))
