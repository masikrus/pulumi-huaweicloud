# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTagsFilterResult',
    'AwaitableGetTagsFilterResult',
    'get_tags_filter',
    'get_tags_filter_output',
]

@pulumi.output_type
class GetTagsFilterResult:
    """
    A collection of values returned by getTagsFilter.
    """
    def __init__(__self__, id=None, matches=None, not_tags=None, not_tags_anies=None, region=None, resource_type=None, resources=None, tags=None, tags_anies=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if not_tags and not isinstance(not_tags, list):
            raise TypeError("Expected argument 'not_tags' to be a list")
        pulumi.set(__self__, "not_tags", not_tags)
        if not_tags_anies and not isinstance(not_tags_anies, list):
            raise TypeError("Expected argument 'not_tags_anies' to be a list")
        pulumi.set(__self__, "not_tags_anies", not_tags_anies)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tags_anies and not isinstance(tags_anies, list):
            raise TypeError("Expected argument 'tags_anies' to be a list")
        pulumi.set(__self__, "tags_anies", tags_anies)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetTagsFilterMatchResult']]:
        return pulumi.get(self, "matches")

    @_builtins.property
    @pulumi.getter(name="notTags")
    def not_tags(self) -> Optional[Sequence['outputs.GetTagsFilterNotTagResult']]:
        return pulumi.get(self, "not_tags")

    @_builtins.property
    @pulumi.getter(name="notTagsAnies")
    def not_tags_anies(self) -> Optional[Sequence['outputs.GetTagsFilterNotTagsAnyResult']]:
        return pulumi.get(self, "not_tags_anies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetTagsFilterResourceResult']:
        """
        Indicates all dedicated resources that match the filter parameters.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetTagsFilterTagResult']]:
        """
        Indicates the tag list associated with the resource.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAnies")
    def tags_anies(self) -> Optional[Sequence['outputs.GetTagsFilterTagsAnyResult']]:
        return pulumi.get(self, "tags_anies")


class AwaitableGetTagsFilterResult(GetTagsFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTagsFilterResult(
            id=self.id,
            matches=self.matches,
            not_tags=self.not_tags,
            not_tags_anies=self.not_tags_anies,
            region=self.region,
            resource_type=self.resource_type,
            resources=self.resources,
            tags=self.tags,
            tags_anies=self.tags_anies)


def get_tags_filter(matches: Optional[Sequence[Union['GetTagsFilterMatchArgs', 'GetTagsFilterMatchArgsDict']]] = None,
                    not_tags: Optional[Sequence[Union['GetTagsFilterNotTagArgs', 'GetTagsFilterNotTagArgsDict']]] = None,
                    not_tags_anies: Optional[Sequence[Union['GetTagsFilterNotTagsAnyArgs', 'GetTagsFilterNotTagsAnyArgsDict']]] = None,
                    region: Optional[_builtins.str] = None,
                    resource_type: Optional[_builtins.str] = None,
                    tags: Optional[Sequence[Union['GetTagsFilterTagArgs', 'GetTagsFilterTagArgsDict']]] = None,
                    tags_anies: Optional[Sequence[Union['GetTagsFilterTagsAnyArgs', 'GetTagsFilterTagsAnyArgsDict']]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTagsFilterResult:
    """
    Use this data source to filter resources by tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_type = config.require_object("resourceType")
    test = huaweicloud.Dns.get_tags_filter(resource_type=resource_type)
    ```


    :param Sequence[Union['GetTagsFilterMatchArgs', 'GetTagsFilterMatchArgsDict']] matches: Specifies the fields to be queried.
           The matches structure is documented below.
    :param Sequence[Union['GetTagsFilterNotTagArgs', 'GetTagsFilterNotTagArgsDict']] not_tags: Specifies the list of the tags to be queried.
           The tag_values structure is documented below.
    :param Sequence[Union['GetTagsFilterNotTagsAnyArgs', 'GetTagsFilterNotTagsAnyArgsDict']] not_tags_anies: Specifies the list of the tags to be queried.
           The tag_values structure is documented below.
           
           <a name="block--matches"></a>
           The `matches` block supports:
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: Specifies the resource type.
    :param Sequence[Union['GetTagsFilterTagArgs', 'GetTagsFilterTagArgsDict']] tags: Specifies the list of the tags to be queried.
           The tag_values structure is documented below.
    :param Sequence[Union['GetTagsFilterTagsAnyArgs', 'GetTagsFilterTagsAnyArgsDict']] tags_anies: Specifies the list of the tags to be queried.
           The tag_values structure is documented below.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['notTags'] = not_tags
    __args__['notTagsAnies'] = not_tags_anies
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['tags'] = tags
    __args__['tagsAnies'] = tags_anies
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dns/getTagsFilter:getTagsFilter', __args__, opts=opts, typ=GetTagsFilterResult).value

    return AwaitableGetTagsFilterResult(
        id=pulumi.get(__ret__, 'id'),
        matches=pulumi.get(__ret__, 'matches'),
        not_tags=pulumi.get(__ret__, 'not_tags'),
        not_tags_anies=pulumi.get(__ret__, 'not_tags_anies'),
        region=pulumi.get(__ret__, 'region'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        resources=pulumi.get(__ret__, 'resources'),
        tags=pulumi.get(__ret__, 'tags'),
        tags_anies=pulumi.get(__ret__, 'tags_anies'))
def get_tags_filter_output(matches: Optional[pulumi.Input[Optional[Sequence[Union['GetTagsFilterMatchArgs', 'GetTagsFilterMatchArgsDict']]]]] = None,
                           not_tags: Optional[pulumi.Input[Optional[Sequence[Union['GetTagsFilterNotTagArgs', 'GetTagsFilterNotTagArgsDict']]]]] = None,
                           not_tags_anies: Optional[pulumi.Input[Optional[Sequence[Union['GetTagsFilterNotTagsAnyArgs', 'GetTagsFilterNotTagsAnyArgsDict']]]]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                           tags: Optional[pulumi.Input[Optional[Sequence[Union['GetTagsFilterTagArgs', 'GetTagsFilterTagArgsDict']]]]] = None,
                           tags_anies: Optional[pulumi.Input[Optional[Sequence[Union['GetTagsFilterTagsAnyArgs', 'GetTagsFilterTagsAnyArgsDict']]]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTagsFilterResult]:
    """
    Use this data source to filter resources by tags.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_type = config.require_object("resourceType")
    test = huaweicloud.Dns.get_tags_filter(resource_type=resource_type)
    ```


    :param Sequence[Union['GetTagsFilterMatchArgs', 'GetTagsFilterMatchArgsDict']] matches: Specifies the fields to be queried.
           The matches structure is documented below.
    :param Sequence[Union['GetTagsFilterNotTagArgs', 'GetTagsFilterNotTagArgsDict']] not_tags: Specifies the list of the tags to be queried.
           The tag_values structure is documented below.
    :param Sequence[Union['GetTagsFilterNotTagsAnyArgs', 'GetTagsFilterNotTagsAnyArgsDict']] not_tags_anies: Specifies the list of the tags to be queried.
           The tag_values structure is documented below.
           
           <a name="block--matches"></a>
           The `matches` block supports:
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: Specifies the resource type.
    :param Sequence[Union['GetTagsFilterTagArgs', 'GetTagsFilterTagArgsDict']] tags: Specifies the list of the tags to be queried.
           The tag_values structure is documented below.
    :param Sequence[Union['GetTagsFilterTagsAnyArgs', 'GetTagsFilterTagsAnyArgsDict']] tags_anies: Specifies the list of the tags to be queried.
           The tag_values structure is documented below.
    """
    __args__ = dict()
    __args__['matches'] = matches
    __args__['notTags'] = not_tags
    __args__['notTagsAnies'] = not_tags_anies
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['tags'] = tags
    __args__['tagsAnies'] = tags_anies
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dns/getTagsFilter:getTagsFilter', __args__, opts=opts, typ=GetTagsFilterResult)
    return __ret__.apply(lambda __response__: GetTagsFilterResult(
        id=pulumi.get(__response__, 'id'),
        matches=pulumi.get(__response__, 'matches'),
        not_tags=pulumi.get(__response__, 'not_tags'),
        not_tags_anies=pulumi.get(__response__, 'not_tags_anies'),
        region=pulumi.get(__response__, 'region'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        resources=pulumi.get(__response__, 'resources'),
        tags=pulumi.get(__response__, 'tags'),
        tags_anies=pulumi.get(__response__, 'tags_anies')))
