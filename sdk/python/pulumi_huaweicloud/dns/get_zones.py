# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetZonesResult',
    'AwaitableGetZonesResult',
    'get_zones',
    'get_zones_output',
]

@pulumi.output_type
class GetZonesResult:
    """
    A collection of values returned by getZones.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, name=None, region=None, router_id=None, search_mode=None, sort_dir=None, sort_key=None, status=None, tags=None, zone_id=None, zone_type=None, zones=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if router_id and not isinstance(router_id, str):
            raise TypeError("Expected argument 'router_id' to be a str")
        pulumi.set(__self__, "router_id", router_id)
        if search_mode and not isinstance(search_mode, str):
            raise TypeError("Expected argument 'search_mode' to be a str")
        pulumi.set(__self__, "search_mode", search_mode)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)
        if zone_type and not isinstance(zone_type, str):
            raise TypeError("Expected argument 'zone_type' to be a str")
        pulumi.set(__self__, "zone_type", zone_type)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The zone name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VPC associated with the zone.
        """
        return pulumi.get(self, "router_id")

    @_builtins.property
    @pulumi.getter(name="searchMode")
    def search_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "search_mode")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The zone status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[_builtins.str]:
        """
        The key/value pairs to associate with the zone.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "zone_id")

    @_builtins.property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> _builtins.str:
        """
        The zone type. Valid values are **public** and **private**.
        """
        return pulumi.get(self, "zone_type")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetZonesZoneResult']:
        """
        The list of zones.
        The zones structure is documented below.
        """
        return pulumi.get(self, "zones")


class AwaitableGetZonesResult(GetZonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZonesResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            region=self.region,
            router_id=self.router_id,
            search_mode=self.search_mode,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            status=self.status,
            tags=self.tags,
            zone_id=self.zone_id,
            zone_type=self.zone_type,
            zones=self.zones)


def get_zones(enterprise_project_id: Optional[_builtins.str] = None,
              name: Optional[_builtins.str] = None,
              region: Optional[_builtins.str] = None,
              router_id: Optional[_builtins.str] = None,
              search_mode: Optional[_builtins.str] = None,
              sort_dir: Optional[_builtins.str] = None,
              sort_key: Optional[_builtins.str] = None,
              status: Optional[_builtins.str] = None,
              tags: Optional[_builtins.str] = None,
              zone_id: Optional[_builtins.str] = None,
              zone_type: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZonesResult:
    """
    Use this data source to get the list of DNS zones.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    zone_type = config.require_object("zoneType")
    enterprise_project_id = config.require_object("enterpriseProjectId")
    test = huaweicloud.Dns.get_zones(zone_type=zone_type,
        enterprise_project_id=enterprise_project_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID which the zone associated.
    :param _builtins.str name: Specifies the name of the zone to be queried. Fuzzy matching will work.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str router_id: Specifies the ID of the VPC associated with the private zone.  
           This parameter is available only when the `zone_type` parameter is set to **private**.
    :param _builtins.str search_mode: Specifies the search mode for `name`. Valid values are as follows:
           + **like**: Fuzzy matching.
           + **equal**: Accurate matching.
           
           If not specified, fuzzy matching will be used.
    :param _builtins.str sort_dir: Specifies the sorting mode for the list of the zones.  
           The valid values are as follows:
           + **DESC**: Descending order.
           + **ASC**: Ascending order.
    :param _builtins.str sort_key: Specifies the sorting filed for the list of the zones.  
           The valid values are as follows:
           + **name**: The zone name.
           + **created_at**: The creation time of the zone.
           + **updated_at** The update time of the zone.
    :param _builtins.str status: Specifies the zone status. Valid values are as follows:
           + **ACTIVE**: Normal.
           + **ERROR**: Failed.
           + **FREEZE**: Frozen.
           + **DISABLE**: Disabled.
           + **POLICE**: Frozen due to security reasons.
           + **ILLEGAL**: Frozen due to abuse.
    :param _builtins.str tags: Specifies the resource tag. The format is as follows: key1,value1|key2,value2.
           Multiple tags are separated by vertical bar (|). The key and value of each tag are separated by comma (,). The tags
           are in `AND` relationship. Exact matching will work. If the value starts with an asterisk (*), fuzzy matching will
           work for the string following the asterisk.
    :param _builtins.str zone_id: Specifies the ID of the zone.
    :param _builtins.str zone_type: Specifies the zone type. The value can be **public** or **private**.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['routerId'] = router_id
    __args__['searchMode'] = search_mode
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['zoneId'] = zone_id
    __args__['zoneType'] = zone_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dns/getZones:getZones', __args__, opts=opts, typ=GetZonesResult).value

    return AwaitableGetZonesResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        router_id=pulumi.get(__ret__, 'router_id'),
        search_mode=pulumi.get(__ret__, 'search_mode'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        zone_id=pulumi.get(__ret__, 'zone_id'),
        zone_type=pulumi.get(__ret__, 'zone_type'),
        zones=pulumi.get(__ret__, 'zones'))
def get_zones_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     router_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     search_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     zone_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     zone_type: Optional[pulumi.Input[_builtins.str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZonesResult]:
    """
    Use this data source to get the list of DNS zones.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    zone_type = config.require_object("zoneType")
    enterprise_project_id = config.require_object("enterpriseProjectId")
    test = huaweicloud.Dns.get_zones(zone_type=zone_type,
        enterprise_project_id=enterprise_project_id)
    ```


    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID which the zone associated.
    :param _builtins.str name: Specifies the name of the zone to be queried. Fuzzy matching will work.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str router_id: Specifies the ID of the VPC associated with the private zone.  
           This parameter is available only when the `zone_type` parameter is set to **private**.
    :param _builtins.str search_mode: Specifies the search mode for `name`. Valid values are as follows:
           + **like**: Fuzzy matching.
           + **equal**: Accurate matching.
           
           If not specified, fuzzy matching will be used.
    :param _builtins.str sort_dir: Specifies the sorting mode for the list of the zones.  
           The valid values are as follows:
           + **DESC**: Descending order.
           + **ASC**: Ascending order.
    :param _builtins.str sort_key: Specifies the sorting filed for the list of the zones.  
           The valid values are as follows:
           + **name**: The zone name.
           + **created_at**: The creation time of the zone.
           + **updated_at** The update time of the zone.
    :param _builtins.str status: Specifies the zone status. Valid values are as follows:
           + **ACTIVE**: Normal.
           + **ERROR**: Failed.
           + **FREEZE**: Frozen.
           + **DISABLE**: Disabled.
           + **POLICE**: Frozen due to security reasons.
           + **ILLEGAL**: Frozen due to abuse.
    :param _builtins.str tags: Specifies the resource tag. The format is as follows: key1,value1|key2,value2.
           Multiple tags are separated by vertical bar (|). The key and value of each tag are separated by comma (,). The tags
           are in `AND` relationship. Exact matching will work. If the value starts with an asterisk (*), fuzzy matching will
           work for the string following the asterisk.
    :param _builtins.str zone_id: Specifies the ID of the zone.
    :param _builtins.str zone_type: Specifies the zone type. The value can be **public** or **private**.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['routerId'] = router_id
    __args__['searchMode'] = search_mode
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['zoneId'] = zone_id
    __args__['zoneType'] = zone_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dns/getZones:getZones', __args__, opts=opts, typ=GetZonesResult)
    return __ret__.apply(lambda __response__: GetZonesResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        router_id=pulumi.get(__response__, 'router_id'),
        search_mode=pulumi.get(__response__, 'search_mode'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        zone_id=pulumi.get(__response__, 'zone_id'),
        zone_type=pulumi.get(__response__, 'zone_type'),
        zones=pulumi.get(__response__, 'zones')))
