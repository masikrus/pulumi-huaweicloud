# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRecordsetsResult',
    'AwaitableGetRecordsetsResult',
    'get_recordsets',
    'get_recordsets_output',
]

@pulumi.output_type
class GetRecordsetsResult:
    """
    A collection of values returned by getRecordsets.
    """
    def __init__(__self__, id=None, line_id=None, name=None, recordset_id=None, recordsets=None, region=None, search_mode=None, sort_dir=None, sort_key=None, status=None, tags=None, type=None, zone_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if line_id and not isinstance(line_id, str):
            raise TypeError("Expected argument 'line_id' to be a str")
        pulumi.set(__self__, "line_id", line_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if recordset_id and not isinstance(recordset_id, str):
            raise TypeError("Expected argument 'recordset_id' to be a str")
        pulumi.set(__self__, "recordset_id", recordset_id)
        if recordsets and not isinstance(recordsets, list):
            raise TypeError("Expected argument 'recordsets' to be a list")
        pulumi.set(__self__, "recordsets", recordsets)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if search_mode and not isinstance(search_mode, str):
            raise TypeError("Expected argument 'search_mode' to be a str")
        pulumi.set(__self__, "search_mode", search_mode)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lineId")
    def line_id(self) -> Optional[_builtins.str]:
        """
        The resolution line ID. This attribute is only valid when `zone_id` is a public zone ID.
        """
        return pulumi.get(self, "line_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The recordset name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="recordsetId")
    def recordset_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "recordset_id")

    @_builtins.property
    @pulumi.getter
    def recordsets(self) -> Sequence['outputs.GetRecordsetsRecordsetResult']:
        """
        The list of recordsets.
        The recordsets structure is documented below.
        """
        return pulumi.get(self, "recordsets")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="searchMode")
    def search_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "search_mode")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")

    @_builtins.property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_key")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The recordset status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The recordset type. The value can be **A**, **AAAA**, **MX**, **CNAME**, **TXT**, **NS**, **SRV**, or **CAA**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        """
        The zone ID of the recordset.
        """
        return pulumi.get(self, "zone_id")


class AwaitableGetRecordsetsResult(GetRecordsetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRecordsetsResult(
            id=self.id,
            line_id=self.line_id,
            name=self.name,
            recordset_id=self.recordset_id,
            recordsets=self.recordsets,
            region=self.region,
            search_mode=self.search_mode,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            status=self.status,
            tags=self.tags,
            type=self.type,
            zone_id=self.zone_id)


def get_recordsets(line_id: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   recordset_id: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   search_mode: Optional[_builtins.str] = None,
                   sort_dir: Optional[_builtins.str] = None,
                   sort_key: Optional[_builtins.str] = None,
                   status: Optional[_builtins.str] = None,
                   tags: Optional[_builtins.str] = None,
                   type: Optional[_builtins.str] = None,
                   zone_id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRecordsetsResult:
    """
    Use this data source to get the list of DNS recordsets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    zone_id = config.require_object("zoneId")
    test = huaweicloud.Dns.get_recordsets(zone_id=zone_id)
    ```


    :param _builtins.str line_id: Specifies the resolution line ID. This parameter is only valid when `zone_id` is a
           public zone ID.
           
           > You can use custom line or get more information about default resolution lines
           from [Resolution Lines](https://support.huaweicloud.com/intl/en-us/api-dns/en-us_topic_0085546214.html).
    :param _builtins.str name: Specifies the name of the recordset to be queried. Fuzzy matching will work.
    :param _builtins.str recordset_id: Specifies the ID of the recordset to be queried. Fuzzy matching will work.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str search_mode: Specifies the search mode for `name` and `recordset_id`. Valid values are as follows:
           + **like**: Fuzzy matching.
           + **equal**: Accurate matching.
           
           If not specified, fuzzy matching will be used.
    :param _builtins.str sort_dir: Specifies the sorting mode for the list of the recordsets to be queried.  
           The parameter is left blank by default, indicating that the query results are not sorted.
           The valid values are as follows:
           + **asc**: Ascending order.
           + **desc**: Descending order.
    :param _builtins.str sort_key: Specifies the sorting field for the list of the recordsets to be queried.  
           The parameter is left blank by default, indicating that the query results are not sorted.
           The valid values are as follows:
           + **name**: The name of the recordset.
           + **type**: The type of the recordset.
    :param _builtins.str status: Specifies the status of the recordset to be queried. Valid values are as follows:
           + **ACTIVE**: Normal.
           + **ERROR**: Failed.
           + **FREEZE**: Frozen.
           + **DISABLE**: Disabled.
           + **POLICE**: Frozen due to security reasons.
           + **ILLEGAL**: Frozen due to abuse.
    :param _builtins.str tags: Specifies the resource tag. The format is as follows: key1,value1|key2,value2.
           Multiple tags are separated by vertical bar (|). The key and value of each tag are separated by comma (,).
    :param _builtins.str type: Specifies the recordset type.
           + If the `zone_id` is a public zone ID, valid values are **A**, **AAAA**, **MX**, **CNAME**, **TXT**, **NS**, **SRV**
           and **CAA**.
           + If the `zone_id` is a private zone ID, valid values are **A**, **AAAA**, **MX**, **CNAME**, **TXT** and **SRV**.
    :param _builtins.str zone_id: Specifies the zone ID.
    """
    __args__ = dict()
    __args__['lineId'] = line_id
    __args__['name'] = name
    __args__['recordsetId'] = recordset_id
    __args__['region'] = region
    __args__['searchMode'] = search_mode
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['type'] = type
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dns/getRecordsets:getRecordsets', __args__, opts=opts, typ=GetRecordsetsResult).value

    return AwaitableGetRecordsetsResult(
        id=pulumi.get(__ret__, 'id'),
        line_id=pulumi.get(__ret__, 'line_id'),
        name=pulumi.get(__ret__, 'name'),
        recordset_id=pulumi.get(__ret__, 'recordset_id'),
        recordsets=pulumi.get(__ret__, 'recordsets'),
        region=pulumi.get(__ret__, 'region'),
        search_mode=pulumi.get(__ret__, 'search_mode'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'),
        sort_key=pulumi.get(__ret__, 'sort_key'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_recordsets_output(line_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          recordset_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          search_mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          sort_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRecordsetsResult]:
    """
    Use this data source to get the list of DNS recordsets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    zone_id = config.require_object("zoneId")
    test = huaweicloud.Dns.get_recordsets(zone_id=zone_id)
    ```


    :param _builtins.str line_id: Specifies the resolution line ID. This parameter is only valid when `zone_id` is a
           public zone ID.
           
           > You can use custom line or get more information about default resolution lines
           from [Resolution Lines](https://support.huaweicloud.com/intl/en-us/api-dns/en-us_topic_0085546214.html).
    :param _builtins.str name: Specifies the name of the recordset to be queried. Fuzzy matching will work.
    :param _builtins.str recordset_id: Specifies the ID of the recordset to be queried. Fuzzy matching will work.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str search_mode: Specifies the search mode for `name` and `recordset_id`. Valid values are as follows:
           + **like**: Fuzzy matching.
           + **equal**: Accurate matching.
           
           If not specified, fuzzy matching will be used.
    :param _builtins.str sort_dir: Specifies the sorting mode for the list of the recordsets to be queried.  
           The parameter is left blank by default, indicating that the query results are not sorted.
           The valid values are as follows:
           + **asc**: Ascending order.
           + **desc**: Descending order.
    :param _builtins.str sort_key: Specifies the sorting field for the list of the recordsets to be queried.  
           The parameter is left blank by default, indicating that the query results are not sorted.
           The valid values are as follows:
           + **name**: The name of the recordset.
           + **type**: The type of the recordset.
    :param _builtins.str status: Specifies the status of the recordset to be queried. Valid values are as follows:
           + **ACTIVE**: Normal.
           + **ERROR**: Failed.
           + **FREEZE**: Frozen.
           + **DISABLE**: Disabled.
           + **POLICE**: Frozen due to security reasons.
           + **ILLEGAL**: Frozen due to abuse.
    :param _builtins.str tags: Specifies the resource tag. The format is as follows: key1,value1|key2,value2.
           Multiple tags are separated by vertical bar (|). The key and value of each tag are separated by comma (,).
    :param _builtins.str type: Specifies the recordset type.
           + If the `zone_id` is a public zone ID, valid values are **A**, **AAAA**, **MX**, **CNAME**, **TXT**, **NS**, **SRV**
           and **CAA**.
           + If the `zone_id` is a private zone ID, valid values are **A**, **AAAA**, **MX**, **CNAME**, **TXT** and **SRV**.
    :param _builtins.str zone_id: Specifies the zone ID.
    """
    __args__ = dict()
    __args__['lineId'] = line_id
    __args__['name'] = name
    __args__['recordsetId'] = recordset_id
    __args__['region'] = region
    __args__['searchMode'] = search_mode
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['type'] = type
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dns/getRecordsets:getRecordsets', __args__, opts=opts, typ=GetRecordsetsResult)
    return __ret__.apply(lambda __response__: GetRecordsetsResult(
        id=pulumi.get(__response__, 'id'),
        line_id=pulumi.get(__response__, 'line_id'),
        name=pulumi.get(__response__, 'name'),
        recordset_id=pulumi.get(__response__, 'recordset_id'),
        recordsets=pulumi.get(__response__, 'recordsets'),
        region=pulumi.get(__response__, 'region'),
        search_mode=pulumi.get(__response__, 'search_mode'),
        sort_dir=pulumi.get(__response__, 'sort_dir'),
        sort_key=pulumi.get(__response__, 'sort_key'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        zone_id=pulumi.get(__response__, 'zone_id')))
