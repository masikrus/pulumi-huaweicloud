# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResolverRulesResult',
    'AwaitableGetResolverRulesResult',
    'get_resolver_rules',
    'get_resolver_rules_output',
]

@pulumi.output_type
class GetResolverRulesResult:
    """
    A collection of values returned by getResolverRules.
    """
    def __init__(__self__, domain_name=None, endpoint_id=None, id=None, name=None, region=None, resolver_rule_id=None, resolver_rules=None):
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if endpoint_id and not isinstance(endpoint_id, str):
            raise TypeError("Expected argument 'endpoint_id' to be a str")
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resolver_rule_id and not isinstance(resolver_rule_id, str):
            raise TypeError("Expected argument 'resolver_rule_id' to be a str")
        pulumi.set(__self__, "resolver_rule_id", resolver_rule_id)
        if resolver_rules and not isinstance(resolver_rules, list):
            raise TypeError("Expected argument 'resolver_rules' to be a list")
        pulumi.set(__self__, "resolver_rules", resolver_rules)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        """
        Indicates the domain name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the endpoint to which the current rule belongs.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the rule name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resolverRuleId")
    def resolver_rule_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resolver_rule_id")

    @_builtins.property
    @pulumi.getter(name="resolverRules")
    def resolver_rules(self) -> Sequence['outputs.GetResolverRulesResolverRuleResult']:
        """
        Indicates the list of endpoint rules.
        """
        return pulumi.get(self, "resolver_rules")


class AwaitableGetResolverRulesResult(GetResolverRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResolverRulesResult(
            domain_name=self.domain_name,
            endpoint_id=self.endpoint_id,
            id=self.id,
            name=self.name,
            region=self.region,
            resolver_rule_id=self.resolver_rule_id,
            resolver_rules=self.resolver_rules)


def get_resolver_rules(domain_name: Optional[_builtins.str] = None,
                       endpoint_id: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       resolver_rule_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResolverRulesResult:
    """
    Use this data source to get the list of DNS resolver rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dns.get_resolver_rules()
    ```


    :param _builtins.str domain_name: Specifies the domain name of the endpoint rule to be queried.
    :param _builtins.str endpoint_id: Specifies the endpoint ID.
    :param _builtins.str name: Specifies the name of the endpoint rule to be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resolver_rule_id: Specifies the ID of an endpoint rule.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['endpointId'] = endpoint_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['resolverRuleId'] = resolver_rule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dns/getResolverRules:getResolverRules', __args__, opts=opts, typ=GetResolverRulesResult).value

    return AwaitableGetResolverRulesResult(
        domain_name=pulumi.get(__ret__, 'domain_name'),
        endpoint_id=pulumi.get(__ret__, 'endpoint_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        resolver_rule_id=pulumi.get(__ret__, 'resolver_rule_id'),
        resolver_rules=pulumi.get(__ret__, 'resolver_rules'))
def get_resolver_rules_output(domain_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              endpoint_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              resolver_rule_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResolverRulesResult]:
    """
    Use this data source to get the list of DNS resolver rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dns.get_resolver_rules()
    ```


    :param _builtins.str domain_name: Specifies the domain name of the endpoint rule to be queried.
    :param _builtins.str endpoint_id: Specifies the endpoint ID.
    :param _builtins.str name: Specifies the name of the endpoint rule to be queried.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str resolver_rule_id: Specifies the ID of an endpoint rule.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['endpointId'] = endpoint_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['resolverRuleId'] = resolver_rule_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dns/getResolverRules:getResolverRules', __args__, opts=opts, typ=GetResolverRulesResult)
    return __ret__.apply(lambda __response__: GetResolverRulesResult(
        domain_name=pulumi.get(__response__, 'domain_name'),
        endpoint_id=pulumi.get(__response__, 'endpoint_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        resolver_rule_id=pulumi.get(__response__, 'resolver_rule_id'),
        resolver_rules=pulumi.get(__response__, 'resolver_rules')))
