# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EndpointAssignmentArgs', 'EndpointAssignment']

@pulumi.input_type
class EndpointAssignmentArgs:
    def __init__(__self__, *,
                 assignments: pulumi.Input[Sequence[pulumi.Input['EndpointAssignmentAssignmentArgs']]],
                 direction: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EndpointAssignment resource.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointAssignmentAssignmentArgs']]] assignments: Specifies the list of the IP addresses of the endpoint.  
               The valid length of the `assignments` ranges from `2` to `6`.
               The assignments structure is documented below.
               
               <a name="endpoint_assignments"></a>
               The `assignments` block supports:
        :param pulumi.Input[_builtins.str] direction: Specifies the direction of the endpoint.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **inbound**
               + **outbound**
        :param pulumi.Input[_builtins.str] name: Specifies the name of the endpoint.  
               The name valid length is limited from `1` to `64` characters. Only Chinese and English characters, digits and
               special characters (-._) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "assignments", assignments)
        pulumi.set(__self__, "direction", direction)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> pulumi.Input[Sequence[pulumi.Input['EndpointAssignmentAssignmentArgs']]]:
        """
        Specifies the list of the IP addresses of the endpoint.  
        The valid length of the `assignments` ranges from `2` to `6`.
        The assignments structure is documented below.

        <a name="endpoint_assignments"></a>
        The `assignments` block supports:
        """
        return pulumi.get(self, "assignments")

    @assignments.setter
    def assignments(self, value: pulumi.Input[Sequence[pulumi.Input['EndpointAssignmentAssignmentArgs']]]):
        pulumi.set(self, "assignments", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the direction of the endpoint.  
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **inbound**
        + **outbound**
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the endpoint.  
        The name valid length is limited from `1` to `64` characters. Only Chinese and English characters, digits and
        special characters (-._) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _EndpointAssignmentState:
    def __init__(__self__, *,
                 assignments: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointAssignmentAssignmentArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EndpointAssignment resources.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointAssignmentAssignmentArgs']]] assignments: Specifies the list of the IP addresses of the endpoint.  
               The valid length of the `assignments` ranges from `2` to `6`.
               The assignments structure is documented below.
               
               <a name="endpoint_assignments"></a>
               The `assignments` block supports:
        :param pulumi.Input[_builtins.str] created_at: The creation time of the endpoint, in RFC3339 format.
        :param pulumi.Input[_builtins.str] direction: Specifies the direction of the endpoint.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **inbound**
               + **outbound**
        :param pulumi.Input[_builtins.str] name: Specifies the name of the endpoint.  
               The name valid length is limited from `1` to `64` characters. Only Chinese and English characters, digits and
               special characters (-._) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The current status of the endpoint.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID associated with the endpoint.
        """
        if assignments is not None:
            pulumi.set(__self__, "assignments", assignments)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointAssignmentAssignmentArgs']]]]:
        """
        Specifies the list of the IP addresses of the endpoint.  
        The valid length of the `assignments` ranges from `2` to `6`.
        The assignments structure is documented below.

        <a name="endpoint_assignments"></a>
        The `assignments` block supports:
        """
        return pulumi.get(self, "assignments")

    @assignments.setter
    def assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointAssignmentAssignmentArgs']]]]):
        pulumi.set(self, "assignments", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the endpoint, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the direction of the endpoint.  
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **inbound**
        + **outbound**
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the endpoint.  
        The name valid length is limited from `1` to `64` characters. Only Chinese and English characters, digits and
        special characters (-._) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the endpoint.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC ID associated with the endpoint.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("huaweicloud:Dns/endpointAssignment:EndpointAssignment")
class EndpointAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EndpointAssignmentAssignmentArgs', 'EndpointAssignmentAssignmentArgsDict']]]]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DNS endpoint assignment resource within HuaweiCloud.

        > For the same subnet, only one of the `Dns.Endpoint` and `Dns.EndpointAssignment` resources
           is allowed to manage an endpoint. We recommend using this resource to replace the `Dns.Endpoint` resource.

        ## Example Usage

        ## Import

        The DNS endpoint resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dns/endpointAssignment:EndpointAssignment test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EndpointAssignmentAssignmentArgs', 'EndpointAssignmentAssignmentArgsDict']]]] assignments: Specifies the list of the IP addresses of the endpoint.  
               The valid length of the `assignments` ranges from `2` to `6`.
               The assignments structure is documented below.
               
               <a name="endpoint_assignments"></a>
               The `assignments` block supports:
        :param pulumi.Input[_builtins.str] direction: Specifies the direction of the endpoint.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **inbound**
               + **outbound**
        :param pulumi.Input[_builtins.str] name: Specifies the name of the endpoint.  
               The name valid length is limited from `1` to `64` characters. Only Chinese and English characters, digits and
               special characters (-._) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EndpointAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DNS endpoint assignment resource within HuaweiCloud.

        > For the same subnet, only one of the `Dns.Endpoint` and `Dns.EndpointAssignment` resources
           is allowed to manage an endpoint. We recommend using this resource to replace the `Dns.Endpoint` resource.

        ## Example Usage

        ## Import

        The DNS endpoint resource can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dns/endpointAssignment:EndpointAssignment test <id>
        ```

        :param str resource_name: The name of the resource.
        :param EndpointAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndpointAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EndpointAssignmentAssignmentArgs', 'EndpointAssignmentAssignmentArgsDict']]]]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndpointAssignmentArgs.__new__(EndpointAssignmentArgs)

            if assignments is None and not opts.urn:
                raise TypeError("Missing required property 'assignments'")
            __props__.__dict__["assignments"] = assignments
            if direction is None and not opts.urn:
                raise TypeError("Missing required property 'direction'")
            __props__.__dict__["direction"] = direction
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vpc_id"] = None
        super(EndpointAssignment, __self__).__init__(
            'huaweicloud:Dns/endpointAssignment:EndpointAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assignments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EndpointAssignmentAssignmentArgs', 'EndpointAssignmentAssignmentArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            direction: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'EndpointAssignment':
        """
        Get an existing EndpointAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EndpointAssignmentAssignmentArgs', 'EndpointAssignmentAssignmentArgsDict']]]] assignments: Specifies the list of the IP addresses of the endpoint.  
               The valid length of the `assignments` ranges from `2` to `6`.
               The assignments structure is documented below.
               
               <a name="endpoint_assignments"></a>
               The `assignments` block supports:
        :param pulumi.Input[_builtins.str] created_at: The creation time of the endpoint, in RFC3339 format.
        :param pulumi.Input[_builtins.str] direction: Specifies the direction of the endpoint.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **inbound**
               + **outbound**
        :param pulumi.Input[_builtins.str] name: Specifies the name of the endpoint.  
               The name valid length is limited from `1` to `64` characters. Only Chinese and English characters, digits and
               special characters (-._) are allowed.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The current status of the endpoint.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC ID associated with the endpoint.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EndpointAssignmentState.__new__(_EndpointAssignmentState)

        __props__.__dict__["assignments"] = assignments
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["direction"] = direction
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["vpc_id"] = vpc_id
        return EndpointAssignment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> pulumi.Output[Sequence['outputs.EndpointAssignmentAssignment']]:
        """
        Specifies the list of the IP addresses of the endpoint.  
        The valid length of the `assignments` ranges from `2` to `6`.
        The assignments structure is documented below.

        <a name="endpoint_assignments"></a>
        The `assignments` block supports:
        """
        return pulumi.get(self, "assignments")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the endpoint, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the direction of the endpoint.  
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **inbound**
        + **outbound**
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the endpoint.  
        The name valid length is limited from `1` to `64` characters. Only Chinese and English characters, digits and
        special characters (-._) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the endpoint.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC ID associated with the endpoint.
        """
        return pulumi.get(self, "vpc_id")

