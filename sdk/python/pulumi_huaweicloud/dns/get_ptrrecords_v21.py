# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPtrrecordsV21Result',
    'AwaitableGetPtrrecordsV21Result',
    'get_ptrrecords_v21',
    'get_ptrrecords_v21_output',
]

@pulumi.output_type
class GetPtrrecordsV21Result:
    """
    A collection of values returned by getPtrrecordsV21.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, ptrrecords=None, region=None, resource_type=None, status=None, tags=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ptrrecords and not isinstance(ptrrecords, list):
            raise TypeError("Expected argument 'ptrrecords' to be a list")
        pulumi.set(__self__, "ptrrecords", ptrrecords)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID of the PTR record.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ptrrecords(self) -> Sequence['outputs.GetPtrrecordsV21PtrrecordResult']:
        """
        Indicates the PTR records list.
        The ptrrecords structure is documented below.
        """
        return pulumi.get(self, "ptrrecords")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the PTR record.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The key/value pairs to associate with the PTR record.
        """
        return pulumi.get(self, "tags")


class AwaitableGetPtrrecordsV21Result(GetPtrrecordsV21Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPtrrecordsV21Result(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            ptrrecords=self.ptrrecords,
            region=self.region,
            resource_type=self.resource_type,
            status=self.status,
            tags=self.tags)


def get_ptrrecords_v21(enterprise_project_id: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       resource_type: Optional[_builtins.str] = None,
                       status: Optional[_builtins.str] = None,
                       tags: Optional[Mapping[str, _builtins.str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPtrrecordsV21Result:
    """
    Use this data source to get the list of DNS PTR records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dns.get_ptrrecords_v21()
    ```


    :param _builtins.str enterprise_project_id: The enterprise project ID corresponding to the PTR record.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: The resource type.
    :param _builtins.str status: The status of the PTR record.
    :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the PTR record.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Dns/getPtrrecordsV21:getPtrrecordsV21', __args__, opts=opts, typ=GetPtrrecordsV21Result).value

    return AwaitableGetPtrrecordsV21Result(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        ptrrecords=pulumi.get(__ret__, 'ptrrecords'),
        region=pulumi.get(__ret__, 'region'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))
def get_ptrrecords_v21_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPtrrecordsV21Result]:
    """
    Use this data source to get the list of DNS PTR records.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Dns.get_ptrrecords_v21()
    ```


    :param _builtins.str enterprise_project_id: The enterprise project ID corresponding to the PTR record.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_type: The resource type.
    :param _builtins.str status: The status of the PTR record.
    :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the PTR record.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['region'] = region
    __args__['resourceType'] = resource_type
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Dns/getPtrrecordsV21:getPtrrecordsV21', __args__, opts=opts, typ=GetPtrrecordsV21Result)
    return __ret__.apply(lambda __response__: GetPtrrecordsV21Result(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        ptrrecords=pulumi.get(__response__, 'ptrrecords'),
        region=pulumi.get(__response__, 'region'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags')))
