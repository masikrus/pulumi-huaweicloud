# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'EndpointAssignmentAssignment',
    'EndpointIpAddress',
    'ResolverRuleIpAddress',
    'ResolverRuleVpc',
    'ZoneDnssecInfo',
    'ZoneRouter',
    'ZoneV2DnssecInfo',
    'ZoneV2Router',
    'GetCustomLinesLineResult',
    'GetEndpointVpcsVpcResult',
    'GetEndpointsEndpointResult',
    'GetFloatingPtrrecordsPtrrecordResult',
    'GetLineGroupsGroupResult',
    'GetNameserversNameserverResult',
    'GetNameserversNameserverNsRecordResult',
    'GetPtrrecordsV21PtrrecordResult',
    'GetPublicZoneLinesLineResult',
    'GetQuotasQuotaResult',
    'GetRecordsetsRecordsetResult',
    'GetResolverRulesResolverRuleResult',
    'GetResolverRulesResolverRuleRouterResult',
    'GetTagsFilterMatchResult',
    'GetTagsFilterNotTagResult',
    'GetTagsFilterNotTagsAnyResult',
    'GetTagsFilterResourceResult',
    'GetTagsFilterResourceTagResult',
    'GetTagsFilterTagResult',
    'GetTagsFilterTagsAnyResult',
    'GetTagsTagResult',
    'GetZonesZoneResult',
    'GetZonesZoneRouterResult',
]

@pulumi.output_type
class EndpointAssignmentAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "ipAddressId":
            suggest = "ip_address_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointAssignmentAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointAssignmentAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointAssignmentAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 subnet_id: _builtins.str,
                 ip_address_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: Specifies the IP address associated with the endpoint.
        :param _builtins.str subnet_id: Specifies the subnet ID to which the IP address belongs.
        :param _builtins.str ip_address_id: The ID of the IP address associated with the endpoint.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if ip_address_id is not None:
            pulumi.set(__self__, "ip_address_id", ip_address_id)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Specifies the IP address associated with the endpoint.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the subnet ID to which the IP address belongs.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> Optional[_builtins.str]:
        """
        The ID of the IP address associated with the endpoint.
        """
        return pulumi.get(self, "ip_address_id")


@pulumi.output_type
class EndpointIpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "ipAddressId":
            suggest = "ip_address_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointIpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointIpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointIpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 ip: Optional[_builtins.str] = None,
                 ip_address_id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str subnet_id: Specifies the subnet ID of the IP address.
        :param _builtins.str created_at: The creation time of the IP address.
        :param _builtins.str ip: The IP address associated with the endpoint.
        :param _builtins.str ip_address_id: The ID of the IP address.
        :param _builtins.str status: The status of IP address.
        :param _builtins.str updated_at: The latest update time of the IP address.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_address_id is not None:
            pulumi.set(__self__, "ip_address_id", ip_address_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the subnet ID of the IP address.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creation time of the IP address.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        """
        The IP address associated with the endpoint.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> Optional[_builtins.str]:
        """
        The ID of the IP address.
        """
        return pulumi.get(self, "ip_address_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of IP address.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The latest update time of the IP address.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ResolverRuleIpAddress(dict):
    def __init__(__self__, *,
                 ip: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip: Specifies the IP of the IP address.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        """
        Specifies the IP of the IP address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class ResolverRuleVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcId":
            suggest = "vpc_id"
        elif key == "vpcRegion":
            suggest = "vpc_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResolverRuleVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResolverRuleVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResolverRuleVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: Optional[_builtins.str] = None,
                 vpc_id: Optional[_builtins.str] = None,
                 vpc_region: Optional[_builtins.str] = None):
        """
        :param _builtins.str status: The status of the VPC.
        :param _builtins.str vpc_id: The VPC ID.
        :param _builtins.str vpc_region: The region of the VPC.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_region is not None:
            pulumi.set(__self__, "vpc_region", vpc_region)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the VPC.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        The VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vpcRegion")
    def vpc_region(self) -> Optional[_builtins.str]:
        """
        The region of the VPC.
        """
        return pulumi.get(self, "vpc_region")


@pulumi.output_type
class ZoneDnssecInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "digestAlgorithm":
            suggest = "digest_algorithm"
        elif key == "digestType":
            suggest = "digest_type"
        elif key == "dsRecord":
            suggest = "ds_record"
        elif key == "keyTag":
            suggest = "key_tag"
        elif key == "kskPublicKey":
            suggest = "ksk_public_key"
        elif key == "signatureType":
            suggest = "signature_type"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneDnssecInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneDnssecInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneDnssecInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 digest: Optional[_builtins.str] = None,
                 digest_algorithm: Optional[_builtins.str] = None,
                 digest_type: Optional[_builtins.int] = None,
                 ds_record: Optional[_builtins.str] = None,
                 flag: Optional[_builtins.int] = None,
                 key_tag: Optional[_builtins.int] = None,
                 ksk_public_key: Optional[_builtins.str] = None,
                 signature: Optional[_builtins.str] = None,
                 signature_type: Optional[_builtins.int] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str created_at: Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        :param _builtins.str digest: Indicates the digest.
        :param _builtins.str digest_algorithm: Indicates the digest algorithm.
        :param _builtins.int digest_type: Indicates the digest type.
        :param _builtins.str ds_record: Indicates the DS record.
        :param _builtins.int flag: Indicates the flag.
        :param _builtins.int key_tag: Indicates the key tag.
        :param _builtins.str ksk_public_key: Indicates the public key.
        :param _builtins.str signature: Indicates the signature algorithm.
        :param _builtins.int signature_type: Indicates the signature type.
        :param _builtins.str updated_at: Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if digest_algorithm is not None:
            pulumi.set(__self__, "digest_algorithm", digest_algorithm)
        if digest_type is not None:
            pulumi.set(__self__, "digest_type", digest_type)
        if ds_record is not None:
            pulumi.set(__self__, "ds_record", ds_record)
        if flag is not None:
            pulumi.set(__self__, "flag", flag)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)
        if ksk_public_key is not None:
            pulumi.set(__self__, "ksk_public_key", ksk_public_key)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if signature_type is not None:
            pulumi.set(__self__, "signature_type", signature_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def digest(self) -> Optional[_builtins.str]:
        """
        Indicates the digest.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> Optional[_builtins.str]:
        """
        Indicates the digest algorithm.
        """
        return pulumi.get(self, "digest_algorithm")

    @_builtins.property
    @pulumi.getter(name="digestType")
    def digest_type(self) -> Optional[_builtins.int]:
        """
        Indicates the digest type.
        """
        return pulumi.get(self, "digest_type")

    @_builtins.property
    @pulumi.getter(name="dsRecord")
    def ds_record(self) -> Optional[_builtins.str]:
        """
        Indicates the DS record.
        """
        return pulumi.get(self, "ds_record")

    @_builtins.property
    @pulumi.getter
    def flag(self) -> Optional[_builtins.int]:
        """
        Indicates the flag.
        """
        return pulumi.get(self, "flag")

    @_builtins.property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[_builtins.int]:
        """
        Indicates the key tag.
        """
        return pulumi.get(self, "key_tag")

    @_builtins.property
    @pulumi.getter(name="kskPublicKey")
    def ksk_public_key(self) -> Optional[_builtins.str]:
        """
        Indicates the public key.
        """
        return pulumi.get(self, "ksk_public_key")

    @_builtins.property
    @pulumi.getter
    def signature(self) -> Optional[_builtins.str]:
        """
        Indicates the signature algorithm.
        """
        return pulumi.get(self, "signature")

    @_builtins.property
    @pulumi.getter(name="signatureType")
    def signature_type(self) -> Optional[_builtins.int]:
        """
        Indicates the signature type.
        """
        return pulumi.get(self, "signature_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ZoneRouter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routerId":
            suggest = "router_id"
        elif key == "routerRegion":
            suggest = "router_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneRouter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneRouter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneRouter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 router_id: _builtins.str,
                 router_region: Optional[_builtins.str] = None):
        """
        :param _builtins.str router_id: Specifies the ID of the associated VPC.
        :param _builtins.str router_region: Specifies the region of the VPC.
        """
        pulumi.set(__self__, "router_id", router_id)
        if router_region is not None:
            pulumi.set(__self__, "router_region", router_region)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> _builtins.str:
        """
        Specifies the ID of the associated VPC.
        """
        return pulumi.get(self, "router_id")

    @_builtins.property
    @pulumi.getter(name="routerRegion")
    def router_region(self) -> Optional[_builtins.str]:
        """
        Specifies the region of the VPC.
        """
        return pulumi.get(self, "router_region")


@pulumi.output_type
class ZoneV2DnssecInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "digestAlgorithm":
            suggest = "digest_algorithm"
        elif key == "digestType":
            suggest = "digest_type"
        elif key == "dsRecord":
            suggest = "ds_record"
        elif key == "keyTag":
            suggest = "key_tag"
        elif key == "kskPublicKey":
            suggest = "ksk_public_key"
        elif key == "signatureType":
            suggest = "signature_type"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneV2DnssecInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneV2DnssecInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneV2DnssecInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 digest: Optional[_builtins.str] = None,
                 digest_algorithm: Optional[_builtins.str] = None,
                 digest_type: Optional[_builtins.int] = None,
                 ds_record: Optional[_builtins.str] = None,
                 flag: Optional[_builtins.int] = None,
                 key_tag: Optional[_builtins.int] = None,
                 ksk_public_key: Optional[_builtins.str] = None,
                 signature: Optional[_builtins.str] = None,
                 signature_type: Optional[_builtins.int] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str created_at: Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        :param _builtins.str digest: Indicates the digest.
        :param _builtins.str digest_algorithm: Indicates the digest algorithm.
        :param _builtins.int digest_type: Indicates the digest type.
        :param _builtins.str ds_record: Indicates the DS record.
        :param _builtins.int flag: Indicates the flag.
        :param _builtins.int key_tag: Indicates the key tag.
        :param _builtins.str ksk_public_key: Indicates the public key.
        :param _builtins.str signature: Indicates the signature algorithm.
        :param _builtins.int signature_type: Indicates the signature type.
        :param _builtins.str updated_at: Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if digest_algorithm is not None:
            pulumi.set(__self__, "digest_algorithm", digest_algorithm)
        if digest_type is not None:
            pulumi.set(__self__, "digest_type", digest_type)
        if ds_record is not None:
            pulumi.set(__self__, "ds_record", ds_record)
        if flag is not None:
            pulumi.set(__self__, "flag", flag)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)
        if ksk_public_key is not None:
            pulumi.set(__self__, "ksk_public_key", ksk_public_key)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if signature_type is not None:
            pulumi.set(__self__, "signature_type", signature_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def digest(self) -> Optional[_builtins.str]:
        """
        Indicates the digest.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> Optional[_builtins.str]:
        """
        Indicates the digest algorithm.
        """
        return pulumi.get(self, "digest_algorithm")

    @_builtins.property
    @pulumi.getter(name="digestType")
    def digest_type(self) -> Optional[_builtins.int]:
        """
        Indicates the digest type.
        """
        return pulumi.get(self, "digest_type")

    @_builtins.property
    @pulumi.getter(name="dsRecord")
    def ds_record(self) -> Optional[_builtins.str]:
        """
        Indicates the DS record.
        """
        return pulumi.get(self, "ds_record")

    @_builtins.property
    @pulumi.getter
    def flag(self) -> Optional[_builtins.int]:
        """
        Indicates the flag.
        """
        return pulumi.get(self, "flag")

    @_builtins.property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[_builtins.int]:
        """
        Indicates the key tag.
        """
        return pulumi.get(self, "key_tag")

    @_builtins.property
    @pulumi.getter(name="kskPublicKey")
    def ksk_public_key(self) -> Optional[_builtins.str]:
        """
        Indicates the public key.
        """
        return pulumi.get(self, "ksk_public_key")

    @_builtins.property
    @pulumi.getter
    def signature(self) -> Optional[_builtins.str]:
        """
        Indicates the signature algorithm.
        """
        return pulumi.get(self, "signature")

    @_builtins.property
    @pulumi.getter(name="signatureType")
    def signature_type(self) -> Optional[_builtins.int]:
        """
        Indicates the signature type.
        """
        return pulumi.get(self, "signature_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ZoneV2Router(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routerId":
            suggest = "router_id"
        elif key == "routerRegion":
            suggest = "router_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneV2Router. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneV2Router.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneV2Router.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 router_id: _builtins.str,
                 router_region: Optional[_builtins.str] = None):
        """
        :param _builtins.str router_id: The ID of the associated VPC.
        :param _builtins.str router_region: The region of the VPC.
        """
        pulumi.set(__self__, "router_id", router_id)
        if router_region is not None:
            pulumi.set(__self__, "router_region", router_region)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> _builtins.str:
        """
        The ID of the associated VPC.
        """
        return pulumi.get(self, "router_id")

    @_builtins.property
    @pulumi.getter(name="routerRegion")
    def router_region(self) -> Optional[_builtins.str]:
        """
        The region of the VPC.
        """
        return pulumi.get(self, "router_region")


@pulumi.output_type
class GetCustomLinesLineResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 ip_segments: Sequence[_builtins.str],
                 name: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the custom line, in RFC339 format.
        :param _builtins.str description: The description of the custom line.
        :param _builtins.str id: The ID of the custom line.
        :param Sequence[_builtins.str] ip_segments: The IP address range of the custom line.
        :param _builtins.str name: Specifies the name of the custom line. Fuzzy search is supported.
        :param _builtins.str status: Specifies the status of the custom line.  
               The valid values are as follows:
               + **ACTIVE**
               + **FREEZE**
               + **DISABLE**
               + **ERROR**
        :param _builtins.str updated_at: The latest update time of the custom line, in RFC339 format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_segments", ip_segments)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the custom line, in RFC339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the custom line.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the custom line.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipSegments")
    def ip_segments(self) -> Sequence[_builtins.str]:
        """
        The IP address range of the custom line.
        """
        return pulumi.get(self, "ip_segments")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the custom line. Fuzzy search is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the custom line.  
        The valid values are as follows:
        + **ACTIVE**
        + **FREEZE**
        + **DISABLE**
        + **ERROR**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the custom line, in RFC339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetEndpointVpcsVpcResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 inbound_endpoint_count: _builtins.int,
                 outbound_endpoint_count: _builtins.int):
        """
        :param _builtins.str id: Indicates the VPC ID, which is a UUID used to identify the VPC.
        :param _builtins.int inbound_endpoint_count: Indicates the number of inbound endpoints in a VPC.
        :param _builtins.int outbound_endpoint_count: Indicates the number of outbound endpoints in a VPC.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inbound_endpoint_count", inbound_endpoint_count)
        pulumi.set(__self__, "outbound_endpoint_count", outbound_endpoint_count)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the VPC ID, which is a UUID used to identify the VPC.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="inboundEndpointCount")
    def inbound_endpoint_count(self) -> _builtins.int:
        """
        Indicates the number of inbound endpoints in a VPC.
        """
        return pulumi.get(self, "inbound_endpoint_count")

    @_builtins.property
    @pulumi.getter(name="outboundEndpointCount")
    def outbound_endpoint_count(self) -> _builtins.int:
        """
        Indicates the number of outbound endpoints in a VPC.
        """
        return pulumi.get(self, "outbound_endpoint_count")


@pulumi.output_type
class GetEndpointsEndpointResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 direction: _builtins.str,
                 id: _builtins.str,
                 ipaddress_count: _builtins.int,
                 name: _builtins.str,
                 resolver_rule_count: _builtins.int,
                 status: _builtins.str,
                 update_time: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str create_time: Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        :param _builtins.str direction: Specifies the direction of the endpoint.
               The valid values can be **inbound** or **outbound**.
        :param _builtins.str id: Indicates the endpoint ID, which is a UUID used to identify the endpoint.
        :param _builtins.int ipaddress_count: Indicates the number of IP addresses of the endpoint.
        :param _builtins.str name: Specifies the name of the endpoint.
        :param _builtins.int resolver_rule_count: Indicates the number of endpoint rules in the endpoint.
        :param _builtins.str status: Indicates the resource status.
               The value can be **PENDING_CREATE**, **ACTIVE**, **PENDING_DELETE**, or **ERROR**.
        :param _builtins.str update_time: Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        :param _builtins.str vpc_id: Specifies the ID of the VPC to which the endpoint belongs.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipaddress_count", ipaddress_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resolver_rule_count", resolver_rule_count)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Specifies the direction of the endpoint.
        The valid values can be **inbound** or **outbound**.
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the endpoint ID, which is a UUID used to identify the endpoint.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipaddressCount")
    def ipaddress_count(self) -> _builtins.int:
        """
        Indicates the number of IP addresses of the endpoint.
        """
        return pulumi.get(self, "ipaddress_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the endpoint.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resolverRuleCount")
    def resolver_rule_count(self) -> _builtins.int:
        """
        Indicates the number of endpoint rules in the endpoint.
        """
        return pulumi.get(self, "resolver_rule_count")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the resource status.
        The value can be **PENDING_CREATE**, **ACTIVE**, **PENDING_DELETE**, or **ERROR**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC to which the endpoint belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetFloatingPtrrecordsPtrrecordResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 domain_name: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 public_ip: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 ttl: _builtins.int):
        """
        :param _builtins.str description: The description of the PTR record.
        :param _builtins.str domain_name: Specifies the domain name of the PTR record.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID corresponding to the PTR record.
        :param _builtins.str id: The ID of the PTR record.
        :param _builtins.str public_ip: Specifies the EIP address of the PTR record.
        :param _builtins.str status: Specifies the status of the PTR record.
               The valid values are **ACTIVE**, **ERROR**, **FREEZE** and **DISABLE**.
        :param Mapping[str, _builtins.str] tags: Specifies the key/value pairs to associate with the PTR record.
        :param _builtins.int ttl: The valid cache time of the PTR record (in seconds).
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the PTR record.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        Specifies the domain name of the PTR record.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID corresponding to the PTR record.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the PTR record.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Specifies the EIP address of the PTR record.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the PTR record.
        The valid values are **ACTIVE**, **ERROR**, **FREEZE** and **DISABLE**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the key/value pairs to associate with the PTR record.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> _builtins.int:
        """
        The valid cache time of the PTR record (in seconds).
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetLineGroupsGroupResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 lines: Sequence[_builtins.str],
                 name: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the line group.
        :param _builtins.str description: The description of the line group.
        :param _builtins.str id: The ID of the line group.
        :param Sequence[_builtins.str] lines: The list of the resolution line IDs corresponding to line group.
        :param _builtins.str name: Specifies the name of the line group. Fuzzy search is supported.
        :param _builtins.str status: The current status of the line group.
               The valid values are **ACTIVE**, **ERROR**, **FREEZE** and **DISABLE**.
        :param _builtins.str updated_at: The latest update time of the line group.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lines", lines)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the line group.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the line group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the line group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lines(self) -> Sequence[_builtins.str]:
        """
        The list of the resolution line IDs corresponding to line group.
        """
        return pulumi.get(self, "lines")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the line group. Fuzzy search is supported.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the line group.
        The valid values are **ACTIVE**, **ERROR**, **FREEZE** and **DISABLE**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the line group.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetNameserversNameserverResult(dict):
    def __init__(__self__, *,
                 ns_records: Sequence['outputs.GetNameserversNameserverNsRecordResult'],
                 region: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['GetNameserversNameserverNsRecordArgs'] ns_records: The list of name servers.
        :param _builtins.str region: Specifies the region in which to query the resource.
               If omitted, the provider-level region will be used.
        :param _builtins.str type: Specifies the type of the name server.
               The valid values are as follows:
               + **public**
               + **private**
        """
        pulumi.set(__self__, "ns_records", ns_records)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="nsRecords")
    def ns_records(self) -> Sequence['outputs.GetNameserversNameserverNsRecordResult']:
        """
        The list of name servers.
        """
        return pulumi.get(self, "ns_records")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region in which to query the resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the name server.
        The valid values are as follows:
        + **public**
        + **private**
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNameserversNameserverNsRecordResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 hostname: _builtins.str,
                 priority: _builtins.int):
        """
        :param _builtins.str address: The  address of the private name server.
               If `type` is set to `public`, the value is an empty string.
        :param _builtins.str hostname: The host name of the public name server.
               If `type` is set to `private`, the value is an empty string.
        :param _builtins.int priority: The priority of  the name server.
               The smaller value means the higher priority.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        The  address of the private name server.
        If `type` is set to `public`, the value is an empty string.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        The host name of the public name server.
        If `type` is set to `private`, the value is an empty string.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        The priority of  the name server.
        The smaller value means the higher priority.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPtrrecordsV21PtrrecordResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 names: Sequence[_builtins.str],
                 publicip_id: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 ttl: _builtins.int):
        """
        :param _builtins.str address: The address of the EIP.
        :param _builtins.str description: The description of the PTR record.
        :param _builtins.str enterprise_project_id: The enterprise project ID corresponding to the PTR record.
        :param _builtins.str id: The ID of the PTR record.
        :param Sequence[_builtins.str] names: The domain names of the PTR record.
        :param _builtins.str publicip_id: The ID of the EIP.
        :param _builtins.str status: The status of the PTR record.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the PTR record.
        :param _builtins.int ttl: The time to live (TTL) of the record set (in seconds).
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "publicip_id", publicip_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        The address of the EIP.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the PTR record.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID corresponding to the PTR record.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the PTR record.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def names(self) -> Sequence[_builtins.str]:
        """
        The domain names of the PTR record.
        """
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> _builtins.str:
        """
        The ID of the EIP.
        """
        return pulumi.get(self, "publicip_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the PTR record.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the PTR record.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> _builtins.int:
        """
        The time to live (TTL) of the record set (in seconds).
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetPublicZoneLinesLineResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 id: _builtins.str,
                 line: _builtins.str):
        """
        :param _builtins.str create_time: Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        :param _builtins.str id: Indicates the line ID.
        :param _builtins.str line: Indicates the line name.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "line", line)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the line ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def line(self) -> _builtins.str:
        """
        Indicates the line name.
        """
        return pulumi.get(self, "line")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 max: _builtins.int,
                 type: _builtins.str,
                 unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int max: The maximum quota of resource.
        :param _builtins.str type: Specifies the resource type.  
               The valid values are as follows:
               + **zone**
               + **private_zone**
               + **record_set**
               + **ptr_record**
               + **custom_line**
               + **line_group**
        :param _builtins.str unit: The unit of the quota.
        :param _builtins.int used: The used quota of resource.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.int:
        """
        The maximum quota of resource.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type.  
        The valid values are as follows:
        + **zone**
        + **private_zone**
        + **record_set**
        + **ptr_record**
        + **custom_line**
        + **line_group**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit of the quota.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The used quota of resource.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetRecordsetsRecordsetResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 default: _builtins.bool,
                 description: _builtins.str,
                 id: _builtins.str,
                 line_id: _builtins.str,
                 name: _builtins.str,
                 records: Sequence[_builtins.str],
                 status: _builtins.str,
                 ttl: _builtins.int,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 weight: _builtins.int,
                 zone_id: _builtins.str,
                 zone_name: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the recordset, in RFC3339 format.
        :param _builtins.bool default: Whether the record set is created by default. A default record set cannot be deleted.
        :param _builtins.str description: The recordset description.
        :param _builtins.str id: The recordset ID.
        :param _builtins.str line_id: Specifies the resolution line ID. This parameter is only valid when `zone_id` is a
               public zone ID.
               
               > You can use custom line or get more information about default resolution lines
               from [Resolution Lines](https://support.huaweicloud.com/intl/en-us/api-dns/en-us_topic_0085546214.html).
        :param _builtins.str name: Specifies the name of the recordset to be queried. Fuzzy matching will work.
        :param Sequence[_builtins.str] records: The values of domain name resolution.
        :param _builtins.str status: Specifies the status of the recordset to be queried. Valid values are as follows:
               + **ACTIVE**: Normal.
               + **ERROR**: Failed.
               + **FREEZE**: Frozen.
               + **DISABLE**: Disabled.
               + **POLICE**: Frozen due to security reasons.
               + **ILLEGAL**: Frozen due to abuse.
        :param _builtins.int ttl: The recordset caching duration (in seconds) on a local DNS server. The longer the duration is, the slower the
               update takes effect.
        :param _builtins.str type: Specifies the recordset type.
               + If the `zone_id` is a public zone ID, valid values are **A**, **AAAA**, **MX**, **CNAME**, **TXT**, **NS**, **SRV**
               and **CAA**.
               + If the `zone_id` is a private zone ID, valid values are **A**, **AAAA**, **MX**, **CNAME**, **TXT** and **SRV**.
        :param _builtins.str updated_at: The latest update time of the recordset, in RFC3339 format.
        :param _builtins.int weight: The weight of the recordset. This attribute is only valid when `zone_id` is a public zone ID.
        :param _builtins.str zone_id: Specifies the zone ID.
        :param _builtins.str zone_name: The zone name of the recordset.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "line_id", line_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "records", records)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the recordset, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def default(self) -> _builtins.bool:
        """
        Whether the record set is created by default. A default record set cannot be deleted.
        """
        return pulumi.get(self, "default")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The recordset description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The recordset ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lineId")
    def line_id(self) -> _builtins.str:
        """
        Specifies the resolution line ID. This parameter is only valid when `zone_id` is a
        public zone ID.

        > You can use custom line or get more information about default resolution lines
        from [Resolution Lines](https://support.huaweicloud.com/intl/en-us/api-dns/en-us_topic_0085546214.html).
        """
        return pulumi.get(self, "line_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the recordset to be queried. Fuzzy matching will work.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def records(self) -> Sequence[_builtins.str]:
        """
        The values of domain name resolution.
        """
        return pulumi.get(self, "records")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the recordset to be queried. Valid values are as follows:
        + **ACTIVE**: Normal.
        + **ERROR**: Failed.
        + **FREEZE**: Frozen.
        + **DISABLE**: Disabled.
        + **POLICE**: Frozen due to security reasons.
        + **ILLEGAL**: Frozen due to abuse.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> _builtins.int:
        """
        The recordset caching duration (in seconds) on a local DNS server. The longer the duration is, the slower the
        update takes effect.
        """
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the recordset type.
        + If the `zone_id` is a public zone ID, valid values are **A**, **AAAA**, **MX**, **CNAME**, **TXT**, **NS**, **SRV**
        and **CAA**.
        + If the `zone_id` is a private zone ID, valid values are **A**, **AAAA**, **MX**, **CNAME**, **TXT** and **SRV**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the recordset, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        The weight of the recordset. This attribute is only valid when `zone_id` is a public zone ID.
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        """
        Specifies the zone ID.
        """
        return pulumi.get(self, "zone_id")

    @_builtins.property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> _builtins.str:
        """
        The zone name of the recordset.
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetResolverRulesResolverRuleResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 domain_name: _builtins.str,
                 endpoint_id: _builtins.str,
                 id: _builtins.str,
                 ipaddress_count: _builtins.int,
                 name: _builtins.str,
                 routers: Sequence['outputs.GetResolverRulesResolverRuleRouterResult'],
                 rule_type: _builtins.str,
                 status: _builtins.str,
                 update_time: _builtins.str):
        """
        :param _builtins.str create_time: Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        :param _builtins.str domain_name: Specifies the domain name of the endpoint rule to be queried.
        :param _builtins.str endpoint_id: Specifies the endpoint ID.
        :param _builtins.str id: Indicates the ID of an endpoint rule.
        :param _builtins.int ipaddress_count: Indicates the number of IP addresses in the endpoint rule.
        :param _builtins.str name: Specifies the name of the endpoint rule to be queried.
        :param Sequence['GetResolverRulesResolverRuleRouterArgs'] routers: Indicates the VPC associated with the endpoint rule.
        :param _builtins.str rule_type: Indicates the rule type.
        :param _builtins.str status: Indicates the resource status.
        :param _builtins.str update_time: Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipaddress_count", ipaddress_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routers", routers)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        Specifies the domain name of the endpoint rule to be queried.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> _builtins.str:
        """
        Specifies the endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of an endpoint rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipaddressCount")
    def ipaddress_count(self) -> _builtins.int:
        """
        Indicates the number of IP addresses in the endpoint rule.
        """
        return pulumi.get(self, "ipaddress_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the endpoint rule to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def routers(self) -> Sequence['outputs.GetResolverRulesResolverRuleRouterResult']:
        """
        Indicates the VPC associated with the endpoint rule.
        """
        return pulumi.get(self, "routers")

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> _builtins.str:
        """
        Indicates the rule type.
        """
        return pulumi.get(self, "rule_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the resource status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetResolverRulesResolverRuleRouterResult(dict):
    def __init__(__self__, *,
                 router_id: _builtins.str,
                 router_region: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str router_id: Indicates the ID of the associated VPC.
        :param _builtins.str router_region: Indicates the region where the associated VPC is located.
        :param _builtins.str status: Indicates the resource status.
        """
        pulumi.set(__self__, "router_id", router_id)
        pulumi.set(__self__, "router_region", router_region)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> _builtins.str:
        """
        Indicates the ID of the associated VPC.
        """
        return pulumi.get(self, "router_id")

    @_builtins.property
    @pulumi.getter(name="routerRegion")
    def router_region(self) -> _builtins.str:
        """
        Indicates the region where the associated VPC is located.
        """
        return pulumi.get(self, "router_region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the resource status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetTagsFilterMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: Specifies the key of tag.
        :param _builtins.str value: Specifies the value of the matching field.
               
               <a name="block--tag_values"></a>
               The `tag_values` block supports:
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of the matching field.

        <a name="block--tag_values"></a>
        The `tag_values` block supports:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTagsFilterNotTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the key of tag.
        :param Sequence[_builtins.str] values: Specifies the list of values of the tag.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key of tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTagsFilterNotTagsAnyResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the key of tag.
        :param Sequence[_builtins.str] values: Specifies the list of values of the tag.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key of tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTagsFilterResourceResult(dict):
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Sequence['outputs.GetTagsFilterResourceTagResult']):
        """
        :param _builtins.str resource_id: Indicates the ID of the resource.
        :param _builtins.str resource_name: Indicates the name of the resource.
        :param Sequence['GetTagsFilterResourceTagArgs'] tags: Specifies the list of the tags to be queried.
               The tag_values structure is documented below.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Indicates the ID of the resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Indicates the name of the resource.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTagsFilterResourceTagResult']:
        """
        Specifies the list of the tags to be queried.
        The tag_values structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetTagsFilterResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of tag.
        :param _builtins.str value: Specifies the value of the matching field.
               
               <a name="block--tag_values"></a>
               The `tag_values` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the matching field.

        <a name="block--tag_values"></a>
        The `tag_values` block supports:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTagsFilterTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the key of tag.
        :param Sequence[_builtins.str] values: Specifies the list of values of the tag.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key of tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTagsFilterTagsAnyResult(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: Specifies the key of tag.
        :param Sequence[_builtins.str] values: Specifies the list of values of the tag.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Specifies the key of tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetZonesZoneResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 email: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 masters: Sequence[_builtins.str],
                 name: _builtins.str,
                 pool_id: _builtins.str,
                 proxy_pattern: _builtins.str,
                 record_num: _builtins.int,
                 routers: Sequence['outputs.GetZonesZoneRouterResult'],
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 ttl: _builtins.int,
                 updated_at: _builtins.str,
                 zone_type: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the zone, in RFC3339 format.
        :param _builtins.str description: The zone description.
        :param _builtins.str email: The email address of the administrator managing the zone.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID which the zone associated.
        :param _builtins.str id: The zone ID.
        :param Sequence[_builtins.str] masters: The master DNS servers, from which the slave servers get DNS information.
        :param _builtins.str name: Specifies the name of the zone to be queried. Fuzzy matching will work.
        :param _builtins.str pool_id: The ID of the pool to which the zone belongs, assigned by the system.
        :param _builtins.str proxy_pattern: The recursive resolution proxy mode for subdomains of the private zone.
               + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
               + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
        :param _builtins.int record_num: The number of record sets in the zone.
        :param Sequence['GetZonesZoneRouterArgs'] routers: The list of VPCs associated with the zone. This attribute is only valid when `zone_type` is **private**.
               The routers structure is documented below.
        :param _builtins.str status: Specifies the zone status. Valid values are as follows:
               + **ACTIVE**: Normal.
               + **ERROR**: Failed.
               + **FREEZE**: Frozen.
               + **DISABLE**: Disabled.
               + **POLICE**: Frozen due to security reasons.
               + **ILLEGAL**: Frozen due to abuse.
        :param Mapping[str, _builtins.str] tags: Specifies the resource tag. The format is as follows: key1,value1|key2,value2.
               Multiple tags are separated by vertical bar (|). The key and value of each tag are separated by comma (,). The tags
               are in `AND` relationship. Exact matching will work. If the value starts with an asterisk (*), fuzzy matching will
               work for the string following the asterisk.
        :param _builtins.int ttl: The time to live (TTL) of the zone. The unit is seconds.
        :param _builtins.str updated_at: The latest update time of the zone, in RFC3339 format.
        :param _builtins.str zone_type: Specifies the zone type. The value can be **public** or **private**.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "masters", masters)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pool_id", pool_id)
        pulumi.set(__self__, "proxy_pattern", proxy_pattern)
        pulumi.set(__self__, "record_num", record_num)
        pulumi.set(__self__, "routers", routers)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "zone_type", zone_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the zone, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The zone description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        The email address of the administrator managing the zone.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID which the zone associated.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The zone ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def masters(self) -> Sequence[_builtins.str]:
        """
        The master DNS servers, from which the slave servers get DNS information.
        """
        return pulumi.get(self, "masters")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the zone to be queried. Fuzzy matching will work.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> _builtins.str:
        """
        The ID of the pool to which the zone belongs, assigned by the system.
        """
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter(name="proxyPattern")
    def proxy_pattern(self) -> _builtins.str:
        """
        The recursive resolution proxy mode for subdomains of the private zone.
        + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
        + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
        """
        return pulumi.get(self, "proxy_pattern")

    @_builtins.property
    @pulumi.getter(name="recordNum")
    def record_num(self) -> _builtins.int:
        """
        The number of record sets in the zone.
        """
        return pulumi.get(self, "record_num")

    @_builtins.property
    @pulumi.getter
    def routers(self) -> Sequence['outputs.GetZonesZoneRouterResult']:
        """
        The list of VPCs associated with the zone. This attribute is only valid when `zone_type` is **private**.
        The routers structure is documented below.
        """
        return pulumi.get(self, "routers")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the zone status. Valid values are as follows:
        + **ACTIVE**: Normal.
        + **ERROR**: Failed.
        + **FREEZE**: Frozen.
        + **DISABLE**: Disabled.
        + **POLICE**: Frozen due to security reasons.
        + **ILLEGAL**: Frozen due to abuse.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the resource tag. The format is as follows: key1,value1|key2,value2.
        Multiple tags are separated by vertical bar (|). The key and value of each tag are separated by comma (,). The tags
        are in `AND` relationship. Exact matching will work. If the value starts with an asterisk (*), fuzzy matching will
        work for the string following the asterisk.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> _builtins.int:
        """
        The time to live (TTL) of the zone. The unit is seconds.
        """
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the zone, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> _builtins.str:
        """
        Specifies the zone type. The value can be **public** or **private**.
        """
        return pulumi.get(self, "zone_type")


@pulumi.output_type
class GetZonesZoneRouterResult(dict):
    def __init__(__self__, *,
                 router_id: _builtins.str,
                 router_region: _builtins.str):
        """
        :param _builtins.str router_id: Specifies the ID of the VPC associated with the private zone.  
               This parameter is available only when the `zone_type` parameter is set to **private**.
        :param _builtins.str router_region: The region of the VPC.
        """
        pulumi.set(__self__, "router_id", router_id)
        pulumi.set(__self__, "router_region", router_region)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPC associated with the private zone.  
        This parameter is available only when the `zone_type` parameter is set to **private**.
        """
        return pulumi.get(self, "router_id")

    @_builtins.property
    @pulumi.getter(name="routerRegion")
    def router_region(self) -> _builtins.str:
        """
        The region of the VPC.
        """
        return pulumi.get(self, "router_region")


