# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZoneArgs', 'Zone']

@pulumi.input_type
class ZoneArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dnssec: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 zone_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Zone resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the zone.  
               A maximum of `255` characters are allowed.
        :param pulumi.Input[_builtins.str] dnssec: Specifies whether to enable DNSSEC for a public zone.
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
               
               > Before changing this parameter, make sure the zone status is enabled.
        :param pulumi.Input[_builtins.str] email: Specifies the email address of the administrator managing the zone.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the zone.  
               Changing this parameter will create a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the zone. Note the `.` at the end of the name.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] proxy_pattern: Specifies the recursive resolution proxy mode for subdomains of the private zone.
               Defaults to **AUTHORITY**. The valid values are as follows:
               + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
               + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
               
               > 1. This parameter ia available only when the `zone_type` parameter is set to **private**.
               <br>2. If this parameter is set to **RECURSIVE**, but you query subdomains that are not configured in the zone namespace,
               the DNS will recursively resolve the subdomains on the Internet and use the result from authoritative DNS servers.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]] routers: Specifies the list of the router of the zone.
               Router configuration block which is required if zone_type is private.
               The router structure is documented below.
               
               > Before changing this parameter, make sure the zone status is enabled.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the zone, defaults to **ENABLE**.  
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
               
               > This is a one-time action.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the zone.
               
               <a name="zone_router"></a>
               The `router` block supports:
        :param pulumi.Input[_builtins.int] ttl: Specifies the time to live (TTL) of the zone, defaults to `300`.  
               The valid value is range from `1` to `2,147,483,647`.
        :param pulumi.Input[_builtins.str] zone_type: Specifies the type of zone, defaults to **public**.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **public**
               + **private**
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dnssec is not None:
            pulumi.set(__self__, "dnssec", dnssec)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_pattern is not None:
            pulumi.set(__self__, "proxy_pattern", proxy_pattern)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routers is not None:
            pulumi.set(__self__, "routers", routers)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if zone_type is not None:
            pulumi.set(__self__, "zone_type", zone_type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the zone.  
        A maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def dnssec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to enable DNSSEC for a public zone.
        The valid values are as follows:
        + **ENABLE**
        + **DISABLE**

        > Before changing this parameter, make sure the zone status is enabled.
        """
        return pulumi.get(self, "dnssec")

    @dnssec.setter
    def dnssec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dnssec", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the email address of the administrator managing the zone.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of the zone.  
        Changing this parameter will create a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the zone. Note the `.` at the end of the name.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="proxyPattern")
    def proxy_pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the recursive resolution proxy mode for subdomains of the private zone.
        Defaults to **AUTHORITY**. The valid values are as follows:
        + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
        + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.

        > 1. This parameter ia available only when the `zone_type` parameter is set to **private**.
        <br>2. If this parameter is set to **RECURSIVE**, but you query subdomains that are not configured in the zone namespace,
        the DNS will recursively resolve the subdomains on the Internet and use the result from authoritative DNS servers.
        """
        return pulumi.get(self, "proxy_pattern")

    @proxy_pattern.setter
    def proxy_pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_pattern", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def routers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]]:
        """
        Specifies the list of the router of the zone.
        Router configuration block which is required if zone_type is private.
        The router structure is documented below.

        > Before changing this parameter, make sure the zone status is enabled.
        """
        return pulumi.get(self, "routers")

    @routers.setter
    def routers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]]):
        pulumi.set(self, "routers", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the status of the zone, defaults to **ENABLE**.  
        The valid values are as follows:
        + **ENABLE**
        + **DISABLE**

        > This is a one-time action.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the zone.

        <a name="zone_router"></a>
        The `router` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the time to live (TTL) of the zone, defaults to `300`.  
        The valid value is range from `1` to `2,147,483,647`.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of zone, defaults to **public**.  
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **public**
        + **private**
        """
        return pulumi.get(self, "zone_type")

    @zone_type.setter
    def zone_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone_type", value)


@pulumi.input_type
class _ZoneState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dnssec: Optional[pulumi.Input[_builtins.str]] = None,
                 dnssec_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneDnssecInfoArgs']]]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 masters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 zone_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Zone resources.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the zone.  
               A maximum of `255` characters are allowed.
        :param pulumi.Input[_builtins.str] dnssec: Specifies whether to enable DNSSEC for a public zone.
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
               
               > Before changing this parameter, make sure the zone status is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneDnssecInfoArgs']]] dnssec_infos: Indicates the DNSSEC infos.
               The dnssec_infos structure is documented below.
        :param pulumi.Input[_builtins.str] email: Specifies the email address of the administrator managing the zone.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the zone.  
               Changing this parameter will create a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] masters: The list of the masters of the DNS server.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the zone. Note the `.` at the end of the name.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] proxy_pattern: Specifies the recursive resolution proxy mode for subdomains of the private zone.
               Defaults to **AUTHORITY**. The valid values are as follows:
               + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
               + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
               
               > 1. This parameter ia available only when the `zone_type` parameter is set to **private**.
               <br>2. If this parameter is set to **RECURSIVE**, but you query subdomains that are not configured in the zone namespace,
               the DNS will recursively resolve the subdomains on the Internet and use the result from authoritative DNS servers.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]] routers: Specifies the list of the router of the zone.
               Router configuration block which is required if zone_type is private.
               The router structure is documented below.
               
               > Before changing this parameter, make sure the zone status is enabled.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the zone, defaults to **ENABLE**.  
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
               
               > This is a one-time action.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the zone.
               
               <a name="zone_router"></a>
               The `router` block supports:
        :param pulumi.Input[_builtins.int] ttl: Specifies the time to live (TTL) of the zone, defaults to `300`.  
               The valid value is range from `1` to `2,147,483,647`.
        :param pulumi.Input[_builtins.str] zone_type: Specifies the type of zone, defaults to **public**.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **public**
               + **private**
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dnssec is not None:
            pulumi.set(__self__, "dnssec", dnssec)
        if dnssec_infos is not None:
            pulumi.set(__self__, "dnssec_infos", dnssec_infos)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if masters is not None:
            pulumi.set(__self__, "masters", masters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_pattern is not None:
            pulumi.set(__self__, "proxy_pattern", proxy_pattern)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routers is not None:
            pulumi.set(__self__, "routers", routers)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if zone_type is not None:
            pulumi.set(__self__, "zone_type", zone_type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the zone.  
        A maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def dnssec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to enable DNSSEC for a public zone.
        The valid values are as follows:
        + **ENABLE**
        + **DISABLE**

        > Before changing this parameter, make sure the zone status is enabled.
        """
        return pulumi.get(self, "dnssec")

    @dnssec.setter
    def dnssec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dnssec", value)

    @_builtins.property
    @pulumi.getter(name="dnssecInfos")
    def dnssec_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneDnssecInfoArgs']]]]:
        """
        Indicates the DNSSEC infos.
        The dnssec_infos structure is documented below.
        """
        return pulumi.get(self, "dnssec_infos")

    @dnssec_infos.setter
    def dnssec_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneDnssecInfoArgs']]]]):
        pulumi.set(self, "dnssec_infos", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the email address of the administrator managing the zone.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID of the zone.  
        Changing this parameter will create a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def masters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of the masters of the DNS server.
        """
        return pulumi.get(self, "masters")

    @masters.setter
    def masters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "masters", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the zone. Note the `.` at the end of the name.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="proxyPattern")
    def proxy_pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the recursive resolution proxy mode for subdomains of the private zone.
        Defaults to **AUTHORITY**. The valid values are as follows:
        + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
        + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.

        > 1. This parameter ia available only when the `zone_type` parameter is set to **private**.
        <br>2. If this parameter is set to **RECURSIVE**, but you query subdomains that are not configured in the zone namespace,
        the DNS will recursively resolve the subdomains on the Internet and use the result from authoritative DNS servers.
        """
        return pulumi.get(self, "proxy_pattern")

    @proxy_pattern.setter
    def proxy_pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_pattern", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def routers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]]:
        """
        Specifies the list of the router of the zone.
        Router configuration block which is required if zone_type is private.
        The router structure is documented below.

        > Before changing this parameter, make sure the zone status is enabled.
        """
        return pulumi.get(self, "routers")

    @routers.setter
    def routers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]]):
        pulumi.set(self, "routers", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the status of the zone, defaults to **ENABLE**.  
        The valid values are as follows:
        + **ENABLE**
        + **DISABLE**

        > This is a one-time action.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the zone.

        <a name="zone_router"></a>
        The `router` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the time to live (TTL) of the zone, defaults to `300`.  
        The valid value is range from `1` to `2,147,483,647`.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of zone, defaults to **public**.  
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **public**
        + **private**
        """
        return pulumi.get(self, "zone_type")

    @zone_type.setter
    def zone_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone_type", value)


@pulumi.type_token("huaweicloud:Dns/zone:Zone")
class Zone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dnssec: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ZoneRouterArgs', 'ZoneRouterArgsDict']]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 zone_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DNS zone resource within HuaweiCloud.

        ## Example Usage

        ### Create a public DNS zone

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        zone_name = config.require_object("zoneName")
        email = config.require_object("email")
        description = config.require_object("description")
        test = huaweicloud.dns.Zone("test",
            name=zone_name,
            email=email,
            zone_type="public",
            ttl=3000,
            description=description)
        ```

        ### Create a private DNS zone

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        zone_name = config.require_object("zoneName")
        email = config.require_object("email")
        description = config.require_object("description")
        router_id = config.require_object("routerId")
        test = huaweicloud.dns.Zone("test",
            name=zone_name,
            email=email,
            zone_type="private",
            ttl=3000,
            description=description,
            routers=[{
                "router_id": router_id,
            }])
        ```

        ## Import

        This resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dns/zone:Zone test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the zone.  
               A maximum of `255` characters are allowed.
        :param pulumi.Input[_builtins.str] dnssec: Specifies whether to enable DNSSEC for a public zone.
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
               
               > Before changing this parameter, make sure the zone status is enabled.
        :param pulumi.Input[_builtins.str] email: Specifies the email address of the administrator managing the zone.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the zone.  
               Changing this parameter will create a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the zone. Note the `.` at the end of the name.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] proxy_pattern: Specifies the recursive resolution proxy mode for subdomains of the private zone.
               Defaults to **AUTHORITY**. The valid values are as follows:
               + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
               + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
               
               > 1. This parameter ia available only when the `zone_type` parameter is set to **private**.
               <br>2. If this parameter is set to **RECURSIVE**, but you query subdomains that are not configured in the zone namespace,
               the DNS will recursively resolve the subdomains on the Internet and use the result from authoritative DNS servers.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ZoneRouterArgs', 'ZoneRouterArgsDict']]]] routers: Specifies the list of the router of the zone.
               Router configuration block which is required if zone_type is private.
               The router structure is documented below.
               
               > Before changing this parameter, make sure the zone status is enabled.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the zone, defaults to **ENABLE**.  
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
               
               > This is a one-time action.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the zone.
               
               <a name="zone_router"></a>
               The `router` block supports:
        :param pulumi.Input[_builtins.int] ttl: Specifies the time to live (TTL) of the zone, defaults to `300`.  
               The valid value is range from `1` to `2,147,483,647`.
        :param pulumi.Input[_builtins.str] zone_type: Specifies the type of zone, defaults to **public**.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **public**
               + **private**
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ZoneArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DNS zone resource within HuaweiCloud.

        ## Example Usage

        ### Create a public DNS zone

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        zone_name = config.require_object("zoneName")
        email = config.require_object("email")
        description = config.require_object("description")
        test = huaweicloud.dns.Zone("test",
            name=zone_name,
            email=email,
            zone_type="public",
            ttl=3000,
            description=description)
        ```

        ### Create a private DNS zone

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        zone_name = config.require_object("zoneName")
        email = config.require_object("email")
        description = config.require_object("description")
        router_id = config.require_object("routerId")
        test = huaweicloud.dns.Zone("test",
            name=zone_name,
            email=email,
            zone_type="private",
            ttl=3000,
            description=description,
            routers=[{
                "router_id": router_id,
            }])
        ```

        ## Import

        This resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Dns/zone:Zone test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dnssec: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ZoneRouterArgs', 'ZoneRouterArgsDict']]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 zone_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZoneArgs.__new__(ZoneArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dnssec"] = dnssec
            __props__.__dict__["email"] = email
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            __props__.__dict__["proxy_pattern"] = proxy_pattern
            __props__.__dict__["region"] = region
            __props__.__dict__["routers"] = routers
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["zone_type"] = zone_type
            __props__.__dict__["dnssec_infos"] = None
            __props__.__dict__["masters"] = None
        super(Zone, __self__).__init__(
            'huaweicloud:Dns/zone:Zone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dnssec: Optional[pulumi.Input[_builtins.str]] = None,
            dnssec_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ZoneDnssecInfoArgs', 'ZoneDnssecInfoArgsDict']]]]] = None,
            email: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            masters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            proxy_pattern: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            routers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ZoneRouterArgs', 'ZoneRouterArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            ttl: Optional[pulumi.Input[_builtins.int]] = None,
            zone_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'Zone':
        """
        Get an existing Zone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the zone.  
               A maximum of `255` characters are allowed.
        :param pulumi.Input[_builtins.str] dnssec: Specifies whether to enable DNSSEC for a public zone.
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
               
               > Before changing this parameter, make sure the zone status is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ZoneDnssecInfoArgs', 'ZoneDnssecInfoArgsDict']]]] dnssec_infos: Indicates the DNSSEC infos.
               The dnssec_infos structure is documented below.
        :param pulumi.Input[_builtins.str] email: Specifies the email address of the administrator managing the zone.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID of the zone.  
               Changing this parameter will create a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] masters: The list of the masters of the DNS server.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the zone. Note the `.` at the end of the name.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] proxy_pattern: Specifies the recursive resolution proxy mode for subdomains of the private zone.
               Defaults to **AUTHORITY**. The valid values are as follows:
               + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
               + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
               
               > 1. This parameter ia available only when the `zone_type` parameter is set to **private**.
               <br>2. If this parameter is set to **RECURSIVE**, but you query subdomains that are not configured in the zone namespace,
               the DNS will recursively resolve the subdomains on the Internet and use the result from authoritative DNS servers.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ZoneRouterArgs', 'ZoneRouterArgsDict']]]] routers: Specifies the list of the router of the zone.
               Router configuration block which is required if zone_type is private.
               The router structure is documented below.
               
               > Before changing this parameter, make sure the zone status is enabled.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the zone, defaults to **ENABLE**.  
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
               
               > This is a one-time action.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the zone.
               
               <a name="zone_router"></a>
               The `router` block supports:
        :param pulumi.Input[_builtins.int] ttl: Specifies the time to live (TTL) of the zone, defaults to `300`.  
               The valid value is range from `1` to `2,147,483,647`.
        :param pulumi.Input[_builtins.str] zone_type: Specifies the type of zone, defaults to **public**.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **public**
               + **private**
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZoneState.__new__(_ZoneState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dnssec"] = dnssec
        __props__.__dict__["dnssec_infos"] = dnssec_infos
        __props__.__dict__["email"] = email
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["masters"] = masters
        __props__.__dict__["name"] = name
        __props__.__dict__["proxy_pattern"] = proxy_pattern
        __props__.__dict__["region"] = region
        __props__.__dict__["routers"] = routers
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["zone_type"] = zone_type
        return Zone(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the zone.  
        A maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def dnssec(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether to enable DNSSEC for a public zone.
        The valid values are as follows:
        + **ENABLE**
        + **DISABLE**

        > Before changing this parameter, make sure the zone status is enabled.
        """
        return pulumi.get(self, "dnssec")

    @_builtins.property
    @pulumi.getter(name="dnssecInfos")
    def dnssec_infos(self) -> pulumi.Output[Sequence['outputs.ZoneDnssecInfo']]:
        """
        Indicates the DNSSEC infos.
        The dnssec_infos structure is documented below.
        """
        return pulumi.get(self, "dnssec_infos")

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the email address of the administrator managing the zone.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID of the zone.  
        Changing this parameter will create a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def masters(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The list of the masters of the DNS server.
        """
        return pulumi.get(self, "masters")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the zone. Note the `.` at the end of the name.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="proxyPattern")
    def proxy_pattern(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the recursive resolution proxy mode for subdomains of the private zone.
        Defaults to **AUTHORITY**. The valid values are as follows:
        + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
        + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.

        > 1. This parameter ia available only when the `zone_type` parameter is set to **private**.
        <br>2. If this parameter is set to **RECURSIVE**, but you query subdomains that are not configured in the zone namespace,
        the DNS will recursively resolve the subdomains on the Internet and use the result from authoritative DNS servers.
        """
        return pulumi.get(self, "proxy_pattern")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def routers(self) -> pulumi.Output[Optional[Sequence['outputs.ZoneRouter']]]:
        """
        Specifies the list of the router of the zone.
        Router configuration block which is required if zone_type is private.
        The router structure is documented below.

        > Before changing this parameter, make sure the zone status is enabled.
        """
        return pulumi.get(self, "routers")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the status of the zone, defaults to **ENABLE**.  
        The valid values are as follows:
        + **ENABLE**
        + **DISABLE**

        > This is a one-time action.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the zone.

        <a name="zone_router"></a>
        The `router` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the time to live (TTL) of the zone, defaults to `300`.  
        The valid value is range from `1` to `2,147,483,647`.
        """
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of zone, defaults to **public**.  
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **public**
        + **private**
        """
        return pulumi.get(self, "zone_type")

