# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupArgs', 'Backup']

@pulumi.input_type
class BackupArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BackupTagArgs']]]] = None):
        """
        The set of arguments for constructing a Backup resource.
        :param pulumi.Input[_builtins.str] volume_id: The id of the disk to be backed up. Changing the parameter creates a new
               backup.
        :param pulumi.Input[_builtins.str] description: The description of the vbs backup. Changing the parameter creates a new
               backup.
        :param pulumi.Input[_builtins.str] name: The name of the vbs backup. Changing the parameter creates a new backup.
        :param pulumi.Input[_builtins.str] region: The region in which to create the VBS backup resource. If omitted, the
               provider-level region will be used. Changing this creates a new VBS Backup resource.
        :param pulumi.Input[_builtins.str] snapshot_id: The snapshot id of the disk to be backed up. Changing the parameter
               creates a new backup.
        :param pulumi.Input[Sequence[pulumi.Input['BackupTagArgs']]] tags: List of tags to be configured for the backup resources. Changing the parameter
               creates a new backup.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[_builtins.str]:
        """
        The id of the disk to be backed up. Changing the parameter creates a new
        backup.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the vbs backup. Changing the parameter creates a new
        backup.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the vbs backup. Changing the parameter creates a new backup.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the VBS backup resource. If omitted, the
        provider-level region will be used. Changing this creates a new VBS Backup resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The snapshot id of the disk to be backed up. Changing the parameter
        creates a new backup.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupTagArgs']]]]:
        """
        List of tags to be configured for the backup resources. Changing the parameter
        creates a new backup.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _BackupState:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 container: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_metadata: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BackupTagArgs']]]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Backup resources.
        :param pulumi.Input[_builtins.str] availability_zone: The AZ where the backup resides.
        :param pulumi.Input[_builtins.str] container: The container of the backup.
        :param pulumi.Input[_builtins.str] created_at: Backup creation time.
        :param pulumi.Input[_builtins.str] description: The description of the vbs backup. Changing the parameter creates a new
               backup.
        :param pulumi.Input[_builtins.str] name: The name of the vbs backup. Changing the parameter creates a new backup.
        :param pulumi.Input[_builtins.int] object_count: Number of objects on Object Storage Service (OBS) for the disk data.
        :param pulumi.Input[_builtins.str] region: The region in which to create the VBS backup resource. If omitted, the
               provider-level region will be used. Changing this creates a new VBS Backup resource.
        :param pulumi.Input[_builtins.str] service_metadata: The metadata of the vbs backup.
        :param pulumi.Input[_builtins.int] size: The size of the vbs backup.
        :param pulumi.Input[_builtins.str] snapshot_id: The snapshot id of the disk to be backed up. Changing the parameter
               creates a new backup.
        :param pulumi.Input[_builtins.str] status: The status of the VBS backup.
        :param pulumi.Input[Sequence[pulumi.Input['BackupTagArgs']]] tags: List of tags to be configured for the backup resources. Changing the parameter
               creates a new backup.
        :param pulumi.Input[_builtins.str] volume_id: The id of the disk to be backed up. Changing the parameter creates a new
               backup.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_metadata is not None:
            pulumi.set(__self__, "service_metadata", service_metadata)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AZ where the backup resides.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The container of the backup.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Backup creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the vbs backup. Changing the parameter creates a new
        backup.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the vbs backup. Changing the parameter creates a new backup.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of objects on Object Storage Service (OBS) for the disk data.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "object_count", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the VBS backup resource. If omitted, the
        provider-level region will be used. Changing this creates a new VBS Backup resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serviceMetadata")
    def service_metadata(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The metadata of the vbs backup.
        """
        return pulumi.get(self, "service_metadata")

    @service_metadata.setter
    def service_metadata(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_metadata", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The size of the vbs backup.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The snapshot id of the disk to be backed up. Changing the parameter
        creates a new backup.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the VBS backup.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupTagArgs']]]]:
        """
        List of tags to be configured for the backup resources. Changing the parameter
        creates a new backup.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the disk to be backed up. Changing the parameter creates a new
        backup.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.type_token("huaweicloud:vbs/backup:Backup")
class Backup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupTagArgs', 'BackupTagArgsDict']]]]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        !> **WARNING:** It has been deprecated.

        Provides an VBS Backup resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        volume = huaweicloud.evs.Volume("volume",
            name="volume",
            description="my volume",
            volume_type="SATA",
            size=20,
            availability_zone="cn-north-4a")
        snapshot1 = huaweicloud.evs.Snapshot("snapshot_1",
            name="snapshot-001",
            description="for vbs backup",
            volume_id=volume.id)
        backup1 = huaweicloud.vbs.Backup("backup_1",
            volume_id=volume.id,
            snapshot_id=snapshot1.id,
            name="vbs-backup",
            description="Backup_Demo",
            tags=[{
                "key": "bar",
                "value": "value",
            }])
        ```

        ## Import

        VBS Backup can be imported using the `backup id`, e.g.

        ```sh
        $ pulumi import huaweicloud:vbs/backup:Backup  huaweicloud_vbs_backup.backup_1 4779ab1c-7c1a-44b1-a02e-93dfc361b32d
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The description of the vbs backup. Changing the parameter creates a new
               backup.
        :param pulumi.Input[_builtins.str] name: The name of the vbs backup. Changing the parameter creates a new backup.
        :param pulumi.Input[_builtins.str] region: The region in which to create the VBS backup resource. If omitted, the
               provider-level region will be used. Changing this creates a new VBS Backup resource.
        :param pulumi.Input[_builtins.str] snapshot_id: The snapshot id of the disk to be backed up. Changing the parameter
               creates a new backup.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupTagArgs', 'BackupTagArgsDict']]]] tags: List of tags to be configured for the backup resources. Changing the parameter
               creates a new backup.
        :param pulumi.Input[_builtins.str] volume_id: The id of the disk to be backed up. Changing the parameter creates a new
               backup.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        !> **WARNING:** It has been deprecated.

        Provides an VBS Backup resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        volume = huaweicloud.evs.Volume("volume",
            name="volume",
            description="my volume",
            volume_type="SATA",
            size=20,
            availability_zone="cn-north-4a")
        snapshot1 = huaweicloud.evs.Snapshot("snapshot_1",
            name="snapshot-001",
            description="for vbs backup",
            volume_id=volume.id)
        backup1 = huaweicloud.vbs.Backup("backup_1",
            volume_id=volume.id,
            snapshot_id=snapshot1.id,
            name="vbs-backup",
            description="Backup_Demo",
            tags=[{
                "key": "bar",
                "value": "value",
            }])
        ```

        ## Import

        VBS Backup can be imported using the `backup id`, e.g.

        ```sh
        $ pulumi import huaweicloud:vbs/backup:Backup  huaweicloud_vbs_backup.backup_1 4779ab1c-7c1a-44b1-a02e-93dfc361b32d
        ```

        :param str resource_name: The name of the resource.
        :param BackupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupTagArgs', 'BackupTagArgsDict']]]]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupArgs.__new__(BackupArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["snapshot_id"] = snapshot_id
            __props__.__dict__["tags"] = tags
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["availability_zone"] = None
            __props__.__dict__["container"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["object_count"] = None
            __props__.__dict__["service_metadata"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["status"] = None
        super(Backup, __self__).__init__(
            'huaweicloud:vbs/backup:Backup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            container: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            object_count: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            service_metadata: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.int]] = None,
            snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupTagArgs', 'BackupTagArgsDict']]]]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Backup':
        """
        Get an existing Backup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] availability_zone: The AZ where the backup resides.
        :param pulumi.Input[_builtins.str] container: The container of the backup.
        :param pulumi.Input[_builtins.str] created_at: Backup creation time.
        :param pulumi.Input[_builtins.str] description: The description of the vbs backup. Changing the parameter creates a new
               backup.
        :param pulumi.Input[_builtins.str] name: The name of the vbs backup. Changing the parameter creates a new backup.
        :param pulumi.Input[_builtins.int] object_count: Number of objects on Object Storage Service (OBS) for the disk data.
        :param pulumi.Input[_builtins.str] region: The region in which to create the VBS backup resource. If omitted, the
               provider-level region will be used. Changing this creates a new VBS Backup resource.
        :param pulumi.Input[_builtins.str] service_metadata: The metadata of the vbs backup.
        :param pulumi.Input[_builtins.int] size: The size of the vbs backup.
        :param pulumi.Input[_builtins.str] snapshot_id: The snapshot id of the disk to be backed up. Changing the parameter
               creates a new backup.
        :param pulumi.Input[_builtins.str] status: The status of the VBS backup.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupTagArgs', 'BackupTagArgsDict']]]] tags: List of tags to be configured for the backup resources. Changing the parameter
               creates a new backup.
        :param pulumi.Input[_builtins.str] volume_id: The id of the disk to be backed up. Changing the parameter creates a new
               backup.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupState.__new__(_BackupState)

        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["container"] = container
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["object_count"] = object_count
        __props__.__dict__["region"] = region
        __props__.__dict__["service_metadata"] = service_metadata
        __props__.__dict__["size"] = size
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["volume_id"] = volume_id
        return Backup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[_builtins.str]:
        """
        The AZ where the backup resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def container(self) -> pulumi.Output[_builtins.str]:
        """
        The container of the backup.
        """
        return pulumi.get(self, "container")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Backup creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the vbs backup. Changing the parameter creates a new
        backup.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the vbs backup. Changing the parameter creates a new backup.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> pulumi.Output[_builtins.int]:
        """
        Number of objects on Object Storage Service (OBS) for the disk data.
        """
        return pulumi.get(self, "object_count")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the VBS backup resource. If omitted, the
        provider-level region will be used. Changing this creates a new VBS Backup resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceMetadata")
    def service_metadata(self) -> pulumi.Output[_builtins.str]:
        """
        The metadata of the vbs backup.
        """
        return pulumi.get(self, "service_metadata")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.int]:
        """
        The size of the vbs backup.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[_builtins.str]:
        """
        The snapshot id of the disk to be backed up. Changing the parameter
        creates a new backup.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the VBS backup.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.BackupTag']]]:
        """
        List of tags to be configured for the backup resources. Changing the parameter
        creates a new backup.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        The id of the disk to be backed up. Changing the parameter creates a new
        backup.
        """
        return pulumi.get(self, "volume_id")

