# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BackupPolicyTagArgs',
    'BackupPolicyTagArgsDict',
    'BackupPolicyV2TagArgs',
    'BackupPolicyV2TagArgsDict',
    'BackupTagArgs',
    'BackupTagArgsDict',
    'BackupV2TagArgs',
    'BackupV2TagArgsDict',
    'GetBackupPolicyFilterTagArgs',
    'GetBackupPolicyFilterTagArgsDict',
    'GetBackupPolicyV2FilterTagArgs',
    'GetBackupPolicyV2FilterTagArgsDict',
]

MYPY = False

if not MYPY:
    class BackupPolicyTagArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Specifies the tag key. A tag key consists of up to 36 characters, chosen from letters,
        digits, hyphens (-), and underscores (_).
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the tag value. A tag value consists of 0 to 43 characters, chosen from
        letters, digits, hyphens (-), and underscores (_).
        """
elif False:
    BackupPolicyTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupPolicyTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the tag key. A tag key consists of up to 36 characters, chosen from letters,
               digits, hyphens (-), and underscores (_).
        :param pulumi.Input[_builtins.str] value: Specifies the tag value. A tag value consists of 0 to 43 characters, chosen from
               letters, digits, hyphens (-), and underscores (_).
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the tag key. A tag key consists of up to 36 characters, chosen from letters,
        digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the tag value. A tag value consists of 0 to 43 characters, chosen from
        letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class BackupPolicyV2TagArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        value: pulumi.Input[_builtins.str]
elif False:
    BackupPolicyV2TagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupPolicyV2TagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class BackupTagArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Specifies the tag key. Changing the parameter creates a new backup.
        """
        value: pulumi.Input[_builtins.str]
        """
        Specifies the tag value. Changing the parameter creates a new backup.
        """
elif False:
    BackupTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] key: Specifies the tag key. Changing the parameter creates a new backup.
        :param pulumi.Input[_builtins.str] value: Specifies the tag value. Changing the parameter creates a new backup.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the tag key. Changing the parameter creates a new backup.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the tag value. Changing the parameter creates a new backup.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class BackupV2TagArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        value: pulumi.Input[_builtins.str]
elif False:
    BackupV2TagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupV2TagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetBackupPolicyFilterTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the tag key. Tag keys must be unique.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the List of tag values. This list can have a maximum of 10 values and all be
        unique.
        """
elif False:
    GetBackupPolicyFilterTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetBackupPolicyFilterTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the tag key. Tag keys must be unique.
        :param Sequence[_builtins.str] values: Specifies the List of tag values. This list can have a maximum of 10 values and all be
               unique.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the tag key. Tag keys must be unique.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the List of tag values. This list can have a maximum of 10 values and all be
        unique.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetBackupPolicyV2FilterTagArgsDict(TypedDict):
        key: _builtins.str
        values: Sequence[_builtins.str]
elif False:
    GetBackupPolicyV2FilterTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetBackupPolicyV2FilterTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


