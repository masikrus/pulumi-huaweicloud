# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupPolicyArgs', 'BackupPolicy']

@pulumi.input_type
class BackupPolicyArgs:
    def __init__(__self__, *,
                 retain_first_backup: pulumi.Input[_builtins.str],
                 start_time: pulumi.Input[_builtins.str],
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rentention_day: Optional[pulumi.Input[_builtins.int]] = None,
                 rentention_num: Optional[pulumi.Input[_builtins.int]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyTagArgs']]]] = None,
                 week_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a BackupPolicy resource.
        :param pulumi.Input[_builtins.str] retain_first_backup: Specifies whether to retain the first backup in the current month. Possible
               values are Y or N.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time(UTC) of the backup job. The value is in the HH:mm format.
               You need to set the execution time on a full hour. You can set multiple execution times, and use commas (,) to
               separate one time from another.
        :param pulumi.Input[_builtins.int] frequency: Specifies the backup interval. The value is in the range of `1` to `14` days.
               Either this field or `week_frequency` must be specified.
        :param pulumi.Input[_builtins.str] name: Specifies the policy name. The value is a string of 1 to 64 characters that can contain
               letters, digits, underscores (_), and hyphens (-). It cannot start with **default**.
        :param pulumi.Input[_builtins.str] region: The region in which to create the VBS backup policy resource. If omitted, the
               provider-level region will be used. Changing this creates a new VBS Backup Policy resource.
        :param pulumi.Input[_builtins.int] rentention_day: Specifies days of retained backups. Minimum value is `2`. Either this field
               or `rentention_num` must be specified.
        :param pulumi.Input[_builtins.int] rentention_num: Specifies number of retained backups. Minimum value is `2`. Either this field
               or `rentention_day` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resources: Specifies one or more volumes associated with the backup policy. Any previously
               associated backup policy will no longer apply.
        :param pulumi.Input[_builtins.str] status: Specifies the backup policy status. Possible values are ON or OFF. Defaults to ON.
        :param pulumi.Input[Sequence[pulumi.Input['BackupPolicyTagArgs']]] tags: Represents the list of tags to be configured for the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_frequencies: Specifies on which days of each week backup jobs are executed. The value can be
               one or more of the following: SUN, MON, TUE, WED, THU, FRI, SAT. Either this field or `frequency` must be specified.
        """
        pulumi.set(__self__, "retain_first_backup", retain_first_backup)
        pulumi.set(__self__, "start_time", start_time)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rentention_day is not None:
            pulumi.set(__self__, "rentention_day", rentention_day)
        if rentention_num is not None:
            pulumi.set(__self__, "rentention_num", rentention_num)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if week_frequencies is not None:
            pulumi.set(__self__, "week_frequencies", week_frequencies)

    @_builtins.property
    @pulumi.getter(name="retainFirstBackup")
    def retain_first_backup(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies whether to retain the first backup in the current month. Possible
        values are Y or N.
        """
        return pulumi.get(self, "retain_first_backup")

    @retain_first_backup.setter
    def retain_first_backup(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "retain_first_backup", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the start time(UTC) of the backup job. The value is in the HH:mm format.
        You need to set the execution time on a full hour. You can set multiple execution times, and use commas (,) to
        separate one time from another.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the backup interval. The value is in the range of `1` to `14` days.
        Either this field or `week_frequency` must be specified.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "frequency", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy name. The value is a string of 1 to 64 characters that can contain
        letters, digits, underscores (_), and hyphens (-). It cannot start with **default**.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the VBS backup policy resource. If omitted, the
        provider-level region will be used. Changing this creates a new VBS Backup Policy resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rententionDay")
    def rentention_day(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies days of retained backups. Minimum value is `2`. Either this field
        or `rentention_num` must be specified.
        """
        return pulumi.get(self, "rentention_day")

    @rentention_day.setter
    def rentention_day(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rentention_day", value)

    @_builtins.property
    @pulumi.getter(name="rententionNum")
    def rentention_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies number of retained backups. Minimum value is `2`. Either this field
        or `rentention_day` must be specified.
        """
        return pulumi.get(self, "rentention_num")

    @rentention_num.setter
    def rentention_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rentention_num", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies one or more volumes associated with the backup policy. Any previously
        associated backup policy will no longer apply.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup policy status. Possible values are ON or OFF. Defaults to ON.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyTagArgs']]]]:
        """
        Represents the list of tags to be configured for the backup policy.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="weekFrequencies")
    def week_frequencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies on which days of each week backup jobs are executed. The value can be
        one or more of the following: SUN, MON, TUE, WED, THU, FRI, SAT. Either this field or `frequency` must be specified.
        """
        return pulumi.get(self, "week_frequencies")

    @week_frequencies.setter
    def week_frequencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "week_frequencies", value)


@pulumi.input_type
class _BackupPolicyState:
    def __init__(__self__, *,
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_resource_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rentention_day: Optional[pulumi.Input[_builtins.int]] = None,
                 rentention_num: Optional[pulumi.Input[_builtins.int]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 retain_first_backup: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyTagArgs']]]] = None,
                 week_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering BackupPolicy resources.
        :param pulumi.Input[_builtins.int] frequency: Specifies the backup interval. The value is in the range of `1` to `14` days.
               Either this field or `week_frequency` must be specified.
        :param pulumi.Input[_builtins.str] name: Specifies the policy name. The value is a string of 1 to 64 characters that can contain
               letters, digits, underscores (_), and hyphens (-). It cannot start with **default**.
        :param pulumi.Input[_builtins.int] policy_resource_count: Specifies the number of volumes associated with the backup policy.
        :param pulumi.Input[_builtins.str] region: The region in which to create the VBS backup policy resource. If omitted, the
               provider-level region will be used. Changing this creates a new VBS Backup Policy resource.
        :param pulumi.Input[_builtins.int] rentention_day: Specifies days of retained backups. Minimum value is `2`. Either this field
               or `rentention_num` must be specified.
        :param pulumi.Input[_builtins.int] rentention_num: Specifies number of retained backups. Minimum value is `2`. Either this field
               or `rentention_day` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resources: Specifies one or more volumes associated with the backup policy. Any previously
               associated backup policy will no longer apply.
        :param pulumi.Input[_builtins.str] retain_first_backup: Specifies whether to retain the first backup in the current month. Possible
               values are Y or N.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time(UTC) of the backup job. The value is in the HH:mm format.
               You need to set the execution time on a full hour. You can set multiple execution times, and use commas (,) to
               separate one time from another.
        :param pulumi.Input[_builtins.str] status: Specifies the backup policy status. Possible values are ON or OFF. Defaults to ON.
        :param pulumi.Input[Sequence[pulumi.Input['BackupPolicyTagArgs']]] tags: Represents the list of tags to be configured for the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_frequencies: Specifies on which days of each week backup jobs are executed. The value can be
               one or more of the following: SUN, MON, TUE, WED, THU, FRI, SAT. Either this field or `frequency` must be specified.
        """
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_resource_count is not None:
            pulumi.set(__self__, "policy_resource_count", policy_resource_count)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rentention_day is not None:
            pulumi.set(__self__, "rentention_day", rentention_day)
        if rentention_num is not None:
            pulumi.set(__self__, "rentention_num", rentention_num)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if retain_first_backup is not None:
            pulumi.set(__self__, "retain_first_backup", retain_first_backup)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if week_frequencies is not None:
            pulumi.set(__self__, "week_frequencies", week_frequencies)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the backup interval. The value is in the range of `1` to `14` days.
        Either this field or `week_frequency` must be specified.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "frequency", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy name. The value is a string of 1 to 64 characters that can contain
        letters, digits, underscores (_), and hyphens (-). It cannot start with **default**.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="policyResourceCount")
    def policy_resource_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of volumes associated with the backup policy.
        """
        return pulumi.get(self, "policy_resource_count")

    @policy_resource_count.setter
    def policy_resource_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "policy_resource_count", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the VBS backup policy resource. If omitted, the
        provider-level region will be used. Changing this creates a new VBS Backup Policy resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rententionDay")
    def rentention_day(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies days of retained backups. Minimum value is `2`. Either this field
        or `rentention_num` must be specified.
        """
        return pulumi.get(self, "rentention_day")

    @rentention_day.setter
    def rentention_day(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rentention_day", value)

    @_builtins.property
    @pulumi.getter(name="rententionNum")
    def rentention_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies number of retained backups. Minimum value is `2`. Either this field
        or `rentention_day` must be specified.
        """
        return pulumi.get(self, "rentention_num")

    @rentention_num.setter
    def rentention_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rentention_num", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies one or more volumes associated with the backup policy. Any previously
        associated backup policy will no longer apply.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter(name="retainFirstBackup")
    def retain_first_backup(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to retain the first backup in the current month. Possible
        values are Y or N.
        """
        return pulumi.get(self, "retain_first_backup")

    @retain_first_backup.setter
    def retain_first_backup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retain_first_backup", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the start time(UTC) of the backup job. The value is in the HH:mm format.
        You need to set the execution time on a full hour. You can set multiple execution times, and use commas (,) to
        separate one time from another.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup policy status. Possible values are ON or OFF. Defaults to ON.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyTagArgs']]]]:
        """
        Represents the list of tags to be configured for the backup policy.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="weekFrequencies")
    def week_frequencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies on which days of each week backup jobs are executed. The value can be
        one or more of the following: SUN, MON, TUE, WED, THU, FRI, SAT. Either this field or `frequency` must be specified.
        """
        return pulumi.get(self, "week_frequencies")

    @week_frequencies.setter
    def week_frequencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "week_frequencies", value)


@pulumi.type_token("huaweicloud:vbs/backupPolicy:BackupPolicy")
class BackupPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rentention_day: Optional[pulumi.Input[_builtins.int]] = None,
                 rentention_num: Optional[pulumi.Input[_builtins.int]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 retain_first_backup: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupPolicyTagArgs', 'BackupPolicyTagArgsDict']]]]] = None,
                 week_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        !> **WARNING:** It has been deprecated.

        Provides an VBS Backup Policy resource.

        ## Example Usage

        ### Basic Backup Policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        vbs_policy1 = huaweicloud.vbs.BackupPolicy("vbs_policy1",
            name="policy_001",
            status="ON",
            start_time="12:00",
            retain_first_backup="N",
            rentention_num=7,
            frequency=1,
            tags=[{
                "key": "k1",
                "value": "v1",
            }])
        ```

        ### Backup Policy with EVS Disks

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        volume_id = config.require_object("volumeId")
        vbs_policy2 = huaweicloud.vbs.BackupPolicy("vbs_policy2",
            name="policy_002",
            status="ON",
            start_time="12:00",
            retain_first_backup="N",
            rentention_num=5,
            frequency=3,
            resources=[volume_id])
        ```

        ## Import

        Backup Policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:vbs/backupPolicy:BackupPolicy vbs 4779ab1c-7c1a-44b1-a02e-93dfc361b32d
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] frequency: Specifies the backup interval. The value is in the range of `1` to `14` days.
               Either this field or `week_frequency` must be specified.
        :param pulumi.Input[_builtins.str] name: Specifies the policy name. The value is a string of 1 to 64 characters that can contain
               letters, digits, underscores (_), and hyphens (-). It cannot start with **default**.
        :param pulumi.Input[_builtins.str] region: The region in which to create the VBS backup policy resource. If omitted, the
               provider-level region will be used. Changing this creates a new VBS Backup Policy resource.
        :param pulumi.Input[_builtins.int] rentention_day: Specifies days of retained backups. Minimum value is `2`. Either this field
               or `rentention_num` must be specified.
        :param pulumi.Input[_builtins.int] rentention_num: Specifies number of retained backups. Minimum value is `2`. Either this field
               or `rentention_day` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resources: Specifies one or more volumes associated with the backup policy. Any previously
               associated backup policy will no longer apply.
        :param pulumi.Input[_builtins.str] retain_first_backup: Specifies whether to retain the first backup in the current month. Possible
               values are Y or N.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time(UTC) of the backup job. The value is in the HH:mm format.
               You need to set the execution time on a full hour. You can set multiple execution times, and use commas (,) to
               separate one time from another.
        :param pulumi.Input[_builtins.str] status: Specifies the backup policy status. Possible values are ON or OFF. Defaults to ON.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupPolicyTagArgs', 'BackupPolicyTagArgsDict']]]] tags: Represents the list of tags to be configured for the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_frequencies: Specifies on which days of each week backup jobs are executed. The value can be
               one or more of the following: SUN, MON, TUE, WED, THU, FRI, SAT. Either this field or `frequency` must be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        !> **WARNING:** It has been deprecated.

        Provides an VBS Backup Policy resource.

        ## Example Usage

        ### Basic Backup Policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        vbs_policy1 = huaweicloud.vbs.BackupPolicy("vbs_policy1",
            name="policy_001",
            status="ON",
            start_time="12:00",
            retain_first_backup="N",
            rentention_num=7,
            frequency=1,
            tags=[{
                "key": "k1",
                "value": "v1",
            }])
        ```

        ### Backup Policy with EVS Disks

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        volume_id = config.require_object("volumeId")
        vbs_policy2 = huaweicloud.vbs.BackupPolicy("vbs_policy2",
            name="policy_002",
            status="ON",
            start_time="12:00",
            retain_first_backup="N",
            rentention_num=5,
            frequency=3,
            resources=[volume_id])
        ```

        ## Import

        Backup Policy can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:vbs/backupPolicy:BackupPolicy vbs 4779ab1c-7c1a-44b1-a02e-93dfc361b32d
        ```

        :param str resource_name: The name of the resource.
        :param BackupPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rentention_day: Optional[pulumi.Input[_builtins.int]] = None,
                 rentention_num: Optional[pulumi.Input[_builtins.int]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 retain_first_backup: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupPolicyTagArgs', 'BackupPolicyTagArgsDict']]]]] = None,
                 week_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupPolicyArgs.__new__(BackupPolicyArgs)

            __props__.__dict__["frequency"] = frequency
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["rentention_day"] = rentention_day
            __props__.__dict__["rentention_num"] = rentention_num
            __props__.__dict__["resources"] = resources
            if retain_first_backup is None and not opts.urn:
                raise TypeError("Missing required property 'retain_first_backup'")
            __props__.__dict__["retain_first_backup"] = retain_first_backup
            if start_time is None and not opts.urn:
                raise TypeError("Missing required property 'start_time'")
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["week_frequencies"] = week_frequencies
            __props__.__dict__["policy_resource_count"] = None
        super(BackupPolicy, __self__).__init__(
            'huaweicloud:vbs/backupPolicy:BackupPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            frequency: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policy_resource_count: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rentention_day: Optional[pulumi.Input[_builtins.int]] = None,
            rentention_num: Optional[pulumi.Input[_builtins.int]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            retain_first_backup: Optional[pulumi.Input[_builtins.str]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupPolicyTagArgs', 'BackupPolicyTagArgsDict']]]]] = None,
            week_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'BackupPolicy':
        """
        Get an existing BackupPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] frequency: Specifies the backup interval. The value is in the range of `1` to `14` days.
               Either this field or `week_frequency` must be specified.
        :param pulumi.Input[_builtins.str] name: Specifies the policy name. The value is a string of 1 to 64 characters that can contain
               letters, digits, underscores (_), and hyphens (-). It cannot start with **default**.
        :param pulumi.Input[_builtins.int] policy_resource_count: Specifies the number of volumes associated with the backup policy.
        :param pulumi.Input[_builtins.str] region: The region in which to create the VBS backup policy resource. If omitted, the
               provider-level region will be used. Changing this creates a new VBS Backup Policy resource.
        :param pulumi.Input[_builtins.int] rentention_day: Specifies days of retained backups. Minimum value is `2`. Either this field
               or `rentention_num` must be specified.
        :param pulumi.Input[_builtins.int] rentention_num: Specifies number of retained backups. Minimum value is `2`. Either this field
               or `rentention_day` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resources: Specifies one or more volumes associated with the backup policy. Any previously
               associated backup policy will no longer apply.
        :param pulumi.Input[_builtins.str] retain_first_backup: Specifies whether to retain the first backup in the current month. Possible
               values are Y or N.
        :param pulumi.Input[_builtins.str] start_time: Specifies the start time(UTC) of the backup job. The value is in the HH:mm format.
               You need to set the execution time on a full hour. You can set multiple execution times, and use commas (,) to
               separate one time from another.
        :param pulumi.Input[_builtins.str] status: Specifies the backup policy status. Possible values are ON or OFF. Defaults to ON.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupPolicyTagArgs', 'BackupPolicyTagArgsDict']]]] tags: Represents the list of tags to be configured for the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_frequencies: Specifies on which days of each week backup jobs are executed. The value can be
               one or more of the following: SUN, MON, TUE, WED, THU, FRI, SAT. Either this field or `frequency` must be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupPolicyState.__new__(_BackupPolicyState)

        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_resource_count"] = policy_resource_count
        __props__.__dict__["region"] = region
        __props__.__dict__["rentention_day"] = rentention_day
        __props__.__dict__["rentention_num"] = rentention_num
        __props__.__dict__["resources"] = resources
        __props__.__dict__["retain_first_backup"] = retain_first_backup
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["week_frequencies"] = week_frequencies
        return BackupPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the backup interval. The value is in the range of `1` to `14` days.
        Either this field or `week_frequency` must be specified.
        """
        return pulumi.get(self, "frequency")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy name. The value is a string of 1 to 64 characters that can contain
        letters, digits, underscores (_), and hyphens (-). It cannot start with **default**.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyResourceCount")
    def policy_resource_count(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of volumes associated with the backup policy.
        """
        return pulumi.get(self, "policy_resource_count")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the VBS backup policy resource. If omitted, the
        provider-level region will be used. Changing this creates a new VBS Backup Policy resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rententionDay")
    def rentention_day(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies days of retained backups. Minimum value is `2`. Either this field
        or `rentention_num` must be specified.
        """
        return pulumi.get(self, "rentention_day")

    @_builtins.property
    @pulumi.getter(name="rententionNum")
    def rentention_num(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies number of retained backups. Minimum value is `2`. Either this field
        or `rentention_day` must be specified.
        """
        return pulumi.get(self, "rentention_num")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies one or more volumes associated with the backup policy. Any previously
        associated backup policy will no longer apply.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="retainFirstBackup")
    def retain_first_backup(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether to retain the first backup in the current month. Possible
        values are Y or N.
        """
        return pulumi.get(self, "retain_first_backup")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the start time(UTC) of the backup job. The value is in the HH:mm format.
        You need to set the execution time on a full hour. You can set multiple execution times, and use commas (,) to
        separate one time from another.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the backup policy status. Possible values are ON or OFF. Defaults to ON.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.BackupPolicyTag']]]:
        """
        Represents the list of tags to be configured for the backup policy.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="weekFrequencies")
    def week_frequencies(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies on which days of each week backup jobs are executed. The value can be
        one or more of the following: SUN, MON, TUE, WED, THU, FRI, SAT. Either this field or `frequency` must be specified.
        """
        return pulumi.get(self, "week_frequencies")

