# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBackupPolicyV2Result',
    'AwaitableGetBackupPolicyV2Result',
    'get_backup_policy_v2',
    'get_backup_policy_v2_output',
]

@pulumi.output_type
class GetBackupPolicyV2Result:
    """
    A collection of values returned by getBackupPolicyV2.
    """
    def __init__(__self__, filter_tags=None, frequency=None, id=None, name=None, policy_resource_count=None, region=None, remain_first_backup=None, rentention_num=None, start_time=None, status=None, tags=None):
        if filter_tags and not isinstance(filter_tags, list):
            raise TypeError("Expected argument 'filter_tags' to be a list")
        pulumi.set(__self__, "filter_tags", filter_tags)
        if frequency and not isinstance(frequency, int):
            raise TypeError("Expected argument 'frequency' to be a int")
        pulumi.set(__self__, "frequency", frequency)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_resource_count and not isinstance(policy_resource_count, int):
            raise TypeError("Expected argument 'policy_resource_count' to be a int")
        pulumi.set(__self__, "policy_resource_count", policy_resource_count)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if remain_first_backup and not isinstance(remain_first_backup, str):
            raise TypeError("Expected argument 'remain_first_backup' to be a str")
        pulumi.set(__self__, "remain_first_backup", remain_first_backup)
        if rentention_num and not isinstance(rentention_num, int):
            raise TypeError("Expected argument 'rentention_num' to be a int")
        pulumi.set(__self__, "rentention_num", rentention_num)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="filterTags")
    def filter_tags(self) -> Optional[Sequence['outputs.GetBackupPolicyV2FilterTagResult']]:
        return pulumi.get(self, "filter_tags")

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> _builtins.int:
        return pulumi.get(self, "frequency")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyResourceCount")
    def policy_resource_count(self) -> _builtins.int:
        return pulumi.get(self, "policy_resource_count")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="remainFirstBackup")
    def remain_first_backup(self) -> _builtins.str:
        return pulumi.get(self, "remain_first_backup")

    @_builtins.property
    @pulumi.getter(name="rententionNum")
    def rentention_num(self) -> _builtins.int:
        return pulumi.get(self, "rentention_num")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetBackupPolicyV2TagResult']:
        return pulumi.get(self, "tags")


class AwaitableGetBackupPolicyV2Result(GetBackupPolicyV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupPolicyV2Result(
            filter_tags=self.filter_tags,
            frequency=self.frequency,
            id=self.id,
            name=self.name,
            policy_resource_count=self.policy_resource_count,
            region=self.region,
            remain_first_backup=self.remain_first_backup,
            rentention_num=self.rentention_num,
            start_time=self.start_time,
            status=self.status,
            tags=self.tags)


def get_backup_policy_v2(filter_tags: Optional[Sequence[Union['GetBackupPolicyV2FilterTagArgs', 'GetBackupPolicyV2FilterTagArgsDict']]] = None,
                         id: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         policy_resource_count: Optional[_builtins.int] = None,
                         region: Optional[_builtins.str] = None,
                         status: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupPolicyV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filterTags'] = filter_tags
    __args__['id'] = id
    __args__['name'] = name
    __args__['policyResourceCount'] = policy_resource_count
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:vbs/getBackupPolicyV2:getBackupPolicyV2', __args__, opts=opts, typ=GetBackupPolicyV2Result).value

    return AwaitableGetBackupPolicyV2Result(
        filter_tags=pulumi.get(__ret__, 'filter_tags'),
        frequency=pulumi.get(__ret__, 'frequency'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policy_resource_count=pulumi.get(__ret__, 'policy_resource_count'),
        region=pulumi.get(__ret__, 'region'),
        remain_first_backup=pulumi.get(__ret__, 'remain_first_backup'),
        rentention_num=pulumi.get(__ret__, 'rentention_num'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))
def get_backup_policy_v2_output(filter_tags: Optional[pulumi.Input[Optional[Sequence[Union['GetBackupPolicyV2FilterTagArgs', 'GetBackupPolicyV2FilterTagArgsDict']]]]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                policy_resource_count: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupPolicyV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filterTags'] = filter_tags
    __args__['id'] = id
    __args__['name'] = name
    __args__['policyResourceCount'] = policy_resource_count
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:vbs/getBackupPolicyV2:getBackupPolicyV2', __args__, opts=opts, typ=GetBackupPolicyV2Result)
    return __ret__.apply(lambda __response__: GetBackupPolicyV2Result(
        filter_tags=pulumi.get(__response__, 'filter_tags'),
        frequency=pulumi.get(__response__, 'frequency'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        policy_resource_count=pulumi.get(__response__, 'policy_resource_count'),
        region=pulumi.get(__response__, 'region'),
        remain_first_backup=pulumi.get(__response__, 'remain_first_backup'),
        rentention_num=pulumi.get(__response__, 'rentention_num'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags')))
