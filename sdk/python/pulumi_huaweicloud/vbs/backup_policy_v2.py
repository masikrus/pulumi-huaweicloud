# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupPolicyV2Args', 'BackupPolicyV2']

@pulumi.input_type
class BackupPolicyV2Args:
    def __init__(__self__, *,
                 retain_first_backup: pulumi.Input[_builtins.str],
                 start_time: pulumi.Input[_builtins.str],
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rentention_day: Optional[pulumi.Input[_builtins.int]] = None,
                 rentention_num: Optional[pulumi.Input[_builtins.int]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyV2TagArgs']]]] = None,
                 week_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a BackupPolicyV2 resource.
        """
        pulumi.set(__self__, "retain_first_backup", retain_first_backup)
        pulumi.set(__self__, "start_time", start_time)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rentention_day is not None:
            pulumi.set(__self__, "rentention_day", rentention_day)
        if rentention_num is not None:
            pulumi.set(__self__, "rentention_num", rentention_num)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if week_frequencies is not None:
            pulumi.set(__self__, "week_frequencies", week_frequencies)

    @_builtins.property
    @pulumi.getter(name="retainFirstBackup")
    def retain_first_backup(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "retain_first_backup")

    @retain_first_backup.setter
    def retain_first_backup(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "retain_first_backup", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "frequency", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rententionDay")
    def rentention_day(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "rentention_day")

    @rentention_day.setter
    def rentention_day(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rentention_day", value)

    @_builtins.property
    @pulumi.getter(name="rententionNum")
    def rentention_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "rentention_num")

    @rentention_num.setter
    def rentention_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rentention_num", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyV2TagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyV2TagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="weekFrequencies")
    def week_frequencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "week_frequencies")

    @week_frequencies.setter
    def week_frequencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "week_frequencies", value)


@pulumi.input_type
class _BackupPolicyV2State:
    def __init__(__self__, *,
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_resource_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rentention_day: Optional[pulumi.Input[_builtins.int]] = None,
                 rentention_num: Optional[pulumi.Input[_builtins.int]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 retain_first_backup: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyV2TagArgs']]]] = None,
                 week_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering BackupPolicyV2 resources.
        """
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_resource_count is not None:
            pulumi.set(__self__, "policy_resource_count", policy_resource_count)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rentention_day is not None:
            pulumi.set(__self__, "rentention_day", rentention_day)
        if rentention_num is not None:
            pulumi.set(__self__, "rentention_num", rentention_num)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if retain_first_backup is not None:
            pulumi.set(__self__, "retain_first_backup", retain_first_backup)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if week_frequencies is not None:
            pulumi.set(__self__, "week_frequencies", week_frequencies)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "frequency", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="policyResourceCount")
    def policy_resource_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "policy_resource_count")

    @policy_resource_count.setter
    def policy_resource_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "policy_resource_count", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rententionDay")
    def rentention_day(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "rentention_day")

    @rentention_day.setter
    def rentention_day(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rentention_day", value)

    @_builtins.property
    @pulumi.getter(name="rententionNum")
    def rentention_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "rentention_num")

    @rentention_num.setter
    def rentention_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rentention_num", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter(name="retainFirstBackup")
    def retain_first_backup(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "retain_first_backup")

    @retain_first_backup.setter
    def retain_first_backup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retain_first_backup", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyV2TagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupPolicyV2TagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="weekFrequencies")
    def week_frequencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "week_frequencies")

    @week_frequencies.setter
    def week_frequencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "week_frequencies", value)


@pulumi.type_token("huaweicloud:vbs/backupPolicyV2:BackupPolicyV2")
class BackupPolicyV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rentention_day: Optional[pulumi.Input[_builtins.int]] = None,
                 rentention_num: Optional[pulumi.Input[_builtins.int]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 retain_first_backup: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupPolicyV2TagArgs', 'BackupPolicyV2TagArgsDict']]]]] = None,
                 week_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a BackupPolicyV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupPolicyV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupPolicyV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupPolicyV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupPolicyV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 frequency: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rentention_day: Optional[pulumi.Input[_builtins.int]] = None,
                 rentention_num: Optional[pulumi.Input[_builtins.int]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 retain_first_backup: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupPolicyV2TagArgs', 'BackupPolicyV2TagArgsDict']]]]] = None,
                 week_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupPolicyV2Args.__new__(BackupPolicyV2Args)

            __props__.__dict__["frequency"] = frequency
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["rentention_day"] = rentention_day
            __props__.__dict__["rentention_num"] = rentention_num
            __props__.__dict__["resources"] = resources
            if retain_first_backup is None and not opts.urn:
                raise TypeError("Missing required property 'retain_first_backup'")
            __props__.__dict__["retain_first_backup"] = retain_first_backup
            if start_time is None and not opts.urn:
                raise TypeError("Missing required property 'start_time'")
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["week_frequencies"] = week_frequencies
            __props__.__dict__["policy_resource_count"] = None
        super(BackupPolicyV2, __self__).__init__(
            'huaweicloud:vbs/backupPolicyV2:BackupPolicyV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            frequency: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policy_resource_count: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rentention_day: Optional[pulumi.Input[_builtins.int]] = None,
            rentention_num: Optional[pulumi.Input[_builtins.int]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            retain_first_backup: Optional[pulumi.Input[_builtins.str]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupPolicyV2TagArgs', 'BackupPolicyV2TagArgsDict']]]]] = None,
            week_frequencies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'BackupPolicyV2':
        """
        Get an existing BackupPolicyV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupPolicyV2State.__new__(_BackupPolicyV2State)

        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_resource_count"] = policy_resource_count
        __props__.__dict__["region"] = region
        __props__.__dict__["rentention_day"] = rentention_day
        __props__.__dict__["rentention_num"] = rentention_num
        __props__.__dict__["resources"] = resources
        __props__.__dict__["retain_first_backup"] = retain_first_backup
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["week_frequencies"] = week_frequencies
        return BackupPolicyV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "frequency")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyResourceCount")
    def policy_resource_count(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "policy_resource_count")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rententionDay")
    def rentention_day(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "rentention_day")

    @_builtins.property
    @pulumi.getter(name="rententionNum")
    def rentention_num(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "rentention_num")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="retainFirstBackup")
    def retain_first_backup(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "retain_first_backup")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.BackupPolicyV2Tag']]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="weekFrequencies")
    def week_frequencies(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "week_frequencies")

