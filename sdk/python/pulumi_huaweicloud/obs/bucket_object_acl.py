# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BucketObjectAclArgs', 'BucketObjectAcl']

@pulumi.input_type
class BucketObjectAclArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[_builtins.str],
                 key: pulumi.Input[_builtins.str],
                 account_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketObjectAclAccountPermissionArgs']]]] = None,
                 public_permission: Optional[pulumi.Input['BucketObjectAclPublicPermissionArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BucketObjectAcl resource.
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the bucket which the object belongs to.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key: Specifies the name of the object to which to set the acl.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['BucketObjectAclAccountPermissionArgs']]] account_permissions: Specifies the object account permissions.
               The account_permission_struct structure is documented below.
               
               <a name="OBSBucketObjectAcl_permission_struct"></a>
               The `permission_struct` block supports:
        :param pulumi.Input['BucketObjectAclPublicPermissionArgs'] public_permission: Specifies the object public permission.
               The permission_struct structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)
        if account_permissions is not None:
            pulumi.set(__self__, "account_permissions", account_permissions)
        if public_permission is not None:
            pulumi.set(__self__, "public_permission", public_permission)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the bucket which the object belongs to.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the object to which to set the acl.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter(name="accountPermissions")
    def account_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketObjectAclAccountPermissionArgs']]]]:
        """
        Specifies the object account permissions.
        The account_permission_struct structure is documented below.

        <a name="OBSBucketObjectAcl_permission_struct"></a>
        The `permission_struct` block supports:
        """
        return pulumi.get(self, "account_permissions")

    @account_permissions.setter
    def account_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketObjectAclAccountPermissionArgs']]]]):
        pulumi.set(self, "account_permissions", value)

    @_builtins.property
    @pulumi.getter(name="publicPermission")
    def public_permission(self) -> Optional[pulumi.Input['BucketObjectAclPublicPermissionArgs']]:
        """
        Specifies the object public permission.
        The permission_struct structure is documented below.
        """
        return pulumi.get(self, "public_permission")

    @public_permission.setter
    def public_permission(self, value: Optional[pulumi.Input['BucketObjectAclPublicPermissionArgs']]):
        pulumi.set(self, "public_permission", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _BucketObjectAclState:
    def __init__(__self__, *,
                 account_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketObjectAclAccountPermissionArgs']]]] = None,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketObjectAclOwnerPermissionArgs']]]] = None,
                 public_permission: Optional[pulumi.Input['BucketObjectAclPublicPermissionArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BucketObjectAcl resources.
        :param pulumi.Input[Sequence[pulumi.Input['BucketObjectAclAccountPermissionArgs']]] account_permissions: Specifies the object account permissions.
               The account_permission_struct structure is documented below.
               
               <a name="OBSBucketObjectAcl_permission_struct"></a>
               The `permission_struct` block supports:
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the bucket which the object belongs to.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key: Specifies the name of the object to which to set the acl.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['BucketObjectAclOwnerPermissionArgs']]] owner_permissions: The object owner permission information.
               The owner_permission_struct structure is documented below.
        :param pulumi.Input['BucketObjectAclPublicPermissionArgs'] public_permission: Specifies the object public permission.
               The permission_struct structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               
               Changing this parameter will create a new resource.
        """
        if account_permissions is not None:
            pulumi.set(__self__, "account_permissions", account_permissions)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if owner_permissions is not None:
            pulumi.set(__self__, "owner_permissions", owner_permissions)
        if public_permission is not None:
            pulumi.set(__self__, "public_permission", public_permission)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="accountPermissions")
    def account_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketObjectAclAccountPermissionArgs']]]]:
        """
        Specifies the object account permissions.
        The account_permission_struct structure is documented below.

        <a name="OBSBucketObjectAcl_permission_struct"></a>
        The `permission_struct` block supports:
        """
        return pulumi.get(self, "account_permissions")

    @account_permissions.setter
    def account_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketObjectAclAccountPermissionArgs']]]]):
        pulumi.set(self, "account_permissions", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the bucket which the object belongs to.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the object to which to set the acl.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter(name="ownerPermissions")
    def owner_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketObjectAclOwnerPermissionArgs']]]]:
        """
        The object owner permission information.
        The owner_permission_struct structure is documented below.
        """
        return pulumi.get(self, "owner_permissions")

    @owner_permissions.setter
    def owner_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketObjectAclOwnerPermissionArgs']]]]):
        pulumi.set(self, "owner_permissions", value)

    @_builtins.property
    @pulumi.getter(name="publicPermission")
    def public_permission(self) -> Optional[pulumi.Input['BucketObjectAclPublicPermissionArgs']]:
        """
        Specifies the object public permission.
        The permission_struct structure is documented below.
        """
        return pulumi.get(self, "public_permission")

    @public_permission.setter
    def public_permission(self, value: Optional[pulumi.Input['BucketObjectAclPublicPermissionArgs']]):
        pulumi.set(self, "public_permission", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Obs/bucketObjectAcl:BucketObjectAcl")
class BucketObjectAcl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BucketObjectAclAccountPermissionArgs', 'BucketObjectAclAccountPermissionArgsDict']]]]] = None,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 public_permission: Optional[pulumi.Input[Union['BucketObjectAclPublicPermissionArgs', 'BucketObjectAclPublicPermissionArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an OBS bucket object acl resource within HuaweiCloud.

        > **NOTE:** When creating or updating the OBS bucket object acl, the original object acl will be overwritten. When
        deleting the OBS bucket object acl, only the owner permissions will be retained, and the other permissions will be
        removed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        bucket = config.require_object("bucket")
        key = config.require_object("key")
        account1 = config.require_object("account1")
        account2 = config.require_object("account2")
        test = huaweicloud.obs.BucketObjectAcl("test",
            bucket=bucket,
            key=key,
            account_permissions=[
                {
                    "access_to_objects": ["READ"],
                    "access_to_acls": [
                        "READ_ACP",
                        "WRITE_ACP",
                    ],
                    "account_id": account1,
                },
                {
                    "access_to_objects": ["READ"],
                    "access_to_acls": ["READ_ACP"],
                    "account_id": account2,
                },
            ],
            public_permission={
                "access_to_acls": [
                    "READ_ACP",
                    "WRITE_ACP",
                ],
            })
        ```

        ## Import

        The obs bucket object acl can be imported using `bucket` and `key`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Obs/bucketObjectAcl:BucketObjectAcl test <bucket>/<key>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BucketObjectAclAccountPermissionArgs', 'BucketObjectAclAccountPermissionArgsDict']]]] account_permissions: Specifies the object account permissions.
               The account_permission_struct structure is documented below.
               
               <a name="OBSBucketObjectAcl_permission_struct"></a>
               The `permission_struct` block supports:
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the bucket which the object belongs to.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key: Specifies the name of the object to which to set the acl.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['BucketObjectAclPublicPermissionArgs', 'BucketObjectAclPublicPermissionArgsDict']] public_permission: Specifies the object public permission.
               The permission_struct structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketObjectAclArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an OBS bucket object acl resource within HuaweiCloud.

        > **NOTE:** When creating or updating the OBS bucket object acl, the original object acl will be overwritten. When
        deleting the OBS bucket object acl, only the owner permissions will be retained, and the other permissions will be
        removed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        bucket = config.require_object("bucket")
        key = config.require_object("key")
        account1 = config.require_object("account1")
        account2 = config.require_object("account2")
        test = huaweicloud.obs.BucketObjectAcl("test",
            bucket=bucket,
            key=key,
            account_permissions=[
                {
                    "access_to_objects": ["READ"],
                    "access_to_acls": [
                        "READ_ACP",
                        "WRITE_ACP",
                    ],
                    "account_id": account1,
                },
                {
                    "access_to_objects": ["READ"],
                    "access_to_acls": ["READ_ACP"],
                    "account_id": account2,
                },
            ],
            public_permission={
                "access_to_acls": [
                    "READ_ACP",
                    "WRITE_ACP",
                ],
            })
        ```

        ## Import

        The obs bucket object acl can be imported using `bucket` and `key`, separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Obs/bucketObjectAcl:BucketObjectAcl test <bucket>/<key>
        ```

        :param str resource_name: The name of the resource.
        :param BucketObjectAclArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketObjectAclArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BucketObjectAclAccountPermissionArgs', 'BucketObjectAclAccountPermissionArgsDict']]]]] = None,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 public_permission: Optional[pulumi.Input[Union['BucketObjectAclPublicPermissionArgs', 'BucketObjectAclPublicPermissionArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketObjectAclArgs.__new__(BucketObjectAclArgs)

            __props__.__dict__["account_permissions"] = account_permissions
            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["public_permission"] = public_permission
            __props__.__dict__["region"] = region
            __props__.__dict__["owner_permissions"] = None
        super(BucketObjectAcl, __self__).__init__(
            'huaweicloud:Obs/bucketObjectAcl:BucketObjectAcl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BucketObjectAclAccountPermissionArgs', 'BucketObjectAclAccountPermissionArgsDict']]]]] = None,
            bucket: Optional[pulumi.Input[_builtins.str]] = None,
            key: Optional[pulumi.Input[_builtins.str]] = None,
            owner_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BucketObjectAclOwnerPermissionArgs', 'BucketObjectAclOwnerPermissionArgsDict']]]]] = None,
            public_permission: Optional[pulumi.Input[Union['BucketObjectAclPublicPermissionArgs', 'BucketObjectAclPublicPermissionArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'BucketObjectAcl':
        """
        Get an existing BucketObjectAcl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BucketObjectAclAccountPermissionArgs', 'BucketObjectAclAccountPermissionArgsDict']]]] account_permissions: Specifies the object account permissions.
               The account_permission_struct structure is documented below.
               
               <a name="OBSBucketObjectAcl_permission_struct"></a>
               The `permission_struct` block supports:
        :param pulumi.Input[_builtins.str] bucket: Specifies the name of the bucket which the object belongs to.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] key: Specifies the name of the object to which to set the acl.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BucketObjectAclOwnerPermissionArgs', 'BucketObjectAclOwnerPermissionArgsDict']]]] owner_permissions: The object owner permission information.
               The owner_permission_struct structure is documented below.
        :param pulumi.Input[Union['BucketObjectAclPublicPermissionArgs', 'BucketObjectAclPublicPermissionArgsDict']] public_permission: Specifies the object public permission.
               The permission_struct structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketObjectAclState.__new__(_BucketObjectAclState)

        __props__.__dict__["account_permissions"] = account_permissions
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["key"] = key
        __props__.__dict__["owner_permissions"] = owner_permissions
        __props__.__dict__["public_permission"] = public_permission
        __props__.__dict__["region"] = region
        return BucketObjectAcl(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountPermissions")
    def account_permissions(self) -> pulumi.Output[Optional[Sequence['outputs.BucketObjectAclAccountPermission']]]:
        """
        Specifies the object account permissions.
        The account_permission_struct structure is documented below.

        <a name="OBSBucketObjectAcl_permission_struct"></a>
        The `permission_struct` block supports:
        """
        return pulumi.get(self, "account_permissions")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the bucket which the object belongs to.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the object to which to set the acl.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="ownerPermissions")
    def owner_permissions(self) -> pulumi.Output[Sequence['outputs.BucketObjectAclOwnerPermission']]:
        """
        The object owner permission information.
        The owner_permission_struct structure is documented below.
        """
        return pulumi.get(self, "owner_permissions")

    @_builtins.property
    @pulumi.getter(name="publicPermission")
    def public_permission(self) -> pulumi.Output[Optional['outputs.BucketObjectAclPublicPermission']]:
        """
        Specifies the object public permission.
        The permission_struct structure is documented below.
        """
        return pulumi.get(self, "public_permission")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

