# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetBackupMetadataResult',
    'AwaitableGetBackupMetadataResult',
    'get_backup_metadata',
    'get_backup_metadata_output',
]

@pulumi.output_type
class GetBackupMetadataResult:
    """
    A collection of values returned by getBackupMetadata.
    """
    def __init__(__self__, backup_id=None, backups=None, flavor=None, floatingips=None, id=None, interface=None, ports=None, region=None, server=None, volumes=None):
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if backups and not isinstance(backups, str):
            raise TypeError("Expected argument 'backups' to be a str")
        pulumi.set(__self__, "backups", backups)
        if flavor and not isinstance(flavor, str):
            raise TypeError("Expected argument 'flavor' to be a str")
        pulumi.set(__self__, "flavor", flavor)
        if floatingips and not isinstance(floatingips, list):
            raise TypeError("Expected argument 'floatingips' to be a list")
        pulumi.set(__self__, "floatingips", floatingips)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if ports and not isinstance(ports, list):
            raise TypeError("Expected argument 'ports' to be a list")
        pulumi.set(__self__, "ports", ports)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server and not isinstance(server, str):
            raise TypeError("Expected argument 'server' to be a str")
        pulumi.set(__self__, "server", server)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        """
        The backup id.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter
    def backups(self) -> _builtins.str:
        """
        The server backup informations.
        """
        return pulumi.get(self, "backups")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        The server specifications.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def floatingips(self) -> Sequence[_builtins.str]:
        """
        The server floating IP address information.
        """
        return pulumi.get(self, "floatingips")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def interface(self) -> _builtins.str:
        """
        The server API information.
        """
        return pulumi.get(self, "interface")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence[_builtins.str]:
        """
        The server port information.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        """
        The server information .
        """
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence[_builtins.str]:
        """
        The server disk information.
        """
        return pulumi.get(self, "volumes")


class AwaitableGetBackupMetadataResult(GetBackupMetadataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupMetadataResult(
            backup_id=self.backup_id,
            backups=self.backups,
            flavor=self.flavor,
            floatingips=self.floatingips,
            id=self.id,
            interface=self.interface,
            ports=self.ports,
            region=self.region,
            server=self.server,
            volumes=self.volumes)


def get_backup_metadata(backup_id: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupMetadataResult:
    """
    Use this data source to get backup metadata from CBR service within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    backup_id = config.require_object("backupId")
    test = huaweicloud.Cbr.get_backup_metadata(backup_id=backup_id)
    ```


    :param _builtins.str backup_id: Specifies backup id.
    :param _builtins.str region: Specifies the region in which to query the datasource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cbr/getBackupMetadata:getBackupMetadata', __args__, opts=opts, typ=GetBackupMetadataResult).value

    return AwaitableGetBackupMetadataResult(
        backup_id=pulumi.get(__ret__, 'backup_id'),
        backups=pulumi.get(__ret__, 'backups'),
        flavor=pulumi.get(__ret__, 'flavor'),
        floatingips=pulumi.get(__ret__, 'floatingips'),
        id=pulumi.get(__ret__, 'id'),
        interface=pulumi.get(__ret__, 'interface'),
        ports=pulumi.get(__ret__, 'ports'),
        region=pulumi.get(__ret__, 'region'),
        server=pulumi.get(__ret__, 'server'),
        volumes=pulumi.get(__ret__, 'volumes'))
def get_backup_metadata_output(backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupMetadataResult]:
    """
    Use this data source to get backup metadata from CBR service within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    backup_id = config.require_object("backupId")
    test = huaweicloud.Cbr.get_backup_metadata(backup_id=backup_id)
    ```


    :param _builtins.str backup_id: Specifies backup id.
    :param _builtins.str region: Specifies the region in which to query the datasource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cbr/getBackupMetadata:getBackupMetadata', __args__, opts=opts, typ=GetBackupMetadataResult)
    return __ret__.apply(lambda __response__: GetBackupMetadataResult(
        backup_id=pulumi.get(__response__, 'backup_id'),
        backups=pulumi.get(__response__, 'backups'),
        flavor=pulumi.get(__response__, 'flavor'),
        floatingips=pulumi.get(__response__, 'floatingips'),
        id=pulumi.get(__response__, 'id'),
        interface=pulumi.get(__response__, 'interface'),
        ports=pulumi.get(__response__, 'ports'),
        region=pulumi.get(__response__, 'region'),
        server=pulumi.get(__response__, 'server'),
        volumes=pulumi.get(__response__, 'volumes')))
