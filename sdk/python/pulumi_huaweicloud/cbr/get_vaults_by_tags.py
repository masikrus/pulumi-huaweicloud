# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVaultsByTagsResult',
    'AwaitableGetVaultsByTagsResult',
    'get_vaults_by_tags',
    'get_vaults_by_tags_output',
]

@pulumi.output_type
class GetVaultsByTagsResult:
    """
    A collection of values returned by getVaultsByTags.
    """
    def __init__(__self__, action=None, cloud_type=None, enterprise_project_id=None, id=None, matches=None, not_tags=None, not_tags_anies=None, object_type=None, region=None, resources=None, sys_tags=None, tags=None, tags_anies=None, total_count=None, without_any_tag=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if cloud_type and not isinstance(cloud_type, str):
            raise TypeError("Expected argument 'cloud_type' to be a str")
        pulumi.set(__self__, "cloud_type", cloud_type)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if not_tags and not isinstance(not_tags, list):
            raise TypeError("Expected argument 'not_tags' to be a list")
        pulumi.set(__self__, "not_tags", not_tags)
        if not_tags_anies and not isinstance(not_tags_anies, list):
            raise TypeError("Expected argument 'not_tags_anies' to be a list")
        pulumi.set(__self__, "not_tags_anies", not_tags_anies)
        if object_type and not isinstance(object_type, str):
            raise TypeError("Expected argument 'object_type' to be a str")
        pulumi.set(__self__, "object_type", object_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if sys_tags and not isinstance(sys_tags, list):
            raise TypeError("Expected argument 'sys_tags' to be a list")
        pulumi.set(__self__, "sys_tags", sys_tags)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tags_anies and not isinstance(tags_anies, list):
            raise TypeError("Expected argument 'tags_anies' to be a list")
        pulumi.set(__self__, "tags_anies", tags_anies)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if without_any_tag and not isinstance(without_any_tag, bool):
            raise TypeError("Expected argument 'without_any_tag' to be a bool")
        pulumi.set(__self__, "without_any_tag", without_any_tag)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> Optional[_builtins.str]:
        """
        The cloud type. Possible values are:
        + **public**: public cloud.
        + **hybrid**: hybrid cloud.
        """
        return pulumi.get(self, "cloud_type")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetVaultsByTagsMatchResult']]:
        return pulumi.get(self, "matches")

    @_builtins.property
    @pulumi.getter(name="notTags")
    def not_tags(self) -> Optional[Sequence['outputs.GetVaultsByTagsNotTagResult']]:
        return pulumi.get(self, "not_tags")

    @_builtins.property
    @pulumi.getter(name="notTagsAnies")
    def not_tags_anies(self) -> Optional[Sequence['outputs.GetVaultsByTagsNotTagsAnyResult']]:
        return pulumi.get(self, "not_tags_anies")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[_builtins.str]:
        """
        The object type. Possible values are: **server**, **disk**, **turbo**, **workspace**,
        **vmware**, **rds** and **file**.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVaultsByTagsResourceResult']:
        """
        The attributes of all vault resources.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="sysTags")
    def sys_tags(self) -> Optional[Sequence['outputs.GetVaultsByTagsSysTagResult']]:
        """
        The system tags. Only users with the op_service permission can obtain this field.
        Currently, only resource_tag is included. key: **_sys_enterprise_project_id** value: enterprise project ID.
        Value `0` indicates the default enterprise project. This field is not returned in the non-op_service scenario.
        The sys_tags structure is documented below.
        """
        return pulumi.get(self, "sys_tags")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetVaultsByTagsTagResult']]:
        """
        The tags to filter automatically associated resources by tag.
        Minimum length: `0` characters. Maximum length: `5` characters.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAnies")
    def tags_anies(self) -> Optional[Sequence['outputs.GetVaultsByTagsTagsAnyResult']]:
        return pulumi.get(self, "tags_anies")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.int:
        """
        The total number of matched resources.
        """
        return pulumi.get(self, "total_count")

    @_builtins.property
    @pulumi.getter(name="withoutAnyTag")
    def without_any_tag(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "without_any_tag")


class AwaitableGetVaultsByTagsResult(GetVaultsByTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVaultsByTagsResult(
            action=self.action,
            cloud_type=self.cloud_type,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            matches=self.matches,
            not_tags=self.not_tags,
            not_tags_anies=self.not_tags_anies,
            object_type=self.object_type,
            region=self.region,
            resources=self.resources,
            sys_tags=self.sys_tags,
            tags=self.tags,
            tags_anies=self.tags_anies,
            total_count=self.total_count,
            without_any_tag=self.without_any_tag)


def get_vaults_by_tags(action: Optional[_builtins.str] = None,
                       cloud_type: Optional[_builtins.str] = None,
                       enterprise_project_id: Optional[_builtins.str] = None,
                       matches: Optional[Sequence[Union['GetVaultsByTagsMatchArgs', 'GetVaultsByTagsMatchArgsDict']]] = None,
                       not_tags: Optional[Sequence[Union['GetVaultsByTagsNotTagArgs', 'GetVaultsByTagsNotTagArgsDict']]] = None,
                       not_tags_anies: Optional[Sequence[Union['GetVaultsByTagsNotTagsAnyArgs', 'GetVaultsByTagsNotTagsAnyArgsDict']]] = None,
                       object_type: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       sys_tags: Optional[Sequence[Union['GetVaultsByTagsSysTagArgs', 'GetVaultsByTagsSysTagArgsDict']]] = None,
                       tags: Optional[Sequence[Union['GetVaultsByTagsTagArgs', 'GetVaultsByTagsTagArgsDict']]] = None,
                       tags_anies: Optional[Sequence[Union['GetVaultsByTagsTagsAnyArgs', 'GetVaultsByTagsTagsAnyArgsDict']]] = None,
                       without_any_tag: Optional[_builtins.bool] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVaultsByTagsResult:
    """
    Use this data source to get CBR vaults filtered by tags within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cbr.get_vaults_by_tags(action="filter")
    ```


    :param _builtins.str action: Specifies the action name. Possible values are **count** and **filter**.
           + **count**: querying count of data filtered by tags.
           + **filter**: querying details of data filtered by tags.
    :param _builtins.str cloud_type: Specifies cloud type of the instances. Possible values are:
           + **public**: public cloud.
           + **hybrid**: hybrid cloud.
    :param _builtins.str enterprise_project_id: Specifies the ID of enterprise project.
    :param Sequence[Union['GetVaultsByTagsMatchArgs', 'GetVaultsByTagsMatchArgsDict']] matches: Specifies the matches supported by resources. Keys in this list must be unique.
           Only one key is supported currently. Multiple-key support will be available later.
           The matches structure is documented below.
    :param Sequence[Union['GetVaultsByTagsNotTagArgs', 'GetVaultsByTagsNotTagArgsDict']] not_tags: Specifies the list of excluded tags. Backups without these tags will be filtered.
           The not_tags structure is documented below.
    :param Sequence[Union['GetVaultsByTagsNotTagsAnyArgs', 'GetVaultsByTagsNotTagsAnyArgsDict']] not_tags_anies: Specifies the list of tags. Backups without any tags in this list will be filtered.
           The not_tags_any structure is documented below.
           
           > For arguments above, include `tags`, `tags_any`, `not_tags`, `not_tags_any` have limits as follows:
           <br/>1. This list cannot be an empty list.
           <br/>2. The list can contain up to `10` keys.
           <br/>3. Keys in this list must be unique.
           <br/>4. If no tag filtering condition is specified, full data is returned.
    :param _builtins.str object_type: Specifies resource type of the instances. Possible values are:
           + **server**: elastic cloud server.
           + **disk**: elastic volume server.
           
           <a name="tags_struct"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetVaultsByTagsSysTagArgs', 'GetVaultsByTagsSysTagArgsDict']] sys_tags: Specifies the system tags.
           The sys_tags structure is documented below.
           
           > The sys_tags has limits as follows:
           <br/>1. Only users with the op_service permission can obtain this field.
           <br/>2. Field `sys_tags` and tag filter conditions (`tags`, `tags_any`, `not_tags`, `not_tags_any`)
           cannot  be used at the same time.
           <br/>3. If no `sys_tags` exists, use other tag APIs for filtering. If no tag filter is specified, full data is returned.
           <br/>4. This list cannot be an empty list.
    :param Sequence[Union['GetVaultsByTagsTagArgs', 'GetVaultsByTagsTagArgsDict']] tags: Specifies the list of included tags. Backups with these tags will be filtered.
           The tags structure is documented below.
    :param Sequence[Union['GetVaultsByTagsTagsAnyArgs', 'GetVaultsByTagsTagsAnyArgsDict']] tags_anies: Specifies the list of tags. Backups with any tags in this list will be filtered.
           The tags_any structure is documented below.
    :param _builtins.bool without_any_tag: Specifies whether ignore tags params.
           If this parameter is set to **true**, all resources without tags are queried.
           In this case, the `tag`, `not_tags`, `tags_any`, and `not_tags_any` fields are ignored.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['cloudType'] = cloud_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['matches'] = matches
    __args__['notTags'] = not_tags
    __args__['notTagsAnies'] = not_tags_anies
    __args__['objectType'] = object_type
    __args__['region'] = region
    __args__['sysTags'] = sys_tags
    __args__['tags'] = tags
    __args__['tagsAnies'] = tags_anies
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cbr/getVaultsByTags:getVaultsByTags', __args__, opts=opts, typ=GetVaultsByTagsResult).value

    return AwaitableGetVaultsByTagsResult(
        action=pulumi.get(__ret__, 'action'),
        cloud_type=pulumi.get(__ret__, 'cloud_type'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        matches=pulumi.get(__ret__, 'matches'),
        not_tags=pulumi.get(__ret__, 'not_tags'),
        not_tags_anies=pulumi.get(__ret__, 'not_tags_anies'),
        object_type=pulumi.get(__ret__, 'object_type'),
        region=pulumi.get(__ret__, 'region'),
        resources=pulumi.get(__ret__, 'resources'),
        sys_tags=pulumi.get(__ret__, 'sys_tags'),
        tags=pulumi.get(__ret__, 'tags'),
        tags_anies=pulumi.get(__ret__, 'tags_anies'),
        total_count=pulumi.get(__ret__, 'total_count'),
        without_any_tag=pulumi.get(__ret__, 'without_any_tag'))
def get_vaults_by_tags_output(action: Optional[pulumi.Input[_builtins.str]] = None,
                              cloud_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              matches: Optional[pulumi.Input[Optional[Sequence[Union['GetVaultsByTagsMatchArgs', 'GetVaultsByTagsMatchArgsDict']]]]] = None,
                              not_tags: Optional[pulumi.Input[Optional[Sequence[Union['GetVaultsByTagsNotTagArgs', 'GetVaultsByTagsNotTagArgsDict']]]]] = None,
                              not_tags_anies: Optional[pulumi.Input[Optional[Sequence[Union['GetVaultsByTagsNotTagsAnyArgs', 'GetVaultsByTagsNotTagsAnyArgsDict']]]]] = None,
                              object_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              sys_tags: Optional[pulumi.Input[Optional[Sequence[Union['GetVaultsByTagsSysTagArgs', 'GetVaultsByTagsSysTagArgsDict']]]]] = None,
                              tags: Optional[pulumi.Input[Optional[Sequence[Union['GetVaultsByTagsTagArgs', 'GetVaultsByTagsTagArgsDict']]]]] = None,
                              tags_anies: Optional[pulumi.Input[Optional[Sequence[Union['GetVaultsByTagsTagsAnyArgs', 'GetVaultsByTagsTagsAnyArgsDict']]]]] = None,
                              without_any_tag: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVaultsByTagsResult]:
    """
    Use this data source to get CBR vaults filtered by tags within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cbr.get_vaults_by_tags(action="filter")
    ```


    :param _builtins.str action: Specifies the action name. Possible values are **count** and **filter**.
           + **count**: querying count of data filtered by tags.
           + **filter**: querying details of data filtered by tags.
    :param _builtins.str cloud_type: Specifies cloud type of the instances. Possible values are:
           + **public**: public cloud.
           + **hybrid**: hybrid cloud.
    :param _builtins.str enterprise_project_id: Specifies the ID of enterprise project.
    :param Sequence[Union['GetVaultsByTagsMatchArgs', 'GetVaultsByTagsMatchArgsDict']] matches: Specifies the matches supported by resources. Keys in this list must be unique.
           Only one key is supported currently. Multiple-key support will be available later.
           The matches structure is documented below.
    :param Sequence[Union['GetVaultsByTagsNotTagArgs', 'GetVaultsByTagsNotTagArgsDict']] not_tags: Specifies the list of excluded tags. Backups without these tags will be filtered.
           The not_tags structure is documented below.
    :param Sequence[Union['GetVaultsByTagsNotTagsAnyArgs', 'GetVaultsByTagsNotTagsAnyArgsDict']] not_tags_anies: Specifies the list of tags. Backups without any tags in this list will be filtered.
           The not_tags_any structure is documented below.
           
           > For arguments above, include `tags`, `tags_any`, `not_tags`, `not_tags_any` have limits as follows:
           <br/>1. This list cannot be an empty list.
           <br/>2. The list can contain up to `10` keys.
           <br/>3. Keys in this list must be unique.
           <br/>4. If no tag filtering condition is specified, full data is returned.
    :param _builtins.str object_type: Specifies resource type of the instances. Possible values are:
           + **server**: elastic cloud server.
           + **disk**: elastic volume server.
           
           <a name="tags_struct"></a>
           The `tags` block supports:
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetVaultsByTagsSysTagArgs', 'GetVaultsByTagsSysTagArgsDict']] sys_tags: Specifies the system tags.
           The sys_tags structure is documented below.
           
           > The sys_tags has limits as follows:
           <br/>1. Only users with the op_service permission can obtain this field.
           <br/>2. Field `sys_tags` and tag filter conditions (`tags`, `tags_any`, `not_tags`, `not_tags_any`)
           cannot  be used at the same time.
           <br/>3. If no `sys_tags` exists, use other tag APIs for filtering. If no tag filter is specified, full data is returned.
           <br/>4. This list cannot be an empty list.
    :param Sequence[Union['GetVaultsByTagsTagArgs', 'GetVaultsByTagsTagArgsDict']] tags: Specifies the list of included tags. Backups with these tags will be filtered.
           The tags structure is documented below.
    :param Sequence[Union['GetVaultsByTagsTagsAnyArgs', 'GetVaultsByTagsTagsAnyArgsDict']] tags_anies: Specifies the list of tags. Backups with any tags in this list will be filtered.
           The tags_any structure is documented below.
    :param _builtins.bool without_any_tag: Specifies whether ignore tags params.
           If this parameter is set to **true**, all resources without tags are queried.
           In this case, the `tag`, `not_tags`, `tags_any`, and `not_tags_any` fields are ignored.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['cloudType'] = cloud_type
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['matches'] = matches
    __args__['notTags'] = not_tags
    __args__['notTagsAnies'] = not_tags_anies
    __args__['objectType'] = object_type
    __args__['region'] = region
    __args__['sysTags'] = sys_tags
    __args__['tags'] = tags
    __args__['tagsAnies'] = tags_anies
    __args__['withoutAnyTag'] = without_any_tag
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cbr/getVaultsByTags:getVaultsByTags', __args__, opts=opts, typ=GetVaultsByTagsResult)
    return __ret__.apply(lambda __response__: GetVaultsByTagsResult(
        action=pulumi.get(__response__, 'action'),
        cloud_type=pulumi.get(__response__, 'cloud_type'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        matches=pulumi.get(__response__, 'matches'),
        not_tags=pulumi.get(__response__, 'not_tags'),
        not_tags_anies=pulumi.get(__response__, 'not_tags_anies'),
        object_type=pulumi.get(__response__, 'object_type'),
        region=pulumi.get(__response__, 'region'),
        resources=pulumi.get(__response__, 'resources'),
        sys_tags=pulumi.get(__response__, 'sys_tags'),
        tags=pulumi.get(__response__, 'tags'),
        tags_anies=pulumi.get(__response__, 'tags_anies'),
        total_count=pulumi.get(__response__, 'total_count'),
        without_any_tag=pulumi.get(__response__, 'without_any_tag')))
