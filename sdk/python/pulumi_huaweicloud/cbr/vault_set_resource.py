# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VaultSetResourceArgs', 'VaultSetResource']

@pulumi.input_type
class VaultSetResourceArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 resource_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 vault_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VaultSetResource resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action to configure backup settings. Valid values:
               + **suspend**: Enable backup for the resources.
               + **unsuspend**: Disable backup for the resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the list of resource IDs for which to configure backup settings.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the CBR vault to configure resource backup settings.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted,
               the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "resource_ids", resource_ids)
        pulumi.set(__self__, "vault_id", vault_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the action to configure backup settings. Valid values:
        + **suspend**: Enable backup for the resources.
        + **unsuspend**: Disable backup for the resources.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the list of resource IDs for which to configure backup settings.
        """
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "resource_ids", value)

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CBR vault to configure resource backup settings.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vault_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource. If omitted,
        the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _VaultSetResourceState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VaultSetResource resources.
        :param pulumi.Input[_builtins.str] action: Specifies the action to configure backup settings. Valid values:
               + **suspend**: Enable backup for the resources.
               + **unsuspend**: Disable backup for the resources.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted,
               the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the list of resource IDs for which to configure backup settings.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the CBR vault to configure resource backup settings.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the action to configure backup settings. Valid values:
        + **suspend**: Enable backup for the resources.
        + **unsuspend**: Disable backup for the resources.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource. If omitted,
        the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of resource IDs for which to configure backup settings.
        """
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_ids", value)

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CBR vault to configure resource backup settings.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vault_id", value)


@pulumi.type_token("huaweicloud:Cbr/vaultSetResource:VaultSetResource")
class VaultSetResource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to configure resource backup settings for a CBR vault within HuaweiCloud.

        > This resource is only a one-time action resource to configure resource backup settings. Deleting this resource will
        not change the backup settings of the resources, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vault_id = config.require_object("vaultId")
        resource_ids = config.require_object("resourceIds")
        action = config.require_object("action")
        test = huaweicloud.cbr.VaultSetResource("test",
            vault_id=vault_id,
            resource_ids=resource_ids,
            action=action)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action to configure backup settings. Valid values:
               + **suspend**: Enable backup for the resources.
               + **unsuspend**: Disable backup for the resources.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted,
               the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the list of resource IDs for which to configure backup settings.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the CBR vault to configure resource backup settings.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VaultSetResourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to configure resource backup settings for a CBR vault within HuaweiCloud.

        > This resource is only a one-time action resource to configure resource backup settings. Deleting this resource will
        not change the backup settings of the resources, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vault_id = config.require_object("vaultId")
        resource_ids = config.require_object("resourceIds")
        action = config.require_object("action")
        test = huaweicloud.cbr.VaultSetResource("test",
            vault_id=vault_id,
            resource_ids=resource_ids,
            action=action)
        ```

        :param str resource_name: The name of the resource.
        :param VaultSetResourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VaultSetResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VaultSetResourceArgs.__new__(VaultSetResourceArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["region"] = region
            if resource_ids is None and not opts.urn:
                raise TypeError("Missing required property 'resource_ids'")
            __props__.__dict__["resource_ids"] = resource_ids
            if vault_id is None and not opts.urn:
                raise TypeError("Missing required property 'vault_id'")
            __props__.__dict__["vault_id"] = vault_id
        super(VaultSetResource, __self__).__init__(
            'huaweicloud:Cbr/vaultSetResource:VaultSetResource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            vault_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VaultSetResource':
        """
        Get an existing VaultSetResource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Specifies the action to configure backup settings. Valid values:
               + **suspend**: Enable backup for the resources.
               + **unsuspend**: Disable backup for the resources.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted,
               the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the list of resource IDs for which to configure backup settings.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the CBR vault to configure resource backup settings.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VaultSetResourceState.__new__(_VaultSetResourceState)

        __props__.__dict__["action"] = action
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_ids"] = resource_ids
        __props__.__dict__["vault_id"] = vault_id
        return VaultSetResource(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the action to configure backup settings. Valid values:
        + **suspend**: Enable backup for the resources.
        + **unsuspend**: Disable backup for the resources.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource. If omitted,
        the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the list of resource IDs for which to configure backup settings.
        """
        return pulumi.get(self, "resource_ids")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the CBR vault to configure resource backup settings.
        """
        return pulumi.get(self, "vault_id")

