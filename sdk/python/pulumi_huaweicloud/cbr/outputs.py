# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'BackupShareMember',
    'ChangeOrderProductInfo',
    'CheckpointBackup',
    'OrganizationPolicyPolicyOperationDefinition',
    'OrganizationPolicyPolicyTrigger',
    'OrganizationPolicyPolicyTriggerProperties',
    'PolicyBackupCycle',
    'PolicyLongTermRetention',
    'ReplicateBackupReplicate',
    'RestoreDetails',
    'RestoreMapping',
    'VaultPolicy',
    'VaultResource',
    'GetAgentChecksAgentStatusResult',
    'GetAgentChecksAgentStatusAttrResult',
    'GetBackupChildrenResult',
    'GetBackupChildrenExtendInfoResult',
    'GetBackupChildrenReplicationRecordResult',
    'GetBackupChildrenReplicationRecordExtraInfoResult',
    'GetBackupExtendInfoResult',
    'GetBackupReplicationRecordResult',
    'GetBackupReplicationRecordExtraInfoResult',
    'GetBackupsBackupResult',
    'GetBackupsBackupExtendInfoResult',
    'GetBackupsBackupExtendInfoOsImagesDataResult',
    'GetBackupsBackupReplicationRecordResult',
    'GetBackupsBackupReplicationRecordExtraInfoResult',
    'GetExternalVaultsVaultResult',
    'GetExternalVaultsVaultBillingResult',
    'GetExternalVaultsVaultBindRuleResult',
    'GetExternalVaultsVaultBindRuleTagResult',
    'GetExternalVaultsVaultResourceResult',
    'GetExternalVaultsVaultResourceExtraInfoResult',
    'GetExternalVaultsVaultTagResult',
    'GetMigrateStatusProjectStatusResult',
    'GetOperationLogsOperationLogResult',
    'GetOperationLogsOperationLogErrorInfoResult',
    'GetOperationLogsOperationLogExtraInfoResult',
    'GetOperationLogsOperationLogExtraInfoBackupResult',
    'GetOperationLogsOperationLogExtraInfoCommonResult',
    'GetOperationLogsOperationLogExtraInfoDeleteResult',
    'GetOperationLogsOperationLogExtraInfoRemoveResourceResult',
    'GetOperationLogsOperationLogExtraInfoRemoveResourceResourceResult',
    'GetOperationLogsOperationLogExtraInfoRemoveResourceResourceExtraInfoResult',
    'GetOperationLogsOperationLogExtraInfoReplicationResult',
    'GetOperationLogsOperationLogExtraInfoResourceResult',
    'GetOperationLogsOperationLogExtraInfoResourceExtraInfoResult',
    'GetOperationLogsOperationLogExtraInfoRestoreResult',
    'GetOperationLogsOperationLogExtraInfoSyncResult',
    'GetOperationLogsOperationLogExtraInfoVaultDeleteResult',
    'GetPoliciesPolicyResult',
    'GetPoliciesPolicyAssociatedVaultResult',
    'GetPoliciesPolicyBackupCycleResult',
    'GetPoliciesPolicyLongTermRetentionResult',
    'GetProtectableInstancesInstanceResult',
    'GetProtectableInstancesInstanceProtectableResult',
    'GetProtectableInstancesInstanceProtectableVaultResult',
    'GetProtectableInstancesInstanceProtectableVaultBillingResult',
    'GetProtectableInstancesInstanceProtectableVaultBindRuleResult',
    'GetProtectableInstancesInstanceProtectableVaultBindRuleTagResult',
    'GetProtectableInstancesInstanceProtectableVaultResourceResult',
    'GetProtectableInstancesInstanceProtectableVaultResourceExtraInfoResult',
    'GetProtectableInstancesInstanceProtectableVaultTagResult',
    'GetRegionProjectsLinkResult',
    'GetRegionProjectsProjectResult',
    'GetRegionProjectsProjectLinkResult',
    'GetReplicationCapabilitiesRegionResult',
    'GetStorageUsagesStorageUsageResult',
    'GetTagsTagResult',
    'GetVaultsByTagsMatchResult',
    'GetVaultsByTagsNotTagResult',
    'GetVaultsByTagsNotTagsAnyResult',
    'GetVaultsByTagsResourceResult',
    'GetVaultsByTagsResourceResourceDetailResult',
    'GetVaultsByTagsResourceResourceDetailVaultResult',
    'GetVaultsByTagsResourceResourceDetailVaultBillingResult',
    'GetVaultsByTagsResourceResourceDetailVaultBindRuleResult',
    'GetVaultsByTagsResourceResourceDetailVaultBindRuleTagResult',
    'GetVaultsByTagsResourceResourceDetailVaultResourceResult',
    'GetVaultsByTagsResourceResourceDetailVaultResourceExtraInfoResult',
    'GetVaultsByTagsResourceResourceDetailVaultTagResult',
    'GetVaultsByTagsResourceSysTagResult',
    'GetVaultsByTagsResourceTagResult',
    'GetVaultsByTagsSysTagResult',
    'GetVaultsByTagsTagResult',
    'GetVaultsByTagsTagsAnyResult',
    'GetVaultsVaultResult',
    'GetVaultsVaultResourceResult',
]

@pulumi.output_type
class BackupShareMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destProjectId":
            suggest = "dest_project_id"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "vaultId":
            suggest = "vault_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupShareMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupShareMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupShareMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_project_id: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 image_id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None,
                 vault_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str dest_project_id: Specifies the ID of the project with which the backup is shared.
        :param _builtins.str created_at: The creation time of the backup shared member.
        :param _builtins.str id: The ID of the backup shared member record.
        :param _builtins.str image_id: The ID of the image registered with the shared backup copy.
        :param _builtins.str status: The backup sharing status.
        :param _builtins.str updated_at: The latest update time of the backup shared member.
        :param _builtins.str vault_id: The ID of the vault where the shared backup is stored.
        """
        pulumi.set(__self__, "dest_project_id", dest_project_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="destProjectId")
    def dest_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the project with which the backup is shared.
        """
        return pulumi.get(self, "dest_project_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creation time of the backup shared member.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the backup shared member record.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        """
        The ID of the image registered with the shared backup copy.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The backup sharing status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The latest update time of the backup shared member.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[_builtins.str]:
        """
        The ID of the vault where the shared backup is stored.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class ChangeOrderProductInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productId":
            suggest = "product_id"
        elif key == "resourceSize":
            suggest = "resource_size"
        elif key == "resourceSizeMeasureId":
            suggest = "resource_size_measure_id"
        elif key == "resourceSpecCode":
            suggest = "resource_spec_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChangeOrderProductInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChangeOrderProductInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChangeOrderProductInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 product_id: _builtins.str,
                 resource_size: _builtins.int,
                 resource_size_measure_id: _builtins.int,
                 resource_spec_code: _builtins.str):
        """
        :param _builtins.str product_id: Specifies the product ID, which is obtained through the price query API.
               The value consists of `1` to `64` characters and can contain only letters, digits, underscores (_), and hyphens (-).
        :param _builtins.int resource_size: Specifies the size of the resource. Value range: `10`-`10,485,760`.
               The size value required must be greater than the existing size value.
        :param _builtins.int resource_size_measure_id: Specifies the measurement unit of the resource size.
               Currently, only `17` (GB) is supported.
        :param _builtins.str resource_spec_code: Specifies the spec code of the resource.
               Valid values are: **vault.backup.server.normal**, **vault.backup.turbo.normal**, **vault.backup.database.normal**,
               **vault.backup.volume.normal**, **vault.backup.rds.normal**, **vault.replication.server.normal**, and
               **vault.hybrid.server.normal**.
        """
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "resource_size", resource_size)
        pulumi.set(__self__, "resource_size_measure_id", resource_size_measure_id)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        Specifies the product ID, which is obtained through the price query API.
        The value consists of `1` to `64` characters and can contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> _builtins.int:
        """
        Specifies the size of the resource. Value range: `10`-`10,485,760`.
        The size value required must be greater than the existing size value.
        """
        return pulumi.get(self, "resource_size")

    @_builtins.property
    @pulumi.getter(name="resourceSizeMeasureId")
    def resource_size_measure_id(self) -> _builtins.int:
        """
        Specifies the measurement unit of the resource size.
        Currently, only `17` (GB) is supported.
        """
        return pulumi.get(self, "resource_size_measure_id")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> _builtins.str:
        """
        Specifies the spec code of the resource.
        Valid values are: **vault.backup.server.normal**, **vault.backup.turbo.normal**, **vault.backup.database.normal**,
        **vault.backup.volume.normal**, **vault.backup.rds.normal**, **vault.replication.server.normal**, and
        **vault.hybrid.server.normal**.
        """
        return pulumi.get(self, "resource_spec_code")


@pulumi.output_type
class CheckpointBackup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "protectedAt":
            suggest = "protected_at"
        elif key == "resourceSize":
            suggest = "resource_size"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckpointBackup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckpointBackup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckpointBackup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 type: _builtins.str,
                 id: Optional[_builtins.str] = None,
                 protected_at: Optional[_builtins.str] = None,
                 resource_size: Optional[_builtins.int] = None,
                 status: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str resource_id: Specifies the ID of backup resource.  
               Changing this will create a new resource.
        :param _builtins.str type: Specifies the type of the backup resource.  
               The valid values are as follows:
               + **OS::Nova::Server**
               + **OS::Cinder::Volume**
               + **OS::Ironic::BareMetalServer**
               + **OS::Native::Server**
               + **OS::Sfs::Turbo**
               + **OS::Workspace::DesktopV2**
               
               Changing this will create a new resource.
        :param _builtins.str id: The backup ID.
        :param _builtins.str protected_at: The backup time.
        :param _builtins.int resource_size: The backup resource size.
        :param _builtins.str status: The backup status.
        :param _builtins.str updated_at: The latest update time of the backup.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protected_at is not None:
            pulumi.set(__self__, "protected_at", protected_at)
        if resource_size is not None:
            pulumi.set(__self__, "resource_size", resource_size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the ID of backup resource.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the backup resource.  
        The valid values are as follows:
        + **OS::Nova::Server**
        + **OS::Cinder::Volume**
        + **OS::Ironic::BareMetalServer**
        + **OS::Native::Server**
        + **OS::Sfs::Turbo**
        + **OS::Workspace::DesktopV2**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="protectedAt")
    def protected_at(self) -> Optional[_builtins.str]:
        """
        The backup time.
        """
        return pulumi.get(self, "protected_at")

    @_builtins.property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> Optional[_builtins.int]:
        """
        The backup resource size.
        """
        return pulumi.get(self, "resource_size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The backup status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The latest update time of the backup.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class OrganizationPolicyPolicyOperationDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayBackups":
            suggest = "day_backups"
        elif key == "destinationProjectId":
            suggest = "destination_project_id"
        elif key == "destinationRegion":
            suggest = "destination_region"
        elif key == "enableAcceleration":
            suggest = "enable_acceleration"
        elif key == "fullBackupInterval":
            suggest = "full_backup_interval"
        elif key == "maxBackups":
            suggest = "max_backups"
        elif key == "monthBackups":
            suggest = "month_backups"
        elif key == "retentionDurationDays":
            suggest = "retention_duration_days"
        elif key == "weekBackups":
            suggest = "week_backups"
        elif key == "yearBackups":
            suggest = "year_backups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationPolicyPolicyOperationDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationPolicyPolicyOperationDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationPolicyPolicyOperationDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_backups: Optional[_builtins.int] = None,
                 destination_project_id: Optional[_builtins.str] = None,
                 destination_region: Optional[_builtins.str] = None,
                 enable_acceleration: Optional[_builtins.str] = None,
                 full_backup_interval: Optional[_builtins.int] = None,
                 max_backups: Optional[_builtins.int] = None,
                 month_backups: Optional[_builtins.int] = None,
                 retention_duration_days: Optional[_builtins.int] = None,
                 timezone: Optional[_builtins.str] = None,
                 week_backups: Optional[_builtins.int] = None,
                 year_backups: Optional[_builtins.int] = None):
        """
        :param _builtins.int day_backups: Specifies the maximum number of daily backups that can be retained.
               The latest backup of each day is saved in the long term. The value ranges from **0** to **100**.
        :param _builtins.str destination_project_id: Specifies the destination project ID for replication.
               This parameter is **mandatory** for cross-region replication.
        :param _builtins.str destination_region: Specifies the destination region for replication.
               This parameter is **mandatory** for cross-region replication.
        :param _builtins.str enable_acceleration: Specifies whether to enable acceleration to shorten replication time for
               cross-region replication.
               The valid values are as follows:
               + **true**
               + **false**
        :param _builtins.int full_backup_interval: Defines how often a full backup is performed after incremental backups.
               If **-1** is specified, full backup will not be performed. The value ranges from **-1** to **100**.
               
               <a name="cbr_organization_policy_trigger"></a>
               The `policy_trigger` block supports:
        :param _builtins.int max_backups: Specifies the maximum number of backups that can be automatically created for a
               backup object. The value can be **-1** or ranges from **0** to **99999**. If the value is set to **-1**, backups
               will not be cleared by quantity limit.
        :param _builtins.int month_backups: Specifies the maximum number of monthly backups that can be retained.
               The latest backup of each month is saved in the long term. The value ranges from **0** to **100**.
        :param _builtins.int retention_duration_days: Specifies the duration of retaining a backup, in days.
               The maximum value is **99999**. If the value is set to **-1**, backups will not be cleared by retention duration.
        :param _builtins.str timezone: Specifies the time zone where the user is located, for example, **UTC+08:00**.
        :param _builtins.int week_backups: Specifies the maximum number of weekly backups that can be retained.
               The latest backup of each week is saved in the long term. The value ranges from **0** to **100**.
        :param _builtins.int year_backups: Specifies the maximum number of yearly backups that can be retained.
               The latest backup of each year is saved in the long term. The value ranges from **0** to **100**.
        """
        if day_backups is not None:
            pulumi.set(__self__, "day_backups", day_backups)
        if destination_project_id is not None:
            pulumi.set(__self__, "destination_project_id", destination_project_id)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if enable_acceleration is not None:
            pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        if full_backup_interval is not None:
            pulumi.set(__self__, "full_backup_interval", full_backup_interval)
        if max_backups is not None:
            pulumi.set(__self__, "max_backups", max_backups)
        if month_backups is not None:
            pulumi.set(__self__, "month_backups", month_backups)
        if retention_duration_days is not None:
            pulumi.set(__self__, "retention_duration_days", retention_duration_days)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if week_backups is not None:
            pulumi.set(__self__, "week_backups", week_backups)
        if year_backups is not None:
            pulumi.set(__self__, "year_backups", year_backups)

    @_builtins.property
    @pulumi.getter(name="dayBackups")
    def day_backups(self) -> Optional[_builtins.int]:
        """
        Specifies the maximum number of daily backups that can be retained.
        The latest backup of each day is saved in the long term. The value ranges from **0** to **100**.
        """
        return pulumi.get(self, "day_backups")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> Optional[_builtins.str]:
        """
        Specifies the destination project ID for replication.
        This parameter is **mandatory** for cross-region replication.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[_builtins.str]:
        """
        Specifies the destination region for replication.
        This parameter is **mandatory** for cross-region replication.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> Optional[_builtins.str]:
        """
        Specifies whether to enable acceleration to shorten replication time for
        cross-region replication.
        The valid values are as follows:
        + **true**
        + **false**
        """
        return pulumi.get(self, "enable_acceleration")

    @_builtins.property
    @pulumi.getter(name="fullBackupInterval")
    def full_backup_interval(self) -> Optional[_builtins.int]:
        """
        Defines how often a full backup is performed after incremental backups.
        If **-1** is specified, full backup will not be performed. The value ranges from **-1** to **100**.

        <a name="cbr_organization_policy_trigger"></a>
        The `policy_trigger` block supports:
        """
        return pulumi.get(self, "full_backup_interval")

    @_builtins.property
    @pulumi.getter(name="maxBackups")
    def max_backups(self) -> Optional[_builtins.int]:
        """
        Specifies the maximum number of backups that can be automatically created for a
        backup object. The value can be **-1** or ranges from **0** to **99999**. If the value is set to **-1**, backups
        will not be cleared by quantity limit.
        """
        return pulumi.get(self, "max_backups")

    @_builtins.property
    @pulumi.getter(name="monthBackups")
    def month_backups(self) -> Optional[_builtins.int]:
        """
        Specifies the maximum number of monthly backups that can be retained.
        The latest backup of each month is saved in the long term. The value ranges from **0** to **100**.
        """
        return pulumi.get(self, "month_backups")

    @_builtins.property
    @pulumi.getter(name="retentionDurationDays")
    def retention_duration_days(self) -> Optional[_builtins.int]:
        """
        Specifies the duration of retaining a backup, in days.
        The maximum value is **99999**. If the value is set to **-1**, backups will not be cleared by retention duration.
        """
        return pulumi.get(self, "retention_duration_days")

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> Optional[_builtins.str]:
        """
        Specifies the time zone where the user is located, for example, **UTC+08:00**.
        """
        return pulumi.get(self, "timezone")

    @_builtins.property
    @pulumi.getter(name="weekBackups")
    def week_backups(self) -> Optional[_builtins.int]:
        """
        Specifies the maximum number of weekly backups that can be retained.
        The latest backup of each week is saved in the long term. The value ranges from **0** to **100**.
        """
        return pulumi.get(self, "week_backups")

    @_builtins.property
    @pulumi.getter(name="yearBackups")
    def year_backups(self) -> Optional[_builtins.int]:
        """
        Specifies the maximum number of yearly backups that can be retained.
        The latest backup of each year is saved in the long term. The value ranges from **0** to **100**.
        """
        return pulumi.get(self, "year_backups")


@pulumi.output_type
class OrganizationPolicyPolicyTrigger(dict):
    def __init__(__self__, *,
                 properties: 'outputs.OrganizationPolicyPolicyTriggerProperties'):
        """
        :param 'OrganizationPolicyPolicyTriggerPropertiesArgs' properties: Specifies the properties of policy trigger.
               The properties structure is documented below.
               
               <a name="cbr_organization_policy_trigger_properties"></a>
               The `properties` block supports:
        """
        pulumi.set(__self__, "properties", properties)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> 'outputs.OrganizationPolicyPolicyTriggerProperties':
        """
        Specifies the properties of policy trigger.
        The properties structure is documented below.

        <a name="cbr_organization_policy_trigger_properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class OrganizationPolicyPolicyTriggerProperties(dict):
    def __init__(__self__, *,
                 patterns: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] patterns: Specifies the scheduling rules for policy execution. Up to 24 rules are supported.
               The scheduling rules follow the iCalendar RFC 2445 specification, supporting parameters like **FREQ**, **BYDAY**,
               **BYHOUR**, **BYMINUTE**, and **INTERVAL**. For example: **FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR,SA,SU;BYHOUR=14;BYMINUTE=00**.
        """
        pulumi.set(__self__, "patterns", patterns)

    @_builtins.property
    @pulumi.getter
    def patterns(self) -> Sequence[_builtins.str]:
        """
        Specifies the scheduling rules for policy execution. Up to 24 rules are supported.
        The scheduling rules follow the iCalendar RFC 2445 specification, supporting parameters like **FREQ**, **BYDAY**,
        **BYHOUR**, **BYMINUTE**, and **INTERVAL**. For example: **FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR,SA,SU;BYHOUR=14;BYMINUTE=00**.
        """
        return pulumi.get(self, "patterns")


@pulumi.output_type
class PolicyBackupCycle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionTimes":
            suggest = "execution_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyBackupCycle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyBackupCycle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyBackupCycle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_times: Sequence[_builtins.str],
                 days: Optional[_builtins.str] = None,
                 interval: Optional[_builtins.int] = None):
        """
        :param Sequence[_builtins.str] execution_times: Specifies the backup time. Automated backups will be triggered at the backup
               time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
               cannot be repeated. In the replication policy, you are advised to set one time point for one day.
               
               <a name="cbr_policy_long_term_retention"></a>
               The `long_term_retention` block supports:
        :param _builtins.str days: Specifies the weekly backup day of backup schedule.  
               It supports seven days a week (MO, TU, WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without
               spaces, between date and date during the configuration.
        :param _builtins.int interval: Specifies the interval (in days) of backup schedule.  
               The valid value ranges from `1` to `30`.
               
               > Parameter `backup_cycle.days` and `backup_cycle.interval` are alternative.
        """
        pulumi.set(__self__, "execution_times", execution_times)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @_builtins.property
    @pulumi.getter(name="executionTimes")
    def execution_times(self) -> Sequence[_builtins.str]:
        """
        Specifies the backup time. Automated backups will be triggered at the backup
        time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
        cannot be repeated. In the replication policy, you are advised to set one time point for one day.

        <a name="cbr_policy_long_term_retention"></a>
        The `long_term_retention` block supports:
        """
        return pulumi.get(self, "execution_times")

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[_builtins.str]:
        """
        Specifies the weekly backup day of backup schedule.  
        It supports seven days a week (MO, TU, WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without
        spaces, between date and date during the configuration.
        """
        return pulumi.get(self, "days")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        """
        Specifies the interval (in days) of backup schedule.  
        The valid value ranges from `1` to `30`.

        > Parameter `backup_cycle.days` and `backup_cycle.interval` are alternative.
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class PolicyLongTermRetention(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullBackupInterval":
            suggest = "full_backup_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyLongTermRetention. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyLongTermRetention.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyLongTermRetention.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 daily: Optional[_builtins.int] = None,
                 full_backup_interval: Optional[_builtins.int] = None,
                 monthly: Optional[_builtins.int] = None,
                 weekly: Optional[_builtins.int] = None,
                 yearly: Optional[_builtins.int] = None):
        """
        :param _builtins.int daily: Specifies the latest backup of each day is saved in the long term.
        :param _builtins.int full_backup_interval: Specifies how often (after how many incremental backups) a full backup is
               performed. The valid value ranges from `-1` to `100`.
               If `-1` is specified, full backup will not be performed.
        :param _builtins.int monthly: Specifies the latest backup of each month is saved in the long term.
        :param _builtins.int weekly: Specifies the latest backup of each week is saved in the long term.
        :param _builtins.int yearly: Specifies the latest backup of each year is saved in the long term.
               
               > A maximum of 10 backups are retained for failed periodic backup tasks. They are retained for one month and can be
               manually deleted on the web console.
        """
        if daily is not None:
            pulumi.set(__self__, "daily", daily)
        if full_backup_interval is not None:
            pulumi.set(__self__, "full_backup_interval", full_backup_interval)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)
        if yearly is not None:
            pulumi.set(__self__, "yearly", yearly)

    @_builtins.property
    @pulumi.getter
    def daily(self) -> Optional[_builtins.int]:
        """
        Specifies the latest backup of each day is saved in the long term.
        """
        return pulumi.get(self, "daily")

    @_builtins.property
    @pulumi.getter(name="fullBackupInterval")
    def full_backup_interval(self) -> Optional[_builtins.int]:
        """
        Specifies how often (after how many incremental backups) a full backup is
        performed. The valid value ranges from `-1` to `100`.
        If `-1` is specified, full backup will not be performed.
        """
        return pulumi.get(self, "full_backup_interval")

    @_builtins.property
    @pulumi.getter
    def monthly(self) -> Optional[_builtins.int]:
        """
        Specifies the latest backup of each month is saved in the long term.
        """
        return pulumi.get(self, "monthly")

    @_builtins.property
    @pulumi.getter
    def weekly(self) -> Optional[_builtins.int]:
        """
        Specifies the latest backup of each week is saved in the long term.
        """
        return pulumi.get(self, "weekly")

    @_builtins.property
    @pulumi.getter
    def yearly(self) -> Optional[_builtins.int]:
        """
        Specifies the latest backup of each year is saved in the long term.

        > A maximum of 10 backups are retained for failed periodic backup tasks. They are retained for one month and can be
        manually deleted on the web console.
        """
        return pulumi.get(self, "yearly")


@pulumi.output_type
class ReplicateBackupReplicate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationProjectId":
            suggest = "destination_project_id"
        elif key == "destinationRegion":
            suggest = "destination_region"
        elif key == "destinationVaultId":
            suggest = "destination_vault_id"
        elif key == "enableAcceleration":
            suggest = "enable_acceleration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicateBackupReplicate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicateBackupReplicate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicateBackupReplicate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_project_id: _builtins.str,
                 destination_region: _builtins.str,
                 destination_vault_id: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 enable_acceleration: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str destination_project_id: Specifies the ID of the replication destination project.
        :param _builtins.str destination_region: Specifies the replication destination region.
        :param _builtins.str destination_vault_id: Specifies the ID of the vault in the replication
               destination region.
        :param _builtins.str description: Specifies the replica description.
        :param _builtins.bool enable_acceleration: Specifies whether to enable the acceleration function to
               shorten the replication time for cross-region replication. If this parameter is not set, the acceleration function
               is disabled.
        :param _builtins.str name: Specifies the replica name.
        """
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_acceleration is not None:
            pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        Specifies the replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        Specifies the ID of the vault in the replication
        destination region.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the replica description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable the acceleration function to
        shorten the replication time for cross-region replication. If this parameter is not set, the acceleration function
        is disabled.
        """
        return pulumi.get(self, "enable_acceleration")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the replica name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RestoreDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPath":
            suggest = "destination_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RestoreDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RestoreDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RestoreDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_path: _builtins.str):
        """
        :param _builtins.str destination_path: Specifies the destination path.
               
               <a name="restore_mappings_struct"></a>
               The `mappings` block supports:
        """
        pulumi.set(__self__, "destination_path", destination_path)

    @_builtins.property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> _builtins.str:
        """
        Specifies the destination path.

        <a name="restore_mappings_struct"></a>
        The `mappings` block supports:
        """
        return pulumi.get(self, "destination_path")


@pulumi.output_type
class RestoreMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RestoreMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RestoreMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RestoreMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str backup_id: Specifies the disk backup ID.
        :param _builtins.str volume_id: Specifies the ID of the disk to which data is restored.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        """
        Specifies the disk backup ID.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        Specifies the ID of the disk to which data is restored.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VaultPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationVaultId":
            suggest = "destination_vault_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 destination_vault_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Specifies the policy ID.
        :param _builtins.str destination_vault_id: Specifies the ID of destination vault to which the replication policy
               will associated.
               
               > Only one policy of each type (backup and replication) can be associated.
               
               <a name="cbr_vault_resources"></a>
               The `resources` block supports:
        """
        pulumi.set(__self__, "id", id)
        if destination_vault_id is not None:
            pulumi.set(__self__, "destination_vault_id", destination_vault_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the policy ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of destination vault to which the replication policy
        will associated.

        > Only one policy of each type (backup and replication) can be associated.

        <a name="cbr_vault_resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "destination_vault_id")


@pulumi.output_type
class VaultResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverId":
            suggest = "server_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 excludes: Optional[Sequence[_builtins.str]] = None,
                 includes: Optional[Sequence[_builtins.str]] = None,
                 server_id: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] excludes: Specifies the array of disk IDs which will be excluded in the backup.
               Only **server** vault support this parameter.
        :param Sequence[_builtins.str] includes: Specifies the array of disk or SFS file system IDs which will be included in the backup.
               Only **disk** and **turbo** vault support this parameter.
        :param _builtins.str server_id: Specifies the ID of the ECS instance to be backed up.
        """
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @_builtins.property
    @pulumi.getter
    def excludes(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the array of disk IDs which will be excluded in the backup.
        Only **server** vault support this parameter.
        """
        return pulumi.get(self, "excludes")

    @_builtins.property
    @pulumi.getter
    def includes(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the array of disk or SFS file system IDs which will be included in the backup.
        Only **disk** and **turbo** vault support this parameter.
        """
        return pulumi.get(self, "includes")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the ECS instance to be backed up.
        """
        return pulumi.get(self, "server_id")


@pulumi.output_type
class GetAgentChecksAgentStatusResult(dict):
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str,
                 resource_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str resource_type: Specifies the resource type.
               The valid values are as follows:
               + **OS::Nova::Server**：Indicates ECS.
               + **OS::Ironic::BareMetalServer**：Indicates BMS.
        :param _builtins.str resource_name: Specifies the resource name.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the resource type.
        The valid values are as follows:
        + **OS::Nova::Server**：Indicates ECS.
        + **OS::Ironic::BareMetalServer**：Indicates BMS.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class GetAgentChecksAgentStatusAttrResult(dict):
    def __init__(__self__, *,
                 code: _builtins.int,
                 installed: _builtins.bool,
                 is_old: _builtins.bool,
                 message: _builtins.str,
                 resource_id: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.int code: The error code returned uoon an agent connection failure.
        :param _builtins.bool installed: Whether the agent is installed.
        :param _builtins.bool is_old: Whether the installed agent is of an earlier version.
        :param _builtins.str message: The error information that explains why the agent cannot be connected.
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str version: The agent version.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "installed", installed)
        pulumi.set(__self__, "is_old", is_old)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.int:
        """
        The error code returned uoon an agent connection failure.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def installed(self) -> _builtins.bool:
        """
        Whether the agent is installed.
        """
        return pulumi.get(self, "installed")

    @_builtins.property
    @pulumi.getter(name="isOld")
    def is_old(self) -> _builtins.bool:
        """
        Whether the installed agent is of an earlier version.
        """
        return pulumi.get(self, "is_old")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The error information that explains why the agent cannot be connected.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The agent version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetBackupChildrenResult(dict):
    def __init__(__self__, *,
                 checkpoint_id: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 expired_at: _builtins.str,
                 extend_infos: Sequence['outputs.GetBackupChildrenExtendInfoResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 replication_records: Sequence['outputs.GetBackupChildrenReplicationRecordResult'],
                 resource_az: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 resource_size: _builtins.int,
                 resource_type: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 vault_id: _builtins.str):
        """
        :param _builtins.str checkpoint_id: The restore point ID of the sub-backup resource.
        :param _builtins.str created_at: The creation time of the sub-backup.
        :param _builtins.str description: The sub-backup description.
        :param _builtins.str enterprise_project_id: The enterprise project to which the backup sub-backup resource belongs.
        :param _builtins.str expired_at: The expiration time of the sub-backup.
        :param Sequence['GetBackupChildrenExtendInfoArgs'] extend_infos: The extended information.
        :param _builtins.str id: Specifies the backup ID.
        :param _builtins.str name: The sub-backup name.
        :param Sequence['GetBackupChildrenReplicationRecordArgs'] replication_records: The replication records.
        :param _builtins.str resource_az: The availability zone where the backup sub-backup resource is located.
        :param _builtins.str resource_id: The sub-backup resource ID.
        :param _builtins.str resource_name: The sub-backup resource name.
        :param _builtins.int resource_size: The sub-backup resource size, in GB.
        :param _builtins.str resource_type: The sub-backup resource type.
        :param _builtins.str status: The sub-backup status.
        :param _builtins.str type: The sub-backup type.
        :param _builtins.str updated_at: The latest update time of the sub-backup.
        :param _builtins.str vault_id: The vault to which the backup resource belongs.
        """
        pulumi.set(__self__, "checkpoint_id", checkpoint_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "expired_at", expired_at)
        pulumi.set(__self__, "extend_infos", extend_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replication_records", replication_records)
        pulumi.set(__self__, "resource_az", resource_az)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_size", resource_size)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="checkpointId")
    def checkpoint_id(self) -> _builtins.str:
        """
        The restore point ID of the sub-backup resource.
        """
        return pulumi.get(self, "checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the sub-backup.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The sub-backup description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project to which the backup sub-backup resource belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> _builtins.str:
        """
        The expiration time of the sub-backup.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter(name="extendInfos")
    def extend_infos(self) -> Sequence['outputs.GetBackupChildrenExtendInfoResult']:
        """
        The extended information.
        """
        return pulumi.get(self, "extend_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The sub-backup name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="replicationRecords")
    def replication_records(self) -> Sequence['outputs.GetBackupChildrenReplicationRecordResult']:
        """
        The replication records.
        """
        return pulumi.get(self, "replication_records")

    @_builtins.property
    @pulumi.getter(name="resourceAz")
    def resource_az(self) -> _builtins.str:
        """
        The availability zone where the backup sub-backup resource is located.
        """
        return pulumi.get(self, "resource_az")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The sub-backup resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The sub-backup resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> _builtins.int:
        """
        The sub-backup resource size, in GB.
        """
        return pulumi.get(self, "resource_size")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The sub-backup resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The sub-backup status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The sub-backup type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the sub-backup.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        The vault to which the backup resource belongs.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetBackupChildrenExtendInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: _builtins.bool,
                 bootable: _builtins.bool,
                 contain_system_disk: _builtins.bool,
                 encrypted: _builtins.bool,
                 incremental: _builtins.bool,
                 is_system_disk: _builtins.bool,
                 os_registry_images: Sequence[_builtins.str],
                 snapshot_id: _builtins.str,
                 support_lld: _builtins.bool,
                 supported_restore_mode: _builtins.str):
        """
        :param _builtins.bool auto_trigger: Whether the backup is automatically generated.
        :param _builtins.bool bootable: Whether the backup is a system disk backup.
        :param _builtins.bool contain_system_disk: Whether the VM backup data contains system disk data.
        :param _builtins.bool encrypted: Whether the backup is encrypted.
        :param _builtins.bool incremental: Whether the backup is an incremental backup.
        :param _builtins.bool is_system_disk: Whether the disk is a system disk.
        :param Sequence[_builtins.str] os_registry_images: The ID list of images created using backups.
        :param _builtins.str snapshot_id: Snapshot ID of the disk backup.
        :param _builtins.bool support_lld: Whether to allow lazy loading for fast restoration.
        :param _builtins.str supported_restore_mode: The restoration mode.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "contain_system_disk", contain_system_disk)
        pulumi.set(__self__, "encrypted", encrypted)
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "is_system_disk", is_system_disk)
        pulumi.set(__self__, "os_registry_images", os_registry_images)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "support_lld", support_lld)
        pulumi.set(__self__, "supported_restore_mode", supported_restore_mode)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Whether the backup is automatically generated.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        """
        Whether the backup is a system disk backup.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="containSystemDisk")
    def contain_system_disk(self) -> _builtins.bool:
        """
        Whether the VM backup data contains system disk data.
        """
        return pulumi.get(self, "contain_system_disk")

    @_builtins.property
    @pulumi.getter
    def encrypted(self) -> _builtins.bool:
        """
        Whether the backup is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> _builtins.bool:
        """
        Whether the backup is an incremental backup.
        """
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter(name="isSystemDisk")
    def is_system_disk(self) -> _builtins.bool:
        """
        Whether the disk is a system disk.
        """
        return pulumi.get(self, "is_system_disk")

    @_builtins.property
    @pulumi.getter(name="osRegistryImages")
    def os_registry_images(self) -> Sequence[_builtins.str]:
        """
        The ID list of images created using backups.
        """
        return pulumi.get(self, "os_registry_images")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        Snapshot ID of the disk backup.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="supportLld")
    def support_lld(self) -> _builtins.bool:
        """
        Whether to allow lazy loading for fast restoration.
        """
        return pulumi.get(self, "support_lld")

    @_builtins.property
    @pulumi.getter(name="supportedRestoreMode")
    def supported_restore_mode(self) -> _builtins.str:
        """
        The restoration mode.
        """
        return pulumi.get(self, "supported_restore_mode")


@pulumi.output_type
class GetBackupChildrenReplicationRecordResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 destination_backup_id: _builtins.str,
                 destination_checkpoint_id: _builtins.str,
                 destination_project_id: _builtins.str,
                 destination_region: _builtins.str,
                 destination_vault_id: _builtins.str,
                 extra_infos: Sequence['outputs.GetBackupChildrenReplicationRecordExtraInfoResult'],
                 id: _builtins.str,
                 source_backup_id: _builtins.str,
                 source_checkpoint_id: _builtins.str,
                 source_project_id: _builtins.str,
                 source_region: _builtins.str,
                 status: _builtins.str,
                 vault_id: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the sub-backup.
        :param _builtins.str destination_backup_id: The ID of the destination backup used for replication.
        :param _builtins.str destination_checkpoint_id: The record ID of the destination backup used for replication.
        :param _builtins.str destination_project_id: The ID of the replication destination project.
        :param _builtins.str destination_region: The replication destination region.
        :param _builtins.str destination_vault_id: The destination vault ID.
        :param Sequence['GetBackupChildrenReplicationRecordExtraInfoArgs'] extra_infos: The additional information of the replication.
               The object structure is documented below.
        :param _builtins.str id: Specifies the backup ID.
        :param _builtins.str source_backup_id: The ID of the source backup used for replication.
        :param _builtins.str source_checkpoint_id: The ID of the source backup record used for replication.
        :param _builtins.str source_project_id: The ID of the replication source project.
        :param _builtins.str source_region: The replication source region.
        :param _builtins.str status: The sub-backup status.
        :param _builtins.str vault_id: The vault to which the backup resource belongs.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "destination_backup_id", destination_backup_id)
        pulumi.set(__self__, "destination_checkpoint_id", destination_checkpoint_id)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_backup_id", source_backup_id)
        pulumi.set(__self__, "source_checkpoint_id", source_checkpoint_id)
        pulumi.set(__self__, "source_project_id", source_project_id)
        pulumi.set(__self__, "source_region", source_region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the sub-backup.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="destinationBackupId")
    def destination_backup_id(self) -> _builtins.str:
        """
        The ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_backup_id")

    @_builtins.property
    @pulumi.getter(name="destinationCheckpointId")
    def destination_checkpoint_id(self) -> _builtins.str:
        """
        The record ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> _builtins.str:
        """
        The ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        The replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetBackupChildrenReplicationRecordExtraInfoResult']:
        """
        The additional information of the replication.
        The object structure is documented below.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sourceBackupId")
    def source_backup_id(self) -> _builtins.str:
        """
        The ID of the source backup used for replication.
        """
        return pulumi.get(self, "source_backup_id")

    @_builtins.property
    @pulumi.getter(name="sourceCheckpointId")
    def source_checkpoint_id(self) -> _builtins.str:
        """
        The ID of the source backup record used for replication.
        """
        return pulumi.get(self, "source_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="sourceProjectId")
    def source_project_id(self) -> _builtins.str:
        """
        The ID of the replication source project.
        """
        return pulumi.get(self, "source_project_id")

    @_builtins.property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> _builtins.str:
        """
        The replication source region.
        """
        return pulumi.get(self, "source_region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The sub-backup status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        The vault to which the backup resource belongs.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetBackupChildrenReplicationRecordExtraInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: _builtins.bool,
                 destination_vault_id: _builtins.str,
                 fail_code: _builtins.str,
                 fail_reason: _builtins.str,
                 progress: _builtins.int):
        """
        :param _builtins.bool auto_trigger: Whether the backup is automatically generated.
        :param _builtins.str destination_vault_id: The destination vault ID.
        :param _builtins.str fail_code: The error code.
        :param _builtins.str fail_reason: The error cause.
        :param _builtins.int progress: The replication progress.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "fail_code", fail_code)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "progress", progress)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Whether the backup is automatically generated.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="failCode")
    def fail_code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "fail_code")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        The error cause.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        The replication progress.
        """
        return pulumi.get(self, "progress")


@pulumi.output_type
class GetBackupExtendInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: _builtins.bool,
                 bootable: _builtins.bool,
                 contain_system_disk: _builtins.bool,
                 encrypted: _builtins.bool,
                 incremental: _builtins.bool,
                 is_system_disk: _builtins.bool,
                 os_registry_images: Sequence[_builtins.str],
                 snapshot_id: _builtins.str,
                 support_lld: _builtins.bool,
                 supported_restore_mode: _builtins.str):
        """
        :param _builtins.bool auto_trigger: Whether the backup is automatically generated.
        :param _builtins.bool bootable: Whether the backup is a system disk backup.
        :param _builtins.bool contain_system_disk: Whether the VM backup data contains system disk data.
        :param _builtins.bool encrypted: Whether the backup is encrypted.
        :param _builtins.bool incremental: Whether the backup is an incremental backup.
        :param _builtins.bool is_system_disk: Whether the disk is a system disk.
        :param Sequence[_builtins.str] os_registry_images: The ID list of images created using backups.
        :param _builtins.str snapshot_id: Snapshot ID of the disk backup.
        :param _builtins.bool support_lld: Whether to allow lazy loading for fast restoration.
        :param _builtins.str supported_restore_mode: The restoration mode.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "contain_system_disk", contain_system_disk)
        pulumi.set(__self__, "encrypted", encrypted)
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "is_system_disk", is_system_disk)
        pulumi.set(__self__, "os_registry_images", os_registry_images)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "support_lld", support_lld)
        pulumi.set(__self__, "supported_restore_mode", supported_restore_mode)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Whether the backup is automatically generated.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        """
        Whether the backup is a system disk backup.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="containSystemDisk")
    def contain_system_disk(self) -> _builtins.bool:
        """
        Whether the VM backup data contains system disk data.
        """
        return pulumi.get(self, "contain_system_disk")

    @_builtins.property
    @pulumi.getter
    def encrypted(self) -> _builtins.bool:
        """
        Whether the backup is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> _builtins.bool:
        """
        Whether the backup is an incremental backup.
        """
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter(name="isSystemDisk")
    def is_system_disk(self) -> _builtins.bool:
        """
        Whether the disk is a system disk.
        """
        return pulumi.get(self, "is_system_disk")

    @_builtins.property
    @pulumi.getter(name="osRegistryImages")
    def os_registry_images(self) -> Sequence[_builtins.str]:
        """
        The ID list of images created using backups.
        """
        return pulumi.get(self, "os_registry_images")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        Snapshot ID of the disk backup.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="supportLld")
    def support_lld(self) -> _builtins.bool:
        """
        Whether to allow lazy loading for fast restoration.
        """
        return pulumi.get(self, "support_lld")

    @_builtins.property
    @pulumi.getter(name="supportedRestoreMode")
    def supported_restore_mode(self) -> _builtins.str:
        """
        The restoration mode.
        """
        return pulumi.get(self, "supported_restore_mode")


@pulumi.output_type
class GetBackupReplicationRecordResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 destination_backup_id: _builtins.str,
                 destination_checkpoint_id: _builtins.str,
                 destination_project_id: _builtins.str,
                 destination_region: _builtins.str,
                 destination_vault_id: _builtins.str,
                 extra_infos: Sequence['outputs.GetBackupReplicationRecordExtraInfoResult'],
                 id: _builtins.str,
                 source_backup_id: _builtins.str,
                 source_checkpoint_id: _builtins.str,
                 source_project_id: _builtins.str,
                 source_region: _builtins.str,
                 status: _builtins.str,
                 vault_id: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the sub-backup.
        :param _builtins.str destination_backup_id: The ID of the destination backup used for replication.
        :param _builtins.str destination_checkpoint_id: The record ID of the destination backup used for replication.
        :param _builtins.str destination_project_id: The ID of the replication destination project.
        :param _builtins.str destination_region: The replication destination region.
        :param _builtins.str destination_vault_id: The destination vault ID.
        :param Sequence['GetBackupReplicationRecordExtraInfoArgs'] extra_infos: The additional information of the replication.
               The object structure is documented below.
        :param _builtins.str id: Specifies the backup ID.
        :param _builtins.str source_backup_id: The ID of the source backup used for replication.
        :param _builtins.str source_checkpoint_id: The ID of the source backup record used for replication.
        :param _builtins.str source_project_id: The ID of the replication source project.
        :param _builtins.str source_region: The replication source region.
        :param _builtins.str status: The sub-backup status.
        :param _builtins.str vault_id: The vault to which the backup resource belongs.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "destination_backup_id", destination_backup_id)
        pulumi.set(__self__, "destination_checkpoint_id", destination_checkpoint_id)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_backup_id", source_backup_id)
        pulumi.set(__self__, "source_checkpoint_id", source_checkpoint_id)
        pulumi.set(__self__, "source_project_id", source_project_id)
        pulumi.set(__self__, "source_region", source_region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the sub-backup.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="destinationBackupId")
    def destination_backup_id(self) -> _builtins.str:
        """
        The ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_backup_id")

    @_builtins.property
    @pulumi.getter(name="destinationCheckpointId")
    def destination_checkpoint_id(self) -> _builtins.str:
        """
        The record ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> _builtins.str:
        """
        The ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        The replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetBackupReplicationRecordExtraInfoResult']:
        """
        The additional information of the replication.
        The object structure is documented below.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sourceBackupId")
    def source_backup_id(self) -> _builtins.str:
        """
        The ID of the source backup used for replication.
        """
        return pulumi.get(self, "source_backup_id")

    @_builtins.property
    @pulumi.getter(name="sourceCheckpointId")
    def source_checkpoint_id(self) -> _builtins.str:
        """
        The ID of the source backup record used for replication.
        """
        return pulumi.get(self, "source_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="sourceProjectId")
    def source_project_id(self) -> _builtins.str:
        """
        The ID of the replication source project.
        """
        return pulumi.get(self, "source_project_id")

    @_builtins.property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> _builtins.str:
        """
        The replication source region.
        """
        return pulumi.get(self, "source_region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The sub-backup status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        The vault to which the backup resource belongs.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetBackupReplicationRecordExtraInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: _builtins.bool,
                 destination_vault_id: _builtins.str,
                 fail_code: _builtins.str,
                 fail_reason: _builtins.str,
                 progress: _builtins.int):
        """
        :param _builtins.bool auto_trigger: Whether the backup is automatically generated.
        :param _builtins.str destination_vault_id: The destination vault ID.
        :param _builtins.str fail_code: The error code.
        :param _builtins.str fail_reason: The error cause.
        :param _builtins.int progress: The replication progress.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "fail_code", fail_code)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "progress", progress)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Whether the backup is automatically generated.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="failCode")
    def fail_code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "fail_code")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        The error cause.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        The replication progress.
        """
        return pulumi.get(self, "progress")


@pulumi.output_type
class GetBackupsBackupResult(dict):
    def __init__(__self__, *,
                 checkpoint_id: _builtins.str,
                 children: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 expired_at: _builtins.str,
                 extend_infos: Sequence['outputs.GetBackupsBackupExtendInfoResult'],
                 id: _builtins.str,
                 image_type: _builtins.str,
                 incremental: _builtins.bool,
                 name: _builtins.str,
                 parent_id: _builtins.str,
                 project_id: _builtins.str,
                 protected_at: _builtins.str,
                 provider_id: _builtins.str,
                 replication_records: Sequence['outputs.GetBackupsBackupReplicationRecordResult'],
                 resource_az: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 resource_size: _builtins.int,
                 resource_type: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 vault_id: _builtins.str,
                 version: _builtins.int):
        """
        :param _builtins.str checkpoint_id: Specifies the restore point ID.
        :param _builtins.str children: The children backup list. This field is JSON format string.
               Its JSON structure is the same as the field `backups`.
        :param _builtins.str created_at: The start time of the replication.
        :param _builtins.str description: The backup description.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
               **all_granted_eps** indicates querying the IDs of all enterprise projects on which the user has permissions.
        :param _builtins.str expired_at: The expiration time.
        :param Sequence['GetBackupsBackupExtendInfoArgs'] extend_infos: The extended information.
        :param _builtins.str id: The replication record ID.
        :param _builtins.str image_type: Specifies the backup type. The value can be **backup** or **replication**.
        :param _builtins.bool incremental: Specifies whether incremental backup is used.
        :param _builtins.str name: Specifies the backup name.
        :param _builtins.str parent_id: Specifies the parent backup ID.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str protected_at: The backup time.
        :param _builtins.str provider_id: The backup provider ID.
        :param Sequence['GetBackupsBackupReplicationRecordArgs'] replication_records: The replication record.
        :param _builtins.str resource_az: Specifies the resource availability zones.
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str resource_name: Specifies the resource name.
        :param _builtins.int resource_size: The resource size, in GB.
        :param _builtins.str resource_type: Specifies the resource type. Valid values are **OS::Nova::Server**,
               **OS::Cinder::Volume**, **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo**,
               **OS::Workspace::DesktopV2**.
        :param _builtins.str status: Specifies the status. When the API is called, multiple statuses can be transferred for
               filtering, separated by commas (,). For example, **available,error**.
        :param _builtins.str updated_at: The update time.
        :param _builtins.str vault_id: Specifies the vault ID.
        :param _builtins.int version: The backup snapshot type.
        """
        pulumi.set(__self__, "checkpoint_id", checkpoint_id)
        pulumi.set(__self__, "children", children)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "expired_at", expired_at)
        pulumi.set(__self__, "extend_infos", extend_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "protected_at", protected_at)
        pulumi.set(__self__, "provider_id", provider_id)
        pulumi.set(__self__, "replication_records", replication_records)
        pulumi.set(__self__, "resource_az", resource_az)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_size", resource_size)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vault_id", vault_id)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="checkpointId")
    def checkpoint_id(self) -> _builtins.str:
        """
        Specifies the restore point ID.
        """
        return pulumi.get(self, "checkpoint_id")

    @_builtins.property
    @pulumi.getter
    def children(self) -> _builtins.str:
        """
        The children backup list. This field is JSON format string.
        Its JSON structure is the same as the field `backups`.
        """
        return pulumi.get(self, "children")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The start time of the replication.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The backup description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        **all_granted_eps** indicates querying the IDs of all enterprise projects on which the user has permissions.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> _builtins.str:
        """
        The expiration time.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter(name="extendInfos")
    def extend_infos(self) -> Sequence['outputs.GetBackupsBackupExtendInfoResult']:
        """
        The extended information.
        """
        return pulumi.get(self, "extend_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The replication record ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        """
        Specifies the backup type. The value can be **backup** or **replication**.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> _builtins.bool:
        """
        Specifies whether incremental backup is used.
        """
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backup name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        Specifies the parent backup ID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="protectedAt")
    def protected_at(self) -> _builtins.str:
        """
        The backup time.
        """
        return pulumi.get(self, "protected_at")

    @_builtins.property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> _builtins.str:
        """
        The backup provider ID.
        """
        return pulumi.get(self, "provider_id")

    @_builtins.property
    @pulumi.getter(name="replicationRecords")
    def replication_records(self) -> Sequence['outputs.GetBackupsBackupReplicationRecordResult']:
        """
        The replication record.
        """
        return pulumi.get(self, "replication_records")

    @_builtins.property
    @pulumi.getter(name="resourceAz")
    def resource_az(self) -> _builtins.str:
        """
        Specifies the resource availability zones.
        """
        return pulumi.get(self, "resource_az")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> _builtins.int:
        """
        The resource size, in GB.
        """
        return pulumi.get(self, "resource_size")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the resource type. Valid values are **OS::Nova::Server**,
        **OS::Cinder::Volume**, **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo**,
        **OS::Workspace::DesktopV2**.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status. When the API is called, multiple statuses can be transferred for
        filtering, separated by commas (,). For example, **available,error**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        Specifies the vault ID.
        """
        return pulumi.get(self, "vault_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The backup snapshot type.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetBackupsBackupExtendInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: _builtins.bool,
                 bootable: _builtins.bool,
                 contain_system_disk: _builtins.bool,
                 encrypted: _builtins.bool,
                 is_multi_az: _builtins.bool,
                 os_images_datas: Sequence['outputs.GetBackupsBackupExtendInfoOsImagesDataResult'],
                 snapshot_id: _builtins.str,
                 support_lld: _builtins.bool,
                 supported_restore_mode: _builtins.str,
                 system_disk: _builtins.bool):
        """
        :param _builtins.bool auto_trigger: Whether replication is automatically scheduled.
        :param _builtins.bool bootable: Whether the backup is a system disk backup.
        :param _builtins.bool contain_system_disk: Whether the VM backup data contains system disk data.
        :param _builtins.bool encrypted: Whether the backup is encrypted.
        :param _builtins.bool is_multi_az: Whether multi-AZ backup redundancy is used.
        :param Sequence['GetBackupsBackupExtendInfoOsImagesDataArgs'] os_images_datas: The ID list of images created using backups.
        :param _builtins.str snapshot_id: Snapshot ID of the disk backup.
        :param _builtins.bool support_lld: Whether to allow lazy loading for fast restoration.
        :param _builtins.str supported_restore_mode: The restoration mode.
        :param _builtins.bool system_disk: Whether the disk is a system disk.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "contain_system_disk", contain_system_disk)
        pulumi.set(__self__, "encrypted", encrypted)
        pulumi.set(__self__, "is_multi_az", is_multi_az)
        pulumi.set(__self__, "os_images_datas", os_images_datas)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "support_lld", support_lld)
        pulumi.set(__self__, "supported_restore_mode", supported_restore_mode)
        pulumi.set(__self__, "system_disk", system_disk)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Whether replication is automatically scheduled.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        """
        Whether the backup is a system disk backup.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="containSystemDisk")
    def contain_system_disk(self) -> _builtins.bool:
        """
        Whether the VM backup data contains system disk data.
        """
        return pulumi.get(self, "contain_system_disk")

    @_builtins.property
    @pulumi.getter
    def encrypted(self) -> _builtins.bool:
        """
        Whether the backup is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @_builtins.property
    @pulumi.getter(name="isMultiAz")
    def is_multi_az(self) -> _builtins.bool:
        """
        Whether multi-AZ backup redundancy is used.
        """
        return pulumi.get(self, "is_multi_az")

    @_builtins.property
    @pulumi.getter(name="osImagesDatas")
    def os_images_datas(self) -> Sequence['outputs.GetBackupsBackupExtendInfoOsImagesDataResult']:
        """
        The ID list of images created using backups.
        """
        return pulumi.get(self, "os_images_datas")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        Snapshot ID of the disk backup.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="supportLld")
    def support_lld(self) -> _builtins.bool:
        """
        Whether to allow lazy loading for fast restoration.
        """
        return pulumi.get(self, "support_lld")

    @_builtins.property
    @pulumi.getter(name="supportedRestoreMode")
    def supported_restore_mode(self) -> _builtins.str:
        """
        The restoration mode.
        """
        return pulumi.get(self, "supported_restore_mode")

    @_builtins.property
    @pulumi.getter(name="systemDisk")
    def system_disk(self) -> _builtins.bool:
        """
        Whether the disk is a system disk.
        """
        return pulumi.get(self, "system_disk")


@pulumi.output_type
class GetBackupsBackupExtendInfoOsImagesDataResult(dict):
    def __init__(__self__, *,
                 image_id: _builtins.str):
        """
        :param _builtins.str image_id: The image ID.
        """
        pulumi.set(__self__, "image_id", image_id)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The image ID.
        """
        return pulumi.get(self, "image_id")


@pulumi.output_type
class GetBackupsBackupReplicationRecordResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 destination_backup_id: _builtins.str,
                 destination_checkpoint_id: _builtins.str,
                 destination_project_id: _builtins.str,
                 destination_region: _builtins.str,
                 destination_vault_id: _builtins.str,
                 extra_infos: Sequence['outputs.GetBackupsBackupReplicationRecordExtraInfoResult'],
                 id: _builtins.str,
                 source_backup_id: _builtins.str,
                 source_checkpoint_id: _builtins.str,
                 source_project_id: _builtins.str,
                 source_region: _builtins.str,
                 status: _builtins.str,
                 vault_id: _builtins.str):
        """
        :param _builtins.str created_at: The start time of the replication.
        :param _builtins.str destination_backup_id: The ID of the destination backup used for replication.
        :param _builtins.str destination_checkpoint_id: The record ID of the destination backup used for replication.
        :param _builtins.str destination_project_id: The ID of the replication destination project.
        :param _builtins.str destination_region: The replication destination region.
        :param _builtins.str destination_vault_id: The destination vault ID.
        :param Sequence['GetBackupsBackupReplicationRecordExtraInfoArgs'] extra_infos: The additional information of the replication.
        :param _builtins.str id: The replication record ID.
        :param _builtins.str source_backup_id: The ID of the source backup used for replication.
        :param _builtins.str source_checkpoint_id: The ID of the source backup record used for replication.
        :param _builtins.str source_project_id: The ID of the replication source project.
        :param _builtins.str source_region: The replication source region.
        :param _builtins.str status: Specifies the status. When the API is called, multiple statuses can be transferred for
               filtering, separated by commas (,). For example, **available,error**.
        :param _builtins.str vault_id: Specifies the vault ID.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "destination_backup_id", destination_backup_id)
        pulumi.set(__self__, "destination_checkpoint_id", destination_checkpoint_id)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_backup_id", source_backup_id)
        pulumi.set(__self__, "source_checkpoint_id", source_checkpoint_id)
        pulumi.set(__self__, "source_project_id", source_project_id)
        pulumi.set(__self__, "source_region", source_region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The start time of the replication.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="destinationBackupId")
    def destination_backup_id(self) -> _builtins.str:
        """
        The ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_backup_id")

    @_builtins.property
    @pulumi.getter(name="destinationCheckpointId")
    def destination_checkpoint_id(self) -> _builtins.str:
        """
        The record ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> _builtins.str:
        """
        The ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        The replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetBackupsBackupReplicationRecordExtraInfoResult']:
        """
        The additional information of the replication.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The replication record ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sourceBackupId")
    def source_backup_id(self) -> _builtins.str:
        """
        The ID of the source backup used for replication.
        """
        return pulumi.get(self, "source_backup_id")

    @_builtins.property
    @pulumi.getter(name="sourceCheckpointId")
    def source_checkpoint_id(self) -> _builtins.str:
        """
        The ID of the source backup record used for replication.
        """
        return pulumi.get(self, "source_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="sourceProjectId")
    def source_project_id(self) -> _builtins.str:
        """
        The ID of the replication source project.
        """
        return pulumi.get(self, "source_project_id")

    @_builtins.property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> _builtins.str:
        """
        The replication source region.
        """
        return pulumi.get(self, "source_region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status. When the API is called, multiple statuses can be transferred for
        filtering, separated by commas (,). For example, **available,error**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        Specifies the vault ID.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetBackupsBackupReplicationRecordExtraInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: _builtins.bool,
                 destinatio_vault_id: _builtins.str,
                 fail_code: _builtins.str,
                 fail_reason: _builtins.str,
                 progress: _builtins.int):
        """
        :param _builtins.bool auto_trigger: Whether replication is automatically scheduled.
        :param _builtins.str destinatio_vault_id: The destination vault ID.
        :param _builtins.str fail_code: The error code. This field is empty if the operation is successful.
        :param _builtins.str fail_reason: The error cause.
        :param _builtins.int progress: The replication progress.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "destinatio_vault_id", destinatio_vault_id)
        pulumi.set(__self__, "fail_code", fail_code)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "progress", progress)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Whether replication is automatically scheduled.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter(name="destinatioVaultId")
    def destinatio_vault_id(self) -> _builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destinatio_vault_id")

    @_builtins.property
    @pulumi.getter(name="failCode")
    def fail_code(self) -> _builtins.str:
        """
        The error code. This field is empty if the operation is successful.
        """
        return pulumi.get(self, "fail_code")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        The error cause.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        The replication progress.
        """
        return pulumi.get(self, "progress")


@pulumi.output_type
class GetExternalVaultsVaultResult(dict):
    def __init__(__self__, *,
                 auto_bind: _builtins.bool,
                 auto_expand: _builtins.bool,
                 billings: Sequence['outputs.GetExternalVaultsVaultBillingResult'],
                 bind_rules: Sequence['outputs.GetExternalVaultsVaultBindRuleResult'],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 locked: _builtins.bool,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 provider_id: _builtins.str,
                 resources: Sequence['outputs.GetExternalVaultsVaultResourceResult'],
                 smn_notify: _builtins.bool,
                 sys_lock_source_service: _builtins.str,
                 tags: Sequence['outputs.GetExternalVaultsVaultTagResult'],
                 threshold: _builtins.int,
                 user_id: _builtins.str):
        """
        :param _builtins.bool auto_bind: Indicates whether automatic association is enabled. Its default value is **false** (not enabled).
        :param _builtins.bool auto_expand: Whether to enable auto capacity expansion for the vault. Only pay-per-use vaults support auto
               capacity expansion.
        :param Sequence['GetExternalVaultsVaultBillingArgs'] billings: Capacity and billing info of the vault.
               The billing structure is documented below.
        :param Sequence['GetExternalVaultsVaultBindRuleArgs'] bind_rules: Association rule. The bind_rules structure is documented below.
        :param _builtins.str created_at: Creation time.
        :param _builtins.str description: User-defined vault description.
        :param _builtins.str enterprise_project_id: Enterprise project ID. Its default value is **0**.
        :param _builtins.str id: ID of the resource to be backed up.
        :param _builtins.bool locked: Whether the vault is locked. A locked vault cannot be unlocked.
        :param _builtins.str name: Name of the resource to be backed up.
        :param _builtins.str project_id: Project ID.
        :param _builtins.str provider_id: ID of the vault resource type.
        :param Sequence['GetExternalVaultsVaultResourceArgs'] resources: The list of resources.
               The resources structure is documented below.
        :param _builtins.bool smn_notify: Exception notification function.
        :param _builtins.str sys_lock_source_service: Used to identify the SMB service. You can set it to SMB or leave it empty.
        :param Sequence['GetExternalVaultsVaultTagArgs'] tags: Filters automatically associated resources by tag.
               Minimum length: `0` characters. Maximum length: `5` characters.
               The tags structure is documented below.
        :param _builtins.int threshold: Vault capacity threshold. If the vault capacity usage exceeds this threshold, an exception notification
               is sent.
        :param _builtins.str user_id: User ID.
        """
        pulumi.set(__self__, "auto_bind", auto_bind)
        pulumi.set(__self__, "auto_expand", auto_expand)
        pulumi.set(__self__, "billings", billings)
        pulumi.set(__self__, "bind_rules", bind_rules)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "locked", locked)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "provider_id", provider_id)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "smn_notify", smn_notify)
        pulumi.set(__self__, "sys_lock_source_service", sys_lock_source_service)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter(name="autoBind")
    def auto_bind(self) -> _builtins.bool:
        """
        Indicates whether automatic association is enabled. Its default value is **false** (not enabled).
        """
        return pulumi.get(self, "auto_bind")

    @_builtins.property
    @pulumi.getter(name="autoExpand")
    def auto_expand(self) -> _builtins.bool:
        """
        Whether to enable auto capacity expansion for the vault. Only pay-per-use vaults support auto
        capacity expansion.
        """
        return pulumi.get(self, "auto_expand")

    @_builtins.property
    @pulumi.getter
    def billings(self) -> Sequence['outputs.GetExternalVaultsVaultBillingResult']:
        """
        Capacity and billing info of the vault.
        The billing structure is documented below.
        """
        return pulumi.get(self, "billings")

    @_builtins.property
    @pulumi.getter(name="bindRules")
    def bind_rules(self) -> Sequence['outputs.GetExternalVaultsVaultBindRuleResult']:
        """
        Association rule. The bind_rules structure is documented below.
        """
        return pulumi.get(self, "bind_rules")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        User-defined vault description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Enterprise project ID. Its default value is **0**.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        ID of the resource to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> _builtins.bool:
        """
        Whether the vault is locked. A locked vault cannot be unlocked.
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the resource to be backed up.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> _builtins.str:
        """
        ID of the vault resource type.
        """
        return pulumi.get(self, "provider_id")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetExternalVaultsVaultResourceResult']:
        """
        The list of resources.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="smnNotify")
    def smn_notify(self) -> _builtins.bool:
        """
        Exception notification function.
        """
        return pulumi.get(self, "smn_notify")

    @_builtins.property
    @pulumi.getter(name="sysLockSourceService")
    def sys_lock_source_service(self) -> _builtins.str:
        """
        Used to identify the SMB service. You can set it to SMB or leave it empty.
        """
        return pulumi.get(self, "sys_lock_source_service")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetExternalVaultsVaultTagResult']:
        """
        Filters automatically associated resources by tag.
        Minimum length: `0` characters. Maximum length: `5` characters.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.int:
        """
        Vault capacity threshold. If the vault capacity usage exceeds this threshold, an exception notification
        is sent.
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetExternalVaultsVaultBillingResult(dict):
    def __init__(__self__, *,
                 allocated: _builtins.int,
                 charging_mode: _builtins.str,
                 cloud_type: _builtins.str,
                 consistent_level: _builtins.str,
                 frozen_scene: _builtins.str,
                 is_multi_az: _builtins.bool,
                 object_type: _builtins.str,
                 order_id: _builtins.str,
                 product_id: _builtins.str,
                 protect_type: _builtins.str,
                 size: _builtins.int,
                 spec_code: _builtins.str,
                 status: _builtins.str,
                 storage_unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int allocated: Allocated capacity, in GB.
        :param _builtins.str charging_mode: The billing mode. Possible values are:
               + **post_paid**: pay-per-use.
               + **pre_paid**: yearly/monthly.
        :param _builtins.str cloud_type: Specifies cloud type of the instances. The value can be **public** or **hybrid**.
        :param _builtins.str consistent_level: The vault specification. Possible values are:
               + **crash_consistent**: crash consistent backup.
               + **app_consistent**: application consistency backup.
        :param _builtins.str frozen_scene: Scenario when an account is frozen.
        :param _builtins.bool is_multi_az: Multi-AZ attribute of a vault.
        :param _builtins.str object_type: The object type. Possible values are: **server**, **disk**, **turbo**, **workspace**,
               **vmware**, **rds** and **file**.
        :param _builtins.str order_id: Order ID.
        :param _builtins.str product_id: Product ID.
        :param _builtins.str protect_type: Specifies the protection type. The value can be **backup**, **replication**,
               or **hybrid**.
        :param _builtins.int size: Capacity, in GB.
        :param _builtins.str spec_code: The product specification code.
        :param _builtins.str status: Vault status.
        :param _builtins.str storage_unit: Name of the bucket for the vault.
        :param _builtins.int used: Used capacity, in MB.
        """
        pulumi.set(__self__, "allocated", allocated)
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "cloud_type", cloud_type)
        pulumi.set(__self__, "consistent_level", consistent_level)
        pulumi.set(__self__, "frozen_scene", frozen_scene)
        pulumi.set(__self__, "is_multi_az", is_multi_az)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "protect_type", protect_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_unit", storage_unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def allocated(self) -> _builtins.int:
        """
        Allocated capacity, in GB.
        """
        return pulumi.get(self, "allocated")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> _builtins.str:
        """
        The billing mode. Possible values are:
        + **post_paid**: pay-per-use.
        + **pre_paid**: yearly/monthly.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> _builtins.str:
        """
        Specifies cloud type of the instances. The value can be **public** or **hybrid**.
        """
        return pulumi.get(self, "cloud_type")

    @_builtins.property
    @pulumi.getter(name="consistentLevel")
    def consistent_level(self) -> _builtins.str:
        """
        The vault specification. Possible values are:
        + **crash_consistent**: crash consistent backup.
        + **app_consistent**: application consistency backup.
        """
        return pulumi.get(self, "consistent_level")

    @_builtins.property
    @pulumi.getter(name="frozenScene")
    def frozen_scene(self) -> _builtins.str:
        """
        Scenario when an account is frozen.
        """
        return pulumi.get(self, "frozen_scene")

    @_builtins.property
    @pulumi.getter(name="isMultiAz")
    def is_multi_az(self) -> _builtins.bool:
        """
        Multi-AZ attribute of a vault.
        """
        return pulumi.get(self, "is_multi_az")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The object type. Possible values are: **server**, **disk**, **turbo**, **workspace**,
        **vmware**, **rds** and **file**.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        Order ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        Product ID.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="protectType")
    def protect_type(self) -> _builtins.str:
        """
        Specifies the protection type. The value can be **backup**, **replication**,
        or **hybrid**.
        """
        return pulumi.get(self, "protect_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Capacity, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        The product specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Vault status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageUnit")
    def storage_unit(self) -> _builtins.str:
        """
        Name of the bucket for the vault.
        """
        return pulumi.get(self, "storage_unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        Used capacity, in MB.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetExternalVaultsVaultBindRuleResult(dict):
    def __init__(__self__, *,
                 tags: Sequence['outputs.GetExternalVaultsVaultBindRuleTagResult']):
        """
        :param Sequence['GetExternalVaultsVaultBindRuleTagArgs'] tags: Filters automatically associated resources by tag.
               Minimum length: `0` characters. Maximum length: `5` characters.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetExternalVaultsVaultBindRuleTagResult']:
        """
        Filters automatically associated resources by tag.
        Minimum length: `0` characters. Maximum length: `5` characters.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetExternalVaultsVaultBindRuleTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Key. It can contain a maximum of `36` characters. It cannot be an empty string.
               Spaces before and after a key will be discarded. It cannot contain non-printable ASCII characters (`0`–`31`) and the
               following characters: =*<>,|/ It can contain only letters, digits, hyphens (-), and underscores (_).
        :param _builtins.str value: Value. It is mandatory when a tag is added and optional when a tag is deleted.
               It can contain a maximum of `43` characters. It can be an empty string.
               Spaces before and after a value will be discarded.
               It cannot contain non-printable ASCII characters (`0`–`31`) and the following characters: =*<>,|/
               It can contain only letters, digits, hyphens (-), underscores (_), and periods (.).
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Key. It can contain a maximum of `36` characters. It cannot be an empty string.
        Spaces before and after a key will be discarded. It cannot contain non-printable ASCII characters (`0`–`31`) and the
        following characters: =*<>,|/ It can contain only letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value. It is mandatory when a tag is added and optional when a tag is deleted.
        It can contain a maximum of `43` characters. It can be an empty string.
        Spaces before and after a value will be discarded.
        It cannot contain non-printable ASCII characters (`0`–`31`) and the following characters: =*<>,|/
        It can contain only letters, digits, hyphens (-), underscores (_), and periods (.).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetExternalVaultsVaultResourceResult(dict):
    def __init__(__self__, *,
                 backup_count: _builtins.int,
                 backup_size: _builtins.int,
                 extra_infos: Sequence['outputs.GetExternalVaultsVaultResourceExtraInfoResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 protect_status: _builtins.str,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int backup_count: Number of backups.
        :param _builtins.int backup_size: Backup size.
        :param Sequence['GetExternalVaultsVaultResourceExtraInfoArgs'] extra_infos: Extra information of the resource.
               The extra_info structure is documented below.
        :param _builtins.str id: ID of the resource to be backed up.
        :param _builtins.str name: Name of the resource to be backed up.
        :param _builtins.str protect_status: Protection status. Possible values are **available**, **error**, **protecting**, **restoring** or
               **removing**.
        :param _builtins.int size: Capacity, in GB.
        :param _builtins.str type: The resource type. Possible values are **OS::Nova::Server**, **OS::Cinder::Volume**,
               **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo** or **OS::Workspace::DesktopV2**.
        """
        pulumi.set(__self__, "backup_count", backup_count)
        pulumi.set(__self__, "backup_size", backup_size)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protect_status", protect_status)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="backupCount")
    def backup_count(self) -> _builtins.int:
        """
        Number of backups.
        """
        return pulumi.get(self, "backup_count")

    @_builtins.property
    @pulumi.getter(name="backupSize")
    def backup_size(self) -> _builtins.int:
        """
        Backup size.
        """
        return pulumi.get(self, "backup_size")

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetExternalVaultsVaultResourceExtraInfoResult']:
        """
        Extra information of the resource.
        The extra_info structure is documented below.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        ID of the resource to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the resource to be backed up.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> _builtins.str:
        """
        Protection status. Possible values are **available**, **error**, **protecting**, **restoring** or
        **removing**.
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Capacity, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type. Possible values are **OS::Nova::Server**, **OS::Cinder::Volume**,
        **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo** or **OS::Workspace::DesktopV2**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetExternalVaultsVaultResourceExtraInfoResult(dict):
    def __init__(__self__, *,
                 exclude_volumes: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] exclude_volumes: IDs of the disks that will not be backed up. This parameter is used when servers are
               added to a vault, which include all server disks. But some disks do not need to be backed up.
               Or in case that a server was previously added and some disks on this server do not need to be backed up.
        """
        pulumi.set(__self__, "exclude_volumes", exclude_volumes)

    @_builtins.property
    @pulumi.getter(name="excludeVolumes")
    def exclude_volumes(self) -> Sequence[_builtins.str]:
        """
        IDs of the disks that will not be backed up. This parameter is used when servers are
        added to a vault, which include all server disks. But some disks do not need to be backed up.
        Or in case that a server was previously added and some disks on this server do not need to be backed up.
        """
        return pulumi.get(self, "exclude_volumes")


@pulumi.output_type
class GetExternalVaultsVaultTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Key. It can contain a maximum of `36` characters. It cannot be an empty string.
               Spaces before and after a key will be discarded. It cannot contain non-printable ASCII characters (`0`–`31`) and the
               following characters: =*<>,|/ It can contain only letters, digits, hyphens (-), and underscores (_).
        :param _builtins.str value: Value. It is mandatory when a tag is added and optional when a tag is deleted.
               It can contain a maximum of `43` characters. It can be an empty string.
               Spaces before and after a value will be discarded.
               It cannot contain non-printable ASCII characters (`0`–`31`) and the following characters: =*<>,|/
               It can contain only letters, digits, hyphens (-), underscores (_), and periods (.).
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Key. It can contain a maximum of `36` characters. It cannot be an empty string.
        Spaces before and after a key will be discarded. It cannot contain non-printable ASCII characters (`0`–`31`) and the
        following characters: =*<>,|/ It can contain only letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value. It is mandatory when a tag is added and optional when a tag is deleted.
        It can contain a maximum of `43` characters. It can be an empty string.
        Spaces before and after a value will be discarded.
        It cannot contain non-printable ASCII characters (`0`–`31`) and the following characters: =*<>,|/
        It can contain only letters, digits, hyphens (-), underscores (_), and periods (.).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMigrateStatusProjectStatusResult(dict):
    def __init__(__self__, *,
                 fail_code: _builtins.int,
                 fail_reason: _builtins.str,
                 progress: _builtins.int,
                 project_id: _builtins.str,
                 project_name: _builtins.str,
                 region_id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.int fail_code: The failure code when migration fails. This field is only present when status is **failed**.
        :param _builtins.str fail_reason: The failure reason when migration fails. This field is only present when status is **failed**.
        :param _builtins.int progress: The migration progress percentage. The value ranges from `0` to `100`.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str project_name: The project name.
        :param _builtins.str region_id: The region ID.
        :param _builtins.str status: The migration status of the project. Possible values are:
               + **migrating**: Migration processing.
               + **success**: Migration completed successfully.
               + **failed**: Migration failed.
        """
        pulumi.set(__self__, "fail_code", fail_code)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="failCode")
    def fail_code(self) -> _builtins.int:
        """
        The failure code when migration fails. This field is only present when status is **failed**.
        """
        return pulumi.get(self, "fail_code")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        The failure reason when migration fails. This field is only present when status is **failed**.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        The migration progress percentage. The value ranges from `0` to `100`.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> _builtins.str:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The migration status of the project. Possible values are:
        + **migrating**: Migration processing.
        + **success**: Migration completed successfully.
        + **failed**: Migration failed.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetOperationLogsOperationLogResult(dict):
    def __init__(__self__, *,
                 checkpoint_id: _builtins.str,
                 created_at: _builtins.str,
                 ended_at: _builtins.str,
                 error_infos: Sequence['outputs.GetOperationLogsOperationLogErrorInfoResult'],
                 extra_infos: Sequence['outputs.GetOperationLogsOperationLogExtraInfoResult'],
                 id: _builtins.str,
                 operation_type: _builtins.str,
                 policy_id: _builtins.str,
                 provider_id: _builtins.str,
                 started_at: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 vault_id: _builtins.str,
                 vault_name: _builtins.str):
        """
        :param _builtins.str checkpoint_id: The backup record ID.
        :param _builtins.str created_at: The creat time of the task.
        :param _builtins.str ended_at: The end time of the task.
        :param Sequence['GetOperationLogsOperationLogErrorInfoArgs'] error_infos: The task error message.
               The error_info structure is documented below.
        :param Sequence['GetOperationLogsOperationLogExtraInfoArgs'] extra_infos: The extra information of the resource.
               The resource_extra_info structure is documented below.
        :param _builtins.str id: The ID of the resource to be backed up.
        :param _builtins.str operation_type: Specifies the task type. Possible values are **backup**, **copy**,
               **replication**, **restore**, **delete**, **sync**, **vault_delete**, or **remove_resource**.
        :param _builtins.str policy_id: The policy ID.
        :param _builtins.str provider_id: Specifies the backup provider ID, which specifies whether the backup object is a
               server or disk.
        :param _builtins.str started_at: The start time of the task.
        :param _builtins.str status: Specifies the task status. Possible values are **success**, **skipped**, **failed**,
               **running**, **timeout** or **waiting**.
        :param _builtins.str updated_at: The modification time of the task.
        :param _builtins.str vault_id: Specifies the ID of the vault with which the target resource is associated.
        :param _builtins.str vault_name: Specifies the name of the vault with which the target resource is associated.
        """
        pulumi.set(__self__, "checkpoint_id", checkpoint_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "ended_at", ended_at)
        pulumi.set(__self__, "error_infos", error_infos)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "provider_id", provider_id)
        pulumi.set(__self__, "started_at", started_at)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vault_id", vault_id)
        pulumi.set(__self__, "vault_name", vault_name)

    @_builtins.property
    @pulumi.getter(name="checkpointId")
    def checkpoint_id(self) -> _builtins.str:
        """
        The backup record ID.
        """
        return pulumi.get(self, "checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creat time of the task.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="endedAt")
    def ended_at(self) -> _builtins.str:
        """
        The end time of the task.
        """
        return pulumi.get(self, "ended_at")

    @_builtins.property
    @pulumi.getter(name="errorInfos")
    def error_infos(self) -> Sequence['outputs.GetOperationLogsOperationLogErrorInfoResult']:
        """
        The task error message.
        The error_info structure is documented below.
        """
        return pulumi.get(self, "error_infos")

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoResult']:
        """
        The extra information of the resource.
        The resource_extra_info structure is documented below.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the resource to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> _builtins.str:
        """
        Specifies the task type. Possible values are **backup**, **copy**,
        **replication**, **restore**, **delete**, **sync**, **vault_delete**, or **remove_resource**.
        """
        return pulumi.get(self, "operation_type")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The policy ID.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> _builtins.str:
        """
        Specifies the backup provider ID, which specifies whether the backup object is a
        server or disk.
        """
        return pulumi.get(self, "provider_id")

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> _builtins.str:
        """
        The start time of the task.
        """
        return pulumi.get(self, "started_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the task status. Possible values are **success**, **skipped**, **failed**,
        **running**, **timeout** or **waiting**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The modification time of the task.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        Specifies the ID of the vault with which the target resource is associated.
        """
        return pulumi.get(self, "vault_id")

    @_builtins.property
    @pulumi.getter(name="vaultName")
    def vault_name(self) -> _builtins.str:
        """
        Specifies the name of the vault with which the target resource is associated.
        """
        return pulumi.get(self, "vault_name")


@pulumi.output_type
class GetOperationLogsOperationLogErrorInfoResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 message: _builtins.str):
        """
        :param _builtins.str code: The error code. For details, see "CBR Error Codes" in Cloud Backup and Recovery User Guide.
               [reference](https://support.huaweicloud.com/intl/en-us/api-cbr/ErrorCode.html)
        :param _builtins.str message: The error message.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The error code. For details, see "CBR Error Codes" in Cloud Backup and Recovery User Guide.
        [reference](https://support.huaweicloud.com/intl/en-us/api-cbr/ErrorCode.html)
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoResult(dict):
    def __init__(__self__, *,
                 backups: Sequence['outputs.GetOperationLogsOperationLogExtraInfoBackupResult'],
                 commons: Sequence['outputs.GetOperationLogsOperationLogExtraInfoCommonResult'],
                 deletes: Sequence['outputs.GetOperationLogsOperationLogExtraInfoDeleteResult'],
                 remove_resources: Sequence['outputs.GetOperationLogsOperationLogExtraInfoRemoveResourceResult'],
                 replications: Sequence['outputs.GetOperationLogsOperationLogExtraInfoReplicationResult'],
                 resources: Sequence['outputs.GetOperationLogsOperationLogExtraInfoResourceResult'],
                 restores: Sequence['outputs.GetOperationLogsOperationLogExtraInfoRestoreResult'],
                 syncs: Sequence['outputs.GetOperationLogsOperationLogExtraInfoSyncResult'],
                 vault_deletes: Sequence['outputs.GetOperationLogsOperationLogExtraInfoVaultDeleteResult']):
        """
        :param Sequence['GetOperationLogsOperationLogExtraInfoBackupArgs'] backups: The extended parameters of backup.
               The backup structure is documented below.
        :param Sequence['GetOperationLogsOperationLogExtraInfoCommonArgs'] commons: The common parameters.
               The common structure is documented below.
        :param Sequence['GetOperationLogsOperationLogExtraInfoDeleteArgs'] deletes: The extended parameters of deletion.
               The delete structure is documented below.
        :param Sequence['GetOperationLogsOperationLogExtraInfoRemoveResourceArgs'] remove_resources: The extended parameters of removing resources from a vault.
               The remove_resources structure is documented below.
        :param Sequence['GetOperationLogsOperationLogExtraInfoReplicationArgs'] replications: The extended parameters of replication.
               The replication structure is documented below.
        :param Sequence['GetOperationLogsOperationLogExtraInfoResourceArgs'] resources: The resource information.
               The resource structure is documented below.
        :param Sequence['GetOperationLogsOperationLogExtraInfoRestoreArgs'] restores: The extended parameters of restoration.
               The restore structure is documented below.
        :param Sequence['GetOperationLogsOperationLogExtraInfoSyncArgs'] syncs: The extended parameters of synchronization.
               The sync structure is documented below.
        :param Sequence['GetOperationLogsOperationLogExtraInfoVaultDeleteArgs'] vault_deletes: The extended parameters of deleting a vault.
               The vault_delete structure is documented below.
        """
        pulumi.set(__self__, "backups", backups)
        pulumi.set(__self__, "commons", commons)
        pulumi.set(__self__, "deletes", deletes)
        pulumi.set(__self__, "remove_resources", remove_resources)
        pulumi.set(__self__, "replications", replications)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "restores", restores)
        pulumi.set(__self__, "syncs", syncs)
        pulumi.set(__self__, "vault_deletes", vault_deletes)

    @_builtins.property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoBackupResult']:
        """
        The extended parameters of backup.
        The backup structure is documented below.
        """
        return pulumi.get(self, "backups")

    @_builtins.property
    @pulumi.getter
    def commons(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoCommonResult']:
        """
        The common parameters.
        The common structure is documented below.
        """
        return pulumi.get(self, "commons")

    @_builtins.property
    @pulumi.getter
    def deletes(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoDeleteResult']:
        """
        The extended parameters of deletion.
        The delete structure is documented below.
        """
        return pulumi.get(self, "deletes")

    @_builtins.property
    @pulumi.getter(name="removeResources")
    def remove_resources(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoRemoveResourceResult']:
        """
        The extended parameters of removing resources from a vault.
        The remove_resources structure is documented below.
        """
        return pulumi.get(self, "remove_resources")

    @_builtins.property
    @pulumi.getter
    def replications(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoReplicationResult']:
        """
        The extended parameters of replication.
        The replication structure is documented below.
        """
        return pulumi.get(self, "replications")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoResourceResult']:
        """
        The resource information.
        The resource structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def restores(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoRestoreResult']:
        """
        The extended parameters of restoration.
        The restore structure is documented below.
        """
        return pulumi.get(self, "restores")

    @_builtins.property
    @pulumi.getter
    def syncs(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoSyncResult']:
        """
        The extended parameters of synchronization.
        The sync structure is documented below.
        """
        return pulumi.get(self, "syncs")

    @_builtins.property
    @pulumi.getter(name="vaultDeletes")
    def vault_deletes(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoVaultDeleteResult']:
        """
        The extended parameters of deleting a vault.
        The vault_delete structure is documented below.
        """
        return pulumi.get(self, "vault_deletes")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoBackupResult(dict):
    def __init__(__self__, *,
                 app_consistency_error_code: _builtins.str,
                 app_consistency_error_message: _builtins.str,
                 app_consistency_status: _builtins.str,
                 backup_id: _builtins.str,
                 backup_name: _builtins.str,
                 incremental: _builtins.bool):
        """
        :param _builtins.str app_consistency_error_code: The error code returned if application-consistent backup fails.
               For details, see "CBR Error Codes" in Cloud Backup and Recovery User Guide.
               [reference](https://support.huaweicloud.com/intl/en-us/api-cbr/ErrorCode.html)
        :param _builtins.str app_consistency_error_message: The error message returned if application-consistent backup fails.
        :param _builtins.str app_consistency_status: The application-consistent backup status.
        :param _builtins.str backup_id: The backup ID.
        :param _builtins.str backup_name: The backup name.
        :param _builtins.bool incremental: Whether incremental backup is used.
        """
        pulumi.set(__self__, "app_consistency_error_code", app_consistency_error_code)
        pulumi.set(__self__, "app_consistency_error_message", app_consistency_error_message)
        pulumi.set(__self__, "app_consistency_status", app_consistency_status)
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_name", backup_name)
        pulumi.set(__self__, "incremental", incremental)

    @_builtins.property
    @pulumi.getter(name="appConsistencyErrorCode")
    def app_consistency_error_code(self) -> _builtins.str:
        """
        The error code returned if application-consistent backup fails.
        For details, see "CBR Error Codes" in Cloud Backup and Recovery User Guide.
        [reference](https://support.huaweicloud.com/intl/en-us/api-cbr/ErrorCode.html)
        """
        return pulumi.get(self, "app_consistency_error_code")

    @_builtins.property
    @pulumi.getter(name="appConsistencyErrorMessage")
    def app_consistency_error_message(self) -> _builtins.str:
        """
        The error message returned if application-consistent backup fails.
        """
        return pulumi.get(self, "app_consistency_error_message")

    @_builtins.property
    @pulumi.getter(name="appConsistencyStatus")
    def app_consistency_status(self) -> _builtins.str:
        """
        The application-consistent backup status.
        """
        return pulumi.get(self, "app_consistency_status")

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        """
        The backup ID.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> _builtins.str:
        """
        The backup name.
        """
        return pulumi.get(self, "backup_name")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> _builtins.bool:
        """
        Whether incremental backup is used.
        """
        return pulumi.get(self, "incremental")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoCommonResult(dict):
    def __init__(__self__, *,
                 progress: _builtins.int,
                 request_id: _builtins.str,
                 task_id: _builtins.str):
        """
        :param _builtins.int progress: The progress of the query task. The value ranges from `0` to `100`.
        :param _builtins.str request_id: The request ID.
        :param _builtins.str task_id: The backup task ID.
        """
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        The progress of the query task. The value ranges from `0` to `100`.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The request ID.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        """
        The backup task ID.
        """
        return pulumi.get(self, "task_id")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoDeleteResult(dict):
    def __init__(__self__, *,
                 backup_id: _builtins.str,
                 backup_name: _builtins.str):
        """
        :param _builtins.str backup_id: The backup ID.
        :param _builtins.str backup_name: The backup name.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_name", backup_name)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        """
        The backup ID.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> _builtins.str:
        """
        The backup name.
        """
        return pulumi.get(self, "backup_name")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoRemoveResourceResult(dict):
    def __init__(__self__, *,
                 fail_count: _builtins.int,
                 resources: Sequence['outputs.GetOperationLogsOperationLogExtraInfoRemoveResourceResourceResult'],
                 total_count: _builtins.int):
        """
        :param _builtins.int fail_count: The number of resources that fail to be deleted.
        :param Sequence['GetOperationLogsOperationLogExtraInfoRemoveResourceResourceArgs'] resources: The resource information.
               The resource structure is documented below.
        :param _builtins.int total_count: The number of deleted backups.
        """
        pulumi.set(__self__, "fail_count", fail_count)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter(name="failCount")
    def fail_count(self) -> _builtins.int:
        """
        The number of resources that fail to be deleted.
        """
        return pulumi.get(self, "fail_count")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoRemoveResourceResourceResult']:
        """
        The resource information.
        The resource structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.int:
        """
        The number of deleted backups.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoRemoveResourceResourceResult(dict):
    def __init__(__self__, *,
                 extra_infos: Sequence['outputs.GetOperationLogsOperationLogExtraInfoRemoveResourceResourceExtraInfoResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['GetOperationLogsOperationLogExtraInfoRemoveResourceResourceExtraInfoArgs'] extra_infos: The extra information of the resource.
               The resource_extra_info structure is documented below.
        :param _builtins.str id: The ID of the resource to be backed up.
        :param _builtins.str name: The name of the resource to be backed up. The value consists of `0` to `255` characters.
        :param _builtins.str type: The resource type. Possible values are **OS::Nova::Server**, **OS::Cinder::Volume**,
               **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo** or **OS::Workspace::DesktopV2**.
        """
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoRemoveResourceResourceExtraInfoResult']:
        """
        The extra information of the resource.
        The resource_extra_info structure is documented below.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the resource to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the resource to be backed up. The value consists of `0` to `255` characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type. Possible values are **OS::Nova::Server**, **OS::Cinder::Volume**,
        **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo** or **OS::Workspace::DesktopV2**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoRemoveResourceResourceExtraInfoResult(dict):
    def __init__(__self__, *,
                 exclude_volumes: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] exclude_volumes: The IDs of the disks that will not be backed up. This parameter is used when servers are added to
               a vault, which include all server disks. But some disks do not need to be backed up. Or in case that a server was
               previously added and some disks on this server do not need to be backed up.
        """
        pulumi.set(__self__, "exclude_volumes", exclude_volumes)

    @_builtins.property
    @pulumi.getter(name="excludeVolumes")
    def exclude_volumes(self) -> Sequence[_builtins.str]:
        """
        The IDs of the disks that will not be backed up. This parameter is used when servers are added to
        a vault, which include all server disks. But some disks do not need to be backed up. Or in case that a server was
        previously added and some disks on this server do not need to be backed up.
        """
        return pulumi.get(self, "exclude_volumes")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoReplicationResult(dict):
    def __init__(__self__, *,
                 destination_backup_id: _builtins.str,
                 destination_backup_name: _builtins.str,
                 destination_checkpoint_id: _builtins.str,
                 destination_project_id: _builtins.str,
                 destination_region: _builtins.str,
                 source_backup_id: _builtins.str,
                 source_backup_name: _builtins.str,
                 source_checkpoint_id: _builtins.str,
                 source_project_id: _builtins.str,
                 source_region: _builtins.str):
        """
        :param _builtins.str destination_backup_id: The destination backup ID.
        :param _builtins.str destination_backup_name: The destination backup name.
        :param _builtins.str destination_checkpoint_id: The destination restore point ID.
        :param _builtins.str destination_project_id: The destination project ID.
        :param _builtins.str destination_region: The destination region.
        :param _builtins.str source_backup_id: The source backup ID.
        :param _builtins.str source_backup_name: The source backup name.
        :param _builtins.str source_checkpoint_id: The source restore point ID.
        :param _builtins.str source_project_id: The source project ID.
        :param _builtins.str source_region: The source region.
        """
        pulumi.set(__self__, "destination_backup_id", destination_backup_id)
        pulumi.set(__self__, "destination_backup_name", destination_backup_name)
        pulumi.set(__self__, "destination_checkpoint_id", destination_checkpoint_id)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "source_backup_id", source_backup_id)
        pulumi.set(__self__, "source_backup_name", source_backup_name)
        pulumi.set(__self__, "source_checkpoint_id", source_checkpoint_id)
        pulumi.set(__self__, "source_project_id", source_project_id)
        pulumi.set(__self__, "source_region", source_region)

    @_builtins.property
    @pulumi.getter(name="destinationBackupId")
    def destination_backup_id(self) -> _builtins.str:
        """
        The destination backup ID.
        """
        return pulumi.get(self, "destination_backup_id")

    @_builtins.property
    @pulumi.getter(name="destinationBackupName")
    def destination_backup_name(self) -> _builtins.str:
        """
        The destination backup name.
        """
        return pulumi.get(self, "destination_backup_name")

    @_builtins.property
    @pulumi.getter(name="destinationCheckpointId")
    def destination_checkpoint_id(self) -> _builtins.str:
        """
        The destination restore point ID.
        """
        return pulumi.get(self, "destination_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> _builtins.str:
        """
        The destination project ID.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        The destination region.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="sourceBackupId")
    def source_backup_id(self) -> _builtins.str:
        """
        The source backup ID.
        """
        return pulumi.get(self, "source_backup_id")

    @_builtins.property
    @pulumi.getter(name="sourceBackupName")
    def source_backup_name(self) -> _builtins.str:
        """
        The source backup name.
        """
        return pulumi.get(self, "source_backup_name")

    @_builtins.property
    @pulumi.getter(name="sourceCheckpointId")
    def source_checkpoint_id(self) -> _builtins.str:
        """
        The source restore point ID.
        """
        return pulumi.get(self, "source_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="sourceProjectId")
    def source_project_id(self) -> _builtins.str:
        """
        The source project ID.
        """
        return pulumi.get(self, "source_project_id")

    @_builtins.property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> _builtins.str:
        """
        The source region.
        """
        return pulumi.get(self, "source_region")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoResourceResult(dict):
    def __init__(__self__, *,
                 extra_infos: Sequence['outputs.GetOperationLogsOperationLogExtraInfoResourceExtraInfoResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['GetOperationLogsOperationLogExtraInfoResourceExtraInfoArgs'] extra_infos: The extra information of the resource.
               The resource_extra_info structure is documented below.
        :param _builtins.str id: The ID of the resource to be backed up.
        :param _builtins.str name: The name of the resource to be backed up. The value consists of `0` to `255` characters.
        :param _builtins.str type: The resource type. Possible values are **OS::Nova::Server**, **OS::Cinder::Volume**,
               **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo** or **OS::Workspace::DesktopV2**.
        """
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetOperationLogsOperationLogExtraInfoResourceExtraInfoResult']:
        """
        The extra information of the resource.
        The resource_extra_info structure is documented below.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the resource to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the resource to be backed up. The value consists of `0` to `255` characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type. Possible values are **OS::Nova::Server**, **OS::Cinder::Volume**,
        **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo** or **OS::Workspace::DesktopV2**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoResourceExtraInfoResult(dict):
    def __init__(__self__, *,
                 exclude_volumes: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] exclude_volumes: The IDs of the disks that will not be backed up. This parameter is used when servers are added to
               a vault, which include all server disks. But some disks do not need to be backed up. Or in case that a server was
               previously added and some disks on this server do not need to be backed up.
        """
        pulumi.set(__self__, "exclude_volumes", exclude_volumes)

    @_builtins.property
    @pulumi.getter(name="excludeVolumes")
    def exclude_volumes(self) -> Sequence[_builtins.str]:
        """
        The IDs of the disks that will not be backed up. This parameter is used when servers are added to
        a vault, which include all server disks. But some disks do not need to be backed up. Or in case that a server was
        previously added and some disks on this server do not need to be backed up.
        """
        return pulumi.get(self, "exclude_volumes")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoRestoreResult(dict):
    def __init__(__self__, *,
                 backup_id: _builtins.str,
                 backup_name: _builtins.str,
                 target_resource_id: _builtins.str,
                 target_resource_name: _builtins.str):
        """
        :param _builtins.str backup_id: The backup ID.
        :param _builtins.str backup_name: The backup name.
        :param _builtins.str target_resource_id: The ID of the resource to be restored.
        :param _builtins.str target_resource_name: The name of the resource to be restored.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_name", backup_name)
        pulumi.set(__self__, "target_resource_id", target_resource_id)
        pulumi.set(__self__, "target_resource_name", target_resource_name)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        """
        The backup ID.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> _builtins.str:
        """
        The backup name.
        """
        return pulumi.get(self, "backup_name")

    @_builtins.property
    @pulumi.getter(name="targetResourceId")
    def target_resource_id(self) -> _builtins.str:
        """
        The ID of the resource to be restored.
        """
        return pulumi.get(self, "target_resource_id")

    @_builtins.property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> _builtins.str:
        """
        The name of the resource to be restored.
        """
        return pulumi.get(self, "target_resource_name")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoSyncResult(dict):
    def __init__(__self__, *,
                 delete_backup_num: _builtins.int,
                 err_sync_backup_num: _builtins.int,
                 sync_backup_num: _builtins.int):
        """
        :param _builtins.int delete_backup_num: The number of deleted backups.
        :param _builtins.int err_sync_backup_num: The number of backups that failed to be synchronized.
        :param _builtins.int sync_backup_num: The number of synchronized backups.
        """
        pulumi.set(__self__, "delete_backup_num", delete_backup_num)
        pulumi.set(__self__, "err_sync_backup_num", err_sync_backup_num)
        pulumi.set(__self__, "sync_backup_num", sync_backup_num)

    @_builtins.property
    @pulumi.getter(name="deleteBackupNum")
    def delete_backup_num(self) -> _builtins.int:
        """
        The number of deleted backups.
        """
        return pulumi.get(self, "delete_backup_num")

    @_builtins.property
    @pulumi.getter(name="errSyncBackupNum")
    def err_sync_backup_num(self) -> _builtins.int:
        """
        The number of backups that failed to be synchronized.
        """
        return pulumi.get(self, "err_sync_backup_num")

    @_builtins.property
    @pulumi.getter(name="syncBackupNum")
    def sync_backup_num(self) -> _builtins.int:
        """
        The number of synchronized backups.
        """
        return pulumi.get(self, "sync_backup_num")


@pulumi.output_type
class GetOperationLogsOperationLogExtraInfoVaultDeleteResult(dict):
    def __init__(__self__, *,
                 fail_delete_count: _builtins.int,
                 total_delete_count: _builtins.int):
        """
        :param _builtins.int fail_delete_count: The number of resources that fail to be deleted in this task.
        :param _builtins.int total_delete_count: The number of backups deleted in this task.
        """
        pulumi.set(__self__, "fail_delete_count", fail_delete_count)
        pulumi.set(__self__, "total_delete_count", total_delete_count)

    @_builtins.property
    @pulumi.getter(name="failDeleteCount")
    def fail_delete_count(self) -> _builtins.int:
        """
        The number of resources that fail to be deleted in this task.
        """
        return pulumi.get(self, "fail_delete_count")

    @_builtins.property
    @pulumi.getter(name="totalDeleteCount")
    def total_delete_count(self) -> _builtins.int:
        """
        The number of backups deleted in this task.
        """
        return pulumi.get(self, "total_delete_count")


@pulumi.output_type
class GetPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 associated_vaults: Sequence['outputs.GetPoliciesPolicyAssociatedVaultResult'],
                 backup_cycles: Sequence['outputs.GetPoliciesPolicyBackupCycleResult'],
                 backup_quantity: _builtins.int,
                 destination_project_id: _builtins.str,
                 destination_region: _builtins.str,
                 enable_acceleration: _builtins.bool,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 long_term_retentions: Sequence['outputs.GetPoliciesPolicyLongTermRetentionResult'],
                 name: _builtins.str,
                 time_period: _builtins.int,
                 time_zone: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['GetPoliciesPolicyAssociatedVaultArgs'] associated_vaults: The vault associated with the CBR policy.
               The associated_vaults structure is documented below.
        :param Sequence['GetPoliciesPolicyBackupCycleArgs'] backup_cycles: The scheduling rule for the policy backup execution.
               The backup_cycle structure is documented below.
        :param _builtins.int backup_quantity: The maximum number of retained backups. The value ranges from `2` to `99,999`.
               This parameter and `time_period` are alternative.
        :param _builtins.str destination_project_id: The ID of the replication destination project.
        :param _builtins.str destination_region: The name of the replication destination region.
        :param _builtins.bool enable_acceleration: Whether to enable the acceleration function to shorten the replication time for cross-region.
               The valid values are as follows:
               + **true**: Enabled acceleration
               + **false**: Not enabled acceleration
        :param _builtins.bool enabled: Specifies the policy enabling status to query. The valid values are as follows:
               + **true**: Policy enabled
               + **false**: Policy not enabled
        :param _builtins.str id: The policy ID.
        :param Sequence['GetPoliciesPolicyLongTermRetentionArgs'] long_term_retentions: The long-term retention rules, which is an advanced options of the `backup_quantity`.
               The long_term_retention structure is documented below.
        :param _builtins.str name: Specifies the policy name used to query.
        :param _builtins.int time_period: The duration (in days) for retained backups. The value ranges from `2` to `99,999`.
        :param _builtins.str time_zone: The UTC time zone, e.g. `UTC+08:00`. Only available when `long_term_retention` is set.
        :param _builtins.str type: Specifies the policy type used to query. The valid values are as follows:
               + **backup**: Backup policy
               + **replication**: Replication policy
        """
        pulumi.set(__self__, "associated_vaults", associated_vaults)
        pulumi.set(__self__, "backup_cycles", backup_cycles)
        pulumi.set(__self__, "backup_quantity", backup_quantity)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "long_term_retentions", long_term_retentions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_period", time_period)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="associatedVaults")
    def associated_vaults(self) -> Sequence['outputs.GetPoliciesPolicyAssociatedVaultResult']:
        """
        The vault associated with the CBR policy.
        The associated_vaults structure is documented below.
        """
        return pulumi.get(self, "associated_vaults")

    @_builtins.property
    @pulumi.getter(name="backupCycles")
    def backup_cycles(self) -> Sequence['outputs.GetPoliciesPolicyBackupCycleResult']:
        """
        The scheduling rule for the policy backup execution.
        The backup_cycle structure is documented below.
        """
        return pulumi.get(self, "backup_cycles")

    @_builtins.property
    @pulumi.getter(name="backupQuantity")
    def backup_quantity(self) -> _builtins.int:
        """
        The maximum number of retained backups. The value ranges from `2` to `99,999`.
        This parameter and `time_period` are alternative.
        """
        return pulumi.get(self, "backup_quantity")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> _builtins.str:
        """
        The ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        The name of the replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> _builtins.bool:
        """
        Whether to enable the acceleration function to shorten the replication time for cross-region.
        The valid values are as follows:
        + **true**: Enabled acceleration
        + **false**: Not enabled acceleration
        """
        return pulumi.get(self, "enable_acceleration")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies the policy enabling status to query. The valid values are as follows:
        + **true**: Policy enabled
        + **false**: Policy not enabled
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The policy ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="longTermRetentions")
    def long_term_retentions(self) -> Sequence['outputs.GetPoliciesPolicyLongTermRetentionResult']:
        """
        The long-term retention rules, which is an advanced options of the `backup_quantity`.
        The long_term_retention structure is documented below.
        """
        return pulumi.get(self, "long_term_retentions")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the policy name used to query.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="timePeriod")
    def time_period(self) -> _builtins.int:
        """
        The duration (in days) for retained backups. The value ranges from `2` to `99,999`.
        """
        return pulumi.get(self, "time_period")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        The UTC time zone, e.g. `UTC+08:00`. Only available when `long_term_retention` is set.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the policy type used to query. The valid values are as follows:
        + **backup**: Backup policy
        + **replication**: Replication policy
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPoliciesPolicyAssociatedVaultResult(dict):
    def __init__(__self__, *,
                 destination_vault_id: _builtins.str,
                 vault_id: _builtins.str):
        """
        :param _builtins.str destination_vault_id: The destination vault ID associated with CBR policy.
        :param _builtins.str vault_id: Specifies the vault ID of the associated policy used to query.
        """
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID associated with CBR policy.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        Specifies the vault ID of the associated policy used to query.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetPoliciesPolicyBackupCycleResult(dict):
    def __init__(__self__, *,
                 days: _builtins.str,
                 execution_times: Sequence[_builtins.str],
                 interval: _builtins.int):
        """
        :param _builtins.str days: The weekly backup day of backup schedule. It supports seven days a week (MO, TU, WE, TH, FR, SA, SU)
               and this parameter is separated by a comma (,) without spaces between the date and date.
        :param Sequence[_builtins.str] execution_times: The backup time. Automated backups will be triggered at the backup
               time. The current time is in the UTC format (HH:MM).
        :param _builtins.int interval: The interval (in days) of backup schedule. The value range is `1` to `30`.
        """
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "execution_times", execution_times)
        pulumi.set(__self__, "interval", interval)

    @_builtins.property
    @pulumi.getter
    def days(self) -> _builtins.str:
        """
        The weekly backup day of backup schedule. It supports seven days a week (MO, TU, WE, TH, FR, SA, SU)
        and this parameter is separated by a comma (,) without spaces between the date and date.
        """
        return pulumi.get(self, "days")

    @_builtins.property
    @pulumi.getter(name="executionTimes")
    def execution_times(self) -> Sequence[_builtins.str]:
        """
        The backup time. Automated backups will be triggered at the backup
        time. The current time is in the UTC format (HH:MM).
        """
        return pulumi.get(self, "execution_times")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        The interval (in days) of backup schedule. The value range is `1` to `30`.
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class GetPoliciesPolicyLongTermRetentionResult(dict):
    def __init__(__self__, *,
                 daily: _builtins.int,
                 full_backup_interval: _builtins.int,
                 monthly: _builtins.int,
                 weekly: _builtins.int,
                 yearly: _builtins.int):
        """
        :param _builtins.int daily: The latest backup of each day is saved in the long term.
        :param _builtins.int full_backup_interval: How often (after how many incremental backups) a full backup is performed.
               The valid value ranges from `-1` to `100`. If `-1` is specified, full backup will not be performed.
        :param _builtins.int monthly: The latest backup of each month is saved in the long term.
        :param _builtins.int weekly: The latest backup of each week is saved in the long term.
        :param _builtins.int yearly: The latest backup of each year is saved in the long term.
        """
        pulumi.set(__self__, "daily", daily)
        pulumi.set(__self__, "full_backup_interval", full_backup_interval)
        pulumi.set(__self__, "monthly", monthly)
        pulumi.set(__self__, "weekly", weekly)
        pulumi.set(__self__, "yearly", yearly)

    @_builtins.property
    @pulumi.getter
    def daily(self) -> _builtins.int:
        """
        The latest backup of each day is saved in the long term.
        """
        return pulumi.get(self, "daily")

    @_builtins.property
    @pulumi.getter(name="fullBackupInterval")
    def full_backup_interval(self) -> _builtins.int:
        """
        How often (after how many incremental backups) a full backup is performed.
        The valid value ranges from `-1` to `100`. If `-1` is specified, full backup will not be performed.
        """
        return pulumi.get(self, "full_backup_interval")

    @_builtins.property
    @pulumi.getter
    def monthly(self) -> _builtins.int:
        """
        The latest backup of each month is saved in the long term.
        """
        return pulumi.get(self, "monthly")

    @_builtins.property
    @pulumi.getter
    def weekly(self) -> _builtins.int:
        """
        The latest backup of each week is saved in the long term.
        """
        return pulumi.get(self, "weekly")

    @_builtins.property
    @pulumi.getter
    def yearly(self) -> _builtins.int:
        """
        The latest backup of each year is saved in the long term.
        """
        return pulumi.get(self, "yearly")


@pulumi.output_type
class GetProtectableInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 children: _builtins.str,
                 detail: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 protectables: Sequence['outputs.GetProtectableInstancesInstanceProtectableResult'],
                 size: _builtins.int,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str children: The children resources. This field is a string in JSON format.
        :param _builtins.str detail: The resource detail. This field is a string in JSON format.
        :param _builtins.str id: The ID of the resource to be backed up.
        :param _builtins.str name: Specifies the resource name.
        :param Sequence['GetProtectableInstancesInstanceProtectableArgs'] protectables: The backup information.
        :param _builtins.int size: The allocated capacity for the associated resources, in GB.
        :param _builtins.str status: Specifies the resource status. Valid values are **available** and **error**.
        :param _builtins.str type: The type of the resource to be backed up, which can be **OS::Nova::Server**, **OS::Cinder::Volume**,
               **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo**, or **OS::Workspace::DesktopV2**.
        """
        pulumi.set(__self__, "children", children)
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protectables", protectables)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def children(self) -> _builtins.str:
        """
        The children resources. This field is a string in JSON format.
        """
        return pulumi.get(self, "children")

    @_builtins.property
    @pulumi.getter
    def detail(self) -> _builtins.str:
        """
        The resource detail. This field is a string in JSON format.
        """
        return pulumi.get(self, "detail")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the resource to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protectables(self) -> Sequence['outputs.GetProtectableInstancesInstanceProtectableResult']:
        """
        The backup information.
        """
        return pulumi.get(self, "protectables")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The allocated capacity for the associated resources, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the resource status. Valid values are **available** and **error**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the resource to be backed up, which can be **OS::Nova::Server**, **OS::Cinder::Volume**,
        **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo**, or **OS::Workspace::DesktopV2**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProtectableInstancesInstanceProtectableResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 message: _builtins.str,
                 reason: _builtins.str,
                 result: _builtins.bool,
                 vaults: Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultResult']):
        """
        :param _builtins.str code: The error code for unsupported backup.
        :param _builtins.str message: The reason why the resource cannot be backed up. This field is returned only if the resource protectability
               check fails.
        :param _builtins.str reason: The reason why backup is not supported.
        :param _builtins.bool result: Whether backup is supported.
        :param Sequence['GetProtectableInstancesInstanceProtectableVaultArgs'] vaults: The associated vault.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "vaults", vaults)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The error code for unsupported backup.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The reason why the resource cannot be backed up. This field is returned only if the resource protectability
        check fails.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def reason(self) -> _builtins.str:
        """
        The reason why backup is not supported.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def result(self) -> _builtins.bool:
        """
        Whether backup is supported.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter
    def vaults(self) -> Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultResult']:
        """
        The associated vault.
        """
        return pulumi.get(self, "vaults")


@pulumi.output_type
class GetProtectableInstancesInstanceProtectableVaultResult(dict):
    def __init__(__self__, *,
                 auto_bind: _builtins.bool,
                 auto_expand: _builtins.bool,
                 billings: Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultBillingResult'],
                 bind_rules: Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultBindRuleResult'],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 locked: _builtins.bool,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 provider_id: _builtins.str,
                 resources: Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultResourceResult'],
                 smn_notify: _builtins.bool,
                 sys_lock_source_service: _builtins.str,
                 tags: Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultTagResult'],
                 threshold: _builtins.int,
                 updated_at: _builtins.str,
                 user_id: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.bool auto_bind: Whether automatic association is enabled. Its default value is **false** (not enabled).
        :param _builtins.bool auto_expand: Whether to enable auto capacity expansion for the vault. Only pay-per-use vaults support this function.
        :param Sequence['GetProtectableInstancesInstanceProtectableVaultBillingArgs'] billings: The operation information.
        :param Sequence['GetProtectableInstancesInstanceProtectableVaultBindRuleArgs'] bind_rules: The association rules.
        :param _builtins.str created_at: The creation time. For example, **2020-02-05T10:38:34.209782**.
        :param _builtins.str description: The user-defined vault description.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
               For enterprise users, if omitted, all enterprise project resources will be queried.
        :param _builtins.str id: The ID of the resource to be backed up.
        :param _builtins.bool locked: Whether the vault is locked. A locked vault cannot be unlocked.
        :param _builtins.str name: Specifies the resource name.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str provider_id: The ID of the vault resource type.
        :param Sequence['GetProtectableInstancesInstanceProtectableVaultResourceArgs'] resources: The resources.
        :param _builtins.bool smn_notify: The SMN notification switch for the vault.
        :param _builtins.str sys_lock_source_service: The identity of the SMB service.
        :param Sequence['GetProtectableInstancesInstanceProtectableVaultTagArgs'] tags: The tags using to filter automatically associated resources.
        :param _builtins.int threshold: The vault capacity threshold. If the vault capacity usage exceeds this threshold, an exception
               notification is sent.
        :param _builtins.str updated_at: The latest update time. For example, **2020-02-05T10:38:34.209782**.
        :param _builtins.str user_id: The user ID.
        :param _builtins.str version: The version.
        """
        pulumi.set(__self__, "auto_bind", auto_bind)
        pulumi.set(__self__, "auto_expand", auto_expand)
        pulumi.set(__self__, "billings", billings)
        pulumi.set(__self__, "bind_rules", bind_rules)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "locked", locked)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "provider_id", provider_id)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "smn_notify", smn_notify)
        pulumi.set(__self__, "sys_lock_source_service", sys_lock_source_service)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="autoBind")
    def auto_bind(self) -> _builtins.bool:
        """
        Whether automatic association is enabled. Its default value is **false** (not enabled).
        """
        return pulumi.get(self, "auto_bind")

    @_builtins.property
    @pulumi.getter(name="autoExpand")
    def auto_expand(self) -> _builtins.bool:
        """
        Whether to enable auto capacity expansion for the vault. Only pay-per-use vaults support this function.
        """
        return pulumi.get(self, "auto_expand")

    @_builtins.property
    @pulumi.getter
    def billings(self) -> Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultBillingResult']:
        """
        The operation information.
        """
        return pulumi.get(self, "billings")

    @_builtins.property
    @pulumi.getter(name="bindRules")
    def bind_rules(self) -> Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultBindRuleResult']:
        """
        The association rules.
        """
        return pulumi.get(self, "bind_rules")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time. For example, **2020-02-05T10:38:34.209782**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The user-defined vault description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID.
        For enterprise users, if omitted, all enterprise project resources will be queried.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the resource to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> _builtins.bool:
        """
        Whether the vault is locked. A locked vault cannot be unlocked.
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> _builtins.str:
        """
        The ID of the vault resource type.
        """
        return pulumi.get(self, "provider_id")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultResourceResult']:
        """
        The resources.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="smnNotify")
    def smn_notify(self) -> _builtins.bool:
        """
        The SMN notification switch for the vault.
        """
        return pulumi.get(self, "smn_notify")

    @_builtins.property
    @pulumi.getter(name="sysLockSourceService")
    def sys_lock_source_service(self) -> _builtins.str:
        """
        The identity of the SMB service.
        """
        return pulumi.get(self, "sys_lock_source_service")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultTagResult']:
        """
        The tags using to filter automatically associated resources.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.int:
        """
        The vault capacity threshold. If the vault capacity usage exceeds this threshold, an exception
        notification is sent.
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time. For example, **2020-02-05T10:38:34.209782**.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The user ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProtectableInstancesInstanceProtectableVaultBillingResult(dict):
    def __init__(__self__, *,
                 allocated: _builtins.int,
                 charging_mode: _builtins.str,
                 cloud_type: _builtins.str,
                 consistent_level: _builtins.str,
                 frozen_scene: _builtins.str,
                 is_multi_az: _builtins.bool,
                 object_type: _builtins.str,
                 order_id: _builtins.str,
                 product_id: _builtins.str,
                 protect_type: _builtins.str,
                 size: _builtins.int,
                 spec_code: _builtins.str,
                 status: _builtins.str,
                 storage_unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int allocated: The allocated capacity, in GB.
        :param _builtins.str charging_mode: The charging mode, which can be **post_paid** (pay-per-use) or **pre_paid** (yearly/monthly).
               The default value is **post_paid**.
        :param _builtins.str cloud_type: The cloud type. Which can be **public** or **hybrid**.
        :param _builtins.str consistent_level: The backup specifications. Which can be **crash_consistent** (crash consistent backup) or
               **app_consistent** (application consistency backup).
        :param _builtins.str frozen_scene: The scenario when an account is frozen.
        :param _builtins.bool is_multi_az: The multi-AZ attribute of a vault.
        :param _builtins.str object_type: The object type, which can be **server**, **disk**, **turbo**, **workspace**, **vmware**, **rds**, or **file**.
        :param _builtins.str order_id: The order ID.
        :param _builtins.str product_id: The product ID.
        :param _builtins.str protect_type: The protection type, which can be **backup** or **replication**.
        :param _builtins.int size: The allocated capacity for the associated resources, in GB.
        :param _builtins.str spec_code: The specification code, which can be **vault.backup.server.normal** (server vault),
               **vault.backup.volume.normal** (disk vault), or **vault.backup.turbo.normal** (file system vault).
        :param _builtins.str status: Specifies the resource status. Valid values are **available** and **error**.
        :param _builtins.str storage_unit: The name of the bucket for the vault.
        :param _builtins.int used: The used capacity, in MB.
        """
        pulumi.set(__self__, "allocated", allocated)
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "cloud_type", cloud_type)
        pulumi.set(__self__, "consistent_level", consistent_level)
        pulumi.set(__self__, "frozen_scene", frozen_scene)
        pulumi.set(__self__, "is_multi_az", is_multi_az)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "protect_type", protect_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_unit", storage_unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def allocated(self) -> _builtins.int:
        """
        The allocated capacity, in GB.
        """
        return pulumi.get(self, "allocated")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> _builtins.str:
        """
        The charging mode, which can be **post_paid** (pay-per-use) or **pre_paid** (yearly/monthly).
        The default value is **post_paid**.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> _builtins.str:
        """
        The cloud type. Which can be **public** or **hybrid**.
        """
        return pulumi.get(self, "cloud_type")

    @_builtins.property
    @pulumi.getter(name="consistentLevel")
    def consistent_level(self) -> _builtins.str:
        """
        The backup specifications. Which can be **crash_consistent** (crash consistent backup) or
        **app_consistent** (application consistency backup).
        """
        return pulumi.get(self, "consistent_level")

    @_builtins.property
    @pulumi.getter(name="frozenScene")
    def frozen_scene(self) -> _builtins.str:
        """
        The scenario when an account is frozen.
        """
        return pulumi.get(self, "frozen_scene")

    @_builtins.property
    @pulumi.getter(name="isMultiAz")
    def is_multi_az(self) -> _builtins.bool:
        """
        The multi-AZ attribute of a vault.
        """
        return pulumi.get(self, "is_multi_az")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The object type, which can be **server**, **disk**, **turbo**, **workspace**, **vmware**, **rds**, or **file**.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        The order ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        The product ID.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="protectType")
    def protect_type(self) -> _builtins.str:
        """
        The protection type, which can be **backup** or **replication**.
        """
        return pulumi.get(self, "protect_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The allocated capacity for the associated resources, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        The specification code, which can be **vault.backup.server.normal** (server vault),
        **vault.backup.volume.normal** (disk vault), or **vault.backup.turbo.normal** (file system vault).
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the resource status. Valid values are **available** and **error**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageUnit")
    def storage_unit(self) -> _builtins.str:
        """
        The name of the bucket for the vault.
        """
        return pulumi.get(self, "storage_unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The used capacity, in MB.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetProtectableInstancesInstanceProtectableVaultBindRuleResult(dict):
    def __init__(__self__, *,
                 tags: Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultBindRuleTagResult']):
        """
        :param Sequence['GetProtectableInstancesInstanceProtectableVaultBindRuleTagArgs'] tags: The tags using to filter automatically associated resources.
        """
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultBindRuleTagResult']:
        """
        The tags using to filter automatically associated resources.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetProtectableInstancesInstanceProtectableVaultBindRuleTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The tag key.
        :param _builtins.str value: The tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProtectableInstancesInstanceProtectableVaultResourceResult(dict):
    def __init__(__self__, *,
                 backup_count: _builtins.int,
                 backup_size: _builtins.int,
                 extra_infos: Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultResourceExtraInfoResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 protect_status: _builtins.str,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int backup_count: The number of backups.
        :param _builtins.int backup_size: The backup size.
        :param Sequence['GetProtectableInstancesInstanceProtectableVaultResourceExtraInfoArgs'] extra_infos: The additional information of the resource.
        :param _builtins.str id: The ID of the resource to be backed up.
        :param _builtins.str name: Specifies the resource name.
        :param _builtins.str protect_status: The protection status.
        :param _builtins.int size: The allocated capacity for the associated resources, in GB.
        :param _builtins.str type: The type of the resource to be backed up, which can be **OS::Nova::Server**, **OS::Cinder::Volume**,
               **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo**, or **OS::Workspace::DesktopV2**.
        """
        pulumi.set(__self__, "backup_count", backup_count)
        pulumi.set(__self__, "backup_size", backup_size)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protect_status", protect_status)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="backupCount")
    def backup_count(self) -> _builtins.int:
        """
        The number of backups.
        """
        return pulumi.get(self, "backup_count")

    @_builtins.property
    @pulumi.getter(name="backupSize")
    def backup_size(self) -> _builtins.int:
        """
        The backup size.
        """
        return pulumi.get(self, "backup_size")

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetProtectableInstancesInstanceProtectableVaultResourceExtraInfoResult']:
        """
        The additional information of the resource.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the resource to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> _builtins.str:
        """
        The protection status.
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The allocated capacity for the associated resources, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the resource to be backed up, which can be **OS::Nova::Server**, **OS::Cinder::Volume**,
        **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo**, or **OS::Workspace::DesktopV2**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProtectableInstancesInstanceProtectableVaultResourceExtraInfoResult(dict):
    def __init__(__self__, *,
                 exclude_volumes: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] exclude_volumes: The ID of the disk that will not be backed up. This parameter is used when servers are added to a
               vault, which include all server disks. But some disks do not need to be backed up. Or in case that a server was
               previously added and some disks on this server do not need to be backed up.
        """
        pulumi.set(__self__, "exclude_volumes", exclude_volumes)

    @_builtins.property
    @pulumi.getter(name="excludeVolumes")
    def exclude_volumes(self) -> Sequence[_builtins.str]:
        """
        The ID of the disk that will not be backed up. This parameter is used when servers are added to a
        vault, which include all server disks. But some disks do not need to be backed up. Or in case that a server was
        previously added and some disks on this server do not need to be backed up.
        """
        return pulumi.get(self, "exclude_volumes")


@pulumi.output_type
class GetProtectableInstancesInstanceProtectableVaultTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The tag key.
        :param _builtins.str value: The tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRegionProjectsLinkResult(dict):
    def __init__(__self__, *,
                 self: _builtins.str):
        """
        :param _builtins.str self: The link address.
        """
        pulumi.set(__self__, "self", self)

    @_builtins.property
    @pulumi.getter
    def self(self) -> _builtins.str:
        """
        The link address.
        """
        return pulumi.get(self, "self")


@pulumi.output_type
class GetRegionProjectsProjectResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 domain_id: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 is_domain: _builtins.bool,
                 links: Sequence['outputs.GetRegionProjectsProjectLinkResult'],
                 name: _builtins.str,
                 parent_id: _builtins.str):
        """
        :param _builtins.str description: The description.
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.bool enabled: The enabling status of the project.
        :param _builtins.str id: The project ID.
        :param _builtins.bool is_domain: The domain level sign.
        :param Sequence['GetRegionProjectsProjectLinkArgs'] links: The link address.
               The links structure is documented below.
        :param _builtins.str name: The backup region name.
        :param _builtins.str parent_id: The ID of the specific project or account ID of a specific system project.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_domain", is_domain)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_id", parent_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        The enabling status of the project.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDomain")
    def is_domain(self) -> _builtins.bool:
        """
        The domain level sign.
        """
        return pulumi.get(self, "is_domain")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetRegionProjectsProjectLinkResult']:
        """
        The link address.
        The links structure is documented below.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The backup region name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        The ID of the specific project or account ID of a specific system project.
        """
        return pulumi.get(self, "parent_id")


@pulumi.output_type
class GetRegionProjectsProjectLinkResult(dict):
    def __init__(__self__, *,
                 self: _builtins.str):
        """
        :param _builtins.str self: The link address.
        """
        pulumi.set(__self__, "self", self)

    @_builtins.property
    @pulumi.getter
    def self(self) -> _builtins.str:
        """
        The link address.
        """
        return pulumi.get(self, "self")


@pulumi.output_type
class GetReplicationCapabilitiesRegionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 replication_destinations: Sequence[_builtins.str]):
        """
        :param _builtins.str name: Region where the cloud service resides
        :param Sequence[_builtins.str] replication_destinations: List of supported destination regions
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replication_destinations", replication_destinations)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Region where the cloud service resides
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="replicationDestinations")
    def replication_destinations(self) -> Sequence[_builtins.str]:
        """
        List of supported destination regions
        """
        return pulumi.get(self, "replication_destinations")


@pulumi.output_type
class GetStorageUsagesStorageUsageResult(dict):
    def __init__(__self__, *,
                 backup_count: _builtins.int,
                 backup_size: _builtins.int,
                 backup_size_multiaz: _builtins.int,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 resource_type: _builtins.str):
        """
        :param _builtins.int backup_count: The number of backups.
        :param _builtins.int backup_size: The size of backups in bytes.
        :param _builtins.int backup_size_multiaz: The size of multi-AZ backups in bytes.
        :param _builtins.str resource_id: Specifies the ID of the resource to filter the storage usage.
        :param _builtins.str resource_name: The name of the resource.
        :param _builtins.str resource_type: Specifies the type of the resource to filter by.
               Valid values are **OS::Nova::Server**, **OS::Cinder::Volume**, **OS::Ironic::BareMetalServer**,
               **OS::Native::Server**, **OS::Sfs::Turbo**, **OS::Workspace::DesktopV2**.
        """
        pulumi.set(__self__, "backup_count", backup_count)
        pulumi.set(__self__, "backup_size", backup_size)
        pulumi.set(__self__, "backup_size_multiaz", backup_size_multiaz)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="backupCount")
    def backup_count(self) -> _builtins.int:
        """
        The number of backups.
        """
        return pulumi.get(self, "backup_count")

    @_builtins.property
    @pulumi.getter(name="backupSize")
    def backup_size(self) -> _builtins.int:
        """
        The size of backups in bytes.
        """
        return pulumi.get(self, "backup_size")

    @_builtins.property
    @pulumi.getter(name="backupSizeMultiaz")
    def backup_size_multiaz(self) -> _builtins.int:
        """
        The size of multi-AZ backups in bytes.
        """
        return pulumi.get(self, "backup_size_multiaz")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the ID of the resource to filter the storage usage.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the type of the resource to filter by.
        Valid values are **OS::Nova::Server**, **OS::Cinder::Volume**, **OS::Ironic::BareMetalServer**,
        **OS::Native::Server**, **OS::Sfs::Turbo**, **OS::Workspace::DesktopV2**.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the resource tag.
        :param Sequence[_builtins.str] values: All values corresponding to the key.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the resource tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        All values corresponding to the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVaultsByTagsMatchResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param _builtins.str value: Specifies the value of the resource tag.
               A value consists of up to `255` characters.
               If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the resource tag.
        A value consists of up to `255` characters.
        If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVaultsByTagsNotTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param Sequence[_builtins.str] values: Specifies the list of values. Currently, only the enterprise project ID is used.
               The default enterprise project ID is `0`.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVaultsByTagsNotTagsAnyResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param Sequence[_builtins.str] values: Specifies the list of values. Currently, only the enterprise project ID is used.
               The default enterprise project ID is `0`.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVaultsByTagsResourceResult(dict):
    def __init__(__self__, *,
                 resource_details: Sequence['outputs.GetVaultsByTagsResourceResourceDetailResult'],
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 sys_tags: Sequence['outputs.GetVaultsByTagsResourceSysTagResult'],
                 tags: Sequence['outputs.GetVaultsByTagsResourceTagResult']):
        """
        :param Sequence['GetVaultsByTagsResourceResourceDetailArgs'] resource_details: The detail of the matched resources.
               The resource_detail structure is documented below.
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str resource_name: The resource name.
        :param Sequence['GetVaultsByTagsResourceSysTagArgs'] sys_tags: Specifies the system tags.
               The sys_tags structure is documented below.
               
               > The sys_tags has limits as follows:
               <br/>1. Only users with the op_service permission can obtain this field.
               <br/>2. Field `sys_tags` and tag filter conditions (`tags`, `tags_any`, `not_tags`, `not_tags_any`)
               cannot  be used at the same time.
               <br/>3. If no `sys_tags` exists, use other tag APIs for filtering. If no tag filter is specified, full data is returned.
               <br/>4. This list cannot be an empty list.
        :param Sequence['GetVaultsByTagsResourceTagArgs'] tags: Specifies the list of included tags. Backups with these tags will be filtered.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "resource_details", resource_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "sys_tags", sys_tags)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceDetails")
    def resource_details(self) -> Sequence['outputs.GetVaultsByTagsResourceResourceDetailResult']:
        """
        The detail of the matched resources.
        The resource_detail structure is documented below.
        """
        return pulumi.get(self, "resource_details")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="sysTags")
    def sys_tags(self) -> Sequence['outputs.GetVaultsByTagsResourceSysTagResult']:
        """
        Specifies the system tags.
        The sys_tags structure is documented below.

        > The sys_tags has limits as follows:
        <br/>1. Only users with the op_service permission can obtain this field.
        <br/>2. Field `sys_tags` and tag filter conditions (`tags`, `tags_any`, `not_tags`, `not_tags_any`)
        cannot  be used at the same time.
        <br/>3. If no `sys_tags` exists, use other tag APIs for filtering. If no tag filter is specified, full data is returned.
        <br/>4. This list cannot be an empty list.
        """
        return pulumi.get(self, "sys_tags")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVaultsByTagsResourceTagResult']:
        """
        Specifies the list of included tags. Backups with these tags will be filtered.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetVaultsByTagsResourceResourceDetailResult(dict):
    def __init__(__self__, *,
                 vaults: Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultResult']):
        """
        :param Sequence['GetVaultsByTagsResourceResourceDetailVaultArgs'] vaults: The attributes of all vault.
               The vault structure is documented below.
        """
        pulumi.set(__self__, "vaults", vaults)

    @_builtins.property
    @pulumi.getter
    def vaults(self) -> Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultResult']:
        """
        The attributes of all vault.
        The vault structure is documented below.
        """
        return pulumi.get(self, "vaults")


@pulumi.output_type
class GetVaultsByTagsResourceResourceDetailVaultResult(dict):
    def __init__(__self__, *,
                 auto_bind: _builtins.bool,
                 auto_expand: _builtins.bool,
                 billings: Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultBillingResult'],
                 bind_rules: Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultBindRuleResult'],
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 locked: _builtins.bool,
                 name: _builtins.str,
                 provider_id: _builtins.str,
                 resources: Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultResourceResult'],
                 smn_notify: _builtins.bool,
                 sys_lock_source_service: _builtins.str,
                 tags: Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultTagResult'],
                 threshold: _builtins.int,
                 user_id: _builtins.str):
        """
        :param _builtins.bool auto_bind: Whether automatic association is enabled. Defaults to **false**.
        :param _builtins.bool auto_expand: Whether to enable auto capacity expansion for the vault.
               Only pay-per-use vaults support auto capacity expansion.
        :param Sequence['GetVaultsByTagsResourceResourceDetailVaultBillingArgs'] billings: The operation info.
               The billing structure is documented below.
        :param Sequence['GetVaultsByTagsResourceResourceDetailVaultBindRuleArgs'] bind_rules: The association rule.
               The bind_rules structure is documented below.
        :param _builtins.str created_at: The creation time.
        :param _builtins.str description: The vault description.
        :param _builtins.str enterprise_project_id: Specifies the ID of enterprise project.
        :param _builtins.str id: The ID of the resource to be backed up.
        :param _builtins.bool locked: Whether the vault is locked. A locked vault cannot be unlocked.
        :param _builtins.str name: The name of the resource to be backed up.
        :param _builtins.str provider_id: The ID of the vault resource type.
        :param Sequence['GetVaultsByTagsResourceResourceDetailVaultResourceArgs'] resources: The attributes of all vault resources.
               The resources structure is documented below.
        :param _builtins.bool smn_notify: Whether enabled SMN message notification.
        :param _builtins.str sys_lock_source_service: The identifier for the SMB service.
        :param Sequence['GetVaultsByTagsResourceResourceDetailVaultTagArgs'] tags: Specifies the list of included tags. Backups with these tags will be filtered.
               The tags structure is documented below.
        :param _builtins.int threshold: The vault capacity threshold. If the vault capacity usage exceeds this threshold, an exception
               notification is sent.
        :param _builtins.str user_id: The user ID.
        """
        pulumi.set(__self__, "auto_bind", auto_bind)
        pulumi.set(__self__, "auto_expand", auto_expand)
        pulumi.set(__self__, "billings", billings)
        pulumi.set(__self__, "bind_rules", bind_rules)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "locked", locked)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provider_id", provider_id)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "smn_notify", smn_notify)
        pulumi.set(__self__, "sys_lock_source_service", sys_lock_source_service)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter(name="autoBind")
    def auto_bind(self) -> _builtins.bool:
        """
        Whether automatic association is enabled. Defaults to **false**.
        """
        return pulumi.get(self, "auto_bind")

    @_builtins.property
    @pulumi.getter(name="autoExpand")
    def auto_expand(self) -> _builtins.bool:
        """
        Whether to enable auto capacity expansion for the vault.
        Only pay-per-use vaults support auto capacity expansion.
        """
        return pulumi.get(self, "auto_expand")

    @_builtins.property
    @pulumi.getter
    def billings(self) -> Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultBillingResult']:
        """
        The operation info.
        The billing structure is documented below.
        """
        return pulumi.get(self, "billings")

    @_builtins.property
    @pulumi.getter(name="bindRules")
    def bind_rules(self) -> Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultBindRuleResult']:
        """
        The association rule.
        The bind_rules structure is documented below.
        """
        return pulumi.get(self, "bind_rules")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The vault description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the resource to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> _builtins.bool:
        """
        Whether the vault is locked. A locked vault cannot be unlocked.
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the resource to be backed up.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> _builtins.str:
        """
        The ID of the vault resource type.
        """
        return pulumi.get(self, "provider_id")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultResourceResult']:
        """
        The attributes of all vault resources.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="smnNotify")
    def smn_notify(self) -> _builtins.bool:
        """
        Whether enabled SMN message notification.
        """
        return pulumi.get(self, "smn_notify")

    @_builtins.property
    @pulumi.getter(name="sysLockSourceService")
    def sys_lock_source_service(self) -> _builtins.str:
        """
        The identifier for the SMB service.
        """
        return pulumi.get(self, "sys_lock_source_service")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultTagResult']:
        """
        Specifies the list of included tags. Backups with these tags will be filtered.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.int:
        """
        The vault capacity threshold. If the vault capacity usage exceeds this threshold, an exception
        notification is sent.
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The user ID.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetVaultsByTagsResourceResourceDetailVaultBillingResult(dict):
    def __init__(__self__, *,
                 allocated: _builtins.int,
                 charging_mode: _builtins.str,
                 cloud_type: _builtins.str,
                 consistent_level: _builtins.str,
                 frozen_scene: _builtins.str,
                 is_multi_az: _builtins.bool,
                 object_type: _builtins.str,
                 order_id: _builtins.str,
                 product_id: _builtins.str,
                 protect_type: _builtins.str,
                 size: _builtins.int,
                 spec_code: _builtins.str,
                 status: _builtins.str,
                 storage_unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int allocated: The allocated capacity, in GB.
        :param _builtins.str charging_mode: The billing mode. Possible values are:
               + **post_paid**: pay-per-use.
               + **pre_paid**: yearly/monthly.
        :param _builtins.str cloud_type: Specifies cloud type of the instances. Possible values are:
               + **public**: public cloud.
               + **hybrid**: hybrid cloud.
        :param _builtins.str consistent_level: The consistency level. Possible values are:
               + **crash_consistent**: crash consistent backup.
               + **app_consistent**: application consistency backup.
        :param _builtins.str frozen_scene: The scenario when an account is frozen.
        :param _builtins.bool is_multi_az: Whether the vault is multi-AZ.
        :param _builtins.str object_type: Specifies resource type of the instances. Possible values are:
               + **server**: elastic cloud server.
               + **disk**: elastic volume server.
               
               <a name="tags_struct"></a>
               The `tags` block supports:
        :param _builtins.str order_id: The order ID.
        :param _builtins.str product_id: The product ID.
        :param _builtins.str protect_type: The protection type. Possible values are: **backup** and **replication**
        :param _builtins.int size: The capacity, in GB.
        :param _builtins.str spec_code: The product specification code.
        :param _builtins.str status: The vault status.
        :param _builtins.str storage_unit: The name of the bucket for the vault.
        :param _builtins.int used: The used capacity, in MB.
        """
        pulumi.set(__self__, "allocated", allocated)
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "cloud_type", cloud_type)
        pulumi.set(__self__, "consistent_level", consistent_level)
        pulumi.set(__self__, "frozen_scene", frozen_scene)
        pulumi.set(__self__, "is_multi_az", is_multi_az)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "protect_type", protect_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_unit", storage_unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def allocated(self) -> _builtins.int:
        """
        The allocated capacity, in GB.
        """
        return pulumi.get(self, "allocated")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> _builtins.str:
        """
        The billing mode. Possible values are:
        + **post_paid**: pay-per-use.
        + **pre_paid**: yearly/monthly.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> _builtins.str:
        """
        Specifies cloud type of the instances. Possible values are:
        + **public**: public cloud.
        + **hybrid**: hybrid cloud.
        """
        return pulumi.get(self, "cloud_type")

    @_builtins.property
    @pulumi.getter(name="consistentLevel")
    def consistent_level(self) -> _builtins.str:
        """
        The consistency level. Possible values are:
        + **crash_consistent**: crash consistent backup.
        + **app_consistent**: application consistency backup.
        """
        return pulumi.get(self, "consistent_level")

    @_builtins.property
    @pulumi.getter(name="frozenScene")
    def frozen_scene(self) -> _builtins.str:
        """
        The scenario when an account is frozen.
        """
        return pulumi.get(self, "frozen_scene")

    @_builtins.property
    @pulumi.getter(name="isMultiAz")
    def is_multi_az(self) -> _builtins.bool:
        """
        Whether the vault is multi-AZ.
        """
        return pulumi.get(self, "is_multi_az")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        Specifies resource type of the instances. Possible values are:
        + **server**: elastic cloud server.
        + **disk**: elastic volume server.

        <a name="tags_struct"></a>
        The `tags` block supports:
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        The order ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        The product ID.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="protectType")
    def protect_type(self) -> _builtins.str:
        """
        The protection type. Possible values are: **backup** and **replication**
        """
        return pulumi.get(self, "protect_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The capacity, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        The product specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The vault status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageUnit")
    def storage_unit(self) -> _builtins.str:
        """
        The name of the bucket for the vault.
        """
        return pulumi.get(self, "storage_unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The used capacity, in MB.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetVaultsByTagsResourceResourceDetailVaultBindRuleResult(dict):
    def __init__(__self__, *,
                 tags: Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultBindRuleTagResult']):
        """
        :param Sequence['GetVaultsByTagsResourceResourceDetailVaultBindRuleTagArgs'] tags: Specifies the list of included tags. Backups with these tags will be filtered.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultBindRuleTagResult']:
        """
        Specifies the list of included tags. Backups with these tags will be filtered.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetVaultsByTagsResourceResourceDetailVaultBindRuleTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param _builtins.str value: Specifies the value of the resource tag.
               A value consists of up to `255` characters.
               If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the resource tag.
        A value consists of up to `255` characters.
        If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVaultsByTagsResourceResourceDetailVaultResourceResult(dict):
    def __init__(__self__, *,
                 backup_count: _builtins.int,
                 backup_size: _builtins.int,
                 extra_infos: Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultResourceExtraInfoResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 protect_status: _builtins.str,
                 size: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.int backup_count: The number of backups.
        :param _builtins.int backup_size: The backup size, in GB.
        :param Sequence['GetVaultsByTagsResourceResourceDetailVaultResourceExtraInfoArgs'] extra_infos: The extra information of the resource.
               The extra_info structure is documented below.
        :param _builtins.str id: The ID of the resource to be backed up.
        :param _builtins.str name: The name of the resource to be backed up.
        :param _builtins.str protect_status: The protection status.
        :param _builtins.int size: The capacity, in GB.
        :param _builtins.str type: The resource type. Possible values are **OS::Nova::Server**, **OS::Cinder::Volume**,
               **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo** or **OS::Workspace::DesktopV2**.
        """
        pulumi.set(__self__, "backup_count", backup_count)
        pulumi.set(__self__, "backup_size", backup_size)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protect_status", protect_status)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="backupCount")
    def backup_count(self) -> _builtins.int:
        """
        The number of backups.
        """
        return pulumi.get(self, "backup_count")

    @_builtins.property
    @pulumi.getter(name="backupSize")
    def backup_size(self) -> _builtins.int:
        """
        The backup size, in GB.
        """
        return pulumi.get(self, "backup_size")

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetVaultsByTagsResourceResourceDetailVaultResourceExtraInfoResult']:
        """
        The extra information of the resource.
        The extra_info structure is documented below.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the resource to be backed up.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the resource to be backed up.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> _builtins.str:
        """
        The protection status.
        """
        return pulumi.get(self, "protect_status")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The capacity, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type. Possible values are **OS::Nova::Server**, **OS::Cinder::Volume**,
        **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo** or **OS::Workspace::DesktopV2**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVaultsByTagsResourceResourceDetailVaultResourceExtraInfoResult(dict):
    def __init__(__self__, *,
                 exclude_volumes: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] exclude_volumes: The IDs of the disks that will not be backed up. This parameter is used when servers are added to
               a vault, which include all server disks. But some disks do not need to be backed up. Or in case that a server was
               previously added and some disks on this server do not need to be backed up.
        """
        pulumi.set(__self__, "exclude_volumes", exclude_volumes)

    @_builtins.property
    @pulumi.getter(name="excludeVolumes")
    def exclude_volumes(self) -> Sequence[_builtins.str]:
        """
        The IDs of the disks that will not be backed up. This parameter is used when servers are added to
        a vault, which include all server disks. But some disks do not need to be backed up. Or in case that a server was
        previously added and some disks on this server do not need to be backed up.
        """
        return pulumi.get(self, "exclude_volumes")


@pulumi.output_type
class GetVaultsByTagsResourceResourceDetailVaultTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param _builtins.str value: Specifies the value of the resource tag.
               A value consists of up to `255` characters.
               If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the resource tag.
        A value consists of up to `255` characters.
        If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVaultsByTagsResourceSysTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param _builtins.str value: Specifies the value of the resource tag.
               A value consists of up to `255` characters.
               If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the resource tag.
        A value consists of up to `255` characters.
        If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVaultsByTagsResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param _builtins.str value: Specifies the value of the resource tag.
               A value consists of up to `255` characters.
               If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the resource tag.
        A value consists of up to `255` characters.
        If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVaultsByTagsSysTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param Sequence[_builtins.str] values: Specifies the list of values. Currently, only the enterprise project ID is used.
               The default enterprise project ID is `0`.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVaultsByTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param Sequence[_builtins.str] values: Specifies the list of values. Currently, only the enterprise project ID is used.
               The default enterprise project ID is `0`.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVaultsByTagsTagsAnyResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param Sequence[_builtins.str] values: Specifies the list of values. Currently, only the enterprise project ID is used.
               The default enterprise project ID is `0`.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVaultsVaultResult(dict):
    def __init__(__self__, *,
                 allocated: _builtins.float,
                 auto_bind: _builtins.bool,
                 auto_expand_enabled: _builtins.bool,
                 bind_rules: Mapping[str, _builtins.str],
                 consistent_level: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 policy_id: _builtins.str,
                 protection_type: _builtins.str,
                 resources: Sequence['outputs.GetVaultsVaultResourceResult'],
                 size: _builtins.int,
                 spec_code: _builtins.str,
                 status: _builtins.str,
                 storage: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 used: _builtins.float):
        """
        :param _builtins.float allocated: The allocated capacity of the vault, in GB.
        :param _builtins.bool auto_bind: Whether automatic association is enabled. Defaults to **false**.
        :param _builtins.bool auto_expand_enabled: Specifies whether to enable automatic expansion of the backup protection
               type vault. Defaults to **false**.
        :param Mapping[str, _builtins.str] bind_rules: The tags to filter resources for automatic association with **auto_bind**.
        :param _builtins.str consistent_level: Specifies the consistent level (specification) of the vault.
               The valid values are as follows:
               + **[crash_consistent](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0109.html)**
               + **[app_consistent](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0109.html)**
               
               Only server type vaults support application consistent.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the vault belongs.
        :param _builtins.str id: The vault ID in UUID format.
        :param _builtins.str name: Specifies the vault name. This parameter can contain a maximum of 64
               characters, which may consist of letters, digits, underscores(_) and hyphens (-).
        :param _builtins.str policy_id: Specifies the ID of the policy associated with the vault.
               The `policy_id` cannot be used with the vault of replicate protection type.
        :param _builtins.str protection_type: Specifies the protection type of the vault.
               The valid values are **backup** and **replication**. Vaults of type **disk** don't support **replication**.
        :param Sequence['GetVaultsVaultResourceArgs'] resources: The array of one or more resources to attach to the vault.
               The object structure is documented below.
        :param _builtins.int size: Specifies the vault capacity, in GB. The valid value range is `1` to `10,485,760`.
        :param _builtins.str spec_code: The specification code.
        :param _builtins.str status: Specifies the vault status, including **available**, **lock**, **frozen** and **error**.
        :param _builtins.str storage: The name of the bucket for the vault.
        :param Mapping[str, _builtins.str] tags: The key/value pairs to associate with the vault.
        :param _builtins.str type: Specifies the object type of the vault. The valid values are as follows:
               + **server** (Cloud Servers)
               + **disk** (EVS Disks)
               + **turbo** (SFS Turbo file systems)
        :param _builtins.float used: The used capacity, in GB.
        """
        pulumi.set(__self__, "allocated", allocated)
        pulumi.set(__self__, "auto_bind", auto_bind)
        pulumi.set(__self__, "auto_expand_enabled", auto_expand_enabled)
        pulumi.set(__self__, "bind_rules", bind_rules)
        pulumi.set(__self__, "consistent_level", consistent_level)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "protection_type", protection_type)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def allocated(self) -> _builtins.float:
        """
        The allocated capacity of the vault, in GB.
        """
        return pulumi.get(self, "allocated")

    @_builtins.property
    @pulumi.getter(name="autoBind")
    def auto_bind(self) -> _builtins.bool:
        """
        Whether automatic association is enabled. Defaults to **false**.
        """
        return pulumi.get(self, "auto_bind")

    @_builtins.property
    @pulumi.getter(name="autoExpandEnabled")
    def auto_expand_enabled(self) -> _builtins.bool:
        """
        Specifies whether to enable automatic expansion of the backup protection
        type vault. Defaults to **false**.
        """
        return pulumi.get(self, "auto_expand_enabled")

    @_builtins.property
    @pulumi.getter(name="bindRules")
    def bind_rules(self) -> Mapping[str, _builtins.str]:
        """
        The tags to filter resources for automatic association with **auto_bind**.
        """
        return pulumi.get(self, "bind_rules")

    @_builtins.property
    @pulumi.getter(name="consistentLevel")
    def consistent_level(self) -> _builtins.str:
        """
        Specifies the consistent level (specification) of the vault.
        The valid values are as follows:
        + **[crash_consistent](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0109.html)**
        + **[app_consistent](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0109.html)**

        Only server type vaults support application consistent.
        """
        return pulumi.get(self, "consistent_level")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the vault belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The vault ID in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the vault name. This parameter can contain a maximum of 64
        characters, which may consist of letters, digits, underscores(_) and hyphens (-).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        Specifies the ID of the policy associated with the vault.
        The `policy_id` cannot be used with the vault of replicate protection type.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="protectionType")
    def protection_type(self) -> _builtins.str:
        """
        Specifies the protection type of the vault.
        The valid values are **backup** and **replication**. Vaults of type **disk** don't support **replication**.
        """
        return pulumi.get(self, "protection_type")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVaultsVaultResourceResult']:
        """
        The array of one or more resources to attach to the vault.
        The object structure is documented below.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Specifies the vault capacity, in GB. The valid value range is `1` to `10,485,760`.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        The specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the vault status, including **available**, **lock**, **frozen** and **error**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> _builtins.str:
        """
        The name of the bucket for the vault.
        """
        return pulumi.get(self, "storage")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The key/value pairs to associate with the vault.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the object type of the vault. The valid values are as follows:
        + **server** (Cloud Servers)
        + **disk** (EVS Disks)
        + **turbo** (SFS Turbo file systems)
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.float:
        """
        The used capacity, in GB.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetVaultsVaultResourceResult(dict):
    def __init__(__self__, *,
                 excludes: Sequence[_builtins.str],
                 includes: Sequence[_builtins.str],
                 server_id: _builtins.str):
        """
        :param Sequence[_builtins.str] excludes: The array of disk IDs which will be excluded in the backup.
        :param Sequence[_builtins.str] includes: The array of disk or SFS file system IDs which will be included in the backup.
        :param _builtins.str server_id: The ID of the ECS instance to be backed up.
        """
        pulumi.set(__self__, "excludes", excludes)
        pulumi.set(__self__, "includes", includes)
        pulumi.set(__self__, "server_id", server_id)

    @_builtins.property
    @pulumi.getter
    def excludes(self) -> Sequence[_builtins.str]:
        """
        The array of disk IDs which will be excluded in the backup.
        """
        return pulumi.get(self, "excludes")

    @_builtins.property
    @pulumi.getter
    def includes(self) -> Sequence[_builtins.str]:
        """
        The array of disk or SFS file system IDs which will be included in the backup.
        """
        return pulumi.get(self, "includes")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        The ID of the ECS instance to be backed up.
        """
        return pulumi.get(self, "server_id")


