# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupShareArgs', 'BackupShare']

@pulumi.input_type
class BackupShareArgs:
    def __init__(__self__, *,
                 backup_id: pulumi.Input[_builtins.str],
                 members: pulumi.Input[Sequence[pulumi.Input['BackupShareMemberArgs']]],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BackupShare resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the backup ID.  
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['BackupShareMemberArgs']]] members: Specifies the list of shared members configuration.
               The members structure is documented below.
               
               <a name="cbr_backup_share_members_args"></a>
               The `members` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region to which the backup and sharing project belong.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "members", members)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backup ID.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input['BackupShareMemberArgs']]]:
        """
        Specifies the list of shared members configuration.
        The members structure is documented below.

        <a name="cbr_backup_share_members_args"></a>
        The `members` block supports:
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input['BackupShareMemberArgs']]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region to which the backup and sharing project belong.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _BackupShareState:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['BackupShareMemberArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupShare resources.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the backup ID.  
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['BackupShareMemberArgs']]] members: Specifies the list of shared members configuration.
               The members structure is documented below.
               
               <a name="cbr_backup_share_members_args"></a>
               The `members` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region to which the backup and sharing project belong.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup ID.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupShareMemberArgs']]]]:
        """
        Specifies the list of shared members configuration.
        The members structure is documented below.

        <a name="cbr_backup_share_members_args"></a>
        The `members` block supports:
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupShareMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region to which the backup and sharing project belong.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:Cbr/backupShare:BackupShare")
class BackupShare(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupShareMemberArgs', 'BackupShareMemberArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to share backups with other members within HuaweiCloud (in the same region).

        > Currently, only Server backup type support to manage shared members.
           And a backup can only create one of this resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        backup_id = config.require_object("backupId")
        shared_project_ids = config.require_object("sharedProjectIds")
        test = huaweicloud.cbr.BackupShare("test",
            members=[{
                "dest_project_id": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in shared_project_ids]],
            backup_id=backup_id)
        ```

        ## Import

        Share resources can be imported by their `id` or `backup_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cbr/backupShare:BackupShare test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the backup ID.  
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupShareMemberArgs', 'BackupShareMemberArgsDict']]]] members: Specifies the list of shared members configuration.
               The members structure is documented below.
               
               <a name="cbr_backup_share_members_args"></a>
               The `members` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region to which the backup and sharing project belong.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupShareArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to share backups with other members within HuaweiCloud (in the same region).

        > Currently, only Server backup type support to manage shared members.
           And a backup can only create one of this resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        backup_id = config.require_object("backupId")
        shared_project_ids = config.require_object("sharedProjectIds")
        test = huaweicloud.cbr.BackupShare("test",
            members=[{
                "dest_project_id": entry["value"],
            } for entry in [{"key": k, "value": v} for k, v in shared_project_ids]],
            backup_id=backup_id)
        ```

        ## Import

        Share resources can be imported by their `id` or `backup_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cbr/backupShare:BackupShare test <id>
        ```

        :param str resource_name: The name of the resource.
        :param BackupShareArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupShareArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupShareMemberArgs', 'BackupShareMemberArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupShareArgs.__new__(BackupShareArgs)

            if backup_id is None and not opts.urn:
                raise TypeError("Missing required property 'backup_id'")
            __props__.__dict__["backup_id"] = backup_id
            if members is None and not opts.urn:
                raise TypeError("Missing required property 'members'")
            __props__.__dict__["members"] = members
            __props__.__dict__["region"] = region
        super(BackupShare, __self__).__init__(
            'huaweicloud:Cbr/backupShare:BackupShare',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_id: Optional[pulumi.Input[_builtins.str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupShareMemberArgs', 'BackupShareMemberArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupShare':
        """
        Get an existing BackupShare resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the backup ID.  
               Changing this will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupShareMemberArgs', 'BackupShareMemberArgsDict']]]] members: Specifies the list of shared members configuration.
               The members structure is documented below.
               
               <a name="cbr_backup_share_members_args"></a>
               The `members` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region to which the backup and sharing project belong.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupShareState.__new__(_BackupShareState)

        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["members"] = members
        __props__.__dict__["region"] = region
        return BackupShare(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the backup ID.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence['outputs.BackupShareMember']]:
        """
        Specifies the list of shared members configuration.
        The members structure is documented below.

        <a name="cbr_backup_share_members_args"></a>
        The `members` block supports:
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region to which the backup and sharing project belong.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

