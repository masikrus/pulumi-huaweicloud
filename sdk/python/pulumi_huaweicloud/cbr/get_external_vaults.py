# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetExternalVaultsResult',
    'AwaitableGetExternalVaultsResult',
    'get_external_vaults',
    'get_external_vaults_output',
]

@pulumi.output_type
class GetExternalVaultsResult:
    """
    A collection of values returned by getExternalVaults.
    """
    def __init__(__self__, cloud_type=None, external_project_id=None, id=None, protect_type=None, region=None, region_id=None, vault_id=None, vaults=None):
        if cloud_type and not isinstance(cloud_type, str):
            raise TypeError("Expected argument 'cloud_type' to be a str")
        pulumi.set(__self__, "cloud_type", cloud_type)
        if external_project_id and not isinstance(external_project_id, str):
            raise TypeError("Expected argument 'external_project_id' to be a str")
        pulumi.set(__self__, "external_project_id", external_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if protect_type and not isinstance(protect_type, str):
            raise TypeError("Expected argument 'protect_type' to be a str")
        pulumi.set(__self__, "protect_type", protect_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if region_id and not isinstance(region_id, str):
            raise TypeError("Expected argument 'region_id' to be a str")
        pulumi.set(__self__, "region_id", region_id)
        if vault_id and not isinstance(vault_id, str):
            raise TypeError("Expected argument 'vault_id' to be a str")
        pulumi.set(__self__, "vault_id", vault_id)
        if vaults and not isinstance(vaults, list):
            raise TypeError("Expected argument 'vaults' to be a list")
        pulumi.set(__self__, "vaults", vaults)

    @_builtins.property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> Optional[_builtins.str]:
        """
        The cloud type. Possible values are:
        + **public**: public cloud.
        + **hybrid**: hybrid cloud.
        """
        return pulumi.get(self, "cloud_type")

    @_builtins.property
    @pulumi.getter(name="externalProjectId")
    def external_project_id(self) -> _builtins.str:
        return pulumi.get(self, "external_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="protectType")
    def protect_type(self) -> Optional[_builtins.str]:
        """
        The protection type. Possible values are: **backup** and **replication**
        """
        return pulumi.get(self, "protect_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vault_id")

    @_builtins.property
    @pulumi.getter
    def vaults(self) -> Sequence['outputs.GetExternalVaultsVaultResult']:
        """
        List of vault details. The vaults structure is documented below.
        """
        return pulumi.get(self, "vaults")


class AwaitableGetExternalVaultsResult(GetExternalVaultsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExternalVaultsResult(
            cloud_type=self.cloud_type,
            external_project_id=self.external_project_id,
            id=self.id,
            protect_type=self.protect_type,
            region=self.region,
            region_id=self.region_id,
            vault_id=self.vault_id,
            vaults=self.vaults)


def get_external_vaults(cloud_type: Optional[_builtins.str] = None,
                        external_project_id: Optional[_builtins.str] = None,
                        protect_type: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        region_id: Optional[_builtins.str] = None,
                        vault_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExternalVaultsResult:
    """
    Use this data source to get available CBR external vaults within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    region_id = config.require_object("regionId")
    external_project_id = config.require_object("externalProjectId")
    test = huaweicloud.Cbr.get_external_vaults(region_id=region_id,
        external_project_id=external_project_id)
    ```


    :param _builtins.str cloud_type: Specifies cloud type of the instances. The value can be **public** or **hybrid**.
    :param _builtins.str external_project_id: Specifies project ID of other region.
    :param _builtins.str protect_type: Specifies the protection type. The value can be **backup**, **replication**,
           or **hybrid**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str region_id: Specifies the region ID.
    :param _builtins.str vault_id: Specifies vault ID. If the vault ID is specified,
           other filtering criteria do not take effect.
    """
    __args__ = dict()
    __args__['cloudType'] = cloud_type
    __args__['externalProjectId'] = external_project_id
    __args__['protectType'] = protect_type
    __args__['region'] = region
    __args__['regionId'] = region_id
    __args__['vaultId'] = vault_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cbr/getExternalVaults:getExternalVaults', __args__, opts=opts, typ=GetExternalVaultsResult).value

    return AwaitableGetExternalVaultsResult(
        cloud_type=pulumi.get(__ret__, 'cloud_type'),
        external_project_id=pulumi.get(__ret__, 'external_project_id'),
        id=pulumi.get(__ret__, 'id'),
        protect_type=pulumi.get(__ret__, 'protect_type'),
        region=pulumi.get(__ret__, 'region'),
        region_id=pulumi.get(__ret__, 'region_id'),
        vault_id=pulumi.get(__ret__, 'vault_id'),
        vaults=pulumi.get(__ret__, 'vaults'))
def get_external_vaults_output(cloud_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               external_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                               protect_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region_id: Optional[pulumi.Input[_builtins.str]] = None,
                               vault_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetExternalVaultsResult]:
    """
    Use this data source to get available CBR external vaults within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    region_id = config.require_object("regionId")
    external_project_id = config.require_object("externalProjectId")
    test = huaweicloud.Cbr.get_external_vaults(region_id=region_id,
        external_project_id=external_project_id)
    ```


    :param _builtins.str cloud_type: Specifies cloud type of the instances. The value can be **public** or **hybrid**.
    :param _builtins.str external_project_id: Specifies project ID of other region.
    :param _builtins.str protect_type: Specifies the protection type. The value can be **backup**, **replication**,
           or **hybrid**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str region_id: Specifies the region ID.
    :param _builtins.str vault_id: Specifies vault ID. If the vault ID is specified,
           other filtering criteria do not take effect.
    """
    __args__ = dict()
    __args__['cloudType'] = cloud_type
    __args__['externalProjectId'] = external_project_id
    __args__['protectType'] = protect_type
    __args__['region'] = region
    __args__['regionId'] = region_id
    __args__['vaultId'] = vault_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cbr/getExternalVaults:getExternalVaults', __args__, opts=opts, typ=GetExternalVaultsResult)
    return __ret__.apply(lambda __response__: GetExternalVaultsResult(
        cloud_type=pulumi.get(__response__, 'cloud_type'),
        external_project_id=pulumi.get(__response__, 'external_project_id'),
        id=pulumi.get(__response__, 'id'),
        protect_type=pulumi.get(__response__, 'protect_type'),
        region=pulumi.get(__response__, 'region'),
        region_id=pulumi.get(__response__, 'region_id'),
        vault_id=pulumi.get(__response__, 'vault_id'),
        vaults=pulumi.get(__response__, 'vaults')))
