# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrganizationPolicyArgs', 'OrganizationPolicy']

@pulumi.input_type
class OrganizationPolicyArgs:
    def __init__(__self__, *,
                 operation_type: pulumi.Input[_builtins.str],
                 policy_enabled: pulumi.Input[_builtins.bool],
                 policy_name: pulumi.Input[_builtins.str],
                 policy_operation_definition: pulumi.Input['OrganizationPolicyPolicyOperationDefinitionArgs'],
                 policy_trigger: pulumi.Input['OrganizationPolicyPolicyTriggerArgs'],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a OrganizationPolicy resource.
        :param pulumi.Input[_builtins.str] operation_type: Specifies the organization policy type.  
               The valid values are as follows:
               + **backup**
               + **replication**.
        :param pulumi.Input[_builtins.bool] policy_enabled: Specifies whether the policy is enabled.
        :param pulumi.Input[_builtins.str] policy_name: Specifies the policy name.  
               The CBR service will automatically create a corresponding policy based on this name.
        :param pulumi.Input['OrganizationPolicyPolicyOperationDefinitionArgs'] policy_operation_definition: Specifies the policy operation definition for backup and replication.
               The policy_operation_definition structure is documented below.
        :param pulumi.Input['OrganizationPolicyPolicyTriggerArgs'] policy_trigger: Specifies the policy execution time rule.
               The policy_trigger structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the organization policy description.
        :param pulumi.Input[_builtins.str] effective_scope: Specifies the effective scope of the organization policy.
               
               <a name="cbr_organization_policy_operation_definition"></a>
               The `policy_operation_definition` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the organization policy name.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "policy_enabled", policy_enabled)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_operation_definition", policy_operation_definition)
        pulumi.set(__self__, "policy_trigger", policy_trigger)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if effective_scope is not None:
            pulumi.set(__self__, "effective_scope", effective_scope)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the organization policy type.  
        The valid values are as follows:
        + **backup**
        + **replication**.
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "operation_type", value)

    @_builtins.property
    @pulumi.getter(name="policyEnabled")
    def policy_enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether the policy is enabled.
        """
        return pulumi.get(self, "policy_enabled")

    @policy_enabled.setter
    def policy_enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "policy_enabled", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy name.  
        The CBR service will automatically create a corresponding policy based on this name.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter(name="policyOperationDefinition")
    def policy_operation_definition(self) -> pulumi.Input['OrganizationPolicyPolicyOperationDefinitionArgs']:
        """
        Specifies the policy operation definition for backup and replication.
        The policy_operation_definition structure is documented below.
        """
        return pulumi.get(self, "policy_operation_definition")

    @policy_operation_definition.setter
    def policy_operation_definition(self, value: pulumi.Input['OrganizationPolicyPolicyOperationDefinitionArgs']):
        pulumi.set(self, "policy_operation_definition", value)

    @_builtins.property
    @pulumi.getter(name="policyTrigger")
    def policy_trigger(self) -> pulumi.Input['OrganizationPolicyPolicyTriggerArgs']:
        """
        Specifies the policy execution time rule.
        The policy_trigger structure is documented below.
        """
        return pulumi.get(self, "policy_trigger")

    @policy_trigger.setter
    def policy_trigger(self, value: pulumi.Input['OrganizationPolicyPolicyTriggerArgs']):
        pulumi.set(self, "policy_trigger", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the organization policy description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="effectiveScope")
    def effective_scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the effective scope of the organization policy.

        <a name="cbr_organization_policy_operation_definition"></a>
        The `policy_operation_definition` block supports:
        """
        return pulumi.get(self, "effective_scope")

    @effective_scope.setter
    def effective_scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "effective_scope", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the organization policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _OrganizationPolicyState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_operation_definition: Optional[pulumi.Input['OrganizationPolicyPolicyOperationDefinitionArgs']] = None,
                 policy_trigger: Optional[pulumi.Input['OrganizationPolicyPolicyTriggerArgs']] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering OrganizationPolicy resources.
        :param pulumi.Input[_builtins.str] description: Specifies the organization policy description.
        :param pulumi.Input[_builtins.str] domain_id: The ID of the account to which the organization policy belongs.
        :param pulumi.Input[_builtins.str] domain_name: The account to which the organization policy belongs.
        :param pulumi.Input[_builtins.str] effective_scope: Specifies the effective scope of the organization policy.
               
               <a name="cbr_organization_policy_operation_definition"></a>
               The `policy_operation_definition` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the organization policy name.
        :param pulumi.Input[_builtins.str] operation_type: Specifies the organization policy type.  
               The valid values are as follows:
               + **backup**
               + **replication**.
        :param pulumi.Input[_builtins.bool] policy_enabled: Specifies whether the policy is enabled.
        :param pulumi.Input[_builtins.str] policy_name: Specifies the policy name.  
               The CBR service will automatically create a corresponding policy based on this name.
        :param pulumi.Input['OrganizationPolicyPolicyOperationDefinitionArgs'] policy_operation_definition: Specifies the policy operation definition for backup and replication.
               The policy_operation_definition structure is documented below.
        :param pulumi.Input['OrganizationPolicyPolicyTriggerArgs'] policy_trigger: Specifies the policy execution time rule.
               The policy_trigger structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The organization policy status.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if effective_scope is not None:
            pulumi.set(__self__, "effective_scope", effective_scope)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if policy_enabled is not None:
            pulumi.set(__self__, "policy_enabled", policy_enabled)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_operation_definition is not None:
            pulumi.set(__self__, "policy_operation_definition", policy_operation_definition)
        if policy_trigger is not None:
            pulumi.set(__self__, "policy_trigger", policy_trigger)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the organization policy description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the account to which the organization policy belongs.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account to which the organization policy belongs.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="effectiveScope")
    def effective_scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the effective scope of the organization policy.

        <a name="cbr_organization_policy_operation_definition"></a>
        The `policy_operation_definition` block supports:
        """
        return pulumi.get(self, "effective_scope")

    @effective_scope.setter
    def effective_scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "effective_scope", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the organization policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the organization policy type.  
        The valid values are as follows:
        + **backup**
        + **replication**.
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operation_type", value)

    @_builtins.property
    @pulumi.getter(name="policyEnabled")
    def policy_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the policy is enabled.
        """
        return pulumi.get(self, "policy_enabled")

    @policy_enabled.setter
    def policy_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "policy_enabled", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy name.  
        The CBR service will automatically create a corresponding policy based on this name.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter(name="policyOperationDefinition")
    def policy_operation_definition(self) -> Optional[pulumi.Input['OrganizationPolicyPolicyOperationDefinitionArgs']]:
        """
        Specifies the policy operation definition for backup and replication.
        The policy_operation_definition structure is documented below.
        """
        return pulumi.get(self, "policy_operation_definition")

    @policy_operation_definition.setter
    def policy_operation_definition(self, value: Optional[pulumi.Input['OrganizationPolicyPolicyOperationDefinitionArgs']]):
        pulumi.set(self, "policy_operation_definition", value)

    @_builtins.property
    @pulumi.getter(name="policyTrigger")
    def policy_trigger(self) -> Optional[pulumi.Input['OrganizationPolicyPolicyTriggerArgs']]:
        """
        Specifies the policy execution time rule.
        The policy_trigger structure is documented below.
        """
        return pulumi.get(self, "policy_trigger")

    @policy_trigger.setter
    def policy_trigger(self, value: Optional[pulumi.Input['OrganizationPolicyPolicyTriggerArgs']]):
        pulumi.set(self, "policy_trigger", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The organization policy status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("huaweicloud:Cbr/organizationPolicy:OrganizationPolicy")
class OrganizationPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_operation_definition: Optional[pulumi.Input[Union['OrganizationPolicyPolicyOperationDefinitionArgs', 'OrganizationPolicyPolicyOperationDefinitionArgsDict']]] = None,
                 policy_trigger: Optional[pulumi.Input[Union['OrganizationPolicyPolicyTriggerArgs', 'OrganizationPolicyPolicyTriggerArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a CBR organization policy resource within HuaweiCloud.

        ## Example Usage

        ### Create a backup organization policy with retention settings

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_policy_name = config.require_object("organizationPolicyName")
        policy_name = config.require_object("policyName")
        test = huaweicloud.cbr.OrganizationPolicy("test",
            name=organization_policy_name,
            description="Created by terraform script",
            operation_type="backup",
            policy_name=policy_name,
            policy_enabled=False,
            policy_operation_definition={
                "day_backups": 5,
                "max_backups": 30,
                "month_backups": 1,
                "week_backups": 2,
                "year_backups": 1,
                "timezone": "UTC+08:00",
                "full_backup_interval": 10,
            },
            policy_trigger={
                "properties": {
                    "patterns": ["FREQ=WEEKLY;BYDAY=WE,TH,FR;BYHOUR=16;BYMINUTE=00"],
                },
            })
        ```

        ## Import

        The CBR organization policy can be imported using the `id` or `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cbr/organizationPolicy:OrganizationPolicy test <id>
        ```

        bash

        ```sh
        $ pulumi import huaweicloud:Cbr/organizationPolicy:OrganizationPolicy test <name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the organization policy description.
        :param pulumi.Input[_builtins.str] effective_scope: Specifies the effective scope of the organization policy.
               
               <a name="cbr_organization_policy_operation_definition"></a>
               The `policy_operation_definition` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the organization policy name.
        :param pulumi.Input[_builtins.str] operation_type: Specifies the organization policy type.  
               The valid values are as follows:
               + **backup**
               + **replication**.
        :param pulumi.Input[_builtins.bool] policy_enabled: Specifies whether the policy is enabled.
        :param pulumi.Input[_builtins.str] policy_name: Specifies the policy name.  
               The CBR service will automatically create a corresponding policy based on this name.
        :param pulumi.Input[Union['OrganizationPolicyPolicyOperationDefinitionArgs', 'OrganizationPolicyPolicyOperationDefinitionArgsDict']] policy_operation_definition: Specifies the policy operation definition for backup and replication.
               The policy_operation_definition structure is documented below.
        :param pulumi.Input[Union['OrganizationPolicyPolicyTriggerArgs', 'OrganizationPolicyPolicyTriggerArgsDict']] policy_trigger: Specifies the policy execution time rule.
               The policy_trigger structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrganizationPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CBR organization policy resource within HuaweiCloud.

        ## Example Usage

        ### Create a backup organization policy with retention settings

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        organization_policy_name = config.require_object("organizationPolicyName")
        policy_name = config.require_object("policyName")
        test = huaweicloud.cbr.OrganizationPolicy("test",
            name=organization_policy_name,
            description="Created by terraform script",
            operation_type="backup",
            policy_name=policy_name,
            policy_enabled=False,
            policy_operation_definition={
                "day_backups": 5,
                "max_backups": 30,
                "month_backups": 1,
                "week_backups": 2,
                "year_backups": 1,
                "timezone": "UTC+08:00",
                "full_backup_interval": 10,
            },
            policy_trigger={
                "properties": {
                    "patterns": ["FREQ=WEEKLY;BYDAY=WE,TH,FR;BYHOUR=16;BYMINUTE=00"],
                },
            })
        ```

        ## Import

        The CBR organization policy can be imported using the `id` or `name`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Cbr/organizationPolicy:OrganizationPolicy test <id>
        ```

        bash

        ```sh
        $ pulumi import huaweicloud:Cbr/organizationPolicy:OrganizationPolicy test <name>
        ```

        :param str resource_name: The name of the resource.
        :param OrganizationPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_scope: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_operation_definition: Optional[pulumi.Input[Union['OrganizationPolicyPolicyOperationDefinitionArgs', 'OrganizationPolicyPolicyOperationDefinitionArgsDict']]] = None,
                 policy_trigger: Optional[pulumi.Input[Union['OrganizationPolicyPolicyTriggerArgs', 'OrganizationPolicyPolicyTriggerArgsDict']]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationPolicyArgs.__new__(OrganizationPolicyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["effective_scope"] = effective_scope
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["name"] = name
            if operation_type is None and not opts.urn:
                raise TypeError("Missing required property 'operation_type'")
            __props__.__dict__["operation_type"] = operation_type
            if policy_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'policy_enabled'")
            __props__.__dict__["policy_enabled"] = policy_enabled
            if policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_name'")
            __props__.__dict__["policy_name"] = policy_name
            if policy_operation_definition is None and not opts.urn:
                raise TypeError("Missing required property 'policy_operation_definition'")
            __props__.__dict__["policy_operation_definition"] = policy_operation_definition
            if policy_trigger is None and not opts.urn:
                raise TypeError("Missing required property 'policy_trigger'")
            __props__.__dict__["policy_trigger"] = policy_trigger
            __props__.__dict__["region"] = region
            __props__.__dict__["domain_id"] = None
            __props__.__dict__["domain_name"] = None
            __props__.__dict__["status"] = None
        super(OrganizationPolicy, __self__).__init__(
            'huaweicloud:Cbr/organizationPolicy:OrganizationPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            effective_scope: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            operation_type: Optional[pulumi.Input[_builtins.str]] = None,
            policy_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            policy_name: Optional[pulumi.Input[_builtins.str]] = None,
            policy_operation_definition: Optional[pulumi.Input[Union['OrganizationPolicyPolicyOperationDefinitionArgs', 'OrganizationPolicyPolicyOperationDefinitionArgsDict']]] = None,
            policy_trigger: Optional[pulumi.Input[Union['OrganizationPolicyPolicyTriggerArgs', 'OrganizationPolicyPolicyTriggerArgsDict']]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'OrganizationPolicy':
        """
        Get an existing OrganizationPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the organization policy description.
        :param pulumi.Input[_builtins.str] domain_id: The ID of the account to which the organization policy belongs.
        :param pulumi.Input[_builtins.str] domain_name: The account to which the organization policy belongs.
        :param pulumi.Input[_builtins.str] effective_scope: Specifies the effective scope of the organization policy.
               
               <a name="cbr_organization_policy_operation_definition"></a>
               The `policy_operation_definition` block supports:
        :param pulumi.Input[_builtins.str] name: Specifies the organization policy name.
        :param pulumi.Input[_builtins.str] operation_type: Specifies the organization policy type.  
               The valid values are as follows:
               + **backup**
               + **replication**.
        :param pulumi.Input[_builtins.bool] policy_enabled: Specifies whether the policy is enabled.
        :param pulumi.Input[_builtins.str] policy_name: Specifies the policy name.  
               The CBR service will automatically create a corresponding policy based on this name.
        :param pulumi.Input[Union['OrganizationPolicyPolicyOperationDefinitionArgs', 'OrganizationPolicyPolicyOperationDefinitionArgsDict']] policy_operation_definition: Specifies the policy operation definition for backup and replication.
               The policy_operation_definition structure is documented below.
        :param pulumi.Input[Union['OrganizationPolicyPolicyTriggerArgs', 'OrganizationPolicyPolicyTriggerArgsDict']] policy_trigger: Specifies the policy execution time rule.
               The policy_trigger structure is documented below.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The organization policy status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrganizationPolicyState.__new__(_OrganizationPolicyState)

        __props__.__dict__["description"] = description
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["effective_scope"] = effective_scope
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["name"] = name
        __props__.__dict__["operation_type"] = operation_type
        __props__.__dict__["policy_enabled"] = policy_enabled
        __props__.__dict__["policy_name"] = policy_name
        __props__.__dict__["policy_operation_definition"] = policy_operation_definition
        __props__.__dict__["policy_trigger"] = policy_trigger
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return OrganizationPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the organization policy description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the account to which the organization policy belongs.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        The account to which the organization policy belongs.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="effectiveScope")
    def effective_scope(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the effective scope of the organization policy.

        <a name="cbr_organization_policy_operation_definition"></a>
        The `policy_operation_definition` block supports:
        """
        return pulumi.get(self, "effective_scope")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the organization policy name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the organization policy type.  
        The valid values are as follows:
        + **backup**
        + **replication**.
        """
        return pulumi.get(self, "operation_type")

    @_builtins.property
    @pulumi.getter(name="policyEnabled")
    def policy_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the policy is enabled.
        """
        return pulumi.get(self, "policy_enabled")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy name.  
        The CBR service will automatically create a corresponding policy based on this name.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="policyOperationDefinition")
    def policy_operation_definition(self) -> pulumi.Output['outputs.OrganizationPolicyPolicyOperationDefinition']:
        """
        Specifies the policy operation definition for backup and replication.
        The policy_operation_definition structure is documented below.
        """
        return pulumi.get(self, "policy_operation_definition")

    @_builtins.property
    @pulumi.getter(name="policyTrigger")
    def policy_trigger(self) -> pulumi.Output['outputs.OrganizationPolicyPolicyTrigger']:
        """
        Specifies the policy execution time rule.
        The policy_trigger structure is documented below.
        """
        return pulumi.get(self, "policy_trigger")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The organization policy status.
        """
        return pulumi.get(self, "status")

