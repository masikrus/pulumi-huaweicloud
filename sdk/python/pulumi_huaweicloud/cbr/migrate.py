# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MigrateArgs', 'Migrate']

@pulumi.input_type
class MigrateArgs:
    def __init__(__self__, *,
                 all_regions: pulumi.Input[_builtins.bool],
                 reservation: pulumi.Input[_builtins.float],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Migrate resource.
        :param pulumi.Input[_builtins.bool] all_regions: Specifies whether to trigger migration in other regions.
        :param pulumi.Input[_builtins.float] reservation: Specifies the default expansion ratio of the vault.
               The value must be a float between `0` and `1`.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "all_regions", all_regions)
        pulumi.set(__self__, "reservation", reservation)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="allRegions")
    def all_regions(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to trigger migration in other regions.
        """
        return pulumi.get(self, "all_regions")

    @all_regions.setter
    def all_regions(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "all_regions", value)

    @_builtins.property
    @pulumi.getter
    def reservation(self) -> pulumi.Input[_builtins.float]:
        """
        Specifies the default expansion ratio of the vault.
        The value must be a float between `0` and `1`.
        """
        return pulumi.get(self, "reservation")

    @reservation.setter
    def reservation(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "reservation", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _MigrateState:
    def __init__(__self__, *,
                 all_regions: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering Migrate resources.
        :param pulumi.Input[_builtins.bool] all_regions: Specifies whether to trigger migration in other regions.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.float] reservation: Specifies the default expansion ratio of the vault.
               The value must be a float between `0` and `1`.
        """
        if all_regions is not None:
            pulumi.set(__self__, "all_regions", all_regions)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reservation is not None:
            pulumi.set(__self__, "reservation", reservation)

    @_builtins.property
    @pulumi.getter(name="allRegions")
    def all_regions(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to trigger migration in other regions.
        """
        return pulumi.get(self, "all_regions")

    @all_regions.setter
    def all_regions(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "all_regions", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def reservation(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the default expansion ratio of the vault.
        The value must be a float between `0` and `1`.
        """
        return pulumi.get(self, "reservation")

    @reservation.setter
    def reservation(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "reservation", value)


@pulumi.type_token("huaweicloud:Cbr/migrate:Migrate")
class Migrate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_regions: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Using this resource to migrate CBR resources within HuaweiCloud.

        > This resource is a one-time action resource to migrate CBR resources. Deleting this resource will
        not affect the migration result, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cbr.Migrate("test",
            all_regions=False,
            reservation=0.5)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] all_regions: Specifies whether to trigger migration in other regions.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.float] reservation: Specifies the default expansion ratio of the vault.
               The value must be a float between `0` and `1`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MigrateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to migrate CBR resources within HuaweiCloud.

        > This resource is a one-time action resource to migrate CBR resources. Deleting this resource will
        not affect the migration result, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cbr.Migrate("test",
            all_regions=False,
            reservation=0.5)
        ```

        :param str resource_name: The name of the resource.
        :param MigrateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MigrateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_regions: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MigrateArgs.__new__(MigrateArgs)

            if all_regions is None and not opts.urn:
                raise TypeError("Missing required property 'all_regions'")
            __props__.__dict__["all_regions"] = all_regions
            __props__.__dict__["region"] = region
            if reservation is None and not opts.urn:
                raise TypeError("Missing required property 'reservation'")
            __props__.__dict__["reservation"] = reservation
        super(Migrate, __self__).__init__(
            'huaweicloud:Cbr/migrate:Migrate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            all_regions: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            reservation: Optional[pulumi.Input[_builtins.float]] = None) -> 'Migrate':
        """
        Get an existing Migrate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] all_regions: Specifies whether to trigger migration in other regions.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.float] reservation: Specifies the default expansion ratio of the vault.
               The value must be a float between `0` and `1`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MigrateState.__new__(_MigrateState)

        __props__.__dict__["all_regions"] = all_regions
        __props__.__dict__["region"] = region
        __props__.__dict__["reservation"] = reservation
        return Migrate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allRegions")
    def all_regions(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to trigger migration in other regions.
        """
        return pulumi.get(self, "all_regions")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def reservation(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the default expansion ratio of the vault.
        The value must be a float between `0` and `1`.
        """
        return pulumi.get(self, "reservation")

