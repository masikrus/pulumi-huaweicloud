# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CheckpointCopyArgs', 'CheckpointCopy']

@pulumi.input_type
class CheckpointCopyArgs:
    def __init__(__self__, *,
                 destination_project_id: pulumi.Input[_builtins.str],
                 destination_region: pulumi.Input[_builtins.str],
                 destination_vault_id: pulumi.Input[_builtins.str],
                 vault_id: pulumi.Input[_builtins.str],
                 auto_trigger: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_acceleration: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CheckpointCopy resource.
        :param pulumi.Input[_builtins.str] destination_project_id: Specifies the ID of the destination project to which the
               backup is to be copied.
        :param pulumi.Input[_builtins.str] destination_region: Specifies the ID of the destination region to which the backup
               is to be copied.
        :param pulumi.Input[_builtins.str] destination_vault_id: Specifies the ID of the destination vault to which the backup
               is to be copied. The protection type of this vault is required to be **replication**.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the source vault where the backup to be copied is
               located.
        :param pulumi.Input[_builtins.bool] auto_trigger: Specifies whether to automatically trigger the replication.
        :param pulumi.Input[_builtins.bool] enable_acceleration: Specifies whether to enable acceleration for cross-region
               replication.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "vault_id", vault_id)
        if auto_trigger is not None:
            pulumi.set(__self__, "auto_trigger", auto_trigger)
        if enable_acceleration is not None:
            pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the destination project to which the
        backup is to be copied.
        """
        return pulumi.get(self, "destination_project_id")

    @destination_project_id.setter
    def destination_project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_project_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the destination region to which the backup
        is to be copied.
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_region", value)

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the destination vault to which the backup
        is to be copied. The protection type of this vault is required to be **replication**.
        """
        return pulumi.get(self, "destination_vault_id")

    @destination_vault_id.setter
    def destination_vault_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_vault_id", value)

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the source vault where the backup to be copied is
        located.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vault_id", value)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically trigger the replication.
        """
        return pulumi.get(self, "auto_trigger")

    @auto_trigger.setter
    def auto_trigger(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_trigger", value)

    @_builtins.property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable acceleration for cross-region
        replication.
        """
        return pulumi.get(self, "enable_acceleration")

    @enable_acceleration.setter
    def enable_acceleration(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_acceleration", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CheckpointCopyState:
    def __init__(__self__, *,
                 auto_trigger: Optional[pulumi.Input[_builtins.bool]] = None,
                 destination_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_region: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_acceleration: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CheckpointCopy resources.
        :param pulumi.Input[_builtins.bool] auto_trigger: Specifies whether to automatically trigger the replication.
        :param pulumi.Input[_builtins.str] destination_project_id: Specifies the ID of the destination project to which the
               backup is to be copied.
        :param pulumi.Input[_builtins.str] destination_region: Specifies the ID of the destination region to which the backup
               is to be copied.
        :param pulumi.Input[_builtins.str] destination_vault_id: Specifies the ID of the destination vault to which the backup
               is to be copied. The protection type of this vault is required to be **replication**.
        :param pulumi.Input[_builtins.bool] enable_acceleration: Specifies whether to enable acceleration for cross-region
               replication.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the source vault where the backup to be copied is
               located.
        """
        if auto_trigger is not None:
            pulumi.set(__self__, "auto_trigger", auto_trigger)
        if destination_project_id is not None:
            pulumi.set(__self__, "destination_project_id", destination_project_id)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if destination_vault_id is not None:
            pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        if enable_acceleration is not None:
            pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically trigger the replication.
        """
        return pulumi.get(self, "auto_trigger")

    @auto_trigger.setter
    def auto_trigger(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_trigger", value)

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the destination project to which the
        backup is to be copied.
        """
        return pulumi.get(self, "destination_project_id")

    @destination_project_id.setter
    def destination_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_project_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the destination region to which the backup
        is to be copied.
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_region", value)

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the destination vault to which the backup
        is to be copied. The protection type of this vault is required to be **replication**.
        """
        return pulumi.get(self, "destination_vault_id")

    @destination_vault_id.setter
    def destination_vault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_vault_id", value)

    @_builtins.property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable acceleration for cross-region
        replication.
        """
        return pulumi.get(self, "enable_acceleration")

    @enable_acceleration.setter
    def enable_acceleration(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_acceleration", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the source vault where the backup to be copied is
        located.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vault_id", value)


@pulumi.type_token("huaweicloud:Cbr/checkpointCopy:CheckpointCopy")
class CheckpointCopy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_trigger: Optional[pulumi.Input[_builtins.bool]] = None,
                 destination_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_region: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_acceleration: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to copy a CBR checkpoint within HuaweiCloud.

        > This resource is only a one-time action resource to copy a CBR checkpoint. Deleting this resource will
        not clear the corresponding request record, but will only remove the resource information from the tfstate file.
        This resource has usage restrictions, please refer to
        [Replicating a Vault Across Regions](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0009.html).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vault_id = config.require_object("vaultId")
        destination_project_id = config.require_object("destinationProjectId")
        destination_region = config.require_object("destinationRegion")
        destination_vault_id = config.require_object("destinationVaultId")
        auto_trigger = config.require_object("autoTrigger")
        test = huaweicloud.cbr.CheckpointCopy("test",
            vault_id=vault_id,
            destination_project_id=destination_project_id,
            destination_region=destination_region,
            destination_vault_id=destination_vault_id,
            enable_acceleration=False,
            auto_trigger=auto_trigger)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] auto_trigger: Specifies whether to automatically trigger the replication.
        :param pulumi.Input[_builtins.str] destination_project_id: Specifies the ID of the destination project to which the
               backup is to be copied.
        :param pulumi.Input[_builtins.str] destination_region: Specifies the ID of the destination region to which the backup
               is to be copied.
        :param pulumi.Input[_builtins.str] destination_vault_id: Specifies the ID of the destination vault to which the backup
               is to be copied. The protection type of this vault is required to be **replication**.
        :param pulumi.Input[_builtins.bool] enable_acceleration: Specifies whether to enable acceleration for cross-region
               replication.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the source vault where the backup to be copied is
               located.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CheckpointCopyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to copy a CBR checkpoint within HuaweiCloud.

        > This resource is only a one-time action resource to copy a CBR checkpoint. Deleting this resource will
        not clear the corresponding request record, but will only remove the resource information from the tfstate file.
        This resource has usage restrictions, please refer to
        [Replicating a Vault Across Regions](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0009.html).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vault_id = config.require_object("vaultId")
        destination_project_id = config.require_object("destinationProjectId")
        destination_region = config.require_object("destinationRegion")
        destination_vault_id = config.require_object("destinationVaultId")
        auto_trigger = config.require_object("autoTrigger")
        test = huaweicloud.cbr.CheckpointCopy("test",
            vault_id=vault_id,
            destination_project_id=destination_project_id,
            destination_region=destination_region,
            destination_vault_id=destination_vault_id,
            enable_acceleration=False,
            auto_trigger=auto_trigger)
        ```

        :param str resource_name: The name of the resource.
        :param CheckpointCopyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CheckpointCopyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_trigger: Optional[pulumi.Input[_builtins.bool]] = None,
                 destination_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_region: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_acceleration: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CheckpointCopyArgs.__new__(CheckpointCopyArgs)

            __props__.__dict__["auto_trigger"] = auto_trigger
            if destination_project_id is None and not opts.urn:
                raise TypeError("Missing required property 'destination_project_id'")
            __props__.__dict__["destination_project_id"] = destination_project_id
            if destination_region is None and not opts.urn:
                raise TypeError("Missing required property 'destination_region'")
            __props__.__dict__["destination_region"] = destination_region
            if destination_vault_id is None and not opts.urn:
                raise TypeError("Missing required property 'destination_vault_id'")
            __props__.__dict__["destination_vault_id"] = destination_vault_id
            __props__.__dict__["enable_acceleration"] = enable_acceleration
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["region"] = region
            if vault_id is None and not opts.urn:
                raise TypeError("Missing required property 'vault_id'")
            __props__.__dict__["vault_id"] = vault_id
        super(CheckpointCopy, __self__).__init__(
            'huaweicloud:Cbr/checkpointCopy:CheckpointCopy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_trigger: Optional[pulumi.Input[_builtins.bool]] = None,
            destination_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            destination_region: Optional[pulumi.Input[_builtins.str]] = None,
            destination_vault_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_acceleration: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            vault_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'CheckpointCopy':
        """
        Get an existing CheckpointCopy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] auto_trigger: Specifies whether to automatically trigger the replication.
        :param pulumi.Input[_builtins.str] destination_project_id: Specifies the ID of the destination project to which the
               backup is to be copied.
        :param pulumi.Input[_builtins.str] destination_region: Specifies the ID of the destination region to which the backup
               is to be copied.
        :param pulumi.Input[_builtins.str] destination_vault_id: Specifies the ID of the destination vault to which the backup
               is to be copied. The protection type of this vault is required to be **replication**.
        :param pulumi.Input[_builtins.bool] enable_acceleration: Specifies whether to enable acceleration for cross-region
               replication.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the source vault where the backup to be copied is
               located.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CheckpointCopyState.__new__(_CheckpointCopyState)

        __props__.__dict__["auto_trigger"] = auto_trigger
        __props__.__dict__["destination_project_id"] = destination_project_id
        __props__.__dict__["destination_region"] = destination_region
        __props__.__dict__["destination_vault_id"] = destination_vault_id
        __props__.__dict__["enable_acceleration"] = enable_acceleration
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["region"] = region
        __props__.__dict__["vault_id"] = vault_id
        return CheckpointCopy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to automatically trigger the replication.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the destination project to which the
        backup is to be copied.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the destination region to which the backup
        is to be copied.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the destination vault to which the backup
        is to be copied. The protection type of this vault is required to be **replication**.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable acceleration for cross-region
        replication.
        """
        return pulumi.get(self, "enable_acceleration")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the source vault where the backup to be copied is
        located.
        """
        return pulumi.get(self, "vault_id")

