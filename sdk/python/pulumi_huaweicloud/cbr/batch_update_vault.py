# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['BatchUpdateVaultArgs', 'BatchUpdateVault']

@pulumi.input_type
class BatchUpdateVaultArgs:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 smn_notify: Optional[pulumi.Input[_builtins.bool]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a BatchUpdateVault resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to execute the request.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.bool] smn_notify: Specifies whether to enable SMN notification for the vault.
        :param pulumi.Input[_builtins.int] threshold: Specifies the threshold of the vault capacity in GB.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if smn_notify is not None:
            pulumi.set(__self__, "smn_notify", smn_notify)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to execute the request.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smnNotify")
    def smn_notify(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable SMN notification for the vault.
        """
        return pulumi.get(self, "smn_notify")

    @smn_notify.setter
    def smn_notify(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "smn_notify", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the threshold of the vault capacity in GB.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class _BatchUpdateVaultState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 smn_notify: Optional[pulumi.Input[_builtins.bool]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 updated_vaults_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering BatchUpdateVault resources.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to execute the request.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.bool] smn_notify: Specifies whether to enable SMN notification for the vault.
        :param pulumi.Input[_builtins.int] threshold: Specifies the threshold of the vault capacity in GB.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] updated_vaults_ids: The list of vault IDs that have been updated.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if smn_notify is not None:
            pulumi.set(__self__, "smn_notify", smn_notify)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if updated_vaults_ids is not None:
            pulumi.set(__self__, "updated_vaults_ids", updated_vaults_ids)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to execute the request.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smnNotify")
    def smn_notify(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable SMN notification for the vault.
        """
        return pulumi.get(self, "smn_notify")

    @smn_notify.setter
    def smn_notify(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "smn_notify", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the threshold of the vault capacity in GB.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter(name="updatedVaultsIds")
    def updated_vaults_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of vault IDs that have been updated.
        """
        return pulumi.get(self, "updated_vaults_ids")

    @updated_vaults_ids.setter
    def updated_vaults_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "updated_vaults_ids", value)


@pulumi.type_token("huaweicloud:Cbr/batchUpdateVault:BatchUpdateVault")
class BatchUpdateVault(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 smn_notify: Optional[pulumi.Input[_builtins.bool]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Using this resource to batch update CBR vaults within HuaweiCloud.

        > This resource is only a one-time action resource to batch update CBR vaults. Deleting this resource will
        not change the current vault configuration, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cbr.BatchUpdateVault("test",
            smn_notify=True,
            threshold=80)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to execute the request.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.bool] smn_notify: Specifies whether to enable SMN notification for the vault.
        :param pulumi.Input[_builtins.int] threshold: Specifies the threshold of the vault capacity in GB.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[BatchUpdateVaultArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to batch update CBR vaults within HuaweiCloud.

        > This resource is only a one-time action resource to batch update CBR vaults. Deleting this resource will
        not change the current vault configuration, but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cbr.BatchUpdateVault("test",
            smn_notify=True,
            threshold=80)
        ```

        :param str resource_name: The name of the resource.
        :param BatchUpdateVaultArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BatchUpdateVaultArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 smn_notify: Optional[pulumi.Input[_builtins.bool]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BatchUpdateVaultArgs.__new__(BatchUpdateVaultArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["region"] = region
            __props__.__dict__["smn_notify"] = smn_notify
            __props__.__dict__["threshold"] = threshold
            __props__.__dict__["updated_vaults_ids"] = None
        super(BatchUpdateVault, __self__).__init__(
            'huaweicloud:Cbr/batchUpdateVault:BatchUpdateVault',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            smn_notify: Optional[pulumi.Input[_builtins.bool]] = None,
            threshold: Optional[pulumi.Input[_builtins.int]] = None,
            updated_vaults_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'BatchUpdateVault':
        """
        Get an existing BatchUpdateVault resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to execute the request.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.bool] smn_notify: Specifies whether to enable SMN notification for the vault.
        :param pulumi.Input[_builtins.int] threshold: Specifies the threshold of the vault capacity in GB.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] updated_vaults_ids: The list of vault IDs that have been updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BatchUpdateVaultState.__new__(_BatchUpdateVaultState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["region"] = region
        __props__.__dict__["smn_notify"] = smn_notify
        __props__.__dict__["threshold"] = threshold
        __props__.__dict__["updated_vaults_ids"] = updated_vaults_ids
        return BatchUpdateVault(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to execute the request.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="smnNotify")
    def smn_notify(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to enable SMN notification for the vault.
        """
        return pulumi.get(self, "smn_notify")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the threshold of the vault capacity in GB.
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="updatedVaultsIds")
    def updated_vaults_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The list of vault IDs that have been updated.
        """
        return pulumi.get(self, "updated_vaults_ids")

