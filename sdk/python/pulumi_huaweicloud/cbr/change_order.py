# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ChangeOrderArgs', 'ChangeOrder']

@pulumi.input_type
class ChangeOrderArgs:
    def __init__(__self__, *,
                 product_info: pulumi.Input['ChangeOrderProductInfoArgs'],
                 resource_id: pulumi.Input[_builtins.str],
                 cloud_service_console_url: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 promotion_info: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ChangeOrder resource.
        :param pulumi.Input['ChangeOrderProductInfoArgs'] product_info: Specifies the product information.
               The product_info structure is documented below.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the CBR resource whose order will be changed.
               The resource must be in **prePaid** mode.
        :param pulumi.Input[_builtins.str] cloud_service_console_url: Specifies the Console URL of the cloud service.
        :param pulumi.Input[_builtins.str] promotion_info: Specifies the promotion information for the order.
               
               <a name="change_order_product_info_struct"></a>
               The `product_info` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "product_info", product_info)
        pulumi.set(__self__, "resource_id", resource_id)
        if cloud_service_console_url is not None:
            pulumi.set(__self__, "cloud_service_console_url", cloud_service_console_url)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if promotion_info is not None:
            pulumi.set(__self__, "promotion_info", promotion_info)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="productInfo")
    def product_info(self) -> pulumi.Input['ChangeOrderProductInfoArgs']:
        """
        Specifies the product information.
        The product_info structure is documented below.
        """
        return pulumi.get(self, "product_info")

    @product_info.setter
    def product_info(self, value: pulumi.Input['ChangeOrderProductInfoArgs']):
        pulumi.set(self, "product_info", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the CBR resource whose order will be changed.
        The resource must be in **prePaid** mode.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="cloudServiceConsoleUrl")
    def cloud_service_console_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Console URL of the cloud service.
        """
        return pulumi.get(self, "cloud_service_console_url")

    @cloud_service_console_url.setter
    def cloud_service_console_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_service_console_url", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="promotionInfo")
    def promotion_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the promotion information for the order.

        <a name="change_order_product_info_struct"></a>
        The `product_info` block supports:
        """
        return pulumi.get(self, "promotion_info")

    @promotion_info.setter
    def promotion_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "promotion_info", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ChangeOrderState:
    def __init__(__self__, *,
                 cloud_service_console_url: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 product_info: Optional[pulumi.Input['ChangeOrderProductInfoArgs']] = None,
                 promotion_info: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ChangeOrder resources.
        :param pulumi.Input[_builtins.str] cloud_service_console_url: Specifies the Console URL of the cloud service.
        :param pulumi.Input['ChangeOrderProductInfoArgs'] product_info: Specifies the product information.
               The product_info structure is documented below.
        :param pulumi.Input[_builtins.str] promotion_info: Specifies the promotion information for the order.
               
               <a name="change_order_product_info_struct"></a>
               The `product_info` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the CBR resource whose order will be changed.
               The resource must be in **prePaid** mode.
        """
        if cloud_service_console_url is not None:
            pulumi.set(__self__, "cloud_service_console_url", cloud_service_console_url)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if product_info is not None:
            pulumi.set(__self__, "product_info", product_info)
        if promotion_info is not None:
            pulumi.set(__self__, "promotion_info", promotion_info)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter(name="cloudServiceConsoleUrl")
    def cloud_service_console_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the Console URL of the cloud service.
        """
        return pulumi.get(self, "cloud_service_console_url")

    @cloud_service_console_url.setter
    def cloud_service_console_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_service_console_url", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="productInfo")
    def product_info(self) -> Optional[pulumi.Input['ChangeOrderProductInfoArgs']]:
        """
        Specifies the product information.
        The product_info structure is documented below.
        """
        return pulumi.get(self, "product_info")

    @product_info.setter
    def product_info(self, value: Optional[pulumi.Input['ChangeOrderProductInfoArgs']]):
        pulumi.set(self, "product_info", value)

    @_builtins.property
    @pulumi.getter(name="promotionInfo")
    def promotion_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the promotion information for the order.

        <a name="change_order_product_info_struct"></a>
        The `product_info` block supports:
        """
        return pulumi.get(self, "promotion_info")

    @promotion_info.setter
    def promotion_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "promotion_info", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CBR resource whose order will be changed.
        The resource must be in **prePaid** mode.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)


@pulumi.type_token("huaweicloud:Cbr/changeOrder:ChangeOrder")
class ChangeOrder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_service_console_url: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 product_info: Optional[pulumi.Input[Union['ChangeOrderProductInfoArgs', 'ChangeOrderProductInfoArgsDict']]] = None,
                 promotion_info: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to change the order of a CBR resource within HuaweiCloud.

        > This resource is only a one-time action resource to change the order of a CBR resource. Deleting this resource will
        **not** revert the order change, it only removes the resource information from the TF state.

        > The resource to change order must be in **prePaid** mode. Using this resource may cause unexpected changes to
        the `size` field of the `Cbr.Vault` resource. At this time, you can use the `lifecycle` statement
        to ignore the change of `size`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_id = config.require_object("resourceId")
        product_id = config.require_object("productId")
        resource_size = config.require_object("resourceSize")
        resource_spec_code = config.require_object("resourceSpecCode")
        test = huaweicloud.cbr.ChangeOrder("test",
            resource_id=resource_id,
            product_info={
                "product_id": product_id,
                "resource_size": resource_size,
                "resource_size_measure_id": 17,
                "resource_spec_code": resource_spec_code,
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cloud_service_console_url: Specifies the Console URL of the cloud service.
        :param pulumi.Input[Union['ChangeOrderProductInfoArgs', 'ChangeOrderProductInfoArgsDict']] product_info: Specifies the product information.
               The product_info structure is documented below.
        :param pulumi.Input[_builtins.str] promotion_info: Specifies the promotion information for the order.
               
               <a name="change_order_product_info_struct"></a>
               The `product_info` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the CBR resource whose order will be changed.
               The resource must be in **prePaid** mode.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ChangeOrderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to change the order of a CBR resource within HuaweiCloud.

        > This resource is only a one-time action resource to change the order of a CBR resource. Deleting this resource will
        **not** revert the order change, it only removes the resource information from the TF state.

        > The resource to change order must be in **prePaid** mode. Using this resource may cause unexpected changes to
        the `size` field of the `Cbr.Vault` resource. At this time, you can use the `lifecycle` statement
        to ignore the change of `size`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        resource_id = config.require_object("resourceId")
        product_id = config.require_object("productId")
        resource_size = config.require_object("resourceSize")
        resource_spec_code = config.require_object("resourceSpecCode")
        test = huaweicloud.cbr.ChangeOrder("test",
            resource_id=resource_id,
            product_info={
                "product_id": product_id,
                "resource_size": resource_size,
                "resource_size_measure_id": 17,
                "resource_spec_code": resource_spec_code,
            })
        ```

        :param str resource_name: The name of the resource.
        :param ChangeOrderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ChangeOrderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_service_console_url: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 product_info: Optional[pulumi.Input[Union['ChangeOrderProductInfoArgs', 'ChangeOrderProductInfoArgsDict']]] = None,
                 promotion_info: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ChangeOrderArgs.__new__(ChangeOrderArgs)

            __props__.__dict__["cloud_service_console_url"] = cloud_service_console_url
            __props__.__dict__["enable_force_new"] = enable_force_new
            if product_info is None and not opts.urn:
                raise TypeError("Missing required property 'product_info'")
            __props__.__dict__["product_info"] = product_info
            __props__.__dict__["promotion_info"] = promotion_info
            __props__.__dict__["region"] = region
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
        super(ChangeOrder, __self__).__init__(
            'huaweicloud:Cbr/changeOrder:ChangeOrder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_service_console_url: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            product_info: Optional[pulumi.Input[Union['ChangeOrderProductInfoArgs', 'ChangeOrderProductInfoArgsDict']]] = None,
            promotion_info: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ChangeOrder':
        """
        Get an existing ChangeOrder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cloud_service_console_url: Specifies the Console URL of the cloud service.
        :param pulumi.Input[Union['ChangeOrderProductInfoArgs', 'ChangeOrderProductInfoArgsDict']] product_info: Specifies the product information.
               The product_info structure is documented below.
        :param pulumi.Input[_builtins.str] promotion_info: Specifies the promotion information for the order.
               
               <a name="change_order_product_info_struct"></a>
               The `product_info` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the CBR resource whose order will be changed.
               The resource must be in **prePaid** mode.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ChangeOrderState.__new__(_ChangeOrderState)

        __props__.__dict__["cloud_service_console_url"] = cloud_service_console_url
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["product_info"] = product_info
        __props__.__dict__["promotion_info"] = promotion_info
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_id"] = resource_id
        return ChangeOrder(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cloudServiceConsoleUrl")
    def cloud_service_console_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the Console URL of the cloud service.
        """
        return pulumi.get(self, "cloud_service_console_url")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="productInfo")
    def product_info(self) -> pulumi.Output['outputs.ChangeOrderProductInfo']:
        """
        Specifies the product information.
        The product_info structure is documented below.
        """
        return pulumi.get(self, "product_info")

    @_builtins.property
    @pulumi.getter(name="promotionInfo")
    def promotion_info(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the promotion information for the order.

        <a name="change_order_product_info_struct"></a>
        The `product_info` block supports:
        """
        return pulumi.get(self, "promotion_info")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the CBR resource whose order will be changed.
        The resource must be in **prePaid** mode.
        """
        return pulumi.get(self, "resource_id")

