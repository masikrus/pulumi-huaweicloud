# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReplicateBackupArgs', 'ReplicateBackup']

@pulumi.input_type
class ReplicateBackupArgs:
    def __init__(__self__, *,
                 backup_id: pulumi.Input[_builtins.str],
                 replicate: pulumi.Input['ReplicateBackupReplicateArgs'],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ReplicateBackup resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the ID of the backup to be replicated.
        :param pulumi.Input['ReplicateBackupReplicateArgs'] replicate: Specifies the replication parameter.
               The replicate structure is documented below.
               
               <a name="replicate_struct"></a>
               The `replicate` block supports:
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "replicate", replicate)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the backup to be replicated.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter
    def replicate(self) -> pulumi.Input['ReplicateBackupReplicateArgs']:
        """
        Specifies the replication parameter.
        The replicate structure is documented below.

        <a name="replicate_struct"></a>
        The `replicate` block supports:
        """
        return pulumi.get(self, "replicate")

    @replicate.setter
    def replicate(self, value: pulumi.Input['ReplicateBackupReplicateArgs']):
        pulumi.set(self, "replicate", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ReplicateBackupState:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replicate: Optional[pulumi.Input['ReplicateBackupReplicateArgs']] = None):
        """
        Input properties used for looking up and filtering ReplicateBackup resources.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the ID of the backup to be replicated.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input['ReplicateBackupReplicateArgs'] replicate: Specifies the replication parameter.
               The replicate structure is documented below.
               
               <a name="replicate_struct"></a>
               The `replicate` block supports:
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replicate is not None:
            pulumi.set(__self__, "replicate", replicate)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the backup to be replicated.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def replicate(self) -> Optional[pulumi.Input['ReplicateBackupReplicateArgs']]:
        """
        Specifies the replication parameter.
        The replicate structure is documented below.

        <a name="replicate_struct"></a>
        The `replicate` block supports:
        """
        return pulumi.get(self, "replicate")

    @replicate.setter
    def replicate(self, value: Optional[pulumi.Input['ReplicateBackupReplicateArgs']]):
        pulumi.set(self, "replicate", value)


@pulumi.type_token("huaweicloud:Cbr/replicateBackup:ReplicateBackup")
class ReplicateBackup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replicate: Optional[pulumi.Input[Union['ReplicateBackupReplicateArgs', 'ReplicateBackupReplicateArgsDict']]] = None,
                 __props__=None):
        """
        Manages a resource to replicate CBR backup within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not recover the replicated backup,
        but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        backup_id = config.require_object("backupId")
        destination_project_id = config.require_object("destinationProjectId")
        destination_region = config.require_object("destinationRegion")
        destination_vault_id = config.require_object("destinationVaultId")
        name = config.require_object("name")
        description = config.require_object("description")
        enable_acceleration = config.require_object("enableAcceleration")
        example = huaweicloud.cbr.ReplicateBackup("example",
            backup_id=backup_id,
            replicate={
                "destination_project_id": destination_project_id,
                "destination_region": destination_region,
                "destination_vault_id": destination_vault_id,
                "name": name,
                "description": description,
                "enable_acceleration": enable_acceleration,
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the ID of the backup to be replicated.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['ReplicateBackupReplicateArgs', 'ReplicateBackupReplicateArgsDict']] replicate: Specifies the replication parameter.
               The replicate structure is documented below.
               
               <a name="replicate_struct"></a>
               The `replicate` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReplicateBackupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a resource to replicate CBR backup within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not recover the replicated backup,
        but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        backup_id = config.require_object("backupId")
        destination_project_id = config.require_object("destinationProjectId")
        destination_region = config.require_object("destinationRegion")
        destination_vault_id = config.require_object("destinationVaultId")
        name = config.require_object("name")
        description = config.require_object("description")
        enable_acceleration = config.require_object("enableAcceleration")
        example = huaweicloud.cbr.ReplicateBackup("example",
            backup_id=backup_id,
            replicate={
                "destination_project_id": destination_project_id,
                "destination_region": destination_region,
                "destination_vault_id": destination_vault_id,
                "name": name,
                "description": description,
                "enable_acceleration": enable_acceleration,
            })
        ```

        :param str resource_name: The name of the resource.
        :param ReplicateBackupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReplicateBackupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 replicate: Optional[pulumi.Input[Union['ReplicateBackupReplicateArgs', 'ReplicateBackupReplicateArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReplicateBackupArgs.__new__(ReplicateBackupArgs)

            if backup_id is None and not opts.urn:
                raise TypeError("Missing required property 'backup_id'")
            __props__.__dict__["backup_id"] = backup_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["region"] = region
            if replicate is None and not opts.urn:
                raise TypeError("Missing required property 'replicate'")
            __props__.__dict__["replicate"] = replicate
        super(ReplicateBackup, __self__).__init__(
            'huaweicloud:Cbr/replicateBackup:ReplicateBackup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            replicate: Optional[pulumi.Input[Union['ReplicateBackupReplicateArgs', 'ReplicateBackupReplicateArgsDict']]] = None) -> 'ReplicateBackup':
        """
        Get an existing ReplicateBackup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the ID of the backup to be replicated.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Union['ReplicateBackupReplicateArgs', 'ReplicateBackupReplicateArgsDict']] replicate: Specifies the replication parameter.
               The replicate structure is documented below.
               
               <a name="replicate_struct"></a>
               The `replicate` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReplicateBackupState.__new__(_ReplicateBackupState)

        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["region"] = region
        __props__.__dict__["replicate"] = replicate
        return ReplicateBackup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the backup to be replicated.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def replicate(self) -> pulumi.Output['outputs.ReplicateBackupReplicate']:
        """
        Specifies the replication parameter.
        The replicate structure is documented below.

        <a name="replicate_struct"></a>
        The `replicate` block supports:
        """
        return pulumi.get(self, "replicate")

