# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VaultChangeChargeModeArgs', 'VaultChangeChargeMode']

@pulumi.input_type
class VaultChangeChargeModeArgs:
    def __init__(__self__, *,
                 charging_mode: pulumi.Input[_builtins.str],
                 period_num: pulumi.Input[_builtins.int],
                 period_type: pulumi.Input[_builtins.str],
                 vault_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_renew: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VaultChangeChargeMode resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the vault. Only supports **pre_paid**.
        :param pulumi.Input[_builtins.int] period_num: Specifies the number of periods to purchase.
        :param pulumi.Input[_builtins.str] period_type: Specifies the period type of the vault. Only supports **month** and **year**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vault_ids: Specifies the IDs of the vaults to change charge mode.
        :param pulumi.Input[_builtins.bool] is_auto_renew: Specifies whether to auto-renew the vault when it expires.
               Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "period_num", period_num)
        pulumi.set(__self__, "period_type", period_type)
        pulumi.set(__self__, "vault_ids", vault_ids)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_auto_renew is not None:
            pulumi.set(__self__, "is_auto_renew", is_auto_renew)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the charging mode of the vault. Only supports **pre_paid**.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="periodNum")
    def period_num(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the number of periods to purchase.
        """
        return pulumi.get(self, "period_num")

    @period_num.setter
    def period_num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "period_num", value)

    @_builtins.property
    @pulumi.getter(name="periodType")
    def period_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the period type of the vault. Only supports **month** and **year**.
        """
        return pulumi.get(self, "period_type")

    @period_type.setter
    def period_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "period_type", value)

    @_builtins.property
    @pulumi.getter(name="vaultIds")
    def vault_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the IDs of the vaults to change charge mode.
        """
        return pulumi.get(self, "vault_ids")

    @vault_ids.setter
    def vault_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "vault_ids", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isAutoRenew")
    def is_auto_renew(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to auto-renew the vault when it expires.
        Defaults to **false**.
        """
        return pulumi.get(self, "is_auto_renew")

    @is_auto_renew.setter
    def is_auto_renew(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_auto_renew", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _VaultChangeChargeModeState:
    def __init__(__self__, *,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_renew: Optional[pulumi.Input[_builtins.bool]] = None,
                 period_num: Optional[pulumi.Input[_builtins.int]] = None,
                 period_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering VaultChangeChargeMode resources.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the vault. Only supports **pre_paid**.
        :param pulumi.Input[_builtins.bool] is_auto_renew: Specifies whether to auto-renew the vault when it expires.
               Defaults to **false**.
        :param pulumi.Input[_builtins.int] period_num: Specifies the number of periods to purchase.
        :param pulumi.Input[_builtins.str] period_type: Specifies the period type of the vault. Only supports **month** and **year**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vault_ids: Specifies the IDs of the vaults to change charge mode.
        """
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_auto_renew is not None:
            pulumi.set(__self__, "is_auto_renew", is_auto_renew)
        if period_num is not None:
            pulumi.set(__self__, "period_num", period_num)
        if period_type is not None:
            pulumi.set(__self__, "period_type", period_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if vault_ids is not None:
            pulumi.set(__self__, "vault_ids", vault_ids)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the charging mode of the vault. Only supports **pre_paid**.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isAutoRenew")
    def is_auto_renew(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to auto-renew the vault when it expires.
        Defaults to **false**.
        """
        return pulumi.get(self, "is_auto_renew")

    @is_auto_renew.setter
    def is_auto_renew(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="periodNum")
    def period_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the number of periods to purchase.
        """
        return pulumi.get(self, "period_num")

    @period_num.setter
    def period_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period_num", value)

    @_builtins.property
    @pulumi.getter(name="periodType")
    def period_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the period type of the vault. Only supports **month** and **year**.
        """
        return pulumi.get(self, "period_type")

    @period_type.setter
    def period_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="vaultIds")
    def vault_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the IDs of the vaults to change charge mode.
        """
        return pulumi.get(self, "vault_ids")

    @vault_ids.setter
    def vault_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vault_ids", value)


@pulumi.type_token("huaweicloud:Cbr/vaultChangeChargeMode:VaultChangeChargeMode")
class VaultChangeChargeMode(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_renew: Optional[pulumi.Input[_builtins.bool]] = None,
                 period_num: Optional[pulumi.Input[_builtins.int]] = None,
                 period_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Using this resource to change the charge mode of CBR vaults within HuaweiCloud.

        > This resource is only a one-time action resource to change the charge mode of CBR vaults. Deleting this resource will
        not affect the actual charge mode of the vaults, but will only remove the resource information from the tfstate file.

        > The vaults to change charge mode must be in **postPaid** mode. Using this resource may cause unexpected changes to
        the `charging_mode` field of the `Cbr.Vault` resource. At this time, you can use the `lifecycle` statement
        to ignore the change of `charging_mode`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vault_id = config.require_object("vaultId")
        test = huaweicloud.cbr.VaultChangeChargeMode("test",
            vault_ids=[vault_id],
            charging_mode="pre_paid",
            period_type="month",
            period_num=1,
            is_auto_renew=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the vault. Only supports **pre_paid**.
        :param pulumi.Input[_builtins.bool] is_auto_renew: Specifies whether to auto-renew the vault when it expires.
               Defaults to **false**.
        :param pulumi.Input[_builtins.int] period_num: Specifies the number of periods to purchase.
        :param pulumi.Input[_builtins.str] period_type: Specifies the period type of the vault. Only supports **month** and **year**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vault_ids: Specifies the IDs of the vaults to change charge mode.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VaultChangeChargeModeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to change the charge mode of CBR vaults within HuaweiCloud.

        > This resource is only a one-time action resource to change the charge mode of CBR vaults. Deleting this resource will
        not affect the actual charge mode of the vaults, but will only remove the resource information from the tfstate file.

        > The vaults to change charge mode must be in **postPaid** mode. Using this resource may cause unexpected changes to
        the `charging_mode` field of the `Cbr.Vault` resource. At this time, you can use the `lifecycle` statement
        to ignore the change of `charging_mode`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vault_id = config.require_object("vaultId")
        test = huaweicloud.cbr.VaultChangeChargeMode("test",
            vault_ids=[vault_id],
            charging_mode="pre_paid",
            period_type="month",
            period_num=1,
            is_auto_renew=True)
        ```

        :param str resource_name: The name of the resource.
        :param VaultChangeChargeModeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VaultChangeChargeModeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_auto_renew: Optional[pulumi.Input[_builtins.bool]] = None,
                 period_num: Optional[pulumi.Input[_builtins.int]] = None,
                 period_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VaultChangeChargeModeArgs.__new__(VaultChangeChargeModeArgs)

            if charging_mode is None and not opts.urn:
                raise TypeError("Missing required property 'charging_mode'")
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["is_auto_renew"] = is_auto_renew
            if period_num is None and not opts.urn:
                raise TypeError("Missing required property 'period_num'")
            __props__.__dict__["period_num"] = period_num
            if period_type is None and not opts.urn:
                raise TypeError("Missing required property 'period_type'")
            __props__.__dict__["period_type"] = period_type
            __props__.__dict__["region"] = region
            if vault_ids is None and not opts.urn:
                raise TypeError("Missing required property 'vault_ids'")
            __props__.__dict__["vault_ids"] = vault_ids
        super(VaultChangeChargeMode, __self__).__init__(
            'huaweicloud:Cbr/vaultChangeChargeMode:VaultChangeChargeMode',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            is_auto_renew: Optional[pulumi.Input[_builtins.bool]] = None,
            period_num: Optional[pulumi.Input[_builtins.int]] = None,
            period_type: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            vault_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'VaultChangeChargeMode':
        """
        Get an existing VaultChangeChargeMode resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] charging_mode: Specifies the charging mode of the vault. Only supports **pre_paid**.
        :param pulumi.Input[_builtins.bool] is_auto_renew: Specifies whether to auto-renew the vault when it expires.
               Defaults to **false**.
        :param pulumi.Input[_builtins.int] period_num: Specifies the number of periods to purchase.
        :param pulumi.Input[_builtins.str] period_type: Specifies the period type of the vault. Only supports **month** and **year**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vault_ids: Specifies the IDs of the vaults to change charge mode.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VaultChangeChargeModeState.__new__(_VaultChangeChargeModeState)

        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["is_auto_renew"] = is_auto_renew
        __props__.__dict__["period_num"] = period_num
        __props__.__dict__["period_type"] = period_type
        __props__.__dict__["region"] = region
        __props__.__dict__["vault_ids"] = vault_ids
        return VaultChangeChargeMode(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the charging mode of the vault. Only supports **pre_paid**.
        """
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="isAutoRenew")
    def is_auto_renew(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to auto-renew the vault when it expires.
        Defaults to **false**.
        """
        return pulumi.get(self, "is_auto_renew")

    @_builtins.property
    @pulumi.getter(name="periodNum")
    def period_num(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the number of periods to purchase.
        """
        return pulumi.get(self, "period_num")

    @_builtins.property
    @pulumi.getter(name="periodType")
    def period_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the period type of the vault. Only supports **month** and **year**.
        """
        return pulumi.get(self, "period_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="vaultIds")
    def vault_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the IDs of the vaults to change charge mode.
        """
        return pulumi.get(self, "vault_ids")

