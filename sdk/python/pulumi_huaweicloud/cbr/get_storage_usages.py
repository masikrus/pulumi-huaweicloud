# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetStorageUsagesResult',
    'AwaitableGetStorageUsagesResult',
    'get_storage_usages',
    'get_storage_usages_output',
]

@pulumi.output_type
class GetStorageUsagesResult:
    """
    A collection of values returned by getStorageUsages.
    """
    def __init__(__self__, id=None, region=None, resource_id=None, resource_type=None, storage_usages=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if storage_usages and not isinstance(storage_usages, list):
            raise TypeError("Expected argument 'storage_usages' to be a list")
        pulumi.set(__self__, "storage_usages", storage_usages)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The ID of the resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="storageUsages")
    def storage_usages(self) -> Sequence['outputs.GetStorageUsagesStorageUsageResult']:
        """
        The storage usage statistics list.
        """
        return pulumi.get(self, "storage_usages")


class AwaitableGetStorageUsagesResult(GetStorageUsagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStorageUsagesResult(
            id=self.id,
            region=self.region,
            resource_id=self.resource_id,
            resource_type=self.resource_type,
            storage_usages=self.storage_usages)


def get_storage_usages(region: Optional[_builtins.str] = None,
                       resource_id: Optional[_builtins.str] = None,
                       resource_type: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStorageUsagesResult:
    """
    Use this data source to query the storage usage statistics of CBR within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cbr.get_storage_usages()
    ```


    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the ID of the resource to filter the storage usage.
    :param _builtins.str resource_type: Specifies the type of the resource to filter by.
           Valid values are **OS::Nova::Server**, **OS::Cinder::Volume**, **OS::Ironic::BareMetalServer**,
           **OS::Native::Server**, **OS::Sfs::Turbo**, **OS::Workspace::DesktopV2**.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['resourceType'] = resource_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cbr/getStorageUsages:getStorageUsages', __args__, opts=opts, typ=GetStorageUsagesResult).value

    return AwaitableGetStorageUsagesResult(
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        storage_usages=pulumi.get(__ret__, 'storage_usages'))
def get_storage_usages_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStorageUsagesResult]:
    """
    Use this data source to query the storage usage statistics of CBR within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cbr.get_storage_usages()
    ```


    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_id: Specifies the ID of the resource to filter the storage usage.
    :param _builtins.str resource_type: Specifies the type of the resource to filter by.
           Valid values are **OS::Nova::Server**, **OS::Cinder::Volume**, **OS::Ironic::BareMetalServer**,
           **OS::Native::Server**, **OS::Sfs::Turbo**, **OS::Workspace::DesktopV2**.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['resourceId'] = resource_id
    __args__['resourceType'] = resource_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cbr/getStorageUsages:getStorageUsages', __args__, opts=opts, typ=GetStorageUsagesResult)
    return __ret__.apply(lambda __response__: GetStorageUsagesResult(
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        storage_usages=pulumi.get(__response__, 'storage_usages')))
