# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMigrateStatusResult',
    'AwaitableGetMigrateStatusResult',
    'get_migrate_status',
    'get_migrate_status_output',
]

@pulumi.output_type
class GetMigrateStatusResult:
    """
    A collection of values returned by getMigrateStatus.
    """
    def __init__(__self__, all_regions=None, id=None, project_statuses=None, region=None, status=None):
        if all_regions and not isinstance(all_regions, bool):
            raise TypeError("Expected argument 'all_regions' to be a bool")
        pulumi.set(__self__, "all_regions", all_regions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_statuses and not isinstance(project_statuses, list):
            raise TypeError("Expected argument 'project_statuses' to be a list")
        pulumi.set(__self__, "project_statuses", project_statuses)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="allRegions")
    def all_regions(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "all_regions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="projectStatuses")
    def project_statuses(self) -> Sequence['outputs.GetMigrateStatusProjectStatusResult']:
        """
        List of project migration status details.
        The project_status structure is documented below.
        """
        return pulumi.get(self, "project_statuses")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The migration status of the project. Possible values are:
        + **migrating**: Migration processing.
        + **success**: Migration completed successfully.
        + **failed**: Migration failed.
        """
        return pulumi.get(self, "status")


class AwaitableGetMigrateStatusResult(GetMigrateStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMigrateStatusResult(
            all_regions=self.all_regions,
            id=self.id,
            project_statuses=self.project_statuses,
            region=self.region,
            status=self.status)


def get_migrate_status(all_regions: Optional[_builtins.bool] = None,
                       region: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMigrateStatusResult:
    """
    Use this data source to get the migration status of CBR resources within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cbr.get_migrate_status(all_regions=False)
    ```


    :param _builtins.bool all_regions: Specifies whether to query the migration results in other regions.
    :param _builtins.str region: Specifies the region in which to query the datasource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['allRegions'] = all_regions
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cbr/getMigrateStatus:getMigrateStatus', __args__, opts=opts, typ=GetMigrateStatusResult).value

    return AwaitableGetMigrateStatusResult(
        all_regions=pulumi.get(__ret__, 'all_regions'),
        id=pulumi.get(__ret__, 'id'),
        project_statuses=pulumi.get(__ret__, 'project_statuses'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_migrate_status_output(all_regions: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMigrateStatusResult]:
    """
    Use this data source to get the migration status of CBR resources within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cbr.get_migrate_status(all_regions=False)
    ```


    :param _builtins.bool all_regions: Specifies whether to query the migration results in other regions.
    :param _builtins.str region: Specifies the region in which to query the datasource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['allRegions'] = all_regions
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cbr/getMigrateStatus:getMigrateStatus', __args__, opts=opts, typ=GetMigrateStatusResult)
    return __ret__.apply(lambda __response__: GetMigrateStatusResult(
        all_regions=pulumi.get(__response__, 'all_regions'),
        id=pulumi.get(__response__, 'id'),
        project_statuses=pulumi.get(__response__, 'project_statuses'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
