# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['BackupSyncArgs', 'BackupSync']

@pulumi.input_type
class BackupSyncArgs:
    def __init__(__self__, *,
                 backup_id: pulumi.Input[_builtins.str],
                 backup_name: pulumi.Input[_builtins.str],
                 bucket_name: pulumi.Input[_builtins.str],
                 created_at: pulumi.Input[_builtins.int],
                 image_path: pulumi.Input[_builtins.str],
                 resource_id: pulumi.Input[_builtins.str],
                 resource_name: pulumi.Input[_builtins.str],
                 resource_type: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BackupSync resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the backup ID to be synchronized.
        :param pulumi.Input[_builtins.str] backup_name: Specifies the name of the backup.
        :param pulumi.Input[_builtins.str] bucket_name: Specifies the name of the bucket where the backup is stored.
        :param pulumi.Input[_builtins.int] created_at: Specifies the timestamp when the backup was created.
        :param pulumi.Input[_builtins.str] image_path: Specifies the path of the backup image in the bucket.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to be backed up.
        :param pulumi.Input[_builtins.str] resource_name: Specifies the name of the resource to be backed up.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource to be backed up.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_name", backup_name)
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "image_path", image_path)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backup ID to be synchronized.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the backup.
        """
        return pulumi.get(self, "backup_name")

    @backup_name.setter
    def backup_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "backup_name", value)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the bucket where the backup is stored.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the timestamp when the backup was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="imagePath")
    def image_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the path of the backup image in the bucket.
        """
        return pulumi.get(self, "image_path")

    @image_path.setter
    def image_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_path", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the resource to be backed up.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the resource to be backed up.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the resource to be backed up.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _BackupSyncState:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_name: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 image_path: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupSync resources.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the backup ID to be synchronized.
        :param pulumi.Input[_builtins.str] backup_name: Specifies the name of the backup.
        :param pulumi.Input[_builtins.str] bucket_name: Specifies the name of the bucket where the backup is stored.
        :param pulumi.Input[_builtins.int] created_at: Specifies the timestamp when the backup was created.
        :param pulumi.Input[_builtins.str] image_path: Specifies the path of the backup image in the bucket.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to be backed up.
        :param pulumi.Input[_builtins.str] resource_name: Specifies the name of the resource to be backed up.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource to be backed up.
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if backup_name is not None:
            pulumi.set(__self__, "backup_name", backup_name)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if image_path is not None:
            pulumi.set(__self__, "image_path", image_path)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup ID to be synchronized.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the backup.
        """
        return pulumi.get(self, "backup_name")

    @backup_name.setter
    def backup_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_name", value)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the bucket where the backup is stored.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the timestamp when the backup was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="imagePath")
    def image_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the path of the backup image in the bucket.
        """
        return pulumi.get(self, "image_path")

    @image_path.setter
    def image_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_path", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the resource to be backed up.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the resource to be backed up.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the resource to be backed up.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)


@pulumi.type_token("huaweicloud:Cbr/backupSync:BackupSync")
class BackupSync(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_name: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 image_path: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupSync resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the backup ID to be synchronized.
        :param pulumi.Input[_builtins.str] backup_name: Specifies the name of the backup.
        :param pulumi.Input[_builtins.str] bucket_name: Specifies the name of the bucket where the backup is stored.
        :param pulumi.Input[_builtins.int] created_at: Specifies the timestamp when the backup was created.
        :param pulumi.Input[_builtins.str] image_path: Specifies the path of the backup image in the bucket.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to be backed up.
        :param pulumi.Input[_builtins.str] resource_name_: Specifies the name of the resource to be backed up.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource to be backed up.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupSyncArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupSync resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupSyncArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupSyncArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_name: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.int]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 image_path: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupSyncArgs.__new__(BackupSyncArgs)

            if backup_id is None and not opts.urn:
                raise TypeError("Missing required property 'backup_id'")
            __props__.__dict__["backup_id"] = backup_id
            if backup_name is None and not opts.urn:
                raise TypeError("Missing required property 'backup_name'")
            __props__.__dict__["backup_name"] = backup_name
            if bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_name'")
            __props__.__dict__["bucket_name"] = bucket_name
            if created_at is None and not opts.urn:
                raise TypeError("Missing required property 'created_at'")
            __props__.__dict__["created_at"] = created_at
            __props__.__dict__["enable_force_new"] = enable_force_new
            if image_path is None and not opts.urn:
                raise TypeError("Missing required property 'image_path'")
            __props__.__dict__["image_path"] = image_path
            __props__.__dict__["region"] = region
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if resource_name_ is None and not opts.urn:
                raise TypeError("Missing required property 'resource_name_'")
            __props__.__dict__["resource_name"] = resource_name_
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
        super(BackupSync, __self__).__init__(
            'huaweicloud:Cbr/backupSync:BackupSync',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_id: Optional[pulumi.Input[_builtins.str]] = None,
            backup_name: Optional[pulumi.Input[_builtins.str]] = None,
            bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.int]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            image_path: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupSync':
        """
        Get an existing BackupSync resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the backup ID to be synchronized.
        :param pulumi.Input[_builtins.str] backup_name: Specifies the name of the backup.
        :param pulumi.Input[_builtins.str] bucket_name: Specifies the name of the bucket where the backup is stored.
        :param pulumi.Input[_builtins.int] created_at: Specifies the timestamp when the backup was created.
        :param pulumi.Input[_builtins.str] image_path: Specifies the path of the backup image in the bucket.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to be backed up.
        :param pulumi.Input[_builtins.str] resource_name_: Specifies the name of the resource to be backed up.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the type of the resource to be backed up.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupSyncState.__new__(_BackupSyncState)

        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["backup_name"] = backup_name
        __props__.__dict__["bucket_name"] = bucket_name
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["image_path"] = image_path
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_type"] = resource_type
        return BackupSync(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the backup ID to be synchronized.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the backup.
        """
        return pulumi.get(self, "backup_name")

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the bucket where the backup is stored.
        """
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the timestamp when the backup was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="imagePath")
    def image_path(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the path of the backup image in the bucket.
        """
        return pulumi.get(self, "image_path")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource. If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the resource to be backed up.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the resource to be backed up.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of the resource to be backed up.
        """
        return pulumi.get(self, "resource_type")

