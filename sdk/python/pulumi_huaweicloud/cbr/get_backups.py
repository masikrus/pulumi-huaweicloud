# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBackupsResult',
    'AwaitableGetBackupsResult',
    'get_backups',
    'get_backups_output',
]

@pulumi.output_type
class GetBackupsResult:
    """
    A collection of values returned by getBackups.
    """
    def __init__(__self__, backups=None, checkpoint_id=None, dec=None, end_time=None, enterprise_project_id=None, id=None, image_type=None, incremental=None, member_status=None, name=None, own_type=None, parent_id=None, region=None, resource_az=None, resource_id=None, resource_name=None, resource_type=None, show_replication=None, sort=None, start_time=None, status=None, used_percent=None, vault_id=None):
        if backups and not isinstance(backups, list):
            raise TypeError("Expected argument 'backups' to be a list")
        pulumi.set(__self__, "backups", backups)
        if checkpoint_id and not isinstance(checkpoint_id, str):
            raise TypeError("Expected argument 'checkpoint_id' to be a str")
        pulumi.set(__self__, "checkpoint_id", checkpoint_id)
        if dec and not isinstance(dec, bool):
            raise TypeError("Expected argument 'dec' to be a bool")
        pulumi.set(__self__, "dec", dec)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_type and not isinstance(image_type, str):
            raise TypeError("Expected argument 'image_type' to be a str")
        pulumi.set(__self__, "image_type", image_type)
        if incremental and not isinstance(incremental, bool):
            raise TypeError("Expected argument 'incremental' to be a bool")
        pulumi.set(__self__, "incremental", incremental)
        if member_status and not isinstance(member_status, str):
            raise TypeError("Expected argument 'member_status' to be a str")
        pulumi.set(__self__, "member_status", member_status)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if own_type and not isinstance(own_type, str):
            raise TypeError("Expected argument 'own_type' to be a str")
        pulumi.set(__self__, "own_type", own_type)
        if parent_id and not isinstance(parent_id, str):
            raise TypeError("Expected argument 'parent_id' to be a str")
        pulumi.set(__self__, "parent_id", parent_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_az and not isinstance(resource_az, str):
            raise TypeError("Expected argument 'resource_az' to be a str")
        pulumi.set(__self__, "resource_az", resource_az)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if show_replication and not isinstance(show_replication, bool):
            raise TypeError("Expected argument 'show_replication' to be a bool")
        pulumi.set(__self__, "show_replication", show_replication)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if used_percent and not isinstance(used_percent, str):
            raise TypeError("Expected argument 'used_percent' to be a str")
        pulumi.set(__self__, "used_percent", used_percent)
        if vault_id and not isinstance(vault_id, str):
            raise TypeError("Expected argument 'vault_id' to be a str")
        pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetBackupsBackupResult']:
        """
        The backup list.
        """
        return pulumi.get(self, "backups")

    @_builtins.property
    @pulumi.getter(name="checkpointId")
    def checkpoint_id(self) -> Optional[_builtins.str]:
        """
        The restore point ID.
        """
        return pulumi.get(self, "checkpoint_id")

    @_builtins.property
    @pulumi.getter
    def dec(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "dec")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[_builtins.str]:
        """
        The backup type.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> Optional[_builtins.bool]:
        """
        Whether incremental backup is used.
        """
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter(name="memberStatus")
    def member_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "member_status")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The backup name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ownType")
    def own_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "own_type")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[_builtins.str]:
        """
        The parent backup ID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceAz")
    def resource_az(self) -> Optional[_builtins.str]:
        """
        The resource availability zone.
        """
        return pulumi.get(self, "resource_az")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="showReplication")
    def show_replication(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "show_replication")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The replication status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="usedPercent")
    def used_percent(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "used_percent")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[_builtins.str]:
        """
        The ID of the vault where the backup resides.
        """
        return pulumi.get(self, "vault_id")


class AwaitableGetBackupsResult(GetBackupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupsResult(
            backups=self.backups,
            checkpoint_id=self.checkpoint_id,
            dec=self.dec,
            end_time=self.end_time,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            image_type=self.image_type,
            incremental=self.incremental,
            member_status=self.member_status,
            name=self.name,
            own_type=self.own_type,
            parent_id=self.parent_id,
            region=self.region,
            resource_az=self.resource_az,
            resource_id=self.resource_id,
            resource_name=self.resource_name,
            resource_type=self.resource_type,
            show_replication=self.show_replication,
            sort=self.sort,
            start_time=self.start_time,
            status=self.status,
            used_percent=self.used_percent,
            vault_id=self.vault_id)


def get_backups(checkpoint_id: Optional[_builtins.str] = None,
                dec: Optional[_builtins.bool] = None,
                end_time: Optional[_builtins.str] = None,
                enterprise_project_id: Optional[_builtins.str] = None,
                image_type: Optional[_builtins.str] = None,
                incremental: Optional[_builtins.bool] = None,
                member_status: Optional[_builtins.str] = None,
                name: Optional[_builtins.str] = None,
                own_type: Optional[_builtins.str] = None,
                parent_id: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                resource_az: Optional[_builtins.str] = None,
                resource_id: Optional[_builtins.str] = None,
                resource_name: Optional[_builtins.str] = None,
                resource_type: Optional[_builtins.str] = None,
                show_replication: Optional[_builtins.bool] = None,
                sort: Optional[_builtins.str] = None,
                start_time: Optional[_builtins.str] = None,
                status: Optional[_builtins.str] = None,
                used_percent: Optional[_builtins.str] = None,
                vault_id: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupsResult:
    """
    Use this data source to query the CBR backups within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cbr.get_backups()
    ```


    :param _builtins.str checkpoint_id: Specifies the restore point ID.
    :param _builtins.bool dec: Specifies the dedicated cloud tag, which only takes effect in dedicated cloud scenarios.
    :param _builtins.str end_time: Specifies the time when the backup ends. In `%YYYY-%mm-%ddT%HH:%MM:%SSZ` format.
           For example, **2018-02-01T12:00:00Z**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           **all_granted_eps** indicates querying the IDs of all enterprise projects on which the user has permissions.
    :param _builtins.str image_type: Specifies the backup type. The value can be **backup** or **replication**.
    :param _builtins.bool incremental: Specifies whether incremental backup is used.
    :param _builtins.str member_status: Specifies the backup sharing status.
    :param _builtins.str name: Specifies the backup name.
    :param _builtins.str own_type: Specifies the owning type of backup. Valid values are **private**, **shared**,
           and **all_granted**. Private backups are queried by default.
    :param _builtins.str parent_id: Specifies the parent backup ID.
    :param _builtins.str region: Specifies the region in which to query the backup detail.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_az: Specifies the resource availability zones.
    :param _builtins.str resource_id: Specifies the resource ID.
    :param _builtins.str resource_name: Specifies the resource name.
    :param _builtins.str resource_type: Specifies the resource type. Valid values are **OS::Nova::Server**,
           **OS::Cinder::Volume**, **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo**,
           **OS::Workspace::DesktopV2**.
    :param _builtins.bool show_replication: Specifies whether to show replication records.
    :param _builtins.str sort: Specifies the sort key. A group of properties separated by commas (,) and sorting directions.
           The value is in the format of `<key1>[:<direction>],<key2>[:<direction>]`, where the value of direction is asc
           (ascending order) or desc (descending order). If a direction is not specified, the default sorting direction is desc.
           The value of sort can contain a maximum of `255` characters. The key can be as follows: **created_at**, **updated_at**,
           **name**, **status**, **protected_at**, and **id**.
    :param _builtins.str start_time: Specifies the time when the backup starts. In `%YYYY-%mm-%ddT%HH:%MM:%SSZ` format.
           For example, **2018-02-01T12:00:00Z**.
    :param _builtins.str status: Specifies the status. When the API is called, multiple statuses can be transferred for
           filtering, separated by commas (,). For example, **available,error**.
    :param _builtins.str used_percent: Specifies the using percent of the occupied vault capacity. The value ranges from
           `1` to `100`. For example, if used_percent is set to `80`, all backups who occupied `80%` or more of the vault capacity
           are displayed.
    :param _builtins.str vault_id: Specifies the vault ID.
    """
    __args__ = dict()
    __args__['checkpointId'] = checkpoint_id
    __args__['dec'] = dec
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['imageType'] = image_type
    __args__['incremental'] = incremental
    __args__['memberStatus'] = member_status
    __args__['name'] = name
    __args__['ownType'] = own_type
    __args__['parentId'] = parent_id
    __args__['region'] = region
    __args__['resourceAz'] = resource_az
    __args__['resourceId'] = resource_id
    __args__['resourceName'] = resource_name
    __args__['resourceType'] = resource_type
    __args__['showReplication'] = show_replication
    __args__['sort'] = sort
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['usedPercent'] = used_percent
    __args__['vaultId'] = vault_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cbr/getBackups:getBackups', __args__, opts=opts, typ=GetBackupsResult).value

    return AwaitableGetBackupsResult(
        backups=pulumi.get(__ret__, 'backups'),
        checkpoint_id=pulumi.get(__ret__, 'checkpoint_id'),
        dec=pulumi.get(__ret__, 'dec'),
        end_time=pulumi.get(__ret__, 'end_time'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        image_type=pulumi.get(__ret__, 'image_type'),
        incremental=pulumi.get(__ret__, 'incremental'),
        member_status=pulumi.get(__ret__, 'member_status'),
        name=pulumi.get(__ret__, 'name'),
        own_type=pulumi.get(__ret__, 'own_type'),
        parent_id=pulumi.get(__ret__, 'parent_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_az=pulumi.get(__ret__, 'resource_az'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        show_replication=pulumi.get(__ret__, 'show_replication'),
        sort=pulumi.get(__ret__, 'sort'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        used_percent=pulumi.get(__ret__, 'used_percent'),
        vault_id=pulumi.get(__ret__, 'vault_id'))
def get_backups_output(checkpoint_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       dec: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                       end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       image_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       incremental: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                       member_status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       own_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       parent_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       resource_az: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       resource_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       show_replication: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                       sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       used_percent: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       vault_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupsResult]:
    """
    Use this data source to query the CBR backups within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Cbr.get_backups()
    ```


    :param _builtins.str checkpoint_id: Specifies the restore point ID.
    :param _builtins.bool dec: Specifies the dedicated cloud tag, which only takes effect in dedicated cloud scenarios.
    :param _builtins.str end_time: Specifies the time when the backup ends. In `%YYYY-%mm-%ddT%HH:%MM:%SSZ` format.
           For example, **2018-02-01T12:00:00Z**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
           **all_granted_eps** indicates querying the IDs of all enterprise projects on which the user has permissions.
    :param _builtins.str image_type: Specifies the backup type. The value can be **backup** or **replication**.
    :param _builtins.bool incremental: Specifies whether incremental backup is used.
    :param _builtins.str member_status: Specifies the backup sharing status.
    :param _builtins.str name: Specifies the backup name.
    :param _builtins.str own_type: Specifies the owning type of backup. Valid values are **private**, **shared**,
           and **all_granted**. Private backups are queried by default.
    :param _builtins.str parent_id: Specifies the parent backup ID.
    :param _builtins.str region: Specifies the region in which to query the backup detail.
           If omitted, the provider-level region will be used.
    :param _builtins.str resource_az: Specifies the resource availability zones.
    :param _builtins.str resource_id: Specifies the resource ID.
    :param _builtins.str resource_name: Specifies the resource name.
    :param _builtins.str resource_type: Specifies the resource type. Valid values are **OS::Nova::Server**,
           **OS::Cinder::Volume**, **OS::Ironic::BareMetalServer**, **OS::Native::Server**, **OS::Sfs::Turbo**,
           **OS::Workspace::DesktopV2**.
    :param _builtins.bool show_replication: Specifies whether to show replication records.
    :param _builtins.str sort: Specifies the sort key. A group of properties separated by commas (,) and sorting directions.
           The value is in the format of `<key1>[:<direction>],<key2>[:<direction>]`, where the value of direction is asc
           (ascending order) or desc (descending order). If a direction is not specified, the default sorting direction is desc.
           The value of sort can contain a maximum of `255` characters. The key can be as follows: **created_at**, **updated_at**,
           **name**, **status**, **protected_at**, and **id**.
    :param _builtins.str start_time: Specifies the time when the backup starts. In `%YYYY-%mm-%ddT%HH:%MM:%SSZ` format.
           For example, **2018-02-01T12:00:00Z**.
    :param _builtins.str status: Specifies the status. When the API is called, multiple statuses can be transferred for
           filtering, separated by commas (,). For example, **available,error**.
    :param _builtins.str used_percent: Specifies the using percent of the occupied vault capacity. The value ranges from
           `1` to `100`. For example, if used_percent is set to `80`, all backups who occupied `80%` or more of the vault capacity
           are displayed.
    :param _builtins.str vault_id: Specifies the vault ID.
    """
    __args__ = dict()
    __args__['checkpointId'] = checkpoint_id
    __args__['dec'] = dec
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['imageType'] = image_type
    __args__['incremental'] = incremental
    __args__['memberStatus'] = member_status
    __args__['name'] = name
    __args__['ownType'] = own_type
    __args__['parentId'] = parent_id
    __args__['region'] = region
    __args__['resourceAz'] = resource_az
    __args__['resourceId'] = resource_id
    __args__['resourceName'] = resource_name
    __args__['resourceType'] = resource_type
    __args__['showReplication'] = show_replication
    __args__['sort'] = sort
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['usedPercent'] = used_percent
    __args__['vaultId'] = vault_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Cbr/getBackups:getBackups', __args__, opts=opts, typ=GetBackupsResult)
    return __ret__.apply(lambda __response__: GetBackupsResult(
        backups=pulumi.get(__response__, 'backups'),
        checkpoint_id=pulumi.get(__response__, 'checkpoint_id'),
        dec=pulumi.get(__response__, 'dec'),
        end_time=pulumi.get(__response__, 'end_time'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        image_type=pulumi.get(__response__, 'image_type'),
        incremental=pulumi.get(__response__, 'incremental'),
        member_status=pulumi.get(__response__, 'member_status'),
        name=pulumi.get(__response__, 'name'),
        own_type=pulumi.get(__response__, 'own_type'),
        parent_id=pulumi.get(__response__, 'parent_id'),
        region=pulumi.get(__response__, 'region'),
        resource_az=pulumi.get(__response__, 'resource_az'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        show_replication=pulumi.get(__response__, 'show_replication'),
        sort=pulumi.get(__response__, 'sort'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        used_percent=pulumi.get(__response__, 'used_percent'),
        vault_id=pulumi.get(__response__, 'vault_id')))
