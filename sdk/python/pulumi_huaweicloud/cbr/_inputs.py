# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BackupShareMemberArgs',
    'BackupShareMemberArgsDict',
    'ChangeOrderProductInfoArgs',
    'ChangeOrderProductInfoArgsDict',
    'CheckpointBackupArgs',
    'CheckpointBackupArgsDict',
    'OrganizationPolicyPolicyOperationDefinitionArgs',
    'OrganizationPolicyPolicyOperationDefinitionArgsDict',
    'OrganizationPolicyPolicyTriggerArgs',
    'OrganizationPolicyPolicyTriggerArgsDict',
    'OrganizationPolicyPolicyTriggerPropertiesArgs',
    'OrganizationPolicyPolicyTriggerPropertiesArgsDict',
    'PolicyBackupCycleArgs',
    'PolicyBackupCycleArgsDict',
    'PolicyLongTermRetentionArgs',
    'PolicyLongTermRetentionArgsDict',
    'ReplicateBackupReplicateArgs',
    'ReplicateBackupReplicateArgsDict',
    'RestoreDetailsArgs',
    'RestoreDetailsArgsDict',
    'RestoreMappingArgs',
    'RestoreMappingArgsDict',
    'VaultPolicyArgs',
    'VaultPolicyArgsDict',
    'VaultResourceArgs',
    'VaultResourceArgsDict',
    'GetAgentChecksAgentStatusArgs',
    'GetAgentChecksAgentStatusArgsDict',
    'GetVaultsByTagsMatchArgs',
    'GetVaultsByTagsMatchArgsDict',
    'GetVaultsByTagsNotTagArgs',
    'GetVaultsByTagsNotTagArgsDict',
    'GetVaultsByTagsNotTagsAnyArgs',
    'GetVaultsByTagsNotTagsAnyArgsDict',
    'GetVaultsByTagsSysTagArgs',
    'GetVaultsByTagsSysTagArgsDict',
    'GetVaultsByTagsTagArgs',
    'GetVaultsByTagsTagArgsDict',
    'GetVaultsByTagsTagsAnyArgs',
    'GetVaultsByTagsTagsAnyArgsDict',
]

MYPY = False

if not MYPY:
    class BackupShareMemberArgsDict(TypedDict):
        dest_project_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the project with which the backup is shared.
        """
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The creation time of the backup shared member.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the backup shared member record.
        """
        image_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the image registered with the shared backup copy.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The backup sharing status.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The latest update time of the backup shared member.
        """
        vault_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the vault where the shared backup is stored.
        """
elif False:
    BackupShareMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupShareMemberArgs:
    def __init__(__self__, *,
                 dest_project_id: pulumi.Input[_builtins.str],
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] dest_project_id: Specifies the ID of the project with which the backup is shared.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the backup shared member.
        :param pulumi.Input[_builtins.str] id: The ID of the backup shared member record.
        :param pulumi.Input[_builtins.str] image_id: The ID of the image registered with the shared backup copy.
        :param pulumi.Input[_builtins.str] status: The backup sharing status.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the backup shared member.
        :param pulumi.Input[_builtins.str] vault_id: The ID of the vault where the shared backup is stored.
        """
        pulumi.set(__self__, "dest_project_id", dest_project_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="destProjectId")
    def dest_project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the project with which the backup is shared.
        """
        return pulumi.get(self, "dest_project_id")

    @dest_project_id.setter
    def dest_project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dest_project_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the backup shared member.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the backup shared member record.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the image registered with the shared backup copy.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backup sharing status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the backup shared member.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the vault where the shared backup is stored.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vault_id", value)


if not MYPY:
    class ChangeOrderProductInfoArgsDict(TypedDict):
        product_id: pulumi.Input[_builtins.str]
        """
        Specifies the product ID, which is obtained through the price query API.
        The value consists of `1` to `64` characters and can contain only letters, digits, underscores (_), and hyphens (-).
        """
        resource_size: pulumi.Input[_builtins.int]
        """
        Specifies the size of the resource. Value range: `10`-`10,485,760`.
        The size value required must be greater than the existing size value.
        """
        resource_size_measure_id: pulumi.Input[_builtins.int]
        """
        Specifies the measurement unit of the resource size.
        Currently, only `17` (GB) is supported.
        """
        resource_spec_code: pulumi.Input[_builtins.str]
        """
        Specifies the spec code of the resource.
        Valid values are: **vault.backup.server.normal**, **vault.backup.turbo.normal**, **vault.backup.database.normal**,
        **vault.backup.volume.normal**, **vault.backup.rds.normal**, **vault.replication.server.normal**, and
        **vault.hybrid.server.normal**.
        """
elif False:
    ChangeOrderProductInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChangeOrderProductInfoArgs:
    def __init__(__self__, *,
                 product_id: pulumi.Input[_builtins.str],
                 resource_size: pulumi.Input[_builtins.int],
                 resource_size_measure_id: pulumi.Input[_builtins.int],
                 resource_spec_code: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] product_id: Specifies the product ID, which is obtained through the price query API.
               The value consists of `1` to `64` characters and can contain only letters, digits, underscores (_), and hyphens (-).
        :param pulumi.Input[_builtins.int] resource_size: Specifies the size of the resource. Value range: `10`-`10,485,760`.
               The size value required must be greater than the existing size value.
        :param pulumi.Input[_builtins.int] resource_size_measure_id: Specifies the measurement unit of the resource size.
               Currently, only `17` (GB) is supported.
        :param pulumi.Input[_builtins.str] resource_spec_code: Specifies the spec code of the resource.
               Valid values are: **vault.backup.server.normal**, **vault.backup.turbo.normal**, **vault.backup.database.normal**,
               **vault.backup.volume.normal**, **vault.backup.rds.normal**, **vault.replication.server.normal**, and
               **vault.hybrid.server.normal**.
        """
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "resource_size", resource_size)
        pulumi.set(__self__, "resource_size_measure_id", resource_size_measure_id)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the product ID, which is obtained through the price query API.
        The value consists of `1` to `64` characters and can contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the size of the resource. Value range: `10`-`10,485,760`.
        The size value required must be greater than the existing size value.
        """
        return pulumi.get(self, "resource_size")

    @resource_size.setter
    def resource_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "resource_size", value)

    @_builtins.property
    @pulumi.getter(name="resourceSizeMeasureId")
    def resource_size_measure_id(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the measurement unit of the resource size.
        Currently, only `17` (GB) is supported.
        """
        return pulumi.get(self, "resource_size_measure_id")

    @resource_size_measure_id.setter
    def resource_size_measure_id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "resource_size_measure_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the spec code of the resource.
        Valid values are: **vault.backup.server.normal**, **vault.backup.turbo.normal**, **vault.backup.database.normal**,
        **vault.backup.volume.normal**, **vault.backup.rds.normal**, **vault.replication.server.normal**, and
        **vault.hybrid.server.normal**.
        """
        return pulumi.get(self, "resource_spec_code")

    @resource_spec_code.setter
    def resource_spec_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_spec_code", value)


if not MYPY:
    class CheckpointBackupArgsDict(TypedDict):
        resource_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of backup resource.  
        Changing this will create a new resource.
        """
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of the backup resource.  
        The valid values are as follows:
        + **OS::Nova::Server**
        + **OS::Cinder::Volume**
        + **OS::Ironic::BareMetalServer**
        + **OS::Native::Server**
        + **OS::Sfs::Turbo**
        + **OS::Workspace::DesktopV2**

        Changing this will create a new resource.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The backup ID.
        """
        protected_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The backup time.
        """
        resource_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        The backup resource size.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The backup status.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The latest update time of the backup.
        """
elif False:
    CheckpointBackupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CheckpointBackupArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 protected_at: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_size: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of backup resource.  
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] type: Specifies the type of the backup resource.  
               The valid values are as follows:
               + **OS::Nova::Server**
               + **OS::Cinder::Volume**
               + **OS::Ironic::BareMetalServer**
               + **OS::Native::Server**
               + **OS::Sfs::Turbo**
               + **OS::Workspace::DesktopV2**
               
               Changing this will create a new resource.
        :param pulumi.Input[_builtins.str] id: The backup ID.
        :param pulumi.Input[_builtins.str] protected_at: The backup time.
        :param pulumi.Input[_builtins.int] resource_size: The backup resource size.
        :param pulumi.Input[_builtins.str] status: The backup status.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the backup.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protected_at is not None:
            pulumi.set(__self__, "protected_at", protected_at)
        if resource_size is not None:
            pulumi.set(__self__, "resource_size", resource_size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of backup resource.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of the backup resource.  
        The valid values are as follows:
        + **OS::Nova::Server**
        + **OS::Cinder::Volume**
        + **OS::Ironic::BareMetalServer**
        + **OS::Native::Server**
        + **OS::Sfs::Turbo**
        + **OS::Workspace::DesktopV2**

        Changing this will create a new resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backup ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="protectedAt")
    def protected_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backup time.
        """
        return pulumi.get(self, "protected_at")

    @protected_at.setter
    def protected_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protected_at", value)

    @_builtins.property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The backup resource size.
        """
        return pulumi.get(self, "resource_size")

    @resource_size.setter
    def resource_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "resource_size", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backup status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the backup.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class OrganizationPolicyPolicyOperationDefinitionArgsDict(TypedDict):
        day_backups: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the maximum number of daily backups that can be retained.
        The latest backup of each day is saved in the long term. The value ranges from **0** to **100**.
        """
        destination_project_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the destination project ID for replication.
        This parameter is **mandatory** for cross-region replication.
        """
        destination_region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the destination region for replication.
        This parameter is **mandatory** for cross-region replication.
        """
        enable_acceleration: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies whether to enable acceleration to shorten replication time for
        cross-region replication.
        The valid values are as follows:
        + **true**
        + **false**
        """
        full_backup_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Defines how often a full backup is performed after incremental backups.
        If **-1** is specified, full backup will not be performed. The value ranges from **-1** to **100**.

        <a name="cbr_organization_policy_trigger"></a>
        The `policy_trigger` block supports:
        """
        max_backups: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the maximum number of backups that can be automatically created for a
        backup object. The value can be **-1** or ranges from **0** to **99999**. If the value is set to **-1**, backups
        will not be cleared by quantity limit.
        """
        month_backups: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the maximum number of monthly backups that can be retained.
        The latest backup of each month is saved in the long term. The value ranges from **0** to **100**.
        """
        retention_duration_days: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the duration of retaining a backup, in days.
        The maximum value is **99999**. If the value is set to **-1**, backups will not be cleared by retention duration.
        """
        timezone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the time zone where the user is located, for example, **UTC+08:00**.
        """
        week_backups: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the maximum number of weekly backups that can be retained.
        The latest backup of each week is saved in the long term. The value ranges from **0** to **100**.
        """
        year_backups: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the maximum number of yearly backups that can be retained.
        The latest backup of each year is saved in the long term. The value ranges from **0** to **100**.
        """
elif False:
    OrganizationPolicyPolicyOperationDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationPolicyPolicyOperationDefinitionArgs:
    def __init__(__self__, *,
                 day_backups: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_region: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_acceleration: Optional[pulumi.Input[_builtins.str]] = None,
                 full_backup_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 max_backups: Optional[pulumi.Input[_builtins.int]] = None,
                 month_backups: Optional[pulumi.Input[_builtins.int]] = None,
                 retention_duration_days: Optional[pulumi.Input[_builtins.int]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 week_backups: Optional[pulumi.Input[_builtins.int]] = None,
                 year_backups: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] day_backups: Specifies the maximum number of daily backups that can be retained.
               The latest backup of each day is saved in the long term. The value ranges from **0** to **100**.
        :param pulumi.Input[_builtins.str] destination_project_id: Specifies the destination project ID for replication.
               This parameter is **mandatory** for cross-region replication.
        :param pulumi.Input[_builtins.str] destination_region: Specifies the destination region for replication.
               This parameter is **mandatory** for cross-region replication.
        :param pulumi.Input[_builtins.str] enable_acceleration: Specifies whether to enable acceleration to shorten replication time for
               cross-region replication.
               The valid values are as follows:
               + **true**
               + **false**
        :param pulumi.Input[_builtins.int] full_backup_interval: Defines how often a full backup is performed after incremental backups.
               If **-1** is specified, full backup will not be performed. The value ranges from **-1** to **100**.
               
               <a name="cbr_organization_policy_trigger"></a>
               The `policy_trigger` block supports:
        :param pulumi.Input[_builtins.int] max_backups: Specifies the maximum number of backups that can be automatically created for a
               backup object. The value can be **-1** or ranges from **0** to **99999**. If the value is set to **-1**, backups
               will not be cleared by quantity limit.
        :param pulumi.Input[_builtins.int] month_backups: Specifies the maximum number of monthly backups that can be retained.
               The latest backup of each month is saved in the long term. The value ranges from **0** to **100**.
        :param pulumi.Input[_builtins.int] retention_duration_days: Specifies the duration of retaining a backup, in days.
               The maximum value is **99999**. If the value is set to **-1**, backups will not be cleared by retention duration.
        :param pulumi.Input[_builtins.str] timezone: Specifies the time zone where the user is located, for example, **UTC+08:00**.
        :param pulumi.Input[_builtins.int] week_backups: Specifies the maximum number of weekly backups that can be retained.
               The latest backup of each week is saved in the long term. The value ranges from **0** to **100**.
        :param pulumi.Input[_builtins.int] year_backups: Specifies the maximum number of yearly backups that can be retained.
               The latest backup of each year is saved in the long term. The value ranges from **0** to **100**.
        """
        if day_backups is not None:
            pulumi.set(__self__, "day_backups", day_backups)
        if destination_project_id is not None:
            pulumi.set(__self__, "destination_project_id", destination_project_id)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if enable_acceleration is not None:
            pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        if full_backup_interval is not None:
            pulumi.set(__self__, "full_backup_interval", full_backup_interval)
        if max_backups is not None:
            pulumi.set(__self__, "max_backups", max_backups)
        if month_backups is not None:
            pulumi.set(__self__, "month_backups", month_backups)
        if retention_duration_days is not None:
            pulumi.set(__self__, "retention_duration_days", retention_duration_days)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if week_backups is not None:
            pulumi.set(__self__, "week_backups", week_backups)
        if year_backups is not None:
            pulumi.set(__self__, "year_backups", year_backups)

    @_builtins.property
    @pulumi.getter(name="dayBackups")
    def day_backups(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum number of daily backups that can be retained.
        The latest backup of each day is saved in the long term. The value ranges from **0** to **100**.
        """
        return pulumi.get(self, "day_backups")

    @day_backups.setter
    def day_backups(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "day_backups", value)

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination project ID for replication.
        This parameter is **mandatory** for cross-region replication.
        """
        return pulumi.get(self, "destination_project_id")

    @destination_project_id.setter
    def destination_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_project_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the destination region for replication.
        This parameter is **mandatory** for cross-region replication.
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_region", value)

    @_builtins.property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to enable acceleration to shorten replication time for
        cross-region replication.
        The valid values are as follows:
        + **true**
        + **false**
        """
        return pulumi.get(self, "enable_acceleration")

    @enable_acceleration.setter
    def enable_acceleration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_acceleration", value)

    @_builtins.property
    @pulumi.getter(name="fullBackupInterval")
    def full_backup_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Defines how often a full backup is performed after incremental backups.
        If **-1** is specified, full backup will not be performed. The value ranges from **-1** to **100**.

        <a name="cbr_organization_policy_trigger"></a>
        The `policy_trigger` block supports:
        """
        return pulumi.get(self, "full_backup_interval")

    @full_backup_interval.setter
    def full_backup_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "full_backup_interval", value)

    @_builtins.property
    @pulumi.getter(name="maxBackups")
    def max_backups(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum number of backups that can be automatically created for a
        backup object. The value can be **-1** or ranges from **0** to **99999**. If the value is set to **-1**, backups
        will not be cleared by quantity limit.
        """
        return pulumi.get(self, "max_backups")

    @max_backups.setter
    def max_backups(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_backups", value)

    @_builtins.property
    @pulumi.getter(name="monthBackups")
    def month_backups(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum number of monthly backups that can be retained.
        The latest backup of each month is saved in the long term. The value ranges from **0** to **100**.
        """
        return pulumi.get(self, "month_backups")

    @month_backups.setter
    def month_backups(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "month_backups", value)

    @_builtins.property
    @pulumi.getter(name="retentionDurationDays")
    def retention_duration_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the duration of retaining a backup, in days.
        The maximum value is **99999**. If the value is set to **-1**, backups will not be cleared by retention duration.
        """
        return pulumi.get(self, "retention_duration_days")

    @retention_duration_days.setter
    def retention_duration_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_duration_days", value)

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the time zone where the user is located, for example, **UTC+08:00**.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timezone", value)

    @_builtins.property
    @pulumi.getter(name="weekBackups")
    def week_backups(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum number of weekly backups that can be retained.
        The latest backup of each week is saved in the long term. The value ranges from **0** to **100**.
        """
        return pulumi.get(self, "week_backups")

    @week_backups.setter
    def week_backups(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "week_backups", value)

    @_builtins.property
    @pulumi.getter(name="yearBackups")
    def year_backups(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum number of yearly backups that can be retained.
        The latest backup of each year is saved in the long term. The value ranges from **0** to **100**.
        """
        return pulumi.get(self, "year_backups")

    @year_backups.setter
    def year_backups(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "year_backups", value)


if not MYPY:
    class OrganizationPolicyPolicyTriggerArgsDict(TypedDict):
        properties: pulumi.Input['OrganizationPolicyPolicyTriggerPropertiesArgsDict']
        """
        Specifies the properties of policy trigger.
        The properties structure is documented below.

        <a name="cbr_organization_policy_trigger_properties"></a>
        The `properties` block supports:
        """
elif False:
    OrganizationPolicyPolicyTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationPolicyPolicyTriggerArgs:
    def __init__(__self__, *,
                 properties: pulumi.Input['OrganizationPolicyPolicyTriggerPropertiesArgs']):
        """
        :param pulumi.Input['OrganizationPolicyPolicyTriggerPropertiesArgs'] properties: Specifies the properties of policy trigger.
               The properties structure is documented below.
               
               <a name="cbr_organization_policy_trigger_properties"></a>
               The `properties` block supports:
        """
        pulumi.set(__self__, "properties", properties)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> pulumi.Input['OrganizationPolicyPolicyTriggerPropertiesArgs']:
        """
        Specifies the properties of policy trigger.
        The properties structure is documented below.

        <a name="cbr_organization_policy_trigger_properties"></a>
        The `properties` block supports:
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input['OrganizationPolicyPolicyTriggerPropertiesArgs']):
        pulumi.set(self, "properties", value)


if not MYPY:
    class OrganizationPolicyPolicyTriggerPropertiesArgsDict(TypedDict):
        patterns: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the scheduling rules for policy execution. Up to 24 rules are supported.
        The scheduling rules follow the iCalendar RFC 2445 specification, supporting parameters like **FREQ**, **BYDAY**,
        **BYHOUR**, **BYMINUTE**, and **INTERVAL**. For example: **FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR,SA,SU;BYHOUR=14;BYMINUTE=00**.
        """
elif False:
    OrganizationPolicyPolicyTriggerPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationPolicyPolicyTriggerPropertiesArgs:
    def __init__(__self__, *,
                 patterns: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] patterns: Specifies the scheduling rules for policy execution. Up to 24 rules are supported.
               The scheduling rules follow the iCalendar RFC 2445 specification, supporting parameters like **FREQ**, **BYDAY**,
               **BYHOUR**, **BYMINUTE**, and **INTERVAL**. For example: **FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR,SA,SU;BYHOUR=14;BYMINUTE=00**.
        """
        pulumi.set(__self__, "patterns", patterns)

    @_builtins.property
    @pulumi.getter
    def patterns(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the scheduling rules for policy execution. Up to 24 rules are supported.
        The scheduling rules follow the iCalendar RFC 2445 specification, supporting parameters like **FREQ**, **BYDAY**,
        **BYHOUR**, **BYMINUTE**, and **INTERVAL**. For example: **FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR,SA,SU;BYHOUR=14;BYMINUTE=00**.
        """
        return pulumi.get(self, "patterns")

    @patterns.setter
    def patterns(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "patterns", value)


if not MYPY:
    class PolicyBackupCycleArgsDict(TypedDict):
        execution_times: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies the backup time. Automated backups will be triggered at the backup
        time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
        cannot be repeated. In the replication policy, you are advised to set one time point for one day.

        <a name="cbr_policy_long_term_retention"></a>
        The `long_term_retention` block supports:
        """
        days: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the weekly backup day of backup schedule.  
        It supports seven days a week (MO, TU, WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without
        spaces, between date and date during the configuration.
        """
        interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the interval (in days) of backup schedule.  
        The valid value ranges from `1` to `30`.

        > Parameter `backup_cycle.days` and `backup_cycle.interval` are alternative.
        """
elif False:
    PolicyBackupCycleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyBackupCycleArgs:
    def __init__(__self__, *,
                 execution_times: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 days: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] execution_times: Specifies the backup time. Automated backups will be triggered at the backup
               time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
               cannot be repeated. In the replication policy, you are advised to set one time point for one day.
               
               <a name="cbr_policy_long_term_retention"></a>
               The `long_term_retention` block supports:
        :param pulumi.Input[_builtins.str] days: Specifies the weekly backup day of backup schedule.  
               It supports seven days a week (MO, TU, WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without
               spaces, between date and date during the configuration.
        :param pulumi.Input[_builtins.int] interval: Specifies the interval (in days) of backup schedule.  
               The valid value ranges from `1` to `30`.
               
               > Parameter `backup_cycle.days` and `backup_cycle.interval` are alternative.
        """
        pulumi.set(__self__, "execution_times", execution_times)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @_builtins.property
    @pulumi.getter(name="executionTimes")
    def execution_times(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies the backup time. Automated backups will be triggered at the backup
        time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
        cannot be repeated. In the replication policy, you are advised to set one time point for one day.

        <a name="cbr_policy_long_term_retention"></a>
        The `long_term_retention` block supports:
        """
        return pulumi.get(self, "execution_times")

    @execution_times.setter
    def execution_times(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "execution_times", value)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the weekly backup day of backup schedule.  
        It supports seven days a week (MO, TU, WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without
        spaces, between date and date during the configuration.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "days", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the interval (in days) of backup schedule.  
        The valid value ranges from `1` to `30`.

        > Parameter `backup_cycle.days` and `backup_cycle.interval` are alternative.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)


if not MYPY:
    class PolicyLongTermRetentionArgsDict(TypedDict):
        daily: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the latest backup of each day is saved in the long term.
        """
        full_backup_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies how often (after how many incremental backups) a full backup is
        performed. The valid value ranges from `-1` to `100`.
        If `-1` is specified, full backup will not be performed.
        """
        monthly: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the latest backup of each month is saved in the long term.
        """
        weekly: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the latest backup of each week is saved in the long term.
        """
        yearly: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specifies the latest backup of each year is saved in the long term.

        > A maximum of 10 backups are retained for failed periodic backup tasks. They are retained for one month and can be
        manually deleted on the web console.
        """
elif False:
    PolicyLongTermRetentionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyLongTermRetentionArgs:
    def __init__(__self__, *,
                 daily: Optional[pulumi.Input[_builtins.int]] = None,
                 full_backup_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 monthly: Optional[pulumi.Input[_builtins.int]] = None,
                 weekly: Optional[pulumi.Input[_builtins.int]] = None,
                 yearly: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] daily: Specifies the latest backup of each day is saved in the long term.
        :param pulumi.Input[_builtins.int] full_backup_interval: Specifies how often (after how many incremental backups) a full backup is
               performed. The valid value ranges from `-1` to `100`.
               If `-1` is specified, full backup will not be performed.
        :param pulumi.Input[_builtins.int] monthly: Specifies the latest backup of each month is saved in the long term.
        :param pulumi.Input[_builtins.int] weekly: Specifies the latest backup of each week is saved in the long term.
        :param pulumi.Input[_builtins.int] yearly: Specifies the latest backup of each year is saved in the long term.
               
               > A maximum of 10 backups are retained for failed periodic backup tasks. They are retained for one month and can be
               manually deleted on the web console.
        """
        if daily is not None:
            pulumi.set(__self__, "daily", daily)
        if full_backup_interval is not None:
            pulumi.set(__self__, "full_backup_interval", full_backup_interval)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)
        if yearly is not None:
            pulumi.set(__self__, "yearly", yearly)

    @_builtins.property
    @pulumi.getter
    def daily(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the latest backup of each day is saved in the long term.
        """
        return pulumi.get(self, "daily")

    @daily.setter
    def daily(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "daily", value)

    @_builtins.property
    @pulumi.getter(name="fullBackupInterval")
    def full_backup_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies how often (after how many incremental backups) a full backup is
        performed. The valid value ranges from `-1` to `100`.
        If `-1` is specified, full backup will not be performed.
        """
        return pulumi.get(self, "full_backup_interval")

    @full_backup_interval.setter
    def full_backup_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "full_backup_interval", value)

    @_builtins.property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the latest backup of each month is saved in the long term.
        """
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "monthly", value)

    @_builtins.property
    @pulumi.getter
    def weekly(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the latest backup of each week is saved in the long term.
        """
        return pulumi.get(self, "weekly")

    @weekly.setter
    def weekly(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weekly", value)

    @_builtins.property
    @pulumi.getter
    def yearly(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the latest backup of each year is saved in the long term.

        > A maximum of 10 backups are retained for failed periodic backup tasks. They are retained for one month and can be
        manually deleted on the web console.
        """
        return pulumi.get(self, "yearly")

    @yearly.setter
    def yearly(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "yearly", value)


if not MYPY:
    class ReplicateBackupReplicateArgsDict(TypedDict):
        destination_project_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the replication destination project.
        """
        destination_region: pulumi.Input[_builtins.str]
        """
        Specifies the replication destination region.
        """
        destination_vault_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the vault in the replication
        destination region.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the replica description.
        """
        enable_acceleration: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable the acceleration function to
        shorten the replication time for cross-region replication. If this parameter is not set, the acceleration function
        is disabled.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the replica name.
        """
elif False:
    ReplicateBackupReplicateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReplicateBackupReplicateArgs:
    def __init__(__self__, *,
                 destination_project_id: pulumi.Input[_builtins.str],
                 destination_region: pulumi.Input[_builtins.str],
                 destination_vault_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_acceleration: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] destination_project_id: Specifies the ID of the replication destination project.
        :param pulumi.Input[_builtins.str] destination_region: Specifies the replication destination region.
        :param pulumi.Input[_builtins.str] destination_vault_id: Specifies the ID of the vault in the replication
               destination region.
        :param pulumi.Input[_builtins.str] description: Specifies the replica description.
        :param pulumi.Input[_builtins.bool] enable_acceleration: Specifies whether to enable the acceleration function to
               shorten the replication time for cross-region replication. If this parameter is not set, the acceleration function
               is disabled.
        :param pulumi.Input[_builtins.str] name: Specifies the replica name.
        """
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_acceleration is not None:
            pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @destination_project_id.setter
    def destination_project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_project_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_region", value)

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the vault in the replication
        destination region.
        """
        return pulumi.get(self, "destination_vault_id")

    @destination_vault_id.setter
    def destination_vault_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_vault_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the replica description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable the acceleration function to
        shorten the replication time for cross-region replication. If this parameter is not set, the acceleration function
        is disabled.
        """
        return pulumi.get(self, "enable_acceleration")

    @enable_acceleration.setter
    def enable_acceleration(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_acceleration", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the replica name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class RestoreDetailsArgsDict(TypedDict):
        destination_path: pulumi.Input[_builtins.str]
        """
        Specifies the destination path.

        <a name="restore_mappings_struct"></a>
        The `mappings` block supports:
        """
elif False:
    RestoreDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RestoreDetailsArgs:
    def __init__(__self__, *,
                 destination_path: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] destination_path: Specifies the destination path.
               
               <a name="restore_mappings_struct"></a>
               The `mappings` block supports:
        """
        pulumi.set(__self__, "destination_path", destination_path)

    @_builtins.property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the destination path.

        <a name="restore_mappings_struct"></a>
        The `mappings` block supports:
        """
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_path", value)


if not MYPY:
    class RestoreMappingArgsDict(TypedDict):
        backup_id: pulumi.Input[_builtins.str]
        """
        Specifies the disk backup ID.
        """
        volume_id: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the disk to which data is restored.
        """
elif False:
    RestoreMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RestoreMappingArgs:
    def __init__(__self__, *,
                 backup_id: pulumi.Input[_builtins.str],
                 volume_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] backup_id: Specifies the disk backup ID.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the disk to which data is restored.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the disk backup ID.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the disk to which data is restored.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_id", value)


if not MYPY:
    class VaultPolicyArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Specifies the policy ID.
        """
        destination_vault_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of destination vault to which the replication policy
        will associated.

        > Only one policy of each type (backup and replication) can be associated.

        <a name="cbr_vault_resources"></a>
        The `resources` block supports:
        """
elif False:
    VaultPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VaultPolicyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 destination_vault_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies the policy ID.
        :param pulumi.Input[_builtins.str] destination_vault_id: Specifies the ID of destination vault to which the replication policy
               will associated.
               
               > Only one policy of each type (backup and replication) can be associated.
               
               <a name="cbr_vault_resources"></a>
               The `resources` block supports:
        """
        pulumi.set(__self__, "id", id)
        if destination_vault_id is not None:
            pulumi.set(__self__, "destination_vault_id", destination_vault_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of destination vault to which the replication policy
        will associated.

        > Only one policy of each type (backup and replication) can be associated.

        <a name="cbr_vault_resources"></a>
        The `resources` block supports:
        """
        return pulumi.get(self, "destination_vault_id")

    @destination_vault_id.setter
    def destination_vault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_vault_id", value)


if not MYPY:
    class VaultResourceArgsDict(TypedDict):
        excludes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the array of disk IDs which will be excluded in the backup.
        Only **server** vault support this parameter.
        """
        includes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the array of disk or SFS file system IDs which will be included in the backup.
        Only **disk** and **turbo** vault support this parameter.
        """
        server_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of the ECS instance to be backed up.
        """
elif False:
    VaultResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VaultResourceArgs:
    def __init__(__self__, *,
                 excludes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 includes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] excludes: Specifies the array of disk IDs which will be excluded in the backup.
               Only **server** vault support this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] includes: Specifies the array of disk or SFS file system IDs which will be included in the backup.
               Only **disk** and **turbo** vault support this parameter.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the ECS instance to be backed up.
        """
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @_builtins.property
    @pulumi.getter
    def excludes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the array of disk IDs which will be excluded in the backup.
        Only **server** vault support this parameter.
        """
        return pulumi.get(self, "excludes")

    @excludes.setter
    def excludes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "excludes", value)

    @_builtins.property
    @pulumi.getter
    def includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the array of disk or SFS file system IDs which will be included in the backup.
        Only **disk** and **turbo** vault support this parameter.
        """
        return pulumi.get(self, "includes")

    @includes.setter
    def includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "includes", value)

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the ECS instance to be backed up.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_id", value)


if not MYPY:
    class GetAgentChecksAgentStatusArgsDict(TypedDict):
        resource_id: _builtins.str
        """
        Specifies the resource ID.
        """
        resource_type: _builtins.str
        """
        Specifies the resource type.
        The valid values are as follows:
        + **OS::Nova::Server**：Indicates ECS.
        + **OS::Ironic::BareMetalServer**：Indicates BMS.
        """
        resource_name: NotRequired[_builtins.str]
        """
        Specifies the resource name.
        """
elif False:
    GetAgentChecksAgentStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAgentChecksAgentStatusArgs:
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str,
                 resource_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str resource_type: Specifies the resource type.
               The valid values are as follows:
               + **OS::Nova::Server**：Indicates ECS.
               + **OS::Ironic::BareMetalServer**：Indicates BMS.
        :param _builtins.str resource_name: Specifies the resource name.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: _builtins.str):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Specifies the resource type.
        The valid values are as follows:
        + **OS::Nova::Server**：Indicates ECS.
        + **OS::Ironic::BareMetalServer**：Indicates BMS.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: _builtins.str):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[_builtins.str]):
        pulumi.set(self, "resource_name", value)


if not MYPY:
    class GetVaultsByTagsMatchArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        value: _builtins.str
        """
        Specifies the value of the resource tag.
        A value consists of up to `255` characters.
        If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
elif False:
    GetVaultsByTagsMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVaultsByTagsMatchArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param _builtins.str value: Specifies the value of the resource tag.
               A value consists of up to `255` characters.
               If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the resource tag.
        A value consists of up to `255` characters.
        If key is **resource_name**, an empty string indicates exact match and any non-empty string indicates fuzzy match.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: _builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetVaultsByTagsNotTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
elif False:
    GetVaultsByTagsNotTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVaultsByTagsNotTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param Sequence[_builtins.str] values: Specifies the list of values. Currently, only the enterprise project ID is used.
               The default enterprise project ID is `0`.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetVaultsByTagsNotTagsAnyArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
elif False:
    GetVaultsByTagsNotTagsAnyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVaultsByTagsNotTagsAnyArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param Sequence[_builtins.str] values: Specifies the list of values. Currently, only the enterprise project ID is used.
               The default enterprise project ID is `0`.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetVaultsByTagsSysTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
elif False:
    GetVaultsByTagsSysTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVaultsByTagsSysTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param Sequence[_builtins.str] values: Specifies the list of values. Currently, only the enterprise project ID is used.
               The default enterprise project ID is `0`.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetVaultsByTagsTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
elif False:
    GetVaultsByTagsTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVaultsByTagsTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param Sequence[_builtins.str] values: Specifies the list of values. Currently, only the enterprise project ID is used.
               The default enterprise project ID is `0`.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetVaultsByTagsTagsAnyArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
elif False:
    GetVaultsByTagsTagsAnyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVaultsByTagsTagsAnyArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the key of the resource tag.
               A key can only be set to **resource_name**, indicating the resource name.
        :param Sequence[_builtins.str] values: Specifies the list of values. Currently, only the enterprise project ID is used.
               The default enterprise project ID is `0`.
               
               <a name="matches_struct"></a>
               The `matches` block supports:
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the key of the resource tag.
        A key can only be set to **resource_name**, indicating the resource name.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of values. Currently, only the enterprise project ID is used.
        The default enterprise project ID is `0`.

        <a name="matches_struct"></a>
        The `matches` block supports:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


