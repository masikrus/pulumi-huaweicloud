# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RestoreArgs', 'Restore']

@pulumi.input_type
class RestoreArgs:
    def __init__(__self__, *,
                 backup_id: pulumi.Input[_builtins.str],
                 details: Optional[pulumi.Input['RestoreDetailsArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['RestoreMappingArgs']]]] = None,
                 power_on: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Restore resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the disk backup ID.
        :param pulumi.Input['RestoreDetailsArgs'] details: Specifies the restoration details.
               
               The details structure is documented below.
               
               <a name="restore_details_struct"></a>
               The `details` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['RestoreMappingArgs']]] mappings: Specifies the restored mapping relationship. This parameter is mandatory for
               VM restoration and optional for disk restoration.
               You can obtain the disk information through data source `cbr_get_backup`.
               
               The mappings structure is documented below.
        :param pulumi.Input[_builtins.bool] power_on: Whether the server is powered on after restoration. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to be restored.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the target VM to be restored. This parameter is
               mandatory for VM restoration.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the disk to which data is restored.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if power_on is not None:
            pulumi.set(__self__, "power_on", power_on)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the disk backup ID.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input['RestoreDetailsArgs']]:
        """
        Specifies the restoration details.

        The details structure is documented below.

        <a name="restore_details_struct"></a>
        The `details` block supports:
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input['RestoreDetailsArgs']]):
        pulumi.set(self, "details", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RestoreMappingArgs']]]]:
        """
        Specifies the restored mapping relationship. This parameter is mandatory for
        VM restoration and optional for disk restoration.
        You can obtain the disk information through data source `cbr_get_backup`.

        The mappings structure is documented below.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RestoreMappingArgs']]]]):
        pulumi.set(self, "mappings", value)

    @_builtins.property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the server is powered on after restoration. Defaults to **false**.
        """
        return pulumi.get(self, "power_on")

    @power_on.setter
    def power_on(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "power_on", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the resource to be restored.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the target VM to be restored. This parameter is
        mandatory for VM restoration.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the disk to which data is restored.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.input_type
class _RestoreState:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input['RestoreDetailsArgs']] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['RestoreMappingArgs']]]] = None,
                 power_on: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Restore resources.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the disk backup ID.
        :param pulumi.Input['RestoreDetailsArgs'] details: Specifies the restoration details.
               
               The details structure is documented below.
               
               <a name="restore_details_struct"></a>
               The `details` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['RestoreMappingArgs']]] mappings: Specifies the restored mapping relationship. This parameter is mandatory for
               VM restoration and optional for disk restoration.
               You can obtain the disk information through data source `cbr_get_backup`.
               
               The mappings structure is documented below.
        :param pulumi.Input[_builtins.bool] power_on: Whether the server is powered on after restoration. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to be restored.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the target VM to be restored. This parameter is
               mandatory for VM restoration.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the disk to which data is restored.
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if power_on is not None:
            pulumi.set(__self__, "power_on", power_on)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the disk backup ID.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input['RestoreDetailsArgs']]:
        """
        Specifies the restoration details.

        The details structure is documented below.

        <a name="restore_details_struct"></a>
        The `details` block supports:
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input['RestoreDetailsArgs']]):
        pulumi.set(self, "details", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RestoreMappingArgs']]]]:
        """
        Specifies the restored mapping relationship. This parameter is mandatory for
        VM restoration and optional for disk restoration.
        You can obtain the disk information through data source `cbr_get_backup`.

        The mappings structure is documented below.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RestoreMappingArgs']]]]):
        pulumi.set(self, "mappings", value)

    @_builtins.property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the server is powered on after restoration. Defaults to **false**.
        """
        return pulumi.get(self, "power_on")

    @power_on.setter
    def power_on(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "power_on", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the resource to be restored.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the target VM to be restored. This parameter is
        mandatory for VM restoration.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the disk to which data is restored.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.type_token("huaweicloud:Cbr/restore:Restore")
class Restore(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input[Union['RestoreDetailsArgs', 'RestoreDetailsArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RestoreMappingArgs', 'RestoreMappingArgsDict']]]]] = None,
                 power_on: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Using this resource to restore a CBR backup within HuaweiCloud.

        > This resource is only a one-time action resource to restore a CBR backup. Deleting this resource will
        not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        > For backup and recovery constraints and limitations, please refer to the following documents:
        <br/>1. [Restoring from a Cloud Server Backup](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0032.html)
        <br/>2. [Restoring from a Cloud Disk Backup](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0033.html)
        <br/>3. [Restoring from a Desktop Backup](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0110.html)

        ## Restoring an ECS backup

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        ecs_backup_id = config.require_object("ecsBackupId")
        ecs_server_id = config.require_object("ecsServerId")
        evs_backup_id = config.require_object("evsBackupId")
        evs_volume_id = config.require_object("evsVolumeId")
        test = huaweicloud.cbr.Restore("test",
            backup_id=ecs_backup_id,
            server_id=ecs_server_id,
            power_on=True,
            mappings=[{
                "backup_id": evs_backup_id,
                "volume_id": evs_volume_id,
            }])
        ```

        ## Restoring an EVS backup

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        evs_backup_id = config.require_object("evsBackupId")
        evs_volume_id = config.require_object("evsVolumeId")
        test = huaweicloud.cbr.Restore("test",
            backup_id=evs_backup_id,
            volume_id=evs_volume_id)
        ```

        ## Restoring a Workspace backup

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_backup_id = config.require_object("workspaceBackupId")
        workspace_resource_id = config.require_object("workspaceResourceId")
        test = huaweicloud.cbr.Restore("test",
            backup_id=workspace_backup_id,
            resource_id=workspace_resource_id,
            power_on=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the disk backup ID.
        :param pulumi.Input[Union['RestoreDetailsArgs', 'RestoreDetailsArgsDict']] details: Specifies the restoration details.
               
               The details structure is documented below.
               
               <a name="restore_details_struct"></a>
               The `details` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['RestoreMappingArgs', 'RestoreMappingArgsDict']]]] mappings: Specifies the restored mapping relationship. This parameter is mandatory for
               VM restoration and optional for disk restoration.
               You can obtain the disk information through data source `cbr_get_backup`.
               
               The mappings structure is documented below.
        :param pulumi.Input[_builtins.bool] power_on: Whether the server is powered on after restoration. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to be restored.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the target VM to be restored. This parameter is
               mandatory for VM restoration.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the disk to which data is restored.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RestoreArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to restore a CBR backup within HuaweiCloud.

        > This resource is only a one-time action resource to restore a CBR backup. Deleting this resource will
        not clear the corresponding request record, but will only remove the resource information from the tfstate file.

        > For backup and recovery constraints and limitations, please refer to the following documents:
        <br/>1. [Restoring from a Cloud Server Backup](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0032.html)
        <br/>2. [Restoring from a Cloud Disk Backup](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0033.html)
        <br/>3. [Restoring from a Desktop Backup](https://support.huaweicloud.com/intl/en-us/usermanual-cbr/cbr_03_0110.html)

        ## Restoring an ECS backup

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        ecs_backup_id = config.require_object("ecsBackupId")
        ecs_server_id = config.require_object("ecsServerId")
        evs_backup_id = config.require_object("evsBackupId")
        evs_volume_id = config.require_object("evsVolumeId")
        test = huaweicloud.cbr.Restore("test",
            backup_id=ecs_backup_id,
            server_id=ecs_server_id,
            power_on=True,
            mappings=[{
                "backup_id": evs_backup_id,
                "volume_id": evs_volume_id,
            }])
        ```

        ## Restoring an EVS backup

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        evs_backup_id = config.require_object("evsBackupId")
        evs_volume_id = config.require_object("evsVolumeId")
        test = huaweicloud.cbr.Restore("test",
            backup_id=evs_backup_id,
            volume_id=evs_volume_id)
        ```

        ## Restoring a Workspace backup

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        workspace_backup_id = config.require_object("workspaceBackupId")
        workspace_resource_id = config.require_object("workspaceResourceId")
        test = huaweicloud.cbr.Restore("test",
            backup_id=workspace_backup_id,
            resource_id=workspace_resource_id,
            power_on=True)
        ```

        :param str resource_name: The name of the resource.
        :param RestoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 details: Optional[pulumi.Input[Union['RestoreDetailsArgs', 'RestoreDetailsArgsDict']]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RestoreMappingArgs', 'RestoreMappingArgsDict']]]]] = None,
                 power_on: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestoreArgs.__new__(RestoreArgs)

            if backup_id is None and not opts.urn:
                raise TypeError("Missing required property 'backup_id'")
            __props__.__dict__["backup_id"] = backup_id
            __props__.__dict__["details"] = details
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["mappings"] = mappings
            __props__.__dict__["power_on"] = power_on
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["server_id"] = server_id
            __props__.__dict__["volume_id"] = volume_id
        super(Restore, __self__).__init__(
            'huaweicloud:Cbr/restore:Restore',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_id: Optional[pulumi.Input[_builtins.str]] = None,
            details: Optional[pulumi.Input[Union['RestoreDetailsArgs', 'RestoreDetailsArgsDict']]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RestoreMappingArgs', 'RestoreMappingArgsDict']]]]] = None,
            power_on: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            server_id: Optional[pulumi.Input[_builtins.str]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Restore':
        """
        Get an existing Restore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the disk backup ID.
        :param pulumi.Input[Union['RestoreDetailsArgs', 'RestoreDetailsArgsDict']] details: Specifies the restoration details.
               
               The details structure is documented below.
               
               <a name="restore_details_struct"></a>
               The `details` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['RestoreMappingArgs', 'RestoreMappingArgsDict']]]] mappings: Specifies the restored mapping relationship. This parameter is mandatory for
               VM restoration and optional for disk restoration.
               You can obtain the disk information through data source `cbr_get_backup`.
               
               The mappings structure is documented below.
        :param pulumi.Input[_builtins.bool] power_on: Whether the server is powered on after restoration. Defaults to **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the ID of the resource to be restored.
        :param pulumi.Input[_builtins.str] server_id: Specifies the ID of the target VM to be restored. This parameter is
               mandatory for VM restoration.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the disk to which data is restored.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RestoreState.__new__(_RestoreState)

        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["details"] = details
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["mappings"] = mappings
        __props__.__dict__["power_on"] = power_on
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["server_id"] = server_id
        __props__.__dict__["volume_id"] = volume_id
        return Restore(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the disk backup ID.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> pulumi.Output[Optional['outputs.RestoreDetails']]:
        """
        Specifies the restoration details.

        The details structure is documented below.

        <a name="restore_details_struct"></a>
        The `details` block supports:
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def mappings(self) -> pulumi.Output[Optional[Sequence['outputs.RestoreMapping']]]:
        """
        Specifies the restored mapping relationship. This parameter is mandatory for
        VM restoration and optional for disk restoration.
        You can obtain the disk information through data source `cbr_get_backup`.

        The mappings structure is documented below.
        """
        return pulumi.get(self, "mappings")

    @_builtins.property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the server is powered on after restoration. Defaults to **false**.
        """
        return pulumi.get(self, "power_on")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the resource to be restored.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the target VM to be restored. This parameter is
        mandatory for VM restoration.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the disk to which data is restored.
        """
        return pulumi.get(self, "volume_id")

