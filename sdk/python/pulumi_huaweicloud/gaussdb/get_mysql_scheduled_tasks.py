# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlScheduledTasksResult',
    'AwaitableGetMysqlScheduledTasksResult',
    'get_mysql_scheduled_tasks',
    'get_mysql_scheduled_tasks_output',
]

@pulumi.output_type
class GetMysqlScheduledTasksResult:
    """
    A collection of values returned by getMysqlScheduledTasks.
    """
    def __init__(__self__, id=None, job_id=None, job_name=None, region=None, status=None, tasks=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if job_name and not isinstance(job_name, str):
            raise TypeError("Expected argument 'job_name' to be a str")
        pulumi.set(__self__, "job_name", job_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[_builtins.str]:
        """
        Indicates the task ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[_builtins.str]:
        """
        Indicates the task name.
        """
        return pulumi.get(self, "job_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetMysqlScheduledTasksTaskResult']:
        """
        Indicates the list of scheduled task details.
        """
        return pulumi.get(self, "tasks")


class AwaitableGetMysqlScheduledTasksResult(GetMysqlScheduledTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlScheduledTasksResult(
            id=self.id,
            job_id=self.job_id,
            job_name=self.job_name,
            region=self.region,
            status=self.status,
            tasks=self.tasks)


def get_mysql_scheduled_tasks(job_id: Optional[_builtins.str] = None,
                              job_name: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              status: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlScheduledTasksResult:
    """
    Use this data source to get the list of GaussDB MySQL scheduled tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDB.get_mysql_scheduled_tasks()
    ```


    :param _builtins.str job_id: Specifies the task ID.
    :param _builtins.str job_name: Specifies the task scheduling type.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the task execution status. Value options:
           + **Running**: The task is being executed.
           + **Completed**: The task is successfully executed.
           + **Failed**: The task failed to be executed.
           + **Pending**: The task is not executed.
           + **Canceled**: The task is canceled.
    """
    __args__ = dict()
    __args__['jobId'] = job_id
    __args__['jobName'] = job_name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDB/getMysqlScheduledTasks:getMysqlScheduledTasks', __args__, opts=opts, typ=GetMysqlScheduledTasksResult).value

    return AwaitableGetMysqlScheduledTasksResult(
        id=pulumi.get(__ret__, 'id'),
        job_id=pulumi.get(__ret__, 'job_id'),
        job_name=pulumi.get(__ret__, 'job_name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        tasks=pulumi.get(__ret__, 'tasks'))
def get_mysql_scheduled_tasks_output(job_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     job_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMysqlScheduledTasksResult]:
    """
    Use this data source to get the list of GaussDB MySQL scheduled tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDB.get_mysql_scheduled_tasks()
    ```


    :param _builtins.str job_id: Specifies the task ID.
    :param _builtins.str job_name: Specifies the task scheduling type.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the task execution status. Value options:
           + **Running**: The task is being executed.
           + **Completed**: The task is successfully executed.
           + **Failed**: The task failed to be executed.
           + **Pending**: The task is not executed.
           + **Canceled**: The task is canceled.
    """
    __args__ = dict()
    __args__['jobId'] = job_id
    __args__['jobName'] = job_name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDB/getMysqlScheduledTasks:getMysqlScheduledTasks', __args__, opts=opts, typ=GetMysqlScheduledTasksResult)
    return __ret__.apply(lambda __response__: GetMysqlScheduledTasksResult(
        id=pulumi.get(__response__, 'id'),
        job_id=pulumi.get(__response__, 'job_id'),
        job_name=pulumi.get(__response__, 'job_name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        tasks=pulumi.get(__response__, 'tasks')))
