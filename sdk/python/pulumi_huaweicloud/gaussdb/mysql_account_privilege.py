# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MysqlAccountPrivilegeArgs', 'MysqlAccountPrivilege']

@pulumi.input_type
class MysqlAccountPrivilegeArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[_builtins.str],
                 databases: pulumi.Input[Sequence[pulumi.Input['MysqlAccountPrivilegeDatabaseArgs']]],
                 host: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MysqlAccountPrivilege resource.
        :param pulumi.Input[_builtins.str] account_name: Specifies the database username.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlAccountPrivilegeDatabaseArgs']]] databases: Specifies the list of the databases. The list contains up to 50 databases.
               
               Changing this parameter will create a new resource.
               The Database structure is documented below.
               
               <a name="GaussDBAccountPrivilege_Database"></a>
               The `Database` block supports:
        :param pulumi.Input[_builtins.str] host: Specifies the host IP address which allow database users to connect to the
               database on the current host.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the database username.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account_name", value)

    @_builtins.property
    @pulumi.getter
    def databases(self) -> pulumi.Input[Sequence[pulumi.Input['MysqlAccountPrivilegeDatabaseArgs']]]:
        """
        Specifies the list of the databases. The list contains up to 50 databases.

        Changing this parameter will create a new resource.
        The Database structure is documented below.

        <a name="GaussDBAccountPrivilege_Database"></a>
        The `Database` block supports:
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: pulumi.Input[Sequence[pulumi.Input['MysqlAccountPrivilegeDatabaseArgs']]]):
        pulumi.set(self, "databases", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the host IP address which allow database users to connect to the
        database on the current host.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the GaussDB MySQL instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _MysqlAccountPrivilegeState:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlAccountPrivilegeDatabaseArgs']]]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MysqlAccountPrivilege resources.
        :param pulumi.Input[_builtins.str] account_name: Specifies the database username.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlAccountPrivilegeDatabaseArgs']]] databases: Specifies the list of the databases. The list contains up to 50 databases.
               
               Changing this parameter will create a new resource.
               The Database structure is documented below.
               
               <a name="GaussDBAccountPrivilege_Database"></a>
               The `Database` block supports:
        :param pulumi.Input[_builtins.str] host: Specifies the host IP address which allow database users to connect to the
               database on the current host.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database username.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_name", value)

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlAccountPrivilegeDatabaseArgs']]]]:
        """
        Specifies the list of the databases. The list contains up to 50 databases.

        Changing this parameter will create a new resource.
        The Database structure is documented below.

        <a name="GaussDBAccountPrivilege_Database"></a>
        The `Database` block supports:
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlAccountPrivilegeDatabaseArgs']]]]):
        pulumi.set(self, "databases", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host IP address which allow database users to connect to the
        database on the current host.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB MySQL instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:GaussDB/mysqlAccountPrivilege:MysqlAccountPrivilege")
class MysqlAccountPrivilege(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlAccountPrivilegeDatabaseArgs', 'MysqlAccountPrivilegeDatabaseArgsDict']]]]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB MySQL account privilege resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdb.MysqlAccountPrivilege("test",
            instance_id=instance_id,
            account_name="test_db_name1",
            host="10.10.10.10",
            databases=[{
                "name": "test_db_name",
                "readonly": True,
            }])
        ```

        ## Import

        The GaussDB MySQL account privilege can be imported using the `instance_id`, `name` and `host` separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDB/mysqlAccountPrivilege:MysqlAccountPrivilege test <instance_id>/<account_name>/<host>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_name: Specifies the database username.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlAccountPrivilegeDatabaseArgs', 'MysqlAccountPrivilegeDatabaseArgsDict']]]] databases: Specifies the list of the databases. The list contains up to 50 databases.
               
               Changing this parameter will create a new resource.
               The Database structure is documented below.
               
               <a name="GaussDBAccountPrivilege_Database"></a>
               The `Database` block supports:
        :param pulumi.Input[_builtins.str] host: Specifies the host IP address which allow database users to connect to the
               database on the current host.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MysqlAccountPrivilegeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB MySQL account privilege resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdb.MysqlAccountPrivilege("test",
            instance_id=instance_id,
            account_name="test_db_name1",
            host="10.10.10.10",
            databases=[{
                "name": "test_db_name",
                "readonly": True,
            }])
        ```

        ## Import

        The GaussDB MySQL account privilege can be imported using the `instance_id`, `name` and `host` separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDB/mysqlAccountPrivilege:MysqlAccountPrivilege test <instance_id>/<account_name>/<host>
        ```

        :param str resource_name: The name of the resource.
        :param MysqlAccountPrivilegeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MysqlAccountPrivilegeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[_builtins.str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlAccountPrivilegeDatabaseArgs', 'MysqlAccountPrivilegeDatabaseArgsDict']]]]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MysqlAccountPrivilegeArgs.__new__(MysqlAccountPrivilegeArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            if databases is None and not opts.urn:
                raise TypeError("Missing required property 'databases'")
            __props__.__dict__["databases"] = databases
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
        super(MysqlAccountPrivilege, __self__).__init__(
            'huaweicloud:GaussDB/mysqlAccountPrivilege:MysqlAccountPrivilege',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_name: Optional[pulumi.Input[_builtins.str]] = None,
            databases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlAccountPrivilegeDatabaseArgs', 'MysqlAccountPrivilegeDatabaseArgsDict']]]]] = None,
            host: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'MysqlAccountPrivilege':
        """
        Get an existing MysqlAccountPrivilege resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_name: Specifies the database username.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlAccountPrivilegeDatabaseArgs', 'MysqlAccountPrivilegeDatabaseArgsDict']]]] databases: Specifies the list of the databases. The list contains up to 50 databases.
               
               Changing this parameter will create a new resource.
               The Database structure is documented below.
               
               <a name="GaussDBAccountPrivilege_Database"></a>
               The `Database` block supports:
        :param pulumi.Input[_builtins.str] host: Specifies the host IP address which allow database users to connect to the
               database on the current host.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MysqlAccountPrivilegeState.__new__(_MysqlAccountPrivilegeState)

        __props__.__dict__["account_name"] = account_name
        __props__.__dict__["databases"] = databases
        __props__.__dict__["host"] = host
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        return MysqlAccountPrivilege(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the database username.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> pulumi.Output[Sequence['outputs.MysqlAccountPrivilegeDatabase']]:
        """
        Specifies the list of the databases. The list contains up to 50 databases.

        Changing this parameter will create a new resource.
        The Database structure is documented below.

        <a name="GaussDBAccountPrivilege_Database"></a>
        The `Database` block supports:
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the host IP address which allow database users to connect to the
        database on the current host.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the GaussDB MySQL instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

