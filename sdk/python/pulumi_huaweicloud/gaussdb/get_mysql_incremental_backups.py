# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlIncrementalBackupsResult',
    'AwaitableGetMysqlIncrementalBackupsResult',
    'get_mysql_incremental_backups',
    'get_mysql_incremental_backups_output',
]

@pulumi.output_type
class GetMysqlIncrementalBackupsResult:
    """
    A collection of values returned by getMysqlIncrementalBackups.
    """
    def __init__(__self__, backups=None, begin_time=None, end_time=None, id=None, instance_id=None, region=None):
        if backups and not isinstance(backups, list):
            raise TypeError("Expected argument 'backups' to be a list")
        pulumi.set(__self__, "backups", backups)
        if begin_time and not isinstance(begin_time, str):
            raise TypeError("Expected argument 'begin_time' to be a str")
        pulumi.set(__self__, "begin_time", begin_time)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetMysqlIncrementalBackupsBackupResult']:
        """
        Indicates the list of incremental backups.
        """
        return pulumi.get(self, "backups")

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[_builtins.str]:
        """
        Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        """
        Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetMysqlIncrementalBackupsResult(GetMysqlIncrementalBackupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlIncrementalBackupsResult(
            backups=self.backups,
            begin_time=self.begin_time,
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region)


def get_mysql_incremental_backups(begin_time: Optional[_builtins.str] = None,
                                  end_time: Optional[_builtins.str] = None,
                                  instance_id: Optional[_builtins.str] = None,
                                  region: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlIncrementalBackupsResult:
    """
    Use this data source to get the list of incremental backups

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.GaussDB.get_mysql_incremental_backups(instance_id=instance_id)
    ```


    :param _builtins.str begin_time: Specifies the query start time.
           The format is **yyyy-mm-ddThh:mm:ssZ**. It is mandatory when `end_time` is set.
    :param _builtins.str end_time: Specifies the query end time.
           The format is **yyyy-mm-ddThh:mm:ssZ** and the end time must be later than the start time.
           It is mandatory when `begin_time` is set.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['beginTime'] = begin_time
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDB/getMysqlIncrementalBackups:getMysqlIncrementalBackups', __args__, opts=opts, typ=GetMysqlIncrementalBackupsResult).value

    return AwaitableGetMysqlIncrementalBackupsResult(
        backups=pulumi.get(__ret__, 'backups'),
        begin_time=pulumi.get(__ret__, 'begin_time'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'))
def get_mysql_incremental_backups_output(begin_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMysqlIncrementalBackupsResult]:
    """
    Use this data source to get the list of incremental backups

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.GaussDB.get_mysql_incremental_backups(instance_id=instance_id)
    ```


    :param _builtins.str begin_time: Specifies the query start time.
           The format is **yyyy-mm-ddThh:mm:ssZ**. It is mandatory when `end_time` is set.
    :param _builtins.str end_time: Specifies the query end time.
           The format is **yyyy-mm-ddThh:mm:ssZ** and the end time must be later than the start time.
           It is mandatory when `begin_time` is set.
    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['beginTime'] = begin_time
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDB/getMysqlIncrementalBackups:getMysqlIncrementalBackups', __args__, opts=opts, typ=GetMysqlIncrementalBackupsResult)
    return __ret__.apply(lambda __response__: GetMysqlIncrementalBackupsResult(
        backups=pulumi.get(__response__, 'backups'),
        begin_time=pulumi.get(__response__, 'begin_time'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region')))
