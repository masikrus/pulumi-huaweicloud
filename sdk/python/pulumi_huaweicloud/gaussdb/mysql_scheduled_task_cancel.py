# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MysqlScheduledTaskCancelArgs', 'MysqlScheduledTaskCancel']

@pulumi.input_type
class MysqlScheduledTaskCancelArgs:
    def __init__(__self__, *,
                 job_id: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MysqlScheduledTaskCancel resource.
        :param pulumi.Input[_builtins.str] job_id: Specifies the task ID. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "job_id", job_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the task ID. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "job_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _MysqlScheduledTaskCancelState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 datastore_type: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_status: Optional[pulumi.Input[_builtins.str]] = None,
                 job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 job_name: Optional[pulumi.Input[_builtins.str]] = None,
                 job_status: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MysqlScheduledTaskCancel resources.
        :param pulumi.Input[_builtins.str] create_time: Indicates the task creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param pulumi.Input[_builtins.str] datastore_type: Indicates the database type.
        :param pulumi.Input[_builtins.str] end_time: Indicates the task end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param pulumi.Input[_builtins.str] instance_id: Indicates the instance ID.
        :param pulumi.Input[_builtins.str] instance_name: Indicates the instance name.
        :param pulumi.Input[_builtins.str] instance_status: Indicates the instance status.
        :param pulumi.Input[_builtins.str] job_id: Specifies the task ID. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] job_name: Indicates the task name.
        :param pulumi.Input[_builtins.str] job_status: Indicates the task execution status.
        :param pulumi.Input[_builtins.str] project_id: Indicates the project ID of a tenant in a region.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Indicates the task start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if datastore_type is not None:
            pulumi.set(__self__, "datastore_type", datastore_type)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_status is not None:
            pulumi.set(__self__, "instance_status", instance_status)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if job_name is not None:
            pulumi.set(__self__, "job_name", job_name)
        if job_status is not None:
            pulumi.set(__self__, "job_status", job_status)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the task creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="datastoreType")
    def datastore_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the database type.
        """
        return pulumi.get(self, "datastore_type")

    @datastore_type.setter
    def datastore_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datastore_type", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the task end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_name", value)

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the instance status.
        """
        return pulumi.get(self, "instance_status")

    @instance_status.setter
    def instance_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_status", value)

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the task ID. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_id", value)

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the task name.
        """
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_name", value)

    @_builtins.property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the task execution status.
        """
        return pulumi.get(self, "job_status")

    @job_status.setter
    def job_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_status", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the project ID of a tenant in a region.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the task start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)


@pulumi.type_token("huaweicloud:GaussDB/mysqlScheduledTaskCancel:MysqlScheduledTaskCancel")
class MysqlScheduledTaskCancel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB MySQL scheduled task cancel resource within HuaweiCloud.

        > This resource is only a one-time action resource for operating the API.
        Deleting this resource will not clear the corresponding request record,
        but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        job_id = config.require_object("jobId")
        test = huaweicloud.gaussdb.MysqlScheduledTaskCancel("test", job_id=job_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] job_id: Specifies the task ID. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MysqlScheduledTaskCancelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB MySQL scheduled task cancel resource within HuaweiCloud.

        > This resource is only a one-time action resource for operating the API.
        Deleting this resource will not clear the corresponding request record,
        but will only remove the resource information from the tfstate file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        job_id = config.require_object("jobId")
        test = huaweicloud.gaussdb.MysqlScheduledTaskCancel("test", job_id=job_id)
        ```

        :param str resource_name: The name of the resource.
        :param MysqlScheduledTaskCancelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MysqlScheduledTaskCancelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MysqlScheduledTaskCancelArgs.__new__(MysqlScheduledTaskCancelArgs)

            if job_id is None and not opts.urn:
                raise TypeError("Missing required property 'job_id'")
            __props__.__dict__["job_id"] = job_id
            __props__.__dict__["region"] = region
            __props__.__dict__["create_time"] = None
            __props__.__dict__["datastore_type"] = None
            __props__.__dict__["end_time"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["instance_name"] = None
            __props__.__dict__["instance_status"] = None
            __props__.__dict__["job_name"] = None
            __props__.__dict__["job_status"] = None
            __props__.__dict__["project_id"] = None
            __props__.__dict__["start_time"] = None
        super(MysqlScheduledTaskCancel, __self__).__init__(
            'huaweicloud:GaussDB/mysqlScheduledTaskCancel:MysqlScheduledTaskCancel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            datastore_type: Optional[pulumi.Input[_builtins.str]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_name: Optional[pulumi.Input[_builtins.str]] = None,
            instance_status: Optional[pulumi.Input[_builtins.str]] = None,
            job_id: Optional[pulumi.Input[_builtins.str]] = None,
            job_name: Optional[pulumi.Input[_builtins.str]] = None,
            job_status: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'MysqlScheduledTaskCancel':
        """
        Get an existing MysqlScheduledTaskCancel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] create_time: Indicates the task creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param pulumi.Input[_builtins.str] datastore_type: Indicates the database type.
        :param pulumi.Input[_builtins.str] end_time: Indicates the task end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param pulumi.Input[_builtins.str] instance_id: Indicates the instance ID.
        :param pulumi.Input[_builtins.str] instance_name: Indicates the instance name.
        :param pulumi.Input[_builtins.str] instance_status: Indicates the instance status.
        :param pulumi.Input[_builtins.str] job_id: Specifies the task ID. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] job_name: Indicates the task name.
        :param pulumi.Input[_builtins.str] job_status: Indicates the task execution status.
        :param pulumi.Input[_builtins.str] project_id: Indicates the project ID of a tenant in a region.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] start_time: Indicates the task start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MysqlScheduledTaskCancelState.__new__(_MysqlScheduledTaskCancelState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["datastore_type"] = datastore_type
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_status"] = instance_status
        __props__.__dict__["job_id"] = job_id
        __props__.__dict__["job_name"] = job_name
        __props__.__dict__["job_status"] = job_status
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["start_time"] = start_time
        return MysqlScheduledTaskCancel(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the task creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="datastoreType")
    def datastore_type(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the database type.
        """
        return pulumi.get(self, "datastore_type")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the task end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the instance status.
        """
        return pulumi.get(self, "instance_status")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the task ID. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the task name.
        """
        return pulumi.get(self, "job_name")

    @_builtins.property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the task execution status.
        """
        return pulumi.get(self, "job_status")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the project ID of a tenant in a region.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the task start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "start_time")

