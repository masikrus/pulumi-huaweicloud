# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInfluxInstancesResult',
    'AwaitableGetInfluxInstancesResult',
    'get_influx_instances',
    'get_influx_instances_output',
]

@pulumi.output_type
class GetInfluxInstancesResult:
    """
    A collection of values returned by getInfluxInstances.
    """
    def __init__(__self__, id=None, instance_id=None, instances=None, mode=None, name=None, region=None, subnet_id=None, vpc_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetInfluxInstancesInstanceResult']:
        """
        Indicates the list of GaussDB influx instances.
        The instances structure is documented below.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.str]:
        """
        Indicates the instance type.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Indicates the region where the instance is deployed.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of the subnet where the instance node is deployed.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        Indicates the VPC ID.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetInfluxInstancesResult(GetInfluxInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInfluxInstancesResult(
            id=self.id,
            instance_id=self.instance_id,
            instances=self.instances,
            mode=self.mode,
            name=self.name,
            region=self.region,
            subnet_id=self.subnet_id,
            vpc_id=self.vpc_id)


def get_influx_instances(instance_id: Optional[_builtins.str] = None,
                         mode: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         subnet_id: Optional[_builtins.str] = None,
                         vpc_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInfluxInstancesResult:
    """
    Use this data source to get the list of GaussDB influx instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    this = huaweicloud.GaussDB.get_influx_instances()
    ```


    :param _builtins.str instance_id: Specifies the ID of the instance. If you enter an instance ID starting with
           an asterisk (*), fuzzy search results are returned. If you enter a valid instance ID, an exact result is returned.
    :param _builtins.str mode: Specifies the instance type. Value options:
           + **Cluster**: indicating that the instance is a GeminiDB Influx instance.
           + **InfluxdbSingle**: indicating that the instance is a single-node GeminiDB Influx instance.
    :param _builtins.str name: Specifies the name of the instance. If you enter an instance name starting with an
           asterisk (*), fuzzy search results are returned. If you enter a valid instance name, an exact result is returned.
    :param _builtins.str region: The region in which to obtain the instances. If omitted, the provider-level region will
           be used.
    :param _builtins.str subnet_id: Specifies the network ID of a subnet.
    :param _builtins.str vpc_id: Specifies the VPC ID.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['mode'] = mode
    __args__['name'] = name
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDB/getInfluxInstances:getInfluxInstances', __args__, opts=opts, typ=GetInfluxInstancesResult).value

    return AwaitableGetInfluxInstancesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instances=pulumi.get(__ret__, 'instances'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_influx_instances_output(instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                mode: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                subnet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                vpc_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInfluxInstancesResult]:
    """
    Use this data source to get the list of GaussDB influx instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    this = huaweicloud.GaussDB.get_influx_instances()
    ```


    :param _builtins.str instance_id: Specifies the ID of the instance. If you enter an instance ID starting with
           an asterisk (*), fuzzy search results are returned. If you enter a valid instance ID, an exact result is returned.
    :param _builtins.str mode: Specifies the instance type. Value options:
           + **Cluster**: indicating that the instance is a GeminiDB Influx instance.
           + **InfluxdbSingle**: indicating that the instance is a single-node GeminiDB Influx instance.
    :param _builtins.str name: Specifies the name of the instance. If you enter an instance name starting with an
           asterisk (*), fuzzy search results are returned. If you enter a valid instance name, an exact result is returned.
    :param _builtins.str region: The region in which to obtain the instances. If omitted, the provider-level region will
           be used.
    :param _builtins.str subnet_id: Specifies the network ID of a subnet.
    :param _builtins.str vpc_id: Specifies the VPC ID.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['mode'] = mode
    __args__['name'] = name
    __args__['region'] = region
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDB/getInfluxInstances:getInfluxInstances', __args__, opts=opts, typ=GetInfluxInstancesResult)
    return __ret__.apply(lambda __response__: GetInfluxInstancesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instances=pulumi.get(__response__, 'instances'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
