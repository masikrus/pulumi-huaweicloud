# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlErrorLogsResult',
    'AwaitableGetMysqlErrorLogsResult',
    'get_mysql_error_logs',
    'get_mysql_error_logs_output',
]

@pulumi.output_type
class GetMysqlErrorLogsResult:
    """
    A collection of values returned by getMysqlErrorLogs.
    """
    def __init__(__self__, end_time=None, error_log_lists=None, id=None, instance_id=None, level=None, node_id=None, region=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if error_log_lists and not isinstance(error_log_lists, list):
            raise TypeError("Expected argument 'error_log_lists' to be a list")
        pulumi.set(__self__, "error_log_lists", error_log_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if level and not isinstance(level, str):
            raise TypeError("Expected argument 'level' to be a str")
        pulumi.set(__self__, "level", level)
        if node_id and not isinstance(node_id, str):
            raise TypeError("Expected argument 'node_id' to be a str")
        pulumi.set(__self__, "node_id", node_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="errorLogLists")
    def error_log_lists(self) -> Sequence['outputs.GetMysqlErrorLogsErrorLogListResult']:
        """
        Indicates the list of the error logs.
        """
        return pulumi.get(self, "error_log_lists")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[_builtins.str]:
        """
        Indicates the error log level.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Indicates the ID of the GaussDB MySQL instance node
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        return pulumi.get(self, "start_time")


class AwaitableGetMysqlErrorLogsResult(GetMysqlErrorLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlErrorLogsResult(
            end_time=self.end_time,
            error_log_lists=self.error_log_lists,
            id=self.id,
            instance_id=self.instance_id,
            level=self.level,
            node_id=self.node_id,
            region=self.region,
            start_time=self.start_time)


def get_mysql_error_logs(end_time: Optional[_builtins.str] = None,
                         instance_id: Optional[_builtins.str] = None,
                         level: Optional[_builtins.str] = None,
                         node_id: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         start_time: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlErrorLogsResult:
    """
    Use this data source to get the list of GaussDB MySQL error logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    node_id = config.require_object("nodeId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.GaussDB.get_mysql_error_logs(instance_id=instance_id,
        node_id=node_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str instance_id: Specifies the ID of the GaussDB MySQL instance.
    :param _builtins.str level: Specifies the log level. Value options: **ALL**, **INFO**, **LOG**, **WARNING**,
           **ERROR**, **FATAL**, **PANIC**, **NOTE**. Defaults to **ALL**.
    :param _builtins.str node_id: Specifies the ID of the GaussDB MySQL instance node
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['level'] = level
    __args__['nodeId'] = node_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDB/getMysqlErrorLogs:getMysqlErrorLogs', __args__, opts=opts, typ=GetMysqlErrorLogsResult).value

    return AwaitableGetMysqlErrorLogsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        error_log_lists=pulumi.get(__ret__, 'error_log_lists'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        level=pulumi.get(__ret__, 'level'),
        node_id=pulumi.get(__ret__, 'node_id'),
        region=pulumi.get(__ret__, 'region'),
        start_time=pulumi.get(__ret__, 'start_time'))
def get_mysql_error_logs_output(end_time: Optional[pulumi.Input[_builtins.str]] = None,
                                instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                node_id: Optional[pulumi.Input[_builtins.str]] = None,
                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                start_time: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMysqlErrorLogsResult]:
    """
    Use this data source to get the list of GaussDB MySQL error logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    node_id = config.require_object("nodeId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.GaussDB.get_mysql_error_logs(instance_id=instance_id,
        node_id=node_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str instance_id: Specifies the ID of the GaussDB MySQL instance.
    :param _builtins.str level: Specifies the log level. Value options: **ALL**, **INFO**, **LOG**, **WARNING**,
           **ERROR**, **FATAL**, **PANIC**, **NOTE**. Defaults to **ALL**.
    :param _builtins.str node_id: Specifies the ID of the GaussDB MySQL instance node
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['level'] = level
    __args__['nodeId'] = node_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDB/getMysqlErrorLogs:getMysqlErrorLogs', __args__, opts=opts, typ=GetMysqlErrorLogsResult)
    return __ret__.apply(lambda __response__: GetMysqlErrorLogsResult(
        end_time=pulumi.get(__response__, 'end_time'),
        error_log_lists=pulumi.get(__response__, 'error_log_lists'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        level=pulumi.get(__response__, 'level'),
        node_id=pulumi.get(__response__, 'node_id'),
        region=pulumi.get(__response__, 'region'),
        start_time=pulumi.get(__response__, 'start_time')))
