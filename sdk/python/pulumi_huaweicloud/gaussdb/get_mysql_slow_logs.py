# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlSlowLogsResult',
    'AwaitableGetMysqlSlowLogsResult',
    'get_mysql_slow_logs',
    'get_mysql_slow_logs_output',
]

@pulumi.output_type
class GetMysqlSlowLogsResult:
    """
    A collection of values returned by getMysqlSlowLogs.
    """
    def __init__(__self__, database=None, end_time=None, id=None, instance_id=None, node_id=None, operate_type=None, region=None, slow_log_lists=None, start_time=None):
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if node_id and not isinstance(node_id, str):
            raise TypeError("Expected argument 'node_id' to be a str")
        pulumi.set(__self__, "node_id", node_id)
        if operate_type and not isinstance(operate_type, str):
            raise TypeError("Expected argument 'operate_type' to be a str")
        pulumi.set(__self__, "operate_type", operate_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if slow_log_lists and not isinstance(slow_log_lists, list):
            raise TypeError("Expected argument 'slow_log_lists' to be a list")
        pulumi.set(__self__, "slow_log_lists", slow_log_lists)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter
    def database(self) -> Optional[_builtins.str]:
        """
        Indicates the database that slow query logs belong to.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="slowLogLists")
    def slow_log_lists(self) -> Sequence['outputs.GetMysqlSlowLogsSlowLogListResult']:
        """
        Indicates the list of the slow logs.
        """
        return pulumi.get(self, "slow_log_lists")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "start_time")


class AwaitableGetMysqlSlowLogsResult(GetMysqlSlowLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlSlowLogsResult(
            database=self.database,
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            node_id=self.node_id,
            operate_type=self.operate_type,
            region=self.region,
            slow_log_lists=self.slow_log_lists,
            start_time=self.start_time)


def get_mysql_slow_logs(database: Optional[_builtins.str] = None,
                        end_time: Optional[_builtins.str] = None,
                        instance_id: Optional[_builtins.str] = None,
                        node_id: Optional[_builtins.str] = None,
                        operate_type: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        start_time: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlSlowLogsResult:
    """
    Use this data source to get the list of GaussDB MySQL slow logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    node_id = config.require_object("nodeId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.GaussDB.get_mysql_slow_logs(instance_id=instance_id,
        node_id=node_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str database: Specifies the name of the database.
    :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str instance_id: Specifies the ID of the GaussDB MySQL instance.
    :param _builtins.str node_id: Specifies the ID of the instance node.
    :param _builtins.str operate_type: Specifies the SQL statement type. Value options: **INSERT**, **UPDATE**, **SELECT**,
           **DELETE**, **CREATE**, **ALTER**, **DROP**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['nodeId'] = node_id
    __args__['operateType'] = operate_type
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDB/getMysqlSlowLogs:getMysqlSlowLogs', __args__, opts=opts, typ=GetMysqlSlowLogsResult).value

    return AwaitableGetMysqlSlowLogsResult(
        database=pulumi.get(__ret__, 'database'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        node_id=pulumi.get(__ret__, 'node_id'),
        operate_type=pulumi.get(__ret__, 'operate_type'),
        region=pulumi.get(__ret__, 'region'),
        slow_log_lists=pulumi.get(__ret__, 'slow_log_lists'),
        start_time=pulumi.get(__ret__, 'start_time'))
def get_mysql_slow_logs_output(database: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               end_time: Optional[pulumi.Input[_builtins.str]] = None,
                               instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                               node_id: Optional[pulumi.Input[_builtins.str]] = None,
                               operate_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               start_time: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMysqlSlowLogsResult]:
    """
    Use this data source to get the list of GaussDB MySQL slow logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    node_id = config.require_object("nodeId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.GaussDB.get_mysql_slow_logs(instance_id=instance_id,
        node_id=node_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str database: Specifies the name of the database.
    :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str instance_id: Specifies the ID of the GaussDB MySQL instance.
    :param _builtins.str node_id: Specifies the ID of the instance node.
    :param _builtins.str operate_type: Specifies the SQL statement type. Value options: **INSERT**, **UPDATE**, **SELECT**,
           **DELETE**, **CREATE**, **ALTER**, **DROP**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['nodeId'] = node_id
    __args__['operateType'] = operate_type
    __args__['region'] = region
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDB/getMysqlSlowLogs:getMysqlSlowLogs', __args__, opts=opts, typ=GetMysqlSlowLogsResult)
    return __ret__.apply(lambda __response__: GetMysqlSlowLogsResult(
        database=pulumi.get(__response__, 'database'),
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        node_id=pulumi.get(__response__, 'node_id'),
        operate_type=pulumi.get(__response__, 'operate_type'),
        region=pulumi.get(__response__, 'region'),
        slow_log_lists=pulumi.get(__response__, 'slow_log_lists'),
        start_time=pulumi.get(__response__, 'start_time')))
