# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MysqlParameterTemplateArgs', 'MysqlParameterTemplate']

@pulumi.input_type
class MysqlParameterTemplateArgs:
    def __init__(__self__, *,
                 datastore_engine: Optional[pulumi.Input[_builtins.str]] = None,
                 datastore_version: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_configuration_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MysqlParameterTemplate resource.
        :param pulumi.Input[_builtins.str] datastore_engine: Specifies the DB engine. Currently, only **gaussdb-mysql** is supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] datastore_version: Specifies the DB version.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `datastore_engine` is specified.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter template description. The description can consist of
               up to 256 characters, and cannot contain the carriage return characters or special characters (!<"='>&).
        :param pulumi.Input[_builtins.str] instance_configuration_id: Specifies the parameter template ID of the GaussDB MySQL
               instance.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `instance_id` is specified.
               
               > **NOTE:** 1. At most one of `datastore_engine`, `source_configuration_id` and `instance_id` can be specified.
               <br>2. If `source_configuration_id` is specified, then the resource will replicate the parameter template specified
               by `source_configuration_id`.
               <br>3. If `instance_id` is specified, then the resource will replicate the parameter template of the GaussDB MySQL
               instance specified by `instance_id`.
               <br>4. If `source_configuration_id` and `instance_id` are both not specified, then a new parameter template will be
               created directly.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter template name. The template name can contain 1 to 64 characters.
               Only letters (case-sensitive), digits, hyphens (-), underscores (_), and periods (.) are allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameter_values: Specifies the mapping between parameter names and parameter values.
               You can specify parameter values based on a default parameter template.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_configuration_id: Specifies the source parameter template ID.
               
               Changing this parameter will create a new resource.
        """
        if datastore_engine is not None:
            pulumi.set(__self__, "datastore_engine", datastore_engine)
        if datastore_version is not None:
            pulumi.set(__self__, "datastore_version", datastore_version)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_values is not None:
            pulumi.set(__self__, "parameter_values", parameter_values)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_configuration_id is not None:
            pulumi.set(__self__, "source_configuration_id", source_configuration_id)

    @_builtins.property
    @pulumi.getter(name="datastoreEngine")
    def datastore_engine(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DB engine. Currently, only **gaussdb-mysql** is supported.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "datastore_engine")

    @datastore_engine.setter
    def datastore_engine(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datastore_engine", value)

    @_builtins.property
    @pulumi.getter(name="datastoreVersion")
    def datastore_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DB version.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `datastore_engine` is specified.
        """
        return pulumi.get(self, "datastore_version")

    @datastore_version.setter
    def datastore_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datastore_version", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter template description. The description can consist of
        up to 256 characters, and cannot contain the carriage return characters or special characters (!<"='>&).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter template ID of the GaussDB MySQL
        instance.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `instance_id` is specified.

        > **NOTE:** 1. At most one of `datastore_engine`, `source_configuration_id` and `instance_id` can be specified.
        <br>2. If `source_configuration_id` is specified, then the resource will replicate the parameter template specified
        by `source_configuration_id`.
        <br>3. If `instance_id` is specified, then the resource will replicate the parameter template of the GaussDB MySQL
        instance specified by `instance_id`.
        <br>4. If `source_configuration_id` and `instance_id` are both not specified, then a new parameter template will be
        created directly.
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB MySQL instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter template name. The template name can contain 1 to 64 characters.
        Only letters (case-sensitive), digits, hyphens (-), underscores (_), and periods (.) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the mapping between parameter names and parameter values.
        You can specify parameter values based on a default parameter template.
        """
        return pulumi.get(self, "parameter_values")

    @parameter_values.setter
    def parameter_values(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameter_values", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceConfigurationId")
    def source_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source parameter template ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_configuration_id")

    @source_configuration_id.setter
    def source_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_configuration_id", value)


@pulumi.input_type
class _MysqlParameterTemplateState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 datastore_engine: Optional[pulumi.Input[_builtins.str]] = None,
                 datastore_version: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MysqlParameterTemplate resources.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time in the **yyyy-MM-ddTHH:mm:ssZ** format.
               T is the separator between calendar and hourly notation of time. Z indicates the time zone offset.
        :param pulumi.Input[_builtins.str] datastore_engine: Specifies the DB engine. Currently, only **gaussdb-mysql** is supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] datastore_version: Specifies the DB version.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `datastore_engine` is specified.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter template description. The description can consist of
               up to 256 characters, and cannot contain the carriage return characters or special characters (!<"='>&).
        :param pulumi.Input[_builtins.str] instance_configuration_id: Specifies the parameter template ID of the GaussDB MySQL
               instance.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `instance_id` is specified.
               
               > **NOTE:** 1. At most one of `datastore_engine`, `source_configuration_id` and `instance_id` can be specified.
               <br>2. If `source_configuration_id` is specified, then the resource will replicate the parameter template specified
               by `source_configuration_id`.
               <br>3. If `instance_id` is specified, then the resource will replicate the parameter template of the GaussDB MySQL
               instance specified by `instance_id`.
               <br>4. If `source_configuration_id` and `instance_id` are both not specified, then a new parameter template will be
               created directly.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter template name. The template name can contain 1 to 64 characters.
               Only letters (case-sensitive), digits, hyphens (-), underscores (_), and periods (.) are allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameter_values: Specifies the mapping between parameter names and parameter values.
               You can specify parameter values based on a default parameter template.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_configuration_id: Specifies the source parameter template ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the update time in the **yyyy-MM-ddTHH:mm:ssZ** format.
               T is the separator between calendar and hourly notation of time. Z indicates the time zone offset.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if datastore_engine is not None:
            pulumi.set(__self__, "datastore_engine", datastore_engine)
        if datastore_version is not None:
            pulumi.set(__self__, "datastore_version", datastore_version)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_values is not None:
            pulumi.set(__self__, "parameter_values", parameter_values)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_configuration_id is not None:
            pulumi.set(__self__, "source_configuration_id", source_configuration_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time in the **yyyy-MM-ddTHH:mm:ssZ** format.
        T is the separator between calendar and hourly notation of time. Z indicates the time zone offset.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="datastoreEngine")
    def datastore_engine(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DB engine. Currently, only **gaussdb-mysql** is supported.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "datastore_engine")

    @datastore_engine.setter
    def datastore_engine(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datastore_engine", value)

    @_builtins.property
    @pulumi.getter(name="datastoreVersion")
    def datastore_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the DB version.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `datastore_engine` is specified.
        """
        return pulumi.get(self, "datastore_version")

    @datastore_version.setter
    def datastore_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datastore_version", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter template description. The description can consist of
        up to 256 characters, and cannot contain the carriage return characters or special characters (!<"='>&).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter template ID of the GaussDB MySQL
        instance.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `instance_id` is specified.

        > **NOTE:** 1. At most one of `datastore_engine`, `source_configuration_id` and `instance_id` can be specified.
        <br>2. If `source_configuration_id` is specified, then the resource will replicate the parameter template specified
        by `source_configuration_id`.
        <br>3. If `instance_id` is specified, then the resource will replicate the parameter template of the GaussDB MySQL
        instance specified by `instance_id`.
        <br>4. If `source_configuration_id` and `instance_id` are both not specified, then a new parameter template will be
        created directly.
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB MySQL instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parameter template name. The template name can contain 1 to 64 characters.
        Only letters (case-sensitive), digits, hyphens (-), underscores (_), and periods (.) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the mapping between parameter names and parameter values.
        You can specify parameter values based on a default parameter template.
        """
        return pulumi.get(self, "parameter_values")

    @parameter_values.setter
    def parameter_values(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameter_values", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sourceConfigurationId")
    def source_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the source parameter template ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_configuration_id")

    @source_configuration_id.setter
    def source_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the update time in the **yyyy-MM-ddTHH:mm:ssZ** format.
        T is the separator between calendar and hourly notation of time. Z indicates the time zone offset.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:GaussDB/mysqlParameterTemplate:MysqlParameterTemplate")
class MysqlParameterTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datastore_engine: Optional[pulumi.Input[_builtins.str]] = None,
                 datastore_version: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB MySQL parameter template resource within HuaweiCloud.

        ## Example Usage

        ### create parameter template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.gaussdb.MysqlParameterTemplate("test", name="test_mysql_parameter_template")
        ```

        ### replica parameter template from existed configuration

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_configuration_id = config.require_object("sourceConfigurationId")
        test = huaweicloud.gaussdb.MysqlParameterTemplate("test",
            name="test_copy_from_configuration",
            source_configuration_id=source_configuration_id)
        ```

        ### replica parameter template from existed instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        instance_configuration_id = config.require_object("instanceConfigurationId")
        test = huaweicloud.gaussdb.MysqlParameterTemplate("test",
            name="test_copy_from_instance",
            instance_id=instance_id,
            instance_configuration_id=instance_configuration_id)
        ```

        ## Import

        The GaussDB Mysql parameter template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDB/mysqlParameterTemplate:MysqlParameterTemplate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `source_configuration_id`, `instance_id`

        and `instance_configuration_id`. It is generally recommended running `pulumi preview` after importing an GaussDB MySQL

        parameter template. You can then decide if changes should be applied to the GaussDB MySQL parameter template, or the

        GaussDB MySQL parameter template definition should be updated to align with the instance. Also, you can ignore changes

        as below.

        hcl

        resource "huaweicloud_gaussdb_mysql_parameter_template" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              source_configuration_id, instance_id, instance_configuration_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] datastore_engine: Specifies the DB engine. Currently, only **gaussdb-mysql** is supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] datastore_version: Specifies the DB version.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `datastore_engine` is specified.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter template description. The description can consist of
               up to 256 characters, and cannot contain the carriage return characters or special characters (!<"='>&).
        :param pulumi.Input[_builtins.str] instance_configuration_id: Specifies the parameter template ID of the GaussDB MySQL
               instance.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `instance_id` is specified.
               
               > **NOTE:** 1. At most one of `datastore_engine`, `source_configuration_id` and `instance_id` can be specified.
               <br>2. If `source_configuration_id` is specified, then the resource will replicate the parameter template specified
               by `source_configuration_id`.
               <br>3. If `instance_id` is specified, then the resource will replicate the parameter template of the GaussDB MySQL
               instance specified by `instance_id`.
               <br>4. If `source_configuration_id` and `instance_id` are both not specified, then a new parameter template will be
               created directly.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter template name. The template name can contain 1 to 64 characters.
               Only letters (case-sensitive), digits, hyphens (-), underscores (_), and periods (.) are allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameter_values: Specifies the mapping between parameter names and parameter values.
               You can specify parameter values based on a default parameter template.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_configuration_id: Specifies the source parameter template ID.
               
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[MysqlParameterTemplateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB MySQL parameter template resource within HuaweiCloud.

        ## Example Usage

        ### create parameter template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.gaussdb.MysqlParameterTemplate("test", name="test_mysql_parameter_template")
        ```

        ### replica parameter template from existed configuration

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_configuration_id = config.require_object("sourceConfigurationId")
        test = huaweicloud.gaussdb.MysqlParameterTemplate("test",
            name="test_copy_from_configuration",
            source_configuration_id=source_configuration_id)
        ```

        ### replica parameter template from existed instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        instance_configuration_id = config.require_object("instanceConfigurationId")
        test = huaweicloud.gaussdb.MysqlParameterTemplate("test",
            name="test_copy_from_instance",
            instance_id=instance_id,
            instance_configuration_id=instance_configuration_id)
        ```

        ## Import

        The GaussDB Mysql parameter template can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDB/mysqlParameterTemplate:MysqlParameterTemplate test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `source_configuration_id`, `instance_id`

        and `instance_configuration_id`. It is generally recommended running `pulumi preview` after importing an GaussDB MySQL

        parameter template. You can then decide if changes should be applied to the GaussDB MySQL parameter template, or the

        GaussDB MySQL parameter template definition should be updated to align with the instance. Also, you can ignore changes

        as below.

        hcl

        resource "huaweicloud_gaussdb_mysql_parameter_template" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              source_configuration_id, instance_id, instance_configuration_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param MysqlParameterTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MysqlParameterTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datastore_engine: Optional[pulumi.Input[_builtins.str]] = None,
                 datastore_version: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 source_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MysqlParameterTemplateArgs.__new__(MysqlParameterTemplateArgs)

            __props__.__dict__["datastore_engine"] = datastore_engine
            __props__.__dict__["datastore_version"] = datastore_version
            __props__.__dict__["description"] = description
            __props__.__dict__["instance_configuration_id"] = instance_configuration_id
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["parameter_values"] = parameter_values
            __props__.__dict__["region"] = region
            __props__.__dict__["source_configuration_id"] = source_configuration_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(MysqlParameterTemplate, __self__).__init__(
            'huaweicloud:GaussDB/mysqlParameterTemplate:MysqlParameterTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            datastore_engine: Optional[pulumi.Input[_builtins.str]] = None,
            datastore_version: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            instance_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parameter_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            source_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'MysqlParameterTemplate':
        """
        Get an existing MysqlParameterTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time in the **yyyy-MM-ddTHH:mm:ssZ** format.
               T is the separator between calendar and hourly notation of time. Z indicates the time zone offset.
        :param pulumi.Input[_builtins.str] datastore_engine: Specifies the DB engine. Currently, only **gaussdb-mysql** is supported.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] datastore_version: Specifies the DB version.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `datastore_engine` is specified.
        :param pulumi.Input[_builtins.str] description: Specifies the parameter template description. The description can consist of
               up to 256 characters, and cannot contain the carriage return characters or special characters (!<"='>&).
        :param pulumi.Input[_builtins.str] instance_configuration_id: Specifies the parameter template ID of the GaussDB MySQL
               instance.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** It is mandatory when `instance_id` is specified.
               
               > **NOTE:** 1. At most one of `datastore_engine`, `source_configuration_id` and `instance_id` can be specified.
               <br>2. If `source_configuration_id` is specified, then the resource will replicate the parameter template specified
               by `source_configuration_id`.
               <br>3. If `instance_id` is specified, then the resource will replicate the parameter template of the GaussDB MySQL
               instance specified by `instance_id`.
               <br>4. If `source_configuration_id` and `instance_id` are both not specified, then a new parameter template will be
               created directly.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the parameter template name. The template name can contain 1 to 64 characters.
               Only letters (case-sensitive), digits, hyphens (-), underscores (_), and periods (.) are allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameter_values: Specifies the mapping between parameter names and parameter values.
               You can specify parameter values based on a default parameter template.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] source_configuration_id: Specifies the source parameter template ID.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the update time in the **yyyy-MM-ddTHH:mm:ssZ** format.
               T is the separator between calendar and hourly notation of time. Z indicates the time zone offset.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MysqlParameterTemplateState.__new__(_MysqlParameterTemplateState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["datastore_engine"] = datastore_engine
        __props__.__dict__["datastore_version"] = datastore_version
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_configuration_id"] = instance_configuration_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["parameter_values"] = parameter_values
        __props__.__dict__["region"] = region
        __props__.__dict__["source_configuration_id"] = source_configuration_id
        __props__.__dict__["updated_at"] = updated_at
        return MysqlParameterTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creation time in the **yyyy-MM-ddTHH:mm:ssZ** format.
        T is the separator between calendar and hourly notation of time. Z indicates the time zone offset.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="datastoreEngine")
    def datastore_engine(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DB engine. Currently, only **gaussdb-mysql** is supported.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "datastore_engine")

    @_builtins.property
    @pulumi.getter(name="datastoreVersion")
    def datastore_version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the DB version.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `datastore_engine` is specified.
        """
        return pulumi.get(self, "datastore_version")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the parameter template description. The description can consist of
        up to 256 characters, and cannot contain the carriage return characters or special characters (!<"='>&).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the parameter template ID of the GaussDB MySQL
        instance.

        Changing this parameter will create a new resource.

        > **NOTE:** It is mandatory when `instance_id` is specified.

        > **NOTE:** 1. At most one of `datastore_engine`, `source_configuration_id` and `instance_id` can be specified.
        <br>2. If `source_configuration_id` is specified, then the resource will replicate the parameter template specified
        by `source_configuration_id`.
        <br>3. If `instance_id` is specified, then the resource will replicate the parameter template of the GaussDB MySQL
        instance specified by `instance_id`.
        <br>4. If `source_configuration_id` and `instance_id` are both not specified, then a new parameter template will be
        created directly.
        """
        return pulumi.get(self, "instance_configuration_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the GaussDB MySQL instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the parameter template name. The template name can contain 1 to 64 characters.
        Only letters (case-sensitive), digits, hyphens (-), underscores (_), and periods (.) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the mapping between parameter names and parameter values.
        You can specify parameter values based on a default parameter template.
        """
        return pulumi.get(self, "parameter_values")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sourceConfigurationId")
    def source_configuration_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the source parameter template ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_configuration_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the update time in the **yyyy-MM-ddTHH:mm:ssZ** format.
        T is the separator between calendar and hourly notation of time. Z indicates the time zone offset.
        """
        return pulumi.get(self, "updated_at")

