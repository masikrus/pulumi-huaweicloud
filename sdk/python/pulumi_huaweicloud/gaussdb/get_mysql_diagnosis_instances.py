# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlDiagnosisInstancesResult',
    'AwaitableGetMysqlDiagnosisInstancesResult',
    'get_mysql_diagnosis_instances',
    'get_mysql_diagnosis_instances_output',
]

@pulumi.output_type
class GetMysqlDiagnosisInstancesResult:
    """
    A collection of values returned by getMysqlDiagnosisInstances.
    """
    def __init__(__self__, id=None, instance_infos=None, metric_name=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_infos and not isinstance(instance_infos, list):
            raise TypeError("Expected argument 'instance_infos' to be a list")
        pulumi.set(__self__, "instance_infos", instance_infos)
        if metric_name and not isinstance(metric_name, str):
            raise TypeError("Expected argument 'metric_name' to be a str")
        pulumi.set(__self__, "metric_name", metric_name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceInfos")
    def instance_infos(self) -> Sequence['outputs.GetMysqlDiagnosisInstancesInstanceInfoResult']:
        """
        Indicates the information about the abnormal instances.
        """
        return pulumi.get(self, "instance_infos")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetMysqlDiagnosisInstancesResult(GetMysqlDiagnosisInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlDiagnosisInstancesResult(
            id=self.id,
            instance_infos=self.instance_infos,
            metric_name=self.metric_name,
            region=self.region)


def get_mysql_diagnosis_instances(metric_name: Optional[_builtins.str] = None,
                                  region: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlDiagnosisInstancesResult:
    """
    Use this data source to get the abnormal instance information by a specific metric.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    metric_name = config.require_object("metricName")
    test = huaweicloud.GaussDB.get_mysql_diagnosis_instances(metric_name=metric_name)
    ```


    :param _builtins.str metric_name: Specifies the metric name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['metricName'] = metric_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDB/getMysqlDiagnosisInstances:getMysqlDiagnosisInstances', __args__, opts=opts, typ=GetMysqlDiagnosisInstancesResult).value

    return AwaitableGetMysqlDiagnosisInstancesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_infos=pulumi.get(__ret__, 'instance_infos'),
        metric_name=pulumi.get(__ret__, 'metric_name'),
        region=pulumi.get(__ret__, 'region'))
def get_mysql_diagnosis_instances_output(metric_name: Optional[pulumi.Input[_builtins.str]] = None,
                                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMysqlDiagnosisInstancesResult]:
    """
    Use this data source to get the abnormal instance information by a specific metric.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    metric_name = config.require_object("metricName")
    test = huaweicloud.GaussDB.get_mysql_diagnosis_instances(metric_name=metric_name)
    ```


    :param _builtins.str metric_name: Specifies the metric name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['metricName'] = metric_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDB/getMysqlDiagnosisInstances:getMysqlDiagnosisInstances', __args__, opts=opts, typ=GetMysqlDiagnosisInstancesResult)
    return __ret__.apply(lambda __response__: GetMysqlDiagnosisInstancesResult(
        id=pulumi.get(__response__, 'id'),
        instance_infos=pulumi.get(__response__, 'instance_infos'),
        metric_name=pulumi.get(__response__, 'metric_name'),
        region=pulumi.get(__response__, 'region')))
