# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MysqlProxyArgs', 'MysqlProxy']

@pulumi.input_type
class MysqlProxyArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 node_num: pulumi.Input[_builtins.int],
                 access_control_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyAccessControlIpListArgs']]]] = None,
                 access_control_type: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_pool_type: Optional[pulumi.Input[_builtins.str]] = None,
                 consistence_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_weight: Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']] = None,
                 new_node_auto_add_status: Optional[pulumi.Input[_builtins.str]] = None,
                 new_node_weight: Optional[pulumi.Input[_builtins.int]] = None,
                 open_access_control: Optional[pulumi.Input[_builtins.bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyParameterArgs']]]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 readonly_nodes_weights: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transaction_split: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MysqlProxy resource.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the proxy. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.int] node_num: Specifies the node count of the proxy.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlProxyAccessControlIpListArgs']]] access_control_ip_lists: Specifies the list of IP addresses that control access. A maximum of
               `300` IP addresses or CIDR blocks can be added.
               The access_control_ip_list structure is documented below.
               
               <a name="node_weight_struct"></a>
               The `master_node_weight` and `readonly_nodes_weight` block supports:
        :param pulumi.Input[_builtins.str] access_control_type: Specifies the access control mode. Value options:
               + **white**: indicates the whitelist.
               + **black**: indicates the blacklist.
        :param pulumi.Input[_builtins.str] connection_pool_type: Specifies the connection pool type. Value options:
               + **CLOSED**: The connection pool is not used.
               + **SESSION**: The session-level connection pool is used.
               
               Defaults to **CLOSED**.
        :param pulumi.Input[_builtins.str] consistence_mode: Specifies the consistency mode of the proxy. Value options:
               + **session**: session consistency.
               + **global**: global consistency.
               + **eventual**: eventual consistency.
               
               Defaults to **eventual**.
        :param pulumi.Input['MysqlProxyMasterNodeWeightArgs'] master_node_weight: Specifies the read weight of the master node.
               The master_node_weight structure is documented below.
        :param pulumi.Input[_builtins.str] new_node_auto_add_status: Specifies whether new nodes are automatically associate with proxy.
               Value options:
               + **ON**: New nodes are automatically associate with proxy.
               + **OFF**: New nodes are not automatically associate with proxy.
               
               > **NOTE:** To configure this parameter, contact customer service.
        :param pulumi.Input[_builtins.int] new_node_weight: Specifies the read weight of the new node.
               + If `route_mode` is `0` and `new_node_auto_add_status` is **ON**, the value of this parameter ranges from `0` to `1,000`.
               + If `route_mode` is not `0` and `new_node_auto_add_status` is **OFF**, this parameter is unavailable.
        :param pulumi.Input[_builtins.bool] open_access_control: Specifies whether to enable access control.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlProxyParameterArgs']]] parameters: Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.int] port: Specifies the port of the proxy.
        :param pulumi.Input[_builtins.str] proxy_mode: Specifies the type of the proxy. Changing this creates a new resource.
               Value options:
               + **readwrite**: read and write.
               + **readonly**: read-only.
               
               Defaults to **readwrite**.
        :param pulumi.Input[_builtins.str] proxy_name: Specifies the name of the proxy. The name consists of `4` to `64` characters and
               starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]] readonly_nodes_weights: Specifies the read weight of the read-only node.
               The readonly_nodes_weight structure is documented below.
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql proxy resource. If omitted,
               the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] route_mode: Specifies the routing policy of the proxy. Changing this creates a new
               resource. Value options:
               + **0**: weighted load balancing.
               + **1**: load balancing (The primary node does not process read requests).
               + **2**: load balancing (The primary node processes read requests).
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] transaction_split: Specifies whether the proxy transaction splitting is enabled. Value options:
               + **ON**: Transaction splitting is enabled.
               + **OFF**: Transaction splitting is disabled.
               
               Defaults to **OFF**.
        """
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "node_num", node_num)
        if access_control_ip_lists is not None:
            pulumi.set(__self__, "access_control_ip_lists", access_control_ip_lists)
        if access_control_type is not None:
            pulumi.set(__self__, "access_control_type", access_control_type)
        if connection_pool_type is not None:
            pulumi.set(__self__, "connection_pool_type", connection_pool_type)
        if consistence_mode is not None:
            pulumi.set(__self__, "consistence_mode", consistence_mode)
        if master_node_weight is not None:
            pulumi.set(__self__, "master_node_weight", master_node_weight)
        if new_node_auto_add_status is not None:
            pulumi.set(__self__, "new_node_auto_add_status", new_node_auto_add_status)
        if new_node_weight is not None:
            pulumi.set(__self__, "new_node_weight", new_node_weight)
        if open_access_control is not None:
            pulumi.set(__self__, "open_access_control", open_access_control)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_mode is not None:
            pulumi.set(__self__, "proxy_mode", proxy_mode)
        if proxy_name is not None:
            pulumi.set(__self__, "proxy_name", proxy_name)
        if readonly_nodes_weights is not None:
            pulumi.set(__self__, "readonly_nodes_weights", readonly_nodes_weights)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_mode is not None:
            pulumi.set(__self__, "route_mode", route_mode)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if transaction_split is not None:
            pulumi.set(__self__, "transaction_split", transaction_split)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the flavor of the proxy. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the GaussDB MySQL instance. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the node count of the proxy.
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "node_num", value)

    @_builtins.property
    @pulumi.getter(name="accessControlIpLists")
    def access_control_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyAccessControlIpListArgs']]]]:
        """
        Specifies the list of IP addresses that control access. A maximum of
        `300` IP addresses or CIDR blocks can be added.
        The access_control_ip_list structure is documented below.

        <a name="node_weight_struct"></a>
        The `master_node_weight` and `readonly_nodes_weight` block supports:
        """
        return pulumi.get(self, "access_control_ip_lists")

    @access_control_ip_lists.setter
    def access_control_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyAccessControlIpListArgs']]]]):
        pulumi.set(self, "access_control_ip_lists", value)

    @_builtins.property
    @pulumi.getter(name="accessControlType")
    def access_control_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the access control mode. Value options:
        + **white**: indicates the whitelist.
        + **black**: indicates the blacklist.
        """
        return pulumi.get(self, "access_control_type")

    @access_control_type.setter
    def access_control_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_control_type", value)

    @_builtins.property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the connection pool type. Value options:
        + **CLOSED**: The connection pool is not used.
        + **SESSION**: The session-level connection pool is used.

        Defaults to **CLOSED**.
        """
        return pulumi.get(self, "connection_pool_type")

    @connection_pool_type.setter
    def connection_pool_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_pool_type", value)

    @_builtins.property
    @pulumi.getter(name="consistenceMode")
    def consistence_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the consistency mode of the proxy. Value options:
        + **session**: session consistency.
        + **global**: global consistency.
        + **eventual**: eventual consistency.

        Defaults to **eventual**.
        """
        return pulumi.get(self, "consistence_mode")

    @consistence_mode.setter
    def consistence_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "consistence_mode", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeWeight")
    def master_node_weight(self) -> Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']]:
        """
        Specifies the read weight of the master node.
        The master_node_weight structure is documented below.
        """
        return pulumi.get(self, "master_node_weight")

    @master_node_weight.setter
    def master_node_weight(self, value: Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']]):
        pulumi.set(self, "master_node_weight", value)

    @_builtins.property
    @pulumi.getter(name="newNodeAutoAddStatus")
    def new_node_auto_add_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether new nodes are automatically associate with proxy.
        Value options:
        + **ON**: New nodes are automatically associate with proxy.
        + **OFF**: New nodes are not automatically associate with proxy.

        > **NOTE:** To configure this parameter, contact customer service.
        """
        return pulumi.get(self, "new_node_auto_add_status")

    @new_node_auto_add_status.setter
    def new_node_auto_add_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "new_node_auto_add_status", value)

    @_builtins.property
    @pulumi.getter(name="newNodeWeight")
    def new_node_weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the read weight of the new node.
        + If `route_mode` is `0` and `new_node_auto_add_status` is **ON**, the value of this parameter ranges from `0` to `1,000`.
        + If `route_mode` is not `0` and `new_node_auto_add_status` is **OFF**, this parameter is unavailable.
        """
        return pulumi.get(self, "new_node_weight")

    @new_node_weight.setter
    def new_node_weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "new_node_weight", value)

    @_builtins.property
    @pulumi.getter(name="openAccessControl")
    def open_access_control(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable access control.
        """
        return pulumi.get(self, "open_access_control")

    @open_access_control.setter
    def open_access_control(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "open_access_control", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyParameterArgs']]]]:
        """
        Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port of the proxy.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="proxyMode")
    def proxy_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the proxy. Changing this creates a new resource.
        Value options:
        + **readwrite**: read and write.
        + **readonly**: read-only.

        Defaults to **readwrite**.
        """
        return pulumi.get(self, "proxy_mode")

    @proxy_mode.setter
    def proxy_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_mode", value)

    @_builtins.property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the proxy. The name consists of `4` to `64` characters and
        starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "proxy_name")

    @proxy_name.setter
    def proxy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_name", value)

    @_builtins.property
    @pulumi.getter(name="readonlyNodesWeights")
    def readonly_nodes_weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]]:
        """
        Specifies the read weight of the read-only node.
        The readonly_nodes_weight structure is documented below.
        """
        return pulumi.get(self, "readonly_nodes_weights")

    @readonly_nodes_weights.setter
    def readonly_nodes_weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]]):
        pulumi.set(self, "readonly_nodes_weights", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the GaussDB mysql proxy resource. If omitted,
        the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the routing policy of the proxy. Changing this creates a new
        resource. Value options:
        + **0**: weighted load balancing.
        + **1**: load balancing (The primary node does not process read requests).
        + **2**: load balancing (The primary node processes read requests).
        """
        return pulumi.get(self, "route_mode")

    @route_mode.setter
    def route_mode(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "route_mode", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network ID of a subnet. Changing this creates a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="transactionSplit")
    def transaction_split(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the proxy transaction splitting is enabled. Value options:
        + **ON**: Transaction splitting is enabled.
        + **OFF**: Transaction splitting is disabled.

        Defaults to **OFF**.
        """
        return pulumi.get(self, "transaction_split")

    @transaction_split.setter
    def transaction_split(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transaction_split", value)


@pulumi.input_type
class _MysqlProxyState:
    def __init__(__self__, *,
                 access_control_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyAccessControlIpListArgs']]]] = None,
                 access_control_type: Optional[pulumi.Input[_builtins.str]] = None,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 can_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 connection_pool_type: Optional[pulumi.Input[_builtins.str]] = None,
                 consistence_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 current_version: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_weight: Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']] = None,
                 new_node_auto_add_status: Optional[pulumi.Input[_builtins.str]] = None,
                 new_node_weight: Optional[pulumi.Input[_builtins.int]] = None,
                 node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyNodeArgs']]]] = None,
                 open_access_control: Optional[pulumi.Input[_builtins.bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyParameterArgs']]]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 readonly_nodes_weights: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 switch_connection_pool_type_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 transaction_split: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MysqlProxy resources.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlProxyAccessControlIpListArgs']]] access_control_ip_lists: Specifies the list of IP addresses that control access. A maximum of
               `300` IP addresses or CIDR blocks can be added.
               The access_control_ip_list structure is documented below.
               
               <a name="node_weight_struct"></a>
               The `master_node_weight` and `readonly_nodes_weight` block supports:
        :param pulumi.Input[_builtins.str] access_control_type: Specifies the access control mode. Value options:
               + **white**: indicates the whitelist.
               + **black**: indicates the blacklist.
        :param pulumi.Input[_builtins.str] address: Indicates the address of the proxy.
        :param pulumi.Input[_builtins.bool] can_upgrade: Indicates whether the proxy can be upgrade.
        :param pulumi.Input[_builtins.str] connection_pool_type: Specifies the connection pool type. Value options:
               + **CLOSED**: The connection pool is not used.
               + **SESSION**: The session-level connection pool is used.
               
               Defaults to **CLOSED**.
        :param pulumi.Input[_builtins.str] consistence_mode: Specifies the consistency mode of the proxy. Value options:
               + **session**: session consistency.
               + **global**: global consistency.
               + **eventual**: eventual consistency.
               
               Defaults to **eventual**.
        :param pulumi.Input[_builtins.str] current_version: Indicates the current version of the proxy.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the proxy. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
        :param pulumi.Input['MysqlProxyMasterNodeWeightArgs'] master_node_weight: Specifies the read weight of the master node.
               The master_node_weight structure is documented below.
        :param pulumi.Input[_builtins.str] new_node_auto_add_status: Specifies whether new nodes are automatically associate with proxy.
               Value options:
               + **ON**: New nodes are automatically associate with proxy.
               + **OFF**: New nodes are not automatically associate with proxy.
               
               > **NOTE:** To configure this parameter, contact customer service.
        :param pulumi.Input[_builtins.int] new_node_weight: Specifies the read weight of the new node.
               + If `route_mode` is `0` and `new_node_auto_add_status` is **ON**, the value of this parameter ranges from `0` to `1,000`.
               + If `route_mode` is not `0` and `new_node_auto_add_status` is **OFF**, this parameter is unavailable.
        :param pulumi.Input[_builtins.int] node_num: Specifies the node count of the proxy.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlProxyNodeArgs']]] nodes: Indicates the node information of the proxy.
               The nodes structure is documented below.
        :param pulumi.Input[_builtins.bool] open_access_control: Specifies whether to enable access control.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlProxyParameterArgs']]] parameters: Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.int] port: Specifies the port of the proxy.
        :param pulumi.Input[_builtins.str] proxy_mode: Specifies the type of the proxy. Changing this creates a new resource.
               Value options:
               + **readwrite**: read and write.
               + **readonly**: read-only.
               
               Defaults to **readwrite**.
        :param pulumi.Input[_builtins.str] proxy_name: Specifies the name of the proxy. The name consists of `4` to `64` characters and
               starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]] readonly_nodes_weights: Specifies the read weight of the read-only node.
               The readonly_nodes_weight structure is documented below.
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql proxy resource. If omitted,
               the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] route_mode: Specifies the routing policy of the proxy. Changing this creates a new
               resource. Value options:
               + **0**: weighted load balancing.
               + **1**: load balancing (The primary node does not process read requests).
               + **2**: load balancing (The primary node processes read requests).
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] switch_connection_pool_type_enabled: Indicates whether the proxy supports session-level connection pool.
        :param pulumi.Input[_builtins.str] transaction_split: Specifies whether the proxy transaction splitting is enabled. Value options:
               + **ON**: Transaction splitting is enabled.
               + **OFF**: Transaction splitting is disabled.
               
               Defaults to **OFF**.
        """
        if access_control_ip_lists is not None:
            pulumi.set(__self__, "access_control_ip_lists", access_control_ip_lists)
        if access_control_type is not None:
            pulumi.set(__self__, "access_control_type", access_control_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if can_upgrade is not None:
            pulumi.set(__self__, "can_upgrade", can_upgrade)
        if connection_pool_type is not None:
            pulumi.set(__self__, "connection_pool_type", connection_pool_type)
        if consistence_mode is not None:
            pulumi.set(__self__, "consistence_mode", consistence_mode)
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if master_node_weight is not None:
            pulumi.set(__self__, "master_node_weight", master_node_weight)
        if new_node_auto_add_status is not None:
            pulumi.set(__self__, "new_node_auto_add_status", new_node_auto_add_status)
        if new_node_weight is not None:
            pulumi.set(__self__, "new_node_weight", new_node_weight)
        if node_num is not None:
            pulumi.set(__self__, "node_num", node_num)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if open_access_control is not None:
            pulumi.set(__self__, "open_access_control", open_access_control)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_mode is not None:
            pulumi.set(__self__, "proxy_mode", proxy_mode)
        if proxy_name is not None:
            pulumi.set(__self__, "proxy_name", proxy_name)
        if readonly_nodes_weights is not None:
            pulumi.set(__self__, "readonly_nodes_weights", readonly_nodes_weights)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_mode is not None:
            pulumi.set(__self__, "route_mode", route_mode)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if switch_connection_pool_type_enabled is not None:
            pulumi.set(__self__, "switch_connection_pool_type_enabled", switch_connection_pool_type_enabled)
        if transaction_split is not None:
            pulumi.set(__self__, "transaction_split", transaction_split)

    @_builtins.property
    @pulumi.getter(name="accessControlIpLists")
    def access_control_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyAccessControlIpListArgs']]]]:
        """
        Specifies the list of IP addresses that control access. A maximum of
        `300` IP addresses or CIDR blocks can be added.
        The access_control_ip_list structure is documented below.

        <a name="node_weight_struct"></a>
        The `master_node_weight` and `readonly_nodes_weight` block supports:
        """
        return pulumi.get(self, "access_control_ip_lists")

    @access_control_ip_lists.setter
    def access_control_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyAccessControlIpListArgs']]]]):
        pulumi.set(self, "access_control_ip_lists", value)

    @_builtins.property
    @pulumi.getter(name="accessControlType")
    def access_control_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the access control mode. Value options:
        + **white**: indicates the whitelist.
        + **black**: indicates the blacklist.
        """
        return pulumi.get(self, "access_control_type")

    @access_control_type.setter
    def access_control_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_control_type", value)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the address of the proxy.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="canUpgrade")
    def can_upgrade(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the proxy can be upgrade.
        """
        return pulumi.get(self, "can_upgrade")

    @can_upgrade.setter
    def can_upgrade(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "can_upgrade", value)

    @_builtins.property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the connection pool type. Value options:
        + **CLOSED**: The connection pool is not used.
        + **SESSION**: The session-level connection pool is used.

        Defaults to **CLOSED**.
        """
        return pulumi.get(self, "connection_pool_type")

    @connection_pool_type.setter
    def connection_pool_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_pool_type", value)

    @_builtins.property
    @pulumi.getter(name="consistenceMode")
    def consistence_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the consistency mode of the proxy. Value options:
        + **session**: session consistency.
        + **global**: global consistency.
        + **eventual**: eventual consistency.

        Defaults to **eventual**.
        """
        return pulumi.get(self, "consistence_mode")

    @consistence_mode.setter
    def consistence_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "consistence_mode", value)

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the current version of the proxy.
        """
        return pulumi.get(self, "current_version")

    @current_version.setter
    def current_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "current_version", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the flavor of the proxy. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB MySQL instance. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="masterNodeWeight")
    def master_node_weight(self) -> Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']]:
        """
        Specifies the read weight of the master node.
        The master_node_weight structure is documented below.
        """
        return pulumi.get(self, "master_node_weight")

    @master_node_weight.setter
    def master_node_weight(self, value: Optional[pulumi.Input['MysqlProxyMasterNodeWeightArgs']]):
        pulumi.set(self, "master_node_weight", value)

    @_builtins.property
    @pulumi.getter(name="newNodeAutoAddStatus")
    def new_node_auto_add_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether new nodes are automatically associate with proxy.
        Value options:
        + **ON**: New nodes are automatically associate with proxy.
        + **OFF**: New nodes are not automatically associate with proxy.

        > **NOTE:** To configure this parameter, contact customer service.
        """
        return pulumi.get(self, "new_node_auto_add_status")

    @new_node_auto_add_status.setter
    def new_node_auto_add_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "new_node_auto_add_status", value)

    @_builtins.property
    @pulumi.getter(name="newNodeWeight")
    def new_node_weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the read weight of the new node.
        + If `route_mode` is `0` and `new_node_auto_add_status` is **ON**, the value of this parameter ranges from `0` to `1,000`.
        + If `route_mode` is not `0` and `new_node_auto_add_status` is **OFF**, this parameter is unavailable.
        """
        return pulumi.get(self, "new_node_weight")

    @new_node_weight.setter
    def new_node_weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "new_node_weight", value)

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the node count of the proxy.
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "node_num", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyNodeArgs']]]]:
        """
        Indicates the node information of the proxy.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter(name="openAccessControl")
    def open_access_control(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable access control.
        """
        return pulumi.get(self, "open_access_control")

    @open_access_control.setter
    def open_access_control(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "open_access_control", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyParameterArgs']]]]:
        """
        Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the port of the proxy.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="proxyMode")
    def proxy_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of the proxy. Changing this creates a new resource.
        Value options:
        + **readwrite**: read and write.
        + **readonly**: read-only.

        Defaults to **readwrite**.
        """
        return pulumi.get(self, "proxy_mode")

    @proxy_mode.setter
    def proxy_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_mode", value)

    @_builtins.property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the proxy. The name consists of `4` to `64` characters and
        starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "proxy_name")

    @proxy_name.setter
    def proxy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_name", value)

    @_builtins.property
    @pulumi.getter(name="readonlyNodesWeights")
    def readonly_nodes_weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]]:
        """
        Specifies the read weight of the read-only node.
        The readonly_nodes_weight structure is documented below.
        """
        return pulumi.get(self, "readonly_nodes_weights")

    @readonly_nodes_weights.setter
    def readonly_nodes_weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlProxyReadonlyNodesWeightArgs']]]]):
        pulumi.set(self, "readonly_nodes_weights", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the GaussDB mysql proxy resource. If omitted,
        the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the routing policy of the proxy. Changing this creates a new
        resource. Value options:
        + **0**: weighted load balancing.
        + **1**: load balancing (The primary node does not process read requests).
        + **2**: load balancing (The primary node processes read requests).
        """
        return pulumi.get(self, "route_mode")

    @route_mode.setter
    def route_mode(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "route_mode", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the network ID of a subnet. Changing this creates a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="switchConnectionPoolTypeEnabled")
    def switch_connection_pool_type_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the proxy supports session-level connection pool.
        """
        return pulumi.get(self, "switch_connection_pool_type_enabled")

    @switch_connection_pool_type_enabled.setter
    def switch_connection_pool_type_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "switch_connection_pool_type_enabled", value)

    @_builtins.property
    @pulumi.getter(name="transactionSplit")
    def transaction_split(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the proxy transaction splitting is enabled. Value options:
        + **ON**: Transaction splitting is enabled.
        + **OFF**: Transaction splitting is disabled.

        Defaults to **OFF**.
        """
        return pulumi.get(self, "transaction_split")

    @transaction_split.setter
    def transaction_split(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transaction_split", value)


@pulumi.type_token("huaweicloud:GaussDB/mysqlProxy:MysqlProxy")
class MysqlProxy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyAccessControlIpListArgs', 'MysqlProxyAccessControlIpListArgsDict']]]]] = None,
                 access_control_type: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_pool_type: Optional[pulumi.Input[_builtins.str]] = None,
                 consistence_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_weight: Optional[pulumi.Input[Union['MysqlProxyMasterNodeWeightArgs', 'MysqlProxyMasterNodeWeightArgsDict']]] = None,
                 new_node_auto_add_status: Optional[pulumi.Input[_builtins.str]] = None,
                 new_node_weight: Optional[pulumi.Input[_builtins.int]] = None,
                 node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 open_access_control: Optional[pulumi.Input[_builtins.bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyParameterArgs', 'MysqlProxyParameterArgsDict']]]]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 readonly_nodes_weights: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyReadonlyNodesWeightArgs', 'MysqlProxyReadonlyNodesWeightArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transaction_split: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages GaussDB mysql proxy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdb.MysqlProxy("test",
            instance_id=instance_id,
            flavor="gaussdb.proxy.xlarge.x86.2",
            node_num=3)
        ```

        ## Import

        The GaussDB MySQL proxy can be imported using the `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDB/mysqlProxy:MysqlProxy test <instance_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to the attribute missing from the

        API response. The missing attribute is: `new_node_weight`, `proxy_mode`, `readonly_nodes_weight` and `parameters`. It is

        generally recommended running `pulumi preview` after importing a GaussDB MySQL proxy. You can then decide if changes

        should be applied to the GaussDB MySQL proxy, or the resource definition should be updated to align with the GaussDB

        MySQL proxy. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_gaussdb_mysql_proxy" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              new_node_weight, proxy_mode, readonly_nodes_weight, parameters,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyAccessControlIpListArgs', 'MysqlProxyAccessControlIpListArgsDict']]]] access_control_ip_lists: Specifies the list of IP addresses that control access. A maximum of
               `300` IP addresses or CIDR blocks can be added.
               The access_control_ip_list structure is documented below.
               
               <a name="node_weight_struct"></a>
               The `master_node_weight` and `readonly_nodes_weight` block supports:
        :param pulumi.Input[_builtins.str] access_control_type: Specifies the access control mode. Value options:
               + **white**: indicates the whitelist.
               + **black**: indicates the blacklist.
        :param pulumi.Input[_builtins.str] connection_pool_type: Specifies the connection pool type. Value options:
               + **CLOSED**: The connection pool is not used.
               + **SESSION**: The session-level connection pool is used.
               
               Defaults to **CLOSED**.
        :param pulumi.Input[_builtins.str] consistence_mode: Specifies the consistency mode of the proxy. Value options:
               + **session**: session consistency.
               + **global**: global consistency.
               + **eventual**: eventual consistency.
               
               Defaults to **eventual**.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the proxy. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
        :param pulumi.Input[Union['MysqlProxyMasterNodeWeightArgs', 'MysqlProxyMasterNodeWeightArgsDict']] master_node_weight: Specifies the read weight of the master node.
               The master_node_weight structure is documented below.
        :param pulumi.Input[_builtins.str] new_node_auto_add_status: Specifies whether new nodes are automatically associate with proxy.
               Value options:
               + **ON**: New nodes are automatically associate with proxy.
               + **OFF**: New nodes are not automatically associate with proxy.
               
               > **NOTE:** To configure this parameter, contact customer service.
        :param pulumi.Input[_builtins.int] new_node_weight: Specifies the read weight of the new node.
               + If `route_mode` is `0` and `new_node_auto_add_status` is **ON**, the value of this parameter ranges from `0` to `1,000`.
               + If `route_mode` is not `0` and `new_node_auto_add_status` is **OFF**, this parameter is unavailable.
        :param pulumi.Input[_builtins.int] node_num: Specifies the node count of the proxy.
        :param pulumi.Input[_builtins.bool] open_access_control: Specifies whether to enable access control.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyParameterArgs', 'MysqlProxyParameterArgsDict']]]] parameters: Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.int] port: Specifies the port of the proxy.
        :param pulumi.Input[_builtins.str] proxy_mode: Specifies the type of the proxy. Changing this creates a new resource.
               Value options:
               + **readwrite**: read and write.
               + **readonly**: read-only.
               
               Defaults to **readwrite**.
        :param pulumi.Input[_builtins.str] proxy_name: Specifies the name of the proxy. The name consists of `4` to `64` characters and
               starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyReadonlyNodesWeightArgs', 'MysqlProxyReadonlyNodesWeightArgsDict']]]] readonly_nodes_weights: Specifies the read weight of the read-only node.
               The readonly_nodes_weight structure is documented below.
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql proxy resource. If omitted,
               the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] route_mode: Specifies the routing policy of the proxy. Changing this creates a new
               resource. Value options:
               + **0**: weighted load balancing.
               + **1**: load balancing (The primary node does not process read requests).
               + **2**: load balancing (The primary node processes read requests).
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet. Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] transaction_split: Specifies whether the proxy transaction splitting is enabled. Value options:
               + **ON**: Transaction splitting is enabled.
               + **OFF**: Transaction splitting is disabled.
               
               Defaults to **OFF**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MysqlProxyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages GaussDB mysql proxy resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdb.MysqlProxy("test",
            instance_id=instance_id,
            flavor="gaussdb.proxy.xlarge.x86.2",
            node_num=3)
        ```

        ## Import

        The GaussDB MySQL proxy can be imported using the `instance_id` and `id` separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDB/mysqlProxy:MysqlProxy test <instance_id>/<id>
        ```

        Note that the imported state may not be identical to your resource definition, due to the attribute missing from the

        API response. The missing attribute is: `new_node_weight`, `proxy_mode`, `readonly_nodes_weight` and `parameters`. It is

        generally recommended running `pulumi preview` after importing a GaussDB MySQL proxy. You can then decide if changes

        should be applied to the GaussDB MySQL proxy, or the resource definition should be updated to align with the GaussDB

        MySQL proxy. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_gaussdb_mysql_proxy" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              new_node_weight, proxy_mode, readonly_nodes_weight, parameters,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param MysqlProxyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MysqlProxyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyAccessControlIpListArgs', 'MysqlProxyAccessControlIpListArgsDict']]]]] = None,
                 access_control_type: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_pool_type: Optional[pulumi.Input[_builtins.str]] = None,
                 consistence_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_node_weight: Optional[pulumi.Input[Union['MysqlProxyMasterNodeWeightArgs', 'MysqlProxyMasterNodeWeightArgsDict']]] = None,
                 new_node_auto_add_status: Optional[pulumi.Input[_builtins.str]] = None,
                 new_node_weight: Optional[pulumi.Input[_builtins.int]] = None,
                 node_num: Optional[pulumi.Input[_builtins.int]] = None,
                 open_access_control: Optional[pulumi.Input[_builtins.bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyParameterArgs', 'MysqlProxyParameterArgsDict']]]]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 readonly_nodes_weights: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyReadonlyNodesWeightArgs', 'MysqlProxyReadonlyNodesWeightArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.int]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transaction_split: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MysqlProxyArgs.__new__(MysqlProxyArgs)

            __props__.__dict__["access_control_ip_lists"] = access_control_ip_lists
            __props__.__dict__["access_control_type"] = access_control_type
            __props__.__dict__["connection_pool_type"] = connection_pool_type
            __props__.__dict__["consistence_mode"] = consistence_mode
            if flavor is None and not opts.urn:
                raise TypeError("Missing required property 'flavor'")
            __props__.__dict__["flavor"] = flavor
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["master_node_weight"] = master_node_weight
            __props__.__dict__["new_node_auto_add_status"] = new_node_auto_add_status
            __props__.__dict__["new_node_weight"] = new_node_weight
            if node_num is None and not opts.urn:
                raise TypeError("Missing required property 'node_num'")
            __props__.__dict__["node_num"] = node_num
            __props__.__dict__["open_access_control"] = open_access_control
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["port"] = port
            __props__.__dict__["proxy_mode"] = proxy_mode
            __props__.__dict__["proxy_name"] = proxy_name
            __props__.__dict__["readonly_nodes_weights"] = readonly_nodes_weights
            __props__.__dict__["region"] = region
            __props__.__dict__["route_mode"] = route_mode
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["transaction_split"] = transaction_split
            __props__.__dict__["address"] = None
            __props__.__dict__["can_upgrade"] = None
            __props__.__dict__["current_version"] = None
            __props__.__dict__["nodes"] = None
            __props__.__dict__["switch_connection_pool_type_enabled"] = None
        super(MysqlProxy, __self__).__init__(
            'huaweicloud:GaussDB/mysqlProxy:MysqlProxy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_control_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyAccessControlIpListArgs', 'MysqlProxyAccessControlIpListArgsDict']]]]] = None,
            access_control_type: Optional[pulumi.Input[_builtins.str]] = None,
            address: Optional[pulumi.Input[_builtins.str]] = None,
            can_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
            connection_pool_type: Optional[pulumi.Input[_builtins.str]] = None,
            consistence_mode: Optional[pulumi.Input[_builtins.str]] = None,
            current_version: Optional[pulumi.Input[_builtins.str]] = None,
            flavor: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            master_node_weight: Optional[pulumi.Input[Union['MysqlProxyMasterNodeWeightArgs', 'MysqlProxyMasterNodeWeightArgsDict']]] = None,
            new_node_auto_add_status: Optional[pulumi.Input[_builtins.str]] = None,
            new_node_weight: Optional[pulumi.Input[_builtins.int]] = None,
            node_num: Optional[pulumi.Input[_builtins.int]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyNodeArgs', 'MysqlProxyNodeArgsDict']]]]] = None,
            open_access_control: Optional[pulumi.Input[_builtins.bool]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyParameterArgs', 'MysqlProxyParameterArgsDict']]]]] = None,
            port: Optional[pulumi.Input[_builtins.int]] = None,
            proxy_mode: Optional[pulumi.Input[_builtins.str]] = None,
            proxy_name: Optional[pulumi.Input[_builtins.str]] = None,
            readonly_nodes_weights: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyReadonlyNodesWeightArgs', 'MysqlProxyReadonlyNodesWeightArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            route_mode: Optional[pulumi.Input[_builtins.int]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            switch_connection_pool_type_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            transaction_split: Optional[pulumi.Input[_builtins.str]] = None) -> 'MysqlProxy':
        """
        Get an existing MysqlProxy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyAccessControlIpListArgs', 'MysqlProxyAccessControlIpListArgsDict']]]] access_control_ip_lists: Specifies the list of IP addresses that control access. A maximum of
               `300` IP addresses or CIDR blocks can be added.
               The access_control_ip_list structure is documented below.
               
               <a name="node_weight_struct"></a>
               The `master_node_weight` and `readonly_nodes_weight` block supports:
        :param pulumi.Input[_builtins.str] access_control_type: Specifies the access control mode. Value options:
               + **white**: indicates the whitelist.
               + **black**: indicates the blacklist.
        :param pulumi.Input[_builtins.str] address: Indicates the address of the proxy.
        :param pulumi.Input[_builtins.bool] can_upgrade: Indicates whether the proxy can be upgrade.
        :param pulumi.Input[_builtins.str] connection_pool_type: Specifies the connection pool type. Value options:
               + **CLOSED**: The connection pool is not used.
               + **SESSION**: The session-level connection pool is used.
               
               Defaults to **CLOSED**.
        :param pulumi.Input[_builtins.str] consistence_mode: Specifies the consistency mode of the proxy. Value options:
               + **session**: session consistency.
               + **global**: global consistency.
               + **eventual**: eventual consistency.
               
               Defaults to **eventual**.
        :param pulumi.Input[_builtins.str] current_version: Indicates the current version of the proxy.
        :param pulumi.Input[_builtins.str] flavor: Specifies the flavor of the proxy. Changing this parameter will create a new
               resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
        :param pulumi.Input[Union['MysqlProxyMasterNodeWeightArgs', 'MysqlProxyMasterNodeWeightArgsDict']] master_node_weight: Specifies the read weight of the master node.
               The master_node_weight structure is documented below.
        :param pulumi.Input[_builtins.str] new_node_auto_add_status: Specifies whether new nodes are automatically associate with proxy.
               Value options:
               + **ON**: New nodes are automatically associate with proxy.
               + **OFF**: New nodes are not automatically associate with proxy.
               
               > **NOTE:** To configure this parameter, contact customer service.
        :param pulumi.Input[_builtins.int] new_node_weight: Specifies the read weight of the new node.
               + If `route_mode` is `0` and `new_node_auto_add_status` is **ON**, the value of this parameter ranges from `0` to `1,000`.
               + If `route_mode` is not `0` and `new_node_auto_add_status` is **OFF**, this parameter is unavailable.
        :param pulumi.Input[_builtins.int] node_num: Specifies the node count of the proxy.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyNodeArgs', 'MysqlProxyNodeArgsDict']]]] nodes: Indicates the node information of the proxy.
               The nodes structure is documented below.
        :param pulumi.Input[_builtins.bool] open_access_control: Specifies whether to enable access control.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyParameterArgs', 'MysqlProxyParameterArgsDict']]]] parameters: Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
               The parameters structure is documented below.
        :param pulumi.Input[_builtins.int] port: Specifies the port of the proxy.
        :param pulumi.Input[_builtins.str] proxy_mode: Specifies the type of the proxy. Changing this creates a new resource.
               Value options:
               + **readwrite**: read and write.
               + **readonly**: read-only.
               
               Defaults to **readwrite**.
        :param pulumi.Input[_builtins.str] proxy_name: Specifies the name of the proxy. The name consists of `4` to `64` characters and
               starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlProxyReadonlyNodesWeightArgs', 'MysqlProxyReadonlyNodesWeightArgsDict']]]] readonly_nodes_weights: Specifies the read weight of the read-only node.
               The readonly_nodes_weight structure is documented below.
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql proxy resource. If omitted,
               the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[_builtins.int] route_mode: Specifies the routing policy of the proxy. Changing this creates a new
               resource. Value options:
               + **0**: weighted load balancing.
               + **1**: load balancing (The primary node does not process read requests).
               + **2**: load balancing (The primary node processes read requests).
        :param pulumi.Input[_builtins.str] subnet_id: Specifies the network ID of a subnet. Changing this creates a new resource.
        :param pulumi.Input[_builtins.bool] switch_connection_pool_type_enabled: Indicates whether the proxy supports session-level connection pool.
        :param pulumi.Input[_builtins.str] transaction_split: Specifies whether the proxy transaction splitting is enabled. Value options:
               + **ON**: Transaction splitting is enabled.
               + **OFF**: Transaction splitting is disabled.
               
               Defaults to **OFF**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MysqlProxyState.__new__(_MysqlProxyState)

        __props__.__dict__["access_control_ip_lists"] = access_control_ip_lists
        __props__.__dict__["access_control_type"] = access_control_type
        __props__.__dict__["address"] = address
        __props__.__dict__["can_upgrade"] = can_upgrade
        __props__.__dict__["connection_pool_type"] = connection_pool_type
        __props__.__dict__["consistence_mode"] = consistence_mode
        __props__.__dict__["current_version"] = current_version
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["master_node_weight"] = master_node_weight
        __props__.__dict__["new_node_auto_add_status"] = new_node_auto_add_status
        __props__.__dict__["new_node_weight"] = new_node_weight
        __props__.__dict__["node_num"] = node_num
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["open_access_control"] = open_access_control
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["port"] = port
        __props__.__dict__["proxy_mode"] = proxy_mode
        __props__.__dict__["proxy_name"] = proxy_name
        __props__.__dict__["readonly_nodes_weights"] = readonly_nodes_weights
        __props__.__dict__["region"] = region
        __props__.__dict__["route_mode"] = route_mode
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["switch_connection_pool_type_enabled"] = switch_connection_pool_type_enabled
        __props__.__dict__["transaction_split"] = transaction_split
        return MysqlProxy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessControlIpLists")
    def access_control_ip_lists(self) -> pulumi.Output[Sequence['outputs.MysqlProxyAccessControlIpList']]:
        """
        Specifies the list of IP addresses that control access. A maximum of
        `300` IP addresses or CIDR blocks can be added.
        The access_control_ip_list structure is documented below.

        <a name="node_weight_struct"></a>
        The `master_node_weight` and `readonly_nodes_weight` block supports:
        """
        return pulumi.get(self, "access_control_ip_lists")

    @_builtins.property
    @pulumi.getter(name="accessControlType")
    def access_control_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the access control mode. Value options:
        + **white**: indicates the whitelist.
        + **black**: indicates the blacklist.
        """
        return pulumi.get(self, "access_control_type")

    @_builtins.property
    @pulumi.getter
    def address(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the address of the proxy.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="canUpgrade")
    def can_upgrade(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the proxy can be upgrade.
        """
        return pulumi.get(self, "can_upgrade")

    @_builtins.property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the connection pool type. Value options:
        + **CLOSED**: The connection pool is not used.
        + **SESSION**: The session-level connection pool is used.

        Defaults to **CLOSED**.
        """
        return pulumi.get(self, "connection_pool_type")

    @_builtins.property
    @pulumi.getter(name="consistenceMode")
    def consistence_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the consistency mode of the proxy. Value options:
        + **session**: session consistency.
        + **global**: global consistency.
        + **eventual**: eventual consistency.

        Defaults to **eventual**.
        """
        return pulumi.get(self, "consistence_mode")

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the current version of the proxy.
        """
        return pulumi.get(self, "current_version")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the flavor of the proxy. Changing this parameter will create a new
        resource.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the GaussDB MySQL instance. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="masterNodeWeight")
    def master_node_weight(self) -> pulumi.Output['outputs.MysqlProxyMasterNodeWeight']:
        """
        Specifies the read weight of the master node.
        The master_node_weight structure is documented below.
        """
        return pulumi.get(self, "master_node_weight")

    @_builtins.property
    @pulumi.getter(name="newNodeAutoAddStatus")
    def new_node_auto_add_status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether new nodes are automatically associate with proxy.
        Value options:
        + **ON**: New nodes are automatically associate with proxy.
        + **OFF**: New nodes are not automatically associate with proxy.

        > **NOTE:** To configure this parameter, contact customer service.
        """
        return pulumi.get(self, "new_node_auto_add_status")

    @_builtins.property
    @pulumi.getter(name="newNodeWeight")
    def new_node_weight(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the read weight of the new node.
        + If `route_mode` is `0` and `new_node_auto_add_status` is **ON**, the value of this parameter ranges from `0` to `1,000`.
        + If `route_mode` is not `0` and `new_node_auto_add_status` is **OFF**, this parameter is unavailable.
        """
        return pulumi.get(self, "new_node_weight")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the node count of the proxy.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence['outputs.MysqlProxyNode']]:
        """
        Indicates the node information of the proxy.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="openAccessControl")
    def open_access_control(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to enable access control.
        """
        return pulumi.get(self, "open_access_control")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Sequence['outputs.MysqlProxyParameter']]:
        """
        Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the port of the proxy.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="proxyMode")
    def proxy_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of the proxy. Changing this creates a new resource.
        Value options:
        + **readwrite**: read and write.
        + **readonly**: read-only.

        Defaults to **readwrite**.
        """
        return pulumi.get(self, "proxy_mode")

    @_builtins.property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the proxy. The name consists of `4` to `64` characters and
        starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "proxy_name")

    @_builtins.property
    @pulumi.getter(name="readonlyNodesWeights")
    def readonly_nodes_weights(self) -> pulumi.Output[Sequence['outputs.MysqlProxyReadonlyNodesWeight']]:
        """
        Specifies the read weight of the read-only node.
        The readonly_nodes_weight structure is documented below.
        """
        return pulumi.get(self, "readonly_nodes_weights")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the GaussDB mysql proxy resource. If omitted,
        the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the routing policy of the proxy. Changing this creates a new
        resource. Value options:
        + **0**: weighted load balancing.
        + **1**: load balancing (The primary node does not process read requests).
        + **2**: load balancing (The primary node processes read requests).
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the network ID of a subnet. Changing this creates a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="switchConnectionPoolTypeEnabled")
    def switch_connection_pool_type_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the proxy supports session-level connection pool.
        """
        return pulumi.get(self, "switch_connection_pool_type_enabled")

    @_builtins.property
    @pulumi.getter(name="transactionSplit")
    def transaction_split(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether the proxy transaction splitting is enabled. Value options:
        + **ON**: Transaction splitting is enabled.
        + **OFF**: Transaction splitting is disabled.

        Defaults to **OFF**.
        """
        return pulumi.get(self, "transaction_split")

