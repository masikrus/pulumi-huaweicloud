# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MysqlAccountArgs', 'MysqlAccount']

@pulumi.input_type
class MysqlAccountArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 password: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MysqlAccount resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the database user. It cannot be the same as the username.
               The value cannot be empty and must consist of 8 to 32 characters and contain at least three types of the following:
               uppercase letters, lowercase letters, digits, and special characters (~!@#$%^*-_=+?,()&).
        :param pulumi.Input[_builtins.str] description: Specifies the database user remarks. The value can consist of up to 512 characters,
               and cannot contain the carriage return characters or special characters (!<"='>&).This field is only suitable for
               instances 2.0.13.0 or later.
        :param pulumi.Input[_builtins.str] host: Specifies the host IP address. The default value is %, indicating that all IP
               addresses are allowed to access your GaussDB(for MySQL) instance. If its value is 10.10.10.%, all 10.10.10.X IP
               addresses can access your GaussDB(for MySQL) instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the database username. The value can contain 1 to 32 characters,
               including letters, digits, and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "password", password)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the GaussDB MySQL instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the password of the database user. It cannot be the same as the username.
        The value cannot be empty and must consist of 8 to 32 characters and contain at least three types of the following:
        uppercase letters, lowercase letters, digits, and special characters (~!@#$%^*-_=+?,()&).
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database user remarks. The value can consist of up to 512 characters,
        and cannot contain the carriage return characters or special characters (!<"='>&).This field is only suitable for
        instances 2.0.13.0 or later.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host IP address. The default value is %, indicating that all IP
        addresses are allowed to access your GaussDB(for MySQL) instance. If its value is 10.10.10.%, all 10.10.10.X IP
        addresses can access your GaussDB(for MySQL) instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database username. The value can contain 1 to 32 characters,
        including letters, digits, and underscores (_).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _MysqlAccountState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MysqlAccount resources.
        :param pulumi.Input[_builtins.str] description: Specifies the database user remarks. The value can consist of up to 512 characters,
               and cannot contain the carriage return characters or special characters (!<"='>&).This field is only suitable for
               instances 2.0.13.0 or later.
        :param pulumi.Input[_builtins.str] host: Specifies the host IP address. The default value is %, indicating that all IP
               addresses are allowed to access your GaussDB(for MySQL) instance. If its value is 10.10.10.%, all 10.10.10.X IP
               addresses can access your GaussDB(for MySQL) instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the database username. The value can contain 1 to 32 characters,
               including letters, digits, and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the database user. It cannot be the same as the username.
               The value cannot be empty and must consist of 8 to 32 characters and contain at least three types of the following:
               uppercase letters, lowercase letters, digits, and special characters (~!@#$%^*-_=+?,()&).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database user remarks. The value can consist of up to 512 characters,
        and cannot contain the carriage return characters or special characters (!<"='>&).This field is only suitable for
        instances 2.0.13.0 or later.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the host IP address. The default value is %, indicating that all IP
        addresses are allowed to access your GaussDB(for MySQL) instance. If its value is 10.10.10.%, all 10.10.10.X IP
        addresses can access your GaussDB(for MySQL) instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB MySQL instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the database username. The value can contain 1 to 32 characters,
        including letters, digits, and underscores (_).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the password of the database user. It cannot be the same as the username.
        The value cannot be empty and must consist of 8 to 32 characters and contain at least three types of the following:
        uppercase letters, lowercase letters, digits, and special characters (~!@#$%^*-_=+?,()&).
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:GaussDB/mysqlAccount:MysqlAccount")
class MysqlAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB MySQL account resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        password = config.require_object("password")
        test = huaweicloud.gaussdb.MysqlAccount("test",
            instance_id=instance_id,
            name="test_account_name",
            password=password)
        ```

        ## Import

        The GaussDB MySQL account can be imported using the `instance_id`, `name` and `host` separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDB/mysqlAccount:MysqlAccount test <instance_id>/<name>/<host>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `password`. It is generally recommended

        running `pulumi preview` after importing a cluster. You can then decide if changes should be applied to the GaussDB

        MySQL account, or the resource definition should be updated to align with the GaussDB MySQL account. Also you can

        ignore changes as below.

        hcl

        resource "huaweicloud_gaussdb_mysql_account" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              password,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the database user remarks. The value can consist of up to 512 characters,
               and cannot contain the carriage return characters or special characters (!<"='>&).This field is only suitable for
               instances 2.0.13.0 or later.
        :param pulumi.Input[_builtins.str] host: Specifies the host IP address. The default value is %, indicating that all IP
               addresses are allowed to access your GaussDB(for MySQL) instance. If its value is 10.10.10.%, all 10.10.10.X IP
               addresses can access your GaussDB(for MySQL) instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the database username. The value can contain 1 to 32 characters,
               including letters, digits, and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the database user. It cannot be the same as the username.
               The value cannot be empty and must consist of 8 to 32 characters and contain at least three types of the following:
               uppercase letters, lowercase letters, digits, and special characters (~!@#$%^*-_=+?,()&).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MysqlAccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB MySQL account resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        password = config.require_object("password")
        test = huaweicloud.gaussdb.MysqlAccount("test",
            instance_id=instance_id,
            name="test_account_name",
            password=password)
        ```

        ## Import

        The GaussDB MySQL account can be imported using the `instance_id`, `name` and `host` separated by slashes, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDB/mysqlAccount:MysqlAccount test <instance_id>/<name>/<host>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `password`. It is generally recommended

        running `pulumi preview` after importing a cluster. You can then decide if changes should be applied to the GaussDB

        MySQL account, or the resource definition should be updated to align with the GaussDB MySQL account. Also you can

        ignore changes as below.

        hcl

        resource "huaweicloud_gaussdb_mysql_account" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              password,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param MysqlAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MysqlAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MysqlAccountArgs.__new__(MysqlAccountArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["host"] = host
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["region"] = region
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(MysqlAccount, __self__).__init__(
            'huaweicloud:GaussDB/mysqlAccount:MysqlAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            host: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'MysqlAccount':
        """
        Get an existing MysqlAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the database user remarks. The value can consist of up to 512 characters,
               and cannot contain the carriage return characters or special characters (!<"='>&).This field is only suitable for
               instances 2.0.13.0 or later.
        :param pulumi.Input[_builtins.str] host: Specifies the host IP address. The default value is %, indicating that all IP
               addresses are allowed to access your GaussDB(for MySQL) instance. If its value is 10.10.10.%, all 10.10.10.X IP
               addresses can access your GaussDB(for MySQL) instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the database username. The value can contain 1 to 32 characters,
               including letters, digits, and underscores (_).
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the database user. It cannot be the same as the username.
               The value cannot be empty and must consist of 8 to 32 characters and contain at least three types of the following:
               uppercase letters, lowercase letters, digits, and special characters (~!@#$%^*-_=+?,()&).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MysqlAccountState.__new__(_MysqlAccountState)

        __props__.__dict__["description"] = description
        __props__.__dict__["host"] = host
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["region"] = region
        return MysqlAccount(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the database user remarks. The value can consist of up to 512 characters,
        and cannot contain the carriage return characters or special characters (!<"='>&).This field is only suitable for
        instances 2.0.13.0 or later.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the host IP address. The default value is %, indicating that all IP
        addresses are allowed to access your GaussDB(for MySQL) instance. If its value is 10.10.10.%, all 10.10.10.X IP
        addresses can access your GaussDB(for MySQL) instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the GaussDB MySQL instance.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the database username. The value can contain 1 to 32 characters,
        including letters, digits, and underscores (_).

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the password of the database user. It cannot be the same as the username.
        The value cannot be empty and must consist of 8 to 32 characters and contain at least three types of the following:
        uppercase letters, lowercase letters, digits, and special characters (~!@#$%^*-_=+?,()&).
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

