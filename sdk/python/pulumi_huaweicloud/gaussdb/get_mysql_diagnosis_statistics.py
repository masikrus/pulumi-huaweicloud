# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlDiagnosisStatisticsResult',
    'AwaitableGetMysqlDiagnosisStatisticsResult',
    'get_mysql_diagnosis_statistics',
    'get_mysql_diagnosis_statistics_output',
]

@pulumi.output_type
class GetMysqlDiagnosisStatisticsResult:
    """
    A collection of values returned by getMysqlDiagnosisStatistics.
    """
    def __init__(__self__, diagnosis_infos=None, id=None, region=None):
        if diagnosis_infos and not isinstance(diagnosis_infos, list):
            raise TypeError("Expected argument 'diagnosis_infos' to be a list")
        pulumi.set(__self__, "diagnosis_infos", diagnosis_infos)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="diagnosisInfos")
    def diagnosis_infos(self) -> Sequence['outputs.GetMysqlDiagnosisStatisticsDiagnosisInfoResult']:
        """
        Specifies the diagnosis information list.
        """
        return pulumi.get(self, "diagnosis_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetMysqlDiagnosisStatisticsResult(GetMysqlDiagnosisStatisticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlDiagnosisStatisticsResult(
            diagnosis_infos=self.diagnosis_infos,
            id=self.id,
            region=self.region)


def get_mysql_diagnosis_statistics(region: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlDiagnosisStatisticsResult:
    """
    Use this data source to get the abnormal instances by each metric.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDB.get_mysql_diagnosis_statistics()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDB/getMysqlDiagnosisStatistics:getMysqlDiagnosisStatistics', __args__, opts=opts, typ=GetMysqlDiagnosisStatisticsResult).value

    return AwaitableGetMysqlDiagnosisStatisticsResult(
        diagnosis_infos=pulumi.get(__ret__, 'diagnosis_infos'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_mysql_diagnosis_statistics_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMysqlDiagnosisStatisticsResult]:
    """
    Use this data source to get the abnormal instances by each metric.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDB.get_mysql_diagnosis_statistics()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDB/getMysqlDiagnosisStatistics:getMysqlDiagnosisStatistics', __args__, opts=opts, typ=GetMysqlDiagnosisStatisticsResult)
    return __ret__.apply(lambda __response__: GetMysqlDiagnosisStatisticsResult(
        diagnosis_infos=pulumi.get(__response__, 'diagnosis_infos'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
