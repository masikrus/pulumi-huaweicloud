# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MysqlTableRestoreArgs', 'MysqlTableRestore']

@pulumi.input_type
class MysqlTableRestoreArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 restore_tables: pulumi.Input[Sequence[pulumi.Input['MysqlTableRestoreRestoreTableArgs']]],
                 restore_time: pulumi.Input[_builtins.str],
                 last_table_info: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MysqlTableRestore resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the GaussDB mysql instance ID.
               
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlTableRestoreRestoreTableArgs']]] restore_tables: Specifies the database information.
               The restore_tables structure is documented below.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] restore_time: Specifies the backup time, in timestamp format.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] last_table_info: Specifies whether the data is restored to the most recent table.
               Value options:
               + **true**: most recent table.
               + **false (default value)**: time-specific table.
               
               Changing this creates a new resource.
               
               <a name="restore_tables_struct"></a>
               The `restore_tables` block supports:
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql table restore resource. If
               omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "restore_tables", restore_tables)
        pulumi.set(__self__, "restore_time", restore_time)
        if last_table_info is not None:
            pulumi.set(__self__, "last_table_info", last_table_info)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the GaussDB mysql instance ID.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="restoreTables")
    def restore_tables(self) -> pulumi.Input[Sequence[pulumi.Input['MysqlTableRestoreRestoreTableArgs']]]:
        """
        Specifies the database information.
        The restore_tables structure is documented below.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "restore_tables")

    @restore_tables.setter
    def restore_tables(self, value: pulumi.Input[Sequence[pulumi.Input['MysqlTableRestoreRestoreTableArgs']]]):
        pulumi.set(self, "restore_tables", value)

    @_builtins.property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the backup time, in timestamp format.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "restore_time")

    @restore_time.setter
    def restore_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "restore_time", value)

    @_builtins.property
    @pulumi.getter(name="lastTableInfo")
    def last_table_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the data is restored to the most recent table.
        Value options:
        + **true**: most recent table.
        + **false (default value)**: time-specific table.

        Changing this creates a new resource.

        <a name="restore_tables_struct"></a>
        The `restore_tables` block supports:
        """
        return pulumi.get(self, "last_table_info")

    @last_table_info.setter
    def last_table_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_table_info", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the GaussDB mysql table restore resource. If
        omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _MysqlTableRestoreState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_table_info: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restore_tables: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlTableRestoreRestoreTableArgs']]]] = None,
                 restore_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MysqlTableRestore resources.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the GaussDB mysql instance ID.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] last_table_info: Specifies whether the data is restored to the most recent table.
               Value options:
               + **true**: most recent table.
               + **false (default value)**: time-specific table.
               
               Changing this creates a new resource.
               
               <a name="restore_tables_struct"></a>
               The `restore_tables` block supports:
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql table restore resource. If
               omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlTableRestoreRestoreTableArgs']]] restore_tables: Specifies the database information.
               The restore_tables structure is documented below.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] restore_time: Specifies the backup time, in timestamp format.
               
               Changing this creates a new resource.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if last_table_info is not None:
            pulumi.set(__self__, "last_table_info", last_table_info)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if restore_tables is not None:
            pulumi.set(__self__, "restore_tables", restore_tables)
        if restore_time is not None:
            pulumi.set(__self__, "restore_time", restore_time)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the GaussDB mysql instance ID.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="lastTableInfo")
    def last_table_info(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the data is restored to the most recent table.
        Value options:
        + **true**: most recent table.
        + **false (default value)**: time-specific table.

        Changing this creates a new resource.

        <a name="restore_tables_struct"></a>
        The `restore_tables` block supports:
        """
        return pulumi.get(self, "last_table_info")

    @last_table_info.setter
    def last_table_info(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_table_info", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the GaussDB mysql table restore resource. If
        omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="restoreTables")
    def restore_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlTableRestoreRestoreTableArgs']]]]:
        """
        Specifies the database information.
        The restore_tables structure is documented below.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "restore_tables")

    @restore_tables.setter
    def restore_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlTableRestoreRestoreTableArgs']]]]):
        pulumi.set(self, "restore_tables", value)

    @_builtins.property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the backup time, in timestamp format.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "restore_time")

    @restore_time.setter
    def restore_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restore_time", value)


@pulumi.type_token("huaweicloud:GaussDB/mysqlTableRestore:MysqlTableRestore")
class MysqlTableRestore(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_table_info: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restore_tables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlTableRestoreRestoreTableArgs', 'MysqlTableRestoreRestoreTableArgsDict']]]]] = None,
                 restore_time: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use this resource restore tables to GaussDB MySQL instance within HuaweiCloud.

        > **NOTE:** Deleting restoration record is not supported. If you destroy a resource of restoration record,
        the restoration record is only removed from the state, but it remains in the cloud. And the instance doesn't return to
        the state before restoration.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        restore_time = config.require_object("restoreTime")
        backup_id = config.require_object("backupId")
        test = huaweicloud.gaussdb.MysqlTableRestore("test",
            instance_id=instance_id,
            restore_time=restore_time,
            last_table_info="true",
            restore_tables=[
                {
                    "database": "test_db",
                    "tables": [
                        {
                            "old_name": "table_old_1",
                            "new_name": "table_new_1",
                        },
                        {
                            "old_name": "table_old_2",
                            "new_name": "table_new_2",
                        },
                    ],
                },
                {
                    "database": "test_db1",
                    "tables": [{
                        "old_name": "table_old_1",
                        "new_name": "table_new_1",
                    }],
                },
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the GaussDB mysql instance ID.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] last_table_info: Specifies whether the data is restored to the most recent table.
               Value options:
               + **true**: most recent table.
               + **false (default value)**: time-specific table.
               
               Changing this creates a new resource.
               
               <a name="restore_tables_struct"></a>
               The `restore_tables` block supports:
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql table restore resource. If
               omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlTableRestoreRestoreTableArgs', 'MysqlTableRestoreRestoreTableArgsDict']]]] restore_tables: Specifies the database information.
               The restore_tables structure is documented below.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] restore_time: Specifies the backup time, in timestamp format.
               
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MysqlTableRestoreArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource restore tables to GaussDB MySQL instance within HuaweiCloud.

        > **NOTE:** Deleting restoration record is not supported. If you destroy a resource of restoration record,
        the restoration record is only removed from the state, but it remains in the cloud. And the instance doesn't return to
        the state before restoration.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        restore_time = config.require_object("restoreTime")
        backup_id = config.require_object("backupId")
        test = huaweicloud.gaussdb.MysqlTableRestore("test",
            instance_id=instance_id,
            restore_time=restore_time,
            last_table_info="true",
            restore_tables=[
                {
                    "database": "test_db",
                    "tables": [
                        {
                            "old_name": "table_old_1",
                            "new_name": "table_new_1",
                        },
                        {
                            "old_name": "table_old_2",
                            "new_name": "table_new_2",
                        },
                    ],
                },
                {
                    "database": "test_db1",
                    "tables": [{
                        "old_name": "table_old_1",
                        "new_name": "table_new_1",
                    }],
                },
            ])
        ```

        :param str resource_name: The name of the resource.
        :param MysqlTableRestoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MysqlTableRestoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_table_info: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 restore_tables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlTableRestoreRestoreTableArgs', 'MysqlTableRestoreRestoreTableArgsDict']]]]] = None,
                 restore_time: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MysqlTableRestoreArgs.__new__(MysqlTableRestoreArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["last_table_info"] = last_table_info
            __props__.__dict__["region"] = region
            if restore_tables is None and not opts.urn:
                raise TypeError("Missing required property 'restore_tables'")
            __props__.__dict__["restore_tables"] = restore_tables
            if restore_time is None and not opts.urn:
                raise TypeError("Missing required property 'restore_time'")
            __props__.__dict__["restore_time"] = restore_time
        super(MysqlTableRestore, __self__).__init__(
            'huaweicloud:GaussDB/mysqlTableRestore:MysqlTableRestore',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_table_info: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            restore_tables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlTableRestoreRestoreTableArgs', 'MysqlTableRestoreRestoreTableArgsDict']]]]] = None,
            restore_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'MysqlTableRestore':
        """
        Get an existing MysqlTableRestore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the GaussDB mysql instance ID.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] last_table_info: Specifies whether the data is restored to the most recent table.
               Value options:
               + **true**: most recent table.
               + **false (default value)**: time-specific table.
               
               Changing this creates a new resource.
               
               <a name="restore_tables_struct"></a>
               The `restore_tables` block supports:
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql table restore resource. If
               omitted, the provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlTableRestoreRestoreTableArgs', 'MysqlTableRestoreRestoreTableArgsDict']]]] restore_tables: Specifies the database information.
               The restore_tables structure is documented below.
               
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] restore_time: Specifies the backup time, in timestamp format.
               
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MysqlTableRestoreState.__new__(_MysqlTableRestoreState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["last_table_info"] = last_table_info
        __props__.__dict__["region"] = region
        __props__.__dict__["restore_tables"] = restore_tables
        __props__.__dict__["restore_time"] = restore_time
        return MysqlTableRestore(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the GaussDB mysql instance ID.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lastTableInfo")
    def last_table_info(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether the data is restored to the most recent table.
        Value options:
        + **true**: most recent table.
        + **false (default value)**: time-specific table.

        Changing this creates a new resource.

        <a name="restore_tables_struct"></a>
        The `restore_tables` block supports:
        """
        return pulumi.get(self, "last_table_info")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The region in which to create the GaussDB mysql table restore resource. If
        omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="restoreTables")
    def restore_tables(self) -> pulumi.Output[Sequence['outputs.MysqlTableRestoreRestoreTable']]:
        """
        Specifies the database information.
        The restore_tables structure is documented below.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "restore_tables")

    @_builtins.property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the backup time, in timestamp format.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "restore_time")

