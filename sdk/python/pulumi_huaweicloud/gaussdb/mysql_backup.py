# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MysqlBackupArgs', 'MysqlBackup']

@pulumi.input_type
class MysqlBackupArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MysqlBackup resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the backup.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the backup. It must start with a letter and consist of
               `4` to `64` characters. Only letters (case-sensitive), digits, hyphens (-), and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql instance resource. If omitted,
               the provider-level region will be used. Changing this creates a new instance resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the GaussDB MySQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the backup.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the backup. It must start with a letter and consist of
        `4` to `64` characters. Only letters (case-sensitive), digits, hyphens (-), and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the GaussDB mysql instance resource. If omitted,
        the provider-level region will be used. Changing this creates a new instance resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _MysqlBackupState:
    def __init__(__self__, *,
                 begin_time: Optional[pulumi.Input[_builtins.str]] = None,
                 datastores: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlBackupDatastoreArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.float]] = None,
                 take_up_time: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering MysqlBackup resources.
        :param pulumi.Input[_builtins.str] begin_time: Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param pulumi.Input[Sequence[pulumi.Input['MysqlBackupDatastoreArgs']]] datastores: Indicates the database information.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the backup.
        :param pulumi.Input[_builtins.str] end_time: Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the backup. It must start with a letter and consist of
               `4` to `64` characters. Only letters (case-sensitive), digits, hyphens (-), and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql instance resource. If omitted,
               the provider-level region will be used. Changing this creates a new instance resource.
        :param pulumi.Input[_builtins.float] size: Indicates the backup size in MB.
        :param pulumi.Input[_builtins.int] take_up_time: Indicates the backup duration in minutes.
        """
        if begin_time is not None:
            pulumi.set(__self__, "begin_time", begin_time)
        if datastores is not None:
            pulumi.set(__self__, "datastores", datastores)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if take_up_time is not None:
            pulumi.set(__self__, "take_up_time", take_up_time)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "begin_time")

    @begin_time.setter
    def begin_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "begin_time", value)

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MysqlBackupDatastoreArgs']]]]:
        """
        Indicates the database information.
        """
        return pulumi.get(self, "datastores")

    @datastores.setter
    def datastores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MysqlBackupDatastoreArgs']]]]):
        pulumi.set(self, "datastores", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the backup.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB MySQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the backup. It must start with a letter and consist of
        `4` to `64` characters. Only letters (case-sensitive), digits, hyphens (-), and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the GaussDB mysql instance resource. If omitted,
        the provider-level region will be used. Changing this creates a new instance resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Indicates the backup size in MB.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="takeUpTime")
    def take_up_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the backup duration in minutes.
        """
        return pulumi.get(self, "take_up_time")

    @take_up_time.setter
    def take_up_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "take_up_time", value)


@pulumi.type_token("huaweicloud:GaussDB/mysqlBackup:MysqlBackup")
class MysqlBackup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB MySQL backup resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdb.MysqlBackup("test",
            instance_id=instance_id,
            name="test_backup_name",
            description="test description")
        ```

        ## Import

        The GaussDB Mysql backup can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDB/mysqlBackup:MysqlBackup test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the backup.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the backup. It must start with a letter and consist of
               `4` to `64` characters. Only letters (case-sensitive), digits, hyphens (-), and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql instance resource. If omitted,
               the provider-level region will be used. Changing this creates a new instance resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MysqlBackupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB MySQL backup resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdb.MysqlBackup("test",
            instance_id=instance_id,
            name="test_backup_name",
            description="test description")
        ```

        ## Import

        The GaussDB Mysql backup can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:GaussDB/mysqlBackup:MysqlBackup test <id>
        ```

        :param str resource_name: The name of the resource.
        :param MysqlBackupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MysqlBackupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MysqlBackupArgs.__new__(MysqlBackupArgs)

            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["begin_time"] = None
            __props__.__dict__["datastores"] = None
            __props__.__dict__["end_time"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["take_up_time"] = None
        super(MysqlBackup, __self__).__init__(
            'huaweicloud:GaussDB/mysqlBackup:MysqlBackup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            begin_time: Optional[pulumi.Input[_builtins.str]] = None,
            datastores: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MysqlBackupDatastoreArgs', 'MysqlBackupDatastoreArgsDict']]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.float]] = None,
            take_up_time: Optional[pulumi.Input[_builtins.int]] = None) -> 'MysqlBackup':
        """
        Get an existing MysqlBackup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] begin_time: Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MysqlBackupDatastoreArgs', 'MysqlBackupDatastoreArgsDict']]]] datastores: Indicates the database information.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the backup.
        :param pulumi.Input[_builtins.str] end_time: Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the backup. It must start with a letter and consist of
               `4` to `64` characters. Only letters (case-sensitive), digits, hyphens (-), and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] region: The region in which to create the GaussDB mysql instance resource. If omitted,
               the provider-level region will be used. Changing this creates a new instance resource.
        :param pulumi.Input[_builtins.float] size: Indicates the backup size in MB.
        :param pulumi.Input[_builtins.int] take_up_time: Indicates the backup duration in minutes.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MysqlBackupState.__new__(_MysqlBackupState)

        __props__.__dict__["begin_time"] = begin_time
        __props__.__dict__["datastores"] = datastores
        __props__.__dict__["description"] = description
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["size"] = size
        __props__.__dict__["take_up_time"] = take_up_time
        return MysqlBackup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> pulumi.Output[Sequence['outputs.MysqlBackupDatastore']]:
        """
        Indicates the database information.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the description of the backup.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the GaussDB MySQL instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the backup. It must start with a letter and consist of
        `4` to `64` characters. Only letters (case-sensitive), digits, hyphens (-), and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the GaussDB mysql instance resource. If omitted,
        the provider-level region will be used. Changing this creates a new instance resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.float]:
        """
        Indicates the backup size in MB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="takeUpTime")
    def take_up_time(self) -> pulumi.Output[_builtins.int]:
        """
        Indicates the backup duration in minutes.
        """
        return pulumi.get(self, "take_up_time")

