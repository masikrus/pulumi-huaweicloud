# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlInstantTasksResult',
    'AwaitableGetMysqlInstantTasksResult',
    'get_mysql_instant_tasks',
    'get_mysql_instant_tasks_output',
]

@pulumi.output_type
class GetMysqlInstantTasksResult:
    """
    A collection of values returned by getMysqlInstantTasks.
    """
    def __init__(__self__, end_time=None, id=None, job_id=None, job_name=None, jobs=None, region=None, start_time=None, status=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if job_name and not isinstance(job_name, str):
            raise TypeError("Expected argument 'job_name' to be a str")
        pulumi.set(__self__, "job_name", job_name)
        if jobs and not isinstance(jobs, list):
            raise TypeError("Expected argument 'jobs' to be a list")
        pulumi.set(__self__, "jobs", jobs)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[_builtins.str]:
        """
        Indicates the task ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[_builtins.str]:
        """
        Indicates the task name. The value can be:
        + **CreateGaussDBforMySQLInstance**: Creating a DB instance.
        + **RestoreGaussDBforMySQLNewInstance**: Restoring data to a new DB instance.
        + **AddGaussDBforMySQLNodes**: Adding nodes.
        + **DeleteGaussDBforMySQLNode**: Deleting nodes.
        + **RebootGaussDBforMySQLInstance**: Rebooting a DB instance.
        + **ModifyGaussDBforMySQLPort**: Changing a database port.
        + **ModifyGaussDBforMySQLSecurityGroup**: Changing a security group.
        + **ResizeGaussDBforMySQLFlavor**: Changing instance specifications.
        + **SwitchoverGaussDBforMySQLMasterNode**: Promoting a read replica to primary.
        + **GaussDBforMySQLBindEIP**: Binding an EIP.
        + **GaussDBforMySQLUnbindEIP**: Unbinding an EIP.
        + **RenameGaussDBforMySQLInstance**: Changing a DB instance name.
        + **DeleteGaussDBforMySQLInstance**: Deleting a DB instance.
        + **UpgradeGaussDBforMySQLDatabaseVersion**: Upgrading an instance version.
        + **EnlargeGaussDBforMySQLProxy**: Adding nodes for a database proxy.
        + **OpenGaussDBforMySQLProxy**: Enabling database proxy.
        + **CloseGaussDBforMySQLProxy**: Disabling database proxy.
        + **GaussdbforMySQLModifyProxyIp**: Changing the IP address of a database proxy.
        + **ScaleGaussDBforMySQLProxy**: Changing the node specifications of a database proxy.
        + **GaussDBforMySQLModifyInstanceMetricExtend**: Enabling or disabling Monitoring by Seconds.
        + **GaussDBforMySQLModifyInstanceDataVip**: Changing the private IP address.
        + **GaussDBforMySQLSwitchSSL**: Enabling or disabling SSL.
        + **GaussDBforMySQLModifyProxyConsist**: Changing the proxy consistency.
        + **GaussDBforMySQLModifyProxyWeight**: Changing the read weights of nodes.
        """
        return pulumi.get(self, "job_name")

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence['outputs.GetMysqlInstantTasksJobResult']:
        """
        Indicates the task details.
        """
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the task execution status.
        The value can be:
        + **Pending**: The task is delayed and not executed.
        + **Running**: The task is being executed.
        + **Completed**: The task is successfully executed.
        + **Failed**: The task failed to be executed.
        """
        return pulumi.get(self, "status")


class AwaitableGetMysqlInstantTasksResult(GetMysqlInstantTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlInstantTasksResult(
            end_time=self.end_time,
            id=self.id,
            job_id=self.job_id,
            job_name=self.job_name,
            jobs=self.jobs,
            region=self.region,
            start_time=self.start_time,
            status=self.status)


def get_mysql_instant_tasks(end_time: Optional[_builtins.str] = None,
                            job_id: Optional[_builtins.str] = None,
                            job_name: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            start_time: Optional[_builtins.str] = None,
                            status: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlInstantTasksResult:
    """
    Use this data source to get the list of GaussDB MySQL instant tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDB.get_mysql_instant_tasks()
    ```


    :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str job_id: Specifies the task ID.
    :param _builtins.str job_name: Specifies the task name. Value options:
           + **CreateGaussDBforMySQLInstance**: Creating a DB instance.
           + **RestoreGaussDBforMySQLNewInstance**: Restoring data to a new DB instance.
           + **AddGaussDBforMySQLNodes**: Adding nodes.
           + **DeleteGaussDBforMySQLNode**: Deleting nodes.
           + **RebootGaussDBforMySQLInstance**: Rebooting a DB instance.
           + **ModifyGaussDBforMySQLPort**: Changing a database port.
           + **ModifyGaussDBforMySQLSecurityGroup**: Changing a security group.
           + **ResizeGaussDBforMySQLFlavor**: Changing instance specifications.
           + **SwitchoverGaussDBforMySQLMasterNode**: Promoting a read replica to primary.
           + **GaussDBforMySQLBindEIP**: Binding an EIP.
           + **GaussDBforMySQLUnbindEIP**: Unbinding an EIP.
           + **RenameGaussDBforMySQLInstance**: Changing a DB instance name.
           + **DeleteGaussDBforMySQLInstance**: Deleting a DB instance.
           + **UpgradeGaussDBforMySQLDatabaseVersion**: Upgrading an instance version.
           + **EnlargeGaussDBforMySQLProxy**: Adding nodes for a database proxy.
           + **OpenGaussDBforMySQLProxy**: Enabling database proxy.
           + **CloseGaussDBforMySQLProxy**: Disabling database proxy.
           + **GaussdbforMySQLModifyProxyIp**: Changing the IP address of a database proxy.
           + **ScaleGaussDBforMySQLProxy**: Changing the node specifications of a database proxy.
           + **GaussDBforMySQLModifyInstanceMetricExtend**: Enabling or disabling Monitoring by Seconds.
           + **GaussDBforMySQLModifyInstanceDataVip**: Changing the private IP address.
           + **GaussDBforMySQLSwitchSSL**: Enabling or disabling SSL.
           + **GaussDBforMySQLModifyProxyConsist**: Changing the proxy consistency.
           + **GaussDBforMySQLModifyProxyWeight**: Changing the read weights of nodes.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str status: Specifies the task execution status. Value options:
           + **Running**: The task is being executed.
           + **Completed**: The task is successfully executed.
           + **Failed**: The task failed to be executed.
           + **Pending**: The task is not executed.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['jobId'] = job_id
    __args__['jobName'] = job_name
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDB/getMysqlInstantTasks:getMysqlInstantTasks', __args__, opts=opts, typ=GetMysqlInstantTasksResult).value

    return AwaitableGetMysqlInstantTasksResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        job_id=pulumi.get(__ret__, 'job_id'),
        job_name=pulumi.get(__ret__, 'job_name'),
        jobs=pulumi.get(__ret__, 'jobs'),
        region=pulumi.get(__ret__, 'region'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'))
def get_mysql_instant_tasks_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   job_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   job_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMysqlInstantTasksResult]:
    """
    Use this data source to get the list of GaussDB MySQL instant tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDB.get_mysql_instant_tasks()
    ```


    :param _builtins.str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str job_id: Specifies the task ID.
    :param _builtins.str job_name: Specifies the task name. Value options:
           + **CreateGaussDBforMySQLInstance**: Creating a DB instance.
           + **RestoreGaussDBforMySQLNewInstance**: Restoring data to a new DB instance.
           + **AddGaussDBforMySQLNodes**: Adding nodes.
           + **DeleteGaussDBforMySQLNode**: Deleting nodes.
           + **RebootGaussDBforMySQLInstance**: Rebooting a DB instance.
           + **ModifyGaussDBforMySQLPort**: Changing a database port.
           + **ModifyGaussDBforMySQLSecurityGroup**: Changing a security group.
           + **ResizeGaussDBforMySQLFlavor**: Changing instance specifications.
           + **SwitchoverGaussDBforMySQLMasterNode**: Promoting a read replica to primary.
           + **GaussDBforMySQLBindEIP**: Binding an EIP.
           + **GaussDBforMySQLUnbindEIP**: Unbinding an EIP.
           + **RenameGaussDBforMySQLInstance**: Changing a DB instance name.
           + **DeleteGaussDBforMySQLInstance**: Deleting a DB instance.
           + **UpgradeGaussDBforMySQLDatabaseVersion**: Upgrading an instance version.
           + **EnlargeGaussDBforMySQLProxy**: Adding nodes for a database proxy.
           + **OpenGaussDBforMySQLProxy**: Enabling database proxy.
           + **CloseGaussDBforMySQLProxy**: Disabling database proxy.
           + **GaussdbforMySQLModifyProxyIp**: Changing the IP address of a database proxy.
           + **ScaleGaussDBforMySQLProxy**: Changing the node specifications of a database proxy.
           + **GaussDBforMySQLModifyInstanceMetricExtend**: Enabling or disabling Monitoring by Seconds.
           + **GaussDBforMySQLModifyInstanceDataVip**: Changing the private IP address.
           + **GaussDBforMySQLSwitchSSL**: Enabling or disabling SSL.
           + **GaussDBforMySQLModifyProxyConsist**: Changing the proxy consistency.
           + **GaussDBforMySQLModifyProxyWeight**: Changing the read weights of nodes.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param _builtins.str status: Specifies the task execution status. Value options:
           + **Running**: The task is being executed.
           + **Completed**: The task is successfully executed.
           + **Failed**: The task failed to be executed.
           + **Pending**: The task is not executed.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['jobId'] = job_id
    __args__['jobName'] = job_name
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDB/getMysqlInstantTasks:getMysqlInstantTasks', __args__, opts=opts, typ=GetMysqlInstantTasksResult)
    return __ret__.apply(lambda __response__: GetMysqlInstantTasksResult(
        end_time=pulumi.get(__response__, 'end_time'),
        id=pulumi.get(__response__, 'id'),
        job_id=pulumi.get(__response__, 'job_id'),
        job_name=pulumi.get(__response__, 'job_name'),
        jobs=pulumi.get(__response__, 'jobs'),
        region=pulumi.get(__response__, 'region'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status')))
