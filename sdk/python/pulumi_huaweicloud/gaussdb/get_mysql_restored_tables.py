# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlRestoredTablesResult',
    'AwaitableGetMysqlRestoredTablesResult',
    'get_mysql_restored_tables',
    'get_mysql_restored_tables_output',
]

@pulumi.output_type
class GetMysqlRestoredTablesResult:
    """
    A collection of values returned by getMysqlRestoredTables.
    """
    def __init__(__self__, database_name=None, databases=None, id=None, instance_id=None, last_table_info=None, region=None, restore_time=None, table_name=None):
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        pulumi.set(__self__, "databases", databases)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if last_table_info and not isinstance(last_table_info, str):
            raise TypeError("Expected argument 'last_table_info' to be a str")
        pulumi.set(__self__, "last_table_info", last_table_info)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if restore_time and not isinstance(restore_time, str):
            raise TypeError("Expected argument 'restore_time' to be a str")
        pulumi.set(__self__, "restore_time", restore_time)
        if table_name and not isinstance(table_name, str):
            raise TypeError("Expected argument 'table_name' to be a str")
        pulumi.set(__self__, "table_name", table_name)

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetMysqlRestoredTablesDatabaseResult']:
        """
        Indicates the database information.
        """
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lastTableInfo")
    def last_table_info(self) -> _builtins.str:
        return pulumi.get(self, "last_table_info")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> _builtins.str:
        return pulumi.get(self, "restore_time")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "table_name")


class AwaitableGetMysqlRestoredTablesResult(GetMysqlRestoredTablesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlRestoredTablesResult(
            database_name=self.database_name,
            databases=self.databases,
            id=self.id,
            instance_id=self.instance_id,
            last_table_info=self.last_table_info,
            region=self.region,
            restore_time=self.restore_time,
            table_name=self.table_name)


def get_mysql_restored_tables(database_name: Optional[_builtins.str] = None,
                              instance_id: Optional[_builtins.str] = None,
                              last_table_info: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              restore_time: Optional[_builtins.str] = None,
                              table_name: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlRestoredTablesResult:
    """
    Use this data source to get the available tables for table-level point-in-time recovery.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    restore_time = config.require_object("restoreTime")
    test = huaweicloud.GaussDB.get_mysql_restored_tables(instance_id=instance_id,
        restore_time=restore_time,
        last_table_info="true")
    ```


    :param _builtins.str database_name: Specifies the database name, which is used for fuzzy match.
    :param _builtins.str instance_id: Specifies the ID of the GaussDB MySQL instance,
    :param _builtins.str last_table_info: Specifies  whether data is restored to the most recent table.
           + **true**: most recent table.
           + **false**: time-specific table
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str restore_time: Specifies the backup time, in timestamp format.
    :param _builtins.str table_name: Specifies the table name, which is used for fuzzy match.
    """
    __args__ = dict()
    __args__['databaseName'] = database_name
    __args__['instanceId'] = instance_id
    __args__['lastTableInfo'] = last_table_info
    __args__['region'] = region
    __args__['restoreTime'] = restore_time
    __args__['tableName'] = table_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDB/getMysqlRestoredTables:getMysqlRestoredTables', __args__, opts=opts, typ=GetMysqlRestoredTablesResult).value

    return AwaitableGetMysqlRestoredTablesResult(
        database_name=pulumi.get(__ret__, 'database_name'),
        databases=pulumi.get(__ret__, 'databases'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        last_table_info=pulumi.get(__ret__, 'last_table_info'),
        region=pulumi.get(__ret__, 'region'),
        restore_time=pulumi.get(__ret__, 'restore_time'),
        table_name=pulumi.get(__ret__, 'table_name'))
def get_mysql_restored_tables_output(database_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     last_table_info: Optional[pulumi.Input[_builtins.str]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     restore_time: Optional[pulumi.Input[_builtins.str]] = None,
                                     table_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMysqlRestoredTablesResult]:
    """
    Use this data source to get the available tables for table-level point-in-time recovery.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    restore_time = config.require_object("restoreTime")
    test = huaweicloud.GaussDB.get_mysql_restored_tables(instance_id=instance_id,
        restore_time=restore_time,
        last_table_info="true")
    ```


    :param _builtins.str database_name: Specifies the database name, which is used for fuzzy match.
    :param _builtins.str instance_id: Specifies the ID of the GaussDB MySQL instance,
    :param _builtins.str last_table_info: Specifies  whether data is restored to the most recent table.
           + **true**: most recent table.
           + **false**: time-specific table
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str restore_time: Specifies the backup time, in timestamp format.
    :param _builtins.str table_name: Specifies the table name, which is used for fuzzy match.
    """
    __args__ = dict()
    __args__['databaseName'] = database_name
    __args__['instanceId'] = instance_id
    __args__['lastTableInfo'] = last_table_info
    __args__['region'] = region
    __args__['restoreTime'] = restore_time
    __args__['tableName'] = table_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDB/getMysqlRestoredTables:getMysqlRestoredTables', __args__, opts=opts, typ=GetMysqlRestoredTablesResult)
    return __ret__.apply(lambda __response__: GetMysqlRestoredTablesResult(
        database_name=pulumi.get(__response__, 'database_name'),
        databases=pulumi.get(__response__, 'databases'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        last_table_info=pulumi.get(__response__, 'last_table_info'),
        region=pulumi.get(__response__, 'region'),
        restore_time=pulumi.get(__response__, 'restore_time'),
        table_name=pulumi.get(__response__, 'table_name')))
